void sub_1BF7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, char a17)
{
  unsigned __int8 *v17;

  if (v17) {
    std::__destruct_n::__process[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&a15, v17);
  }
  _Unwind_Resume(exception_object);
}

void std::__inplace_merge<std::_ClassicAlgPolicy,Preprocessing::snr_spl_data_filtering(void)::$_0 &,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7)
{
  uint64_t v81 = a5;
  if (!a5) {
    return;
  }
  while (v81 > a7 && a4 > a7)
  {
    if (!a4) {
      return;
    }
    uint64_t v12 = 0;
    uint64_t v13 = -a4;
    while (1)
    {
      uint64_t v14 = a1;
      uint64_t v15 = a1 + v12;
      v16 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "spl");
      LODWORD(v88) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v16, (float *)&v88);
      float v17 = *(float *)&v88;
      v18 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1 + v12, "spl");
      LODWORD(v88) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v18, (float *)&v88);
      if (v17 < *(float *)&v88) {
        break;
      }
      v12 += 16;
      if (__CFADD__(v13++, 1)) {
        return;
      }
    }
    uint64_t v20 = -v13;
    uint64_t v21 = v81;
    uint64_t v79 = a7;
    uint64_t v80 = a3;
    if (-v13 >= v81)
    {
      if (v13 == -1)
      {
        uint64_t v74 = a1 + v12;
        char v75 = *(unsigned char *)(a1 + v12);
        *(unsigned char *)uint64_t v74 = *(unsigned char *)a2;
        *(unsigned char *)a2 = v75;
        uint64_t v76 = *(void *)(a1 + v12 + 8);
        *(void *)(v74 + 8) = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v76;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + v12);
        return;
      }
      if (v13 > 0) {
        uint64_t v20 = 1 - v13;
      }
      uint64_t v30 = v20 >> 1;
      uint64_t v25 = a1 + 16 * (v20 >> 1) + v12;
      uint64_t v31 = a3;
      uint64_t v24 = a2;
      if (a2 != v31)
      {
        uint64_t v78 = v30;
        unint64_t v32 = (v80 - a2) >> 4;
        uint64_t v24 = a2;
        do
        {
          uint64_t v33 = v24 + 16 * (v32 >> 1);
          v34 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v33, "spl");
          LODWORD(v88) = 0;
          nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v34, (float *)&v88);
          float v35 = *(float *)&v88;
          v36 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v25, "spl");
          LODWORD(v88) = 0;
          nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v36, (float *)&v88);
          if (v35 >= *(float *)&v88) {
            v32 >>= 1;
          }
          else {
            v32 += ~(v32 >> 1);
          }
          if (v35 < *(float *)&v88) {
            uint64_t v24 = v33 + 16;
          }
        }
        while (v32);
        uint64_t v21 = v81;
        uint64_t v30 = v78;
      }
      uint64_t v23 = (v24 - a2) >> 4;
    }
    else
    {
      if (v81 >= 0) {
        uint64_t v22 = v81;
      }
      else {
        uint64_t v22 = v81 + 1;
      }
      uint64_t v23 = v22 >> 1;
      uint64_t v24 = a2 + 16 * (v22 >> 1);
      uint64_t v25 = a2;
      if (a2 - a1 != v12)
      {
        uint64_t v77 = v22 >> 1;
        unint64_t v26 = (a2 - a1 - v12) >> 4;
        uint64_t v25 = a1 + v12;
        do
        {
          v27 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v24, "spl");
          LODWORD(v88) = 0;
          nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v27, (float *)&v88);
          float v28 = *(float *)&v88;
          v29 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v25 + 16 * (v26 >> 1), "spl");
          LODWORD(v88) = 0;
          nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v29, (float *)&v88);
          if (v28 < *(float *)&v88)
          {
            v26 >>= 1;
          }
          else
          {
            v25 += 16 * (v26 >> 1) + 16;
            v26 += ~(v26 >> 1);
          }
        }
        while (v26);
        uint64_t v21 = v81;
        uint64_t v14 = a1;
        uint64_t v23 = v77;
      }
      uint64_t v30 = (v25 - v14 - v12) >> 4;
    }
    if (v25 == a2)
    {
      uint64_t v41 = v24;
    }
    else if (v24 == a2)
    {
      uint64_t v41 = v25;
    }
    else
    {
      uint64_t v37 = a2;
      uint64_t v38 = v30;
      uint64_t v39 = v23;
      uint64_t v40 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>>(v25, v37, v24);
      uint64_t v23 = v39;
      uint64_t v30 = v38;
      uint64_t v21 = v81;
      uint64_t v41 = v40;
    }
    a4 = -(v30 + v13);
    uint64_t v42 = v21 - v23;
    if (v30 + v23 >= v21 - (v30 + v23) - v13)
    {
      uint64_t v44 = v30;
      uint64_t v45 = v23;
      std::__inplace_merge<std::_ClassicAlgPolicy,Preprocessing::snr_spl_data_filtering(void)::$_0 &,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>>(v41, v24, v80, a4, v42, a6, v79);
      a3 = v41;
      a2 = v25;
      a7 = v79;
      uint64_t v42 = v45;
      a4 = v44;
    }
    else
    {
      uint64_t v43 = v25;
      a7 = v79;
      std::__inplace_merge<std::_ClassicAlgPolicy,Preprocessing::snr_spl_data_filtering(void)::$_0 &,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>>(a1 + v12, v43, v41, v30, v23, a6, v79);
      uint64_t v15 = v41;
      a2 = v24;
      a3 = v80;
    }
    uint64_t v81 = v42;
    a1 = v15;
    if (!v42) {
      return;
    }
  }
  if (a4 <= v81)
  {
    if (a1 != a2)
    {
      uint64_t v60 = 0;
      unint64_t v61 = 0;
      do
      {
        v62 = &a6[v60];
        uint64_t v63 = a1 + v60;
        unsigned __int8 *v62 = *(unsigned char *)(a1 + v60);
        *((void *)v62 + 1) = *(void *)(a1 + v60 + 8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + v60);
        *(unsigned char *)uint64_t v63 = 0;
        *(void *)(v63 + 8) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a6[v60]);
        ++v61;
        v60 += 16;
      }
      while (v63 + 16 != a2);
      unint64_t v83 = v61;
      if (v60)
      {
        uint64_t v64 = (uint64_t)&a6[v60];
        uint64_t v65 = (uint64_t)a6;
        while (a2 != a3)
        {
          v66 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "spl");
          float v84 = 0.0;
          nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v66, &v84);
          float v67 = v84;
          v68 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v65, "spl");
          float v84 = 0.0;
          nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v68, &v84);
          if (v67 >= v84)
          {
            v86[0] = *(unsigned char *)v65;
            v87 = *(uint64_t **)(v65 + 8);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v65);
            *(unsigned char *)uint64_t v65 = 0;
            *(void *)(v65 + 8) = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v86);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v86);
            uint64_t v69 = a1;
            unsigned __int8 v72 = *(unsigned char *)a1;
            *(unsigned char *)a1 = v86[0];
            v86[0] = v72;
            v73 = *(uint64_t **)(a1 + 8);
            *(void *)(a1 + 8) = v87;
            v87 = v73;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v86);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v87, v86[0]);
            v65 += 16;
          }
          else
          {
            LOBYTE(v88) = *(unsigned char *)a2;
            v89 = *(uint64_t **)(a2 + 8);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
            *(unsigned char *)a2 = 0;
            *(void *)(a2 + 8) = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v88);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v88);
            uint64_t v69 = a1;
            unsigned __int8 v70 = *(unsigned char *)a1;
            *(unsigned char *)a1 = v88;
            LOBYTE(v88) = v70;
            v71 = *(uint64_t **)(a1 + 8);
            *(void *)(a1 + 8) = v89;
            v89 = v71;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v88);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v89, v88);
            a2 += 16;
          }
          a1 = v69 + 16;
          if (v64 == v65) {
            goto LABEL_72;
          }
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v84, v65, v64, a1);
      }
      goto LABEL_72;
    }
  }
  else if (a3 != a2)
  {
    uint64_t v46 = 0;
    unint64_t v47 = 0;
    do
    {
      v48 = &a6[v46];
      uint64_t v49 = a2 + v46;
      unsigned __int8 *v48 = *(unsigned char *)(a2 + v46);
      *((void *)v48 + 1) = *(void *)(a2 + v46 + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2 + v46);
      *(unsigned char *)uint64_t v49 = 0;
      *(void *)(v49 + 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a6[v46]);
      ++v47;
      v46 += 16;
    }
    while (v49 + 16 != a3);
    unint64_t v83 = v47;
    if (v46)
    {
      uint64_t v50 = (uint64_t)&a6[v46];
      uint64_t v51 = a3;
      uint64_t v52 = a3 - 16;
      while (a2 != a1)
      {
        v53 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v50 - 16, "spl");
        LODWORD(v88) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v53, (float *)&v88);
        float v54 = *(float *)&v88;
        v55 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2 - 16, "spl");
        LODWORD(v88) = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v55, (float *)&v88);
        if (v54 >= *(float *)&v88)
        {
          LOBYTE(v84) = *(unsigned char *)(v50 - 16);
          v85 = *(uint64_t **)(v50 - 8);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v50 - 16);
          *(unsigned char *)(v50 - 16) = 0;
          *(void *)(v50 - 8) = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v84);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v84);
          unsigned __int8 v58 = *(unsigned char *)v52;
          *(unsigned char *)uint64_t v52 = LOBYTE(v84);
          LOBYTE(v84) = v58;
          v59 = *(uint64_t **)(v52 + 8);
          *(void *)(v52 + 8) = v85;
          v85 = v59;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v52);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v84);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v85, LOBYTE(v84));
          v50 -= 16;
        }
        else
        {
          v86[0] = *(unsigned char *)(a2 - 16);
          v87 = *(uint64_t **)(a2 - 8);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2 - 16);
          *(unsigned char *)(a2 - 16) = 0;
          *(void *)(a2 - 8) = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v86);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v86);
          unsigned __int8 v56 = *(unsigned char *)v52;
          *(unsigned char *)uint64_t v52 = v86[0];
          v86[0] = v56;
          v57 = *(uint64_t **)(v52 + 8);
          *(void *)(v52 + 8) = v87;
          v87 = v57;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v52);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v86);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v87, v86[0]);
          a2 -= 16;
        }
        v51 -= 16;
        v52 -= 16;
        if ((unsigned __int8 *)v50 == a6) {
          goto LABEL_72;
        }
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>,std::reverse_iterator<std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>>>((uint64_t)&a6[v46], v50, (uint64_t)a6, a3, v51, &v88);
    }
    goto LABEL_72;
  }
  unint64_t v83 = 0;
LABEL_72:
  if (a6) {
    std::__destruct_n::__process[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v83, a6);
  }
}

void sub_1BFF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16)
{
  if (v16) {
    std::__destruct_n::__process[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&a16, v16);
  }
  _Unwind_Resume(exception_object);
}

void std::__destruct_n::__process[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(unint64_t *a1, unsigned __int8 *a2)
{
  if (*a1)
  {
    unint64_t v4 = 0;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a2);
      v5 = (uint64_t **)(a2 + 8);
      int v6 = *a2;
      a2 += 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v5, v6);
      ++v4;
    }
    while (v4 < *a1);
  }
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    v10[0] = *(unsigned char *)v5;
    v11 = *(uint64_t **)(v5 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
    *(unsigned char *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    unsigned __int8 v7 = *(unsigned char *)a4;
    *(unsigned char *)a4 = v10[0];
    v10[0] = v7;
    v8 = *(uint64_t **)(a4 + 8);
    *(void *)(a4 + 8) = v11;
    v11 = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
    a4 += 16;
    v5 += 16;
  }
  while (v5 != v6);
  return v6;
}

void std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>,std::reverse_iterator<std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void *a6@<X8>)
{
  uint64_t v8 = a2;
  if (a2 != a3)
  {
    uint64_t v12 = 0;
    do
    {
      v16[0] = *(unsigned char *)(v8 + v12 - 16);
      float v17 = *(uint64_t **)(v8 + v12 - 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8 + v12 - 16);
      *(unsigned char *)(v8 + v12 - 16) = 0;
      *(void *)(v8 + v12 - 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
      char v14 = *(unsigned char *)(a5 + v12 - 16);
      uint64_t v13 = a5 + v12 - 16;
      *(unsigned char *)uint64_t v13 = v16[0];
      v16[0] = v14;
      uint64_t v15 = *(uint64_t **)(a5 + v12 - 8);
      *(void *)(v13 + 8) = v17;
      float v17 = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
      v12 -= 16;
    }
    while (v8 + v12 != a3);
    a5 += v12;
    uint64_t v8 = a3;
  }
  *a6 = a1;
  a6[1] = v8;
  a6[2] = a4;
  a6[3] = a5;
}

uint64_t std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  char v6 = *(unsigned char *)a1;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)a2 = v6;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  uint64_t v8 = a1 + 16;
  for (uint64_t i = v4 + 16; i != a3; i += 16)
  {
    if (v8 == v4) {
      uint64_t v4 = i;
    }
    char v10 = *(unsigned char *)v8;
    *(unsigned char *)uint64_t v8 = *(unsigned char *)i;
    *(unsigned char *)uint64_t i = v10;
    uint64_t v11 = *(void *)(v8 + 8);
    *(void *)(v8 + 8) = *(void *)(i + 8);
    *(void *)(i + 8) = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
    v8 += 16;
  }
  if (v8 != v4)
  {
    uint64_t v12 = v8;
    uint64_t v13 = v4;
    do
    {
      while (1)
      {
        char v14 = *(unsigned char *)v12;
        *(unsigned char *)uint64_t v12 = *(unsigned char *)v13;
        *(unsigned char *)uint64_t v13 = v14;
        uint64_t v15 = *(void *)(v12 + 8);
        *(void *)(v12 + 8) = *(void *)(v13 + 8);
        *(void *)(v13 + 8) = v15;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
        v12 += 16;
        v13 += 16;
        if (v13 == a3) {
          break;
        }
        if (v12 == v4) {
          uint64_t v4 = v13;
        }
      }
      uint64_t v13 = v4;
    }
    while (v12 != v4);
  }
  return v8;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - a2;
      uint64_t v20 = (uint64_t)(v12 - a2) >> 4;
      if (v20 >= a5)
      {
        uint64_t v21 = a3 + 16 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 16 * v20;
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v9, v21, a4, *(void *)(v9 - 8));
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__move_range((uint64_t)a1, v5, v12, v5 + 16 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = (a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v29 = v9;
      if (v17) {
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::TransitionModel::Tuple>>(v9, v17);
      }
      else {
        v18 = 0;
      }
      uint64_t v22 = (uint64_t)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      uint64_t v27 = v22;
      float v28 = &v18[16 * v17];
      uint64_t v23 = 16 * a5;
      uint64_t v24 = v22 + 16 * a5;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v22, v7);
        v22 += 16;
        v7 += 16;
        v23 -= 16;
      }
      while (v23);
      uint64_t v27 = v24;
      uint64_t v5 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_1C0448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(unsigned char *)uint64_t v8 = *(unsigned char *)v10;
      *(void *)(v8 + 8) = *(void *)(v10 + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
      *(unsigned char *)unint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
      v8 += 16;
      v10 += 16;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v12, a2, v7, v6);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      v12[0] = *(unsigned char *)(a3 + v7 - 16);
      uint64_t v13 = *(uint64_t **)(a3 + v7 - 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3 + v7 - 16);
      *(unsigned char *)(a3 + v7 - 16) = 0;
      *(void *)(a3 + v7 - 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
      char v9 = *(unsigned char *)(a4 + v7 - 16);
      uint64_t v8 = a4 + v7 - 16;
      *(unsigned char *)uint64_t v8 = v12[0];
      v12[0] = v9;
      uint64_t v10 = *(uint64_t **)(a4 + v7 - 8);
      *(void *)(v8 + 8) = v13;
      uint64_t v13 = v10;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
      v7 -= 16;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v10, v5);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    unsigned __int8 v7 = *(unsigned char *)a4;
    *(unsigned char *)a4 = v10[0];
    v10[0] = v7;
    uint64_t v8 = *(uint64_t **)(a4 + 8);
    *(void *)(a4 + 8) = v11;
    uint64_t v11 = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
    v5 += 16;
    a4 += 16;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(unsigned char *)uint64_t v4 = *(unsigned char *)v6;
      *(void *)(v4 + 8) = *(void *)(v6 + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
      *(unsigned char *)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      uint64_t v4 = v11 + 16;
      v11 += 16;
      v6 += 16;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void std::allocate_shared[abi:ne180100]<Mel,std::allocator<Mel>,double,int &,int,int,int,int,BOOL,BOOL,BOOL,BOOL,BOOL,int,char const(&)[11],void>(uint64_t a1, double *a2, int *a3, int *a4, int *a5, int *a6, int *a7, char *a8, char *a9, char *a10, char *a11, char *a12, int *a13, char *a14)
{
  uint64_t v20 = operator new(0x118uLL);
  std::__shared_ptr_emplace<Mel>::__shared_ptr_emplace[abi:ne180100]<double,int &,int,int,int,int,BOOL,BOOL,BOOL,BOOL,BOOL,int,char const(&)[11],std::allocator<Mel>,0>(v20, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void sub_1C08E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Mel>::__shared_ptr_emplace[abi:ne180100]<double,int &,int,int,int,int,BOOL,BOOL,BOOL,BOOL,BOOL,int,char const(&)[11],std::allocator<Mel>,0>(void *a1, double *a2, int *a3, int *a4, int *a5, int *a6, int *a7, char *a8, char *a9, char *a10, char *a11, char *a12, int *a13, char *a14)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26F240;
  std::allocator<Mel>::construct[abi:ne180100]<Mel,double,int &,int,int,int,int,BOOL,BOOL,BOOL,BOOL,BOOL,int,char const(&)[11]>((uint64_t)&v14, (Mel *)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void sub_1C0980(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<Mel>::construct[abi:ne180100]<Mel,double,int &,int,int,int,int,BOOL,BOOL,BOOL,BOOL,BOOL,int,char const(&)[11]>(uint64_t a1, Mel *a2, double *a3, int *a4, int *a5, int *a6, int *a7, int *a8, char *a9, char *a10, char *a11, char *a12, char *a13, int *a14, char *a15)
{
  float v15 = *a3;
  int v26 = *a4;
  int v16 = *a5;
  int v17 = *a6;
  int v18 = *a7;
  int v19 = *a8;
  char v20 = *a9;
  char v21 = *a10;
  char v22 = *a11;
  char v23 = *a12;
  char v24 = *a13;
  int v25 = *a14;
  std::string::basic_string[abi:ne180100]<0>(&__p, a15);
  Mel::Mel(a2, v26, v16, v17, v18, v19, v20, v21, v15, v22, v23, v24, v25, &__p);
}

void sub_1C0A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<InferenceEngine::Mil2BnnsMilInferenceModel,std::allocator<InferenceEngine::Mil2BnnsMilInferenceModel>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  v2 = operator new(0x138uLL);
  result = std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilInferenceModel>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<InferenceEngine::Mil2BnnsMilInferenceModel>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1C0AE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilInferenceModel>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<InferenceEngine::Mil2BnnsMilInferenceModel>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26F2D0;
  InferenceEngine::Mil2BnnsMilInferenceModel::Mil2BnnsMilInferenceModel(a1 + 3);
  return a1;
}

void sub_1C0B44(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26F2D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26F2D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilInferenceModel>::__on_zero_shared(uint64_t a1)
{
}

void std::__function::__func<Preprocessing::apply_noise_reduction(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0,std::allocator<Preprocessing::apply_noise_reduction(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0>,unsigned long ()(unsigned long,float *)>::~__func()
{
}

__n128 std::__function::__func<Preprocessing::apply_noise_reduction(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0,std::allocator<Preprocessing::apply_noise_reduction(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0>,unsigned long ()(unsigned long,float *)>::__clone(uint64_t a1)
{
  v2 = (char *)operator new(0x38uLL);
  *(void *)v2 = off_26F320;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<Preprocessing::apply_noise_reduction(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0,std::allocator<Preprocessing::apply_noise_reduction(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0>,unsigned long ()(unsigned long,float *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_26F320;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<Preprocessing::apply_noise_reduction(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0,std::allocator<Preprocessing::apply_noise_reduction(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0>,unsigned long ()(unsigned long,float *)>::operator()(uint64_t a1, unint64_t *a2, void **a3)
{
  unint64_t v4 = *a2;
  uint64_t v5 = (char *)*a3;
  uint64_t v6 = **(void **)(a1 + 40);
  unint64_t v7 = *(void *)(a1 + 32) - v6;
  if (v7 >= *a2) {
    unint64_t v8 = *a2;
  }
  else {
    unint64_t v8 = *(void *)(a1 + 32) - v6;
  }
  memcpy(v5, (const void *)(**(void **)(a1 + 48) + 4 * v6), 4 * v8);
  **(void **)(a1 + 40) += v8;
  if (v7 < v4)
  {
    uint64_t v9 = 4 * v4 - 4 * v7;
    if (v9 >= 1) {
      bzero(&v5[4 * v7], 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
    }
  }
  return v4;
}

uint64_t std::__function::__func<Preprocessing::apply_noise_reduction(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0,std::allocator<Preprocessing::apply_noise_reduction(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0>,unsigned long ()(unsigned long,float *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **std::__function::__func<Preprocessing::apply_noise_reduction(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0,std::allocator<Preprocessing::apply_noise_reduction(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0>,unsigned long ()(unsigned long,float *)>::target_type()
{
}

void *std::__function::__value_func<unsigned long ()(unsigned long,float *)>::~__value_func[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](unsigned __int8 *a1, const void **a2)
{
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    uint64_t v5 = operator new(0x18uLL);
    v5[2] = 0;
    v5[1] = 0;
    *uint64_t v5 = v5 + 1;
    *((void *)a1 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    int v4 = *a1;
  }
  if (v4 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    uint64_t v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v12, v9);
    uint64_t v10 = std::string::insert(&v12, 0, "cannot use operator[] with a string argument with ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
    long long v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(305, (uint64_t)&v13, exception);
  }
  uint64_t v6 = (uint64_t **)*((void *)a1 + 1);
  *(void *)&long long v13 = a2;
  return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v13)+ 7;
}

void sub_1C0F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__insert_node_at(a1, v11, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1C108C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  return this;
}

void *std::allocate_shared[abi:ne180100]<SiriTTS::SpeechFeature::SpeechFeatureExtractor,std::allocator<SiriTTS::SpeechFeature::SpeechFeatureExtractor>,std::string const&,BOOL,void>@<X0>(void *a1@<X8>)
{
  v2 = operator new(0x28uLL);
  __n128 result = std::__shared_ptr_emplace<SiriTTS::SpeechFeature::SpeechFeatureExtractor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL,std::allocator<SiriTTS::SpeechFeature::SpeechFeatureExtractor>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1C1160(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SiriTTS::SpeechFeature::SpeechFeatureExtractor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL,std::allocator<SiriTTS::SpeechFeature::SpeechFeatureExtractor>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26F3B0;
  SiriTTS::SpeechFeature::SpeechFeatureExtractor::SpeechFeatureExtractor(a1 + 3);
  return a1;
}

void sub_1C11BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SiriTTS::SpeechFeature::SpeechFeatureExtractor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26F3B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SiriTTS::SpeechFeature::SpeechFeatureExtractor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26F3B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<SiriTTS::SpeechFeature::SpeechFeatureExtractor>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::vector<SiriTTS::SpeechFeature::WordData>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SiriTTS::SpeechFeature::WordData>,std::reverse_iterator<SiriTTS::SpeechFeature::WordData*>,std::reverse_iterator<SiriTTS::SpeechFeature::WordData*>,std::reverse_iterator<SiriTTS::SpeechFeature::WordData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SiriTTS::SpeechFeature::WordData>,std::reverse_iterator<SiriTTS::SpeechFeature::WordData*>,std::reverse_iterator<SiriTTS::SpeechFeature::WordData*>,std::reverse_iterator<SiriTTS::SpeechFeature::WordData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 48;
      *((void *)&v14 + 1) -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::SpeechFeature::WordData>,std::reverse_iterator<SiriTTS::SpeechFeature::WordData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::SpeechFeature::WordData>,std::reverse_iterator<SiriTTS::SpeechFeature::WordData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::ForcedAlignment::Lexeme>,std::reverse_iterator<SiriTTS::ForcedAlignment::Lexeme*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(uint64_t *a1, uint64_t *a2)
{
  int v4 = operator new(0x18uLL);
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((*a2 - *a1) >> 3);
  v4[1] = 0;
  v4[2] = 0;
  *int v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(v4, v5, v6, v7);
  return v4;
}

void sub_1C1430(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::string const*,std::string const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C14AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::string const*,std::string const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>(v4, v6);
      v6 += 24;
      uint64_t v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C155C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

char *std::vector<short>::__assign_with_size[abi:ne180100]<std::__wrap_iter<short const*>,std::__wrap_iter<short const*>>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  unint64_t v8 = *((void *)result + 2);
  char v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(void *)result) >> 1)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (v8 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    uint64_t result = std::vector<short>::__vallocate[abi:ne180100](v7, v11);
    long long v13 = (char *)v7[1];
    char v12 = (void **)(v7 + 1);
    char v9 = v13;
LABEL_17:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      int v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  char v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 1;
  if (v15 >= a4) {
    goto LABEL_17;
  }
  int v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, 2 * v15);
    char v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    int v19 = v16;
LABEL_19:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *char v12 = &v9[v17];
  return result;
}

__n128 *std::vector<std::vector<float>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        uint64_t v21 = a3 + 24 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - (void)a2) >> 3);
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v9, v21, a4, *(void **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<std::vector<float>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)v5 + 24 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v23, a3, v21, (char *)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Vector<float>>>(v9, v18);
      }
      else {
        int v19 = 0;
      }
      char v23 = v19;
      char v24 = &v19[24 * v15];
      int v25 = v24;
      int v26 = &v19[24 * v18];
      std::__split_buffer<std::vector<float>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<float>*>>(&v23, a3, a5);
      uint64_t v5 = (__n128 *)std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<std::vector<std::pair<int,int>>>::~__split_buffer((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_1C186C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

__n128 *std::vector<std::vector<float>>::__move_range(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (__n128 *)((char *)a2 + v6 - a4);
  unint64_t v8 = (__n128 *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    unint64_t v8 = *(__n128 **)(a1 + 8);
    do
    {
      v8->n128_u64[0] = 0;
      v8->n128_u64[1] = 0;
      v8[1].n128_u64[0] = 0;
      __n128 *v8 = *v9;
      v8[1].n128_u64[0] = v9[1].n128_u64[0];
      v9->n128_u64[0] = 0;
      v9->n128_u64[1] = 0;
      v9[1].n128_u64[0] = 0;
      unint64_t v8 = (__n128 *)((char *)v8 + 24);
      uint64_t v9 = (__n128 *)((char *)v9 + 24);
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::vector<float> *,std::vector<float> *,std::vector<float> *,0>(a2, v7, v6);
}

void *std::__split_buffer<std::vector<float>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<float>*>>(void *result, uint64_t a2, uint64_t a3)
{
  long long v3 = result;
  uint64_t v4 = (void *)result[2];
  if (a3)
  {
    uint64_t v6 = &v4[3 * a3];
    uint64_t v7 = 24 * a3;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      v4 += 3;
      a2 += 24;
      v7 -= 24;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1C1970(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v7, (uint64_t)a3, a1[1], (void *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

__n128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::vector<float> *,std::vector<float> *,std::vector<float> *,0>(__n128 *a1, __n128 *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v6 = (__n128 *)((char *)v6 - 24);
      a3 -= 24;
      std::vector<float>::__move_assign(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

void *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      v4[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

void *InferenceEngine::DataUtils::get_type_string<float>@<X0>(void *a1@<X8>)
{
  {
    uint64_t v2 = "fp32";
  }
  else
  {
      InferenceEngine::DataUtils::get_type_string<float>();
    uint64_t v2 = "int32";
  }

  return std::string::basic_string[abi:ne180100]<0>(a1, v2);
}

void *std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long> &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<InferenceEngine::DataTensor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string,std::vector<unsigned long> &,std::allocator<InferenceEngine::DataTensor>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1C1BF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<InferenceEngine::DataTensor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string,std::vector<unsigned long> &,std::allocator<InferenceEngine::DataTensor>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26F400;
  InferenceEngine::DataTensor::DataTensor(a1 + 3);
  return a1;
}

void sub_1C1C50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::DataTensor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26F400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::DataTensor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26F400;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t std::__shared_ptr_emplace<InferenceEngine::DataTensor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>()
{
  __assert_rtn("operator[]", "json.hpp", 3713, "m_value.object->find(key) != m_value.object->end()");
}

void Preprocessing::validate_input_audio(uint64_t *a1, NSObject *a2)
{
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = (uint64_t *)*a1;
  }
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_error_impl(&def_5A5E8, a2, OS_LOG_TYPE_ERROR, "Can't read metadata from %s", (uint8_t *)&v3, 0xCu);
}

void InferenceEngine::DataTensor::get_1d_array<float>()
{
}

{
  __assert_rtn("get_1d_array", "DataTensor.hpp", 242, "typeid(T) == typeid(float)");
}

{
  __assert_rtn("get_1d_array", "DataTensor.hpp", 244, "typeid(T) == typeid(int32_t)");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*()
{
  __assert_rtn("operator*", "iter_impl.hpp", 242, "m_object != nullptr");
}

{
  __assert_rtn("operator*", "iter_impl.hpp", 248, "m_it.object_iterator != m_object->m_value.object->end()");
}

{
  __assert_rtn("operator*", "iter_impl.hpp", 254, "m_it.array_iterator != m_object->m_value.array->end()");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==()
{
  __assert_rtn("operator==", "iter_impl.hpp", 405, "m_object != nullptr");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++()
{
  __assert_rtn("operator++", "iter_impl.hpp", 324, "m_object != nullptr");
}

void InferenceEngine::DataUtils::get_type_string<float>()
{
}

uint64_t SiriTTS::TTSTrainer::TTSTrainer(uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4, const std::string *a5)
{
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v9 = (std::string *)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v10 = (std::string *)(a1 + 24);
  uint64_t v11 = (std::string *)(a1 + 72);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  std::string::operator=((std::string *)a1, a2);
  std::string::operator=(v10, a3);
  std::string::operator=(v9, a4);
  *(_WORD *)(a1 + 96) = 0;
  std::string::operator=(v11, a5);
  return a1;
}

void sub_1C1FE0(_Unwind_Exception *a1)
{
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 144);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  SiriTTS::TTSTrainer::TTSTrainer(v1, v4, v2, v3);
  _Unwind_Resume(a1);
}

void SiriTTS::TTSTrainer::~TTSTrainer(SiriTTS::TTSTrainer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void SiriTTS::TTSTrainer::get_task_id_(SiriTTS::TTSTrainer *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((void *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 11);
  }
}

uint64_t SiriTTS::TTSTrainer::preprocess(const void **a1, uint64_t a2)
{
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  uint64_t v3 = SiriTTS::TTSTrainer::preprocess_internal(a1, (uint64_t)v5);
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100](v5);
  return v3;
}

void sub_1C2148(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a2 == 1)
  {
    uint64_t v6 = __cxa_begin_catch(a1);
    LogObject = Diagnostics_GetLogObject();
    if (os_log_type_enabled(LogObject, OS_LOG_TYPE_ERROR)) {
      SiriTTS::TTSTrainer::preprocess(v3, (uint64_t)v6);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C2114);
  }
  _Unwind_Resume(a1);
}

uint64_t SiriTTS::TTSTrainer::preprocess_internal(const void **a1, uint64_t a2)
{
  if (*((unsigned char *)a1 + 97))
  {
    LogObject = Diagnostics_GetLogObject();
    if (!os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    uint64_t v4 = a1 + 9;
    if (*((char *)a1 + 95) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v4;
    uint64_t v5 = "TaskId: %s, Trainer has been stopped/paused, return immediately.";
    uint64_t v6 = LogObject;
LABEL_6:
    _os_log_impl(&def_5A5E8, v6, OS_LOG_TYPE_INFO, v5, buf, 0xCu);
    return 0;
  }
  if (*(void *)(a2 + 24)) {
    std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()(a2, 1, 0);
  }
  if (*((char *)a1 + 23) >= 0) {
    size_t v9 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v9 = (size_t)a1[1];
  }
  uint64_t v10 = buf;
  std::string::basic_string[abi:ne180100]((uint64_t)buf, v9 + 9);
  if (v49 < 0) {
    uint64_t v10 = *(unsigned char **)buf;
  }
  if (v9)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = *a1;
    }
    memmove(v10, v11, v9);
  }
  strcpy(&v10[v9], "/am_model");
  unint64_t v12 = a1 + 9;
  std::allocate_shared[abi:ne180100]<Preprocessing,std::allocator<Preprocessing>,std::string &,std::string &,std::string,std::string &,void>(&v42);
  long long v13 = v42;
  long long v42 = 0uLL;
  unint64_t v14 = (std::__shared_weak_count *)a1[18];
  *(_OWORD *)(a1 + 17) = v13;
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    if (*((void *)&v42 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
    }
  }
  if (v49 < 0) {
    operator delete(*(void **)buf);
  }
  unint64_t v15 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    unint64_t v16 = a1 + 9;
    if (*((char *)a1 + 95) < 0) {
      unint64_t v16 = (const void **)*v12;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v16;
    _os_log_impl(&def_5A5E8, v15, OS_LOG_TYPE_INFO, "TaskId: %s, Validating input data.", buf, 0xCu);
  }
  LODWORD(result) = Preprocessing::validate_input_audio((Preprocessing *)a1[17]);
  if (result) {
    return (int)result;
  }
  uint64_t v17 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    unint64_t v18 = a1 + 9;
    if (*((char *)a1 + 95) < 0) {
      unint64_t v18 = (const void **)*v12;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v18;
    _os_log_impl(&def_5A5E8, v17, OS_LOG_TYPE_INFO, "TaskId: %s, Compute audio quality metrics.", buf, 0xCu);
  }
  LODWORD(result) = Preprocessing::compute_audioquality_metrics((Preprocessing *)a1[17]);
  if (result) {
    return (int)result;
  }
  int v19 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    uint64_t v20 = a1 + 9;
    if (*((char *)a1 + 95) < 0) {
      uint64_t v20 = (const void **)*v12;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v20;
    _os_log_impl(&def_5A5E8, v19, OS_LOG_TYPE_INFO, "TaskId: %s, Filtering input data.", buf, 0xCu);
  }
  LODWORD(result) = Preprocessing::snr_spl_data_filtering((Preprocessing *)a1[17]);
  if (result) {
    return (int)result;
  }
  if (*((unsigned char *)a1 + 96))
  {
    uint64_t v21 = Diagnostics_GetLogObject();
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    if (*((char *)a1 + 95) < 0) {
      unint64_t v12 = (const void **)*v12;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v12;
    uint64_t v5 = "TaskId: %s, Trainer has been stopped, return immediately.";
    goto LABEL_73;
  }
  if (*(void *)(a2 + 24)) {
    std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()(a2, 9, 0);
  }
  v22.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v23 = (uint64_t)a1[17];
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::__value_func[abi:ne180100]((uint64_t)v45, a2);
  Preprocessing::apply_noise_reduction(v23);
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100](v45);
  char v24 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    int v25 = a1 + 9;
    if (*((char *)a1 + 95) < 0) {
      int v25 = (const void **)*v12;
    }
    v26.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = v25;
    __int16 v47 = 2048;
    double v48 = (double)((v26.__d_.__rep_ - v22.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&def_5A5E8, v24, OS_LOG_TYPE_INFO, "TaskId: %s, Noise reduction time: %f second", buf, 0x16u);
  }
  if (*(void *)(a2 + 24)) {
    std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()(a2, 11, 0);
  }
  if (*((unsigned char *)a1 + 96))
  {
    uint64_t v21 = Diagnostics_GetLogObject();
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    if (*((char *)a1 + 95) < 0) {
      unint64_t v12 = (const void **)*v12;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v12;
    uint64_t v5 = "TaskId: %s, Trainer has been stopped, return immediately.";
    goto LABEL_73;
  }
  if (*(void *)(a2 + 24)) {
    std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()(a2, 6, 0);
  }
  v27.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v28 = (uint64_t)a1[17];
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::__value_func[abi:ne180100]((uint64_t)v44, a2);
  Preprocessing::extract_speech_feature(v28);
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100](v44);
  uint64_t v29 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    uint64_t v30 = a1 + 9;
    if (*((char *)a1 + 95) < 0) {
      uint64_t v30 = (const void **)*v12;
    }
    v31.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = v30;
    __int16 v47 = 2048;
    double v48 = (double)((v31.__d_.__rep_ - v27.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&def_5A5E8, v29, OS_LOG_TYPE_INFO, "TaskId: %s, Speech feature extraction time: %f second", buf, 0x16u);
  }
  if (*(void *)(a2 + 24)) {
    std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()(a2, 8, 0);
  }
  if (*((unsigned char *)a1 + 96))
  {
    uint64_t v21 = Diagnostics_GetLogObject();
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    if (*((char *)a1 + 95) < 0) {
      unint64_t v12 = (const void **)*v12;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v12;
    uint64_t v5 = "TaskId: %s, Trainer has been stopped, return immediately.";
LABEL_73:
    uint64_t v6 = v21;
    goto LABEL_6;
  }
  if (*(void *)(a2 + 24)) {
    std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()(a2, 3, 0);
  }
  v32.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v33 = (uint64_t)a1[17];
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::__value_func[abi:ne180100]((uint64_t)v43, a2);
  Preprocessing::extract_mels(v33, (uint64_t)v43);
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100](v43);
  v34 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
  {
    float v35 = a1 + 9;
    if (*((char *)a1 + 95) < 0) {
      float v35 = (const void **)*v12;
    }
    v36.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = v35;
    __int16 v47 = 2048;
    double v48 = (double)((v36.__d_.__rep_ - v32.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&def_5A5E8, v34, OS_LOG_TYPE_INFO, "TaskId: %s, Mel extraction time: %f second", buf, 0x16u);
  }
  if (*(void *)(a2 + 24)) {
    std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()(a2, 5, 0);
  }
  BOOL v37 = *((unsigned char *)a1 + 96) == 0;
  uint64_t v38 = Diagnostics_GetLogObject();
  BOOL v39 = os_log_type_enabled(v38, OS_LOG_TYPE_INFO);
  if (!v37)
  {
    if (!v39) {
      return 0;
    }
    if (*((char *)a1 + 95) < 0) {
      unint64_t v12 = (const void **)*v12;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v12;
    uint64_t v5 = "TaskId: %s, Trainer has been stopped, return immediately.";
    uint64_t v6 = v38;
    goto LABEL_6;
  }
  if (v39)
  {
    if (*((char *)a1 + 95) < 0) {
      unint64_t v12 = (const void **)*v12;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v12;
    _os_log_impl(&def_5A5E8, v38, OS_LOG_TYPE_INFO, "TaskId: %s, Validating training data.", buf, 0xCu);
  }
  int v40 = Preprocessing::validate_data((Preprocessing *)a1[17]);
  if (*(void *)(a2 + 24)) {
    std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()(a2, 2, 0);
  }
  uint64_t v41 = (std::__shared_weak_count *)a1[18];
  a1[17] = 0;
  a1[18] = 0;
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  return v40;
}

void sub_1C2968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t SiriTTS::TTSTrainer::train(const void **a1, int a2, uint64_t a3)
{
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::__value_func[abi:ne180100]((uint64_t)v7, a3);
  uint64_t v5 = SiriTTS::TTSTrainer::train_internal(a1, a2, (uint64_t)v7);
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100](v7);
  return v5;
}

void sub_1C2A40(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a2 == 1)
  {
    uint64_t v6 = __cxa_begin_catch(a1);
    LogObject = Diagnostics_GetLogObject();
    if (os_log_type_enabled(LogObject, OS_LOG_TYPE_ERROR)) {
      SiriTTS::TTSTrainer::train(v3, (uint64_t)v6);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C2A0CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t SiriTTS::TTSTrainer::train_internal(const void **a1, int a2, uint64_t a3)
{
  if (*((unsigned char *)a1 + 96) || *((unsigned char *)a1 + 97))
  {
    LogObject = Diagnostics_GetLogObject();
    uint64_t v5 = 1;
    if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = a1 + 9;
      if (*((char *)a1 + 95) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = v6;
      uint64_t v5 = 1;
      _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "TaskId: %s, Trainer has been stopped or paused, return immediately.", buf, 0xCu);
    }
    return v5;
  }
  if (*(void *)(a3 + 24)) {
    std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()(a3, 12, 0);
  }
  memset(buf, 0, sizeof(buf));
  uint64_t v38 = 0;
  v9.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (a2 == 1)
  {
    if (*((char *)a1 + 23) >= 0) {
      size_t v22 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v22 = (size_t)a1[1];
    }
    uint64_t v23 = v36;
    std::string::basic_string[abi:ne180100]((uint64_t)v36, v22 + 8);
    if (v36[23] < 0) {
      uint64_t v23 = *(unsigned char **)v36;
    }
    if (v22)
    {
      if (*((char *)a1 + 23) >= 0) {
        char v24 = a1;
      }
      else {
        char v24 = *a1;
      }
      memmove(v23, v24, v22);
    }
    strcpy(&v23[v22], "/wavernn");
    if (SHIBYTE(v38) < 0) {
      operator delete(*(void **)buf);
    }
    *(_OWORD *)buf = *(_OWORD *)v36;
    uint64_t v38 = *(void *)&v36[16];
    int v25 = Diagnostics_GetLogObject();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      std::chrono::steady_clock::time_point v26 = a1 + 9;
      if (*((char *)a1 + 95) < 0) {
        std::chrono::steady_clock::time_point v26 = (void *)*v26;
      }
      *(_DWORD *)std::chrono::steady_clock::time_point v36 = 136315138;
      *(void *)&v36[4] = v26;
      _os_log_impl(&def_5A5E8, v25, OS_LOG_TYPE_INFO, "TaskId: %s, Training start with WaveRNN", v36, 0xCu);
    }
    std::chrono::steady_clock::time_point v27 = a1 + 9;
    std::allocate_shared[abi:ne180100]<TrainingEngineV2,std::allocator<TrainingEngineV2>,std::string &,std::string &,std::string &,std::string &,void>(v36);
    long long v28 = *(_OWORD *)v36;
    *(void *)std::chrono::steady_clock::time_point v36 = 0;
    *(void *)&v36[8] = 0;
    uint64_t v29 = (std::__shared_weak_count *)a1[16];
    *(_OWORD *)(a1 + 15) = v28;
    if (v29)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      if (*(void *)&v36[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v36[8]);
      }
    }
    if (!*((unsigned char *)a1 + 96) && !*((unsigned char *)a1 + 97))
    {
      uint64_t v30 = (uint64_t)a1[15];
      std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::__value_func[abi:ne180100]((uint64_t)v34, a3);
      TrainingEngineV2::train(v30, (uint64_t)v34);
      std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100](v34);
    }
    std::chrono::steady_clock::time_point v31 = Diagnostics_GetLogObject();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 95) < 0) {
        std::chrono::steady_clock::time_point v27 = (void *)*v27;
      }
      v32.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      *(_DWORD *)std::chrono::steady_clock::time_point v36 = 136315394;
      *(void *)&v36[4] = v27;
      *(_WORD *)&v36[12] = 2048;
      *(double *)&v36[14] = (double)((v32.__d_.__rep_ - v9.__d_.__rep_) / 1000000) / 1000.0;
      _os_log_impl(&def_5A5E8, v31, OS_LOG_TYPE_INFO, "TaskId: %s, Training time: %f second", v36, 0x16u);
    }
    uint64_t v21 = (std::__shared_weak_count *)a1[16];
    a1[15] = 0;
    a1[16] = 0;
    if (!v21) {
      goto LABEL_67;
    }
  }
  else
  {
    if (a2) {
      goto LABEL_67;
    }
    if (*((char *)a1 + 23) >= 0) {
      size_t v10 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v10 = (size_t)a1[1];
    }
    uint64_t v11 = v36;
    std::string::basic_string[abi:ne180100]((uint64_t)v36, v10 + 12);
    if (v36[23] < 0) {
      uint64_t v11 = *(unsigned char **)v36;
    }
    if (v10)
    {
      if (*((char *)a1 + 23) >= 0) {
        unint64_t v12 = a1;
      }
      else {
        unint64_t v12 = *a1;
      }
      memmove(v11, v12, v10);
    }
    strcpy(&v11[v10], "/fastspeech2");
    if (SHIBYTE(v38) < 0) {
      operator delete(*(void **)buf);
    }
    *(_OWORD *)buf = *(_OWORD *)v36;
    uint64_t v38 = *(void *)&v36[16];
    long long v13 = Diagnostics_GetLogObject();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      unint64_t v14 = a1 + 9;
      if (*((char *)a1 + 95) < 0) {
        unint64_t v14 = (void *)*v14;
      }
      *(_DWORD *)std::chrono::steady_clock::time_point v36 = 136315138;
      *(void *)&v36[4] = v14;
      _os_log_impl(&def_5A5E8, v13, OS_LOG_TYPE_INFO, "TaskId: %s, Training start with Fastspeech2", v36, 0xCu);
    }
    unint64_t v15 = a1 + 9;
    std::allocate_shared[abi:ne180100]<TrainingEngine,std::allocator<TrainingEngine>,std::string &,std::string &,std::string &,std::string &,void>(v36);
    long long v16 = *(_OWORD *)v36;
    *(void *)std::chrono::steady_clock::time_point v36 = 0;
    *(void *)&v36[8] = 0;
    uint64_t v17 = (std::__shared_weak_count *)a1[14];
    *(_OWORD *)(a1 + 13) = v16;
    if (v17)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      if (*(void *)&v36[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v36[8]);
      }
    }
    if (!*((unsigned char *)a1 + 96) && !*((unsigned char *)a1 + 97))
    {
      uint64_t v18 = (uint64_t)a1[13];
      std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::__value_func[abi:ne180100]((uint64_t)v35, a3);
      TrainingEngine::train(v18, (uint64_t)v35);
      std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100](v35);
    }
    int v19 = Diagnostics_GetLogObject();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 95) < 0) {
        unint64_t v15 = (void *)*v15;
      }
      v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      *(_DWORD *)std::chrono::steady_clock::time_point v36 = 136315394;
      *(void *)&v36[4] = v15;
      *(_WORD *)&v36[12] = 2048;
      *(double *)&v36[14] = (double)((v20.__d_.__rep_ - v9.__d_.__rep_) / 1000000) / 1000.0;
      _os_log_impl(&def_5A5E8, v19, OS_LOG_TYPE_INFO, "TaskId: %s, Training time: %f second", v36, 0x16u);
    }
    uint64_t v21 = (std::__shared_weak_count *)a1[14];
    a1[13] = 0;
    a1[14] = 0;
    if (!v21) {
      goto LABEL_67;
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
LABEL_67:
  if (*(void *)(a3 + 24)) {
    std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()(a3, 14, 0);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(*(void **)buf);
  }
  return 0;
}

void sub_1C3028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100](va);
  if (*(char *)(v3 - 57) < 0) {
    operator delete(*(void **)(v3 - 80));
  }
  _Unwind_Resume(a1);
}

unsigned char *SiriTTS::TTSTrainer::stop(SiriTTS::TTSTrainer *this)
{
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = (void *)((char *)this + 72);
    if (*((char *)this + 95) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    int v7 = 136315138;
    uint64_t v8 = v3;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "TaskId: %s, Stopping training engine", (uint8_t *)&v7, 0xCu);
  }
  *((unsigned char *)this + 96) = 1;
  uint64_t v4 = (Preprocessing *)*((void *)this + 17);
  if (v4) {
    Preprocessing::stop(v4);
  }
  uint64_t v5 = (unsigned char *)*((void *)this + 13);
  if (v5) {
    TrainingEngine::stop(v5);
  }
  uint64_t result = (unsigned char *)*((void *)this + 15);
  if (result) {
    return TrainingEngine::stop(result);
  }
  return result;
}

unsigned char *SiriTTS::TTSTrainer::pause(SiriTTS::TTSTrainer *this)
{
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = (void *)((char *)this + 72);
    if (*((char *)this + 95) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    int v7 = 136315138;
    uint64_t v8 = v3;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "TaskId: %s, Pausing training engine", (uint8_t *)&v7, 0xCu);
  }
  *((unsigned char *)this + 97) = 1;
  uint64_t v4 = (Preprocessing *)*((void *)this + 17);
  if (v4) {
    Preprocessing::stop(v4);
  }
  uint64_t v5 = (unsigned char *)*((void *)this + 13);
  if (v5) {
    TrainingEngine::stop(v5);
  }
  uint64_t result = (unsigned char *)*((void *)this + 15);
  if (result) {
    return TrainingEngine::stop(result);
  }
  return result;
}

uint64_t std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<Preprocessing,std::allocator<Preprocessing>,std::string &,std::string &,std::string,std::string &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x138uLL);
  uint64_t result = std::__shared_ptr_emplace<Preprocessing>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::string,std::string &,std::allocator<Preprocessing>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1C33C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<Preprocessing>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::string,std::string &,std::allocator<Preprocessing>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26F450;
  Preprocessing::Preprocessing(a1 + 3);
  return a1;
}

void sub_1C3420(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Preprocessing>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26F450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Preprocessing>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26F450;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<Preprocessing>::__on_zero_shared(uint64_t a1)
{
}

void Preprocessing::~Preprocessing(void **this)
{
  if (*((char *)this + 287) < 0) {
    operator delete(this[33]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[32];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void *std::allocate_shared[abi:ne180100]<TrainingEngine,std::allocator<TrainingEngine>,std::string &,std::string &,std::string &,std::string &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x2F8uLL);
  uint64_t result = std::__shared_ptr_emplace<TrainingEngine>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::string &,std::string &,std::allocator<TrainingEngine>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1C35CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<TrainingEngine>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::string &,std::string &,std::allocator<TrainingEngine>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26F4A0;
  TrainingEngine::TrainingEngine(a1 + 3);
  return a1;
}

void sub_1C3628(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<TrainingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26F4A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TrainingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26F4A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<TrainingEngine>::__on_zero_shared(uint64_t a1)
{
}

void *std::allocate_shared[abi:ne180100]<TrainingEngineV2,std::allocator<TrainingEngineV2>,std::string &,std::string &,std::string &,std::string &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x2E8uLL);
  uint64_t result = std::__shared_ptr_emplace<TrainingEngineV2>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::string &,std::string &,std::allocator<TrainingEngineV2>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1C3724(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<TrainingEngineV2>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::string &,std::string &,std::allocator<TrainingEngineV2>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26F4F0;
  TrainingEngineV2::TrainingEngineV2(a1 + 3);
  return a1;
}

void sub_1C3780(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<TrainingEngineV2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26F4F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TrainingEngineV2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26F4F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<TrainingEngineV2>::__on_zero_shared(uint64_t a1)
{
}

void OUTLINED_FUNCTION_1_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void SiriTTS::TTSTrainer::TTSTrainer(uint64_t a1, void **a2, void **a3, void **a4)
{
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 128);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::chrono::steady_clock::time_point v9 = *(std::__shared_weak_count **)(a1 + 112);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*a2);
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*a3);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*a4);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v10 = *(void **)a1;
    operator delete(v10);
  }
}

void SiriTTS::TTSTrainer::preprocess(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
  OUTLINED_FUNCTION_0_4();
  OUTLINED_FUNCTION_1_2(&def_5A5E8, v2, v3, "TaskId: %s, preprocess exception: %s", v4, v5, v6, v7, v8);
}

void SiriTTS::TTSTrainer::train(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
  OUTLINED_FUNCTION_0_4();
  OUTLINED_FUNCTION_1_2(&def_5A5E8, v2, v3, "TaskId: %s, training exception: %s", v4, v5, v6, v7, v8);
}

void StringFormatter::append(std::string *this, const char *a2, va_list a3)
{
  __s = 0;
  vasprintf(&__s, a2, a3);
  std::string::append(this, __s);
  free(__s);
}

void StringFormatter::StringFormatter(StringFormatter *this, const char *a2, ...)
{
  va_start(va, a2);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  StringFormatter::append((std::string *)this, a2, va);
}

void sub_1C3AD8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Diagnostics_GetLogObject(void)
{
  if (Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global);
  }
  return Diagnostics_GetLogObject(void)::__profile_log_default;
}

void ___Z24Diagnostics_GetLogObjectv_block_invoke(id a1)
{
  Diagnostics_GetLogObject(void)::__profile_log_default = (uint64_t)os_log_create("com.apple.siri.tts.trainer", "default");
}

uint64_t InferenceModel::InferenceModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_26F560;
  *(unsigned char *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 40) = 0;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v11 = *(std::string *)a2;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "inference_config.json");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v10, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  }
  else {
    std::string v10 = v11;
  }
  boost::filesystem::path::append_v3(&v10, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::ifstream::basic_ifstream((void (__cdecl ***)(std::ifstream *__hidden))__p);
  v12[3] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(__p, (uint64_t)v12, 1, (uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v8[0];
  v8[0] = v5;
  uint64_t v6 = *(uint64_t **)(a1 + 16);
  *(void *)(a1 + 16) = v9;
  std::chrono::steady_clock::time_point v9 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v12);
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C3DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v34, *v35);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v33);
  _Unwind_Resume(a1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
  v8[0] = a1;
  v8[1] = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 40);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>((uint64_t)v8, (uint64_t)v9, a3, (uint64_t)v10);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse((uint64_t)v10, 1, a4);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(&v11);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v9);
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)v8);
}

void sub_1C3F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer((void **)(v16 + 40));
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](&a15);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](&a11);
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)&a9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v15);
  _Unwind_Resume(a1);
}

void InferenceModel::get_model_weight_precision(InferenceModel *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = (char *)this + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "model_weights_precision");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("fp32", v3, (const void **)__p, a2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C4028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void InferenceModel::get_saved_model_checkpoint_config_path(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string::size_type a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v13 = *(std::string *)a1;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v12 = *(std::string *)a2;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "inference_config.json");
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v11, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string v11 = v13;
  }
  boost::filesystem::path::append_v3(&v11, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::ifstream::basic_ifstream((void (__cdecl ***)(std::ifstream *__hidden))__p);
  v15[3] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(__p, (uint64_t)v15, 1, (uint64_t)v9);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v15);
  std::string::basic_string[abi:ne180100]<0>(&v14, "saved_model_checkpoint_config_file");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("", v9, (const void **)&v14.__r_.__value_.__l.__data_, &__s);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_)
    {
      std::string::__init_copy_ctor_external(&v7, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      goto LABEL_19;
    }
LABEL_21:
    std::string::basic_string[abi:ne180100]<0>((void *)a3, "");
    goto LABEL_34;
  }
  if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
    goto LABEL_21;
  }
  std::string v7 = __s;
LABEL_19:
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = v12;
  }
  boost::filesystem::path::append_v3(&v14, &v7);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a3, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::string *)a3 = v14;
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a3 + 23) >= 0) {
      std::string::size_type v6 = a3;
    }
    else {
      std::string::size_type v6 = *(void *)a3;
    }
    LODWORD(v14.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v14.__r_.__value_.__r.__words + 4) = v6;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Saved model checkpoint config file: %s\n", (uint8_t *)&v14, 0xCu);
  }
LABEL_34:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1C43D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t *a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a21);
  std::ifstream::~ifstream(&a54);
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(a1);
}

void *InferenceModule::InferenceModule(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v34 = *(std::string *)a2;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "inference_config.json");
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v33, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  }
  else {
    std::string v33 = v34;
  }
  boost::filesystem::path::append_v3(&v33, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::ifstream::basic_ifstream((void (__cdecl ***)(std::ifstream *__hidden))__p);
  v35[3] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(__p, (uint64_t)v35, 1, (uint64_t)v31);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v35);
  std::string::size_type v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "model_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v6, &v30);
  std::string v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v7, &v29);
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v30.__r_.__value_.__r.__words[2]) != 7)
    {
      if (HIBYTE(v30.__r_.__value_.__r.__words[2]) != 11) {
        goto LABEL_65;
      }
      if (v30.__r_.__value_.__r.__words[0] != 0x6565707374736166
        || *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 3) != 0x3268636565707374)
      {
        goto LABEL_65;
      }
      goto LABEL_17;
    }
    std::string v11 = &v30;
LABEL_29:
    int data = (int)v11->__r_.__value_.__l.__data_;
    int v13 = *(_DWORD *)((char *)v11->__r_.__value_.__r.__words + 3);
    if (data != 1702257015 || v13 != 1852732005) {
      goto LABEL_65;
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v29.__r_.__value_.__l.__size_ != 9) {
        goto LABEL_66;
      }
      unint64_t v15 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) != 9) {
        goto LABEL_66;
      }
      unint64_t v15 = &v29;
    }
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[0];
    int v17 = v15->__r_.__value_.__s.__data_[8];
    if (v16 == 0x656C70756F636564 && v17 == 100)
    {
      std::allocate_shared[abi:ne180100]<WaveRNNDecoupledInferenceModel,std::allocator<WaveRNNDecoupledInferenceModel>,std::string const&,std::string const&,void>(a2, a3, &v28);
      goto LABEL_53;
    }
LABEL_66:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&v28, "Not supported model type.");
    std::logic_error::logic_error(exception, &v28);
  }
  if (v30.__r_.__value_.__l.__size_ == 7)
  {
    std::string v11 = (std::string *)v30.__r_.__value_.__r.__words[0];
    goto LABEL_29;
  }
  if (v30.__r_.__value_.__l.__size_ != 11
    || (*(void *)v30.__r_.__value_.__l.__data_ == 0x6565707374736166
      ? (BOOL v10 = *(void *)(v30.__r_.__value_.__r.__words[0] + 3) == 0x3268636565707374)
      : (BOOL v10 = 0),
        !v10))
  {
LABEL_65:
    int v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&v28, "Not supported model.");
    std::logic_error::logic_error(v25, &v28);
  }
LABEL_17:
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v29.__r_.__value_.__l.__size_ != 9) {
      goto LABEL_67;
    }
    std::chrono::steady_clock::time_point v9 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) != 9) {
      goto LABEL_67;
    }
    std::chrono::steady_clock::time_point v9 = &v29;
  }
  std::string::size_type v19 = v9->__r_.__value_.__r.__words[0];
  int v20 = v9->__r_.__value_.__s.__data_[8];
  if (v19 != 0x656C70756F636564 || v20 != 100)
  {
LABEL_67:
    std::chrono::steady_clock::time_point v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&v28, "Not supported model type.");
    std::logic_error::logic_error(v27, &v28);
  }
  std::allocate_shared[abi:ne180100]<ParallelAMDecoupledInferenceModel,std::allocator<ParallelAMDecoupledInferenceModel>,std::string const&,std::string const&,void>(a2, a3, &v28);
LABEL_53:
  long long v22 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v23 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v22;
  if (v23)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    if (v28.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v28.__r_.__value_.__l.__size_);
    }
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v32, v31[0]);
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C4A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  unsigned __int8 v56 = *(std::__shared_weak_count **)(v54 + 8);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  _Unwind_Resume(exception_object);
}

void InferenceModel::set_mil_weights(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long **a5, void *a6, uint64_t a7, uint64_t a8)
{
  __int16 v47 = 0;
  double v48 = 0;
  char v49 = 0;
  long long __p = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  std::chrono::steady_clock::time_point v9 = *a5;
  uint8_t v8 = a5[1];
  if (*a5 != v8)
  {
    uint64_t v13 = a7 + 8;
    do
    {
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v14 = *v9;
        v43.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v14;
      }
      if (v13 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a7, (const void **)v9))
      {
        unint64_t v15 = (const std::string *)std::map<std::string,std::string>::at(a7, (const void **)v9);
        std::string::operator=(&v43, v15);
      }
      if (!std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::find<std::string>(a6, (unsigned __int8 *)&v43))goto LABEL_59; {
      std::string::size_type v16 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::find<std::string>(a6, (unsigned __int8 *)&v43);
      }
      if (!v16) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v17 = (uint64_t)(v16 + 40);
      if (*(void *)(a8 + 24))
      {
        uint64_t v17 = std::function<espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::operator()(a8, v17);
        uint64_t v18 = v48;
        if (v48 >= (uint64_t *)v49)
        {
          uint64_t v19 = ((char *)v48 - (unsigned char *)v47) >> 3;
          if ((unint64_t)(v19 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v20 = (v49 - (unsigned char *)v47) >> 2;
          if (v20 <= v19 + 1) {
            unint64_t v20 = v19 + 1;
          }
          if ((unint64_t)(v49 - (unsigned char *)v47) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21) {
            long long v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v49, v21);
          }
          else {
            long long v22 = 0;
          }
          std::chrono::steady_clock::time_point v26 = (uint64_t *)&v22[8 * v19];
          *std::chrono::steady_clock::time_point v26 = v17;
          uint64_t v23 = v26 + 1;
          std::string v28 = (char *)v47;
          std::chrono::steady_clock::time_point v27 = (char *)v48;
          if (v48 != v47)
          {
            do
            {
              uint64_t v29 = *((void *)v27 - 1);
              v27 -= 8;
              *--std::chrono::steady_clock::time_point v26 = v29;
            }
            while (v27 != v28);
            goto LABEL_37;
          }
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v18 = v48;
        if (v48 >= (uint64_t *)v49)
        {
          uint64_t v24 = ((char *)v48 - (unsigned char *)v47) >> 3;
          if ((unint64_t)(v24 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v25 = (v49 - (unsigned char *)v47) >> 2;
          if (v25 <= v24 + 1) {
            unint64_t v25 = v24 + 1;
          }
          if ((unint64_t)(v49 - (unsigned char *)v47) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v25;
          }
          if (v21) {
            long long v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v49, v21);
          }
          else {
            long long v22 = 0;
          }
          std::chrono::steady_clock::time_point v26 = (uint64_t *)&v22[8 * v24];
          *std::chrono::steady_clock::time_point v26 = v17;
          uint64_t v23 = v26 + 1;
          std::string v30 = (char *)v47;
          std::chrono::steady_clock::time_point v27 = (char *)v48;
          if (v48 != v47)
          {
            do
            {
              uint64_t v31 = *((void *)v27 - 1);
              v27 -= 8;
              *--std::chrono::steady_clock::time_point v26 = v31;
            }
            while (v27 != v30);
LABEL_37:
            std::chrono::steady_clock::time_point v27 = (char *)v47;
          }
LABEL_38:
          __int16 v47 = v26;
          double v48 = v23;
          char v49 = &v22[8 * v21];
          if (v27) {
            operator delete(v27);
          }
          goto LABEL_40;
        }
      }
      uint64_t *v18 = v17;
      uint64_t v23 = v18 + 1;
LABEL_40:
      double v48 = v23;
      std::chrono::steady_clock::time_point v32 = (const std::string::value_type *)v9;
      if (*((char *)v9 + 23) < 0) {
        std::chrono::steady_clock::time_point v32 = *(const std::string::value_type **)v9;
      }
      std::string v33 = v45;
      if (v45 >= v46)
      {
        uint64_t v35 = (v45 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v35 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v36 = (v46 - (unsigned char *)__p) >> 2;
        if (v36 <= v35 + 1) {
          unint64_t v36 = v35 + 1;
        }
        if ((unint64_t)(v46 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v36;
        }
        if (v37) {
          uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v46, v37);
        }
        else {
          uint64_t v38 = 0;
        }
        BOOL v39 = (const std::string::value_type **)&v38[8 * v35];
        *BOOL v39 = v32;
        std::string v34 = (char *)(v39 + 1);
        uint64_t v41 = (char *)__p;
        int v40 = v45;
        if (v45 != __p)
        {
          do
          {
            long long v42 = (const std::string::value_type *)*((void *)v40 - 1);
            v40 -= 8;
            *--BOOL v39 = v42;
          }
          while (v40 != v41);
          int v40 = (char *)__p;
        }
        long long __p = v39;
        uint64_t v45 = v34;
        uint64_t v46 = &v38[8 * v37];
        if (v40) {
          operator delete(v40);
        }
      }
      else
      {
        *(void *)uint64_t v45 = v32;
        std::string v34 = v33 + 8;
      }
      uint64_t v45 = v34;
LABEL_59:
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      std::chrono::steady_clock::time_point v9 = (long long *)((char *)v9 + 24);
    }
    while (v9 != v8);
  }
  espresso_set_mil_const_values();
  if (__p)
  {
    uint64_t v45 = (char *)__p;
    operator delete(__p);
  }
  if (v47)
  {
    double v48 = (uint64_t *)v47;
    operator delete(v47);
  }
}

void sub_1C4EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::string>::at(uint64_t a1, const void **a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 56;
}

uint64_t std::function<espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t ParallelAMDecoupledInferenceModel::ParallelAMDecoupledInferenceModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = InferenceModel::InferenceModel(a1, a2);
  *(void *)uint64_t v6 = off_26F580;
  *(_OWORD *)(v6 + 48) = 0u;
  std::string v7 = (std::string *)(v6 + 48);
  uint8_t v8 = (std::string *)(v6 + 72);
  *(_OWORD *)(v6 + 96) = 0u;
  std::chrono::steady_clock::time_point v9 = (std::string *)(v6 + 96);
  BOOL v10 = (std::string *)(v6 + 120);
  *(_OWORD *)(v6 + 144) = 0u;
  std::string v11 = (std::vector<std::string> *)(v6 + 144);
  std::string v12 = (std::vector<std::string> *)(v6 + 168);
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v31 = *(std::string *)a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v30 = *(std::string *)a3;
  }
  uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 8), "model_filename_encoder");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v13, &v29);
  long long v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 8), "model_filename_decoder");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v14, &v28);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v26, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  }
  else {
    std::string v26 = v29;
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = v31;
  }
  boost::filesystem::path::append_v3(&__str, &v26);
  std::string::operator=(v7, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v26, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  }
  else {
    std::string v26 = v28;
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = v31;
  }
  boost::filesystem::path::append_v3(&__str, &v26);
  std::string::operator=(v8, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  unint64_t v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 8), "saved_model_encoder_dir");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v15, &__str);
  std::string::size_type v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 8), "saved_model_decoder_dir");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v16, &v26);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = __str;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v25, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    std::string v25 = v30;
  }
  boost::filesystem::path::append_v3(&v25, &__p);
  std::string::operator=(v9, &v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v26;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v25, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    std::string v25 = v30;
  }
  boost::filesystem::path::append_v3(&v25, &__p);
  std::string::operator=(v10, &v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 8), "encoder_parameter_names");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>((char *)v17, (std::vector<std::string> *)&v25);
  std::vector<std::string>::__vdeallocate(v11);
  *(std::string *)(a1 + 144) = v25;
  memset(&v25, 0, sizeof(v25));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 8), "decoder_parameter_names");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>((char *)v18, (std::vector<std::string> *)&v25);
  std::vector<std::string>::__vdeallocate(v12);
  *(std::string *)(a1 + 168) = v25;
  memset(&v25, 0, sizeof(v25));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 8), "parameter_name_mapping");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::string>,std::map<std::string,std::string>,0>((uint64_t)v19, &v25);
  uint64_t v20 = a1 + 32;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  size = (void *)v25.__r_.__value_.__l.__size_;
  *(void *)(a1 + 24) = v25.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 32) = size;
  std::string::size_type v22 = v25.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 40) = *((void *)&v25.__r_.__value_.__l + 2);
  if (v22)
  {
    size[2] = v20;
    v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25.__r_.__value_.__l.__size_;
    *(_OWORD *)&v25.__r_.__value_.__r.__words[1] = 0uLL;
    size = 0;
  }
  else
  {
    *(void *)(a1 + 24) = v20;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v25, size);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C54B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (*(char *)(v55 - 121) < 0) {
    operator delete(*(void **)(v55 - 144));
  }
  if (*(char *)(v55 - 89) < 0) {
    operator delete(*(void **)(v55 - 112));
  }
  *(void *)(v55 - 112) = v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v55 - 112));
  *(void *)(v55 - 112) = v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v55 - 112));
  if (v48[143] < 0) {
    operator delete(*v52);
  }
  if (v48[119] < 0) {
    operator delete(*v51);
  }
  if (v48[95] < 0) {
    operator delete(*v50);
  }
  if (v48[71] < 0) {
    operator delete(*v49);
  }
  InferenceModel::~InferenceModel((InferenceModel *)v48);
  _Unwind_Resume(a1);
}

void sub_1C5630()
{
}

void sub_1C5638()
{
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>(char *a1@<X0>, std::vector<std::string> *a2@<X8>)
{
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<std::string>,0>(a1, a2);
}

void sub_1C5678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::string>,std::map<std::string,std::string>,0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::map<std::string,std::string>,0>(a1, (uint64_t)a2);
}

void sub_1C56C4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void InferenceModel::~InferenceModel(InferenceModel *this)
{
  *(void *)this = &off_26F560;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)this + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 2, *((unsigned __int8 *)this + 8));
}

void ParallelAMDecoupledInferenceModel::copy_training_net_to_inference_net(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 12;
  if (*((char *)a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)a1[12], a1[13]);
  }
  else
  {
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *v4;
    v16.__r_.__value_.__r.__words[2] = a1[14];
  }
  char v5 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v20, (char *)&v16);
  std::__fs::filesystem::__remove_all(v5, 0);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v20, (char *)&v16);
  std::__fs::filesystem::__create_directory(v6, 0);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v19, "model.mil");
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = v16;
  }
  boost::filesystem::path::append_v3(&v20, &v19);
  std::string::basic_string[abi:ne180100]<0>(&__p, "weights/weight.bin");
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v15, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else {
    std::string v15 = v16;
  }
  boost::filesystem::path::append_v3(&v15, &__p);
  uint64_t v7 = *a1;
  v18[3] = 0;
  (*(void (**)(uint64_t *, uint64_t *, std::string *, std::string *, uint64_t *, uint64_t, uint64_t *, void *))(v7 + 8))(a1, a1 + 6, &v20, &v15, a1 + 18, a2, a1 + 3, v18);
  std::__function::__value_func<espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::~__value_func[abi:ne180100](v18);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a1 + 119) < 0) {
      uint64_t v4 = *(_OWORD **)v4;
    }
    LODWORD(v20.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "saved encoder weights to: %s\n", (uint8_t *)&v20, 0xCu);
  }
  std::chrono::steady_clock::time_point v9 = a1 + 15;
  if (*((char *)a1 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, (const std::string::value_type *)a1[15], a1[16]);
  }
  else
  {
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *v9;
    v20.__r_.__value_.__r.__words[2] = a1[17];
  }
  BOOL v10 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v19, (char *)&v20);
  std::__fs::filesystem::__remove_all(v10, 0);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  std::string v11 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v19, (char *)&v20);
  std::__fs::filesystem::__create_directory(v11, 0);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, "model.mil");
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v19, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  }
  else {
    std::string v19 = v20;
  }
  boost::filesystem::path::append_v3(&v19, &v15);
  std::string::basic_string[abi:ne180100]<0>(&v13, "weights/weight.bin");
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v20;
  }
  boost::filesystem::path::append_v3(&__p, &v13);
  v17[3] = 0;
  (*(void (**)(uint64_t *, uint64_t *, std::string *, std::string *, uint64_t *, uint64_t, uint64_t *, void *))(*a1 + 8))(a1, a1 + 9, &v19, &__p, a1 + 21, a2, a1 + 3, v17);
  std::__function::__value_func<espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::~__value_func[abi:ne180100](v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  std::string v12 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a1 + 143) < 0) {
      std::chrono::steady_clock::time_point v9 = *(_OWORD **)v9;
    }
    LODWORD(v19.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    _os_log_impl(&def_5A5E8, v12, OS_LOG_TYPE_INFO, "saved decoder weights to: %s\n", (uint8_t *)&v19, 0xCu);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1C5BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v41 - 105) < 0) {
    operator delete(*(void **)(v41 - 128));
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v41 - 73) < 0) {
    operator delete(*(void **)(v41 - 96));
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WaveRNNDecoupledInferenceModel::WaveRNNDecoupledInferenceModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = InferenceModel::InferenceModel(a1, a2);
  *(void *)uint64_t v6 = off_26F5A0;
  *(_OWORD *)(v6 + 48) = 0u;
  uint64_t v7 = (std::string *)(v6 + 48);
  *(_OWORD *)(v6 + 96) = 0u;
  uint8_t v8 = (std::string *)(v6 + 96);
  uint64_t v23 = (std::string *)(v6 + 72);
  std::chrono::steady_clock::time_point v9 = (std::string *)(v6 + 120);
  *(_OWORD *)(v6 + 144) = 0u;
  BOOL v10 = (std::vector<std::string> *)(v6 + 144);
  std::string v11 = (std::vector<std::string> *)(v6 + 168);
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_DWORD *)(v6 + 224) = 1065353216;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_DWORD *)(v6 + 264) = 1065353216;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v31 = *(std::string *)a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v30 = *(std::string *)a3;
  }
  std::string v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 8), "model_filename_linear");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v12, &v29);
  std::string v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 8), "model_filename_gru");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v13, &__p);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v26, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  }
  else {
    std::string v26 = v29;
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = v31;
  }
  boost::filesystem::path::append_v3(&__str, &v26);
  std::string::operator=(v7, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v26, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v26 = __p;
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = v31;
  }
  boost::filesystem::path::append_v3(&__str, &v26);
  std::string::operator=(v23, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  long long v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 8), "saved_model_linear_dir");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v14, &__str);
  std::string v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 8), "saved_model_gru_dir");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v15, &v26);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v24, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else {
    std::string v24 = __str;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v25, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    std::string v25 = v30;
  }
  boost::filesystem::path::append_v3(&v25, &v24);
  std::string::operator=(v8, &v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v24, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  }
  else {
    std::string v24 = v26;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v25, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    std::string v25 = v30;
  }
  boost::filesystem::path::append_v3(&v25, &v24);
  std::string::operator=(v9, &v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  std::string v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 8), "linear_parameter_names");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>((char *)v16, (std::vector<std::string> *)&v25);
  std::vector<std::string>::__vdeallocate(v10);
  *(std::string *)(a1 + 144) = v25;
  memset(&v25, 0, sizeof(v25));
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  uint64_t v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 8), "gru_parameter_names");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>((char *)v17, (std::vector<std::string> *)&v25);
  std::vector<std::string>::__vdeallocate(v11);
  *(std::string *)(a1 + 168) = v25;
  memset(&v25, 0, sizeof(v25));
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  uint64_t v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 8), "parameter_name_mapping");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::string>,std::map<std::string,std::string>,0>((uint64_t)v18, &v25);
  uint64_t v19 = a1 + 32;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  size = (void *)v25.__r_.__value_.__l.__size_;
  *(void *)(a1 + 24) = v25.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 32) = size;
  std::string::size_type v21 = v25.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 40) = *((void *)&v25.__r_.__value_.__l + 2);
  if (v21)
  {
    size[2] = v19;
    v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25.__r_.__value_.__l.__size_;
    *(_OWORD *)&v25.__r_.__value_.__r.__words[1] = 0uLL;
    size = 0;
  }
  else
  {
    *(void *)(a1 + 24) = v19;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v25, size);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C61F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (*(char *)(v58 - 121) < 0) {
    operator delete(*(void **)(v58 - 144));
  }
  if (*(char *)(v58 - 89) < 0) {
    operator delete(*(void **)(v58 - 112));
  }
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table(v57);
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table(v56);
  *(void *)(v58 - 112) = v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 112));
  *(void *)(v58 - 112) = v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 112));
  if (v50[143] < 0) {
    operator delete(*v53);
  }
  if (v50[119] < 0) {
    operator delete(*v52);
  }
  if (v50[95] < 0) {
    operator delete(*a10);
  }
  if (v50[71] < 0) {
    operator delete(*v51);
  }
  InferenceModel::~InferenceModel((InferenceModel *)v50);
  _Unwind_Resume(a1);
}

void sub_1C638C()
{
}

void sub_1C6394()
{
}

unsigned __int8 *WaveRNNDecoupledInferenceModel::var_transform_function<float>(uint64_t a1, long long *a2, const void **a3, long long *a4)
{
  uint64_t v51 = (void *)(a1 + 192);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>((void *)(a1 + 192), (unsigned __int8 *)a4)&& *((void *)a2 + 10) == 1344)
  {
    uint64_t v5 = 1;
    for (uint64_t i = 16; i != 48; i += 8)
      v5 *= *(void *)((char *)a2 + i);
    uint64_t v53 = a4;
    uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v51, (unsigned __int8 *)a4, (uint64_t)&std::piecewise_construct, &v53);
    *((void *)v7 + 25) = 0;
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 168) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    uint64_t v53 = a4;
    uint8_t v8 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v51, (unsigned __int8 *)a4, (uint64_t)&std::piecewise_construct, &v53);
    long long v9 = *a2;
    long long v10 = a2[1];
    *(_OWORD *)(v8 + 72) = a2[2];
    *(_OWORD *)(v8 + 56) = v10;
    *(_OWORD *)(v8 + 40) = v9;
    long long v11 = a2[3];
    long long v12 = a2[4];
    long long v13 = a2[5];
    *(_OWORD *)(v8 + 136) = a2[6];
    *(_OWORD *)(v8 + 120) = v13;
    *(_OWORD *)(v8 + 104) = v12;
    *(_OWORD *)(v8 + 88) = v11;
    long long v14 = a2[7];
    long long v15 = a2[8];
    long long v16 = a2[9];
    *((void *)v8 + 25) = *((void *)a2 + 20);
    *(_OWORD *)(v8 + 184) = v16;
    *(_OWORD *)(v8 + 168) = v15;
    *(_OWORD *)(v8 + 152) = v14;
    *((void *)v8 + 5) = malloc_type_malloc(4 * v5, 0x100004052888210uLL);
    if (*((void *)a2 + 11))
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      uint64_t v19 = v8 + 40;
      do
      {
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        uint64_t v22 = v17;
        do
        {
          uint64_t v23 = v20 - 1120;
          if (v21 < 3) {
            uint64_t v23 = v20;
          }
          memcpy((void *)(*v19 + v22), (const void *)(*(void *)a2 + 5376 * v18 + 4 * v23), 0x380uLL);
          ++v21;
          v22 += 896;
          v20 += 448;
        }
        while (v21 != 6);
        ++v18;
        v17 += 5376;
      }
      while (v18 < *((void *)a2 + 11));
    }
  }
  std::string v24 = (unsigned __int8 *)a2;
  if (std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v51, (unsigned __int8 *)a4))
  {
    std::string v25 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v51, (unsigned __int8 *)a4);
    if (!v25) {
      goto LABEL_54;
    }
    std::string v24 = v25 + 40;
  }
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
    int v26 = *((unsigned __int8 *)a3 + 23);
    std::chrono::steady_clock::time_point v27 = a3;
    switch(*((unsigned char *)a3 + 23))
    {
      case 'I':
        std::string v28 = "wavernn_gru_cell_with_external_linear_input_MatMul_ReadVariableOp_to_fp16";
        std::string v29 = a3;
        size_t v30 = 73;
        goto LABEL_36;
      case 'J':
        std::string v28 = "wavernn_gru_cell_with_external_linear_input_MatMul_ReadVariableOp_resource";
        std::string v29 = a3;
        size_t v30 = 74;
LABEL_36:
        if (!memcmp(v29, v28, v30)) {
          goto LABEL_43;
        }
        std::chrono::steady_clock::time_point v27 = a3;
        if (v26 == 75) {
          goto LABEL_40;
        }
        if (v26 != 76) {
          goto LABEL_47;
        }
LABEL_39:
        std::chrono::steady_clock::time_point v32 = "wavernn_gru_cell_with_external_linear_input_1_MatMul_ReadVariableOp_resource";
        std::chrono::steady_clock::time_point v27 = a3;
        size_t v33 = 76;
        break;
      case 'K':
        goto LABEL_40;
      case 'L':
        goto LABEL_39;
      case 'P':
        std::string v43 = "wavernn_dual_sample_inference_gru_cell_input_layer_MatMul_ReadVariableOp_to_fp16";
        uint64_t v44 = a3;
        size_t v45 = 80;
        goto LABEL_46;
      case 'Q':
        std::string v43 = "wavernn_dual_sample_inference_gru_cell_input_layer_MatMul_ReadVariableOp_resource";
        uint64_t v44 = a3;
        size_t v45 = 81;
LABEL_46:
        if (memcmp(v44, v43, v45)) {
          goto LABEL_47;
        }
        goto LABEL_49;
      default:
        goto LABEL_47;
    }
LABEL_41:
    if (!memcmp(v27, v32, v33)) {
      goto LABEL_42;
    }
    goto LABEL_47;
  }
  std::string v31 = (uint64_t *)a3[1];
  if (v31 == &stru_20.filesize)
  {
    if (memcmp(*a3, "wavernn_dual_sample_inference_gru_cell_input_layer_MatMul_ReadVariableOp_to_fp16", 0x50uLL))
    {
      std::string v31 = (uint64_t *)a3[1];
      goto LABEL_24;
    }
LABEL_49:
    std::string v34 = (void *)(a1 + 232);
    uint64_t v53 = (long long *)a3;
    uint64_t v46 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 232, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, &v53);
    *((void *)v46 + 25) = 0;
    *(_OWORD *)(v46 + 184) = 0u;
    *(_OWORD *)(v46 + 168) = 0u;
    *(_OWORD *)(v46 + 152) = 0u;
    *(_OWORD *)(v46 + 136) = 0u;
    *(_OWORD *)(v46 + 120) = 0u;
    *(_OWORD *)(v46 + 104) = 0u;
    *(_OWORD *)(v46 + 88) = 0u;
    *(_OWORD *)(v46 + 72) = 0u;
    *(_OWORD *)(v46 + 56) = 0u;
    *(_OWORD *)(v46 + 40) = 0u;
    uint64_t v53 = (long long *)a3;
    unint64_t v36 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 232, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, &v53)+ 40;
    uint64_t v37 = (uint64_t)v24;
    unint64_t v38 = 0;
    unint64_t v39 = 80;
    uint64_t v40 = 0;
    goto LABEL_50;
  }
  if (v31 == (uint64_t *)((char *)&stru_20.filesize + 1)
    && !memcmp(*a3, "wavernn_dual_sample_inference_gru_cell_input_layer_MatMul_ReadVariableOp_resource", 0x51uLL))
  {
    goto LABEL_49;
  }
LABEL_24:
  if (v31 == (uint64_t *)((char *)&stru_20.fileoff + 2))
  {
    if (!memcmp(*a3, "wavernn_gru_cell_with_external_linear_input_MatMul_ReadVariableOp_resource", 0x4AuLL)) {
      goto LABEL_43;
    }
    std::string v31 = (uint64_t *)a3[1];
  }
  if (v31 != (uint64_t *)((char *)&stru_20.fileoff + 1)) {
    goto LABEL_30;
  }
  if (!memcmp(*a3, "wavernn_gru_cell_with_external_linear_input_MatMul_ReadVariableOp_to_fp16", 0x49uLL))
  {
LABEL_43:
    std::string v34 = (void *)(a1 + 232);
    uint64_t v53 = (long long *)a3;
    uint64_t v41 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 232, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, &v53);
    *((void *)v41 + 25) = 0;
    *(_OWORD *)(v41 + 184) = 0u;
    *(_OWORD *)(v41 + 168) = 0u;
    *(_OWORD *)(v41 + 152) = 0u;
    *(_OWORD *)(v41 + 136) = 0u;
    *(_OWORD *)(v41 + 120) = 0u;
    *(_OWORD *)(v41 + 104) = 0u;
    *(_OWORD *)(v41 + 88) = 0u;
    *(_OWORD *)(v41 + 72) = 0u;
    *(_OWORD *)(v41 + 56) = 0u;
    *(_OWORD *)(v41 + 40) = 0u;
    uint64_t v53 = (long long *)a3;
    unint64_t v36 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 232, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, &v53)+ 40;
    uint64_t v37 = (uint64_t)v24;
    unint64_t v38 = 80;
    unint64_t v39 = 81;
    uint64_t v40 = 0;
    uint64_t v42 = 672;
    goto LABEL_51;
  }
  std::string v31 = (uint64_t *)a3[1];
LABEL_30:
  if (v31 == (uint64_t *)((char *)&stru_20.fileoff + 4))
  {
    if (!memcmp(*a3, "wavernn_gru_cell_with_external_linear_input_1_MatMul_ReadVariableOp_resource", 0x4CuLL))
    {
LABEL_42:
      std::string v34 = (void *)(a1 + 232);
      uint64_t v53 = (long long *)a3;
      uint64_t v35 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 232, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, &v53);
      *((void *)v35 + 25) = 0;
      *(_OWORD *)(v35 + 184) = 0u;
      *(_OWORD *)(v35 + 168) = 0u;
      *(_OWORD *)(v35 + 152) = 0u;
      *(_OWORD *)(v35 + 136) = 0u;
      *(_OWORD *)(v35 + 120) = 0u;
      *(_OWORD *)(v35 + 104) = 0u;
      *(_OWORD *)(v35 + 88) = 0u;
      *(_OWORD *)(v35 + 72) = 0u;
      *(_OWORD *)(v35 + 56) = 0u;
      *(_OWORD *)(v35 + 40) = 0u;
      uint64_t v53 = (long long *)a3;
      unint64_t v36 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 232, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, &v53)+ 40;
      uint64_t v37 = (uint64_t)v24;
      unint64_t v38 = 80;
      unint64_t v39 = 82;
      uint64_t v40 = 672;
LABEL_50:
      uint64_t v42 = 1344;
LABEL_51:
      TrainingUtils::slice_espresso_buffer_data<float>(v37, (uint64_t)v36, v38, v39, v40, v42);
      __int16 v47 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v34, (unsigned __int8 *)a3);
      if (v47) {
        return v47 + 40;
      }
LABEL_54:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    std::string v31 = (uint64_t *)a3[1];
  }
  if (v31 == (uint64_t *)((char *)&stru_20.fileoff + 3))
  {
    std::chrono::steady_clock::time_point v27 = *a3;
LABEL_40:
    std::chrono::steady_clock::time_point v32 = "wavernn_gru_cell_with_external_linear_input_1_MatMul_ReadVariableOp_to_fp16";
    size_t v33 = 75;
    goto LABEL_41;
  }
LABEL_47:
  if (std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v51, (unsigned __int8 *)a4))
  {
    return std::unordered_map<std::string,espresso_buffer_t>::at(v51, (unsigned __int8 *)a4);
  }
  return (unsigned __int8 *)a2;
}

unsigned __int8 *std::unordered_map<std::string,espresso_buffer_t>::at(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(a1, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v2 + 40;
}

unsigned __int8 *_ZN30WaveRNNDecoupledInferenceModel22var_transform_functionIDF16_EEPK17espresso_buffer_tS3_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_(uint64_t a1, long long *a2, const void **a3, long long *a4)
{
  uint64_t v5 = (void *)(a1 + 192);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>((void *)(a1 + 192), (unsigned __int8 *)a4)&& *((void *)a2 + 10) == 1344)
  {
    uint64_t v7 = 1;
    for (uint64_t i = 16; i != 48; i += 8)
      v7 *= *(void *)((char *)a2 + i);
    uint64_t v52 = a4;
    long long v9 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v5, (unsigned __int8 *)a4, (uint64_t)&std::piecewise_construct, &v52);
    *((void *)v9 + 25) = 0;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    uint64_t v52 = a4;
    long long v10 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v5, (unsigned __int8 *)a4, (uint64_t)&std::piecewise_construct, &v52);
    long long v11 = *a2;
    long long v12 = a2[1];
    *(_OWORD *)(v10 + 72) = a2[2];
    *(_OWORD *)(v10 + 56) = v12;
    *(_OWORD *)(v10 + 40) = v11;
    long long v13 = a2[3];
    long long v14 = a2[4];
    long long v15 = a2[5];
    *(_OWORD *)(v10 + 136) = a2[6];
    *(_OWORD *)(v10 + 120) = v15;
    *(_OWORD *)(v10 + 104) = v14;
    *(_OWORD *)(v10 + 88) = v13;
    long long v16 = a2[7];
    long long v17 = a2[8];
    long long v18 = a2[9];
    *((void *)v10 + 25) = *((void *)a2 + 20);
    *(_OWORD *)(v10 + 184) = v18;
    *(_OWORD *)(v10 + 168) = v17;
    *(_OWORD *)(v10 + 152) = v16;
    *((void *)v10 + 5) = malloc_type_malloc(2 * v7, 0x1000040BDFB0063uLL);
    if (*((void *)a2 + 11))
    {
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      unint64_t v21 = v10 + 40;
      do
      {
        uint64_t v22 = 0;
        for (unint64_t j = 0; j != 6; ++j)
        {
          uint64_t v24 = v22 - 1120;
          if (j < 3) {
            uint64_t v24 = v22;
          }
          memcpy((void *)(*v21 + v19 + v22), (const void *)(*(void *)a2 + 2688 * v20 + 2 * v24), 0x1C0uLL);
          v22 += 448;
        }
        ++v20;
        v19 += 2688;
      }
      while (v20 < *((void *)a2 + 11));
    }
  }
  std::string v25 = (unsigned __int8 *)a2;
  if (std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v5, (unsigned __int8 *)a4))
  {
    int v26 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v5, (unsigned __int8 *)a4);
    if (!v26) {
      goto LABEL_54;
    }
    std::string v25 = v26 + 40;
  }
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
    int v27 = *((unsigned __int8 *)a3 + 23);
    std::string v28 = a3;
    switch(*((unsigned char *)a3 + 23))
    {
      case 'I':
        std::string v29 = "wavernn_gru_cell_with_external_linear_input_MatMul_ReadVariableOp_to_fp16";
        size_t v30 = a3;
        size_t v31 = 73;
        goto LABEL_36;
      case 'J':
        std::string v29 = "wavernn_gru_cell_with_external_linear_input_MatMul_ReadVariableOp_resource";
        size_t v30 = a3;
        size_t v31 = 74;
LABEL_36:
        if (!memcmp(v30, v29, v31)) {
          goto LABEL_43;
        }
        std::string v28 = a3;
        if (v27 == 75) {
          goto LABEL_40;
        }
        if (v27 != 76) {
          goto LABEL_47;
        }
LABEL_39:
        size_t v33 = "wavernn_gru_cell_with_external_linear_input_1_MatMul_ReadVariableOp_resource";
        std::string v28 = a3;
        size_t v34 = 76;
        break;
      case 'K':
        goto LABEL_40;
      case 'L':
        goto LABEL_39;
      case 'P':
        uint64_t v44 = "wavernn_dual_sample_inference_gru_cell_input_layer_MatMul_ReadVariableOp_to_fp16";
        size_t v45 = a3;
        size_t v46 = 80;
        goto LABEL_46;
      case 'Q':
        uint64_t v44 = "wavernn_dual_sample_inference_gru_cell_input_layer_MatMul_ReadVariableOp_resource";
        size_t v45 = a3;
        size_t v46 = 81;
LABEL_46:
        if (memcmp(v45, v44, v46)) {
          goto LABEL_47;
        }
        goto LABEL_49;
      default:
        goto LABEL_47;
    }
LABEL_41:
    if (!memcmp(v28, v33, v34)) {
      goto LABEL_42;
    }
    goto LABEL_47;
  }
  std::chrono::steady_clock::time_point v32 = (uint64_t *)a3[1];
  if (v32 == &stru_20.filesize)
  {
    if (memcmp(*a3, "wavernn_dual_sample_inference_gru_cell_input_layer_MatMul_ReadVariableOp_to_fp16", 0x50uLL))
    {
      std::chrono::steady_clock::time_point v32 = (uint64_t *)a3[1];
      goto LABEL_24;
    }
LABEL_49:
    uint64_t v35 = (void *)(a1 + 232);
    uint64_t v52 = (long long *)a3;
    __int16 v47 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 232, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, &v52);
    *((void *)v47 + 25) = 0;
    *(_OWORD *)(v47 + 184) = 0u;
    *(_OWORD *)(v47 + 168) = 0u;
    *(_OWORD *)(v47 + 152) = 0u;
    *(_OWORD *)(v47 + 136) = 0u;
    *(_OWORD *)(v47 + 120) = 0u;
    *(_OWORD *)(v47 + 104) = 0u;
    *(_OWORD *)(v47 + 88) = 0u;
    *(_OWORD *)(v47 + 72) = 0u;
    *(_OWORD *)(v47 + 56) = 0u;
    *(_OWORD *)(v47 + 40) = 0u;
    uint64_t v52 = (long long *)a3;
    uint64_t v37 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 232, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, &v52)+ 40;
    uint64_t v38 = (uint64_t)v25;
    unint64_t v39 = 0;
    unint64_t v40 = 80;
    uint64_t v41 = 0;
    goto LABEL_50;
  }
  if (v32 == (uint64_t *)((char *)&stru_20.filesize + 1)
    && !memcmp(*a3, "wavernn_dual_sample_inference_gru_cell_input_layer_MatMul_ReadVariableOp_resource", 0x51uLL))
  {
    goto LABEL_49;
  }
LABEL_24:
  if (v32 == (uint64_t *)((char *)&stru_20.fileoff + 2))
  {
    if (!memcmp(*a3, "wavernn_gru_cell_with_external_linear_input_MatMul_ReadVariableOp_resource", 0x4AuLL)) {
      goto LABEL_43;
    }
    std::chrono::steady_clock::time_point v32 = (uint64_t *)a3[1];
  }
  if (v32 != (uint64_t *)((char *)&stru_20.fileoff + 1)) {
    goto LABEL_30;
  }
  if (!memcmp(*a3, "wavernn_gru_cell_with_external_linear_input_MatMul_ReadVariableOp_to_fp16", 0x49uLL))
  {
LABEL_43:
    uint64_t v35 = (void *)(a1 + 232);
    uint64_t v52 = (long long *)a3;
    uint64_t v42 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 232, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, &v52);
    *((void *)v42 + 25) = 0;
    *(_OWORD *)(v42 + 184) = 0u;
    *(_OWORD *)(v42 + 168) = 0u;
    *(_OWORD *)(v42 + 152) = 0u;
    *(_OWORD *)(v42 + 136) = 0u;
    *(_OWORD *)(v42 + 120) = 0u;
    *(_OWORD *)(v42 + 104) = 0u;
    *(_OWORD *)(v42 + 88) = 0u;
    *(_OWORD *)(v42 + 72) = 0u;
    *(_OWORD *)(v42 + 56) = 0u;
    *(_OWORD *)(v42 + 40) = 0u;
    uint64_t v52 = (long long *)a3;
    uint64_t v37 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 232, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, &v52)+ 40;
    uint64_t v38 = (uint64_t)v25;
    unint64_t v39 = 80;
    unint64_t v40 = 81;
    uint64_t v41 = 0;
    uint64_t v43 = 672;
    goto LABEL_51;
  }
  std::chrono::steady_clock::time_point v32 = (uint64_t *)a3[1];
LABEL_30:
  if (v32 == (uint64_t *)((char *)&stru_20.fileoff + 4))
  {
    if (!memcmp(*a3, "wavernn_gru_cell_with_external_linear_input_1_MatMul_ReadVariableOp_resource", 0x4CuLL))
    {
LABEL_42:
      uint64_t v35 = (void *)(a1 + 232);
      uint64_t v52 = (long long *)a3;
      unint64_t v36 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 232, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, &v52);
      *((void *)v36 + 25) = 0;
      *(_OWORD *)(v36 + 184) = 0u;
      *(_OWORD *)(v36 + 168) = 0u;
      *(_OWORD *)(v36 + 152) = 0u;
      *(_OWORD *)(v36 + 136) = 0u;
      *(_OWORD *)(v36 + 120) = 0u;
      *(_OWORD *)(v36 + 104) = 0u;
      *(_OWORD *)(v36 + 88) = 0u;
      *(_OWORD *)(v36 + 72) = 0u;
      *(_OWORD *)(v36 + 56) = 0u;
      *(_OWORD *)(v36 + 40) = 0u;
      uint64_t v52 = (long long *)a3;
      uint64_t v37 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 232, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, &v52)+ 40;
      uint64_t v38 = (uint64_t)v25;
      unint64_t v39 = 80;
      unint64_t v40 = 82;
      uint64_t v41 = 672;
LABEL_50:
      uint64_t v43 = 1344;
LABEL_51:
      _ZN13TrainingUtils26slice_espresso_buffer_dataIDF16_EEvP17espresso_buffer_tS2_mmmm(v38, (uint64_t)v37, v39, v40, v41, v43);
      double v48 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v35, (unsigned __int8 *)a3);
      if (v48) {
        return v48 + 40;
      }
LABEL_54:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    std::chrono::steady_clock::time_point v32 = (uint64_t *)a3[1];
  }
  if (v32 == (uint64_t *)((char *)&stru_20.fileoff + 3))
  {
    std::string v28 = *a3;
LABEL_40:
    size_t v33 = "wavernn_gru_cell_with_external_linear_input_1_MatMul_ReadVariableOp_to_fp16";
    size_t v34 = 75;
    goto LABEL_41;
  }
LABEL_47:
  if (std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v5, (unsigned __int8 *)a4))
  {
    return std::unordered_map<std::string,espresso_buffer_t>::at(v5, (unsigned __int8 *)a4);
  }
  return (unsigned __int8 *)a2;
}

void WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *v4;
    v15.__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
  }
  uint64_t v5 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v19, (char *)&v15);
  std::__fs::filesystem::__remove_all(v5, 0);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v19, (char *)&v15);
  std::__fs::filesystem::__create_directory(v6, 0);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v18, "model.mil");
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v19, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else {
    std::string v19 = v15;
  }
  boost::filesystem::path::append_v3(&v19, &v18);
  std::string::basic_string[abi:ne180100]<0>(&__p, "weights/weight.bin");
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = v15;
  }
  boost::filesystem::path::append_v3(&v14, &__p);
  v17[0] = off_26F760;
  v17[1] = a1;
  v17[3] = v17;
  (*(void (**)(uint64_t, uint64_t, std::string *, std::string *, uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 8))(a1, a1 + 48, &v19, &v14, a1 + 144, a2, a1 + 24, v17);
  std::__function::__value_func<espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::~__value_func[abi:ne180100](v17);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 119) < 0) {
      uint64_t v4 = *(_OWORD **)v4;
    }
    LODWORD(v19.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "saved linear weights to: %s\n", (uint8_t *)&v19, 0xCu);
  }
  uint8_t v8 = (_OWORD *)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(a1 + 120), *(void *)(a1 + 128));
  }
  else
  {
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *v8;
    v19.__r_.__value_.__r.__words[2] = *(void *)(a1 + 136);
  }
  long long v9 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v18, (char *)&v19);
  std::__fs::filesystem::__remove_all(v9, 0);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  long long v10 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v18, (char *)&v19);
  std::__fs::filesystem::__create_directory(v10, 0);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, "model.mil");
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v18, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else {
    std::string v18 = v19;
  }
  boost::filesystem::path::append_v3(&v18, &v14);
  std::string::basic_string[abi:ne180100]<0>(&v12, "weights/weight.bin");
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v19;
  }
  boost::filesystem::path::append_v3(&__p, &v12);
  v16[0] = off_26F7F0;
  v16[1] = a1;
  v16[3] = v16;
  (*(void (**)(uint64_t, uint64_t, std::string *, std::string *, uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 8))(a1, a1 + 72, &v18, &__p, a1 + 168, a2, a1 + 24, v16);
  std::__function::__value_func<espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::~__value_func[abi:ne180100](v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  long long v11 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 143) < 0) {
      uint8_t v8 = *(_OWORD **)v8;
    }
    LODWORD(v18.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl(&def_5A5E8, v11, OS_LOG_TYPE_INFO, "saved gru weights to: %s\n", (uint8_t *)&v18, 0xCu);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1C7414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v41 - 105) < 0) {
    operator delete(*(void **)(v41 - 128));
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v41 - 73) < 0) {
    operator delete(*(void **)(v41 - 96));
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

void WaveRNNDecoupledInferenceModel::~WaveRNNDecoupledInferenceModel(WaveRNNDecoupledInferenceModel *this)
{
  *(void *)this = off_26F5A0;
  uint64_t v2 = (char *)this + 192;
  for (uint64_t i = (void *)*((void *)this + 26); i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = (void *)i[5];
    if (v4) {
      free(v4);
    }
  }
  for (unint64_t j = (void *)*((void *)this + 31); j; unint64_t j = (void *)*j)
  {
    uint64_t v6 = (void *)j[5];
    if (v6) {
      free(v6);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table((uint64_t)this + 232);
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table((uint64_t)v2);
  uint64_t v7 = (void **)((char *)this + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)((char *)this + 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  *(void *)this = &off_26F560;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)this + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 2, *((unsigned __int8 *)this + 8));
}

void *std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::pair<std::string const,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(unsigned char *a1, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v3 = operator new(0x18uLL);
      v3[2] = 0;
      v3[1] = 0;
      *uint64_t v3 = v3 + 1;
      goto LABEL_8;
    case 2:
      uint64_t v3 = operator new(0x18uLL);
      v3[1] = 0;
      v3[2] = 0;
      *uint64_t v3 = 0;
      goto LABEL_8;
    case 3:
      uint64_t v3 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[1]>("");
      goto LABEL_8;
    case 4:
      *a1 = 0;
      return a1;
    case 8:
      uint64_t v3 = operator new(0x20uLL);
      v3[1] = 0;
      v3[2] = 0;
      *uint64_t v3 = 0;
      *((_WORD *)v3 + 12) = 0;
LABEL_8:
      *(void *)a1 = v3;
      break;
    default:
      *(void *)a1 = 0;
      break;
  }
  return a1;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[1]>(char *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C793C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parser(a4, a1, (uint64_t)v8, a3);
  return std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v8);
}

void sub_1C79D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse(uint64_t a1, int a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v33, a1);
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser((uint64_t)&v34, a3, (uint64_t)v33, *(unsigned char *)(a1 + 176));
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v33);
    nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, &v34);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
    if (a2)
    {
      int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan((nlohmann::detail::input_stream_adapter *)(a1 + 40));
      *(_DWORD *)(a1 + 32) = v6;
      if (v6 != 15)
      {
        uint64_t v7 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(a1 + 40, &v32);
        long long v28 = *(_OWORD *)(a1 + 64);
        uint64_t v29 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(v25, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xFu, (uint64_t)v25, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v28, (uint64_t)&__p, (nlohmann::detail::exception *)&v30);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v34, v7, (uint64_t)&v32, (uint64_t)&v30);
        v30.__vftable = (std::exception_vtbl *)off_26F198;
        std::runtime_error::~runtime_error(&v31);
        std::exception::~exception(&v30);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v32.__r_.__value_.__l.__data_);
        }
      }
    }
    if (v39)
    {
      v23[0] = 9;
      uint8_t v8 = (uint64_t **)&v24;
      uint64_t v24 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      unsigned __int8 v9 = *(unsigned char *)a3;
      *(unsigned char *)a3 = v23[0];
      v23[0] = v9;
      uint64_t v10 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v24;
      uint64_t v24 = v10;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      int v11 = v23[0];
    }
    else
    {
      if (*(unsigned char *)a3 != 9)
      {
LABEL_27:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser((uint64_t)&v34);
        return;
      }
      v21[0] = 0;
      uint8_t v8 = (uint64_t **)&v22;
      uint64_t v22 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      unsigned __int8 v17 = *(unsigned char *)a3;
      *(unsigned char *)a3 = v21[0];
      v21[0] = v17;
      uint64_t v18 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v22;
      uint64_t v22 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      int v11 = v21[0];
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v8, v11);
    goto LABEL_27;
  }
  char v12 = *(unsigned char *)(a1 + 176);
  uint64_t v34 = a3;
  long long v35 = 0u;
  long long v36 = 0u;
  char v37 = 0;
  char v38 = v12;
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, &v34);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  if (a2)
  {
    int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan((nlohmann::detail::input_stream_adapter *)(a1 + 40));
    *(_DWORD *)(a1 + 32) = v13;
    if (v13 != 15)
    {
      uint64_t v14 = *(void *)(a1 + 64);
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(a1 + 40, &v32);
      long long v28 = *(_OWORD *)(a1 + 64);
      uint64_t v29 = *(void *)(a1 + 80);
      std::string::basic_string[abi:ne180100]<0>(v25, "value");
      nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xFu, (uint64_t)v25, &__p);
      nlohmann::detail::parse_error::create(101, (uint64_t *)&v28, (uint64_t)&__p, (nlohmann::detail::exception *)&v30);
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v34, v14, (uint64_t)&v32, (uint64_t)&v30);
      v30.__vftable = (std::exception_vtbl *)off_26F198;
      std::runtime_error::~runtime_error(&v31);
      std::exception::~exception(&v30);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v37)
  {
    v19[0] = 9;
    unint64_t v20 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    unsigned __int8 v15 = *(unsigned char *)a3;
    *(unsigned char *)a3 = v19[0];
    v19[0] = v15;
    long long v16 = *(uint64_t **)(a3 + 8);
    *(void *)(a3 + 8) = v20;
    unint64_t v20 = v16;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
  }
  if ((void)v35)
  {
    *((void *)&v35 + 1) = v35;
    operator delete((void *)v35);
  }
}

void sub_1C7E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::runtime_error a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  nlohmann::detail::exception::~exception(&a31);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  uint64_t v43 = *(void **)(v41 - 200);
  if (v43)
  {
    *(void *)(v41 - 192) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parser(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1, a3);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)a2;
  uint8_t v8 = (nlohmann::detail::input_stream_adapter *)(v7 + 40);
  *(_DWORD *)(v7 + 32) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(v7 + 56) = -1;
  *(unsigned char *)(v7 + 60) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 136) = "";
  *(void *)(v7 + 152) = 0;
  *(void *)(v7 + 160) = 0;
  *(void *)(v7 + 144) = 0;
  *(_DWORD *)(v7 + 168) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_decimal_point();
  *((unsigned char *)v8 + 136) = a4;
  *(_DWORD *)(a1 + 32) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v8);
  return a1;
}

void sub_1C8018(_Unwind_Exception *a1)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_decimal_point()
{
  v0 = localeconv();
  if (!v0) {
    __assert_rtn("get_decimal_point", "lexer.hpp", 136, "loc != nullptr");
  }
  if (v0->decimal_point) {
    return *v0->decimal_point;
  }
  else {
    return 46;
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(nlohmann::detail::input_stream_adapter *this)
{
  if (!*((void *)this + 3)
    && !nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::skip_bom(this))
  {
    unsigned __int8 v9 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
    goto LABEL_21;
  }
  while (2)
  {
    while (1)
    {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
      int v2 = *((_DWORD *)this + 4);
      if (v2 > 31) {
        break;
      }
      if ((v2 - 9) >= 2 && v2 != 13)
      {
        if ((v2 + 1) < 2) {
          return 15;
        }
        goto LABEL_40;
      }
    }
    if (v2 > 90)
    {
      if (v2 <= 109)
      {
        if (v2 == 91) {
          return 8;
        }
        if (v2 == 93) {
          return 10;
        }
        if (v2 != 102) {
          goto LABEL_40;
        }
        qmemcpy(v11, "false", 5);
        uint64_t v5 = v11;
        int v6 = this;
        unint64_t v7 = 5;
        uint64_t v8 = 2;
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v6, (unsigned __int8 *)v5, v7, v8);
      }
      if (v2 <= 122)
      {
        if (v2 == 110)
        {
          int v10 = 1819047278;
          uint64_t v5 = &v10;
          int v6 = this;
          unint64_t v7 = 4;
          uint64_t v8 = 3;
        }
        else
        {
          if (v2 != 116) {
            goto LABEL_40;
          }
          int v12 = 1702195828;
          uint64_t v5 = &v12;
          int v6 = this;
          unint64_t v7 = 4;
          uint64_t v8 = 1;
        }
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v6, (unsigned __int8 *)v5, v7, v8);
      }
      if (v2 == 123) {
        return 9;
      }
      if (v2 == 125) {
        return 11;
      }
LABEL_40:
      unsigned __int8 v9 = "invalid literal";
LABEL_21:
      *((void *)this + 12) = v9;
      return 14;
    }
    switch(v2)
    {
      case ' ':
        continue;
      case '""':
        uint64_t result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string((uint64_t)this);
        break;
      case ',':
        uint64_t result = 13;
        break;
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        uint64_t result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number((uint64_t)this);
        break;
      case ':':
        uint64_t result = 12;
        break;
      default:
        goto LABEL_40;
    }
    return result;
  }
}

BOOL nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::skip_bom(nlohmann::detail::input_stream_adapter *a1)
{
  if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 239)
  {
    return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 187
        && nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 191;
  }
  else
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget((uint64_t)a1);
    return 1;
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(nlohmann::detail::input_stream_adapter *this)
{
  *(int64x2_t *)((char *)this + 24) = vaddq_s64(*(int64x2_t *)((char *)this + 24), vdupq_n_s64(1uLL));
  if (*((unsigned char *)this + 20))
  {
    *((unsigned char *)this + 20) = 0;
    int character = *((_DWORD *)this + 4);
  }
  else
  {
    int character = nlohmann::detail::input_stream_adapter::get_character(this);
    *((_DWORD *)this + 4) = character;
  }
  if (character == -1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = (unsigned char *)*((void *)this + 7);
  unint64_t v3 = *((void *)this + 8);
  if ((unint64_t)v4 >= v3)
  {
    unint64_t v6 = *((void *)this + 6);
    unint64_t v7 = &v4[-v6];
    uint64_t v8 = (uint64_t)&v4[-v6 + 1];
    if (v8 < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v3 - v6;
    if (2 * v9 > v8) {
      uint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      int v11 = operator new(v10);
    }
    else {
      int v11 = 0;
    }
    int v12 = &v11[v10];
    v7[(void)v11] = character;
    uint64_t v5 = (uint64_t)&v7[(void)v11 + 1];
    if (v4 == (unsigned char *)v6)
    {
      int v11 = &v7[(void)v11];
    }
    else
    {
      int v13 = &v4[~v6];
      do
      {
        char v14 = *--v4;
        (v13--)[(void)v11] = v14;
      }
      while (v4 != (unsigned char *)v6);
      uint64_t v4 = (unsigned char *)*((void *)this + 6);
    }
    *((void *)this + 6) = v11;
    *((void *)this + 7) = v5;
    *((void *)this + 8) = v12;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *uint64_t v4 = character;
    uint64_t v5 = (uint64_t)(v4 + 1);
  }
  *((void *)this + 7) = v5;
  uint64_t result = *((unsigned int *)this + 4);
  if (result == 10)
  {
    uint64_t v16 = *((void *)this + 5) + 1;
    *((void *)this + 4) = 0;
    *((void *)this + 5) = v16;
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(nlohmann::detail::input_stream_adapter *this, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  if (*a2 != *((unsigned __int8 *)this + 16)) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal();
  }
  if (a3 >= 2)
  {
    unint64_t v6 = a3 - 1;
    unint64_t v7 = a2 + 1;
    while (1)
    {
      unsigned __int8 v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
      int v9 = *v7++;
      if (v9 != v8) {
        break;
      }
      if (!--v6) {
        return a4;
      }
    }
    *((void *)this + 12) = "invalid literal";
    return 14;
  }
  return a4;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string(uint64_t a1)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(a1);
  if (*(_DWORD *)(a1 + 16) != 34) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string();
  }
  while (2)
  {
    while (2)
    {
      int v2 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1)
         + 1;
      uint64_t result = 4;
      uint64_t v4 = "invalid string: missing closing quote";
      switch(v2)
      {
        case 0:
          goto LABEL_82;
        case 1:
          uint64_t v4 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
          goto LABEL_82;
        case 2:
          uint64_t v4 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
          goto LABEL_82;
        case 3:
          uint64_t v4 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
          goto LABEL_82;
        case 4:
          uint64_t v4 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
          goto LABEL_82;
        case 5:
          uint64_t v4 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
          goto LABEL_82;
        case 6:
          uint64_t v4 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
          goto LABEL_82;
        case 7:
          uint64_t v4 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
          goto LABEL_82;
        case 8:
          uint64_t v4 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
          goto LABEL_82;
        case 9:
          uint64_t v4 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
          goto LABEL_82;
        case 10:
          uint64_t v4 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
          goto LABEL_82;
        case 11:
          uint64_t v4 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
          goto LABEL_82;
        case 12:
          uint64_t v4 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
          goto LABEL_82;
        case 13:
          uint64_t v4 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
          goto LABEL_82;
        case 14:
          uint64_t v4 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
          goto LABEL_82;
        case 15:
          uint64_t v4 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
          goto LABEL_82;
        case 16:
          uint64_t v4 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
          goto LABEL_82;
        case 17:
          uint64_t v4 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
          goto LABEL_82;
        case 18:
          uint64_t v4 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
          goto LABEL_82;
        case 19:
          uint64_t v4 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
          goto LABEL_82;
        case 20:
          uint64_t v4 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
          goto LABEL_82;
        case 21:
          uint64_t v4 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
          goto LABEL_82;
        case 22:
          uint64_t v4 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
          goto LABEL_82;
        case 23:
          uint64_t v4 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
          goto LABEL_82;
        case 24:
          uint64_t v4 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
          goto LABEL_82;
        case 25:
          uint64_t v4 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
          goto LABEL_82;
        case 26:
          uint64_t v4 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
          goto LABEL_82;
        case 27:
          uint64_t v4 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
          goto LABEL_82;
        case 28:
          uint64_t v4 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
          goto LABEL_82;
        case 29:
          uint64_t v4 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
          goto LABEL_82;
        case 30:
          uint64_t v4 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
          goto LABEL_82;
        case 31:
          uint64_t v4 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
          goto LABEL_82;
        case 32:
          uint64_t v4 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
          goto LABEL_82;
        case 33:
        case 34:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
          int v5 = *(_DWORD *)(a1 + 16);
          goto LABEL_4;
        case 35:
          return result;
        case 93:
          int v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1);
          uint64_t v4 = "invalid string: forbidden character after backslash";
          if (v10 <= 97)
          {
            switch(v10)
            {
              case '""':
                LOBYTE(v5) = 34;
                break;
              case '/':
                LOBYTE(v5) = 47;
                break;
              case '\\':
                LOBYTE(v5) = 92;
                break;
              default:
                goto LABEL_82;
            }
            goto LABEL_4;
          }
          break;
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
          *(void *)&long long v14 = 0xBF00000080;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 2;
          goto LABEL_19;
        case 225:
          long long v8 = xmmword_212FC0;
          goto LABEL_7;
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 239:
        case 240:
          long long v8 = xmmword_212FB0;
          goto LABEL_7;
        case 238:
          long long v8 = xmmword_212FA0;
LABEL_7:
          long long v14 = v8;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 4;
          goto LABEL_19;
        case 241:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_213038;
          goto LABEL_18;
        case 242:
        case 243:
        case 244:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_213050;
          goto LABEL_18;
        case 245:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_213068;
LABEL_18:
          long long v14 = *v9;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 6;
LABEL_19:
          if ((nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(v6, &v14, v7) & 1) == 0)return 14; {
          continue;
          }
        default:
          uint64_t v4 = "invalid string: ill-formed UTF-8 byte";
          goto LABEL_82;
      }
      break;
    }
    switch(v10)
    {
      case 'n':
        LOBYTE(v5) = 10;
        goto LABEL_4;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_82;
      case 'r':
        LOBYTE(v5) = 13;
        goto LABEL_4;
      case 't':
        LOBYTE(v5) = 9;
        goto LABEL_4;
      case 'u':
        unsigned int codepoint = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint((nlohmann::detail::input_stream_adapter *)a1);
        if (codepoint == -1) {
          goto LABEL_85;
        }
        unsigned int v12 = codepoint;
        if ((codepoint & 0xFFFFFC00) != 0xD800)
        {
          if ((codepoint & 0xFFFFFC00) == 0xDC00)
          {
            uint64_t v4 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
            goto LABEL_82;
          }
          if (codepoint >= 0x110000) {
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string();
          }
          if (codepoint > 0x7F)
          {
            if (codepoint <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 72), (codepoint >> 6) | 0xC0);
              goto LABEL_39;
            }
            if (!HIWORD(codepoint))
            {
              std::string::push_back((std::string *)(a1 + 72), (codepoint >> 12) | 0xE0);
              goto LABEL_38;
            }
LABEL_37:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 18) | 0xF0);
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 12) & 0x3F | 0x80);
LABEL_38:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 6) & 0x3F | 0x80);
LABEL_39:
            LOBYTE(v5) = v12 & 0x3F | 0x80;
            goto LABEL_4;
          }
          LOBYTE(v5) = codepoint;
LABEL_4:
          std::string::push_back((std::string *)(a1 + 72), v5);
          continue;
        }
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1) != 92
          || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1) != 117)
        {
LABEL_86:
          uint64_t v4 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
          goto LABEL_82;
        }
        unsigned int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint((nlohmann::detail::input_stream_adapter *)a1);
        if (v13 != -1)
        {
          if (v13 >> 10 != 55) {
            goto LABEL_86;
          }
          unsigned int v12 = v13 + (v12 << 10) - 56613888;
          goto LABEL_37;
        }
LABEL_85:
        uint64_t v4 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_82:
        *(void *)(a1 + 96) = v4;
        return 14;
      default:
        if (v10 == 98)
        {
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v10 != 102) {
            goto LABEL_82;
          }
          LOBYTE(v5) = 12;
        }
        goto LABEL_4;
    }
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number(uint64_t a1)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(a1);
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 - 49) >= 9)
  {
    if (v2 == 48)
    {
      std::string::push_back((std::string *)(a1 + 72), 48);
      int v4 = 5;
    }
    else
    {
      if (v2 != 45) {
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
      }
      unint64_t v3 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), 45);
      int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1);
      if ((v13 - 49) < 9)
      {
        int v2 = *(_DWORD *)(a1 + 16);
        int v4 = 6;
        goto LABEL_3;
      }
      if (v13 != 48)
      {
        long long v14 = "invalid number; expected digit after '-'";
        goto LABEL_52;
      }
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      int v4 = 6;
    }
    int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1);
    if (v15 == 101 || v15 == 69)
    {
      int v5 = (std::string *)(a1 + 72);
      goto LABEL_9;
    }
    if (v15 != 46) {
      goto LABEL_40;
    }
    int v5 = (std::string *)(a1 + 72);
LABEL_34:
    std::string::push_back(v5, *(unsigned char *)(a1 + 128));
    if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1)
       - 48 > 9)
    {
      long long v14 = "invalid number; expected digit after '.'";
      goto LABEL_52;
    }
    int v5 = (std::string *)(a1 + 72);
    do
    {
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      int v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1);
    }
    while ((v16 - 48) < 0xA);
    if (v16 != 101 && v16 != 69)
    {
LABEL_13:
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(a1);
      __endptr = 0;
      *__error() = 0;
      goto LABEL_14;
    }
LABEL_9:
    std::string::push_back(v5, *(unsigned char *)(a1 + 16));
    int v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1);
    if ((v7 - 48) < 0xA)
    {
      long long v8 = (std::string *)(a1 + 72);
      goto LABEL_11;
    }
    if (v7 == 45 || v7 == 43)
    {
      long long v8 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1)
         - 48 < 0xA)
      {
LABEL_11:
        std::string::push_back(v8, *(unsigned char *)(a1 + 16));
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1)
           - 48 <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
          while (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1)
                - 48 < 0xA);
        }
        goto LABEL_13;
      }
      long long v14 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      long long v14 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_52:
    *(void *)(a1 + 96) = v14;
    return 14;
  }
  unint64_t v3 = (std::string *)(a1 + 72);
  int v4 = 5;
LABEL_3:
  std::string::push_back(v3, v2);
  int v5 = (std::string *)(a1 + 72);
  while (1)
  {
    int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1);
    if ((v6 - 48) >= 0xA) {
      break;
    }
    std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
  }
  if (v6 == 46) {
    goto LABEL_34;
  }
  if (v6 == 69 || v6 == 101) {
    goto LABEL_9;
  }
LABEL_40:
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(a1);
  __endptr = 0;
  *__error() = 0;
  if (v4 == 6)
  {
    unint64_t v21 = (const char **)(a1 + 72);
    uint64_t v22 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v22 = *v21;
    }
    uint64_t v23 = strtoll(v22, &__endptr, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      unint64_t v21 = *(const char ***)(a1 + 72);
      uint64_t v24 = *(void *)(a1 + 80);
    }
    else
    {
      uint64_t v24 = *(unsigned __int8 *)(a1 + 95);
    }
    if (__endptr != (char *)v21 + v24) {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
    }
    if (!*__error())
    {
      *(void *)(a1 + 104) = v23;
      return 6;
    }
  }
  else
  {
    unsigned __int8 v17 = (const char **)(a1 + 72);
    uint64_t v18 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v18 = *v17;
    }
    unint64_t v19 = strtoull(v18, &__endptr, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      unsigned __int8 v17 = *(const char ***)(a1 + 72);
      uint64_t v20 = *(void *)(a1 + 80);
    }
    else
    {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 95);
    }
    if (__endptr != (char *)v17 + v20) {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
    }
    if (!*__error())
    {
      *(void *)(a1 + 112) = v19;
      return 5;
    }
  }
LABEL_14:
  int v9 = (const char **)(a1 + 72);
  int v10 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    int v10 = *v9;
  }
  *(double *)(a1 + 120) = strtod(v10, &__endptr);
  if (*(char *)(a1 + 95) < 0)
  {
    int v9 = *(const char ***)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 80);
  }
  else
  {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 95);
  }
  if (__endptr != (char *)v9 + v11) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
  }
  return 7;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(uint64_t result)
{
  uint64_t v1 = (void *)(result + 32);
  uint64_t v2 = *(void *)(result + 32);
  *(unsigned char *)(result + 20) = 1;
  --*(void *)(result + 24);
  if (v2 || (uint64_t v1 = (void *)(result + 40), (v2 = *(void *)(result + 40)) != 0)) {
    void *v1 = v2 - 1;
  }
  if (*(_DWORD *)(result + 16) != -1)
  {
    uint64_t v3 = *(void *)(result + 56);
    if (*(void *)(result + 48) == v3) {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget();
    }
    *(void *)(result + 56) = v3 - 1;
  }
  return result;
}

uint64_t nlohmann::detail::input_stream_adapter::get_character(nlohmann::detail::input_stream_adapter *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  uint64_t v3 = (unsigned __int8 *)v2[3];
  if (v3 == (unsigned __int8 *)v2[4])
  {
    uint64_t result = (*(uint64_t (**)(void *))(*v2 + 80))(v2);
    if (result == -1)
    {
      int v5 = (std::ios_base *)(*(void *)this + *(void *)(**(void **)this - 24));
      std::ios_base::clear(v5, v5->__rdstate_ | 2);
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    v2[3] = v3 + 1;
    return *v3;
  }
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    **(unsigned char **)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 95) = 0;
  }
  uint64_t v2 = *(unsigned char **)(a1 + 48);
  *(void *)(a1 + 56) = v2;
  int v3 = *(_DWORD *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 64);
  if ((unint64_t)v2 >= v4)
  {
    unint64_t v6 = v4 - (void)v2;
    uint64_t v7 = 2 * v6;
    if (2 * v6 <= 1) {
      uint64_t v7 = 1;
    }
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v8 = v7;
    }
    int v9 = operator new(v8);
    *int v9 = v3;
    int v5 = v9 + 1;
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v9 + 1;
    *(void *)(a1 + 64) = &v9[v8];
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    unsigned char *v2 = v3;
    int v5 = v2 + 1;
  }
  *(void *)(a1 + 56) = v5;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint(nlohmann::detail::input_stream_adapter *this)
{
  if (*((_DWORD *)this + 4) != 117) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint();
  }
  uint64_t v2 = 0;
  LODWORD(v3) = 0;
  long long v8 = xmmword_212FD0;
  do
  {
    int v4 = *(_DWORD *)((char *)&v8 + v2);
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
    int v5 = *((_DWORD *)this + 4);
    int v6 = v5 - 48;
    if ((v5 - 48) >= 0xA)
    {
      if ((v5 - 65) > 5)
      {
        if ((v5 - 97) > 5) {
          return 0xFFFFFFFFLL;
        }
        int v6 = v5 - 87;
      }
      else
      {
        int v6 = v5 - 55;
      }
    }
    uint64_t v3 = ((v6 << v4) + v3);
    v2 += 4;
  }
  while (v2 != 16);
  if (v3 >= 0x10000) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint();
  }
  return v3;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(std::string *a1, _DWORD *a2, unint64_t a3)
{
  if (a3 > 6 || ((1 << a3) & 0x54) == 0) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range();
  }
  int v6 = a1 + 3;
  std::string::push_back(a1 + 3, a1->__r_.__value_.__s.__data_[16]);
  uint64_t v7 = &a2[a3];
  while (1)
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1);
    int v8 = a1->__r_.__value_.__r.__words[2];
    if (*a2 > v8 || v8 > a2[1]) {
      break;
    }
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7) {
      return 1;
    }
  }
  uint64_t result = 0;
  a1[4].__r_.__value_.__r.__words[0] = (std::string::size_type)"invalid string: ill-formed UTF-8 byte";
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(void **this)
{
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  uint64_t v2 = this[6];
  if (v2)
  {
    this[7] = v2;
    operator delete(v2);
  }

  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)this);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  int v4 = (long long *)(a1 + 112);
  int v5 = (nlohmann::detail::input_stream_adapter *)(a1 + 40);
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v37.__vftable) = 1;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v37, 0);
        goto LABEL_19;
      case 2:
        LOBYTE(v37.__vftable) = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v37, 0);
        goto LABEL_19;
      case 3:
        v37.__vftable = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2, (uint64_t)&v37, 0);
        goto LABEL_19;
      case 4:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v4, 0);
        goto LABEL_19;
      case 5:
        v37.__vftable = *(std::runtime_error_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t **)&v37, 0);
        goto LABEL_19;
      case 6:
        v37.__vftable = *(std::runtime_error_vtbl **)(a1 + 144);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t **)&v37, 0);
        goto LABEL_19;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v37.__vftable = *(std::runtime_error_vtbl **)(a1 + 160);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t **)&v37, 0);
          goto LABEL_19;
        }
        uint64_t v28 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v39);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v33);
        uint64_t v29 = std::string::insert(&v33, 0, "number overflow parsing '");
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error v31 = std::string::append(&__p, "'");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        std::string::size_type v36 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)long long v35 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(406, (uint64_t)v35, (nlohmann::detail::exception *)&v37);
        uint64_t v17 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v28, (uint64_t)&v39, (uint64_t)&v37);
        nlohmann::detail::exception::~exception(&v37);
        if (SHIBYTE(v36) < 0) {
          operator delete(v35[0]);
        }
        goto LABEL_50;
      case 8:
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_56; {
        int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          char v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2);
          goto LABEL_13;
        }
        LOBYTE(v37.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v40, &v37);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)goto LABEL_56; {
        int v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4) {
            goto LABEL_59;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56; {
          int v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          }
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 != 12) {
            goto LABEL_60;
          }
          LOBYTE(v37.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v40, &v37);
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
LABEL_37:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
        char v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_56:
          uint64_t v17 = 0;
          goto LABEL_44;
        }
LABEL_19:
        uint64_t v9 = v41;
        if (!v41)
        {
LABEL_43:
          uint64_t v17 = 1;
          goto LABEL_44;
        }
        while (2)
        {
          if ((*(void *)&v40[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)))
          {
            int v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13) {
              goto LABEL_36;
            }
            if (v10 != 10)
            {
              uint64_t v22 = *(void *)(a1 + 64);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v39);
              *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
              std::string::size_type v36 = *(void *)(a1 + 80);
              std::string::basic_string[abi:ne180100]<0>(&v33, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xAu, (uint64_t)&v33, &__p);
              nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
              uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v22, (uint64_t)&v39, (uint64_t)&v37);
              goto LABEL_61;
            }
            if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2)) {
              goto LABEL_56;
            }
            uint64_t v11 = v41;
            if (!v41)
            {
              int v24 = 383;
              goto LABEL_63;
            }
LABEL_30:
            uint64_t v9 = v11 - 1;
            uint64_t v41 = v9;
            if (!v9) {
              goto LABEL_43;
            }
            continue;
          }
          break;
        }
        int v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            uint64_t v25 = *(void *)(a1 + 64);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v39);
            *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
            std::string::size_type v36 = *(void *)(a1 + 80);
            std::string::basic_string[abi:ne180100]<0>(&v33, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xBu, (uint64_t)&v33, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
            uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v25, (uint64_t)&v39, (uint64_t)&v37);
            goto LABEL_61;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2)) {
            goto LABEL_56;
          }
          uint64_t v11 = v41;
          if (!v41)
          {
            int v24 = 439;
LABEL_63:
            __assert_rtn("sax_parse_internal", "parser.hpp", v24, "not states.empty()");
          }
          goto LABEL_30;
        }
        int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_59:
          uint64_t v26 = *(void *)(a1 + 64);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v39);
          *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
          std::string::size_type v36 = *(void *)(a1 + 80);
          std::string::basic_string[abi:ne180100]<0>(&v33, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 4u, (uint64_t)&v33, &__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
          uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v26, (uint64_t)&v39, (uint64_t)&v37);
          goto LABEL_61;
        }
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56; {
        int v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_36:
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          goto LABEL_37;
        }
LABEL_60:
        uint64_t v27 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v39);
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v33, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xCu, (uint64_t)&v33, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
        uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v27, (uint64_t)&v39, (uint64_t)&v37);
LABEL_61:
        uint64_t v17 = v23;
        nlohmann::detail::exception::~exception(&v37);
LABEL_50:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
LABEL_44:
        if (v40) {
          operator delete(v40);
        }
        return v17;
      case 0xE:
        uint64_t v19 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v39);
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v33, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0, (uint64_t)&v33, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
        uint64_t v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v19, (uint64_t)&v39, (uint64_t)&v37);
        goto LABEL_49;
      default:
        uint64_t v21 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v39);
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v33, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0x10u, (uint64_t)&v33, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
        uint64_t v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v21, (uint64_t)&v39, (uint64_t)&v37);
LABEL_49:
        uint64_t v17 = v20;
        v37.__vftable = (std::runtime_error_vtbl *)off_26F198;
        std::runtime_error::~runtime_error(&v38);
        std::exception::~exception(&v37);
        goto LABEL_50;
    }
  }
}

void sub_1C9E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::runtime_error a29)
{
  nlohmann::detail::exception::~exception(&a29);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v29 - 73) < 0) {
    operator delete(*(void **)(v29 - 96));
  }
  std::runtime_error v31 = *(void **)(v29 - 72);
  if (v31) {
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 88) = 1;
  if (*(unsigned char *)(a1 + 128))
  {
    switch(~(100 * (*(_DWORD *)(a4 + 8) / 100 / 100)) + *(_DWORD *)(a4 + 8) / 100)
    {
      case 0:
        exception = __cxa_allocate_exception(0x28uLL);
        int v6 = (void *)nlohmann::detail::parse_error::parse_error((uint64_t)exception, a4);
        break;
      case 1:
        int v8 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)nlohmann::detail::invalid_iterator::invalid_iterator((uint64_t)v8, a4);
        break;
      case 2:
        uint64_t v9 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)nlohmann::detail::type_error::type_error((uint64_t)v9, a4);
        break;
      case 3:
        int v10 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)nlohmann::detail::out_of_range::out_of_range((uint64_t)v10, a4);
        break;
      case 4:
        uint64_t v11 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)nlohmann::detail::other_error::other_error((uint64_t)v11, a4);
        break;
      default:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error();
    }
    __cxa_throw(v6, v7, (void (*)(void *))nlohmann::detail::exception::~exception);
  }
  return 0;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *(unsigned __int8 **)(a1 + 48);
  for (uint64_t i = *(unsigned __int8 **)(a1 + 56); v3 != i; ++v3)
  {
    unsigned int v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      char v7 = 0;
      *(void *)std::string __str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      std::string::append(a2, __str);
    }
  }
}

void sub_1CA1F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parse_error::create(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, nlohmann::detail::exception *a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v24, "parse_error");
  nlohmann::detail::exception::name(a1, &v26);
  int v8 = std::string::append(&v26, "parse error");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  nlohmann::detail::parse_error::position_string((uint64_t)a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v12 = std::string::append(&v27, (const std::string::value_type *)p_p, size);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  int v14 = std::string::append(&v28, ": ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  int v16 = *(char *)(a3 + 23);
  if (v16 >= 0) {
    uint64_t v17 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v17 = *(const std::string::value_type **)a3;
  }
  if (v16 >= 0) {
    std::string::size_type v18 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v18 = *(void *)(a3 + 8);
  }
  uint64_t v19 = std::string::append(&v29, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  int64_t v31 = v19->__r_.__value_.__r.__words[2];
  long long v30 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  uint64_t v21 = *a2;
  if (v31 >= 0) {
    uint64_t v22 = (const char *)&v30;
  }
  else {
    uint64_t v22 = (const char *)v30;
  }
  nlohmann::detail::exception::exception(a4, a1, v22);
  *(void *)a4 = off_26F698;
  *((void *)a4 + 4) = v21;
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)v30);
  }
}

void sub_1CA400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 57) < 0) {
    operator delete(*(void **)(v40 - 80));
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a4, "syntax error ");
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (v8)
  {
    std::operator+<char>();
    long long v9 = std::string::append(&v38, " ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t v40 = v9->__r_.__value_.__r.__words[2];
    long long v39 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      uint64_t v11 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v11 = (const std::string::value_type *)v39;
    }
    if (v40 >= 0) {
      std::string::size_type v12 = HIBYTE(v40);
    }
    else {
      std::string::size_type v12 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v11, v12);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
  }
  std::string::append(a4, "- ");
  unsigned int v13 = *(_DWORD *)(a1 + 32);
  if (v13 == 14)
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, *(char **)(a1 + 136));
    int v14 = std::string::append(&v36, "; last read: '");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(a1 + 40, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v18 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    long long v20 = std::string::append(&v38, "'");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    int64_t v40 = v20->__r_.__value_.__r.__words[2];
    long long v39 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      uint64_t v22 = (const std::string::value_type *)&v39;
    }
    else {
      uint64_t v22 = (const std::string::value_type *)v39;
    }
    if (v40 >= 0) {
      std::string::size_type v23 = HIBYTE(v40);
    }
    else {
      std::string::size_type v23 = *((void *)&v39 + 1);
    }
    std::string::append(a4, v22, v23);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      int v24 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_49;
    }
LABEL_46:
    if (!a2) {
      return;
    }
    goto LABEL_50;
  }
  char v25 = (char *)nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(v13);
  std::string::basic_string[abi:ne180100]<0>(&v38, v25);
  std::string v26 = std::string::insert(&v38, 0, "unexpected ");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  int64_t v40 = v26->__r_.__value_.__r.__words[2];
  long long v39 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0) {
    std::string v28 = (const std::string::value_type *)&v39;
  }
  else {
    std::string v28 = (const std::string::value_type *)v39;
  }
  if (v40 >= 0) {
    std::string::size_type v29 = HIBYTE(v40);
  }
  else {
    std::string::size_type v29 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v28, v29);
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_46;
  }
  int v24 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_49:
  operator delete(v24);
  if (!a2) {
    return;
  }
LABEL_50:
  long long v30 = (char *)nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(a2);
  std::string::basic_string[abi:ne180100]<0>(&v38, v30);
  int64_t v31 = std::string::insert(&v38, 0, "; expected ");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  int64_t v40 = v31->__r_.__value_.__r.__words[2];
  long long v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0) {
    std::string v33 = (const std::string::value_type *)&v39;
  }
  else {
    std::string v33 = (const std::string::value_type *)v39;
  }
  if (v40 >= 0) {
    std::string::size_type v34 = HIBYTE(v40);
  }
  else {
    std::string::size_type v34 = *((void *)&v39 + 1);
  }
  std::string::append(a4, v33, v34);
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_1CA7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v34 - 41) < 0) {
    operator delete(*(void **)(v34 - 64));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v4 = (std::runtime_error_vtbl *)(a1 + 112);
  unsigned int v5 = (nlohmann::detail::input_stream_adapter *)(a1 + 40);
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v38.__vftable) = 1;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v38);
        goto LABEL_17;
      case 2:
        LOBYTE(v38.__vftable) = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v38);
        goto LABEL_17;
      case 3:
        v38.__vftable = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2);
        goto LABEL_17;
      case 4:
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v4);
        goto LABEL_17;
      case 5:
        v38.__vftable = *(std::runtime_error_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t *)&v38);
        goto LABEL_17;
      case 6:
        v38.__vftable = *(std::runtime_error_vtbl **)(a1 + 144);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t *)&v38);
        goto LABEL_17;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v38.__vftable = *(std::runtime_error_vtbl **)(a1 + 160);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t *)&v38);
          goto LABEL_17;
        }
        uint64_t v29 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v40);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v34);
        long long v30 = std::string::insert(&v34, 0, "number overflow parsing '");
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        long long v32 = std::string::append(&__p, "'");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        std::string::size_type v37 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string v36 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(406, (uint64_t)v36, (nlohmann::detail::exception *)&v38);
        uint64_t v18 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v29, (uint64_t)&v40, (uint64_t)&v38);
        nlohmann::detail::exception::~exception(&v38);
        if (SHIBYTE(v37) < 0) {
          operator delete(v36[0]);
        }
        goto LABEL_43;
      case 8:
        if (!nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_56; {
        int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10) {
          goto LABEL_12;
        }
        LOBYTE(v38.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v41, &v38);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)
        {
LABEL_56:
          uint64_t v18 = 0;
          goto LABEL_37;
        }
        int v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 != 11)
        {
          if (v7 != 4) {
            goto LABEL_51;
          }
          int v16 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
          v38.__vftable = v4;
          a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, (const void **)&v4->~runtime_error, (uint64_t)&std::piecewise_construct, (long long **)&v38)+ 7);
          int v17 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          *(_DWORD *)(a1 + 32) = v17;
          if (v17 != 12) {
            goto LABEL_54;
          }
          LOBYTE(v38.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v41, &v38);
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
LABEL_32:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
LABEL_12:
        a2[2] -= 8;
LABEL_17:
        uint64_t v8 = v42;
        if (!v42)
        {
LABEL_36:
          uint64_t v18 = 1;
          goto LABEL_37;
        }
        while (2)
        {
          if ((*(void *)&v41[((unint64_t)(v8 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v8 - 1)))
          {
            int v9 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
            *(_DWORD *)(a1 + 32) = v9;
            if (v9 == 13) {
              goto LABEL_31;
            }
            if (v9 != 10)
            {
              uint64_t v23 = *(void *)(a1 + 64);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v40);
              *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
              std::string::size_type v37 = *(void *)(a1 + 80);
              std::string::basic_string[abi:ne180100]<0>(&v34, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xAu, (uint64_t)&v34, &__p);
              nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
              uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v23, (uint64_t)&v40, (uint64_t)&v38);
              goto LABEL_55;
            }
            a2[2] -= 8;
            uint64_t v10 = v42;
            if (!v42)
            {
              int v25 = 383;
              goto LABEL_53;
            }
LABEL_26:
            uint64_t v8 = v10 - 1;
            uint64_t v42 = v8;
            if (!v8) {
              goto LABEL_36;
            }
            continue;
          }
          break;
        }
        int v11 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v11;
        if (v11 != 13)
        {
          if (v11 != 11)
          {
            uint64_t v26 = *(void *)(a1 + 64);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v40);
            *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
            std::string::size_type v37 = *(void *)(a1 + 80);
            std::string::basic_string[abi:ne180100]<0>(&v34, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xBu, (uint64_t)&v34, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
            uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v26, (uint64_t)&v40, (uint64_t)&v38);
            goto LABEL_55;
          }
          a2[2] -= 8;
          uint64_t v10 = v42;
          if (!v42)
          {
            int v25 = 439;
LABEL_53:
            __assert_rtn("sax_parse_internal", "parser.hpp", v25, "not states.empty()");
          }
          goto LABEL_26;
        }
        int v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 4)
        {
LABEL_51:
          uint64_t v27 = *(void *)(a1 + 64);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v40);
          *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
          std::string::size_type v37 = *(void *)(a1 + 80);
          std::string::basic_string[abi:ne180100]<0>(&v34, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 4u, (uint64_t)&v34, &__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
          uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v27, (uint64_t)&v40, (uint64_t)&v38);
          goto LABEL_55;
        }
        unsigned int v13 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
        v38.__vftable = v4;
        a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (const void **)&v4->~runtime_error, (uint64_t)&std::piecewise_construct, (long long **)&v38)+ 7);
        int v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_31:
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          goto LABEL_32;
        }
LABEL_54:
        uint64_t v28 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xCu, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v28, (uint64_t)&v40, (uint64_t)&v38);
LABEL_55:
        uint64_t v18 = v24;
        nlohmann::detail::exception::~exception(&v38);
LABEL_43:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
LABEL_37:
        if (v41) {
          operator delete(v41);
        }
        return v18;
      case 0xE:
        uint64_t v20 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        uint64_t v21 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v20, (uint64_t)&v40, (uint64_t)&v38);
        goto LABEL_42;
      default:
        uint64_t v22 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v40);
        *(_OWORD *)std::string v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0x10u, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        uint64_t v21 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v22, (uint64_t)&v40, (uint64_t)&v38);
LABEL_42:
        uint64_t v18 = v21;
        v38.__vftable = (std::runtime_error_vtbl *)off_26F198;
        std::runtime_error::~runtime_error(&v39);
        std::exception::~exception(&v38);
        goto LABEL_43;
    }
  }
}

void sub_1CB0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::runtime_error a29)
{
  nlohmann::detail::exception::~exception(&a29);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  long long v31 = *(void **)(v29 - 88);
  if (v31) {
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 40) = 1;
  if (*(unsigned char *)(a1 + 41))
  {
    switch(~(100 * (*(_DWORD *)(a4 + 8) / 100 / 100)) + *(_DWORD *)(a4 + 8) / 100)
    {
      case 0:
        exception = __cxa_allocate_exception(0x28uLL);
        int v6 = (void *)nlohmann::detail::parse_error::parse_error((uint64_t)exception, a4);
        break;
      case 1:
        uint64_t v8 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)nlohmann::detail::invalid_iterator::invalid_iterator((uint64_t)v8, a4);
        break;
      case 2:
        int v9 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)nlohmann::detail::type_error::type_error((uint64_t)v9, a4);
        break;
      case 3:
        uint64_t v10 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)nlohmann::detail::out_of_range::out_of_range((uint64_t)v10, a4);
        break;
      case 4:
        int v11 = __cxa_allocate_exception(0x20uLL);
        int v6 = (void *)nlohmann::detail::other_error::other_error((uint64_t)v11, a4);
        break;
      default:
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error();
    }
    __cxa_throw(v6, v7, (void (*)(void *))nlohmann::detail::exception::~exception);
  }
  return 0;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = a1 + 32;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1 + 96, a3);
  *(unsigned char *)(a1 + 136) = 9;
  *(unsigned char *)(a1 + 128) = a4;
  *(void *)(a1 + 144) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 136);
  char v8 = 1;
  std::vector<BOOL>::push_back(v6, &v8);
  return a1;
}

void sub_1CB478(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v4);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v6);
  char v8 = *(void **)(v1 + 56);
  if (v8) {
    operator delete(v8);
  }
  if (*v2) {
    operator delete(*v2);
  }
  int v9 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 16) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(uint64_t *a1, unint64_t a2)
{
  int v4 = (char **)(a1 + 1);
  char v30 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 0);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 4), &v30);
  LOBYTE(v28) = 1;
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v28, 1);
  uint64_t v6 = v5;
  int v7 = (void *)a1[2];
  unint64_t v8 = a1[3];
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v8 - (void)*v4;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
    }
    else {
      int v14 = 0;
    }
    int v15 = &v14[8 * v10];
    int v16 = &v14[8 * v13];
    *(void *)int v15 = v6;
    int v9 = v15 + 8;
    uint64_t v18 = (char *)a1[1];
    int v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int v17 = *v4;
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v9;
    a1[3] = (uint64_t)v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *int v7 = v5;
    int v9 = v7 + 1;
  }
  a1[2] = (uint64_t)v9;
  if (a2 != -1)
  {
    uint64_t v20 = (char *)*(v9 - 1);
    if (v20)
    {
      unint64_t v21 = *v20;
      if (v21 > 2) {
        unint64_t v22 = 1;
      }
      else {
        unint64_t v22 = qword_213630[v21];
      }
      if (v22 < a2)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v27, a2);
        int v25 = std::string::insert(&v27, 0, "excessive object size: ");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        std::string::size_type v29 = v25->__r_.__value_.__r.__words[2];
        long long v28 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(408, (uint64_t)&v28, exception);
      }
    }
  }
  return 1;
}

void sub_1CB6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(void *a1)
{
  uint64_t v2 = a1[2];
  if (*(void *)(v2 - 8)
    && (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 1) & 1) == 0)
  {
    uint64_t v3 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v20, (uint64_t)(a1 + 17));
    uint64_t v4 = *(void *)(a1[2] - 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v3);
    char v5 = *(unsigned char *)v4;
    *(unsigned char *)uint64_t v4 = v20[0];
    v20[0] = v5;
    uint64_t v6 = *(uint64_t **)(v4 + 8);
    *(void *)(v4 + 8) = v21;
    unint64_t v21 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
  }
  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  if (v8 == v7) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object();
  }
  uint64_t v9 = a1[5];
  if (!v9) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object();
  }
  a1[2] = v7 - 8;
  a1[5] = v9 - 1;
  if (v8 != v7 - 8)
  {
    uint64_t v10 = *(unsigned __int8 **)(v7 - 16);
    if (v10)
    {
      if (*v10 - 1 <= 1)
      {
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v17, (uint64_t)v10);
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_begin(&v17);
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v16, *(void *)(a1[2] - 8));
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(v16);
        if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v17, v16))
        {
          while (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v17) != 9)
          {
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(&v17);
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v16, *(void *)(a1[2] - 8));
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(v16);
            if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v17, v16))
            {
              return 1;
            }
          }
          uint64_t v11 = *(unsigned __int8 **)(a1[2] - 8);
          unint64_t v13 = v17;
          long long v14 = v18;
          long long v15 = v19;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v11, &v13, v16);
        }
      }
    }
  }
  return 1;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(void *a1, long long *a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v12, (uint64_t)a2);
  char v11 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (a1[2] - a1[1]) >> 3, 4);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 7), &v11);
  if (v11 && *(void *)(a1[2] - 8))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)(a1 + 17));
    uint64_t v4 = *(uint64_t ***)(*(void *)(a1[2] - 8) + 8);
    long long v14 = a2;
    char v5 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (const void **)a2, (uint64_t)&std::piecewise_construct, &v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    char v6 = *((unsigned char *)v5 + 56);
    v5 += 7;
    *(unsigned char *)char v5 = v9[0];
    v9[0] = v6;
    uint64_t v7 = (uint64_t *)v5[1];
    v5[1] = (uint64_t)v10;
    uint64_t v10 = v7;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
    a1[10] = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
  return 1;
}

void sub_1CB9F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, uint64_t *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = (char **)(a1 + 1);
  char v30 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 2);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 4), &v30);
  LOBYTE(v28) = 2;
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v28, 1);
  uint64_t v6 = v5;
  uint64_t v7 = (void *)a1[2];
  unint64_t v8 = a1[3];
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v8 - (void)*v4;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
    }
    else {
      long long v14 = 0;
    }
    long long v15 = &v14[8 * v10];
    int v16 = &v14[8 * v13];
    *(void *)long long v15 = v6;
    uint64_t v9 = v15 + 8;
    long long v18 = (char *)a1[1];
    int v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int v17 = *v4;
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v9;
    a1[3] = (uint64_t)v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *uint64_t v7 = v5;
    uint64_t v9 = v7 + 1;
  }
  a1[2] = (uint64_t)v9;
  if (a2 != -1)
  {
    uint64_t v20 = (char *)*(v9 - 1);
    if (v20)
    {
      unint64_t v21 = *v20;
      if (v21 > 2) {
        unint64_t v22 = 1;
      }
      else {
        unint64_t v22 = qword_213630[v21];
      }
      if (v22 < a2)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v27, a2);
        int v25 = std::string::insert(&v27, 0, "excessive array size: ");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        std::string::size_type v29 = v25->__r_.__value_.__r.__words[2];
        long long v28 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(408, (uint64_t)&v28, exception);
      }
    }
  }
  return 1;
}

void sub_1CBC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(void *a1)
{
  uint64_t v2 = a1[2];
  if (*(void *)(v2 - 8)
    && (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 3) & 1) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v12, (uint64_t)(a1 + 17));
    uint64_t v4 = *(void *)(a1[2] - 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
    char v5 = *(unsigned char *)v4;
    *(unsigned char *)uint64_t v4 = v12[0];
    v12[0] = v5;
    uint64_t v6 = *(uint64_t **)(v4 + 8);
    *(void *)(v4 + 8) = v13;
    unint64_t v13 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
    char v3 = 0;
  }
  else
  {
    char v3 = 1;
  }
  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  if (v8 == v7) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array();
  }
  uint64_t v9 = a1[5];
  if (!v9) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array();
  }
  a1[2] = v7 - 8;
  a1[5] = v9 - 1;
  if (v8 == v7 - 8) {
    char v3 = 1;
  }
  if ((v3 & 1) == 0)
  {
    uint64_t v10 = *(void *)(v7 - 16);
    if (*(unsigned char *)v10 == 2) {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](*(void *)(v10 + 8), *(void *)(*(void *)(v10 + 8) + 8) - 16);
    }
  }
  return 1;
}

void nlohmann::detail::out_of_range::create(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "out_of_range");
  nlohmann::detail::exception::name(a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v16 >= 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (void **)v15[0];
  }
  nlohmann::detail::exception::exception(a3, a1, (const char *)v11);
  *(void *)a3 = off_26F658;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_1CBE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()(uint64_t a1, int a2, char a3)
{
  int v6 = a2;
  char v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, char *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    int v6 = *a2;
    v30[0] = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v31, v6);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        std::string::size_type v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        long long v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        uint64_t v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        char v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        int64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        std::string::size_type v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      std::string::size_type v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          long long v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30[0];
            *(void *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            long long v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30[0];
              std::string v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              long long v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              uint64_t v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              char v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              int v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              std::string v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          uint64_t v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          uint64_t v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_1CC21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(unsigned __int8 **a1)
{
  uint64_t result = *a1;
  if (!result) {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
  }
  int v3 = *result;
  if (v3 == 2)
  {
    char v5 = *(unsigned __int8 **)(*((void *)result + 1) + 8);
    uint64_t result = a1[2];
    if (result == v5) {
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
    }
  }
  else if (v3 == 1)
  {
    uint64_t v4 = a1[1];
    if (v4 == (unsigned __int8 *)(*((void *)result + 1) + 8)) {
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
    }
    return v4 + 56;
  }
  else if (a1[4])
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "cannot get value");
    nlohmann::detail::invalid_iterator::create(214, (uint64_t)v7, exception);
  }
  return result;
}

void sub_1CC31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(unsigned __int8 *a1@<X0>, unsigned __int8 **a2@<X1>, void *a3@<X8>)
{
  if (*a2 != a1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v25, "iterator does not fit current value");
    nlohmann::detail::invalid_iterator::create(202, (uint64_t)&v25, exception);
  }
  int v6 = (unsigned __int8 **)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(a3, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(v6);
  int v7 = *a1;
  if ((v7 - 3) < 6)
  {
    if (a2[4])
    {
      unint64_t v19 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v25, "iterator out of range");
      nlohmann::detail::invalid_iterator::create(205, (uint64_t)&v25, v19);
    }
    if (v7 == 8)
    {
      int v9 = (void **)(a1 + 8);
      std::string::size_type v8 = (void **)*((void *)a1 + 1);
      uint64_t v14 = *v8;
      if (*v8)
      {
        v8[1] = v14;
        long long v10 = v14;
        goto LABEL_13;
      }
    }
    else
    {
      if (v7 != 3)
      {
LABEL_15:
        *a1 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
        return;
      }
      int v9 = (void **)(a1 + 8);
      std::string::size_type v8 = (void **)*((void *)a1 + 1);
      if (*((char *)v8 + 23) < 0)
      {
        long long v10 = *v8;
LABEL_13:
        operator delete(v10);
        std::string::size_type v8 = (void **)*v9;
      }
    }
    operator delete(v8);
    *int v9 = 0;
    goto LABEL_15;
  }
  if (v7 == 1)
  {
    char v15 = (uint64_t **)*((void *)a1 + 1);
    int v16 = (uint64_t *)a2[1];
    uint64_t v17 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(v15, v16);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)(v16 + 4));
    operator delete(v16);
    a3[1] = v17;
  }
  else
  {
    if (v7 != 2)
    {
      uint64_t v20 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      char v21 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:ne180100]<0>(&v24, v21);
      int v22 = std::string::insert(&v24, 0, "cannot use erase() with ");
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      std::string::size_type v26 = v22->__r_.__value_.__r.__words[2];
      long long v25 = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(307, (uint64_t)&v25, v20);
    }
    uint64_t v11 = *((void *)a1 + 1);
    uint64_t v12 = (uint64_t)a2[2];
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v25, v12 + 16, *(void *)(v11 + 8), v12);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](v11, v13);
    a3[2] = v12;
  }
}

void sub_1CC5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v22) {
    __cxa_free_exception(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  int v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(uint64_t *a1, uint64_t **a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    int v6 = *a2;
    v30[0] = 7;
    long long v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        std::string::size_type v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        long long v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        uint64_t v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        unsigned __int8 v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        int v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        std::string::size_type v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      std::string::size_type v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          long long v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30[0];
            *(void *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            long long v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30[0];
              std::string v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              long long v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              uint64_t v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              unsigned __int8 v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              char v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              std::string v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          std::string v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          std::string v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_1CC9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    int v6 = (uint64_t *)*a2;
    v30[0] = 4;
    long long v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        std::string::size_type v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        long long v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        uint64_t v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        unsigned __int8 v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        int v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        std::string::size_type v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      std::string::size_type v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          long long v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30[0];
            *(void *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            long long v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30[0];
              std::string v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              long long v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              uint64_t v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              unsigned __int8 v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              char v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              std::string v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          std::string v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          std::string v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_1CCCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    v29[0] = 0;
    char v30 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v6 = a1[2];
      if (a1[1] == v6)
      {
        v27[0] = v29[0];
        long long v28 = v30;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
        v29[0] = 0;
        char v30 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        uint64_t v13 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        char v14 = *(unsigned char *)v13;
        *(unsigned char *)uint64_t v13 = v27[0];
        v27[0] = v14;
        unsigned __int8 v15 = *(uint64_t **)(v13 + 8);
        *(void *)(v13 + 8) = v28;
        long long v28 = v15;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v13);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
LABEL_20:
        uint64_t v12 = 1;
        goto LABEL_21;
      }
      uint64_t v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        int v8 = *v7;
        if (v8 == 2)
        {
          int v9 = (uint64_t *)*((void *)v7 + 1);
          unint64_t v10 = v9[1];
          if (v10 >= v9[2])
          {
            uint64_t v11 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v9, (uint64_t)v29);
          }
          else
          {
            *(unsigned char *)unint64_t v10 = v29[0];
            *(void *)(v10 + 8) = v30;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
            v29[0] = 0;
            char v30 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
            uint64_t v11 = v10 + 16;
          }
          v9[1] = v11;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          uint64_t v16 = a1[8];
          if (v16)
          {
            unint64_t v17 = v16 - 1;
            unint64_t v18 = *(void *)(a1[7] + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v17;
            if ((v18 >> v17))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v25[0] = v29[0];
              std::string::size_type v26 = v30;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
              v29[0] = 0;
              char v30 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              uint64_t v19 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              char v20 = *(unsigned char *)v19;
              *(unsigned char *)uint64_t v19 = v25[0];
              v25[0] = v20;
              unsigned __int8 v21 = *(uint64_t **)(v19 + 8);
              *(void *)(v19 + 8) = v26;
              std::string::size_type v26 = v21;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          long long v23 = "not key_keep_stack.empty()";
          int v24 = 615;
        }
        else
        {
          long long v23 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v24 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v24, v23);
      }
    }
LABEL_17:
    uint64_t v12 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
    return v12;
  }
  return 0;
}

void sub_1CCFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(uint64_t *a1, uint64_t **a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    uint64_t v6 = *a2;
    v30[0] = 5;
    long long v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        std::string::size_type v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        long long v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        uint64_t v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        unsigned __int8 v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        uint64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        std::string::size_type v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          unint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30[0];
            *(void *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            long long v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30[0];
              std::string v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              long long v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              uint64_t v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              unsigned __int8 v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              char v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              std::string v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          int v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          int v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_1CD2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v29, a2);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v6 = a1[2];
      if (a1[1] == v6)
      {
        v27[0] = v29[0];
        long long v28 = v30;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
        v29[0] = 0;
        char v30 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        uint64_t v13 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        char v14 = *(unsigned char *)v13;
        *(unsigned char *)uint64_t v13 = v27[0];
        v27[0] = v14;
        unsigned __int8 v15 = *(uint64_t **)(v13 + 8);
        *(void *)(v13 + 8) = v28;
        long long v28 = v15;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v13);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
LABEL_20:
        uint64_t v12 = 1;
        goto LABEL_21;
      }
      uint64_t v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        int v8 = *v7;
        if (v8 == 2)
        {
          int v9 = (uint64_t *)*((void *)v7 + 1);
          unint64_t v10 = v9[1];
          if (v10 >= v9[2])
          {
            uint64_t v11 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v9, (uint64_t)v29);
          }
          else
          {
            *(unsigned char *)unint64_t v10 = v29[0];
            *(void *)(v10 + 8) = v30;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
            v29[0] = 0;
            char v30 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
            uint64_t v11 = v10 + 16;
          }
          v9[1] = v11;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          uint64_t v16 = a1[8];
          if (v16)
          {
            unint64_t v17 = v16 - 1;
            unint64_t v18 = *(void *)(a1[7] + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v17;
            if ((v18 >> v17))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v25[0] = v29[0];
              std::string::size_type v26 = v30;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
              v29[0] = 0;
              char v30 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              uint64_t v19 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              char v20 = *(unsigned char *)v19;
              *(unsigned char *)uint64_t v19 = v25[0];
              v25[0] = v20;
              unsigned __int8 v21 = *(uint64_t **)(v19 + 8);
              *(void *)(v19 + 8) = v26;
              std::string::size_type v26 = v21;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          long long v23 = "not key_keep_stack.empty()";
          int v24 = 615;
        }
        else
        {
          long long v23 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v24 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v24, v23);
      }
    }
LABEL_17:
    uint64_t v12 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
    return v12;
  }
  return 0;
}

void sub_1CD5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(uint64_t *a1, uint64_t **a2, char a3)
{
  uint64_t v3 = a1[5];
  if (!v3) {
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
  }
  if ((*(void *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)))
  {
    uint64_t v6 = *a2;
    v30[0] = 6;
    long long v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((a3 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      uint64_t v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        std::string::size_type v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        long long v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        uint64_t v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        unsigned __int8 v15 = *(unsigned char *)v14;
        *(unsigned char *)uint64_t v14 = v28[0];
        v28[0] = v15;
        uint64_t v16 = *(uint64_t **)(v14 + 8);
        *(void *)(v14 + 8) = v29;
        std::string::size_type v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        uint64_t v13 = 1;
        goto LABEL_21;
      }
      int v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        int v9 = *v8;
        if (v9 == 2)
        {
          unint64_t v10 = (uint64_t *)*((void *)v8 + 1);
          unint64_t v11 = v10[1];
          if (v11 >= v10[2])
          {
            uint64_t v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(unsigned char *)unint64_t v11 = v30[0];
            *(void *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            long long v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            uint64_t v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          uint64_t v17 = a1[8];
          if (v17)
          {
            unint64_t v18 = v17 - 1;
            unint64_t v19 = *(void *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if ((v19 >> v18))
            {
              if (!a1[10]) {
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              }
              v26[0] = v30[0];
              std::string v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              long long v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              uint64_t v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              unsigned __int8 v21 = *(unsigned char *)v20;
              *(unsigned char *)uint64_t v20 = v26[0];
              v26[0] = v21;
              char v22 = *(uint64_t **)(v20 + 8);
              *(void *)(v20 + 8) = v27;
              std::string v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          int v24 = "not key_keep_stack.empty()";
          int v25 = 615;
        }
        else
        {
          int v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          int v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    uint64_t v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_1CD8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::parse_error::parse_error(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26F198;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(void *)a1 = off_26F698;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t nlohmann::detail::out_of_range::out_of_range(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26F198;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(void *)a1 = off_26F658;
  return a1;
}

uint64_t nlohmann::detail::invalid_iterator::invalid_iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26F198;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(void *)a1 = off_26F1F0;
  return a1;
}

uint64_t nlohmann::detail::type_error::type_error(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26F198;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(void *)a1 = off_26F218;
  return a1;
}

uint64_t nlohmann::detail::other_error::other_error(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26F198;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(void *)a1 = off_26F618;
  return a1;
}

void nlohmann::detail::parse_error::~parse_error(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_26F198;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);

  operator delete();
}

void nlohmann::detail::parse_error::position_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v12, *(void *)(a1 + 16) + 1);
  uint64_t v4 = std::string::insert(&v12, 0, " at line ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v13, ", column ");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(void *)(a1 + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v10 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_1CDCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 25) < 0) {
    operator delete(*(void **)(v26 - 48));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

const char *nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(unsigned int a1)
{
  if (a1 > 0x10) {
    return "unknown token";
  }
  else {
    return (&off_2583D8)[a1];
  }
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser(uint64_t a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 136);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((void *)(a1 + 96));
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 16) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(uint64_t *a1, unint64_t a2)
{
  LOBYTE(v26) = 1;
  uint64_t v4 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v26);
  unint64_t v5 = a1[3];
  uint64_t v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      std::string v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v12);
    }
    else {
      std::string v13 = 0;
    }
    std::string v14 = (uint64_t *)&v13[8 * v9];
    unsigned __int8 v15 = &v13[8 * v12];
    *std::string v14 = v4;
    long long v7 = v14 + 1;
    uint64_t v17 = (char *)a1[1];
    uint64_t v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *--std::string v14 = v18;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)v7;
    a1[3] = (uint64_t)v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    long long v7 = v6 + 1;
  }
  a1[2] = (uint64_t)v7;
  if (a2 != -1)
  {
    unint64_t v19 = *(char *)*(v7 - 1);
    if (v19 > 2) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = qword_213630[v19];
    }
    if (v20 < a2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::to_string(&v25, a2);
      long long v23 = std::string::insert(&v25, 0, "excessive object size: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      std::string::size_type v27 = v23->__r_.__value_.__r.__words[2];
      long long v26 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::out_of_range::create(408, (uint64_t)&v26, exception);
    }
  }
  return 1;
}

void sub_1CDF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(uint64_t *a1, unint64_t a2)
{
  LOBYTE(v26) = 2;
  uint64_t v4 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v26);
  unint64_t v5 = a1[3];
  uint64_t v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      std::string v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v12);
    }
    else {
      std::string v13 = 0;
    }
    std::string v14 = (uint64_t *)&v13[8 * v9];
    unsigned __int8 v15 = &v13[8 * v12];
    *std::string v14 = v4;
    long long v7 = v14 + 1;
    uint64_t v17 = (char *)a1[1];
    uint64_t v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *--std::string v14 = v18;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)v7;
    a1[3] = (uint64_t)v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v6 = v4;
    long long v7 = v6 + 1;
  }
  a1[2] = (uint64_t)v7;
  if (a2 != -1)
  {
    unint64_t v19 = *(char *)*(v7 - 1);
    if (v19 > 2) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = qword_213630[v19];
    }
    if (v20 < a2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::to_string(&v25, a2);
      long long v23 = std::string::insert(&v25, 0, "excessive array size: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      std::string::size_type v27 = v23->__r_.__value_.__r.__words[2];
      long long v26 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::out_of_range::create(408, (uint64_t)&v26, exception);
    }
  }
  return 1;
}

void sub_1CE16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    int v9 = *a2;
    v20[0] = v9;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v21, v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    uint64_t v10 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    unsigned __int8 v11 = *(unsigned char *)v10;
    *(unsigned char *)uint64_t v10 = v20[0];
    v20[0] = v11;
    unint64_t v12 = *(uint64_t **)(v10 + 8);
    *(void *)(v10 + 8) = v21;
    unsigned __int8 v21 = v12;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      uint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v8 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::detail::value_t>(v6, a2);
      }
      else
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::detail::value_t>((uint64_t)v6, a2);
        uint64_t v8 = v7 + 16;
      }
      v6[1] = v8;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      int v14 = *a2;
      v18[0] = v14;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v19, v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
      uint64_t v15 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
      unsigned __int8 v16 = *(unsigned char *)v15;
      *(unsigned char *)uint64_t v15 = v18[0];
      v18[0] = v16;
      uint64_t v17 = *(uint64_t **)(v15 + 8);
      *(void *)(v15 + 8) = v19;
      unint64_t v19 = v17;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v15);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v19, v18[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::detail::value_t>(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  uint64_t v3 = *(unsigned char **)(a1 + 8);
  *uint64_t v3 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(v3 + 8, v4);
  uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  *(void *)(a1 + 8) = v3 + 16;
  return result;
}

void sub_1CE390(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::TransitionModel::Tuple>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unsigned __int8 v11 = &v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unsigned __int8 v16 = v11;
  uint64_t v17 = &v10[16 * v9];
  int v12 = *a2;
  char *v11 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(v11 + 8, v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
  v16 += 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1CE478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v10 = (uint64_t *)*a2;
    v21[0] = 7;
    int v22 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    uint64_t v11 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)uint64_t v11 = v21[0];
    v21[0] = v12;
    uint64_t v13 = *(uint64_t **)(v11 + 8);
    *(void *)(v11 + 8) = v22;
    int v22 = v13;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      uint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<double &>(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 7;
        *(void *)(v7 + 8) = v8;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      uint64_t v15 = (uint64_t *)*a2;
      v19[0] = 7;
      unint64_t v20 = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      uint64_t v16 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      unsigned __int8 v17 = *(unsigned char *)v16;
      *(unsigned char *)uint64_t v16 = v19[0];
      v19[0] = v17;
      uint64_t v18 = *(uint64_t **)(v16 + 8);
      *(void *)(v16 + 8) = v20;
      unint64_t v20 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<double &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  void v16[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::TransitionModel::Tuple>>(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 7;
  *(void *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1CE718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v10 = (uint64_t *)*a2;
    v21[0] = 4;
    int v22 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    uint64_t v11 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)uint64_t v11 = v21[0];
    v21[0] = v12;
    uint64_t v13 = *(uint64_t **)(v11 + 8);
    *(void *)(v11 + 8) = v22;
    int v22 = v13;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      uint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<BOOL &>(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 4;
        *(void *)(v7 + 8) = v8;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      uint64_t v15 = (uint64_t *)*a2;
      v19[0] = 4;
      unint64_t v20 = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      uint64_t v16 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      unsigned __int8 v17 = *(unsigned char *)v16;
      *(unsigned char *)uint64_t v16 = v19[0];
      v19[0] = v17;
      uint64_t v18 = *(uint64_t **)(v16 + 8);
      *(void *)(v16 + 8) = v20;
      unint64_t v20 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<BOOL &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  void v16[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::TransitionModel::Tuple>>(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 4;
  *(void *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1CE9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  if (a1[1] == v2)
  {
    v17[0] = 0;
    uint64_t v18 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
    uint64_t v8 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
    unsigned __int8 v9 = *(unsigned char *)v8;
    *(unsigned char *)uint64_t v8 = v17[0];
    v17[0] = v9;
    uint64_t v10 = *(uint64_t **)(v8 + 8);
    *(void *)(v8 + 8) = v18;
    uint64_t v18 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v18, v17[0]);
    return *a1;
  }
  else
  {
    uint64_t v3 = *(unsigned __int8 **)(v2 - 8);
    int v4 = *v3;
    if (v4 == 2)
    {
      unint64_t v5 = (uint64_t *)*((void *)v3 + 1);
      unint64_t v6 = v5[1];
      if (v6 >= v5[2])
      {
        uint64_t v7 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<decltype(nullptr)>(v5);
      }
      else
      {
        *(unsigned char *)unint64_t v6 = 0;
        *(void *)(v6 + 8) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        uint64_t v7 = v6 + 16;
      }
      v5[1] = v7;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v4 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      v15[0] = 0;
      uint64_t v16 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
      uint64_t v12 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
      unsigned __int8 v13 = *(unsigned char *)v12;
      *(unsigned char *)uint64_t v12 = v15[0];
      v15[0] = v13;
      uint64_t v14 = *(uint64_t **)(v12 + 8);
      *(void *)(v12 + 8) = v16;
      uint64_t v16 = v14;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v16, v15[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<decltype(nullptr)>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v6 = a1[2] - v2;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  v13[4] = a1 + 2;
  uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::TransitionModel::Tuple>>(v5, v7);
  uint64_t v9 = (uint64_t)&v8[16 * v3];
  v13[0] = v8;
  v13[1] = v9;
  v13[3] = &v8[16 * v10];
  *(unsigned char *)uint64_t v9 = 0;
  *(void *)(v9 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  v13[2] = v9 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v13);
  return v11;
}

void sub_1CEC24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v10 = (uint64_t *)*a2;
    v21[0] = 5;
    int v22 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    uint64_t v11 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)uint64_t v11 = v21[0];
    v21[0] = v12;
    unsigned __int8 v13 = *(uint64_t **)(v11 + 8);
    *(void *)(v11 + 8) = v22;
    int v22 = v13;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
    return *a1;
  }
  else
  {
    unint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      uint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<long long &>(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 5;
        *(void *)(v7 + 8) = v8;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      uint64_t v15 = (uint64_t *)*a2;
      v19[0] = 5;
      unint64_t v20 = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      uint64_t v16 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      unsigned __int8 v17 = *(unsigned char *)v16;
      *(unsigned char *)uint64_t v16 = v19[0];
      v19[0] = v17;
      uint64_t v18 = *(uint64_t **)(v16 + 8);
      *(void *)(v16 + 8) = v20;
      unint64_t v20 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  void v16[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::TransitionModel::Tuple>>(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 5;
  *(void *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1CEEC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v15, a2);
    uint64_t v7 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    unsigned __int8 v8 = *(unsigned char *)v7;
    *(unsigned char *)uint64_t v7 = v15[0];
    v15[0] = v8;
    unint64_t v9 = *(uint64_t **)(v7 + 8);
    *(void *)(v7 + 8) = v16;
    uint64_t v16 = v9;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v16, v15[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(uint64_t ***)(v3 - 8);
    int v5 = *(unsigned __int8 *)v4;
    if (v5 == 2)
    {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string&>(v4[1], a2);
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v13, a2);
      uint64_t v10 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      unsigned __int8 v11 = *(unsigned char *)v10;
      *(unsigned char *)uint64_t v10 = v13[0];
      v13[0] = v11;
      uint64_t v12 = *(uint64_t **)(v10 + 8);
      *(void *)(v10 + 8) = v14;
      uint64_t v14 = v12;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v13[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::TransitionModel::Tuple>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = v13;
    uint64_t v16 = &v13[16 * v9];
    uint64_t v18 = &v13[16 * v12];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v16, a2);
    unsigned __int8 v17 = v16 + 16;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_1CF110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (a1[1] == v3)
  {
    uint64_t v10 = (uint64_t *)*a2;
    v21[0] = 6;
    int v22 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    uint64_t v11 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    unsigned __int8 v12 = *(unsigned char *)v11;
    *(unsigned char *)uint64_t v11 = v21[0];
    v21[0] = v12;
    uint64_t v13 = *(uint64_t **)(v11 + 8);
    *(void *)(v11 + 8) = v22;
    int v22 = v13;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
    return *a1;
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 **)(v3 - 8);
    int v5 = *v4;
    if (v5 == 2)
    {
      unint64_t v6 = (uint64_t *)*((void *)v4 + 1);
      unint64_t v7 = v6[1];
      if (v7 >= v6[2])
      {
        uint64_t v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<unsigned long long &>(v6, a2);
      }
      else
      {
        *(void *)(v7 + 8) = 0;
        uint64_t v8 = *a2;
        *(unsigned char *)unint64_t v7 = 6;
        *(void *)(v7 + 8) = v8;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        uint64_t v9 = v7 + 16;
      }
      v6[1] = v9;
      return *(void *)(*(void *)(*(void *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v5 != 1) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      if (!a1[4]) {
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>();
      }
      uint64_t v15 = (uint64_t *)*a2;
      v19[0] = 6;
      unint64_t v20 = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      uint64_t v16 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      unsigned __int8 v17 = *(unsigned char *)v16;
      *(unsigned char *)uint64_t v16 = v19[0];
      v19[0] = v17;
      uint64_t v18 = *(uint64_t **)(v16 + 8);
      *(void *)(v16 + 8) = v20;
      unint64_t v20 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<unsigned long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  void v16[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::TransitionModel::Tuple>>(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(void *)(v11 + 8) = 0;
  uint64_t v13 = *a2;
  *(unsigned char *)uint64_t v11 = 6;
  *(void *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1CF3BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlohmann::detail::input_stream_adapter::~input_stream_adapter(nlohmann::detail::input_stream_adapter *this)
{
  if (*(void *)this) {
    std::ios_base::clear((std::ios_base *)(*(void *)this + *(void *)(**(void **)this - 24)), *(_DWORD *)(*(void *)this + *(void *)(**(void **)this - 24) + 32) & 2);
  }
}

void *std::allocate_shared[abi:ne180100]<ParallelAMDecoupledInferenceModel,std::allocator<ParallelAMDecoupledInferenceModel>,std::string const&,std::string const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0xD8uLL);
  uint64_t result = std::__shared_ptr_emplace<ParallelAMDecoupledInferenceModel>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::allocator<ParallelAMDecoupledInferenceModel>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1CF474(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ParallelAMDecoupledInferenceModel>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::allocator<ParallelAMDecoupledInferenceModel>,0>(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26F6C0;
  ParallelAMDecoupledInferenceModel::ParallelAMDecoupledInferenceModel((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1CF4D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ParallelAMDecoupledInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26F6C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ParallelAMDecoupledInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26F6C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<ParallelAMDecoupledInferenceModel>::__on_zero_shared(uint64_t a1)
{
}

void ParallelAMDecoupledInferenceModel::~ParallelAMDecoupledInferenceModel(ParallelAMDecoupledInferenceModel *this)
{
  *(void *)this = off_26F580;
  uint64_t v2 = (void **)((char *)this + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  *(void *)this = &off_26F560;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)this + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 2, *((unsigned __int8 *)this + 8));
}

void *std::allocate_shared[abi:ne180100]<WaveRNNDecoupledInferenceModel,std::allocator<WaveRNNDecoupledInferenceModel>,std::string const&,std::string const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0x128uLL);
  uint64_t result = std::__shared_ptr_emplace<WaveRNNDecoupledInferenceModel>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::allocator<WaveRNNDecoupledInferenceModel>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1CF698(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<WaveRNNDecoupledInferenceModel>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::allocator<WaveRNNDecoupledInferenceModel>,0>(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26F710;
  WaveRNNDecoupledInferenceModel::WaveRNNDecoupledInferenceModel((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1CF6F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<WaveRNNDecoupledInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26F710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WaveRNNDecoupledInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26F710;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<WaveRNNDecoupledInferenceModel>::__on_zero_shared(uint64_t a1)
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<std::string>,0>(char *a1, std::vector<std::string> *a2)
{
  if (*a1 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v4 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v7, v4);
    int8x8_t v5 = std::string::insert(&v7, 0, "type must be array, but is ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v9 = v5->__r_.__value_.__r.__words[2];
    long long v8 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v8, exception);
  }

  nlohmann::detail::from_json_array_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<std::string>>((unsigned __int8 *)a1, a2);
}

void sub_1CF964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void nlohmann::detail::from_json_array_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<std::string>>(unsigned __int8 *a1, std::vector<std::string> *a2)
{
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::size_type v4 = *a1;
  if (*a1)
  {
    if (v4 == 1)
    {
      std::vector<std::string>::size_type v4 = *(void *)(*((void *)a1 + 1) + 16);
    }
    else if (v4 == 2)
    {
      std::vector<std::string>::size_type v4 = (uint64_t)(*(void *)(*((void *)a1 + 1) + 8) - **((void **)a1 + 1)) >> 4;
    }
    else
    {
      std::vector<std::string>::size_type v4 = 1;
    }
  }
  std::vector<std::string>::reserve(&v7, v4);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v6, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_begin(v6);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v5, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(v5);
  _ZNSt3__19transformB8ne180100IN8nlohmann6detail9iter_implIKNS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerENS6_IhNSA_IhEEEEEEEENS_15insert_iteratorINS6_ISC_NSA_ISC_EEEEEEZNS2_20from_json_array_implISG_SL_EEDTcmcmcldtfp0_7reserveclsr3stdE7declvalINT0_9size_typeEEEEcldtfp_3getINSO_10value_typeEEEcvv_EERKT_RSO_NS2_12priority_tagILj1EEEEUlRSH_E_EESO_SS_SS_SO_T1_(v6, v5, &v7, v7.__end_);
  std::vector<std::string>::__vdeallocate(a2);
  *a2 = v7;
  memset(&v7, 0, sizeof(v7));
  long long v8 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
}

void sub_1CFAB4(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Vector<float>>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_1CFB6C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

std::vector<std::string> *_ZNSt3__19transformB8ne180100IN8nlohmann6detail9iter_implIKNS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerENS6_IhNSA_IhEEEEEEEENS_15insert_iteratorINS6_ISC_NSA_ISC_EEEEEEZNS2_20from_json_array_implISG_SL_EEDTcmcmcldtfp0_7reserveclsr3stdE7declvalINT0_9size_typeEEEEcldtfp_3getINSO_10value_typeEEEcvv_EERKT_RSO_NS2_12priority_tagILj1EEEEUlRSH_E_EESO_SS_SS_SO_T1_(unsigned __int8 **a1, unsigned __int8 **a2, std::vector<std::string> *a3, const std::string *a4)
{
  uint64_t v6 = a2;
  std::vector<std::string> v7 = a1;
  while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(a1, a2))
  {
    long long v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v7);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v8, &__x);
    v9.__i_ = a4;
    v10.__i_ = std::vector<std::string>::insert(a3, v9, &__x).__i_;
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__x.__r_.__value_.__l.__data_);
    }
    a4 = v10.__i_ + 1;
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(v7);
    a1 = v7;
    a2 = v6;
  }
  return a3;
}

void sub_1CFC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<std::string>::iterator std::vector<std::string>::insert(std::vector<std::string> *this, std::vector<std::string>::const_iterator __position, std::vector<std::string>::value_type *__x)
{
  uint64_t i = (std::string *)__position.__i_;
  std::vector<std::string>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&this->__end_cap_;
  long long v8 = value;
  if (end >= value)
  {
    std::vector<std::string>::pointer begin = this->__begin_;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)__position.__i_ - (char *)begin) >> 3);
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)begin) >> 3);
    unint64_t v15 = 2 * v14;
    if (2 * v14 <= v12) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v15;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v16) {
      unsigned __int8 v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Vector<float>>>((uint64_t)p_end_cap, v16);
    }
    else {
      unsigned __int8 v17 = 0;
    }
    __v.__first_ = v17;
    __v.__begin_ = v17 + v13;
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v17[v16];
    std::__split_buffer<std::string>::push_back(&__v, __x);
    uint64_t i = std::vector<std::string>::__swap_out_circular_buffer(this, &__v, i);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else if (__position.__i_ == end)
  {
    long long v18 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    __position.__i_->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__position.__i_->__r_.__value_.__l.__data_ = v18;
    __x->__r_.__value_.__l.__size_ = 0;
    __x->__r_.__value_.__r.__words[2] = 0;
    __x->__r_.__value_.__r.__words[0] = 0;
    this->__end_ = (std::vector<std::string>::pointer)&__position.__i_[1];
  }
  else
  {
    std::vector<std::string>::__move_range(this, (std::vector<std::string>::pointer)__position.__i_, end, (std::vector<std::string>::pointer)&__position.__i_[1]);
    if (SHIBYTE(i->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(i->__r_.__value_.__l.__data_);
    }
    long long v10 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    i->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
    *(_OWORD *)&i->__r_.__value_.__l.__data_ = v10;
    *((unsigned char *)&__x->__r_.__value_.__s + 23) = 0;
    __x->__r_.__value_.__s.__data_[0] = 0;
  }
  return (std::vector<std::string>::iterator)i;
}

void sub_1CFDA8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__split_buffer<std::string>::push_back(std::__split_buffer<std::string> *this, std::__split_buffer<std::string>::value_type *__x)
{
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end == this->__end_cap_.__value_)
  {
    std::vector<std::string>::pointer begin = (long long *)this->__begin_;
    if ((std::__split_buffer<std::string>::pointer)begin <= this->__first_)
    {
      if (end == this->__first_) {
        unint64_t v10 = 1;
      }
      else {
        unint64_t v10 = 0x5555555555555556 * (((char *)end - (char *)this->__first_) >> 3);
      }
      unint64_t v11 = v10 >> 2;
      value = this->__end_cap_.__value_;
      v26.__end_cap_.__value_ = this->__end_cap_.__value_;
      unint64_t v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Vector<float>>>((uint64_t)value, v10);
      unint64_t v15 = &v13[v11];
      std::__split_buffer<std::string>::pointer v16 = this->__begin_;
      int64_t v17 = (char *)this->__end_ - (char *)v16;
      if (v17)
      {
        uint64_t v18 = v17 / 24;
        uint64_t v19 = &v15[v18];
        uint64_t v20 = 24 * v18;
        unsigned __int8 v21 = &v13[v11];
        do
        {
          long long v22 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
          v21->__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
          ++v21;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          ++v16;
          v20 -= 24;
        }
        while (v20);
        int64x2_t v23 = *(int64x2_t *)&this->__begin_;
      }
      else
      {
        int64x2_t v23 = vdupq_n_s64((unint64_t)v16);
        uint64_t v19 = &v13[v11];
      }
      v26.__first_ = this->__first_;
      this->__first_ = v13;
      this->__begin_ = v15;
      *(int64x2_t *)&v26.__begin_ = v23;
      long long v24 = this->__end_cap_.__value_;
      this->__end_ = v19;
      this->__end_cap_.__value_ = &v13[v14];
      v26.__end_cap_.__value_ = v24;
      std::__split_buffer<std::string>::~__split_buffer(&v26);
      std::__split_buffer<std::string>::pointer end = this->__end_;
    }
    else
    {
      int64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)begin - (char *)this->__first_) >> 3);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = -3 * (v7 >> 1);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v26, begin, (long long *)end, (uint64_t)begin - 24 * (v7 >> 1));
      std::__split_buffer<std::string>::pointer end = v9;
      this->__begin_ = (std::__split_buffer<std::string>::pointer)((char *)this->__begin_ + 8 * v8);
      this->__end_ = v9;
    }
  }
  long long v25 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
  end->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v25;
  __x->__r_.__value_.__l.__size_ = 0;
  __x->__r_.__value_.__r.__words[2] = 0;
  __x->__r_.__value_.__r.__words[0] = 0;
  ++this->__end_;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  int64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)int64_t v5 = 0;
      int64_t v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::map<std::string,std::string>,0>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    uint64_t v8 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v11, v8);
    std::vector<std::string>::const_iterator v9 = std::string::insert(&v11, 0, "type must be object, but is ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
    long long v12 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v12, exception);
  }
  *((void *)&v12 + 1) = 0;
  std::string::size_type v13 = 0;
  *(void *)&long long v12 = (char *)&v12 + 8;
  std::transform[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>,std::insert_iterator<std::map<std::string,std::string>>,void nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::map<std::string,std::string>,0>(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::map<std::string,std::string> &)::{lambda(std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&)#1}>(**(void ***)(a1 + 8), (void *)(*(void *)(a1 + 8) + 8), (uint64_t)&v12, (uint64_t)&v12 + 8);
  uint64_t v4 = a2 + 8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a2, *(void **)(a2 + 8));
  int64_t v5 = (void *)*((void *)&v12 + 1);
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v5;
  std::string::size_type v6 = v13;
  *(void *)(a2 + 16) = v13;
  if (v6)
  {
    v5[2] = v4;
    *(void *)&long long v12 = (char *)&v12 + 8;
    *((void *)&v12 + 1) = 0;
    std::string::size_type v13 = 0;
    int64_t v5 = 0;
  }
  else
  {
    *(void *)a2 = v4;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v12, v5);
}

void sub_1D00DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t std::transform[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>,std::insert_iterator<std::map<std::string,std::string>>,void nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::map<std::string,std::string>,0>(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::map<std::string,std::string> &)::{lambda(std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&)#1}>(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  if (a1 != a2)
  {
    int64_t v5 = a1;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)(v5 + 7), &v13);
      if (*((char *)v5 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v10, (const std::string::value_type *)v5[4], v5[5]);
      }
      else {
        std::string v10 = *(std::string *)(v5 + 4);
      }
      std::string __p = v13;
      std::insert_iterator<std::map<std::string,std::string>>::operator=[abi:ne180100]((uint64_t)v12, (const void **)&v10.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
      std::string::size_type v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          long long v7 = v6;
          std::string::size_type v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          int64_t v5 = v7;
        }
        while (!v8);
      }
      int64_t v5 = v7;
    }
    while (v7 != a2);
    return v12[0];
  }
  return a3;
}

void sub_1D0250(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 33) < 0) {
    operator delete(*(void **)(v1 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::insert_iterator<std::map<std::string,std::string>>::operator=[abi:ne180100](uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string>>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (uint64_t)a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      int64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      int64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string>>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  BOOL v6 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

__n128 std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  BOOL v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  long long v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *((void *)v6 + 9) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1D040C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *std::__function::__value_func<espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  BOOL v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  int64x2_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *int64x2_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1D07FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,espresso_buffer_t>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

double std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  BOOL v8 = (char *)operator new(0xD0uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)BOOL v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((void *)v8 + 25) = 0;
  double result = 0.0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1D08DC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,espresso_buffer_t>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,espresso_buffer_t>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__function::__func<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_0,std::allocator<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_0>,espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::~__func()
{
}

void *std::__function::__func<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_0,std::allocator<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_0>,espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_26F760;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_0,std::allocator<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_0>,espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_26F760;
  a2[1] = v2;
  return result;
}

unsigned __int8 *std::__function::__func<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_0,std::allocator<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_0>,espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::operator()(uint64_t a1, long long **a2, const void **a3, long long *a4)
{
  BOOL v6 = *a2;
  uint64_t v7 = *(InferenceModel **)(a1 + 8);
  InferenceModel::get_model_weight_precision(v7, &v10);
  if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) != 4 || LODWORD(v10.__r_.__value_.__l.__data_) != 909209702) {
      return WaveRNNDecoupledInferenceModel::var_transform_function<float>((uint64_t)v7, v6, a3, a4);
    }
    return _ZN30WaveRNNDecoupledInferenceModel22var_transform_functionIDF16_EEPK17espresso_buffer_tS3_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_((uint64_t)v7, v6, a3, a4);
  }
  if (v10.__r_.__value_.__l.__size_ == 4)
  {
    int v8 = *(_DWORD *)v10.__r_.__value_.__l.__data_;
    operator delete(v10.__r_.__value_.__l.__data_);
    if (v8 == 909209702) {
      return _ZN30WaveRNNDecoupledInferenceModel22var_transform_functionIDF16_EEPK17espresso_buffer_tS3_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_((uint64_t)v7, v6, a3, a4);
    }
  }
  else
  {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return WaveRNNDecoupledInferenceModel::var_transform_function<float>((uint64_t)v7, v6, a3, a4);
}

uint64_t std::__function::__func<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_0,std::allocator<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_0>,espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **std::__function::__func<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_0,std::allocator<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_0>,espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::target_type()
{
}

void std::__function::__func<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_1,std::allocator<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_1>,espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::~__func()
{
}

void *std::__function::__func<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_1,std::allocator<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_1>,espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_26F7F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_1,std::allocator<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_1>,espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_26F7F0;
  a2[1] = v2;
  return result;
}

unsigned __int8 *std::__function::__func<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_1,std::allocator<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_1>,espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::operator()(uint64_t a1, long long **a2, const void **a3, long long *a4)
{
  BOOL v6 = *a2;
  uint64_t v7 = *(InferenceModel **)(a1 + 8);
  InferenceModel::get_model_weight_precision(v7, &v10);
  if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) != 4 || LODWORD(v10.__r_.__value_.__l.__data_) != 909209702) {
      return WaveRNNDecoupledInferenceModel::var_transform_function<float>((uint64_t)v7, v6, a3, a4);
    }
    return _ZN30WaveRNNDecoupledInferenceModel22var_transform_functionIDF16_EEPK17espresso_buffer_tS3_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_((uint64_t)v7, v6, a3, a4);
  }
  if (v10.__r_.__value_.__l.__size_ == 4)
  {
    int v8 = *(_DWORD *)v10.__r_.__value_.__l.__data_;
    operator delete(v10.__r_.__value_.__l.__data_);
    if (v8 == 909209702) {
      return _ZN30WaveRNNDecoupledInferenceModel22var_transform_functionIDF16_EEPK17espresso_buffer_tS3_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_((uint64_t)v7, v6, a3, a4);
    }
  }
  else
  {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return WaveRNNDecoupledInferenceModel::var_transform_function<float>((uint64_t)v7, v6, a3, a4);
}

uint64_t std::__function::__func<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_1,std::allocator<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_1>,espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **std::__function::__func<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_1,std::allocator<WaveRNNDecoupledInferenceModel::copy_training_net_to_inference_net(std::unordered_map<std::string,espresso_buffer_t> const&)::$_1>,espresso_buffer_t const* ()(espresso_buffer_t const*,std::string const&,std::string const&)>::target_type()
{
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal()
{
  __assert_rtn("scan_literal", "lexer.hpp", 1222, "char_traits<char_type>::to_char_type(current) == literal_text[0]");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string()
{
  __assert_rtn("scan_string", "lexer.hpp", 370, "0x00 <= codepoint and codepoint <= 0x10FFFF");
}

{
  __assert_rtn("scan_string", "lexer.hpp", 250, "current == '\\\"'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number()
{
}

{
  __assert_rtn("scan_number", "lexer.hpp", 1208, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "lexer.hpp", 1175, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "lexer.hpp", 1191, "endptr == token_buffer.data() + token_buffer.size()");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget()
{
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint()
{
  __assert_rtn("get_codepoint", "lexer.hpp", 188, "0x0000 <= codepoint and codepoint <= 0xFFFF");
}

{
  __assert_rtn("get_codepoint", "lexer.hpp", 162, "current == 'u'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range()
{
  __assert_rtn("next_byte_in_range", "lexer.hpp", 209, "ranges.size() == 2 or ranges.size() == 4 or ranges.size() == 6");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error()
{
}

void nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error()
{
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object()
{
}

{
  __assert_rtn("end_object", "json_sax.hpp", 451, "not keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array()
{
}

{
  __assert_rtn("end_array", "json_sax.hpp", 503, "not keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>()
{
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->()
{
  __assert_rtn("operator->", "iter_impl.hpp", 279, "m_object != nullptr");
}

{
  __assert_rtn("operator->", "iter_impl.hpp", 285, "m_it.object_iterator != m_object->m_value.object->end()");
}

{
  __assert_rtn("operator->", "iter_impl.hpp", 291, "m_it.array_iterator != m_object->m_value.array->end()");
}

void nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>()
{
}

{
  __assert_rtn("handle_value", "json_sax.hpp", 321, "object_element");
}

uint64_t TrainingEngine::TrainingEngine(uint64_t a1, uint64_t a2, int a3, std::string *__str, const std::string *a5)
{
  uint64_t v7 = a1;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 136) = 0;
  uint64_t v8 = a1 + 136;
  *(void *)(a1 + 160) = 0x3F7AE1483F666666;
  v119 = (float *)(a1 + 160);
  *(_DWORD *)(a1 + 168) = 814313567;
  v118 = (float *)(a1 + 168);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  v120 = (std::string *)(a1 + 248);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  uint64_t v123 = a1 + 376;
  uint64_t v124 = a1 + 336;
  *(_DWORD *)(a1 + 408) = 1065353216;
  uint64_t v122 = a1 + 416;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 448) = 1065353216;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_DWORD *)(a1 + 488) = 1065353216;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 684) = 0u;
  *(void *)(a1 + 700) = 0x1F4000003E8;
  *(unsigned char *)(a1 + 708) = 0;
  *(void *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(unsigned char *)a1 = 0;
  std::string::operator=((std::string *)(a1 + 176), __str);
  std::string::operator=((std::string *)(v7 + 200), (const std::string *)a2);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v159 = *(std::string *)a2;
  }
  uint64_t v125 = v7;
  v121 = (void *)(v7 + 712);
  std::string::basic_string[abi:ne180100]<0>(__p, "training_config.json");
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v158, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  }
  else {
    std::string v158 = v159;
  }
  boost::filesystem::path::append_v3(&v158, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::string::operator=((std::string *)(v7 + 712), a5);
  std::ifstream::basic_ifstream((void (__cdecl ***)(std::ifstream *__hidden))__p);
  v163[3] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(__p, (uint64_t)v163, 1, (uint64_t)v156);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v163);
  std::string::basic_string[abi:ne180100]<0>(__stra, "model_file");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("", v156, (const void **)__stra, &__s);
  if ((__stra[23] & 0x80000000) != 0) {
    operator delete(*(void **)__stra);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)__stra, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)__stra = __s;
  }
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v154, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  }
  else {
    std::string v154 = v159;
  }
  boost::filesystem::path::append_v3(&v154, (std::string *)__stra);
  if ((__stra[23] & 0x80000000) != 0) {
    operator delete(*(void **)__stra);
  }
  uint64_t v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v156, "saved_inference_model_dir");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v9, &v153);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v152, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
  }
  else {
    std::string v152 = v153;
  }
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)__stra, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)__stra = v159;
  }
  boost::filesystem::path::append_v3((std::string *)__stra, &v152);
  std::string::operator=((std::string *)(v7 + 224), (const std::string *)__stra);
  if ((__stra[23] & 0x80000000) != 0) {
    operator delete(*(void **)__stra);
  }
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v156, "saved_train_model_dir");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v10, &v152);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v151, v152.__r_.__value_.__l.__data_, v152.__r_.__value_.__l.__size_);
  }
  else {
    std::string v151 = v152;
  }
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)__stra, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)__stra = v159;
  }
  boost::filesystem::path::append_v3((std::string *)__stra, &v151);
  std::string::operator=(v120, (const std::string *)__stra);
  if ((__stra[23] & 0x80000000) != 0) {
    operator delete(*(void **)__stra);
  }
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v151.__r_.__value_.__l.__data_);
  }
  long long v11 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v156, "model_parameter_names");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>(v11, (std::vector<std::string> *)__stra);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v7 + 272));
  *(_OWORD *)(v7 + 272) = *(_OWORD *)__stra;
  *(void *)(v7 + 288) = *(void *)&__stra[16];
  memset(__stra, 0, 24);
  v151.__r_.__value_.__r.__words[0] = (std::string::size_type)__stra;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v151);
  uint64_t v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v156, "model_parameter_to_grad_names");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::unordered_map<std::string,std::string>,std::unordered_map<std::string,std::string>,0>(v12, (uint64_t)__stra);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(v7 + 296, (uint64_t *)__stra);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__stra);
  std::string::basic_string[abi:ne180100]<0>(&v151, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("fastspeech2", v156, (const void **)&v151.__r_.__value_.__l.__data_, (std::string *)__stra);
  if (*(char *)(v7 + 159) < 0) {
    operator delete(*(void **)v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)__stra;
  *(void *)(v8 + 16) = *(void *)&__stra[16];
  __stra[23] = 0;
  __stra[0] = 0;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v151.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__stra, "learning_rate");
  v151.__r_.__value_.__r.__words[0] = 0x3FB999999999999ALL;
  float v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>(v156, (const void **)__stra, (uint64_t)&v151);
  *(float *)(v7 + 80) = v13;
  if ((__stra[23] & 0x80000000) != 0) {
    operator delete(*(void **)__stra);
  }
  std::string::basic_string[abi:ne180100]<0>(__stra, "learning_rate_decay");
  v151.__r_.__value_.__r.__words[0] = 0x3FE0000000000000;
  float v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>(v156, (const void **)__stra, (uint64_t)&v151);
  *(float *)(v7 + 84) = v14;
  if ((__stra[23] & 0x80000000) != 0) {
    operator delete(*(void **)__stra);
  }
  std::string::basic_string[abi:ne180100]<0>(__stra, "learning_rate_decay_steps");
  LODWORD(v151.__r_.__value_.__l.__data_) = 10000;
  *(_DWORD *)(v7 + 88) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v156, (const void **)__stra, (unsigned int *)&v151);
  if ((__stra[23] & 0x80000000) != 0) {
    operator delete(*(void **)__stra);
  }
  std::string::basic_string[abi:ne180100]<0>(__stra, "num_iter");
  LODWORD(v151.__r_.__value_.__l.__data_) = 100;
  *(void *)(v7 + 96) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v156, (const void **)__stra, (unsigned int *)&v151);
  if ((__stra[23] & 0x80000000) != 0) {
    operator delete(*(void **)__stra);
  }
  std::string::basic_string[abi:ne180100]<0>(__stra, "batch_size");
  LODWORD(v151.__r_.__value_.__l.__data_) = 1;
  *(_DWORD *)(v7 + 124) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v156, (const void **)__stra, (unsigned int *)&v151);
  if ((__stra[23] & 0x80000000) != 0) {
    operator delete(*(void **)__stra);
  }
  std::string::basic_string[abi:ne180100]<0>(__stra, "checkpoint_steps");
  LODWORD(v151.__r_.__value_.__l.__data_) = 100;
  *(void *)(v7 + 104) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v156, (const void **)__stra, (unsigned int *)&v151);
  if ((__stra[23] & 0x80000000) != 0) {
    operator delete(*(void **)__stra);
  }
  std::string::basic_string[abi:ne180100]<0>(__stra, "additional_early_stopping_epoch");
  LODWORD(v151.__r_.__value_.__l.__data_) = 10;
  *(void *)(v7 + 112) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v156, (const void **)__stra, (unsigned int *)&v151);
  if ((__stra[23] & 0x80000000) != 0) {
    operator delete(*(void **)__stra);
  }
  std::string::basic_string[abi:ne180100]<0>(__stra, "disable_min_ma_loss_checkpoint");
  v151.__r_.__value_.__s.__data_[0] = 0;
  *(unsigned char *)(v7 + 120) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v156, (const void **)__stra, (unsigned __int8 *)&v151);
  if ((__stra[23] & 0x80000000) != 0) {
    operator delete(*(void **)__stra);
  }
  std::string::basic_string[abi:ne180100]<0>(__stra, "num_of_grad_accum");
  LODWORD(v151.__r_.__value_.__l.__data_) = 1;
  *(_DWORD *)(v7 + 128) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v156, (const void **)__stra, (unsigned int *)&v151);
  if ((__stra[23] & 0x80000000) != 0) {
    operator delete(*(void **)__stra);
  }
  std::string::basic_string[abi:ne180100]<0>(__stra, "min_step_loss_check");
  *(_DWORD *)(v7 + 704) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v156, (const void **)__stra, (unsigned int *)(v7 + 704));
  if ((__stra[23] & 0x80000000) != 0) {
    operator delete(*(void **)__stra);
  }
  std::string::basic_string[abi:ne180100]<0>(__stra, "disable_inference_model_saving");
  *(unsigned char *)(v7 + 708) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v156, (const void **)__stra, (unsigned __int8 *)(v7 + 708));
  if ((__stra[23] & 0x80000000) != 0) {
    operator delete(*(void **)__stra);
  }
  *(void *)(v7 + 8) = espresso_create_context();
  *(void *)(v7 + 32) = espresso_create_plan();
  if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v154.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v154.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v151, size + 5);
  if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v16 = &v151;
  }
  else {
    unint64_t v16 = (std::string *)v151.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v17 = &v154;
    }
    else {
      float v17 = (std::string *)v154.__r_.__value_.__r.__words[0];
    }
    memmove(v16, v17, size);
  }
  strcpy((char *)v16 + size, ":init");
  int v18 = espresso_plan_add_network();
  std::string::basic_string[abi:ne180100]<0>(v149, "");
  if (v18)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v89 = v150;
    v90 = (void **)v149[0];
    status_string = (const char *)espresso_get_status_string();
    v92 = v149;
    if (v89 < 0) {
      v92 = v90;
    }
    StringFormatter::StringFormatter((StringFormatter *)__stra, "%s Error: %d, %s", (const char *)v92, v18, status_string);
    std::logic_error::logic_error(exception, (const std::string *)__stra);
  }
  if (v150 < 0) {
    operator delete(v149[0]);
  }
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v151.__r_.__value_.__l.__data_);
  }
  int v19 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v147, "");
  if (v19)
  {
    v93 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v94 = v148;
    v95 = (void **)v147[0];
    v96 = (const char *)espresso_get_status_string();
    v97 = v147;
    if (v94 < 0) {
      v97 = v95;
    }
    StringFormatter::StringFormatter((StringFormatter *)__stra, "%s Error: %d, %s", (const char *)v97, v19, v96);
    std::logic_error::logic_error(v93, (const std::string *)__stra);
  }
  if (v148 < 0) {
    operator delete(v147[0]);
  }
  int v20 = espresso_plan_execute_sync();
  std::string::basic_string[abi:ne180100]<0>(v145, "");
  if (v20)
  {
    v98 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v99 = v146;
    v100 = (void **)v145[0];
    v101 = (const char *)espresso_get_status_string();
    v102 = v145;
    if (v99 < 0) {
      v102 = v100;
    }
    StringFormatter::StringFormatter((StringFormatter *)__stra, "%s Error: %d, %s", (const char *)v102, v20, v101);
    std::logic_error::logic_error(v98, (const std::string *)__stra);
  }
  if (v146 < 0) {
    operator delete(v145[0]);
  }
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    uint64_t v22 = v7 + 712;
    if (*(char *)(v7 + 735) < 0) {
      uint64_t v22 = *v121;
    }
    *(_DWORD *)__stra = 136315138;
    *(void *)&__stra[4] = v22;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "TaskId: %s, Init net: Binding training vars.", __stra, 0xCu);
  }
  uint64_t v24 = *(void *)(v7 + 272);
  for (uint64_t i = *(void *)(v7 + 280); v24 != i; v24 += 24)
  {
    *(void *)__stra = v24;
    long long v25 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v124, (unsigned __int8 *)v24, (uint64_t)&std::piecewise_construct, (long long **)__stra);
    *((void *)v25 + 25) = 0;
    *(_OWORD *)(v25 + 184) = 0u;
    *(_OWORD *)(v25 + 168) = 0u;
    *(_OWORD *)(v25 + 152) = 0u;
    *(_OWORD *)(v25 + 136) = 0u;
    *(_OWORD *)(v25 + 120) = 0u;
    *(_OWORD *)(v25 + 104) = 0u;
    *(_OWORD *)(v25 + 88) = 0u;
    *(_OWORD *)(v25 + 72) = 0u;
    *(_OWORD *)(v25 + 56) = 0u;
    *(_OWORD *)(v25 + 40) = 0u;
    *(void *)__stra = v24;
    std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v124, (unsigned __int8 *)v24, (uint64_t)&std::piecewise_construct, (long long **)__stra);
    int v26 = espresso_network_bind_buffer();
    std::string::basic_string[abi:ne180100]<0>(v143, "");
    if (v26)
    {
      uint64_t v81 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      int v82 = v144;
      unint64_t v83 = (void **)v143[0];
      float v84 = (const char *)espresso_get_status_string();
      v85 = v143;
      if (v82 < 0) {
        v85 = v83;
      }
      StringFormatter::StringFormatter((StringFormatter *)__stra, "%s Error: %d, %s", (const char *)v85, v26, v84);
      std::logic_error::logic_error(v81, (const std::string *)__stra);
    }
    if (v144 < 0) {
      operator delete(v143[0]);
    }
    if (*(char *)(v24 + 23) >= 0) {
      size_t v27 = *(unsigned __int8 *)(v24 + 23);
    }
    else {
      size_t v27 = *(void *)(v24 + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v151, v27 + 5);
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v28 = &v151;
    }
    else {
      long long v28 = (std::string *)v151.__r_.__value_.__r.__words[0];
    }
    if (v27)
    {
      if (*(char *)(v24 + 23) >= 0) {
        std::string::size_type v29 = (const void *)v24;
      }
      else {
        std::string::size_type v29 = *(const void **)v24;
      }
      memmove(v28, v29, v27);
    }
    strcpy((char *)v28 + v27, "_mean");
    *(void *)__stra = v24;
    char v30 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v123, (unsigned __int8 *)v24, (uint64_t)&std::piecewise_construct, (long long **)__stra);
    *((void *)v30 + 25) = 0;
    *(_OWORD *)(v30 + 184) = 0u;
    *(_OWORD *)(v30 + 168) = 0u;
    *(_OWORD *)(v30 + 152) = 0u;
    *(_OWORD *)(v30 + 136) = 0u;
    *(_OWORD *)(v30 + 120) = 0u;
    *(_OWORD *)(v30 + 104) = 0u;
    *(_OWORD *)(v30 + 88) = 0u;
    *(_OWORD *)(v30 + 72) = 0u;
    *(_OWORD *)(v30 + 56) = 0u;
    *(_OWORD *)(v30 + 40) = 0u;
    *(void *)__stra = v24;
    std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v123, (unsigned __int8 *)v24, (uint64_t)&std::piecewise_construct, (long long **)__stra);
    int v31 = espresso_network_bind_buffer();
    std::string::basic_string[abi:ne180100]<0>(v141, "");
    if (v31)
    {
      uint64_t v76 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      int v77 = v142;
      uint64_t v78 = (void **)v141[0];
      uint64_t v79 = (const char *)espresso_get_status_string();
      uint64_t v80 = v141;
      if (v77 < 0) {
        uint64_t v80 = v78;
      }
      StringFormatter::StringFormatter((StringFormatter *)__stra, "%s Error: %d, %s", (const char *)v80, v31, v79);
      std::logic_error::logic_error(v76, (const std::string *)__stra);
    }
    if (v142 < 0) {
      operator delete(v141[0]);
    }
    if (*(char *)(v24 + 23) >= 0) {
      size_t v32 = *(unsigned __int8 *)(v24 + 23);
    }
    else {
      size_t v32 = *(void *)(v24 + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v140, v32 + 9);
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v33 = &v140;
    }
    else {
      long long v33 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v32)
    {
      if (*(char *)(v24 + 23) >= 0) {
        std::string v34 = (const void *)v24;
      }
      else {
        std::string v34 = *(const void **)v24;
      }
      memmove(v33, v34, v32);
    }
    strcpy((char *)v33 + v32, "_variance");
    *(void *)__stra = v24;
    long long v35 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v122, (unsigned __int8 *)v24, (uint64_t)&std::piecewise_construct, (long long **)__stra);
    *((void *)v35 + 25) = 0;
    *(_OWORD *)(v35 + 184) = 0u;
    *(_OWORD *)(v35 + 168) = 0u;
    *(_OWORD *)(v35 + 152) = 0u;
    *(_OWORD *)(v35 + 136) = 0u;
    *(_OWORD *)(v35 + 120) = 0u;
    *(_OWORD *)(v35 + 104) = 0u;
    *(_OWORD *)(v35 + 88) = 0u;
    *(_OWORD *)(v35 + 72) = 0u;
    *(_OWORD *)(v35 + 56) = 0u;
    *(_OWORD *)(v35 + 40) = 0u;
    *(void *)__stra = v24;
    std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v122, (unsigned __int8 *)v24, (uint64_t)&std::piecewise_construct, (long long **)__stra);
    int v36 = espresso_network_bind_buffer();
    std::string::basic_string[abi:ne180100]<0>(v138, "");
    if (v36)
    {
      v71 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      int v72 = v139;
      v73 = (void **)v138[0];
      uint64_t v74 = (const char *)espresso_get_status_string();
      char v75 = v138;
      if (v72 < 0) {
        char v75 = v73;
      }
      StringFormatter::StringFormatter((StringFormatter *)__stra, "%s Error: %d, %s", (const char *)v75, v36, v74);
      std::logic_error::logic_error(v71, (const std::string *)__stra);
    }
    uint64_t v7 = v125;
    if (v139 < 0) {
      operator delete(v138[0]);
    }
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v140.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
  }
  int v37 = espresso_plan_build_clean();
  std::string::basic_string[abi:ne180100]<0>(v136, "");
  if (v37)
  {
    v103 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v104 = v137;
    v105 = (void **)v136[0];
    v106 = (const char *)espresso_get_status_string();
    v107 = v136;
    if (v104 < 0) {
      v107 = v105;
    }
    StringFormatter::StringFormatter((StringFormatter *)__stra, "%s Error: %d, %s", (const char *)v107, v37, v106);
    std::logic_error::logic_error(v103, (const std::string *)__stra);
  }
  if (v137 < 0) {
    operator delete(v136[0]);
  }
  int v38 = espresso_plan_destroy();
  std::string::basic_string[abi:ne180100]<0>(v134, "");
  if (v38)
  {
    v108 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v109 = v135;
    v110 = (void **)v134[0];
    v111 = (const char *)espresso_get_status_string();
    v112 = v134;
    if (v109 < 0) {
      v112 = v110;
    }
    StringFormatter::StringFormatter((StringFormatter *)__stra, "%s Error: %d, %s", (const char *)v112, v38, v111);
    std::logic_error::logic_error(v108, (const std::string *)__stra);
  }
  if (v135 < 0) {
    operator delete(v134[0]);
  }
  *(void *)(v7 + 56) = espresso_create_plan();
  if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v39 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v39 = v154.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v151, v39 + 5);
  if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v40 = &v151;
  }
  else {
    std::string v40 = (std::string *)v151.__r_.__value_.__r.__words[0];
  }
  if (v39)
  {
    if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v41 = &v154;
    }
    else {
      uint64_t v41 = (std::string *)v154.__r_.__value_.__r.__words[0];
    }
    memmove(v40, v41, v39);
  }
  strcpy((char *)v40 + v39, ":grad");
  uint64_t v42 = v125;
  int v43 = espresso_plan_add_network();
  std::string::basic_string[abi:ne180100]<0>(v132, "");
  if (v43)
  {
    v113 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v114 = v133;
    v115 = (void **)v132[0];
    v116 = (const char *)espresso_get_status_string();
    v117 = v132;
    if (v114 < 0) {
      v117 = v115;
    }
    StringFormatter::StringFormatter((StringFormatter *)__stra, "%s Error: %d, %s", (const char *)v117, v43, v116);
    std::logic_error::logic_error(v113, (const std::string *)__stra);
  }
  if (v133 < 0) {
    operator delete(v132[0]);
  }
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v151.__r_.__value_.__l.__data_);
  }
  uint64_t v44 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
  {
    size_t v45 = v121;
    if (*(char *)(v125 + 735) < 0) {
      size_t v45 = (void *)*v121;
    }
    size_t v46 = &v154;
    if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      size_t v46 = (std::string *)v154.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)__stra = 136315394;
    *(void *)&__stra[4] = v45;
    *(_WORD *)&__stra[12] = 2080;
    *(void *)&__stra[14] = v46;
    _os_log_impl(&def_5A5E8, v44, OS_LOG_TYPE_INFO, "TaskId: %s, Loaded network from %s", __stra, 0x16u);
  }
  __int16 v47 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
  {
    double v48 = v121;
    if (*(char *)(v125 + 735) < 0) {
      double v48 = (void *)*v121;
    }
    double v49 = *(float *)(v125 + 80);
    int v50 = *(_DWORD *)(v125 + 124);
    uint64_t v51 = *(void *)(v125 + 96);
    uint64_t v52 = *(void *)(v125 + 104);
    uint64_t v53 = *(void *)(v125 + 112);
    *(_DWORD *)__stra = 136316418;
    *(void *)&__stra[4] = v48;
    *(_WORD *)&__stra[12] = 2048;
    *(double *)&__stra[14] = v49;
    *(_WORD *)&__stra[22] = 2048;
    *(void *)&__stra[24] = v51;
    *(_WORD *)&__stra[32] = 1024;
    *(_DWORD *)&__stra[34] = v50;
    *(_WORD *)&__stra[38] = 2048;
    *(void *)v161 = v52;
    *(_WORD *)&v161[8] = 2048;
    *(void *)&v161[10] = v53;
    _os_log_impl(&def_5A5E8, v47, OS_LOG_TYPE_INFO, "TaskId: %s, learning_rate_=%f, num_iters_=%ld, batch_size_=%d, checkpoint_steps=%ld, additional_early_stopping_epoch=%ld", __stra, 0x3Au);
  }
  uint64_t v54 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v156, "optimizer_params");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v130, v54);
  std::string::basic_string[abi:ne180100]<0>(__stra, "type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("adam", v130, (const void **)__stra, &v151);
  if ((__stra[23] & 0x80000000) != 0) {
    operator delete(*(void **)__stra);
  }
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v151.__r_.__value_.__l.__size_ != 4) {
      goto LABEL_174;
    }
    uint64_t v55 = (std::string *)v151.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) != 4) {
      goto LABEL_174;
    }
    uint64_t v55 = &v151;
  }
  if (LODWORD(v55->__r_.__value_.__l.__data_) == 1835099233)
  {
    std::string::basic_string[abi:ne180100]<0>(__stra, "beta1");
    float *v119 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(v130, (const void **)__stra, (uint64_t)v119);
    if ((__stra[23] & 0x80000000) != 0) {
      operator delete(*(void **)__stra);
    }
    std::string::basic_string[abi:ne180100]<0>(__stra, "beta2");
    *(float *)(v125 + 164) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(v130, (const void **)__stra, v125 + 164);
    if ((__stra[23] & 0x80000000) != 0) {
      operator delete(*(void **)__stra);
    }
    std::string::basic_string[abi:ne180100]<0>(__stra, "epsilon");
    float *v118 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(v130, (const void **)__stra, (uint64_t)v118);
    if ((__stra[23] & 0x80000000) != 0) {
      operator delete(*(void **)__stra);
    }
  }
LABEL_174:
  TrainingEngine::setup_optimizer((TrainingEngine *)v125);
  uint64_t v56 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v156, "model_params");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v128, v56);
  if (*(char *)(v125 + 159) < 0)
  {
    uint64_t v61 = *(void *)(v125 + 144);
    if (v61 != 7)
    {
      if (v61 == 11
        && **(void **)v8 == 0x6565707374736166
        && *(void *)(*(void *)v8 + 3) == 0x3268636565707374)
      {
LABEL_182:
        memset(&__stra[8], 0, 32);
        *(_OWORD *)v161 = 0u;
        *(void *)v161 = 0x30000000080;
        *(_DWORD *)&v161[8] = -1;
        int v60 = *(_DWORD *)(v125 + 128);
        *(_DWORD *)__stra = 1;
        *(_DWORD *)&__stra[4] = v60;
        std::string::basic_string[abi:ne180100]<0>(&v140, "encoder_length");
        LODWORD(v126[0]) = 256;
        *(_DWORD *)v161 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v128, (const void **)&v140.__r_.__value_.__l.__data_, (unsigned int *)v126);
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v140.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v140, "decoder_length");
        LODWORD(v126[0]) = 1280;
        *(_DWORD *)&v161[4] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v128, (const void **)&v140.__r_.__value_.__l.__data_, (unsigned int *)v126);
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v140.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v140, "input_speaker_id");
        LODWORD(v126[0]) = -1;
        *(_DWORD *)&v161[8] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v128, (const void **)&v140.__r_.__value_.__l.__data_, (unsigned int *)v126);
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v140.__r_.__value_.__l.__data_);
        }
        *(_DWORD *)__stra = *(_DWORD *)(v125 + 124);
        std::allocate_shared[abi:ne180100]<NeuralFEDataFeeder,std::allocator<NeuralFEDataFeeder>,std::string const&,std::string const&,NeuralFEDataFeeder::Config &,void>(&v140);
        goto LABEL_223;
      }
LABEL_252:
      v86 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v87 = (const char *)v8;
      if (*(char *)(v125 + 159) < 0) {
        v87 = *(const char **)v8;
      }
      StringFormatter::StringFormatter((StringFormatter *)__stra, "Model type %s is not supported.", v87);
      std::logic_error::logic_error(v86, (const std::string *)__stra);
    }
    uint64_t v58 = *(int **)v8;
  }
  else
  {
    int v57 = *(unsigned __int8 *)(v125 + 159);
    uint64_t v58 = (int *)v8;
    if (v57 != 7)
    {
      if (v57 != 11) {
        goto LABEL_252;
      }
      if (*(void *)v8 != 0x6565707374736166 || *(void *)(v8 + 3) != 0x3268636565707374) {
        goto LABEL_252;
      }
      goto LABEL_182;
    }
  }
  int v63 = *v58;
  int v64 = *(int *)((char *)v58 + 3);
  if (v63 != 1702257015 || v64 != 1852732005) {
    goto LABEL_252;
  }
  memset(&__stra[8], 0, 32);
  *(_OWORD *)v161 = xmmword_213680;
  *(void *)&v161[16] = 0x4700000000000002;
  uint64_t v162 = 0x10000000258;
  int v66 = *(_DWORD *)(v125 + 128);
  *(_DWORD *)__stra = 1;
  *(_DWORD *)&__stra[4] = v66;
  std::string::basic_string[abi:ne180100]<0>(&v140, "step_sequence_length");
  LODWORD(v126[0]) = 960;
  *(_DWORD *)v161 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v128, (const void **)&v140.__r_.__value_.__l.__data_, (unsigned int *)v126);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v140.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v140, "step_shift_length");
  LODWORD(v126[0]) = 240;
  *(_DWORD *)&v161[4] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v128, (const void **)&v140.__r_.__value_.__l.__data_, (unsigned int *)v126);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v140.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v140, "samples_per_frame");
  LODWORD(v126[0]) = 240;
  *(_DWORD *)&v161[8] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v128, (const void **)&v140.__r_.__value_.__l.__data_, (unsigned int *)v126);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v140.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v140, "state_size");
  LODWORD(v126[0]) = 448;
  *(_DWORD *)&v161[12] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v128, (const void **)&v140.__r_.__value_.__l.__data_, (unsigned int *)v126);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v140.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v140, "samples_per_step");
  LODWORD(v126[0]) = 2;
  *(_DWORD *)&v161[16] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v128, (const void **)&v140.__r_.__value_.__l.__data_, (unsigned int *)v126);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v140.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v140, "audio_scalar");
  v126[0] = (void *)0x40E0000000000000;
  float v67 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>(v128, (const void **)&v140.__r_.__value_.__l.__data_, (uint64_t)v126);
  *(float *)&v161[20] = v67;
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v140.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v140, "window_length");
  LODWORD(v126[0]) = 600;
  LODWORD(v162) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v128, (const void **)&v140.__r_.__value_.__l.__data_, (unsigned int *)v126);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v140.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)__stra = *(_DWORD *)(v125 + 124);
  std::string::basic_string[abi:ne180100]<0>(&v140, "enable_debug");
  LOBYTE(v126[0]) = 0;
  __stra[8] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v128, (const void **)&v140.__r_.__value_.__l.__data_, (unsigned __int8 *)v126);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v140.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v126, "debug_data_dir");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("/tmp/iris/debug_data/%d/data", v128, (const void **)v126, &v140);
  if ((__stra[39] & 0x80000000) != 0) {
    operator delete(*(void **)&__stra[16]);
  }
  *(std::string *)&__stra[16] = v140;
  *((unsigned char *)&v140.__r_.__value_.__s + 23) = 0;
  v140.__r_.__value_.__s.__data_[0] = 0;
  if (v127 < 0) {
    operator delete(v126[0]);
  }
  uint64_t v42 = v125;
  std::allocate_shared[abi:ne180100]<WaveRNNDataFeeder,std::allocator<WaveRNNDataFeeder>,std::string const&,std::string const&,WaveRNNDataFeeder::Config &,void>(&v140);
LABEL_223:
  long long v68 = *(_OWORD *)&v140.__r_.__value_.__l.__data_;
  *(_OWORD *)&v140.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v69 = *(std::__shared_weak_count **)(v42 + 72);
  *(_OWORD *)(v42 + 64) = v68;
  if (v69)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
    if (v140.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v140.__r_.__value_.__l.__size_);
    }
  }
  if ((__stra[39] & 0x80000000) != 0) {
    operator delete(*(void **)&__stra[16]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v128);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v129, v128[0]);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v151.__r_.__value_.__l.__data_);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v130);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v131, v130[0]);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v156);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v157, v156[0]);
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v159.__r_.__value_.__l.__data_);
  }
  return v125;
}

void sub_1D2CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,void **a22,void **a23,void **a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t *a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a35);
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a73);
  }
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&STACK[0x250]);
  std::ifstream::~ifstream(&STACK[0x308]);
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (*(char *)(a29 + 735) < 0) {
    operator delete(*a25);
  }
  uint64_t v74 = *(void **)(a29 + 664);
  if (v74)
  {
    *(void *)(a29 + 672) = v74;
    operator delete(v74);
  }
  char v75 = *(void **)(a29 + 640);
  if (v75)
  {
    *(void *)(a29 + 648) = v75;
    operator delete(v75);
  }
  uint64_t v76 = *(void **)(a29 + 616);
  if (v76)
  {
    *(void *)(a29 + 624) = v76;
    operator delete(v76);
  }
  int v77 = *(void **)(a29 + 592);
  if (v77)
  {
    *(void *)(a29 + 600) = v77;
    operator delete(v77);
  }
  uint64_t v78 = *(void **)(a29 + 568);
  if (v78)
  {
    *(void *)(a29 + 576) = v78;
    operator delete(v78);
  }
  uint64_t v79 = *a13;
  if (*a13)
  {
    *(void *)(a29 + 552) = v79;
    operator delete(v79);
  }
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table(a14);
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table(a26);
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table(a27);
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table(a28);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a19);
  STACK[0x308] = a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x308]);
  if (*(char *)(a29 + 271) < 0) {
    operator delete(*a24);
  }
  if (*(char *)(a29 + 247) < 0) {
    operator delete(*a21);
  }
  if (*(char *)(a29 + 223) < 0) {
    operator delete(*a22);
  }
  if (*(char *)(a29 + 199) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(a29 + 159) < 0) {
    operator delete(*a23);
  }
  uint64_t v80 = *(std::__shared_weak_count **)(a29 + 72);
  if (v80) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v80);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::unordered_map<std::string,std::string>,std::unordered_map<std::string,std::string>,0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::unordered_map<std::string,std::string>,0>(a1, a2);
}

void sub_1D34FC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

float nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(char *a1, const void **a2, uint64_t a3)
{
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    uint64_t v8 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v11, v8);
    uint64_t v9 = std::string::insert(&v11, 0, "cannot use value() with ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
    long long v12 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v12, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v12);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v11, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v11);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v12, (unsigned __int8 **)&v11))
  {
    return *(float *)a3;
  }
  BOOL v6 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v12);
  LODWORD(v11.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v6, (float *)&v11);
  return *(float *)&v11.__r_.__value_.__l.__data_;
}

void sub_1D3628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void TrainingEngine::setup_optimizer(TrainingEngine *this)
{
  int v2 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 124) = 0;
  *(void *)((char *)this + 500) = *((void *)this + 20);
  *((_DWORD *)this + 127) = 0;
  *((_DWORD *)this + 128) = v2;
  *(void *)((char *)this + 516) = 1065353216;
  *((unsigned char *)this + 524) = 0;
  *((void *)this + 66) = 0;
  *((_DWORD *)this + 134) = 0;
  uint64_t v3 = (uint64_t *)((char *)this + 544);
  v8[0] = off_26F950;
  void v8[3] = v8;
  TrainingEngine::populate_descs_from_espresso_bufs((uint64_t)this, (uint64_t *)this + 68, (void *)this + 42, (uint64_t)v8);
  unint64_t v4 = std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100](v8);
  TrainingEngine::populate_desc_ptrs((uint64_t)v4, v3, (void *)this + 71);
  v7[0] = off_26F9E0;
  void v7[3] = v7;
  TrainingEngine::populate_descs_from_espresso_bufs((uint64_t)this, (uint64_t *)this + 80, (void *)this + 47, (uint64_t)v7);
  std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100](v7);
  v6[0] = off_26FA60;
  void v6[3] = v6;
  TrainingEngine::populate_descs_from_espresso_bufs((uint64_t)this, (uint64_t *)this + 80, (void *)this + 52, (uint64_t)v6);
  uint64_t v5 = std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100](v6);
  TrainingEngine::populate_desc_ptrs((uint64_t)v5, (uint64_t *)this + 80, (void *)this + 83);
}

void sub_1D37E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void TrainingEngine::~TrainingEngine(TrainingEngine *this)
{
  int v2 = espresso_plan_destroy();
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if (v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v18 = v30;
    int v19 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    unint64_t v21 = __p;
    if (v18 < 0) {
      unint64_t v21 = v19;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v31, "%s Error: %d, %s", (const char *)v21, v2, status_string);
    std::logic_error::logic_error(exception, &v31);
  }
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  int v3 = espresso_context_destroy();
  std::string::basic_string[abi:ne180100]<0>(v27, "");
  if (v3)
  {
    uint64_t v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v23 = v28;
    int v24 = (void **)v27[0];
    long long v25 = (const char *)espresso_get_status_string();
    int v26 = v27;
    if (v23 < 0) {
      int v26 = v24;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v31, "%s Error: %d, %s", (const char *)v26, v3, v25);
    std::logic_error::logic_error(v22, &v31);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  for (uint64_t i = (void *)*((void *)this + 44); i; uint64_t i = (void *)*i)
  {
    uint64_t v5 = (void *)i[5];
    if (v5) {
      free(v5);
    }
  }
  for (unint64_t j = (void *)*((void *)this + 49); j; unint64_t j = (void *)*j)
  {
    uint64_t v7 = (void *)j[5];
    if (v7) {
      free(v7);
    }
  }
  for (k = (void *)*((void *)this + 54); k; k = (void *)*k)
  {
    uint64_t v9 = (void *)k[5];
    if (v9) {
      free(v9);
    }
  }
  if (*((char *)this + 735) < 0) {
    operator delete(*((void **)this + 89));
  }
  long long v10 = (void *)*((void *)this + 83);
  if (v10)
  {
    *((void *)this + 84) = v10;
    operator delete(v10);
  }
  std::string v11 = (void *)*((void *)this + 80);
  if (v11)
  {
    *((void *)this + 81) = v11;
    operator delete(v11);
  }
  long long v12 = (void *)*((void *)this + 77);
  if (v12)
  {
    *((void *)this + 78) = v12;
    operator delete(v12);
  }
  std::string::size_type v13 = (void *)*((void *)this + 74);
  if (v13)
  {
    *((void *)this + 75) = v13;
    operator delete(v13);
  }
  float v14 = (void *)*((void *)this + 71);
  if (v14)
  {
    *((void *)this + 72) = v14;
    operator delete(v14);
  }
  unint64_t v15 = (void *)*((void *)this + 68);
  if (v15)
  {
    *((void *)this + 69) = v15;
    operator delete(v15);
  }
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table((uint64_t)this + 456);
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table((uint64_t)this + 416);
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table((uint64_t)this + 376);
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table((uint64_t)this + 336);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 296);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 272;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  if (*((char *)this + 271) < 0) {
    operator delete(*((void **)this + 31));
  }
  if (*((char *)this + 247) < 0) {
    operator delete(*((void **)this + 28));
  }
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  unint64_t v16 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_1D3B08(void *a1)
{
  if (*(char *)(v3 - 33) < 0)
  {
    operator delete(*(void **)(v3 - 56));
    if ((v2 & 1) == 0) {
LABEL_6:
    }
      __clang_call_terminate(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void TrainingEngine::populate_descs_from_espresso_bufs(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 4);
  std::vector<BNNSNDArrayDescriptor>::resize((uint64_t)a2, v8 + a3[3]);
  if (*(void *)(a1 + 280) != *(void *)(a1 + 272))
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 176 * v8;
    do
    {
      uint64_t v12 = *(void *)(a4 + 24);
      if (!v12) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(void **__return_ptr))(*(void *)v12 + 48))(__p);
      uint64_t v13 = *a2;
      float v14 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::find<std::string>(a3, (unsigned __int8 *)__p);
      if (!v14) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v15 = (_OWORD *)(v13 + v11);
      v15[9] = 0u;
      v15[10] = 0u;
      unint64_t v16 = v14 + 40;
      v15[7] = 0u;
      char v15[8] = 0u;
      v15[5] = 0u;
      v15[6] = 0u;
      v15[3] = 0u;
      void v15[4] = 0u;
      v15[1] = 0u;
      void v15[2] = 0u;
      *unint64_t v15 = 0u;
      uint64_t v17 = v13 + v11;
      *(_DWORD *)(v17 + 4) = 0x10000;
      *(void *)(v17 + 8) = espresso_buffer_get_count();
      *(void *)(v17 + 136) = *v16;
      *(_DWORD *)(v17 + 144) = 65568;
      *(void *)(v17 + 164) = 1065353216;
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      ++v10;
      v11 += 176;
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 280) - *(void *)(a1 + 272)) >> 3));
  }
}

void sub_1D3CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TrainingEngine::populate_desc_ptrs(uint64_t a1, uint64_t *a2, void *a3)
{
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)a3, 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 4));
  uint64_t v5 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      *(void *)(*a3 + 8 * v7++) = v5 + v6;
      uint64_t v5 = *a2;
      v6 += 176;
    }
    while (v7 < 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 4));
  }
}

void std::vector<BNNSNDArrayDescriptor>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<BNNSNDArrayDescriptor>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 176 * a2;
  }
}

void TrainingEngine::train(uint64_t a1, uint64_t a2)
{
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    unint64_t v4 = (void *)(a1 + 712);
    if (*(char *)(a1 + 735) < 0) {
      unint64_t v4 = (void *)*v4;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v4;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "TaskId: %s, Init training setup.", buf, 0xCu);
  }
  v134 = (float **)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 64) + 8) + 32))(*(void *)(*(void *)(a1 + 64) + 8));
  uint64_t v5 = *(void *)(a1 + 272);
  for (uint64_t i = *(void *)(a1 + 280); v5 != i; v5 += 24)
  {
    memset(&v149, 0, sizeof(v149));
    if (*(void *)(a1 + 320))
    {
      *(void *)buf = v5;
      unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 296, (unsigned __int8 *)v5, (uint64_t)&std::piecewise_construct, (long long **)buf);
      std::string::operator=(&v149, (const std::string *)(v7 + 40));
    }
    else
    {
      if (*(char *)(v5 + 23) >= 0) {
        size_t v8 = *(unsigned __int8 *)(v5 + 23);
      }
      else {
        size_t v8 = *(void *)(v5 + 8);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)buf, v8 + 5);
      if (buf[23] >= 0) {
        uint64_t v9 = buf;
      }
      else {
        uint64_t v9 = *(unsigned char **)buf;
      }
      if (v8)
      {
        if (*(char *)(v5 + 23) >= 0) {
          unint64_t v10 = (const void *)v5;
        }
        else {
          unint64_t v10 = *(const void **)v5;
        }
        memmove(v9, v10, v8);
      }
      strcpy(&v9[v8], "_grad");
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v149.__r_.__value_.__l.__data_);
      }
      std::string v149 = *(std::string *)buf;
    }
    int v11 = espresso_network_declare_output();
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    if (v11)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      int v112 = v148;
      v113 = (void **)__p[0];
      status_string = (const char *)espresso_get_status_string();
      v115 = __p;
      if (v112 < 0) {
        v115 = v113;
      }
      StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v115, v11, status_string);
      std::logic_error::logic_error(exception, (const std::string *)buf);
    }
    if (v148 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v149.__r_.__value_.__l.__data_);
    }
  }
  (*(void (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 64) + 8) + 16))(*(void *)(*(void *)(a1 + 64) + 8), a1 + 40);
  int v12 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v145, "");
  if (v12)
  {
    uint64_t v122 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v123 = v146;
    uint64_t v124 = (void **)v145[0];
    uint64_t v125 = (const char *)espresso_get_status_string();
    v126 = v145;
    if (v123 < 0) {
      v126 = v124;
    }
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v126, v12, v125);
    std::logic_error::logic_error(v122, (const std::string *)buf);
  }
  if (v146 < 0) {
    operator delete(v145[0]);
  }
  uint64_t v13 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    float v14 = (void *)(a1 + 712);
    if (*(char *)(a1 + 735) < 0) {
      float v14 = (void *)*v14;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v14;
    _os_log_impl(&def_5A5E8, v13, OS_LOG_TYPE_INFO, "TaskId: %s, Grad net: Binding training vars input.", buf, 0xCu);
  }
  unint64_t v15 = *(unsigned __int8 **)(a1 + 272);
  for (unint64_t j = *(unsigned __int8 **)(a1 + 280); v15 != j; v15 += 24)
  {
    *(void *)buf = v15;
    std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 336, v15, (uint64_t)&std::piecewise_construct, (long long **)buf);
    int v17 = espresso_network_bind_buffer();
    std::string::basic_string[abi:ne180100]<0>(v143, "");
    if (v17)
    {
      v116 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      int v117 = v144;
      v118 = (void **)v143[0];
      v119 = (const char *)espresso_get_status_string();
      v120 = v143;
      if (v117 < 0) {
        v120 = v118;
      }
      StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v120, v17, v119);
      std::logic_error::logic_error(v116, (const std::string *)buf);
    }
    if (v144 < 0) {
      operator delete(v143[0]);
    }
  }
  v127.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  int v18 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    char v19 = (void *)(a1 + 712);
    if (*(char *)(a1 + 735) < 0) {
      char v19 = (void *)*v19;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v19;
    _os_log_impl(&def_5A5E8, v18, OS_LOG_TYPE_INFO, "TaskId: %s, Training start.", buf, 0xCu);
  }
  (***(void (****)(void, uint64_t))(*(void *)(a1 + 64) + 8))(*(void *)(*(void *)(a1 + 64) + 8), a1 + 40);
  (***(void (****)(void))(a1 + 64))();
  (*(void (**)(void))(**(void **)(a1 + 64) + 16))();
  uint64_t v20 = std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::__value_func[abi:ne180100]((uint64_t)v162, a2);
  int v21 = *(void *)(a1 + 96);
  uint64_t v22 = (*(void *)(a1 + 96) << 32) | 1;
  *(_DWORD *)buf = 13;
  *(void *)&buf[4] = v22;
  std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()(v20, *(uint64_t *)buf, v21);
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100](v162);
  if (!*(unsigned char *)(a1 + 708)) {
    TrainingEngine::save_to_inference_model((TrainingEngine *)a1);
  }
  if (!*(void *)(a1 + 96))
  {
    unint64_t v24 = 1;
    goto LABEL_170;
  }
  OptimizerAlgFields = (float *)(a1 + 496);
  uint64_t v131 = a1 + 136;
  int v23 = (uint64_t *)(a1 + 592);
  v128 = (uint64_t *)(a1 + 712);
  unint64_t v24 = 1;
  float v25 = -1.0;
  while (1)
  {
    unint64_t v135 = v24;
    if (*(unsigned char *)a1) {
      break;
    }
    if ((*(char *)(a1 + 159) & 0x80000000) == 0)
    {
      int v26 = *(unsigned __int8 *)(a1 + 159);
      size_t v27 = (int *)(a1 + 136);
      if (v26 != 7)
      {
        if (v26 == 11 && *(void *)v131 == 0x6565707374736166 && *(void *)(a1 + 139) == 0x3268636565707374) {
          goto LABEL_72;
        }
        goto LABEL_76;
      }
      goto LABEL_66;
    }
    uint64_t v29 = *(void *)(a1 + 144);
    if (v29 == 7)
    {
      size_t v27 = *(int **)v131;
LABEL_66:
      int v31 = *v27;
      int v32 = *(int *)((char *)v27 + 3);
      if (v31 == 1702257015 && v32 == 1852732005)
      {
        double v34 = *(float *)(a1 + 80);
        double v35 = pow(*(float *)(a1 + 84), (double)(int)(float)((float)(int)v24 / (float)*(int *)(a1 + 88))) * v34;
LABEL_75:
        float v41 = v35;
        float *OptimizerAlgFields = v41;
        goto LABEL_76;
      }
      goto LABEL_76;
    }
    if (v29 == 11
      && **(void **)v131 == 0x6565707374736166
      && *(void *)(*(void *)v131 + 3) == 0x3268636565707374)
    {
LABEL_72:
      float v36 = *(float *)(a1 + 84);
      double v37 = *(float *)(a1 + 80);
      double v38 = pow(4000.0, v36) * v37;
      float v25 = -1.0;
      double v39 = pow(4000.0, -(v36 + 1.0)) * (double)(int)v24;
      double v40 = pow((double)(int)v24, (float)-v36);
      if (v40 >= v39) {
        double v40 = v39;
      }
      double v35 = v38 * v40;
      goto LABEL_75;
    }
LABEL_76:
    *(float *)(a1 + 508) = (float)v24;
    v132.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    int v42 = *(_DWORD *)(a1 + 128);
    if (v42 >= 1)
    {
      uint64_t v43 = 0;
      float v44 = 0.0;
      while (1)
      {
        (*(void (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 64) + 8))(*(void *)(a1 + 64), v24, v43);
        int v45 = espresso_plan_execute_sync();
        std::string::basic_string[abi:ne180100]<0>(v141, "");
        if (v45)
        {
          v106 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          int v107 = v142;
          v108 = (void **)v141[0];
          int v109 = (const char *)espresso_get_status_string();
          v110 = v141;
          if (v107 < 0) {
            v110 = v108;
          }
          StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v110, v45, v109);
          std::logic_error::logic_error(v106, (const std::string *)buf);
        }
        if (v142 < 0) {
          operator delete(v141[0]);
        }
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 64) + 24))(*(void *)(a1 + 64), v43);
        float v46 = **v134;
        memset(buf, 0, sizeof(buf));
        *(_DWORD *)std::string v152 = 1065353216;
        std::string::size_type v47 = *(void *)(a1 + 272);
        uint64_t v48 = *(void *)(a1 + 280);
        while (v47 != v48)
        {
          memset(&v140, 0, sizeof(v140));
          if (*(void *)(a1 + 320))
          {
            v149.__r_.__value_.__r.__words[0] = v47;
            double v49 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 296, (unsigned __int8 *)v47, (uint64_t)&std::piecewise_construct, (long long **)&v149);
            std::string::operator=(&v140, (const std::string *)(v49 + 40));
            if (v43) {
              goto LABEL_84;
            }
          }
          else
          {
            if (*(char *)(v47 + 23) >= 0) {
              size_t v53 = *(unsigned __int8 *)(v47 + 23);
            }
            else {
              size_t v53 = *(void *)(v47 + 8);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v149, v53 + 5);
            if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v54 = &v149;
            }
            else {
              uint64_t v54 = (std::string *)v149.__r_.__value_.__r.__words[0];
            }
            if (v53)
            {
              if (*(char *)(v47 + 23) >= 0) {
                uint64_t v55 = (const void *)v47;
              }
              else {
                uint64_t v55 = *(const void **)v47;
              }
              memmove(v54, v55, v53);
            }
            strcpy((char *)v54 + v53, "_grad");
            if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v140.__r_.__value_.__l.__data_);
            }
            std::string v140 = v149;
            if (v43)
            {
LABEL_84:
              v149.__r_.__value_.__r.__words[0] = v47;
              int v50 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)buf, (unsigned __int8 *)v47, (uint64_t)&std::piecewise_construct, (long long **)&v149);
              *((void *)v50 + 25) = 0;
              *(_OWORD *)(v50 + 184) = 0u;
              *(_OWORD *)(v50 + 168) = 0u;
              *(_OWORD *)(v50 + 152) = 0u;
              *(_OWORD *)(v50 + 136) = 0u;
              *(_OWORD *)(v50 + 120) = 0u;
              *(_OWORD *)(v50 + 104) = 0u;
              *(_OWORD *)(v50 + 88) = 0u;
              *(_OWORD *)(v50 + 72) = 0u;
              *(_OWORD *)(v50 + 56) = 0u;
              *(_OWORD *)(v50 + 40) = 0u;
              v149.__r_.__value_.__r.__words[0] = v47;
              std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)buf, (unsigned __int8 *)v47, (uint64_t)&std::piecewise_construct, (long long **)&v149);
              int v51 = espresso_network_bind_buffer();
              std::string::basic_string[abi:ne180100]<0>(v136, "");
              if (v51)
              {
                v96 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                int v97 = v137;
                v98 = (const char *)v136[0];
                int v99 = (const char *)espresso_get_status_string();
                v100 = (const char *)v136;
                if (v97 < 0) {
                  v100 = v98;
                }
                StringFormatter::StringFormatter((StringFormatter *)&v149, "%s Error: %d, %s", v100, v51, v99);
                std::logic_error::logic_error(v96, &v149);
              }
              if (v137 < 0)
              {
                uint64_t v52 = (void **)v136;
LABEL_104:
                operator delete(*v52);
                goto LABEL_105;
              }
              goto LABEL_105;
            }
          }
          v149.__r_.__value_.__r.__words[0] = v47;
          uint64_t v56 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 456, (unsigned __int8 *)v47, (uint64_t)&std::piecewise_construct, (long long **)&v149);
          *((void *)v56 + 25) = 0;
          *(_OWORD *)(v56 + 184) = 0u;
          *(_OWORD *)(v56 + 168) = 0u;
          *(_OWORD *)(v56 + 152) = 0u;
          *(_OWORD *)(v56 + 136) = 0u;
          *(_OWORD *)(v56 + 120) = 0u;
          *(_OWORD *)(v56 + 104) = 0u;
          *(_OWORD *)(v56 + 88) = 0u;
          *(_OWORD *)(v56 + 72) = 0u;
          *(_OWORD *)(v56 + 56) = 0u;
          *(_OWORD *)(v56 + 40) = 0u;
          v149.__r_.__value_.__r.__words[0] = v47;
          std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 456, (unsigned __int8 *)v47, (uint64_t)&std::piecewise_construct, (long long **)&v149);
          int v57 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(v138, "");
          if (v57)
          {
            v101 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            int v102 = v139;
            v103 = (const char *)v138[0];
            int v104 = (const char *)espresso_get_status_string();
            v105 = (const char *)v138;
            if (v102 < 0) {
              v105 = v103;
            }
            StringFormatter::StringFormatter((StringFormatter *)&v149, "%s Error: %d, %s", v105, v57, v104);
            std::logic_error::logic_error(v101, &v149);
          }
          if (v139 < 0)
          {
            uint64_t v52 = (void **)v138;
            goto LABEL_104;
          }
LABEL_105:
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v140.__r_.__value_.__l.__data_);
          }
          v47 += 24;
        }
        int v58 = *(_DWORD *)(a1 + 128);
        if (v43 || v58 <= 1)
        {
          unint64_t v24 = v135;
          if (v43)
          {
            float v60 = 1.0 / (double)v58;
            TrainingEngine::accumulate_weights(a1, (uint64_t)buf, a1 + 456, v60);
            uint64_t v61 = *(unsigned __int8 **)(a1 + 272);
            v62 = *(unsigned __int8 **)(a1 + 280);
            while (v61 != v62)
            {
              v149.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
              int v63 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)buf, v61, (uint64_t)&std::piecewise_construct, (long long **)&v149);
              free(*((void **)v63 + 5));
              v61 += 24;
            }
          }
        }
        else
        {
          float v59 = 1.0 / (double)v58;
          TrainingEngine::scale_weights(a1, a1 + 456, v59);
          unint64_t v24 = v135;
        }
        float v44 = v44 + v46;
        std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table((uint64_t)buf);
        uint64_t v43 = (v43 + 1);
        int v42 = *(_DWORD *)(a1 + 128);
        if ((int)v43 >= v42)
        {
          int v23 = (uint64_t *)(a1 + 592);
          goto LABEL_119;
        }
      }
    }
    float v44 = 0.0;
LABEL_119:
    v161[0] = off_26FAE0;
    v161[3] = v161;
    TrainingEngine::populate_descs_from_espresso_bufs(a1, v23, (void *)(a1 + 456), (uint64_t)v161);
    int v64 = std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100](v161);
    TrainingEngine::populate_desc_ptrs((uint64_t)v64, v23, (void *)(a1 + 616));
    if (BNNSOptimizerStep(BNNSOptimizerFunctionAdam, OptimizerAlgFields, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 552) - *(void *)(a1 + 544)) >> 4), *(BNNSNDArrayDescriptor ***)(a1 + 568), *(const BNNSNDArrayDescriptor ***)(a1 + 616), *(BNNSNDArrayDescriptor ***)(a1 + 664), 0))
    {
      v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v121, "optimizer step failed");
    }
    *(void *)(a1 + 624) = *(void *)(a1 + 616);
    *(void *)(a1 + 600) = *(void *)(a1 + 592);
    uint64_t v65 = *(unsigned __int8 **)(a1 + 272);
    int v66 = *(unsigned __int8 **)(a1 + 280);
    while (v65 != v66)
    {
      *(void *)buf = v65;
      float v67 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 456, v65, (uint64_t)&std::piecewise_construct, (long long **)buf);
      free(*((void **)v67 + 5));
      v65 += 24;
    }
    float v68 = v44 / (float)v42;
    float v69 = *(float *)(a1 + 496);
    int v70 = *(_DWORD *)(a1 + 700);
    unint64_t v71 = v135;
    if (v70 >= (int)v135) {
      int v70 = v135;
    }
    *(float *)(a1 + 688) = (float)(v68 / (float)v70)
                         + (float)((float)(*(float *)(a1 + 688) * (float)((float)v70 + v25)) / (float)v70);
    float v72 = (double)((std::chrono::steady_clock::now().__d_.__rep_ - v132.__d_.__rep_) / 1000000) / 1000.0;
    if (!(v135 % 0x64))
    {
      v73 = Diagnostics_GetLogObject();
      unint64_t v71 = v135;
      if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
      {
        uint64_t v74 = a1 + 712;
        if (*(char *)(a1 + 735) < 0) {
          uint64_t v74 = *v128;
        }
        uint64_t v75 = a1 + 136;
        if (*(char *)(a1 + 159) < 0) {
          uint64_t v75 = *(void *)v131;
        }
        uint64_t v76 = *(void *)(a1 + 96);
        double v77 = *(float *)(a1 + 688);
        *(_DWORD *)buf = 136316930;
        *(void *)&buf[4] = v74;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v75;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&buf[24] = v135;
        *(_WORD *)std::string v152 = 2048;
        *(void *)&v152[2] = v76;
        __int16 v153 = 2048;
        double v154 = v77;
        __int16 v155 = 2048;
        double v156 = v68;
        __int16 v157 = 2048;
        double v158 = v69;
        __int16 v159 = 2048;
        double v160 = v72;
        _os_log_impl(&def_5A5E8, v73, OS_LOG_TYPE_INFO, "TaskId: %s, model_type=%s, training_step=%ld / %ld, ma_loss=%f, training_loss=%f, lr=%f, time=%.3f s/step", buf, 0x52u);
      }
    }
    if (v72 > 10.0)
    {
      v129 &= 0xFFFFFFFF00000000;
      std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()(a2, 15, 0);
      unint64_t v71 = v135;
    }
    unint64_t v78 = *(int *)(a1 + 704);
    if (v71 == v78) {
      *(_DWORD *)(a1 + 692) = *(_DWORD *)(a1 + 688);
    }
    if (v71 >= v78 && !(v71 % *(void *)(a1 + 104)))
    {
      if (*(unsigned char *)(a1 + 120))
      {
        if (!*(unsigned char *)(a1 + 708))
        {
          TrainingEngine::save_to_inference_model((TrainingEngine *)a1);
          unint64_t v71 = v135;
        }
      }
      else
      {
        if (*(float *)(a1 + 688) <= *(float *)(a1 + 692))
        {
          *(_DWORD *)(a1 + 696) = v71;
          uint64_t v80 = Diagnostics_GetLogObject();
          unint64_t v71 = v135;
          if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
          {
            uint64_t v81 = a1 + 712;
            if (*(char *)(a1 + 735) < 0) {
              uint64_t v81 = *v128;
            }
            double v82 = *(float *)(a1 + 688);
            double v83 = *(float *)(a1 + 692);
            *(_DWORD *)buf = 136315906;
            *(void *)&buf[4] = v81;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v135;
            *(_WORD *)&buf[22] = 2048;
            *(double *)&buf[24] = v82;
            *(_WORD *)std::string v152 = 2048;
            *(double *)&v152[2] = v83;
            _os_log_impl(&def_5A5E8, v80, OS_LOG_TYPE_INFO, "TaskId: %s, min_ma_loss detected, training_step=%ld, ma_loss=%f, min_ma_loss=%f", buf, 0x2Au);
          }
          *(_DWORD *)(a1 + 692) = *(_DWORD *)(a1 + 688);
          if (!*(unsigned char *)(a1 + 708))
          {
            TrainingEngine::save_to_inference_model((TrainingEngine *)a1);
            unint64_t v71 = v135;
          }
        }
        if ((v71 - *(int *)(a1 + 696)) / *(void *)(a1 + 104) >= *(void *)(a1 + 112))
        {
          float v84 = Diagnostics_GetLogObject();
          if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
          {
            if (*(char *)(a1 + 735) < 0)
            {
              uint64_t v85 = *v128;
              unint64_t v24 = v135;
            }
            else
            {
              unint64_t v24 = v135;
              uint64_t v85 = a1 + 712;
            }
            double v94 = *(float *)(a1 + 688);
            double v95 = *(float *)(a1 + 692);
            *(_DWORD *)buf = 136315906;
            *(void *)&buf[4] = v85;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v24;
            *(_WORD *)&buf[22] = 2048;
            *(double *)&buf[24] = v94;
            *(_WORD *)std::string v152 = 2048;
            *(double *)&v152[2] = v95;
            uint64_t v88 = "TaskId: %s, Exceed additional epoch due to early stopping, training_step=%ld, ma_loss=%f, min_ma_loss=%f";
            int v89 = v84;
            uint32_t v90 = 42;
            goto LABEL_169;
          }
LABEL_166:
          unint64_t v24 = v135;
          goto LABEL_170;
        }
      }
    }
    if (v71 == *(void *)(a1 + 96))
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "saved_model.espresso.net");
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      unint64_t v71 = v135;
    }
    if (*(void *)(a2 + 24) && (!(v135 % 0x64) || v71 == *(void *)(a1 + 96)))
    {
      std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::__value_func[abi:ne180100]((uint64_t)v150, a2);
      int v79 = *(void *)(a1 + 96);
      unint64_t v71 = v135;
      *(_DWORD *)buf = 13;
      buf[4] = v135;
      buf[5] = BYTE1(v135);
      buf[6] = BYTE2(v135);
      buf[7] = BYTE3(v135);
      *(_DWORD *)&buf[8] = v79;
      std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()((uint64_t)v150, *(uint64_t *)buf, v79);
      std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100](v150);
    }
    unint64_t v24 = v71 + 1;
    int v23 = (uint64_t *)(a1 + 592);
    if (v24 > *(void *)(a1 + 96)) {
      goto LABEL_170;
    }
  }
  v86 = Diagnostics_GetLogObject();
  if (!os_log_type_enabled(v86, OS_LOG_TYPE_INFO)) {
    goto LABEL_166;
  }
  if (*(char *)(a1 + 735) < 0) {
    uint64_t v87 = *v128;
  }
  else {
    uint64_t v87 = a1 + 712;
  }
  *(_DWORD *)buf = 136315138;
  *(void *)&buf[4] = v87;
  uint64_t v88 = "TaskId: %s, Training stopped.";
  int v89 = v86;
  uint32_t v90 = 12;
LABEL_169:
  _os_log_impl(&def_5A5E8, v89, OS_LOG_TYPE_INFO, v88, buf, v90);
LABEL_170:
  v91.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v92 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
  {
    v93 = (void *)(a1 + 712);
    if (*(char *)(a1 + 735) < 0) {
      v93 = (void *)*v93;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[4] = v93;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v91.__d_.__rep_ - v127.__d_.__rep_) / 1000000) / 1000.0;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&buf[24] = *(double *)&buf[14] / (double)v24;
    _os_log_impl(&def_5A5E8, v92, OS_LOG_TYPE_INFO, "TaskId: %s, Training end. total_time=%.3f s, %.3f s/step", buf, 0x20u);
  }
}

void sub_1D51BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a69 < 0)
  {
    operator delete(__p);
    if ((v70 & 1) == 0)
    {
LABEL_6:
      if (a51 < 0) {
        operator delete(a46);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v70)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v69);
  goto LABEL_6;
}

void TrainingEngine::save_to_inference_model(TrainingEngine *this)
{
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    BOOL v3 = (void *)((char *)this + 712);
    if (*((char *)this + 735) < 0) {
      BOOL v3 = (void *)*v3;
    }
    unint64_t v4 = (void *)((char *)this + 176);
    if (*((char *)this + 199) < 0) {
      unint64_t v4 = (void *)*v4;
    }
    *(_DWORD *)buf = 136315394;
    int v11 = v3;
    __int16 v12 = 2080;
    uint64_t v13 = v4;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "TaskId: %s, Saving training model to inference model, output_path=%s", buf, 0x16u);
  }
  uint64_t v5 = (void *)((char *)this + 176);
  std::allocate_shared[abi:ne180100]<InferenceModule,std::allocator<InferenceModule>,std::string &,std::string &,void>(&v8);
  (**(void (***)(void, char *))*v8)(*v8, (char *)this + 336);
  uint64_t v6 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    unint64_t v7 = (void *)((char *)this + 712);
    if (*((char *)this + 735) < 0) {
      unint64_t v7 = (void *)*v7;
    }
    if (*((char *)this + 199) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    *(_DWORD *)buf = 136315394;
    int v11 = v7;
    __int16 v12 = 2080;
    uint64_t v13 = v5;
    _os_log_impl(&def_5A5E8, v6, OS_LOG_TYPE_INFO, "TaskId: %s, Inference model saved to: %s", buf, 0x16u);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1D5574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void TrainingEngine::scale_weights(uint64_t a1, uint64_t a2, float a3)
{
  BOOL v3 = *(long long **)(a1 + 272);
  for (uint64_t i = *(long long **)(a1 + 280); v3 != i; v3 = (long long *)((char *)v3 + 24))
  {
    size_t v8 = v3;
    unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)v3, (uint64_t)&std::piecewise_construct, &v8);
    TrainingUtils::scale_espresso_buffer_data((float **)v7 + 5, a3);
  }
}

void TrainingEngine::accumulate_weights(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  unint64_t v4 = *(long long **)(a1 + 272);
  for (i = *(long long **)(a1 + 280); v4 != i; unint64_t v4 = (long long *)((char *)v4 + 24))
  {
    int v11 = v4;
    uint64_t v9 = (const float **)(std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)v4, (uint64_t)&std::piecewise_construct, &v11)+ 40);
    int v11 = v4;
    unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v4, (uint64_t)&std::piecewise_construct, &v11);
    TrainingUtils::accumulate_espresso_buffer_data(v9, (float **)v10 + 5, a4);
  }
}

unsigned char *TrainingEngine::stop(unsigned char *this)
{
  *this = 1;
  return this;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      BOOL v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::unordered_map<std::string,std::string>,0>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    uint64_t v6 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v12, v6);
    unint64_t v7 = std::string::insert(&v12, 0, "type must be object, but is ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(void *)&long long v10 = *((void *)&v7->__r_.__value_.__l + 2);
    long long v9 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v9, exception);
  }
  long long v9 = 0u;
  long long v10 = 0u;
  int v11 = 1065353216;
  std::transform[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>,std::insert_iterator<std::unordered_map<std::string,std::string>>,void nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::unordered_map<std::string,std::string>,0>(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::unordered_map<std::string,std::string> &)::{lambda(std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&)#1}>(**(void ***)(a1 + 8), (void *)(*(void *)(a1 + 8) + 8), (uint64_t)&v9);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(a2, (uint64_t *)&v9);
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v9);
}

void sub_1D585C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

uint64_t std::transform[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>,std::insert_iterator<std::unordered_map<std::string,std::string>>,void nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::unordered_map<std::string,std::string>,0>(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::unordered_map<std::string,std::string> &)::{lambda(std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&)#1}>(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)(v5 + 7), &v12);
      if (*((char *)v5 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v10, (const std::string::value_type *)v5[4], v5[5]);
      }
      else {
        std::string v10 = *(std::string *)(v5 + 4);
      }
      std::string __p = v12;
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(a3, (unsigned __int8 *)&v10, (uint64_t)&v10);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_1D59E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string>>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1D5C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v8 + 40) = result;
  *((void *)v8 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1D5D28(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *std::allocate_shared[abi:ne180100]<NeuralFEDataFeeder,std::allocator<NeuralFEDataFeeder>,std::string const&,std::string const&,NeuralFEDataFeeder::Config &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xF8uLL);
  __n128 result = std::__shared_ptr_emplace<NeuralFEDataFeeder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,NeuralFEDataFeeder::Config &,std::allocator<NeuralFEDataFeeder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1D5EF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<NeuralFEDataFeeder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,NeuralFEDataFeeder::Config &,std::allocator<NeuralFEDataFeeder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26F870;
  NeuralFEDataFeeder::NeuralFEDataFeeder(a1 + 3);
  return a1;
}

void sub_1D5F50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NeuralFEDataFeeder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26F870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NeuralFEDataFeeder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26F870;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<NeuralFEDataFeeder>::__on_zero_shared(uint64_t a1)
{
}

void NeuralFEDataFeeder::~NeuralFEDataFeeder(NeuralFEDataFeeder *this)
{
  *(void *)this = &off_270268;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)this + 200, *((char **)this + 26));
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  *(void *)this = &off_26F8C0;
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  unint64_t v3 = (void **)((char *)this + 64);
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void *std::allocate_shared[abi:ne180100]<WaveRNNDataFeeder,std::allocator<WaveRNNDataFeeder>,std::string const&,std::string const&,WaveRNNDataFeeder::Config &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x120uLL);
  __n128 result = std::__shared_ptr_emplace<WaveRNNDataFeeder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,WaveRNNDataFeeder::Config &,std::allocator<WaveRNNDataFeeder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1D6170(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<WaveRNNDataFeeder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,WaveRNNDataFeeder::Config &,std::allocator<WaveRNNDataFeeder>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26F900;
  WaveRNNDataFeeder::WaveRNNDataFeeder(a1 + 3);
  return a1;
}

void sub_1D61CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<WaveRNNDataFeeder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26F900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WaveRNNDataFeeder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26F900;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<WaveRNNDataFeeder>::__on_zero_shared(uint64_t a1)
{
}

void WaveRNNDataFeeder::~WaveRNNDataFeeder(void **this)
{
  *this = &off_270298;
  unint64_t v3 = this + 30;
  std::vector<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = this + 27;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  *this = &off_26F8C0;
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  unint64_t v3 = this + 8;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::vector<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void std::__function::__func<TrainingEngine::setup_optimizer(void)::$_0,std::allocator<TrainingEngine::setup_optimizer(void)::$_0>,std::string ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<TrainingEngine::setup_optimizer(void)::$_0,std::allocator<TrainingEngine::setup_optimizer(void)::$_0>,std::string ()(std::string const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_26F950;
  return result;
}

void std::__function::__func<TrainingEngine::setup_optimizer(void)::$_0,std::allocator<TrainingEngine::setup_optimizer(void)::$_0>,std::string ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26F950;
}

void std::__function::__func<TrainingEngine::setup_optimizer(void)::$_0,std::allocator<TrainingEngine::setup_optimizer(void)::$_0>,std::string ()(std::string const&)>::operator()(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

uint64_t std::__function::__func<TrainingEngine::setup_optimizer(void)::$_0,std::allocator<TrainingEngine::setup_optimizer(void)::$_0>,std::string ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **std::__function::__func<TrainingEngine::setup_optimizer(void)::$_0,std::allocator<TrainingEngine::setup_optimizer(void)::$_0>,std::string ()(std::string const&)>::target_type()
{
}

void *std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<TrainingEngine::setup_optimizer(void)::$_1,std::allocator<TrainingEngine::setup_optimizer(void)::$_1>,std::string ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<TrainingEngine::setup_optimizer(void)::$_1,std::allocator<TrainingEngine::setup_optimizer(void)::$_1>,std::string ()(std::string const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_26F9E0;
  return result;
}

void std::__function::__func<TrainingEngine::setup_optimizer(void)::$_1,std::allocator<TrainingEngine::setup_optimizer(void)::$_1>,std::string ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26F9E0;
}

void std::__function::__func<TrainingEngine::setup_optimizer(void)::$_1,std::allocator<TrainingEngine::setup_optimizer(void)::$_1>,std::string ()(std::string const&)>::operator()(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

uint64_t std::__function::__func<TrainingEngine::setup_optimizer(void)::$_1,std::allocator<TrainingEngine::setup_optimizer(void)::$_1>,std::string ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **std::__function::__func<TrainingEngine::setup_optimizer(void)::$_1,std::allocator<TrainingEngine::setup_optimizer(void)::$_1>,std::string ()(std::string const&)>::target_type()
{
}

void std::__function::__func<TrainingEngine::setup_optimizer(void)::$_2,std::allocator<TrainingEngine::setup_optimizer(void)::$_2>,std::string ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<TrainingEngine::setup_optimizer(void)::$_2,std::allocator<TrainingEngine::setup_optimizer(void)::$_2>,std::string ()(std::string const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_26FA60;
  return result;
}

void std::__function::__func<TrainingEngine::setup_optimizer(void)::$_2,std::allocator<TrainingEngine::setup_optimizer(void)::$_2>,std::string ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26FA60;
}

void std::__function::__func<TrainingEngine::setup_optimizer(void)::$_2,std::allocator<TrainingEngine::setup_optimizer(void)::$_2>,std::string ()(std::string const&)>::operator()(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

uint64_t std::__function::__func<TrainingEngine::setup_optimizer(void)::$_2,std::allocator<TrainingEngine::setup_optimizer(void)::$_2>,std::string ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **std::__function::__func<TrainingEngine::setup_optimizer(void)::$_2,std::allocator<TrainingEngine::setup_optimizer(void)::$_2>,std::string ()(std::string const&)>::target_type()
{
}

void std::vector<BNNSNDArrayDescriptor>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0x2E8BA2E8BA2E8BA3 * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 176 * ((176 * a2 - 176) / 0xB0) + 176;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((v7 - (unsigned char *)*a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1745D1745D1745DLL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xBA2E8BA2E8BA2ELL) {
      unint64_t v11 = 0x1745D1745D1745DLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BNNSNDArrayDescriptor>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    float v14 = &v12[176 * v8];
    unint64_t v15 = &v12[176 * v11];
    size_t v16 = 176 * ((176 * a2 - 176) / 0xB0) + 176;
    bzero(v14, v16);
    float v17 = &v14[v16];
    unint64_t v19 = (char *)*a1;
    BOOL v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 11);
        long long v21 = *((_OWORD *)v18 - 9);
        *((_OWORD *)v14 - 10) = *((_OWORD *)v18 - 10);
        *((_OWORD *)v14 - 9) = v21;
        *((_OWORD *)v14 - 11) = v20;
        long long v22 = *((_OWORD *)v18 - 8);
        long long v23 = *((_OWORD *)v18 - 7);
        long long v24 = *((_OWORD *)v18 - 5);
        *((_OWORD *)v14 - 6) = *((_OWORD *)v18 - 6);
        *((_OWORD *)v14 - 5) = v24;
        *((_OWORD *)v14 - 8) = v22;
        *((_OWORD *)v14 - 7) = v23;
        long long v25 = *((_OWORD *)v18 - 4);
        long long v26 = *((_OWORD *)v18 - 3);
        long long v27 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v27;
        *((_OWORD *)v14 - 4) = v25;
        *((_OWORD *)v14 - 3) = v26;
        v14 -= 176;
        v18 -= 176;
      }
      while (v18 != v19);
      BOOL v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<BNNSNDArrayDescriptor>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(176 * a2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    float v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  long long v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *long long v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1D6BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1D6C7C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__function::__func<TrainingEngine::train(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0,std::allocator<TrainingEngine::train(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0>,std::string ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<TrainingEngine::train(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0,std::allocator<TrainingEngine::train(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0>,std::string ()(std::string const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_26FAE0;
  return result;
}

void std::__function::__func<TrainingEngine::train(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0,std::allocator<TrainingEngine::train(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0>,std::string ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_26FAE0;
}

void std::__function::__func<TrainingEngine::train(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0,std::allocator<TrainingEngine::train(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0>,std::string ()(std::string const&)>::operator()(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

uint64_t std::__function::__func<TrainingEngine::train(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0,std::allocator<TrainingEngine::train(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0>,std::string ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **std::__function::__func<TrainingEngine::train(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0,std::allocator<TrainingEngine::train(std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>)::$_0>,std::string ()(std::string const&)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<InferenceModule,std::allocator<InferenceModule>,std::string &,std::string &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  __n128 result = std::__shared_ptr_emplace<InferenceModule>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::allocator<InferenceModule>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1D6DD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<InferenceModule>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,std::allocator<InferenceModule>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26FB60;
  InferenceModule::InferenceModule(a1 + 3);
  return a1;
}

void sub_1D6E30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26FB60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26FB60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<InferenceModule>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void normalize_recording_volume(vDSP_Length __N@<X0>, const float *__A@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (*(unsigned char *)(a3 + 20))
  {
    int v8 = (int)(*(double *)a3 * 0.03);
    if (v8 >= 0) {
      int v9 = (int)(*(double *)a3 * 0.03);
    }
    else {
      int v9 = v8 + 1;
    }
    unint64_t v10 = v8;
    std::vector<float>::vector(v45, v8);
    if (v8 >= 1)
    {
      uint64_t v11 = 0;
      uint64x2_t v36 = (uint64x2_t)vdupq_n_s64((unint64_t)v10 - 1);
      uint64x2_t v12 = (uint64x2_t)xmmword_204A30;
      int64x2_t v34 = vdupq_n_s64(2uLL);
      float64x2_t v35 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
      unint64_t v13 = (float *)v45[0];
      float64x2_t v33 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(int)v10 + -1.0), 0);
      do
      {
        int32x2_t v39 = vmovn_s64((int64x2_t)vcgeq_u64(v36, v12));
        int64x2_t v40 = (int64x2_t)v12;
        v14.i64[0] = (int)v11;
        v14.i64[1] = (int)v11 + 1;
        float32x2_t v15 = vcvt_f32_f64(vdivq_f64(vmulq_f64(vcvtq_f64_s64(v14), v35), v33));
        float v37 = v15.f32[0];
        float v38 = cosf(v15.f32[1]);
        float v16 = cosf(v37);
        if (v39.i8[0])
        {
          float v17 = (1.0 - v16) * 0.5;
          v13[v11] = v17;
        }
        if (v39.i8[4])
        {
          float v18 = (1.0 - v38) * 0.5;
          v13[v11 + 1] = v18;
        }
        v11 += 2;
        uint64x2_t v12 = (uint64x2_t)vaddq_s64(v40, v34);
      }
      while (((v10 + 1) & 0x1FFFFFFFELL) != v11);
    }
    std::vector<float>::vector(__Aa, v10);
    float __C = 0.0;
    vDSP_maxmgv(__A, 1, &__C, __N);
    float v19 = 1.0 / (__C * 1.1);
    float __C = v19;
    if (!__N) {
      goto LABEL_23;
    }
    float v41 = a4;
    vDSP_Length v20 = 0;
    int v21 = 0;
    int v22 = v9 >> 1;
    long long v23 = __A;
    uint64_t v24 = v22;
    uint64_t v25 = 4 * v22;
    float v26 = 0.0;
    vDSP_Length v27 = __N;
    do
    {
      vDSP_Length v28 = v10;
      if (v20 >= __N - v10 + 1)
      {
        vDSP_vclr(__Aa[0], 1, v10);
        vDSP_Length v28 = v27;
      }
      vDSP_vmul(v23, 1, (const float *)v45[0], 1, __Aa[0], 1, v28);
      float __B = 0.0;
      vDSP_measqv(__Aa[0], 1, &__B, v10);
      float v29 = log10f(__C * (float)(__B * __C)) * 10.0;
      float v30 = *(float *)(a3 + 12);
      BOOL v31 = v29 <= v30;
      if (v29 <= v30) {
        float v29 = -0.0;
      }
      float v26 = v26 + v29;
      if (!v31) {
        ++v21;
      }
      v20 += v24;
      long long v23 = (const float *)((char *)v23 + v25);
      v27 -= v24;
    }
    while (v20 < __N);
    a4 = v41;
    if (v21)
    {
      float v32 = __exp10f((float)(*(float *)(a3 + 8) - (float)(v26 / (float)v21)) / 20.0);
      float __B = v32 * __C;
      std::vector<float>::vector(v41, __N);
      vDSP_vsmul(__A, 1, &__B, (float *)*v41, 1, __N);
    }
    else
    {
LABEL_23:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a4, __A, (uint64_t)&__A[__N], __N);
    }
    if (__Aa[0])
    {
      __Aa[1] = __Aa[0];
      operator delete(__Aa[0]);
    }
    if (v45[0])
    {
      v45[1] = v45[0];
      operator delete(v45[0]);
    }
  }
  else
  {
    LODWORD(v45[0]) = 0;
    vDSP_maxmgv(__A, 1, (float *)v45, __N);
    *(float *)__Aa = *(float *)(a3 + 16) / *(float *)v45;
    std::vector<float>::vector(a4, __N);
    vDSP_vsmul(__A, 1, (const float *)__Aa, (float *)*a4, 1, __N);
  }
}

void sub_1D7284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  float v30 = *v27;
  if (*v27)
  {
    *(void *)(a23 + 8) = v30;
    operator delete(v30);
  }
  if (__p) {
    operator delete(__p);
  }
  BOOL v31 = *(void **)(v28 - 144);
  if (v31)
  {
    *(void *)(v28 - 136) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PCMExtractInt24<short,true>::process(uint64_t result, _WORD *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = *(void *)(result + 8);
    uint64_t v5 = a3 + 2;
    do
    {
      *a2++ = *(_WORD *)(v5 - 1);
      v5 += v4;
      --a4;
    }
    while (a4);
  }
  return result;
}

uint64_t PCMExtractInt24<short,false>::process(uint64_t result, _WORD *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = *(void *)(result + 8);
    uint64_t v5 = a3 + 1;
    do
    {
      *a2++ = bswap32(*(unsigned __int16 *)(v5 - 1)) >> 16;
      v5 += v4;
      --a4;
    }
    while (a4);
  }
  return result;
}

uint64_t PCMExtractInt24<int,true>::process(uint64_t result, int *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = *(void *)(result + 8);
    uint64_t v5 = (unsigned __int8 *)(a3 + 1);
    do
    {
      *a2++ = (*(v5 - 1) << 8) | (*v5 << 16) | (v5[1] << 24);
      v5 += v4;
      --a4;
    }
    while (a4);
  }
  return result;
}

uint64_t PCMExtractInt24<int,false>::process(uint64_t result, int *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = *(void *)(result + 8);
    uint64_t v5 = (unsigned __int8 *)(a3 + 1);
    do
    {
      *a2++ = (*(v5 - 1) << 24) | (*v5 << 16) | (v5[1] << 8);
      v5 += v4;
      --a4;
    }
    while (a4);
  }
  return result;
}

float PCMExtractInt24<float,true>::process(uint64_t a1, float *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = (unsigned __int8 *)(a3 + 1);
    float result = NAN;
    do
    {
      float v7 = (double)((*(v5 - 1) << 8) | (*v5 << 16) | (v5[1] << 24)) / 2147483650.0;
      *a2++ = v7;
      v5 += v4;
      --a4;
    }
    while (a4);
  }
  return result;
}

float PCMExtractInt24<float,false>::process(uint64_t a1, float *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = (unsigned __int8 *)(a3 + 1);
    float result = NAN;
    do
    {
      float v7 = (double)((*(v5 - 1) << 24) | (*v5 << 16) | (v5[1] << 8)) / 2147483650.0;
      *a2++ = v7;
      v5 += v4;
      --a4;
    }
    while (a4);
  }
  return result;
}

void PCMPackInt24<true>::process(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  for (; a4; --a4)
  {
    int v4 = *a3++;
    *(_WORD *)a2 = *(_WORD *)((char *)&v4 + 1);
    *(unsigned char *)(a2 + 2) = HIBYTE(v4);
    a2 += 3;
  }
}

void PCMPackInt24<false>::process(uint64_t a1, unsigned char *a2, int *a3, uint64_t a4)
{
  for (; a4; --a4)
  {
    int v4 = *a3++;
    *a2 = HIBYTE(v4);
    a2[1] = BYTE2(v4);
    a2[2] = BYTE1(v4);
    a2 += 3;
  }
}

off_t PCMFile::Reader::set_channel(PCMFile::Reader *this, int a2)
{
  return lseek(*((_DWORD *)this + 2), *((void *)this + 2) + *((int *)this + 8) * (uint64_t)a2, 0);
}

off_t PCMFile::Reader::set_offset(PCMFile::Reader *this, uint64_t a2)
{
  return lseek(*((_DWORD *)this + 2), *((int *)this + 8) * a2 * *((int *)this + 7), 1);
}

ssize_t PCMFile::Reader::read_samples(PCMFile::Reader *this, uint64_t a2, void *a3, int a4, int a5, float a6)
{
  if (*((_DWORD *)this + 8) != a4
    || *((unsigned __int8 *)this + 40) != a5
    || (a6 == 1.0 ? (BOOL v7 = *((_DWORD *)this + 7) == 1) : (BOOL v7 = 0), !v7))
  {
    operator new[]();
  }
  ssize_t result = read(*((_DWORD *)this + 2), a3, a4 * a2);
  if (!*((unsigned char *)this + 41)) {
    operator new();
  }
  return result;
}

void sub_1D7E88(uint64_t a1, ...)
{
  va_start(va, a1);
  std::__list_imp<char *>::clear((uint64_t *)va);
  operator delete[]();
}

uint64_t PCMReader_WAV::PCMReader_WAV(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26FBB0;
  if (*(char *)(a2 + 23) >= 0) {
    unint64_t v3 = (const char *)a2;
  }
  else {
    unint64_t v3 = *(const char **)a2;
  }
  int v4 = fopen(v3, "rb");
  *(void *)(a1 + 56) = v4;
  if (v4)
  {
    unsigned int v19 = 0;
    fread(&__ptr, 1uLL, 4uLL, v4);
    fread(&v19, 4uLL, 1uLL, *(FILE **)(a1 + 56));
    fread(&v21, 1uLL, 4uLL, *(FILE **)(a1 + 56));
    if (__ptr == 1179011410 && v21 == 1163280727)
    {
      *(_DWORD *)(a1 + 8) = fileno(*(FILE **)(a1 + 56));
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      while (fread(&v20, 1uLL, 4uLL, *(FILE **)(a1 + 56)) == 4)
      {
        fread(&v19, 4uLL, 1uLL, *(FILE **)(a1 + 56));
        if (v20 == 544501094)
        {
          unsigned int v7 = v19;
          if (v19 >= 0x1C) {
            size_t v8 = 28;
          }
          else {
            size_t v8 = v19;
          }
          fread(v13, v8, 1uLL, *(FILE **)(a1 + 56));
          unsigned int v6 = v7 - v8;
          unsigned int v19 = v7 - v8;
          if (v8 > 0x13)
          {
            int v9 = v13[0];
            if (v13[0] == 65534)
            {
              int v9 = v18;
              v13[0] = v18;
            }
          }
          else
          {
            __int16 v16 = 0;
            unsigned __int16 v17 = v15;
            int v9 = v13[0];
          }
          int v10 = v13[1];
          *(_DWORD *)(a1 + 24) = v14;
          *(_DWORD *)(a1 + 28) = v10;
          unsigned int v11 = (v17 + 7) >> 3;
          *(_DWORD *)(a1 + 32) = v15 >> 3;
          *(_DWORD *)(a1 + 36) = v11;
          char v12 = 1;
          *(unsigned char *)(a1 + 41) = 1;
          if (v9 != 3)
          {
            if (v9 != 1) {
              goto LABEL_7;
            }
            char v12 = 0;
          }
          *(unsigned char *)(a1 + 40) = v12;
        }
        else if (v20 == 1635017060)
        {
          *(void *)(a1 + 16) = ftello(*(FILE **)(a1 + 56));
          unsigned int v6 = v19;
          *(void *)(a1 + 48) = v19 / (*(_DWORD *)(a1 + 32) * *(_DWORD *)(a1 + 28));
        }
        else
        {
          unsigned int v6 = v19;
        }
        fseek(*(FILE **)(a1 + 56), (v6 & 1) + v6, 1);
      }
      if (*(_DWORD *)(a1 + 24) && *(void *)(a1 + 16))
      {
        (*(void (**)(uint64_t, void))(*(void *)a1 + 16))(a1, 0);
        return a1;
      }
    }
LABEL_7:
    fclose(*(FILE **)(a1 + 56));
    *(void *)(a1 + 56) = 0;
  }
  *(_DWORD *)(a1 + 8) = -1;
  return a1;
}

void PCMReader_WAV::~PCMReader_WAV(PCMReader_WAV *this)
{
  *(void *)this = off_26FBB0;
  uint64_t v1 = (FILE *)*((void *)this + 7);
  if (v1) {
    fclose(v1);
  }
}

{
  FILE *v1;
  uint64_t vars8;

  *(void *)this = off_26FBB0;
  uint64_t v1 = (FILE *)*((void *)this + 7);
  if (v1) {
    fclose(v1);
  }

  operator delete();
}

uint64_t PCMReader_CAF::PCMReader_CAF(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_26FBE0;
  if (*(char *)(a2 + 23) >= 0) {
    unint64_t v3 = (const char *)a2;
  }
  else {
    unint64_t v3 = *(const char **)a2;
  }
  int v4 = fopen(v3, "rb");
  *(void *)(a1 + 56) = v4;
  if (v4)
  {
    unint64_t v20 = 0;
    fread(&__ptr, 1uLL, 4uLL, v4);
    fseek(*(FILE **)(a1 + 56), 4, 1);
    if (__ptr == 1717985635)
    {
      *(_DWORD *)(a1 + 8) = fileno(*(FILE **)(a1 + 56));
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      while (fread(&v21, 1uLL, 4uLL, *(FILE **)(a1 + 56)) == 4)
      {
        fread(&v20, 8uLL, 1uLL, *(FILE **)(a1 + 56));
        unint64_t v6 = v20;
        unint64_t v7 = bswap64(v20);
        unint64_t v20 = v7;
        if (v21 == 1668506980)
        {
          fread(&v14, 0x20uLL, 1uLL, *(FILE **)(a1 + 56));
          v7 -= 32;
          unint64_t v20 = v7;
          if (v15 != 1835233388) {
            goto LABEL_6;
          }
          int v8 = v16;
          unsigned int v9 = bswap32(v17);
          unsigned int v10 = bswap32(v18);
          unsigned int v11 = bswap32(v19);
          *(_DWORD *)(a1 + 24) = (int)COERCE_DOUBLE(bswap64(v14));
          *(_DWORD *)(a1 + 28) = v10;
          *(_DWORD *)(a1 + 32) = v9 / v10;
          *(_DWORD *)(a1 + 36) = (v11 + 7) >> 3;
          *(unsigned char *)(a1 + 40) = HIBYTE(v8) & 1;
          *(unsigned char *)(a1 + 41) = (v8 & 0x2000000) != 0;
        }
        else if (v21 == 1635017060)
        {
          fseek(*(FILE **)(a1 + 56), 4, 1);
          *(void *)(a1 + 16) = ftello(*(FILE **)(a1 + 56));
          if (v6 == -1)
          {
            fseek(*(FILE **)(a1 + 56), 0, 2);
            off_t v12 = ftello(*(FILE **)(a1 + 56));
            uint64_t v13 = *(void *)(a1 + 16);
            unint64_t v7 = v12 - v13;
            fseek(*(FILE **)(a1 + 56), v13, 0);
          }
          else
          {
            v7 -= 4;
          }
          unint64_t v20 = v7;
          *(void *)(a1 + 48) = v7 / (*(int *)(a1 + 32) * (uint64_t)*(int *)(a1 + 28));
        }
        fseek(*(FILE **)(a1 + 56), (v7 & 1) + v7, 1);
      }
      if (*(_DWORD *)(a1 + 24) && *(void *)(a1 + 16))
      {
        (*(void (**)(uint64_t, void))(*(void *)a1 + 16))(a1, 0);
        return a1;
      }
    }
LABEL_6:
    fclose(*(FILE **)(a1 + 56));
    *(void *)(a1 + 56) = 0;
  }
  *(_DWORD *)(a1 + 8) = -1;
  return a1;
}

void PCMReader_CAF::~PCMReader_CAF(PCMReader_CAF *this)
{
  *(void *)this = off_26FBE0;
  uint64_t v1 = (FILE *)*((void *)this + 7);
  if (v1) {
    fclose(v1);
  }
}

{
  FILE *v1;
  uint64_t vars8;

  *(void *)this = off_26FBE0;
  uint64_t v1 = (FILE *)*((void *)this + 7);
  if (v1) {
    fclose(v1);
  }

  operator delete();
}

const char *PCMFile::create_reader(char *a1)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  uint64_t v1 = strrchr(a1, 46);
  uint64_t v2 = v1;
  if (v1)
  {
    if (!strcasecmp(v1, ".wav")) {
      operator new();
    }
    if (!strcasecmp(v2, ".caf")) {
      operator new();
    }
    return 0;
  }
  return v2;
}

void sub_1D86A8()
{
}

uint64_t PCMFile::Writer::Writer(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = off_26FC10;
  uint64_t v4 = *((void *)a3 + 2);
  long long v5 = *a3;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(_OWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    if (v8 == 1 && **(unsigned char **)a2 == 45) {
      goto LABEL_18;
    }
    if (v8 == 4)
    {
      if (**(_DWORD **)a2 == 2002874925) {
        goto LABEL_18;
      }
      if (*(void *)(a2 + 8) == 4)
      {
        if (**(_DWORD **)a2 == 1986098989) {
          goto LABEL_18;
        }
        if (*(void *)(a2 + 8) == 4)
        {
          unint64_t v7 = *(unsigned char **)a2;
LABEL_15:
          BOOL v9 = *(_DWORD *)v7 == 1717658413;
          *(unsigned char *)(a1 + 48) = *(_DWORD *)v7 != 1717658413;
          if (!v9) {
            goto LABEL_21;
          }
LABEL_19:
          unsigned int v10 = __stdoutp;
          goto LABEL_25;
        }
      }
    }
  }
  else
  {
    int v6 = *(unsigned __int8 *)(a2 + 23);
    if (v6 == 1)
    {
      if (*(unsigned char *)a2 == 45) {
        goto LABEL_18;
      }
    }
    else if (v6 == 4)
    {
      if (*(_DWORD *)a2 != 1986098989 && *(_DWORD *)a2 != 2002874925)
      {
        unint64_t v7 = (unsigned char *)a2;
        goto LABEL_15;
      }
LABEL_18:
      *(unsigned char *)(a1 + 48) = 0;
      goto LABEL_19;
    }
  }
  *(unsigned char *)(a1 + 48) = 1;
LABEL_21:
  if (*(char *)(a2 + 23) >= 0) {
    unsigned int v11 = (const char *)a2;
  }
  else {
    unsigned int v11 = *(const char **)a2;
  }
  unsigned int v10 = fopen(v11, "wb");
LABEL_25:
  *(void *)(a1 + 8) = v10;
  return a1;
}

void sub_1D886C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void PCMFile::Writer::~Writer(PCMFile::Writer *this)
{
  *(void *)this = off_26FC10;
  uint64_t v2 = (FILE *)*((void *)this + 1);
  if (v2 && *((unsigned char *)this + 48)) {
    fclose(v2);
  }
  std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy((uint64_t)this + 56, *((char **)this + 8));
}

{
  uint64_t vars8;

  PCMFile::Writer::~Writer(this);

  operator delete();
}

size_t PCMFile::Writer::write_samples(PCMFile::Writer *this, size_t __nitems, const void *__ptr, int a4, int a5, float a6)
{
  *((void *)this + 5) += __nitems;
  if (*((_DWORD *)this + 6) != a4 || *((unsigned __int8 *)this + 32) != a5 || !*((unsigned char *)this + 33)) {
    operator new[]();
  }
  size_t v7 = a4;
  uint64_t v8 = (FILE *)*((void *)this + 1);

  return fwrite(__ptr, v7, __nitems, v8);
}

void sub_1D900C(uint64_t a1, ...)
{
  va_start(va, a1);
  std::__list_imp<char *>::clear((uint64_t *)va);
  operator delete[]();
}

uint64_t PCMWriter_WAV::PCMWriter_WAV(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = PCMFile::Writer::Writer(a1, a2, a3);
  *(void *)uint64_t v4 = off_26FC30;
  *(unsigned char *)(v4 + 33) = 1;
  long long v5 = *(FILE **)(v4 + 8);
  if (v5)
  {
    fwrite("RIFFxxxxWAVEfmt ", 1uLL, 0x10uLL, v5);
    if (*(unsigned char *)(a1 + 32))
    {
      int v6 = 0;
      __ptr[0] = 3;
      __int16 v20 = 0;
      int v7 = *(_DWORD *)(a1 + 24);
      size_t v8 = 18;
      int v9 = 1;
      int v10 = 18;
    }
    else
    {
      int v7 = *(_DWORD *)(a1 + 24);
      if (v7 < 3)
      {
        int v6 = 0;
        int v9 = 0;
        __ptr[0] = 1;
        size_t v8 = 16;
        int v10 = 16;
      }
      else
      {
        __ptr[0] = -2;
        __int16 v20 = 22;
        int v6 = 1;
        __int16 v23 = 1;
        int v10 = 40;
        size_t v8 = 26;
        int v9 = 1;
      }
    }
    int v14 = v10;
    int v11 = *(_DWORD *)(a1 + 16);
    __ptr[1] = *(_DWORD *)(a1 + 20);
    int v16 = v11;
    int v17 = v7 * v11;
    __int16 v18 = v7;
    __int16 v19 = 8 * v7;
    __int16 v21 = 8 * v7;
    int v22 = 0;
    fwrite(&v14, 4uLL, 1uLL, *(FILE **)(a1 + 8));
    fwrite(__ptr, v8, 1uLL, *(FILE **)(a1 + 8));
    if (v6)
    {
      fwrite(&unk_213B28, 1uLL, 0xEuLL, *(FILE **)(a1 + 8));
    }
    else if (!v9)
    {
      off_t v12 = 0;
      goto LABEL_12;
    }
    fwrite(&unk_213B37, 1uLL, 0xCuLL, *(FILE **)(a1 + 8));
    off_t v12 = ftello(*(FILE **)(a1 + 8)) - 4;
LABEL_12:
    *(void *)(a1 + 80) = v12;
    fwrite("dataxxxx", 1uLL, 8uLL, *(FILE **)(a1 + 8));
    *(void *)(a1 + 88) = ftello(*(FILE **)(a1 + 8)) - 4;
  }
  return a1;
}

void sub_1D922C(_Unwind_Exception *a1)
{
  PCMFile::Writer::~Writer(v1);
  _Unwind_Resume(a1);
}

void PCMWriter_WAV::~PCMWriter_WAV(PCMWriter_WAV *this)
{
  *(void *)this = off_26FC30;
  uint64_t v2 = (FILE *)*((void *)this + 1);
  if (v2)
  {
    if (*((void *)this + 9))
    {
      fwrite("cue ", 1uLL, 4uLL, v2);
      int v22 = *((_DWORD *)this + 18);
      int __ptr = (24 * v22) | 4;
      fwrite(&__ptr, 4uLL, 1uLL, *((FILE **)this + 1));
      fwrite(&v22, 4uLL, 1uLL, *((FILE **)this + 1));
      unint64_t v3 = (char *)*((void *)this + 7);
      uint64_t v4 = (char *)this + 64;
      if (v3 != (char *)this + 64)
      {
        int v5 = 0;
        do
        {
          int v19 = *((void *)v3 + 4);
          int v20 = v5;
          fwrite(&v20, 4uLL, 1uLL, *((FILE **)this + 1));
          fwrite(&v19, 4uLL, 1uLL, *((FILE **)this + 1));
          fwrite("data", 1uLL, 0xCuLL, *((FILE **)this + 1));
          fwrite(&v19, 4uLL, 1uLL, *((FILE **)this + 1));
          int v6 = (char *)*((void *)v3 + 1);
          if (v6)
          {
            do
            {
              int v7 = v6;
              int v6 = *(char **)v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              int v7 = (char *)*((void *)v3 + 2);
              BOOL v8 = *(void *)v7 == (void)v3;
              unint64_t v3 = v7;
            }
            while (!v8);
          }
          ++v5;
          unint64_t v3 = v7;
        }
        while (v7 != v4);
      }
      fwrite("LIST", 1uLL, 8uLL, *((FILE **)this + 1));
      off_t v9 = ftello(*((FILE **)this + 1));
      fwrite("adtl", 1uLL, 4uLL, *((FILE **)this + 1));
      int v10 = (char *)*((void *)this + 7);
      if (v10 != v4)
      {
        int v11 = 0;
        while (1)
        {
          if (v10[63] < 0) {
            uint64_t v12 = *((void *)v10 + 6);
          }
          else {
            LODWORD(v12) = v10[63];
          }
          int v19 = v11;
          int v20 = v12 + 5;
          fwrite("labl", 1uLL, 4uLL, *((FILE **)this + 1));
          fwrite(&v20, 4uLL, 1uLL, *((FILE **)this + 1));
          fwrite(&v19, 4uLL, 1uLL, *((FILE **)this + 1));
          if (v10[63] < 0)
          {
            uint64_t v13 = (const void *)*((void *)v10 + 5);
            uint64_t v14 = *((void *)v10 + 6);
          }
          else
          {
            uint64_t v13 = v10 + 40;
            uint64_t v14 = v10[63];
          }
          fwrite(v13, 1uLL, v14 + 1, *((FILE **)this + 1));
          int v15 = v10[63];
          if (v15 < 0) {
            break;
          }
          if ((v15 & 1) == 0) {
            goto LABEL_21;
          }
LABEL_22:
          int v16 = (char *)*((void *)v10 + 1);
          if (v16)
          {
            do
            {
              int v17 = v16;
              int v16 = *(char **)v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              int v17 = (char *)*((void *)v10 + 2);
              BOOL v8 = *(void *)v17 == (void)v10;
              int v10 = v17;
            }
            while (!v8);
          }
          ++v11;
          int v10 = v17;
          if (v17 == v4) {
            goto LABEL_31;
          }
        }
        if (*((void *)v10 + 6)) {
          goto LABEL_22;
        }
LABEL_21:
        fputc(0, *((FILE **)this + 1));
        goto LABEL_22;
      }
LABEL_31:
      int v20 = ftello(*((FILE **)this + 1)) - v9;
      fseeko(*((FILE **)this + 1), v9 - 4, 0);
      fwrite(&v20, 4uLL, 1uLL, *((FILE **)this + 1));
      fseek(*((FILE **)this + 1), 0, 2);
      uint64_t v2 = (FILE *)*((void *)this + 1);
    }
    int v22 = ftello(v2) - 8;
    fseek(*((FILE **)this + 1), 4, 0);
    fwrite(&v22, 4uLL, 1uLL, *((FILE **)this + 1));
    uint64_t v18 = *((void *)this + 10);
    if (v18)
    {
      int __ptr = *((void *)this + 5);
      fseek(*((FILE **)this + 1), v18, 0);
      fwrite(&__ptr, 4uLL, 1uLL, *((FILE **)this + 1));
    }
    int __ptr = *((_DWORD *)this + 6) * *((_DWORD *)this + 10);
    fseeko(*((FILE **)this + 1), *((void *)this + 11), 0);
    fwrite(&__ptr, 4uLL, 1uLL, *((FILE **)this + 1));
  }
  PCMFile::Writer::~Writer(this);
}

{
  uint64_t vars8;

  PCMWriter_WAV::~PCMWriter_WAV(this);

  operator delete();
}

uint64_t PCMWriter_CAF::PCMWriter_CAF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = PCMFile::Writer::Writer(a1, a2, (long long *)a3);
  *(void *)uint64_t v5 = off_26FC50;
  *(unsigned char *)(v5 + 33) = 1;
  int v6 = *(unsigned __int8 *)(a3 + 16);
  int v7 = *(unsigned __int8 *)(a3 + 17);
  unsigned int v8 = *(_DWORD *)(a3 + 8);
  unint64_t v10 = bswap64(COERCE_UNSIGNED_INT64((double)*(int *)a3));
  int v11 = 1835233388;
  int v12 = (v7 << 25) | (v6 << 24);
  unsigned int v13 = bswap32(v8);
  uint64_t v14 = 0x100000001000000;
  unsigned int v15 = bswap32(8 * v8);
  fwrite("caff", 1uLL, 8uLL, *(FILE **)(v5 + 8));
  fwrite("desc", 1uLL, 0xCuLL, *(FILE **)(a1 + 8));
  fwrite(&v10, 0x20uLL, 1uLL, *(FILE **)(a1 + 8));
  fwrite(&unk_213B70, 1uLL, 0x10uLL, *(FILE **)(a1 + 8));
  *(void *)(a1 + 80) = ftello(*(FILE **)(a1 + 8));
  return a1;
}

void sub_1D972C(_Unwind_Exception *a1)
{
  PCMFile::Writer::~Writer(v1);
  _Unwind_Resume(a1);
}

void PCMWriter_CAF::~PCMWriter_CAF(FILE **this)
{
  *this = (FILE *)off_26FC50;
  if (this[9])
  {
    off_t v2 = ftello(this[1]);
    unint64_t v3 = this[10];
    unint64_t v4 = v2 - (void)v3 + 4;
    fseeko(this[1], (off_t)(&v3[-1]._blksize + 1), 0);
    unint64_t __ptr = bswap64(v4);
    fwrite(&__ptr, 8uLL, 1uLL, this[1]);
    fseek(this[1], 0, 2);
    off_t v5 = ftello(this[1]);
    fwrite("strg", 1uLL, 0x10uLL, this[1]);
    int v6 = 0;
    std::string __p = 0;
    __dst = 0;
    uint64_t v30 = 0;
    int v7 = (FILE *)(this + 8);
    unsigned int v8 = this[7];
    do
    {
      LODWORD(v24) = bswap32(++v6);
      unint64_t v27 = bswap64((unsigned char *)__dst - (unsigned char *)__p);
      fwrite(&v24, 4uLL, 1uLL, this[1]);
      fwrite(&v27, 8uLL, 1uLL, this[1]);
      if (SHIBYTE(v8->_close) < 0)
      {
        p_lbfstd::string::size_type size = *(char **)&v8->_lbfsize;
        cookie = (char *)v8->_cookie;
      }
      else
      {
        p_lbfstd::string::size_type size = (char *)&v8->_lbfsize;
        cookie = (char *)HIBYTE(v8->_close);
      }
      std::vector<char>::__insert_with_size[abi:ne180100]<char const*,char const*>((uint64_t)&__p, (char *)__dst, p_lbfsize, &cookie[(void)p_lbfsize + 1], (int64_t)(cookie + 1));
      int v11 = *(FILE **)&v8->_r;
      if (v11)
      {
        do
        {
          int v12 = (FILE **)v11;
          int v11 = (FILE *)v11->_p;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v12 = *(FILE ***)&v8->_flags;
          BOOL v13 = *v12 == v8;
          unsigned int v8 = (FILE *)v12;
        }
        while (!v13);
      }
      unsigned int v8 = (FILE *)v12;
    }
    while (v12 != (FILE **)v7);
    fwrite(__p, 1uLL, (unsigned char *)__dst - (unsigned char *)__p, this[1]);
    off_t v14 = ftello(this[1]);
    unsigned int v15 = *((_DWORD *)this + 18);
    unint64_t v27 = bswap64(v14 - v5 - 12);
    unsigned int v26 = bswap32(v15);
    fseeko(this[1], v5 + 4, 0);
    fwrite(&v27, 8uLL, 1uLL, this[1]);
    fwrite(&v26, 4uLL, 1uLL, this[1]);
    fseek(this[1], 0, 2);
    int v16 = this[9];
    int v23 = 0;
    unint64_t v24 = bswap64(28 * (void)v16 + 8);
    unsigned int v25 = bswap32(v16);
    fwrite("mark", 1uLL, 4uLL, this[1]);
    fwrite(&v24, 8uLL, 1uLL, this[1]);
    fwrite(&v23, 4uLL, 1uLL, this[1]);
    fwrite(&v25, 4uLL, 1uLL, this[1]);
    int v17 = this[7];
    if (v17 != v7)
    {
      unsigned int v18 = 0;
      do
      {
        fwrite(&unk_213B92, 1uLL, 4uLL, this[1]);
        ++v18;
        unint64_t v22 = bswap64(COERCE_UNSIGNED_INT64((double)*(unint64_t *)&v17->_bf._size));
        unsigned int v21 = bswap32(v18);
        fwrite(&v22, 8uLL, 1uLL, this[1]);
        fwrite(&v21, 4uLL, 1uLL, this[1]);
        fwrite(&unk_213B97, 1uLL, 0xCuLL, this[1]);
        int v19 = *(FILE **)&v17->_r;
        if (v19)
        {
          do
          {
            int v20 = (FILE **)v19;
            int v19 = (FILE *)v19->_p;
          }
          while (v19);
        }
        else
        {
          do
          {
            int v20 = *(FILE ***)&v17->_flags;
            BOOL v13 = *v20 == v17;
            int v17 = (FILE *)v20;
          }
          while (!v13);
        }
        int v17 = (FILE *)v20;
      }
      while (v20 != (FILE **)v7);
    }
    if (__p)
    {
      __dst = __p;
      operator delete(__p);
    }
  }
  PCMFile::Writer::~Writer((PCMFile::Writer *)this);
}

{
  uint64_t vars8;

  PCMWriter_CAF::~PCMWriter_CAF(this);

  operator delete();
}

uint64_t PCMFile::create_writer(char *a1, uint64_t a2)
{
  int type = PCMFile::get_type(a1);

  return PCMFile::create_writer((uint64_t)a1, a2, type);
}

uint64_t PCMFile::create_writer(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 2:
      operator new();
    case 1:
      operator new();
    case 0:
      operator new();
  }
  return 0;
}

void sub_1D9C2C()
{
}

uint64_t PCMFile::get_type(char *a1)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  uint64_t v1 = strrchr(a1, 46);
  if (!v1) {
    return 1;
  }
  off_t v2 = v1;
  uint64_t result = strcasecmp(v1, ".raw");
  if (result)
  {
    if (!strcasecmp(v2, ".caf")) {
      return 2;
    }
    else {
      return 1;
    }
  }
  return result;
}

void PCMByteSwap<int>::process(uint64_t a1, _DWORD *a2, unsigned int *a3, uint64_t a4)
{
  for (; a4; --a4)
  {
    unsigned int v4 = *a3++;
    *a2++ = bswap32(v4);
  }
}

void PCMByteSwap<int>::~PCMByteSwap()
{
}

void PCMByteSwap<short>::process(uint64_t a1, _WORD *a2, unsigned __int16 *a3, uint64_t a4)
{
  for (; a4; --a4)
  {
    unsigned int v4 = *a3++;
    *a2++ = bswap32(v4) >> 16;
  }
}

float PCMScaleSample<float,float>::process(uint64_t a1, float *a2, float *a3, uint64_t a4)
{
  for (; a4; --a4)
  {
    float v4 = *a3++;
    float result = v4 * *(float *)(a1 + 8);
    *a2++ = result;
  }
  return result;
}

float PCMScaleSample<float,short>::process(uint64_t a1, float *a2, __int16 *a3, uint64_t a4)
{
  for (; a4; --a4)
  {
    int v4 = *a3++;
    float result = *(float *)(a1 + 8) * (float)v4;
    *a2++ = result;
  }
  return result;
}

void PCMScaleSample<int,short>::process(uint64_t a1, _DWORD *a2, unsigned __int16 *a3, uint64_t a4)
{
  for (; a4; --a4)
  {
    int v4 = *a3++;
    *a2++ = v4 << 16;
  }
}

uint64_t PCMScaleSample<float,int>::process(uint64_t result, float *a2, int *a3, uint64_t a4)
{
  if (a4)
  {
    double v4 = *(double *)(result + 8);
    do
    {
      int v5 = *a3++;
      float v6 = v4 * (double)v5;
      *a2++ = v6;
      --a4;
    }
    while (a4);
  }
  return result;
}

void PCMScaleSample<float,int>::~PCMScaleSample()
{
}

uint64_t PCMScaleSample<int,float>::process(uint64_t result, _DWORD *a2, float *a3, uint64_t a4)
{
  if (a4)
  {
    double v4 = *(double *)(result + 8);
    do
    {
      float v5 = *a3++;
      *a2++ = (int)(v4 * v5);
      --a4;
    }
    while (a4);
  }
  return result;
}

uint64_t PCMScaleSample<short,float>::process(uint64_t result, _WORD *a2, float *a3, uint64_t a4)
{
  if (a4)
  {
    float v4 = *(float *)(result + 8);
    do
    {
      float v5 = *a3++;
      *a2++ = (int)(float)(v5 * v4);
      --a4;
    }
    while (a4);
  }
  return result;
}

void PCMScaleSample<short,int>::process(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4)
{
  for (; a4; --a4)
  {
    __int16 v4 = *(_WORD *)(a3 + 2);
    a3 += 4;
    *a2++ = v4;
  }
}

uint64_t PCMDeinterleave<short>::process(uint64_t result, _WORD *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    __int16 v4 = (_WORD *)(a3 + 2 * *(void *)(result + 16));
    uint64_t v5 = 2 * *(void *)(result + 8);
    do
    {
      *a2++ = *v4;
      __int16 v4 = (_WORD *)((char *)v4 + v5);
      --a4;
    }
    while (a4);
  }
  return result;
}

void PCMDeinterleave<short>::~PCMDeinterleave()
{
}

uint64_t PCMDeinterleave<int>::process(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    __int16 v4 = (_DWORD *)(a3 + 4 * *(void *)(result + 16));
    uint64_t v5 = 4 * *(void *)(result + 8);
    do
    {
      *a2++ = *v4;
      __int16 v4 = (_DWORD *)((char *)v4 + v5);
      --a4;
    }
    while (a4);
  }
  return result;
}

void std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

char *std::vector<char>::__insert_with_size[abi:ne180100]<char const*,char const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    int v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    BOOL v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      int v17 = (char *)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
      int v17 = 0;
    }
    unint64_t v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    uint64_t v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      unint64_t v10 = *(char **)(a1 + 8);
      uint64_t v28 = v17;
    }
    uint64_t v30 = &v27[a5];
    BOOL v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    float v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }
  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    int v19 = &__src[a5];
    unsigned int v21 = *(char **)(a1 + 8);
LABEL_17:
    unint64_t v22 = &v5[a5];
    int v23 = &v21[-a5];
    unint64_t v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      unint64_t v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }
  int v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  unsigned int v21 = &v10[v20];
  *(void *)(a1 + 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void NeuralFEEspressoIO::NeuralFEEspressoIO(NeuralFEEspressoIO *this)
{
  *(void *)this = off_2701C0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  uint64_t v1 = (std::string *)((char *)this + 368);
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 46) = 0;
  off_t v2 = (std::string *)((char *)this + 560);
  *((void *)this + 70) = 0;
  *((void *)this + 72) = 0;
  *((void *)this + 71) = 0;
  unint64_t v3 = (std::string *)((char *)this + 752);
  *((void *)this + 94) = 0;
  *((void *)this + 96) = 0;
  *((void *)this + 95) = 0;
  __int16 v4 = (std::string *)((char *)this + 944);
  *((void *)this + 118) = 0;
  *((void *)this + 120) = 0;
  *((void *)this + 119) = 0;
  uint64_t v5 = (std::string *)((char *)this + 1136);
  *((void *)this + 144) = 0;
  *((void *)this + 142) = 0;
  *((void *)this + 143) = 0;
  float v6 = (std::string *)((char *)this + 1328);
  *((void *)this + 167) = 0;
  *((void *)this + 166) = 0;
  *((void *)this + 168) = 0;
  int v7 = (std::string *)((char *)this + 1520);
  *((void *)this + 191) = 0;
  *((void *)this + 190) = 0;
  *((void *)this + 192) = 0;
  unsigned int v8 = (std::string *)((char *)this + 1712);
  *((void *)this + 215) = 0;
  *((void *)this + 214) = 0;
  *((void *)this + 216) = 0;
  std::string::assign((std::string *)((char *)this + 176), "input");
  std::string::assign(v1, "input_length");
  std::string::assign(v2, "mel");
  std::string::assign(v3, "mel_length");
  std::string::assign(v4, "input_duration");
  std::string::assign(v5, "input_pitch");
  std::string::assign(v6, "input_energy");
  std::string::assign(v7, "input_speaker");
  std::string::assign(v8, "Identity");
}

void sub_1DA270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  if (v10[1735] < 0) {
    operator delete(*v19);
  }
  if (v10[1543] < 0) {
    operator delete(*v18);
  }
  if (v10[1351] < 0) {
    operator delete(*v17);
  }
  if (v10[1159] < 0) {
    operator delete(*v16);
  }
  if (v10[967] < 0) {
    operator delete(*v15);
  }
  if (v10[775] < 0) {
    operator delete(*v14);
  }
  if (v10[583] < 0) {
    operator delete(*v13);
  }
  if (v10[391] < 0) {
    operator delete(*v12);
  }
  if (v10[199] < 0) {
    operator delete(*v11);
  }
  _Unwind_Resume(a1);
}

void NeuralFEEspressoIO::bindIOs()
{
  int v0 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v62, "");
  if (v0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v9 = v63;
    unint64_t v10 = (const char *)v62[0];
    status_string = (const char *)espresso_get_status_string();
    uint64_t v12 = (const char *)v62;
    if (v9 < 0) {
      uint64_t v12 = v10;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v64, "%s Error: %d, %s", v12, v0, status_string);
    std::logic_error::logic_error(exception, &v64);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  int v1 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v60, "");
  if (v1)
  {
    BOOL v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v14 = v61;
    size_t v15 = (const char *)v60[0];
    size_t v16 = (const char *)espresso_get_status_string();
    int v17 = (const char *)v60;
    if (v14 < 0) {
      int v17 = v15;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v64, "%s Error: %d, %s", v17, v1, v16);
    std::logic_error::logic_error(v13, &v64);
  }
  if (v61 < 0) {
    operator delete(v60[0]);
  }
  int v2 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if (v2)
  {
    uint64_t v18 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v19 = v59;
    int64_t v20 = (void **)__p[0];
    unsigned int v21 = (const char *)espresso_get_status_string();
    unint64_t v22 = __p;
    if (v19 < 0) {
      unint64_t v22 = v20;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v64, "%s Error: %d, %s", (const char *)v22, v2, v21);
    std::logic_error::logic_error(v18, &v64);
  }
  if (v59 < 0) {
    operator delete(__p[0]);
  }
  int v3 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v56, "");
  if (v3)
  {
    int v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v24 = v57;
    int64_t v25 = (void **)v56[0];
    char v26 = (const char *)espresso_get_status_string();
    unint64_t v27 = v56;
    if (v24 < 0) {
      unint64_t v27 = v25;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v64, "%s Error: %d, %s", (const char *)v27, v3, v26);
    std::logic_error::logic_error(v23, &v64);
  }
  if (v57 < 0) {
    operator delete(v56[0]);
  }
  int v4 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v54, "");
  if (v4)
  {
    uint64_t v28 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v29 = v55;
    uint64_t v30 = (void **)v54[0];
    BOOL v31 = (const char *)espresso_get_status_string();
    float v32 = v54;
    if (v29 < 0) {
      float v32 = v30;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v64, "%s Error: %d, %s", (const char *)v32, v4, v31);
    std::logic_error::logic_error(v28, &v64);
  }
  if (v55 < 0) {
    operator delete(v54[0]);
  }
  int v5 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v52, "");
  if (v5)
  {
    float64x2_t v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v34 = v53;
    float64x2_t v35 = (void **)v52[0];
    uint64x2_t v36 = (const char *)espresso_get_status_string();
    float v37 = v52;
    if (v34 < 0) {
      float v37 = v35;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v64, "%s Error: %d, %s", (const char *)v37, v5, v36);
    std::logic_error::logic_error(v33, &v64);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  int v6 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v50, "");
  if (v6)
  {
    float v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v39 = v51;
    int64x2_t v40 = (void **)v50[0];
    float v41 = (const char *)espresso_get_status_string();
    int v42 = v50;
    if (v39 < 0) {
      int v42 = v40;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v64, "%s Error: %d, %s", (const char *)v42, v6, v41);
    std::logic_error::logic_error(v38, &v64);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  int v7 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v48, "");
  if (v7)
  {
    uint64_t v43 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v44 = v49;
    int v45 = (void **)v48[0];
    float v46 = (const char *)espresso_get_status_string();
    std::string::size_type v47 = v48;
    if (v44 < 0) {
      std::string::size_type v47 = v45;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v64, "%s Error: %d, %s", (const char *)v47, v7, v46);
    std::logic_error::logic_error(v43, &v64);
  }
  if (v49 < 0) {
    operator delete(v48[0]);
  }
}

void sub_1DA988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v19 - 49) < 0)
  {
    operator delete(*(void **)(v19 - 72));
    if ((v18 & 1) == 0)
    {
LABEL_6:
      if (a17 < 0) {
        operator delete(a12);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void NeuralFEEspressoIO::reshape_network(uint64_t a1)
{
  int v1 = (void *)(a1 + 176);
  if (*(char *)(a1 + 199) < 0) {
    int v1 = (void *)*v1;
  }
  uint64_t v56 = v1;
  int v2 = (void *)(a1 + 368);
  if (*(char *)(a1 + 391) < 0) {
    int v2 = (void *)*v2;
  }
  char v57 = v2;
  int v3 = (void *)(a1 + 560);
  if (*(char *)(a1 + 583) < 0) {
    int v3 = (void *)*v3;
  }
  int v58 = v3;
  int v4 = (void *)(a1 + 752);
  if (*(char *)(a1 + 775) < 0) {
    int v4 = (void *)*v4;
  }
  char v59 = v4;
  int v5 = (void *)(a1 + 944);
  if (*(char *)(a1 + 967) < 0) {
    int v5 = (void *)*v5;
  }
  float v60 = v5;
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 280);
  uint64_t v8 = *(void *)(a1 + 288);
  int v51 = *(void *)(a1 + 88);
  int v52 = v7;
  uint64_t v9 = *(void *)(a1 + 664);
  uint64_t v10 = *(void *)(a1 + 480);
  int v53 = *(void *)(a1 + 472);
  int v54 = v9;
  int v55 = *(void *)(a1 + 856);
  int v46 = v6;
  int v47 = v8;
  uint64_t v11 = *(void *)(a1 + 672);
  int v48 = v10;
  int v49 = v11;
  int v50 = *(void *)(a1 + 864);
  uint64_t v12 = *(void *)(a1 + 112);
  uint64_t v13 = *(void *)(a1 + 296);
  uint64_t v14 = *(void *)(a1 + 304);
  int v41 = *(void *)(a1 + 104);
  int v42 = v13;
  uint64_t v15 = *(void *)(a1 + 680);
  uint64_t v16 = *(void *)(a1 + 496);
  int v43 = *(void *)(a1 + 488);
  int v44 = v15;
  int v45 = *(void *)(a1 + 872);
  int v36 = v12;
  int v37 = v14;
  uint64_t v17 = *(void *)(a1 + 688);
  int v38 = v16;
  int v39 = v17;
  int v40 = *(void *)(a1 + 880);
  uint64_t v18 = *(void *)(a1 + 312);
  int v31 = *(void *)(a1 + 120);
  int v32 = v18;
  uint64_t v19 = *(void *)(a1 + 696);
  int v33 = *(void *)(a1 + 504);
  int v34 = v19;
  int v35 = *(void *)(a1 + 888);
  int v30 = 2;
  long long v29 = xmmword_213DD0;
  int v20 = espresso_network_change_input_blob_shapes_seq_rank();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to reshape network");
  if (v20)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v22 = v27;
    int v23 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    int64_t v25 = __p;
    if (v22 < 0) {
      int64_t v25 = v23;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v28, "%s Error: %d, %s", (const char *)v25, v20, status_string);
    std::logic_error::logic_error(exception, &v28);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1DADC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0) {
        operator delete(a13);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void NeuralFEEspressoIO::declare_output()
{
  int v0 = espresso_network_declare_output();
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if (v0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v2 = v7;
    int v3 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    int v5 = __p;
    if (v2 < 0) {
      int v5 = v3;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v8, "%s Error: %d, %s", (const char *)v5, v0, status_string);
    std::logic_error::logic_error(exception, &v8);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1DAEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0) {
        operator delete(a13);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

uint64_t NeuralFEEspressoIO::get_loss(NeuralFEEspressoIO *this)
{
  return (uint64_t)this + 1544;
}

void SpeakerNeuralFEEspressoIO::SpeakerNeuralFEEspressoIO(SpeakerNeuralFEEspressoIO *this, int a2, int a3)
{
  NeuralFEEspressoIO::NeuralFEEspressoIO(this);
  *(void *)uint64_t v5 = off_2701F8;
  *(void *)(v5 + 1904) = 0;
  *(void *)(v5 + 1920) = 0;
  *(void *)(v5 + 1912) = 0;
  *(_DWORD *)(v5 + 1928) = a2;
  *(_DWORD *)(v5 + 1932) = a3;
  std::string::assign((std::string *)(v5 + 1904), "input_speaker");
}

void sub_1DAFC8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 1927) < 0) {
    operator delete(*v2);
  }
  NeuralFEEspressoIO::~NeuralFEEspressoIO((void **)v1);
  _Unwind_Resume(a1);
}

void NeuralFEEspressoIO::~NeuralFEEspressoIO(void **this)
{
  *this = off_2701C0;
  if (*((char *)this + 1735) < 0) {
    operator delete(this[214]);
  }
  if (*((char *)this + 1543) < 0) {
    operator delete(this[190]);
  }
  if (*((char *)this + 1351) < 0) {
    operator delete(this[166]);
  }
  if (*((char *)this + 1159) < 0) {
    operator delete(this[142]);
  }
  if (*((char *)this + 967) < 0) {
    operator delete(this[118]);
  }
  if (*((char *)this + 775) < 0) {
    operator delete(this[94]);
  }
  if (*((char *)this + 583) < 0) {
    operator delete(this[70]);
  }
  if (*((char *)this + 391) < 0) {
    operator delete(this[46]);
  }
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
}

void SpeakerNeuralFEEspressoIO::bindIOs()
{
  NeuralFEEspressoIO::bindIOs();
  int v0 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if (v0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v2 = v7;
    int v3 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    uint64_t v5 = __p;
    if (v2 < 0) {
      uint64_t v5 = v3;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v8, "%s Error: %d, %s", (const char *)v5, v0, status_string);
    std::logic_error::logic_error(exception, &v8);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1DB1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0) {
        operator delete(a13);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void SpeakerNeuralFEEspressoIO::preset_buffer(SpeakerNeuralFEEspressoIO *this)
{
  unint64_t v2 = *((int *)this + 482);
  float v3 = (float)*((int *)this + 483);
  std::vector<float>::vector(&__p, v2, &v3);
  memcpy(*((void **)this + 217), __p, v5 - (unsigned char *)__p);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
}

void WaveRNNEspressoIO::WaveRNNEspressoIO(WaveRNNEspressoIO *this)
{
  *(void *)this = off_270230;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  uint64_t v1 = (std::string *)((char *)this + 368);
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 46) = 0;
  unint64_t v2 = (std::string *)((char *)this + 560);
  *((void *)this + 70) = 0;
  *((void *)this + 72) = 0;
  *((void *)this + 71) = 0;
  float v3 = (std::string *)((char *)this + 752);
  *((void *)this + 94) = 0;
  *((void *)this + 96) = 0;
  *((void *)this + 95) = 0;
  int v4 = (std::string *)((char *)this + 944);
  *((void *)this + 118) = 0;
  *((void *)this + 120) = 0;
  *((void *)this + 119) = 0;
  uint64_t v5 = (std::string *)((char *)this + 1136);
  *((void *)this + 144) = 0;
  *((void *)this + 142) = 0;
  *((void *)this + 143) = 0;
  std::string::assign((std::string *)((char *)this + 176), "input_state");
  std::string::assign(v1, "input");
  std::string::assign(v2, "input_coarse_groundtruth");
  std::string::assign(v3, "input_fine_groundtruth");
  std::string::assign(v4, "Identity_1");
  std::string::assign(v5, "Identity");
}

void sub_1DB378(_Unwind_Exception *exception_object)
{
  if (v1[1159] < 0) {
    operator delete(*v7);
  }
  if (v1[967] < 0) {
    operator delete(*v6);
  }
  if (v1[775] < 0) {
    operator delete(*v5);
  }
  if (v1[583] < 0) {
    operator delete(*v4);
  }
  if (v1[391] < 0) {
    operator delete(*v3);
  }
  if (v1[199] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void WaveRNNEspressoIO::bindIOs()
{
  int v0 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v46, "");
  if (v0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v7 = v47;
    std::string v8 = (const char *)v46[0];
    status_string = (const char *)espresso_get_status_string();
    uint64_t v10 = (const char *)v46;
    if (v7 < 0) {
      uint64_t v10 = v8;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v48, "%s Error: %d, %s", v10, v0, status_string);
    std::logic_error::logic_error(exception, &v48);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  int v1 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v44, "");
  if (v1)
  {
    uint64_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v12 = v45;
    uint64_t v13 = (const char *)v44[0];
    uint64_t v14 = (const char *)espresso_get_status_string();
    uint64_t v15 = (const char *)v44;
    if (v12 < 0) {
      uint64_t v15 = v13;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v48, "%s Error: %d, %s", v15, v1, v14);
    std::logic_error::logic_error(v11, &v48);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  int v2 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if (v2)
  {
    uint64_t v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v17 = v43;
    uint64_t v18 = (void **)__p[0];
    uint64_t v19 = (const char *)espresso_get_status_string();
    int v20 = __p;
    if (v17 < 0) {
      int v20 = v18;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v48, "%s Error: %d, %s", (const char *)v20, v2, v19);
    std::logic_error::logic_error(v16, &v48);
  }
  if (v43 < 0) {
    operator delete(__p[0]);
  }
  int v3 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v40, "");
  if (v3)
  {
    unsigned int v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v22 = v41;
    int v23 = (void **)v40[0];
    int v24 = (const char *)espresso_get_status_string();
    int v25 = v40;
    if (v22 < 0) {
      int v25 = v23;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v48, "%s Error: %d, %s", (const char *)v25, v3, v24);
    std::logic_error::logic_error(v21, &v48);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  int v4 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v38, "");
  if (v4)
  {
    char v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v27 = v39;
    std::string v28 = (void **)v38[0];
    long long v29 = (const char *)espresso_get_status_string();
    int v30 = v38;
    if (v27 < 0) {
      int v30 = v28;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v48, "%s Error: %d, %s", (const char *)v30, v4, v29);
    std::logic_error::logic_error(v26, &v48);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  int v5 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v36, "");
  if (v5)
  {
    int v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v32 = v37;
    int v33 = (void **)v36[0];
    int v34 = (const char *)espresso_get_status_string();
    int v35 = v36;
    if (v32 < 0) {
      int v35 = v33;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v48, "%s Error: %d, %s", (const char *)v35, v5, v34);
    std::logic_error::logic_error(v31, &v48);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
}

void sub_1DB8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v19 - 33) < 0)
  {
    operator delete(*(void **)(v19 - 56));
    if ((v18 & 1) == 0)
    {
LABEL_6:
      if (a17 < 0) {
        operator delete(a12);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void WaveRNNEspressoIO::declare_output()
{
  int v0 = espresso_network_declare_output();
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if (v0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v3 = v15;
    int v4 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    uint64_t v6 = __p;
    if (v3 < 0) {
      uint64_t v6 = v4;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v16, "%s Error: %d, %s", (const char *)v6, v0, status_string);
    std::logic_error::logic_error(exception, &v16);
  }
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  int v1 = espresso_network_declare_output();
  std::string::basic_string[abi:ne180100]<0>(v12, "");
  if (v1)
  {
    int v7 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v8 = v13;
    uint64_t v9 = (void **)v12[0];
    uint64_t v10 = (const char *)espresso_get_status_string();
    uint64_t v11 = v12;
    if (v8 < 0) {
      uint64_t v11 = v9;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v16, "%s Error: %d, %s", (const char *)v11, v1, v10);
    std::logic_error::logic_error(v7, &v16);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

void sub_1DBBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v19 - 33) < 0)
  {
    operator delete(*(void **)(v19 - 56));
    if ((v18 & 1) == 0)
    {
LABEL_6:
      if (a17 < 0) {
        operator delete(a12);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t WaveRNNEspressoIO::get_loss(WaveRNNEspressoIO *this)
{
  return (uint64_t)this + 776;
}

void *TrainingData::copy_espresso_buffer_to_data(const void **a1, void **a2)
{
  unint64_t v4 = 1;
  for (uint64_t i = 2; i != 6; ++i)
    v4 *= (void)a1[i];
  std::vector<float>::resize((uint64_t)a2, v4);
  uint64_t v6 = *a2;
  int v7 = *a1;

  return memcpy(v6, v7, 4 * v4);
}

uint64_t BatchNeuralFETrainData::BatchNeuralFETrainData(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  int v3 = (uint64_t *)(a1 + 176);
  *(_OWORD *)(a1 + 224) = 0u;
  int v53 = (void **)(a1 + 224);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 336) = 0;
  uint64_t v4 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v6 = 0;
    int v54 = (uint64_t *)(a1 + 200);
    int v55 = (uint64_t *)(a1 + 152);
    uint64_t v51 = a1 + 240;
    int v52 = (void **)(a1 + 248);
    uint64_t v50 = a1 + 264;
    do
    {
      uint64_t v7 = v4 + 152 * v6;
      unint64_t v8 = *(void *)(a1 + 160);
      if (v8 >= *(void *)(a1 + 168))
      {
        uint64_t v9 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v55, v7);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v55, v7);
        uint64_t v9 = v8 + 24;
      }
      *(void *)(a1 + 160) = v9;
      uint64_t v10 = (uint64_t *)(*a2 + 152 * v6 + 24);
      unint64_t v11 = *(void *)(a1 + 184);
      if (v11 >= *(void *)(a1 + 192))
      {
        uint64_t v12 = std::vector<std::vector<std::vector<float>>>::__push_back_slow_path<std::vector<std::vector<float>> const&>(v3, v10);
      }
      else
      {
        std::vector<std::vector<std::vector<float>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<float>> const&>((uint64_t)v3, v10);
        uint64_t v12 = v11 + 24;
      }
      *(void *)(a1 + 184) = v12;
      uint64_t v13 = *a2 + 152 * v6 + 48;
      unint64_t v14 = *(void *)(a1 + 208);
      if (v14 >= *(void *)(a1 + 216))
      {
        uint64_t v15 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v54, v13);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v54, v13);
        uint64_t v15 = v14 + 24;
      }
      *(void *)(a1 + 208) = v15;
      std::string v16 = (_DWORD *)(*a2 + 152 * v6 + 72);
      int v18 = *(char **)(a1 + 232);
      unint64_t v17 = *(void *)(a1 + 240);
      if ((unint64_t)v18 >= v17)
      {
        int v20 = (char *)*v53;
        uint64_t v21 = (v18 - (unsigned char *)*v53) >> 2;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62) {
          goto LABEL_55;
        }
        uint64_t v23 = v17 - (void)v20;
        if (v23 >> 1 > v22) {
          unint64_t v22 = v23 >> 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v51, v24);
          int v20 = *(char **)(a1 + 224);
          int v18 = *(char **)(a1 + 232);
        }
        else
        {
          int v25 = 0;
        }
        char v26 = &v25[4 * v21];
        *(_DWORD *)char v26 = *v16;
        uint64_t v19 = v26 + 4;
        while (v18 != v20)
        {
          int v27 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *((_DWORD *)v26 - 1) = v27;
          v26 -= 4;
        }
        *(void *)(a1 + 224) = v26;
        *(void *)(a1 + 232) = v19;
        *(void *)(a1 + 240) = &v25[4 * v24];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(_DWORD *)int v18 = *v16;
        uint64_t v19 = v18 + 4;
      }
      *(void *)(a1 + 232) = v19;
      std::string v28 = (_DWORD *)(*a2 + 152 * v6 + 76);
      int v30 = *(char **)(a1 + 256);
      unint64_t v29 = *(void *)(a1 + 264);
      if ((unint64_t)v30 >= v29)
      {
        int v32 = (char *)*v52;
        uint64_t v33 = (v30 - (unsigned char *)*v52) >> 2;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 62) {
LABEL_55:
        }
          std::vector<float>::__throw_length_error[abi:ne180100]();
        uint64_t v35 = v29 - (void)v32;
        if (v35 >> 1 > v34) {
          unint64_t v34 = v35 >> 1;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v34;
        }
        if (v36)
        {
          char v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v50, v36);
          int v32 = *(char **)(a1 + 248);
          int v30 = *(char **)(a1 + 256);
        }
        else
        {
          char v37 = 0;
        }
        int v38 = &v37[4 * v33];
        *(_DWORD *)int v38 = *v28;
        int v31 = v38 + 4;
        while (v30 != v32)
        {
          int v39 = *((_DWORD *)v30 - 1);
          v30 -= 4;
          *((_DWORD *)v38 - 1) = v39;
          v38 -= 4;
        }
        *(void *)(a1 + 248) = v38;
        *(void *)(a1 + 256) = v31;
        *(void *)(a1 + 264) = &v37[4 * v36];
        if (v32) {
          operator delete(v32);
        }
      }
      else
      {
        *(_DWORD *)int v30 = *v28;
        int v31 = v30 + 4;
      }
      *(void *)(a1 + 256) = v31;
      uint64_t v40 = *a2 + 152 * v6 + 80;
      unint64_t v41 = *(void *)(a1 + 280);
      if (v41 >= *(void *)(a1 + 288))
      {
        uint64_t v42 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)(a1 + 272), v40);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>(a1 + 272, v40);
        uint64_t v42 = v41 + 24;
      }
      *(void *)(a1 + 280) = v42;
      uint64_t v43 = *a2 + 152 * v6 + 104;
      unint64_t v44 = *(void *)(a1 + 304);
      if (v44 >= *(void *)(a1 + 312))
      {
        uint64_t v45 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)(a1 + 296), v43);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>(a1 + 296, v43);
        uint64_t v45 = v44 + 24;
      }
      *(void *)(a1 + 304) = v45;
      uint64_t v46 = *a2 + 152 * v6 + 128;
      unint64_t v47 = *(void *)(a1 + 328);
      if (v47 >= *(void *)(a1 + 336))
      {
        uint64_t v48 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)(a1 + 320), v46);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>(a1 + 320, v46);
        uint64_t v48 = v47 + 24;
      }
      *(void *)(a1 + 328) = v48;
      ++v6;
      uint64_t v4 = *a2;
    }
    while (0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 3) > v6);
  }
  return a1;
}

void sub_1DC0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, void **a14, void **a15, void **a16)
{
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&a16);
  int v18 = *a12;
  if (*a12)
  {
    *((void *)v16 + 32) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *a13;
  if (*a13)
  {
    *((void *)v16 + 29) = v19;
    operator delete(v19);
  }
  a16 = a14;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::vector<std::vector<std::vector<double>>>::__destroy_vector::operator()[abi:ne180100](&a16);
  a16 = a15;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&a16);
  NeuralFETrainData::~NeuralFETrainData(v16);
  _Unwind_Resume(a1);
}

void NeuralFETrainData::~NeuralFETrainData(NeuralFETrainData *this)
{
  int v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 7) = v5;
    operator delete(v5);
  }
  uint64_t v7 = (void **)((char *)this + 24);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  unint64_t v6 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v6;
    operator delete(v6);
  }
}

uint64_t BatchWaveRNNTrainData::BatchWaveRNNTrainData(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  int v3 = (uint64_t *)(a1 + 104);
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v4 = (uint64_t *)(a1 + 152);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  uint64_t v5 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 72;
    do
    {
      uint64_t v9 = v5 + v8 - 72;
      unint64_t v10 = *(void *)(a1 + 112);
      if (v10 >= *(void *)(a1 + 120))
      {
        uint64_t v11 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v3, v9);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v3, v9);
        uint64_t v11 = v10 + 24;
      }
      *(void *)(a1 + 112) = v11;
      uint64_t v12 = (uint64_t *)(*a2 + v8 - 48);
      unint64_t v13 = *(void *)(a1 + 136);
      if (v13 >= *(void *)(a1 + 144))
      {
        uint64_t v14 = std::vector<std::vector<std::vector<float>>>::__push_back_slow_path<std::vector<std::vector<float>> const&>((uint64_t *)(a1 + 128), v12);
      }
      else
      {
        std::vector<std::vector<std::vector<float>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<float>> const&>(a1 + 128, v12);
        uint64_t v14 = v13 + 24;
      }
      *(void *)(a1 + 136) = v14;
      uint64_t v15 = *a2 + v8 - 24;
      unint64_t v16 = *(void *)(a1 + 160);
      if (v16 >= *(void *)(a1 + 168))
      {
        uint64_t v17 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v4, v15);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v4, v15);
        uint64_t v17 = v16 + 24;
      }
      *(void *)(a1 + 160) = v17;
      uint64_t v18 = *a2 + v8;
      unint64_t v19 = *(void *)(a1 + 184);
      if (v19 >= *(void *)(a1 + 192))
      {
        uint64_t v20 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)(a1 + 176), v18);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>(a1 + 176, v18);
        uint64_t v20 = v19 + 24;
      }
      *(void *)(a1 + 184) = v20;
      ++v7;
      uint64_t v5 = *a2;
      v8 += 104;
    }
    while (0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3) > v7);
  }
  return a1;
}

void sub_1DC370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::vector<std::vector<double>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  WaveRNNTrainData::~WaveRNNTrainData(v2);
  _Unwind_Resume(a1);
}

void WaveRNNTrainData::~WaveRNNTrainData(WaveRNNTrainData *this)
{
  int v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  uint64_t v5 = (void **)((char *)this + 24);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

uint64_t DataFeeder::DataFeeder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &off_26F8C0;
  uint64_t v7 = *a4;
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a4 + 8);
  *(void *)(a1 + 24) = v7;
  if (*((char *)a4 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), (const std::string::value_type *)a4[2], a4[3]);
  }
  else
  {
    long long v8 = *((_OWORD *)a4 + 1);
    *(void *)(a1 + 56) = a4[4];
    *(_OWORD *)(a1 + 40) = v8;
  }
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v9 = (void **)(a1 + 88);
  *(_OWORD *)(a1 + 112) = 0u;
  unint64_t v10 = (void **)(a1 + 112);
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 136) = 1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*v9);
    }
  }
  else
  {
    std::string v13 = *(std::string *)a2;
  }
  *(_OWORD *)uint64_t v9 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(void *)(a1 + 104) = *((void *)&v13.__r_.__value_.__l + 2);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v13 = *(std::string *)a3;
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*v10);
  }
  *(_OWORD *)unint64_t v10 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(void *)(a1 + 128) = *((void *)&v13.__r_.__value_.__l + 2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "metadata_mel.json");
  if (*(char *)(a1 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a1 + 88), *(void *)(a1 + 96));
  }
  else
  {
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = *(_OWORD *)v9;
    v13.__r_.__value_.__r.__words[2] = *(void *)(a1 + 104);
  }
  boost::filesystem::path::append_v3(&v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  TrainingUtils::read_metadata_from_file((const char *)&v13, (uint64_t *)&__p);
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vdeallocate((void **)(a1 + 64));
  *(std::string *)(a1 + 64) = __p;
  memset(&__p, 0, sizeof(__p));
  p_p = &__p;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  *(_DWORD *)(a1 + 136) = 2020;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1DC62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 + 135) < 0) {
    operator delete(*v24);
  }
  if (*(char *)(v21 + 111) < 0) {
    operator delete(*v23);
  }
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (*(char *)(v21 + 63) < 0) {
    operator delete(*v22);
  }
  char v26 = *(std::__shared_weak_count **)(v21 + 16);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

uint64_t NeuralFEDataFeeder::NeuralFEDataFeeder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = DataFeeder::DataFeeder(a1, a2, a3, (uint64_t *)a4);
  *(void *)uint64_t v6 = &off_270268;
  char v7 = *(unsigned char *)(a4 + 8);
  *(void *)(v6 + 144) = *(void *)a4;
  long long v8 = (int *)(v6 + 144);
  *(unsigned char *)(v6 + 152) = v7;
  if (*(char *)(a4 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 160), *(const std::string::value_type **)(a4 + 16), *(void *)(a4 + 24));
  }
  else
  {
    long long v9 = *(_OWORD *)(a4 + 16);
    *(void *)(v6 + 176) = *(void *)(a4 + 32);
    *(_OWORD *)(v6 + 160) = v9;
  }
  uint64_t v10 = *(void *)(a4 + 40);
  int v11 = *(_DWORD *)(a4 + 48);
  *(void *)(a1 + 208) = 0;
  uint64_t v12 = a1 + 208;
  *(void *)(a1 + 200) = a1 + 208;
  *(_DWORD *)(a1 + 192) = v11;
  *(void *)(a1 + 184) = v10;
  *(void *)(a1 + 216) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "symmap.json");
  if (*(char *)(a1 + 135) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a1 + 112), *(void *)(a1 + 120));
  }
  else {
    std::string v21 = *(std::string *)(a1 + 112);
  }
  boost::filesystem::path::append_v3(&v21, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  TrainingUtils::read_json_from_file((const char *)&v21, (uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,int>,std::map<std::string,int>,0>((uint64_t)v18, &__p);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a1 + 200, *(char **)(a1 + 208));
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  *(void *)(a1 + 200) = __p.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 208) = size;
  std::string::size_type v14 = __p.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 216) = *((void *)&__p.__r_.__value_.__l + 2);
  if (v14)
  {
    *(void *)(size + 16) = v12;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type size = 0;
  }
  else
  {
    *(void *)(a1 + 200) = v12;
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&__p, (char *)size);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v19, v18[0]);
  if ((*(_DWORD *)(a1 + 192) & 0x80000000) != 0) {
    _ZNSt3__115allocate_sharedB8ne180100I18NeuralFEEspressoIONS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
  }
  else {
    std::allocate_shared[abi:ne180100]<SpeakerNeuralFEEspressoIO,std::allocator<SpeakerNeuralFEEspressoIO>,int &,int &,void>(v8, (int *)(a1 + 192), &__p);
  }
  long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  unint64_t v16 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v15;
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1DC8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(v25, *(char **)(v23 + 208));
  if (*(char *)(v23 + 183) < 0) {
    operator delete(*v24);
  }
  DataFeeder::~DataFeeder((void **)v23);
  _Unwind_Resume(a1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,int>,std::map<std::string,int>,0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::map<std::string,int>,0>(a1, (uint64_t)a2);
}

void sub_1DC994(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void DataFeeder::~DataFeeder(void **this)
{
  *this = &off_26F8C0;
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  int v3 = this + 8;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  int v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t NeuralFEDataFeeder::preset_buffer(NeuralFEDataFeeder *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t NeuralFEDataFeeder::reset(NeuralFEDataFeeder *this)
{
  uint64_t result = std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &>(*((void *)this + 8), *((void *)this + 9), (uint64_t)this + 136);
  *((_DWORD *)this + 35) = 0;
  return result;
}

void NeuralFEDataFeeder::getData(NeuralFEDataFeeder *this, uint64_t a2)
{
  uint64_t v4 = (const void *)*((void *)this + 1);
  if (!v4)
  {
    uint64_t v5 = 0;
    goto LABEL_6;
  }
  if (!v5)
  {
LABEL_6:
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  uint64_t v7 = *((int *)this + 36);
  if (v7 + *((int *)this + 35) > (unint64_t)((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 4))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&v12, "Data is not enough.");
    std::logic_error::logic_error(exception, &v12);
  }
  memset(v13, 0, sizeof(v13));
  if ((int)v7 >= 1) {
    NeuralFEDataFeeder::fetch_data((uint64_t)this, (char *)(*((void *)this + 8) + 16 * *((int *)this + 35)));
  }
  NeuralFEDataFeeder::batching_data((uint64_t)this, v13);
  v11[0] = v5;
  v11[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NeuralFEDataFeeder::convert_to_espresso_data((uint64_t)this, a2, v13, (uint64_t)v11);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  int v8 = *((_DWORD *)this + 36);
  int v9 = *((_DWORD *)this + 35) + v8;
  *((_DWORD *)this + 35) = v9;
  if (v9 + v8 >= (unint64_t)((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 4)) {
    (**(void (***)(NeuralFEDataFeeder *))this)(this);
  }
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
  std::vector<NeuralFETrainData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1DCD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void NeuralFEDataFeeder::fetch_data(uint64_t a1, char *a2)
{
  uint64_t v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "utterance_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v4, &v22);
  uint64_t v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "transcription");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v5, &v21);
  uint64_t v6 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "phone_duration");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(v6, &v20);
  uint64_t v7 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "phone_pitch");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(v7, &v19);
  int v8 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "phone_energy");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(v8, &v18);
  std::string::basic_string[abi:ne180100]<0>(&__p, "mel_dim");
  LODWORD(v16.__r_.__value_.__l.__data_) = 80;
  int v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&__p.__r_.__value_.__l.__data_, (unsigned int *)&v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, "mel");
  if (*(char *)(a1 + 111) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(a1 + 88), *(void *)(a1 + 96));
  }
  else {
    std::string v16 = *(std::string *)(a1 + 88);
  }
  boost::filesystem::path::append_v3(&v16, &v15);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v22.__r_.__value_.__l.__size_;
  }
  int v11 = &v13;
  std::string::basic_string[abi:ne180100]((uint64_t)&v13, size + 4);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v12 = &v22;
    }
    else {
      std::string v12 = (std::string *)v22.__r_.__value_.__r.__words[0];
    }
    memmove(v11, v12, size);
  }
  strcpy((char *)v11 + size, ".mel");
  std::string v14 = v13;
  memset(&v13, 0, sizeof(v13));
  boost::filesystem::path::append_v3(&v16, &v14);
  std::string __p = v16;
  memset(&v16, 0, sizeof(v16));
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  DataFeeder::load_vector_from_file<float>(&v16);
  InferenceEngine::DataUtils::reshape_1d_to_2d<float>((uint64_t *)&v16, v9, (uint64_t *)&v15);
  std::string::basic_string[abi:ne180100]<0>(&v13, " ");
  NeuralFEDataFeeder::split_tokens_from_string((uint64_t)&v21, (uint64_t *)&v13, (unint64_t)&v14);
}

void sub_1DD314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a43) {
    operator delete(a43);
  }
  if (a46) {
    operator delete(a46);
  }
  int v49 = *(void **)(v47 - 168);
  if (v49)
  {
    *(void *)(v47 - 160) = v49;
    operator delete(v49);
  }
  if (*(char *)(v47 - 121) < 0) {
    operator delete(*(void **)(v47 - 144));
  }
  if (*(char *)(v47 - 97) < 0) {
    operator delete(*(void **)(v47 - 120));
  }
  _Unwind_Resume(exception_object);
}

void NeuralFEDataFeeder::batching_data(uint64_t a1, uint64_t *a2)
{
  int v2 = (void *)*a2;
  int v3 = (void *)a2[1];
  if (v3 == (void *)*a2) {
    NeuralFEDataFeeder::batching_data();
  }
  unint64_t v4 = (int)((uint64_t)(*(void *)(v2[3] + 8) - *(void *)v2[3]) >> 2);
  uint64_t v5 = v2 + 10;
  uint64_t v6 = *(int *)(a1 + 184);
  uint64_t v7 = *(int *)(a1 + 188);
  do
  {
    unint64_t v8 = v6 - ((uint64_t)(*(v5 - 9) - *(v5 - 10)) >> 2);
    LODWORD(v25[0]) = 0;
    std::vector<float>::vector(&v26, v8, v25);
    std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)(v5 - 10), *(v5 - 9), v26, v27, (v27 - v26) >> 2);
    LODWORD(v23) = 0;
    std::vector<float>::vector(v25, v4, &v23);
    std::vector<std::vector<float>>::vector(&v23, v7 + 0x5555555555555555 * ((uint64_t)(*(v5 - 6) - *(v5 - 7)) >> 3), (uint64_t)v25);
    std::vector<std::vector<float>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(v5 - 7, (__n128 *)*(v5 - 6), v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3));
    unint64_t v9 = v6 - ((uint64_t)(v5[1] - *v5) >> 2);
    LODWORD(v19) = 0;
    std::vector<float>::vector(&v21, v9, &v19);
    std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)v5, v5[1], (char *)v21, v22, (v22 - (unsigned char *)v21) >> 2);
    unint64_t v10 = v6 - ((uint64_t)(v5[4] - v5[3]) >> 2);
    LODWORD(__p) = 0;
    std::vector<float>::vector(&v19, v10, &__p);
    std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)(v5 + 3), v5[4], (char *)v19, v20, (v20 - (unsigned char *)v19) >> 2);
    unint64_t v11 = v6 - ((uint64_t)(v5[7] - v5[6]) >> 2);
    int v16 = 0;
    std::vector<float>::vector(&__p, v11, &v16);
    std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)(v5 + 6), v5[7], (char *)__p, v18, (v18 - (unsigned char *)__p) >> 2);
    if (v6 != (uint64_t)(*(v5 - 9) - *(v5 - 10)) >> 2)
    {
      int v14 = 323;
      std::string v15 = "entry.phone_index.size() == max_input_length";
      goto LABEL_27;
    }
    std::string v12 = (void *)*(v5 - 7);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(v5 - 6) - (void)v12) >> 3) != v7)
    {
      int v14 = 324;
      std::string v15 = "entry.mel_2d.size() == max_mel_length";
      goto LABEL_27;
    }
    if (v4 != (uint64_t)(v12[1] - *v12) >> 2)
    {
      int v14 = 325;
      std::string v15 = "entry.mel_2d[0].size() == mel_dim";
      goto LABEL_27;
    }
    if (v6 != (uint64_t)(v5[1] - *v5) >> 2)
    {
      int v14 = 326;
      std::string v15 = "entry.input_duration.size() == max_input_length";
      goto LABEL_27;
    }
    if (v6 != (uint64_t)(v5[4] - v5[3]) >> 2)
    {
      int v14 = 327;
      std::string v15 = "entry.input_pitch.size() == max_input_length";
      goto LABEL_27;
    }
    if (v6 != (uint64_t)(v5[7] - v5[6]) >> 2)
    {
      int v14 = 328;
      std::string v15 = "entry.input_energy.size() == max_input_length";
LABEL_27:
      __assert_rtn("batching_data", "DataFeeder.cc", v14, v15);
    }
    if (__p)
    {
      uint64_t v18 = (char *)__p;
      operator delete(__p);
    }
    if (v19)
    {
      uint64_t v20 = (char *)v19;
      operator delete(v19);
    }
    if (v21)
    {
      std::string v22 = (char *)v21;
      operator delete(v21);
    }
    std::string v21 = &v23;
    std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    if (v25[0])
    {
      v25[1] = v25[0];
      operator delete(v25[0]);
    }
    if (v26)
    {
      int v27 = v26;
      operator delete(v26);
    }
    std::string v13 = v5 + 9;
    v5 += 19;
  }
  while (v13 != v3);
}

void sub_1DD78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  char v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(void *)(v23 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void NeuralFEDataFeeder::convert_to_espresso_data(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  BatchNeuralFETrainData::BatchNeuralFETrainData((uint64_t)v72, a3);
  unint64_t v9 = (const char *)(a1 + 160);
  if (*(char *)(a1 + 183) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a1 + 160), *(void *)(a1 + 168));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v9;
    __str.__r_.__value_.__r.__words[2] = *(void *)(a1 + 176);
  }
  if (*(unsigned char *)(a1 + 152))
  {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    std::string::resize(&__str, size + 100, 0);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (*(char *)(a1 + 183) < 0) {
      unint64_t v9 = *(const char **)v9;
    }
    int v12 = sprintf((char *)p_str, v9, a2);
    std::string::basic_string(&v70, &__str, 0, v12, (std::allocator<char> *)&v67);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = v70;
  }
  TrainingUtils::flatten_2d_to_1d<float>(&v73, &v70);
  float v67 = 0;
  float v68 = 0;
  uint64_t v69 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v67, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_, (uint64_t)(v70.__r_.__value_.__l.__size_ - v70.__r_.__value_.__r.__words[0]) >> 2);
  if (*(unsigned char *)(a1 + 152))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v13 = __str.__r_.__value_.__l.__size_;
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v13 + 7);
    if (v66 < 0) {
      p_p = __p;
    }
    if (v13)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v15 = &__str;
      }
      else {
        std::string v15 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(p_p, v15, v13);
    }
    strcpy((char *)p_p + v13, "/inputs");
    TrainingUtils::read_vector_from_file<float>((uint64_t)&__p, &v70);
    if (SHIBYTE(v66) < 0) {
      operator delete(__p);
    }
  }
  unint64_t v16 = 0x86BCA1AF286BCA1BLL * ((v7 - v8) >> 3);
  memcpy(*(void **)(*(void *)a4 + 8), v70.__r_.__value_.__l.__data_, 4 * ((v73[1] - *v73) >> 2) * v16);
  std::string __p = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, __src, v76, (v76 - (uint64_t)__src) >> 2);
  if (*(unsigned char *)(a1 + 152))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v17 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v17 = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v18 = &v61;
    std::string::basic_string[abi:ne180100]((uint64_t)&v61, v17 + 14);
    if (v63 < 0) {
      uint64_t v18 = v61;
    }
    if (v17)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v19 = &__str;
      }
      else {
        int v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(v18, v19, v17);
    }
    strcpy((char *)v18 + v17, "/input_lengths");
    TrainingUtils::read_vector_from_file<float>((uint64_t)&v61, &__src);
    if (v63 < 0) {
      operator delete(v61);
    }
  }
  memcpy(*(void **)(*(void *)a4 + 200), __src, 4 * v16);
  TrainingUtils::flatten_3d_to_1d<float>(v74, &v61);
  int v58 = 0;
  char v59 = 0;
  uint64_t v60 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v58, v61, (uint64_t)v62, (v62 - (unsigned char *)v61) >> 2);
  if (*(unsigned char *)(a1 + 152))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = __str.__r_.__value_.__l.__size_;
    }
    std::string v21 = &v55;
    std::string::basic_string[abi:ne180100]((uint64_t)&v55, v20 + 12);
    if (v57 < 0) {
      std::string v21 = v55;
    }
    if (v20)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v22 = &__str;
      }
      else {
        std::string v22 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(v21, v22, v20);
    }
    strcpy((char *)v21 + v20, "/mel_targets");
    TrainingUtils::read_vector_from_file<float>((uint64_t)&v55, &v61);
    if (SHIBYTE(v57) < 0) {
      operator delete(v55);
    }
  }
  memcpy(*(void **)(*(void *)a4 + 392), v61, 0xAAAAAAAAAAAAAAACLL* ((uint64_t)(*(void *)(v74[0] + 8) - *(void *)v74[0]) >> 3)* v16* ((*(void *)(*(void *)v74[0] + 8) - **(void **)v74[0]) >> 2));
  int v55 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v55, v77, v78, (v78 - (uint64_t)v77) >> 2);
  if (*(unsigned char *)(a1 + 152))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v24 = &v52;
    std::string::basic_string[abi:ne180100]((uint64_t)&v52, v23 + 19);
    if (v54 < 0) {
      uint64_t v24 = v52;
    }
    if (v23)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &__str;
      }
      else {
        uint64_t v25 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(v24, v25, v23);
    }
    strcpy((char *)v24 + v23, "/mel_target_lengths");
    TrainingUtils::read_vector_from_file<float>((uint64_t)&v52, &v77);
    if (v54 < 0) {
      operator delete(v52);
    }
  }
  memcpy(*(void **)(*(void *)a4 + 584), v77, 4 * v16);
  TrainingUtils::flatten_2d_to_1d<float>(&v79, &v52);
  int v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v49, v52, (uint64_t)v53, (v53 - (unsigned char *)v52) >> 2);
  if (*(unsigned char *)(a1 + 152))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v26 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v26 = __str.__r_.__value_.__l.__size_;
    }
    int v27 = &v46;
    std::string::basic_string[abi:ne180100]((uint64_t)&v46, v26 + 16);
    if (v48 < 0) {
      int v27 = v46;
    }
    if (v26)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v28 = &__str;
      }
      else {
        std::string v28 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(v27, v28, v26);
    }
    strcpy((char *)v27 + v26, "/phone_durations");
    TrainingUtils::read_vector_from_file<float>((uint64_t)&v46, &v52);
    if (v48 < 0) {
      operator delete(v46);
    }
  }
  memcpy(*(void **)(*(void *)a4 + 776), v52, 4 * ((v79[1] - *v79) >> 2) * v16);
  TrainingUtils::flatten_2d_to_1d<float>(&v80, &v46);
  uint64_t v43 = 0;
  unint64_t v44 = 0;
  uint64_t v45 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v43, v46, (uint64_t)v47, (v47 - (unsigned char *)v46) >> 2);
  if (*(unsigned char *)(a1 + 152))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v29 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v29 = __str.__r_.__value_.__l.__size_;
    }
    int v30 = &v40;
    std::string::basic_string[abi:ne180100]((uint64_t)&v40, v29 + 12);
    if (v42 < 0) {
      int v30 = v40;
    }
    if (v29)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v31 = &__str;
      }
      else {
        int v31 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(v30, v31, v29);
    }
    strcpy((char *)v30 + v29, "/phone_pitch");
    TrainingUtils::read_vector_from_file<float>((uint64_t)&v40, &v46);
    if (v42 < 0) {
      operator delete(v40);
    }
  }
  memcpy(*(void **)(*(void *)a4 + 968), v46, 4 * ((v80[1] - *v80) >> 2) * v16);
  TrainingUtils::flatten_2d_to_1d<float>(&v81, &v40);
  char v37 = 0;
  int v38 = 0;
  uint64_t v39 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v37, v40, (uint64_t)v41, (v41 - (unsigned char *)v40) >> 2);
  if (*(unsigned char *)(a1 + 152))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v32 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v32 = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v33 = v35;
    std::string::basic_string[abi:ne180100]((uint64_t)v35, v32 + 13);
    if (v36 < 0) {
      uint64_t v33 = (void **)v35[0];
    }
    if (v32)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v34 = &__str;
      }
      else {
        unint64_t v34 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(v33, v34, v32);
    }
    strcpy((char *)v33 + v32, "/phone_energy");
    TrainingUtils::read_vector_from_file<float>((uint64_t)v35, &v40);
    if (v36 < 0) {
      operator delete(v35[0]);
    }
  }
  memcpy(*(void **)(*(void *)a4 + 1160), v40, 4 * ((v81[1] - *v81) >> 2) * v16);
  if (v37)
  {
    int v38 = v37;
    operator delete(v37);
  }
  if (v40)
  {
    unint64_t v41 = v40;
    operator delete(v40);
  }
  if (v43)
  {
    unint64_t v44 = v43;
    operator delete(v43);
  }
  if (v46)
  {
    uint64_t v47 = v46;
    operator delete(v46);
  }
  if (v49)
  {
    uint64_t v50 = v49;
    operator delete(v49);
  }
  if (v52)
  {
    int v53 = v52;
    operator delete(v52);
  }
  if (v55)
  {
    uint64_t v56 = v55;
    operator delete(v55);
  }
  if (v58)
  {
    char v59 = v58;
    operator delete(v58);
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  if (__p)
  {
    uint64_t v65 = __p;
    operator delete(__p);
  }
  if (v67)
  {
    float v68 = v67;
    operator delete(v67);
  }
  if (v70.__r_.__value_.__r.__words[0])
  {
    v70.__r_.__value_.__l.__size_ = v70.__r_.__value_.__r.__words[0];
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  BatchNeuralFETrainData::~BatchNeuralFETrainData((BatchNeuralFETrainData *)v72);
}

void sub_1DE0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void sub_1DE2BC()
{
}

void sub_1DE2D4()
{
}

uint64_t DataFeeder::load_vector_from_file<float>@<X0>(void *a1@<X8>)
{
  std::ifstream::basic_ifstream(v4);
  std::istream::seekg();
  std::istream::tellg();
  std::istream::seekg();
  std::vector<float>::vector(a1, v3 >> 2);
  std::istream::read();
  std::filebuf::~filebuf();
  std::istream::~istream();
  return std::ios::~ios();
}

void sub_1DE448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::string v28 = *(void **)v26;
  if (*(void *)v26)
  {
    *(void *)(v26 + 8) = v28;
    operator delete(v28);
  }
  std::ifstream::~ifstream(&a26);
  _Unwind_Resume(a1);
}

void NeuralFEDataFeeder::split_tokens_from_string(uint64_t a1@<X1>, uint64_t *a2@<X2>, unint64_t a3@<X8>)
{
  unint64_t v4 = (void *)a3;
  LODWORD(a3) = *((char *)a2 + 23);
  BOOL v5 = (a3 & 0x80000000) != 0;
  uint64_t v6 = (uint64_t *)*a2;
  uint64_t v7 = (void *)a2[1];
  if ((a3 & 0x80000000) == 0) {
    uint64_t v6 = a2;
  }
  *unint64_t v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  a3 = a3;
  if (v5) {
    a3 = (unint64_t)v7;
  }
  v8[0] = v6;
  v8[1] = (char *)v6 + a3;
  boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(__dst, (uint64_t)v8);
  boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>((uint64_t)v4, a1, __dst, 1);
}

void sub_1DE54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, unint64_t a15)
{
  if (a15 >= 0x11)
  {
    if (a13) {
      operator delete[]();
    }
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void NeuralFEDataFeeder::token_mapping(uint64_t ***a1@<X1>, uint64_t **a2@<X2>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v4 = *a1;
  BOOL v5 = a1[1];
  if (*a1 != v5)
  {
    uint64_t v7 = a2 + 1;
    do
    {
      if (v7 == (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)a2, (const void **)v4))
      {
        LogObject = Diagnostics_GetLogObject();
        if (os_log_type_enabled(LogObject, OS_LOG_TYPE_ERROR)) {
          NeuralFEDataFeeder::token_mapping(buf, v4, &v24, LogObject);
        }
      }
      else
      {
        std::string v22 = v4;
        uint64_t v8 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (const void **)v4, (uint64_t)&std::piecewise_construct, (long long **)&v22);
        unint64_t v9 = v8;
        unint64_t v11 = a3[1];
        unint64_t v10 = (unint64_t)a3[2];
        if ((unint64_t)v11 >= v10)
        {
          int v14 = *a3;
          uint64_t v15 = (v11 - *a3) >> 2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v10 - (void)v14;
          if (v17 >> 1 > v16) {
            unint64_t v16 = v17 >> 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v18);
            int v14 = *a3;
            unint64_t v11 = a3[1];
          }
          else
          {
            int v19 = 0;
          }
          std::string::size_type v20 = &v19[4 * v15];
          *(_DWORD *)std::string::size_type v20 = *((_DWORD *)v9 + 14);
          int v12 = v20 + 4;
          while (v11 != v14)
          {
            int v21 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          *a3 = v20;
          a3[1] = v12;
          a3[2] = &v19[4 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v11 = *((_DWORD *)v8 + 14);
          int v12 = v11 + 4;
        }
        a3[1] = v12;
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
}

void sub_1DE75C(_Unwind_Exception *exception_object)
{
}

void boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>(uint64_t a1, uint64_t a2, void *__src, int a4)
{
  size_t v7 = __src[2];
  size_t __n = v7;
  __srca[0] = 0;
  if (v7 < 0x11)
  {
    memcpy(__srca, __src, v7);
    size_t v13 = __n;
    v12[0] = 0;
    if (__n < 0x11)
    {
      memcpy(v12, __srca, __n);
      void __dst[2] = v13;
      __dst[0] = 0;
      if (v13 <= 0x10)
      {
        memcpy(__dst, v12, v13);
        int v11 = a4;
        boost::algorithm::iter_split<std::vector<std::string>,std::string const&,boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, a2, (uint64_t)__dst);
      }
      operator new[]();
    }
    operator new[]();
  }
  operator new[]();
}

void sub_1DE968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    operator delete[]();
  }
  if (v17 >= 0x11)
  {
    if (a10) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t TrainingUtils::read_vector_from_file<float>(uint64_t a1, void *a2)
{
  std::ifstream::basic_ifstream(v5);
  std::istream::tellg();
  if (v4 != a2[1] - *a2) {
    __assert_rtn("read_vector_from_file", "TrainingUtils.h", 98, "filesize == sizeof(T)*data.size()");
  }
  std::istream::seekg();
  std::istream::read();
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v5 + (unint64_t)*(v5[0] - 3)), *(_DWORD *)((char *)&v5[4] + (unint64_t)*(v5[0] - 3)) | 4);
  }
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  return 0;
}

void sub_1DEB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void TrainingUtils::flatten_3d_to_1d<float>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  memset(v8, 0, sizeof(v8));
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      TrainingUtils::flatten_2d_to_1d<float>((void *)(v3 + v5), __p);
      std::vector<std::vector<float>>::push_back[abi:ne180100](v8, (uint64_t)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v6;
      uint64_t v3 = *a1;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v6);
  }
  TrainingUtils::flatten_2d_to_1d<float>(v8, a2);
  __p[0] = v8;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1DEC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, uint64_t a11, char a12)
{
  std::string __p = &a12;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t WaveRNNDataFeeder::OneBatchReader::OneBatchReader(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = *a5;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a5 + 8);
  *(void *)a1 = v10;
  if (*((char *)a5 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)a5[2], a5[3]);
  }
  else
  {
    long long v11 = *((_OWORD *)a5 + 1);
    *(void *)(a1 + 32) = a5[4];
    *(_OWORD *)(a1 + 16) = v11;
  }
  long long v12 = *(_OWORD *)(a5 + 5);
  long long v13 = *(_OWORD *)(a5 + 7);
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 40) = v12;
  *(_OWORD *)(a1 + 56) = v13;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((void *)(a1 + 88), *a3, a3[1], (a3[1] - *a3) >> 4);
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 112) = a4;
  *(void *)(a1 + 120) = a2;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  int v14 = *(_DWORD *)(a1 + 48) / *(_DWORD *)(a1 + 56);
  if (*(_DWORD *)(a1 + 44) % v14)
  {
    unint64_t v16 = "params_.step_shift_length%(params_.samples_per_frame/params_.samples_per_step) == 0";
    int v17 = 408;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 40) % v14)
  {
    unint64_t v16 = "params_.step_sequence_length%(params_.samples_per_frame/params_.samples_per_step) == 0";
    int v17 = 409;
LABEL_9:
    __assert_rtn("OneBatchReader", "DataFeeder.cc", v17, v16);
  }
  return a1;
}

void sub_1DEDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 39) < 0) {
    operator delete(*v11);
  }
  _Unwind_Resume(exception_object);
}

void WaveRNNDataFeeder::OneBatchReader::read_data(uint64_t a1, char *a2)
{
  uint64_t v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "utterance_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v4, &v61);
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    unint64_t v6 = &v61;
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v6 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Processing %s", (uint8_t *)&buf, 0xCu);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "mel_dim");
  LODWORD(v60.__r_.__value_.__l.__data_) = 80;
  int v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&buf.__r_.__value_.__l.__data_, (unsigned int *)&v60);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = *(long long **)(a1 + 120);
  std::string::basic_string[abi:ne180100]<0>(&v59, "mel");
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v60.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v9;
  }
  boost::filesystem::path::append_v3(&v60, &v59);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v61.__r_.__value_.__l.__size_;
  }
  long long v11 = &v57;
  std::string::basic_string[abi:ne180100]((uint64_t)&v57, size + 4);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v11 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v12 = &v61;
    }
    else {
      long long v12 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    memmove(v11, v12, size);
  }
  strcpy((char *)v11 + size, ".mel");
  std::string __p = v57;
  memset(&v57, 0, sizeof(v57));
  boost::filesystem::path::append_v3(&v60, &__p);
  std::string buf = v60;
  memset(&v60, 0, sizeof(v60));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  DataFeeder::load_vector_from_file<float>(&v60);
  InferenceEngine::DataUtils::reshape_1d_to_2d<float>((uint64_t *)&v60, v7, (uint64_t *)&v59);
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)(a1 + 128));
  *(std::string *)(a1 + 128) = v59;
  memset(&v59, 0, sizeof(v59));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  long long v13 = *(long long **)(a1 + 120);
  std::string::basic_string[abi:ne180100]<0>(&v57, "silence_trimmed");
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v13, *((void *)v13 + 1));
  }
  else
  {
    long long v14 = *v13;
    __p.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
  }
  boost::filesystem::path::append_v3(&__p, &v57);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = v61.__r_.__value_.__l.__size_;
  }
  p_src = &__src;
  std::string::basic_string[abi:ne180100]((uint64_t)&__src, v15 + 4);
  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
  }
  if (v15)
  {
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v17 = &v61;
    }
    else {
      int v17 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    memmove(p_src, v17, v15);
  }
  strcpy((char *)p_src + v15, ".wav");
  std::string v56 = __src;
  memset(&__src, 0, sizeof(__src));
  boost::filesystem::path::append_v3(&__p, &v56);
  std::string v59 = __p;
  memset(&__p, 0, sizeof(__p));
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__src.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  reader = PCMFile::create_reader((char *)&v59);
  int v19 = (PCMFile::Reader *)reader;
  if (!reader)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    char v54 = &v59;
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v54 = (std::string *)v59.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)&__p, "Can't read wavfile from %s", (const char *)v54);
    std::logic_error::logic_error(exception, &__p);
  }
  uint64_t v20 = *((void *)reader + 6);
  std::vector<short>::vector(&__p, v20);
  PCMFile::Reader::read_samples(v19, v20, __p.__r_.__value_.__l.__data_, 2, 0, 1.0);
  memset(&v57, 0, sizeof(v57));
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>((char *)&v57, (__int16 *)__p.__r_.__value_.__l.__data_, (__int16 *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 1);
  std::string v22 = (uint64_t *)(a1 + 152);
  int v21 = *(void **)(a1 + 152);
  if (v21)
  {
    *(void *)(a1 + 160) = v21;
    operator delete(v21);
    *std::string v22 = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
  }
  std::string::size_type v23 = (const void *)v57.__r_.__value_.__r.__words[0];
  *(std::string *)(a1 + 152) = v57;
  int v24 = *(_DWORD *)(a1 + 64);
  memset(&v57, 0, sizeof(v57));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v57, v23, (uint64_t)v23 + 4 * (v24 / 2), (uint64_t)(v24 + (v24 < 0)) >> 1);
  if (v57.__r_.__value_.__r.__words[0] != v57.__r_.__value_.__l.__size_)
  {
    uint64_t v25 = (_DWORD *)(v57.__r_.__value_.__l.__size_ - 4);
    if (v57.__r_.__value_.__l.__size_ - 4 > v57.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v26 = v57.__r_.__value_.__r.__words[0] + 4;
      do
      {
        int v27 = *(_DWORD *)(v26 - 4);
        *(_DWORD *)(v26 - 4) = *v25;
        *v25-- = v27;
        BOOL v28 = v26 >= (unint64_t)v25;
        v26 += 4;
      }
      while (!v28);
    }
  }
  uint64_t v29 = *(void *)(a1 + 160);
  int v30 = *(_DWORD *)(a1 + 64);
  memset(&v56, 0, sizeof(v56));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v56, (const void *)(v29 + 4 * (v30 / -2)), v29, (-4 * (v30 / -2)) >> 2);
  if (v56.__r_.__value_.__r.__words[0] != v56.__r_.__value_.__l.__size_)
  {
    int v31 = (_DWORD *)(v56.__r_.__value_.__l.__size_ - 4);
    if (v56.__r_.__value_.__l.__size_ - 4 > v56.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v32 = v56.__r_.__value_.__r.__words[0] + 4;
      do
      {
        int v33 = *(_DWORD *)(v32 - 4);
        *(_DWORD *)(v32 - 4) = *v31;
        *v31-- = v33;
        BOOL v28 = v32 >= (unint64_t)v31;
        v32 += 4;
      }
      while (!v28);
    }
  }
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(a1 + 152, *v22, v57.__r_.__value_.__l.__data_, (char *)v57.__r_.__value_.__l.__size_, (uint64_t)(v57.__r_.__value_.__l.__size_ - v57.__r_.__value_.__r.__words[0]) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(a1 + 152, *(void *)(a1 + 160), v56.__r_.__value_.__l.__data_, (char *)v56.__r_.__value_.__l.__size_, (uint64_t)(v56.__r_.__value_.__l.__size_ - v56.__r_.__value_.__r.__words[0]) >> 2);
  unint64_t v34 = *(float **)(a1 + 152);
  uint64_t v35 = *(float **)(a1 + 160);
  unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3) * *(int *)(a1 + 48);
  if (v36 < v35 - v34)
  {
    std::vector<float>::resize(a1 + 152, v36);
    unint64_t v34 = *(float **)(a1 + 152);
    uint64_t v35 = *(float **)(a1 + 160);
  }
  if (v34 != v35)
  {
    char v37 = v34;
    do
    {
      *char v37 = *v37 / *(float *)(a1 + 60);
      ++v37;
    }
    while (v37 != v35);
    do
    {
      if (*v34 <= 1.0) {
        float v38 = *v34;
      }
      else {
        float v38 = 1.0;
      }
      if (*v34 >= -1.0) {
        float v39 = v38;
      }
      else {
        float v39 = -1.0;
      }
      *v34++ = v39;
    }
    while (v34 != v35);
  }
  SignalUtils::preemphasize((uint64_t *)(a1 + 152), (float **)&__src);
  uint64_t v40 = (void *)*v22;
  if (*v22)
  {
    *(void *)(a1 + 160) = v40;
    operator delete(v40);
    *std::string v22 = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
  }
  unint64_t v41 = (float *)__src.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 152) = __src.__r_.__value_.__r.__words[0];
  std::string::size_type v42 = __src.__r_.__value_.__l.__size_;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)&__src.__r_.__value_.__r.__words[1];
  uint64_t v43 = (float *)v42;
  if (v41 == (float *)v42) {
    goto LABEL_89;
  }
  unint64_t v44 = v41;
  do
  {
    if (*v44 <= 1.0) {
      float v45 = *v44;
    }
    else {
      float v45 = 1.0;
    }
    if (*v44 >= -1.0) {
      float v46 = v45;
    }
    else {
      float v46 = -1.0;
    }
    *v44++ = v46;
  }
  while (v44 != (float *)v42);
  do
  {
    *unint64_t v41 = SignalUtils::mulaw_encode((SignalUtils *)v40, *v41, (float)*(int *)(a1 + 68));
    ++v41;
  }
  while (v41 != v43);
  uint64_t v47 = *(float **)(a1 + 152);
  unint64_t v41 = *(float **)(a1 + 160);
  if (v47 == v41)
  {
LABEL_89:
    char v48 = (char *)v41;
  }
  else
  {
    do
    {
      *uint64_t v47 = (float)(int)SignalUtils::quantization((SignalUtils *)*(unsigned int *)(a1 + 68), *v47);
      ++v47;
    }
    while (v47 != v41);
    char v48 = *(char **)(a1 + 152);
    unint64_t v41 = *(float **)(a1 + 160);
  }
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 176), v48, (uint64_t)v41, ((char *)v41 - v48) >> 2);
  int v49 = *(char **)(a1 + 176);
  uint64_t v50 = *(char **)(a1 + 184);
  if (v49 == v50)
  {
    uint64_t v51 = *(void *)(a1 + 176);
  }
  else
  {
    do
    {
      *(float *)int v49 = SignalUtils::dequantization((SignalUtils *)(int)*(float *)v49, *(_DWORD *)(a1 + 68));
      v49 += 4;
    }
    while (v49 != v50);
    int v49 = *(char **)(a1 + 176);
    uint64_t v51 = *(void *)(a1 + 184);
  }
  *(void *)(a1 + 184) = v51 - 4;
  LODWORD(__src.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::insert(a1 + 176, v49, (float *)&__src);
  uint64_t v52 = (*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2;
  *(_DWORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = v52;
  if (v56.__r_.__value_.__r.__words[0])
  {
    v56.__r_.__value_.__l.__size_ = v56.__r_.__value_.__r.__words[0];
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (v57.__r_.__value_.__r.__words[0])
  {
    v57.__r_.__value_.__l.__size_ = v57.__r_.__value_.__r.__words[0];
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  (*(void (**)(PCMFile::Reader *))(*(void *)v19 + 8))(v19);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (v60.__r_.__value_.__r.__words[0])
  {
    v60.__r_.__value_.__l.__size_ = v60.__r_.__value_.__r.__words[0];
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
}

void sub_1DF66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  unint64_t v44 = *(void **)(v42 - 144);
  if (v44)
  {
    *(void *)(v42 - 136) = v44;
    operator delete(v44);
  }
  if (*(char *)(v42 - 57) < 0) {
    operator delete(*(void **)(v42 - 80));
  }
  if (*(char *)(v42 - 89) < 0) {
    operator delete(*(void **)(v42 - 112));
  }
  _Unwind_Resume(exception_object);
}

void WaveRNNDataFeeder::OneBatchReader::fetch_data(WaveRNNDataFeeder::OneBatchReader *this@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  int v4 = *((_DWORD *)this + 10);
  if (v4 >= 1)
  {
    int v5 = 0;
    char v63 = (void **)(a2 + 72);
    std::string v64 = (void **)(a2 + 48);
    do
    {
      uint64_t v6 = *((int *)this + 19) + *((int *)this + 14) * (uint64_t)v5;
      uint64_t v7 = *((void *)this + 19);
      int v8 = *(_DWORD *)(v7 + 4 * v6);
      uint64_t v9 = v6 + 1;
      int v10 = *(_DWORD *)(v7 + 4 * (v6 + 1));
      long long v12 = *(char **)(a2 + 56);
      unint64_t v11 = *(void *)(a2 + 64);
      if ((unint64_t)v12 >= v11)
      {
        long long v14 = (char *)*v64;
        uint64_t v15 = (v12 - (unsigned char *)*v64) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          goto LABEL_82;
        }
        uint64_t v17 = v11 - (void)v14;
        if (v17 >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 64, v18);
          long long v14 = *(char **)(a2 + 48);
          long long v12 = *(char **)(a2 + 56);
        }
        else
        {
          int v19 = 0;
        }
        uint64_t v20 = &v19[4 * v15];
        *(_DWORD *)uint64_t v20 = v8;
        long long v13 = v20 + 4;
        while (v12 != v14)
        {
          int v21 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v20 - 1) = v21;
          v20 -= 4;
        }
        *(void *)(a2 + 48) = v20;
        *(void *)(a2 + 56) = v13;
        *(void *)(a2 + 64) = &v19[4 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(_DWORD *)long long v12 = v8;
        long long v13 = v12 + 4;
      }
      *(void *)(a2 + 56) = v13;
      std::string::size_type v23 = *(char **)(a2 + 80);
      unint64_t v22 = *(void *)(a2 + 88);
      if ((unint64_t)v23 >= v22)
      {
        uint64_t v25 = (char *)*v63;
        uint64_t v26 = (v23 - (unsigned char *)*v63) >> 2;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
LABEL_82:
        }
          std::vector<float>::__throw_length_error[abi:ne180100]();
        uint64_t v28 = v22 - (void)v25;
        if (v28 >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          int v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 88, v29);
          uint64_t v25 = *(char **)(a2 + 72);
          std::string::size_type v23 = *(char **)(a2 + 80);
        }
        else
        {
          int v30 = 0;
        }
        int v31 = &v30[4 * v26];
        *(_DWORD *)int v31 = v10;
        int v24 = v31 + 4;
        while (v23 != v25)
        {
          int v32 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *((_DWORD *)v31 - 1) = v32;
          v31 -= 4;
        }
        *(void *)(a2 + 72) = v31;
        *(void *)(a2 + 80) = v24;
        *(void *)(a2 + 88) = &v30[4 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(_DWORD *)std::string::size_type v23 = v10;
        int v24 = v23 + 4;
      }
      *(void *)(a2 + 80) = v24;
      uint64_t v33 = *((void *)this + 16) + 24 * ((int)v6 / *((_DWORD *)this + 12));
      uint64_t v66 = 0;
      float v67 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v33, *(void *)(v33 + 8), (uint64_t)(*(void *)(v33 + 8) - *(void *)v33) >> 2);
      uint64_t v34 = *((void *)this + 22);
      unint64_t v36 = v66;
      uint64_t v35 = v67;
      if (v66 >= v67)
      {
        float v38 = (char *)__p;
        uint64_t v39 = (v66 - (unsigned char *)__p) >> 2;
        unint64_t v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 62) {
          goto LABEL_81;
        }
        uint64_t v41 = v67 - (unsigned char *)__p;
        if ((v67 - (unsigned char *)__p) >> 1 > v40) {
          unint64_t v40 = v41 >> 1;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v40;
        }
        if (v42)
        {
          uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v67, v42);
          float v38 = (char *)__p;
          unint64_t v36 = v66;
        }
        else
        {
          uint64_t v43 = 0;
        }
        unint64_t v44 = &v43[4 * v39];
        *(_DWORD *)unint64_t v44 = *(_DWORD *)(v34 + 4 * v6);
        char v37 = v44 + 4;
        while (v36 != v38)
        {
          int v45 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *((_DWORD *)v44 - 1) = v45;
          v44 -= 4;
        }
        uint64_t v35 = &v43[4 * v42];
        std::string __p = v44;
        uint64_t v66 = v37;
        float v67 = v35;
        if (v38)
        {
          operator delete(v38);
          uint64_t v35 = v67;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v66 = *(_DWORD *)(v34 + 4 * v6);
        char v37 = v36 + 4;
      }
      uint64_t v66 = v37;
      uint64_t v46 = *((void *)this + 22);
      if (v37 >= v35)
      {
        char v48 = (char *)__p;
        uint64_t v49 = (v37 - (unsigned char *)__p) >> 2;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 62) {
LABEL_81:
        }
          std::vector<float>::__throw_length_error[abi:ne180100]();
        uint64_t v51 = v35 - (unsigned char *)__p;
        if (v51 >> 1 > v50) {
          unint64_t v50 = v51 >> 1;
        }
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v50;
        }
        if (v52)
        {
          int v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v67, v52);
          char v48 = (char *)__p;
          char v37 = v66;
        }
        else
        {
          int v53 = 0;
        }
        char v54 = &v53[4 * v49];
        *(_DWORD *)char v54 = *(_DWORD *)(v46 + 4 * v9);
        uint64_t v47 = v54 + 4;
        while (v37 != v48)
        {
          int v55 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *((_DWORD *)v54 - 1) = v55;
          v54 -= 4;
        }
        std::string __p = v54;
        uint64_t v66 = v47;
        float v67 = &v53[4 * v52];
        if (v48) {
          operator delete(v48);
        }
      }
      else
      {
        *(_DWORD *)char v37 = *(_DWORD *)(v46 + 4 * v9);
        uint64_t v47 = v37 + 4;
      }
      uint64_t v66 = v47;
      unint64_t v56 = *(void *)(a2 + 32);
      if (v56 >= *(void *)(a2 + 40))
      {
        uint64_t v57 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)(a2 + 24), (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>(a2 + 24, (uint64_t)&__p);
        uint64_t v57 = v56 + 24;
      }
      *(void *)(a2 + 32) = v57;
      if (__p)
      {
        uint64_t v66 = (char *)__p;
        operator delete(__p);
      }
      ++v5;
      int v4 = *((_DWORD *)this + 10);
    }
    while (v5 < v4);
  }
  int v58 = *((_DWORD *)this + 19);
  if (!v58) {
    *(unsigned char *)(a2 + 96) = 1;
  }
  int v59 = *((_DWORD *)this + 14);
  int v60 = v58 + v59 * *((_DWORD *)this + 11);
  *((_DWORD *)this + 19) = v60;
  if (v60 + v59 * v4 >= *((_DWORD *)this + 20))
  {
    unint64_t v61 = *((int *)this + 18) + 1;
    *((_DWORD *)this + 18) = v61;
    v62 = (char *)*((void *)this + 11);
    if (v61 >= (uint64_t)(*((void *)this + 12) - (void)v62) >> 4)
    {
      *((void *)this + 9) = 0;
      *((_DWORD *)this + 20) = 0;
    }
    else
    {
      v62 += 16 * v61;
    }
    WaveRNNDataFeeder::OneBatchReader::read_data((uint64_t)this, v62);
  }
}

void sub_1DFCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  WaveRNNTrainData::~WaveRNNTrainData(v15);
  _Unwind_Resume(a1);
}

uint64_t WaveRNNDataFeeder::WaveRNNDataFeeder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = DataFeeder::DataFeeder(a1, a2, a3, (uint64_t *)a4);
  *(void *)uint64_t v6 = &off_270298;
  char v7 = *(unsigned char *)(a4 + 8);
  *(void *)(v6 + 144) = *(void *)a4;
  int v8 = (uint64_t *)(v6 + 144);
  *(unsigned char *)(v6 + 152) = v7;
  uint64_t v9 = (std::string *)(v6 + 160);
  if (*(char *)(a4 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a4 + 16), *(void *)(a4 + 24));
  }
  else
  {
    long long v10 = *(_OWORD *)(a4 + 16);
    v9->__r_.__value_.__r.__words[2] = *(void *)(a4 + 32);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  long long v11 = *(_OWORD *)(a4 + 40);
  long long v12 = *(_OWORD *)(a4 + 56);
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  _ZNSt3__115allocate_sharedB8ne180100I17WaveRNNEspressoIONS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v28);
  long long v13 = v28;
  long long v28 = 0uLL;
  long long v14 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v13;
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    if (*((void *)&v28 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
    }
  }
  unint64_t v16 = *(int *)(a1 + 144);
  unint64_t v15 = *(int *)(a1 + 148);
  unint64_t v17 = ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 4) / v16 / v15;
  if ((int)v17 < 1) {
    __assert_rtn("WaveRNNDataFeeder", "DataFeeder.cc", 520, "num_metadata_entry >= 1");
  }
  if ((int)v15 * (int)v16 >= 1)
  {
    uint64_t v18 = 0;
    unint64_t v19 = (int)v17;
    do
    {
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      uint64_t v20 = (v16 - 1);
      unint64_t v21 = v18 * v19;
      if (v18 == v20)
      {
        uint64_t v22 = *(void *)(a1 + 72);
        uint64_t v23 = *(void *)(a1 + 64) + 16 * v21;
        uint64_t v27 = 0;
        long long v26 = 0uLL;
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(&v26, v23, v22, (v22 - v23) >> 4);
      }
      else
      {
        uint64_t v24 = *(void *)(a1 + 64) + 16 * v21;
        uint64_t v27 = 0;
        long long v26 = 0uLL;
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(&v26, v24, v24 + 16 * v19, v19);
      }
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vdeallocate((void **)&v28);
      long long v28 = v26;
      uint64_t v29 = v27;
      int v30 = (void **)&v26;
      uint64_t v27 = 0;
      long long v26 = 0uLL;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v30);
      std::allocate_shared[abi:ne180100]<WaveRNNDataFeeder::OneBatchReader,std::allocator<WaveRNNDataFeeder::OneBatchReader>,boost::filesystem::path &,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> &,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &,WaveRNNDataFeeder::Config &,void>(a1 + 88, (uint64_t *)&v28, a1 + 136, v8, &v26);
      std::vector<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::push_back[abi:ne180100]((uint64_t *)(a1 + 240), &v26);
      if (*((void *)&v26 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
      }
      *(void *)&long long v26 = &v28;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
      ++v18;
      LODWORD(v16) = *(_DWORD *)(a1 + 144);
      unint64_t v15 = *(int *)(a1 + 148);
    }
    while (v18 < (int)v15 * (uint64_t)(int)v16);
  }
  std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 216), v15);
  return a1;
}

void sub_1DFF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  DataFeeder::~DataFeeder(v15);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::TransitionModel::Tuple>>((uint64_t)result, v13);
    unint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::~__split_buffer(v18);
  }
  else
  {
    *char v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1E00D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void WaveRNNDataFeeder::reset(WaveRNNDataFeeder *this)
{
  int v2 = (uint64_t *)*((void *)this + 30);
  for (uint64_t i = (uint64_t *)*((void *)this + 31); v2 != i; v2 += 2)
  {
    uint64_t v4 = *v2;
    unint64_t v5 = (std::__shared_weak_count *)v2[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)(v4 + 72) = 0;
    *(_DWORD *)(v4 + 80) = 0;
    WaveRNNDataFeeder::OneBatchReader::read_data(v4, *(char **)(v4 + 88));
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  char v7 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = v6[11] * v6[12];
  int v11 = 0;
  std::vector<float>::vector(&__p, v8, &v11);
  uint64_t v10 = (char *)*((void *)this + 27);
  for (unint64_t j = (char *)*((void *)this + 28); v10 != j; v10 += 24)
  {
    if (v10 != (char *)&__p) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v10, (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 2);
    }
  }
  if (__p)
  {
    unint64_t v13 = __p;
    operator delete(__p);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1E022C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void WaveRNNDataFeeder::getData(WaveRNNDataFeeder *this, uint64_t a2, int a3)
{
  unint64_t v6 = (const void *)*((void *)this + 1);
  if (v6)
  {
    if (v7)
    {
      unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 2);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      unint64_t v8 = 0;
    }
  }
  else
  {
    unint64_t v8 = 0;
    char v7 = 0;
  }
  InferenceEngine::DataUtils::reshape_1d_to_2d<float>((uint64_t *)(*((void *)this + 27) + 24 * a3), v7[262], v26);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  LODWORD(v9) = *((_DWORD *)this + 36);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      WaveRNNDataFeeder::OneBatchReader::fetch_data(*(WaveRNNDataFeeder::OneBatchReader **)(*((void *)this + 30) + 16 * (v11 + (int)v9 * a3)), (uint64_t)&v15);
      if ((void **)(v26[0] + v10) != &v15) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v15, *(char **)(v26[0] + v10), *(void *)(v26[0] + v10 + 8), (uint64_t)(*(void *)(v26[0] + v10 + 8) - *(void *)(v26[0] + v10)) >> 2);
      }
      if (v22 && v16 - (unsigned char *)v15 >= 1) {
        bzero(v15, 4 * (((unint64_t)(v16 - (unsigned char *)v15) >> 2) - ((unint64_t)(v16 - (unsigned char *)v15) > 3)) + 4);
      }
      uint64_t v12 = v24;
      if ((unint64_t)v24 >= v25)
      {
        unint64_t v13 = (WaveRNNTrainData *)std::vector<WaveRNNTrainData>::__push_back_slow_path<WaveRNNTrainData const&>(&v23, (const WaveRNNTrainData *)&v15);
      }
      else
      {
        WaveRNNTrainData::WaveRNNTrainData(v24, (const WaveRNNTrainData *)&v15);
        unint64_t v13 = (WaveRNNTrainData *)((char *)v12 + 104);
      }
      uint64_t v24 = v13;
      if (__p)
      {
        unint64_t v21 = __p;
        operator delete(__p);
      }
      if (v18)
      {
        unint64_t v19 = v18;
        operator delete(v18);
      }
      uint64_t v27 = (void **)&v17;
      std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v27);
      if (v15)
      {
        uint64_t v16 = v15;
        operator delete(v15);
      }
      ++v11;
      uint64_t v9 = *((int *)this + 36);
      v10 += 24;
    }
    while (v11 < v9);
  }
  v14[0] = v7;
  v14[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  WaveRNNDataFeeder::convert_to_espresso_data((uint64_t)this, a2, &v23, (uint64_t)v14);
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    unint64_t v15 = &v23;
    std::vector<WaveRNNTrainData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    unint64_t v15 = v26;
    std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    unint64_t v15 = &v23;
    std::vector<WaveRNNTrainData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    unint64_t v15 = v26;
    std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  }
}

void sub_1E04D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  a12 = (void **)&a25;
  std::vector<WaveRNNTrainData>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = (void **)(v26 - 120);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(a1);
}

void WaveRNNDataFeeder::convert_to_espresso_data(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  BatchWaveRNNTrainData::BatchWaveRNNTrainData((uint64_t)v48, a3);
  uint64_t v9 = (const char *)(a1 + 160);
  if (*(char *)(a1 + 183) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a1 + 160), *(void *)(a1 + 168));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v9;
    __str.__r_.__value_.__r.__words[2] = *(void *)(a1 + 176);
  }
  if (*(unsigned char *)(a1 + 152))
  {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    std::string::resize(&__str, size + 100, 0);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (*(char *)(a1 + 183) < 0) {
      uint64_t v9 = *(const char **)v9;
    }
    int v12 = sprintf((char *)p_str, v9, a2);
    std::string::basic_string(&v46, &__str, 0, v12, (std::allocator<char> *)&__p);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = v46;
  }
  TrainingUtils::flatten_2d_to_1d<float>(&v49, &v46);
  if (*(unsigned char *)(a1 + 152))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v13 = __str.__r_.__value_.__l.__size_;
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v13 + 6);
    if (v45 < 0) {
      p_p = __p;
    }
    if (v13)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v15 = &__str;
      }
      else {
        unint64_t v15 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(p_p, v15, v13);
    }
    strcpy((char *)p_p + v13, "/state");
    TrainingUtils::read_vector_from_file<float>((uint64_t)&__p, &v46);
    if (v45 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v16 = 0x4EC4EC4EC4EC4EC5 * ((v7 - v8) >> 3);
  memcpy(*(void **)(*(void *)a4 + 8), v46.__r_.__value_.__l.__data_, 4 * ((v49[1] - *v49) >> 2) * v16);
  TrainingUtils::flatten_3d_to_1d<float>(v50, &__p);
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v40, __p, (uint64_t)v44, (v44 - (unsigned char *)__p) >> 2);
  if (*(unsigned char *)(a1 + 152))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v17 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v17 = __str.__r_.__value_.__l.__size_;
    }
    p_src = &__src;
    std::string::basic_string[abi:ne180100]((uint64_t)&__src, v17 + 6);
    if (v39 < 0) {
      p_src = __src;
    }
    if (v17)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v19 = &__str;
      }
      else {
        unint64_t v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(p_src, v19, v17);
    }
    strcpy((char *)p_src + v17, "/input");
    TrainingUtils::read_vector_from_file<float>((uint64_t)&__src, &__p);
    if (v39 < 0) {
      operator delete(__src);
    }
  }
  memcpy(*(void **)(*(void *)a4 + 200), __p, 0xAAAAAAAAAAAAAAACLL* ((uint64_t)(*(void *)(v50[0] + 8) - *(void *)v50[0]) >> 3)* v16* ((*(void *)(*(void *)v50[0] + 8) - **(void **)v50[0]) >> 2));
  TrainingUtils::flatten_2d_to_1d<float>(&v51, &__src);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v34, __src, (uint64_t)v38, (v38 - (unsigned char *)__src) >> 2);
  if (*(unsigned char *)(a1 + 152))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = __str.__r_.__value_.__l.__size_;
    }
    unint64_t v21 = &v31;
    std::string::basic_string[abi:ne180100]((uint64_t)&v31, v20 + 19);
    if (v33 < 0) {
      unint64_t v21 = v31;
    }
    if (v20)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v22 = &__str;
      }
      else {
        char v22 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(v21, v22, v20);
    }
    strcpy((char *)v21 + v20, "/coarse_groundtruth");
    TrainingUtils::read_vector_from_file<float>((uint64_t)&v31, &__src);
    if (v33 < 0) {
      operator delete(v31);
    }
  }
  memcpy(*(void **)(*(void *)a4 + 392), __src, 4 * ((v51[1] - *v51) >> 2) * v16);
  TrainingUtils::flatten_2d_to_1d<float>(&v52, &v31);
  long long v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v28, v31, (uint64_t)v32, (v32 - (unsigned char *)v31) >> 2);
  if (*(unsigned char *)(a1 + 152))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v24 = v26;
    std::string::basic_string[abi:ne180100]((uint64_t)v26, v23 + 17);
    if (v27 < 0) {
      uint64_t v24 = (void **)v26[0];
    }
    if (v23)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v25 = &__str;
      }
      else {
        unint64_t v25 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(v24, v25, v23);
    }
    strcpy((char *)v24 + v23, "/fine_groundtruth");
    TrainingUtils::read_vector_from_file<float>((uint64_t)v26, &v31);
    if (v27 < 0) {
      operator delete(v26[0]);
    }
  }
  memcpy(*(void **)(*(void *)a4 + 584), v31, 4 * ((v52[1] - *v52) >> 2) * v16);
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  if (v31)
  {
    int v32 = v31;
    operator delete(v31);
  }
  if (v34)
  {
    uint64_t v35 = v34;
    operator delete(v34);
  }
  if (__src)
  {
    float v38 = __src;
    operator delete(__src);
  }
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  if (__p)
  {
    unint64_t v44 = __p;
    operator delete(__p);
  }
  if (v46.__r_.__value_.__r.__words[0])
  {
    v46.__r_.__value_.__l.__size_ = v46.__r_.__value_.__r.__words[0];
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  BatchWaveRNNTrainData::~BatchWaveRNNTrainData((BatchWaveRNNTrainData *)v48);
}

void sub_1E0AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,char a54)
{
}

void WaveRNNDataFeeder::fetch_output(WaveRNNDataFeeder *this, int a2)
{
  uint64_t v4 = (const void **)*((void *)this + 1);
  if (v4
  {
    unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
  std::string __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  TrainingData::copy_espresso_buffer_to_data(v4 + 121, &__p);
  unint64_t v6 = (char *)(*((void *)this + 27) + 24 * a2);
  if (v6 != (char *)&__p) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v6, (char *)__p, (uint64_t)v8, (v8 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1E0CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void BatchNeuralFETrainData::~BatchNeuralFETrainData(BatchNeuralFETrainData *this)
{
  uint64_t v9 = (void **)((char *)this + 320);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)((char *)this + 296);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)((char *)this + 272);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  int v2 = (void *)*((void *)this + 31);
  if (v2)
  {
    *((void *)this + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 28);
  if (v3)
  {
    *((void *)this + 29) = v3;
    operator delete(v3);
  }
  uint64_t v9 = (void **)((char *)this + 200);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)((char *)this + 176);
  std::vector<std::vector<std::vector<double>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)((char *)this + 152);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v4 = (void *)*((void *)this + 16);
  if (v4)
  {
    *((void *)this + 17) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 13);
  if (v5)
  {
    *((void *)this + 14) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 10);
  if (v6)
  {
    *((void *)this + 11) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 6);
  if (v7)
  {
    *((void *)this + 7) = v7;
    operator delete(v7);
  }
  uint64_t v9 = (void **)((char *)this + 24);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v8 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v8;
    operator delete(v8);
  }
}

void BatchWaveRNNTrainData::~BatchWaveRNNTrainData(BatchWaveRNNTrainData *this)
{
  unint64_t v5 = (void **)((char *)this + 176);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)((char *)this + 152);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)((char *)this + 128);
  std::vector<std::vector<std::vector<double>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)((char *)this + 104);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  int v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  unint64_t v5 = (void **)((char *)this + 24);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

void *std::vector<std::vector<std::vector<float>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<float>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1E0F2C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<float>>>::__push_back_slow_path<std::vector<std::vector<float>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  std::string::size_type v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Vector<float>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<std::vector<float>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer(v14);
  return v12;
}

void sub_1E1044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<float>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::map<std::string,int>,0>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    long long v8 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v11, v8);
    uint64_t v9 = std::string::insert(&v11, 0, "type must be object, but is ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
    long long v12 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v12, exception);
  }
  *((void *)&v12 + 1) = 0;
  std::string::size_type v13 = 0;
  *(void *)&long long v12 = (char *)&v12 + 8;
  std::transform[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>,std::insert_iterator<std::map<std::string,int>>,void nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::map<std::string,int>,0>(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::map<std::string,int> &)::{lambda(std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&)#1}>(**(void ***)(a1 + 8), (void *)(*(void *)(a1 + 8) + 8), (uint64_t)&v12, (uint64_t)&v12 + 8);
  uint64_t v4 = a2 + 8;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a2, *(char **)(a2 + 8));
  uint64_t v5 = *((void *)&v12 + 1);
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v5;
  std::string::size_type v6 = v13;
  *(void *)(a2 + 16) = v13;
  if (v6)
  {
    *(void *)(v5 + 16) = v4;
    *(void *)&long long v12 = (char *)&v12 + 8;
    *((void *)&v12 + 1) = 0;
    std::string::size_type v13 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    *(void *)a2 = v4;
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v12, (char *)v5);
}

void sub_1E12E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, char *a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t std::transform[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>,std::insert_iterator<std::map<std::string,int>>,void nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::map<std::string,int>,0>(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::map<std::string,int> &)::{lambda(std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&)#1}>(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v13[0] = a3;
  v13[1] = a4;
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      int v14 = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>((unsigned char *)v5 + 56, &v14);
      int v6 = v14;
      if (*((char *)v5 + 55) < 0) {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v5[4], v5[5]);
      }
      else {
        std::string __p = *(std::string *)(v5 + 4);
      }
      int v12 = v6;
      std::insert_iterator<std::map<std::string,int>>::operator=[abi:ne180100]((uint64_t)v13, (const void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          long long v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
    }
    while (v8 != a2);
    return v13[0];
  }
  return a3;
}

void sub_1E1438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::insert_iterator<std::map<std::string,int>>::operator=[abi:ne180100](uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int>>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (uint64_t)a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int>>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  BOOL v6 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  BOOL v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1E15D0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<SpeakerNeuralFEEspressoIO,std::allocator<SpeakerNeuralFEEspressoIO>,int &,int &,void>@<X0>(int *a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = operator new(0x7A8uLL);
  uint64_t result = std::__shared_ptr_emplace<SpeakerNeuralFEEspressoIO>::__shared_ptr_emplace[abi:ne180100]<int &,int &,std::allocator<SpeakerNeuralFEEspressoIO>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1E163C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SpeakerNeuralFEEspressoIO>::__shared_ptr_emplace[abi:ne180100]<int &,int &,std::allocator<SpeakerNeuralFEEspressoIO>,0>(void *a1, int *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_270350;
  SpeakerNeuralFEEspressoIO::SpeakerNeuralFEEspressoIO((SpeakerNeuralFEEspressoIO *)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_1E16A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SpeakerNeuralFEEspressoIO>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_270350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SpeakerNeuralFEEspressoIO>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_270350;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<SpeakerNeuralFEEspressoIO>::__on_zero_shared(uint64_t a1)
{
  std::allocator<SpeakerNeuralFEEspressoIO>::destroy[abi:ne180100]((int)&v1, (void **)(a1 + 24));
}

void std::allocator<SpeakerNeuralFEEspressoIO>::destroy[abi:ne180100](int a1, void **this)
{
  *this = off_2701F8;
  if (*((char *)this + 1927) < 0) {
    operator delete(this[238]);
  }

  NeuralFEEspressoIO::~NeuralFEEspressoIO(this);
}

void *_ZNSt3__115allocate_sharedB8ne180100I18NeuralFEEspressoIONS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x6E0uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceI18NeuralFEEspressoIONS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1E17EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceI18NeuralFEEspressoIONS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_2703A0;
  NeuralFEEspressoIO::NeuralFEEspressoIO((NeuralFEEspressoIO *)(a1 + 3));
  return a1;
}

void sub_1E1848(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NeuralFEEspressoIO>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2703A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NeuralFEEspressoIO>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2703A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<NeuralFEEspressoIO>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((uint64_t)(a2 - a1) >= 17)
  {
    unint64_t v4 = a1;
    long long v14 = xmmword_213DC0;
    unint64_t v5 = a2 - 16;
    if (a2 - 16 > a1)
    {
      uint64_t v7 = ((a2 - a1) >> 4) - 1;
      do
      {
        v13[0] = 0;
        v13[1] = v7;
        uint64_t v8 = std::uniform_int_distribution<long>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>((uint64_t)&v14, a3, v13);
        if (v8)
        {
          unint64_t v9 = v4 + 16 * v8;
          char v10 = *(unsigned char *)v4;
          *(unsigned char *)unint64_t v4 = *(unsigned char *)v9;
          *(unsigned char *)unint64_t v9 = v10;
          uint64_t v11 = *(void *)(v4 + 8);
          *(void *)(v4 + 8) = *(void *)(v9 + 8);
          *(void *)(v9 + 8) = v11;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
        }
        v4 += 16;
        --v7;
      }
      while (v4 < v5);
    }
  }
  return a2;
}

uint64_t std::uniform_int_distribution<long>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = a3[1];
  uint64_t v4 = result - *a3;
  if (result != *a3)
  {
    unint64_t v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, 0x40uLL);
      return std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      unint64_t v7 = __clz(v5);
      uint64_t v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v8 = 64;
      }
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, v8 - v7);
      do
        unint64_t v9 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  if (a3 % 0x1E) {
    unint64_t v3 = a3 / 0x1E + 1;
  }
  else {
    unint64_t v3 = a3 / 0x1E;
  }
  unint64_t v4 = a3 / v3;
  *(void *)(result + 16) = a3 / v3;
  *(void *)(result + 24) = v3;
  unint64_t v5 = (-1 << (a3 / v3)) & 0x7FFFFFFE;
  if (a3 / v3 >= 0x40) {
    unint64_t v5 = 0;
  }
  *(void *)(result + 40) = v5;
  if ((v5 ^ 0x7FFFFFFE) > v5 / v3)
  {
    ++v3;
    unint64_t v4 = a3 / v3;
    *(void *)(result + 16) = a3 / v3;
    *(void *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      unint64_t v6 = 0;
      *(void *)(result + 32) = v3 + v4 * v3 - a3;
      *(void *)(result + 40) = 0;
      goto LABEL_13;
    }
    *(void *)(result + 40) = (-1 << v4) & 0x7FFFFFFE;
  }
  *(void *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 > 0x3E) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = 0x3FFFFFFFuLL >> v4 << (v4 + 1);
  }
LABEL_13:
  *(void *)(result + 48) = v6;
  unsigned int v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4) {
    unsigned int v7 = 0;
  }
  if (v4 >= 0x1F) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  }
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 60) = v8;
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t result = 0;
    uint64_t v4 = 0;
    unint64_t v5 = *(void *)(a1 + 16);
    unsigned int v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        unsigned int v7 = v6 / 0xADC8;
        unsigned int v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        BOOL v9 = v8 >= v7;
        unsigned int v10 = v8 - v7;
        if (v9) {
          int v11 = 0;
        }
        else {
          int v11 = 0x7FFFFFFF;
        }
        unsigned int v6 = v11 + v10;
        unint64_t v12 = v6 - 1;
      }
      while (*(void *)(a1 + 40) <= v12);
      uint64_t v13 = result << v5;
      if (v5 >= 0x40) {
        uint64_t v13 = 0;
      }
      uint64_t result = v13 + (*(_DWORD *)(a1 + 56) & v12);
      ++v4;
    }
    while (v4 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    uint64_t result = 0;
  }
  unint64_t v14 = *(void *)(a1 + 24);
  if (v2 < v14)
  {
    unint64_t v15 = *(unsigned int **)a1;
    unint64_t v16 = *(void *)(a1 + 48);
    unint64_t v17 = *(void *)(a1 + 16);
    int v18 = *(_DWORD *)(a1 + 60);
    unsigned int v19 = *v15;
    while (1)
    {
      unsigned int v20 = v19 / 0xADC8;
      unsigned int v21 = 48271 * (v19 % 0xADC8);
      v20 *= 3399;
      BOOL v9 = v21 >= v20;
      unsigned int v22 = v21 - v20;
      if (v9) {
        int v23 = 0;
      }
      else {
        int v23 = 0x7FFFFFFF;
      }
      unsigned int v19 = v23 + v22;
      unint64_t v24 = v19 - 1;
      if (v16 > v24)
      {
        uint64_t v25 = result << (v17 + 1);
        if (v17 >= 0x3F) {
          uint64_t v25 = 0;
        }
        uint64_t result = v25 + (v18 & v24);
        if (++v2 == v14) {
          break;
        }
      }
    }
    *unint64_t v15 = v19;
  }
  return result;
}

void std::vector<NeuralFETrainData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        std::allocator<NeuralFETrainData>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<NeuralFETrainData>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a2 + 128);
  if (v3)
  {
    *(void *)(a2 + 136) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a2 + 104);
  if (v4)
  {
    *(void *)(a2 + 112) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a2 + 80);
  if (v5)
  {
    *(void *)(a2 + 88) = v5;
    operator delete(v5);
  }
  unsigned int v6 = *(void **)(a2 + 48);
  if (v6)
  {
    *(void *)(a2 + 56) = v6;
    operator delete(v6);
  }
  unsigned int v8 = (void **)(a2 + 24);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unsigned int v7 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v7;
    operator delete(v7);
  }
}

uint64_t std::vector<NeuralFETrainData>::__push_back_slow_path<NeuralFETrainData>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1AF286BCA1AF286) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0xD79435E50D79436 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xD79435E50D79436 * ((a1[2] - *a1) >> 3);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 3) >= 0xD79435E50D7943) {
    unint64_t v6 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    unsigned int v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NeuralFETrainData>>((uint64_t)(a1 + 2), v6);
  }
  else {
    unsigned int v7 = 0;
  }
  unsigned int v10 = v7;
  int v11 = &v7[152 * v3];
  uint64_t v13 = &v7[152 * v6];
  std::allocator<NeuralFETrainData>::construct[abi:ne180100]<NeuralFETrainData,NeuralFETrainData>((uint64_t)(a1 + 2), v11, a2);
  unint64_t v12 = v11 + 152;
  std::vector<NeuralFETrainData>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<NeuralFETrainData>::~__split_buffer(&v10);
  return v8;
}

void sub_1E1E78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<NeuralFETrainData>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<NeuralFETrainData>::construct[abi:ne180100]<NeuralFETrainData,NeuralFETrainData>(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 24);
  a2[5] = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  *((_OWORD *)a2 + 3) = *(_OWORD *)(a3 + 48);
  a2[8] = *(void *)(a3 + 64);
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 48) = 0;
  uint64_t v3 = *(void *)(a3 + 72);
  a2[11] = 0;
  a2[12] = 0;
  a2[9] = v3;
  a2[10] = 0;
  *((_OWORD *)a2 + 5) = *(_OWORD *)(a3 + 80);
  a2[12] = *(void *)(a3 + 96);
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  a2[13] = 0;
  a2[14] = 0;
  a2[15] = 0;
  *(_OWORD *)(a2 + 13) = *(_OWORD *)(a3 + 104);
  a2[15] = *(void *)(a3 + 120);
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  a2[16] = 0;
  a2[17] = 0;
  a2[18] = 0;
  __n128 result = *(__n128 *)(a3 + 128);
  *((__n128 *)a2 + 8) = result;
  a2[18] = *(void *)(a3 + 144);
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  return result;
}

uint64_t std::vector<NeuralFETrainData>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NeuralFETrainData>,std::reverse_iterator<NeuralFETrainData*>,std::reverse_iterator<NeuralFETrainData*>,std::reverse_iterator<NeuralFETrainData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<NeuralFETrainData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(152 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<NeuralFETrainData>,std::reverse_iterator<NeuralFETrainData*>,std::reverse_iterator<NeuralFETrainData*>,std::reverse_iterator<NeuralFETrainData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 152;
      std::allocator<NeuralFETrainData>::construct[abi:ne180100]<NeuralFETrainData,NeuralFETrainData>(a1, (void *)(v7 - 152), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 152;
      *((void *)&v16 + 1) -= 152;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NeuralFETrainData>,std::reverse_iterator<NeuralFETrainData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<NeuralFETrainData>,std::reverse_iterator<NeuralFETrainData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<NeuralFETrainData>,std::reverse_iterator<NeuralFETrainData*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<NeuralFETrainData>,std::reverse_iterator<NeuralFETrainData*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<NeuralFETrainData>::destroy[abi:ne180100](v3, v1);
      v1 += 152;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<NeuralFETrainData>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<NeuralFETrainData>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 152;
    std::allocator<NeuralFETrainData>::destroy[abi:ne180100](v4, i - 152);
  }
}

void std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<int>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::vector<int>>::__vallocate[abi:ne180100]((void *)a1, v11);
    unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v20, a2, v13, v9);
    unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      unsigned int v19 = *(void **)(v17 - 24);
      v17 -= 24;
      int v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1E2354(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1E235C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(char *result, int *a2, int *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (float *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      int v8 = *a2++;
      *v7++ = (float)v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E23C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void boost::algorithm::iter_split<std::vector<std::string>,std::string const&,boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(char *)(a2 + 23);
  BOOL v5 = v4 < 0;
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if (v5) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  uint64_t v8 = v6 + v7;
  size_t v9 = *(void *)(a3 + 16);
  void v11[2] = v9;
  v11[0] = 0;
  if (v9 < 0x11)
  {
    memcpy(v11, (const void *)a3, v9);
    int v12 = *(_DWORD *)(a3 + 24);
    boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(v10, v6, v8, (uint64_t)v11);
  }
  operator new[]();
}

void sub_1E25A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2(&a9);
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2(&a19);
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2(&a42);
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2((uint64_t *)(v42 - 176));
  _Unwind_Resume(a1);
}

void boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v6 = *(void *)(a4 + 16);
  v7[2] = v6;
  v7[0] = 0;
  if (v6 < 0x11)
  {
    memcpy(v7, (const void *)a4, v6);
    int v8 = *(_DWORD *)(a4 + 24);
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, (uint64_t)v7);
  }
  operator new[]();
}

void sub_1E2744(_Unwind_Exception *a1)
{
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2(v1);
  _Unwind_Resume(a1);
}

void boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(void *a1, uint64_t a2)
{
  size_t v4 = *(void *)(a2 + 16);
  v5[2] = v4;
  v5[0] = 0;
  if (v4 < 0x11)
  {
    memcpy(v5, (const void *)a2, v4);
    int v6 = *(_DWORD *)(a2 + 24);
    boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::function2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, (uint64_t)v5);
  }
  operator new[]();
}

void sub_1E2874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11) {
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  }
  _Unwind_Resume(exception_object);
}

void boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::function2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(void *a1, uint64_t a2)
{
  *a1 = 0;
  size_t v4 = *(void *)(a2 + 16);
  v5[2] = v4;
  v5[0] = 0;
  if (v4 < 0x11)
  {
    memcpy(v5, (const void *)a2, v4);
    int v6 = *(_DWORD *)(a2 + 24);
    boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>((uint64_t)a1, (uint64_t)v5);
  }
  operator new[]();
}

void sub_1E2988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11) {
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  }
  _Unwind_Resume(exception_object);
}

void boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void *)(a2 + 16);
  v4[2] = v3;
  v4[0] = 0;
  if (v3 < 0x11)
  {
    memcpy(v4, (const void *)a2, v3);
    int v5 = *(_DWORD *)(a2 + 24);
    boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>((uint64_t)boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>)::stored_vtable, (uint64_t)v4);
  }
  operator new[]();
}

void sub_1E2AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11) {
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  }
  _Unwind_Resume(exception_object);
}

char *boost::detail::function::function_obj_invoker2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>,boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::invoke(uint64_t *a1, char *a2, char *a3)
{
  return boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>::operator()<std::__wrap_iter<char *>>(*a1, a2, a3);
}

void *_ZNSt3__115allocate_sharedB8ne180100I17WaveRNNEspressoIONS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x4A0uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceI17WaveRNNEspressoIONS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1E2B18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceI17WaveRNNEspressoIONS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_270400;
  WaveRNNEspressoIO::WaveRNNEspressoIO((WaveRNNEspressoIO *)(a1 + 3));
  return a1;
}

void sub_1E2B74(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<WaveRNNEspressoIO>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_270400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WaveRNNEspressoIO>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_270400;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<WaveRNNEspressoIO>::__on_zero_shared(uint64_t a1)
{
  std::allocator<WaveRNNEspressoIO>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<WaveRNNEspressoIO>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_270230;
  if (*(char *)(a2 + 1159) < 0) {
    operator delete(*(void **)(a2 + 1136));
  }
  if (*(char *)(a2 + 967) < 0) {
    operator delete(*(void **)(a2 + 944));
  }
  if (*(char *)(a2 + 775) < 0) {
    operator delete(*(void **)(a2 + 752));
  }
  if (*(char *)(a2 + 583) < 0) {
    operator delete(*(void **)(a2 + 560));
  }
  if (*(char *)(a2 + 391) < 0) {
    operator delete(*(void **)(a2 + 368));
  }
  if (*(char *)(a2 + 199) < 0)
  {
    size_t v3 = *(void **)(a2 + 176);
    operator delete(v3);
  }
}

void *std::allocate_shared[abi:ne180100]<WaveRNNDataFeeder::OneBatchReader,std::allocator<WaveRNNDataFeeder::OneBatchReader>,boost::filesystem::path &,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> &,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &,WaveRNNDataFeeder::Config &,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X4>, void *a5@<X8>)
{
  unint64_t v10 = operator new(0xE0uLL);
  uint64_t result = std::__shared_ptr_emplace<WaveRNNDataFeeder::OneBatchReader>::__shared_ptr_emplace[abi:ne180100]<boost::filesystem::path &,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> &,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &,WaveRNNDataFeeder::Config &,std::allocator<WaveRNNDataFeeder::OneBatchReader>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1E2D44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<WaveRNNDataFeeder::OneBatchReader>::__shared_ptr_emplace[abi:ne180100]<boost::filesystem::path &,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> &,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &,WaveRNNDataFeeder::Config &,std::allocator<WaveRNNDataFeeder::OneBatchReader>,0>(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_270450;
  WaveRNNDataFeeder::OneBatchReader::OneBatchReader((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1E2DA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<WaveRNNDataFeeder::OneBatchReader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_270450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WaveRNNDataFeeder::OneBatchReader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_270450;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<WaveRNNDataFeeder::OneBatchReader>::__on_zero_shared(uint64_t a1)
{
  std::allocator<WaveRNNDataFeeder::OneBatchReader>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<WaveRNNDataFeeder::OneBatchReader>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void **)(a2 + 176);
  if (v3)
  {
    *(void *)(a2 + 184) = v3;
    operator delete(v3);
  }
  size_t v4 = *(void **)(a2 + 152);
  if (v4)
  {
    *(void *)(a2 + 160) = v4;
    operator delete(v4);
  }
  int v5 = (void **)(a2 + 128);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  int v5 = (void **)(a2 + 88);
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

uint64_t std::vector<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>*>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>*>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>*>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>*>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    size_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    size_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void std::vector<WaveRNNTrainData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<WaveRNNTrainData>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<WaveRNNTrainData>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void **)(a2 + 72);
  if (v3)
  {
    *(void *)(a2 + 80) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a2 + 48);
  if (v4)
  {
    *(void *)(a2 + 56) = v4;
    operator delete(v4);
  }
  uint64_t v6 = (void **)(a2 + 24);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v5 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v5;
    operator delete(v5);
  }
}

uint64_t std::vector<WaveRNNTrainData>::__push_back_slow_path<WaveRNNTrainData const&>(uint64_t *a1, const WaveRNNTrainData *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x13B13B13B13B13BLL) {
    unint64_t v9 = 0x276276276276276;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<WaveRNNTrainData>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v13 = v10;
  long long v14 = (WaveRNNTrainData *)&v10[104 * v4];
  uint64_t v16 = &v10[104 * v9];
  WaveRNNTrainData::WaveRNNTrainData(v14, a2);
  long long v15 = (char *)v14 + 104;
  std::vector<WaveRNNTrainData>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<WaveRNNTrainData>::~__split_buffer(&v13);
  return v11;
}

void sub_1E32E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<WaveRNNTrainData>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void WaveRNNTrainData::WaveRNNTrainData(WaveRNNTrainData *this, const WaveRNNTrainData *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(this, *(const void **)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 2);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((void *)this + 3, *((void *)a2 + 3), *((void *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 6, *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 2);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 9, *((const void **)a2 + 9), *((void *)a2 + 10), (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2);
  *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
}

void sub_1E33C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 56) = v5;
    operator delete(v5);
  }
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v6 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<WaveRNNTrainData>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<WaveRNNTrainData>,std::reverse_iterator<WaveRNNTrainData*>,std::reverse_iterator<WaveRNNTrainData*>,std::reverse_iterator<WaveRNNTrainData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<WaveRNNTrainData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(104 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<WaveRNNTrainData>,std::reverse_iterator<WaveRNNTrainData*>,std::reverse_iterator<WaveRNNTrainData*>,std::reverse_iterator<WaveRNNTrainData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 104;
      std::allocator<WaveRNNTrainData>::construct[abi:ne180100]<WaveRNNTrainData,WaveRNNTrainData>(a1, v7 - 104, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 104;
      *((void *)&v16 + 1) -= 104;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<WaveRNNTrainData>,std::reverse_iterator<WaveRNNTrainData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<WaveRNNTrainData>::construct[abi:ne180100]<WaveRNNTrainData,WaveRNNTrainData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 64) = *(void *)(a3 + 64);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  __n128 result = *(__n128 *)(a3 + 72);
  *(__n128 *)(a2 + 72) = result;
  *(void *)(a2 + 88) = *(void *)(a3 + 88);
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(unsigned char *)(a2 + 96) = *(unsigned char *)(a3 + 96);
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<WaveRNNTrainData>,std::reverse_iterator<WaveRNNTrainData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<WaveRNNTrainData>,std::reverse_iterator<WaveRNNTrainData*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<WaveRNNTrainData>,std::reverse_iterator<WaveRNNTrainData*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<WaveRNNTrainData>::destroy[abi:ne180100](v3, v1);
      v1 += 104;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<WaveRNNTrainData>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<WaveRNNTrainData>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 104;
    std::allocator<WaveRNNTrainData>::destroy[abi:ne180100](v4, i - 104);
  }
}

void NeuralFEDataFeeder::batching_data()
{
  __assert_rtn("batching_data", "DataFeeder.cc", 300, "batch_data.size() != 0");
}

void NeuralFEDataFeeder::token_mapping(uint8_t *buf, uint64_t **a2, uint64_t ***a3, os_log_t log)
{
  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t **)*a2;
  }
  *(_DWORD *)std::string buf = 136315138;
  *a3 = a2;
  _os_log_error_impl(&def_5A5E8, log, OS_LOG_TYPE_ERROR, "Unfound phone mapping for '%s' ", buf, 0xCu);
}

void bilinear(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  uint64_t v8 = a1[1] - *a1;
  uint64_t v49 = v8 >> 3;
  unint64_t v51 = (a2[1] - *a2) >> 3;
  if (v51 <= v8 >> 3) {
    unint64_t v9 = v8 >> 3;
  }
  else {
    unint64_t v9 = (a2[1] - *a2) >> 3;
  }
  std::vector<double>::vector(v58, v9);
  std::vector<double>::vector(__p, v9);
  if (v9)
  {
    uint64_t v42 = a2;
    uint64_t v43 = a3;
    uint64_t v52 = 0;
    uint64_t v10 = *a1;
    uint64_t v45 = a1[1];
    unint64_t v11 = (v45 - *a1) >> 3;
    double v12 = a4 + a4;
    unint64_t v44 = (double *)v58[0];
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    unint64_t v47 = v11;
    unint64_t v56 = v9;
    do
    {
      if (v45 == v10)
      {
        double v14 = 0.0;
      }
      else
      {
        unint64_t v13 = 0;
        double v14 = 0.0;
        uint64_t v15 = 1;
        unint64_t v16 = v9;
        do
        {
          unint64_t v54 = v16 - 1;
          if (v16 <= 1) {
            uint64_t v17 = 1;
          }
          else {
            uint64_t v17 = v16;
          }
          unint64_t v18 = v9 + ~v13;
          double v19 = pow(v12, (double)v13);
          unint64_t v20 = 0;
          uint64_t v21 = v52;
          do
          {
            if (v56 != v13)
            {
              unint64_t v22 = 0;
              if (v20) {
                double v23 = -1.0;
              }
              else {
                double v23 = 1.0;
              }
              do
              {
                if (v21 == v22)
                {
                  unint64_t v24 = comb(v13, v20);
                  double v14 = v14 + v19 * (*(double *)(v10 + 8 * (v49 + ~v13)) * (double)(comb(v18, v22) * v24)) * v23;
                }
                ++v22;
              }
              while (v17 != v22);
            }
            ++v20;
            --v21;
          }
          while (v20 != v15);
          ++v13;
          ++v15;
          unint64_t v16 = v54;
          unint64_t v9 = v56;
        }
        while (v13 != v47);
      }
      v44[v52++] = v14;
    }
    while (v52 != v9);
    uint64_t v53 = 0;
    uint64_t v25 = *v42;
    uint64_t v46 = v42[1];
    char v48 = (double *)__p[0];
    unint64_t v26 = (v46 - *v42) >> 3;
    if (v26 <= 1) {
      unint64_t v26 = 1;
    }
    unint64_t v50 = v26;
    do
    {
      if (v46 == v25)
      {
        double v28 = 0.0;
      }
      else
      {
        unint64_t v27 = 0;
        double v28 = 0.0;
        uint64_t v29 = 1;
        unint64_t v30 = v9;
        do
        {
          unint64_t v55 = v30 - 1;
          if (v30 <= 1) {
            uint64_t v31 = 1;
          }
          else {
            uint64_t v31 = v30;
          }
          unint64_t v32 = v9 + ~v27;
          double v33 = pow(v12, (double)v27);
          unint64_t v34 = 0;
          uint64_t v35 = v53;
          do
          {
            if (v9 != v27)
            {
              unint64_t v36 = 0;
              if (v34) {
                double v37 = -1.0;
              }
              else {
                double v37 = 1.0;
              }
              do
              {
                if (v35 == v36)
                {
                  unint64_t v38 = comb(v27, v34);
                  double v28 = v28 + v33 * (*(double *)(v25 + 8 * (v51 + ~v27)) * (double)(comb(v32, v36) * v38)) * v37;
                }
                ++v36;
              }
              while (v31 != v36);
            }
            ++v34;
            --v35;
            unint64_t v9 = v56;
          }
          while (v34 != v29);
          ++v27;
          ++v29;
          unint64_t v30 = v55;
        }
        while (v27 != v50);
      }
      char v39 = v48;
      v48[v53++] = v28;
    }
    while (v53 != v9);
    unint64_t v40 = (double *)v58[0];
    double v41 = 1.0 / *v48;
    a3 = v43;
    do
    {
      *unint64_t v40 = v41 * *v40;
      ++v40;
      *char v39 = v41 * *v39;
      ++v39;
      --v9;
    }
    while (v9);
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_6vectorIdNS_9allocatorIdEEEES6_EEC2B8ne180100IJLm0ELm1EEJS6_S6_EJEJEJRS6_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(a3, (uint64_t)v58, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v58[0])
  {
    v58[1] = v58[0];
    operator delete(v58[0]);
  }
}

void sub_1E3B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

unint64_t comb(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = 1;
  if (a1 >= 2)
  {
    for (unint64_t i = a1; i > 1; --i)
      v2 *= i;
  }
  uint64_t v4 = 1;
  if (a2 >= 2)
  {
    for (unint64_t j = a2; j > 1; --j)
      v4 *= j;
  }
  unint64_t v6 = a1 - a2;
  uint64_t v7 = 1;
  if (a1 - a2 >= 2)
  {
    do
      v7 *= v6--;
    while (v6 > 1);
  }
  return v2 / (v7 * v4);
}

void A_filter_coeffs(double a1@<D0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x28uLL);
  v7[1] = (uint64_t)(v4 + 5);
  v7[2] = (uint64_t)(v4 + 5);
  v4[4] = 0;
  *(_OWORD *)uint64_t v4 = xmmword_214050;
  *((_OWORD *)v4 + 1) = unk_214060;
  v7[0] = (uint64_t)v4;
  uint64_t v5 = operator new(0x38uLL);
  v6[1] = (uint64_t)v5 + 56;
  v6[2] = (uint64_t)v5 + 56;
  *uint64_t v5 = xmmword_214078;
  v5[1] = unk_214088;
  v5[2] = xmmword_214098;
  *((void *)v5 + 6) = 0x4430B7902E200523;
  v6[0] = (uint64_t)v5;
  bilinear(v7, v6, a2, a1);
  operator delete(v5);

  operator delete(v4);
}

void sub_1E3C8C(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void lfilter(double **a1@<X0>, void *a2@<X1>, double **a3@<X2>, double **a4@<X8>)
{
  unint64_t v5 = a2[1] - *a2;
  if (v5 != (char *)a1[1] - (char *)*a1) {
    lfilter();
  }
  if (v5 <= 0xF) {
    lfilter();
  }
  std::vector<double>::vector(a4, a3[1] - *a3);
  std::vector<double>::vector(__p, ((uint64_t)(a2[1] - *a2) >> 3) - 1);
  unint64_t v9 = *a4;
  uint64_t v10 = a4[1];
  unint64_t v11 = (double *)__p[0];
  if (*a4 != v10)
  {
    double v12 = *a3;
    unint64_t v13 = *a1;
    uint64_t v14 = a2[1] - *a2;
    uint64_t v15 = v14 >> 3;
    uint64_t v16 = (uint64_t)(*a1 + 1);
    uint64_t v17 = *a2 + 8;
    if ((unint64_t)(v14 >> 3) <= 3) {
      uint64_t v15 = 3;
    }
    uint64_t v18 = v15 - 2;
    do
    {
      double v19 = v11;
      double v20 = *v11 + *v13 * *v12;
      *unint64_t v9 = v20;
      uint64_t v21 = (double *)v16;
      unint64_t v22 = (double *)v17;
      uint64_t v23 = v18;
      if ((unint64_t)v14 >= 0x11)
      {
        do
        {
          unint64_t v24 = v19;
          double v25 = v19[1];
          ++v19;
          double v26 = v25;
          double v27 = *v21++;
          double v28 = v26 + *v12 * v27;
          double v29 = *v22++;
          *unint64_t v24 = v28 - *v9 * v29;
          --v23;
        }
        while (v23);
        double v20 = *v9;
      }
      double v30 = *v12++;
      *double v19 = v30 * *v21 - v20 * *v22;
      ++v9;
    }
    while (v9 != v10);
  }
  if (v11)
  {
    __p[1] = v11;
    operator delete(v11);
  }
}

void sub_1E3E08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void hanning_window(int a1@<W0>, void *a2@<X8>)
{
  uint64_t v3 = std::vector<double>::vector(a2, a1);
  if (a1 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a1;
    uint64x2_t v15 = (uint64x2_t)vdupq_n_s64((unint64_t)a1 - 1);
    uint64x2_t v6 = (uint64x2_t)xmmword_204A30;
    int64x2_t v13 = vdupq_n_s64(2uLL);
    float64x2_t v14 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
    *(double *)&uint64_t v7 = (double)a1 + -1.0;
    uint64_t v8 = *v3;
    uint64_t v9 = (v5 + 1) & 0x1FFFFFFFELL;
    float64x2_t v12 = (float64x2_t)vdupq_lane_s64(v7, 0);
    do
    {
      int32x2_t v18 = vmovn_s64((int64x2_t)vcgeq_u64(v15, v6));
      int64x2_t v19 = (int64x2_t)v6;
      v10.i64[0] = (int)v4;
      v10.i64[1] = (int)v4 + 1;
      float64x2_t __x = vdivq_f64(vmulq_f64(vcvtq_f64_s64(v10), v14), v12);
      double v17 = cos(__x.f64[1]);
      double v11 = cos(__x.f64[0]);
      if (v18.i8[0]) {
        *(double *)(v8 + 8 * v4) = (1.0 - v11) * 0.5;
      }
      if (v18.i8[4]) {
        *(double *)(v8 + 8 * v4 + 8) = (1.0 - v17) * 0.5;
      }
      v4 += 2;
      uint64x2_t v6 = (uint64x2_t)vaddq_s64(v19, v13);
    }
    while (v9 != v4);
  }
}

void convolve_same(const void **a1@<X0>, void *a2@<X1>, char **a3@<X8>)
{
  std::vector<double>::vector(__dst, (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3) + ((uint64_t)(a2[1] - *a2) >> 3) - 1);
  uint64x2_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (v7 == *a1)
  {
    uint64_t v8 = *a1;
  }
  else
  {
    memmove(__dst[0], v6, v7 - (unsigned char *)*a1);
    uint64x2_t v6 = *a1;
    uint64_t v8 = a1[1];
  }
  std::vector<double>::vector(a3, (v8 - (unsigned char *)v6) >> 3);
  vDSP_convD((const double *)__dst[0], 1, (const double *)(a2[1] - 8), -1, (double *)*a3, 1, (a3[1] - *a3) >> 3, (uint64_t)(a2[1] - *a2) >> 3);
  uint64_t v9 = *a3;
  unint64_t v10 = (unint64_t)((uint64_t)(a2[1] - *a2) >> 3) >> 1;
  uint64_t v11 = 0;
  std::vector<double>::insert((uint64_t)a3, v9, v10, (char *)&v11);
  std::vector<double>::resize((uint64_t)a3, ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
}

void sub_1E4078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  int64x2_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::insert(uint64_t a1, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = __src;
  if (a3)
  {
    uint64_t v5 = a4;
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v8 = a1 + 16;
    uint64_t v9 = v10;
    uint64_t v11 = *(char **)(v8 - 8);
    if (a3 <= (v10 - (uint64_t)v11) >> 3)
    {
      uint64_t v18 = v11 - __src;
      if (a3 <= (v11 - __src) >> 3)
      {
        uint64_t v21 = *(char **)(v8 - 8);
        uint64_t v20 = a3;
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = v18 >> 3;
        uint64_t v21 = &v11[8 * (a3 - (v18 >> 3))];
        do
        {
          *(void *)&v11[v19] = *(void *)a4;
          v19 += 8;
        }
        while (8 * a3 - 8 * v20 != v19);
        *(void *)(a1 + 8) = v21;
        if (v11 == __src) {
          return v4;
        }
      }
      unint64_t v22 = &__src[8 * a3];
      uint64_t v23 = &v21[-8 * a3];
      unint64_t v24 = v21;
      if (v23 < v11)
      {
        unint64_t v24 = v21;
        do
        {
          uint64_t v25 = *(void *)v23;
          v23 += 8;
          *(void *)unint64_t v24 = v25;
          v24 += 8;
        }
        while (v23 < v11);
      }
      *(void *)(a1 + 8) = v24;
      if (v21 != v22) {
        memmove(&v21[-8 * ((v21 - v22) >> 3)], __src, v21 - v22);
      }
      if (v4 <= v5)
      {
        if (*(void *)(a1 + 8) <= (unint64_t)v5) {
          unint64_t v26 = 0;
        }
        else {
          unint64_t v26 = a3;
        }
        v5 += 8 * v26;
      }
      double v27 = v4;
      do
      {
        *(void *)double v27 = *(void *)v5;
        v27 += 8;
        --v20;
      }
      while (v20);
    }
    else
    {
      float64x2_t v12 = *(unsigned char **)a1;
      unint64_t v13 = a3 + ((uint64_t)&v11[-*(void *)a1] >> 3);
      if (v13 >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = (__src - v12) >> 3;
      uint64_t v15 = v9 - (void)v12;
      if (v15 >> 2 > v13) {
        unint64_t v13 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v13;
      }
      uint64_t v36 = v8;
      if (v16) {
        double v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v8, v16);
      }
      else {
        double v17 = 0;
      }
      double v28 = &v17[8 * v14];
      std::string __p = v17;
      double v33 = v28;
      uint64_t v35 = &v17[8 * v16];
      uint64_t v29 = 8 * a3;
      double v30 = &v28[8 * a3];
      do
      {
        *(void *)double v28 = *(void *)v5;
        v28 += 8;
        v29 -= 8;
      }
      while (v29);
      unint64_t v34 = v30;
      uint64_t v4 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
      if (v34 != v33) {
        v34 += (v33 - v34 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v4;
}

void sub_1E429C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int64_t find_vad(uint64_t a1, double a2)
{
  hanning_window((int)(a2 * 0.05), __p);
  std::vector<double>::vector(__C, (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  vDSP_vmulD(*(const double **)a1, 1, *(const double **)a1, 1, __C[0], 1, (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  convolve_same((const void **)__C, __p, (char **)&v18);
  double v17 = 0.0;
  vDSP_maxvD(v18, 1, &v17, (v19 - (char *)v18) >> 3);
  unint64_t v4 = (unint64_t)(a2 * 0.05);
  double v5 = v17 / 3162.27766;
  int64_t v6 = v19 - (char *)v18;
  if (v19 != (char *)v18)
  {
    unint64_t v7 = 0;
    if ((unint64_t)((v19 - (char *)v18) >> 3) <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = (v19 - (char *)v18) >> 3;
    }
    uint64_t v9 = v18;
    while (*v9 <= v5)
    {
      ++v7;
      ++v9;
      if (!--v8)
      {
        int64_t v6 = 0;
        goto LABEL_11;
      }
    }
    BOOL v10 = v7 >= v4;
    int64_t v6 = v7 - v4;
    if (!v10) {
      int64_t v6 = 0;
    }
  }
LABEL_11:
  int64_t v11 = (unint64_t)(a2 * 0.2);
  if ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3 < v11) {
    int64_t v11 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  }
  int64_t v12 = v6 - (uint64_t)(a2 * 0.2);
  if (v12 <= v11) {
    int64_t v13 = v11;
  }
  else {
    int64_t v13 = v12;
  }
  uint64_t v14 = (v19 - (char *)v18) >> 3;
  while (v14)
  {
    double v15 = v18[--v14];
    if (v15 > v5) {
      goto LABEL_21;
    }
  }
  if (!v18) {
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v19 = (char *)v18;
  operator delete(v18);
LABEL_22:
  if (__C[0])
  {
    __C[1] = __C[0];
    operator delete(__C[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v13;
}

void sub_1E447C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void assess_audio_quality(char *a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X8>)
{
  std::operator+<char>();
  std::string::push_back(&v15, 39);
  std::string v16 = v15;
  reader = PCMFile::create_reader(a1);
  unint64_t v7 = (PCMFile::Reader *)reader;
  if (reader && (*((_DWORD *)reader + 2) & 0x80000000) == 0)
  {
    int v8 = *((_DWORD *)reader + 6);
    unint64_t v9 = *((void *)reader + 6);
    std::vector<float>::vector(&v15, v9);
    PCMFile::Reader::read_samples(v7, v9, v15.__r_.__value_.__l.__data_, 4, 1, 1.0);
    std::string::size_type v10 = v15.__r_.__value_.__r.__words[0];
    long long v13 = *a2;
    uint64_t v14 = *((void *)a2 + 2);
    *(double *)&long long v13 = (double)v8;
    int64_t v11 = operator new(0x10uLL);
    v12[1] = (uint64_t)(v11 + 2);
    void v12[2] = (uint64_t)(v11 + 2);
    void *v11 = v9;
    v11[1] = v10;
    v12[0] = (uint64_t)v11;
    assess_audio_quality(v12, (double *)&v13);
  }
  *(_OWORD *)&v15.__r_.__value_.__r.__words[1] = 0uLL;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15.__r_.__value_.__l.__size_;
  log_audio_quality((uint64_t)&v16, (uint64_t)&v15, 1, 1, a3);
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::destroy((uint64_t)&v15, (void *)v15.__r_.__value_.__l.__size_);
  if (v7) {
    (*(void (**)(PCMFile::Reader *))(*(void *)v7 + 8))(v7);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1E4690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::destroy((uint64_t)&a12, a13);
  operator delete(v24);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  if (*(char *)(v25 - 57) < 0) {
    operator delete(*(void **)(v25 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t *log_audio_quality@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  if (a4)
  {
    uint64_t v9 = *(void *)(a2 + 16);
    LogObject = Diagnostics_GetLogObject();
    int64_t v11 = LogObject;
    if (v9)
    {
      BOOL v12 = os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO);
      if (a3)
      {
        if (v12)
        {
          if (*(char *)(a1 + 23) < 0) {
            a1 = *(void *)a1;
          }
          int v25 = 0;
          uint64_t v13 = *std::map<AudioQualityMetric,double>::at(a2, &v25);
          int v24 = 4;
          uint64_t v14 = *std::map<AudioQualityMetric,double>::at(a2, &v24);
          int v23 = 1;
          uint64_t v15 = *std::map<AudioQualityMetric,double>::at(a2, &v23);
          int v22 = 5;
          uint64_t v16 = *std::map<AudioQualityMetric,double>::at(a2, &v22);
          *(_DWORD *)std::string buf = 136316418;
          uint64_t v27 = a1;
          __int16 v28 = 2080;
          uint64_t v29 = "normalized";
          __int16 v30 = 2048;
          uint64_t v31 = v13;
          __int16 v32 = 2048;
          uint64_t v33 = v14;
          __int16 v34 = 2048;
          uint64_t v35 = v15;
          __int16 v36 = 2048;
          uint64_t v37 = v16;
LABEL_14:
          _os_log_impl(&def_5A5E8, v11, OS_LOG_TYPE_INFO, "%s %s audio quality SPL %.1f:%.1f SNR %.1f:%.1f", buf, 0x3Eu);
        }
      }
      else if (v12)
      {
        if (*(char *)(a1 + 23) < 0) {
          a1 = *(void *)a1;
        }
        int v25 = 2;
        uint64_t v17 = *std::map<AudioQualityMetric,double>::at(a2, &v25);
        int v24 = 6;
        uint64_t v18 = *std::map<AudioQualityMetric,double>::at(a2, &v24);
        int v23 = 3;
        uint64_t v19 = *std::map<AudioQualityMetric,double>::at(a2, &v23);
        int v22 = 7;
        uint64_t v20 = *std::map<AudioQualityMetric,double>::at(a2, &v22);
        *(_DWORD *)std::string buf = 136316418;
        uint64_t v27 = a1;
        __int16 v28 = 2080;
        uint64_t v29 = "unnormalized";
        __int16 v30 = 2048;
        uint64_t v31 = v17;
        __int16 v32 = 2048;
        uint64_t v33 = v18;
        __int16 v34 = 2048;
        uint64_t v35 = v19;
        __int16 v36 = 2048;
        uint64_t v37 = v20;
        goto LABEL_14;
      }
    }
    else if (os_log_type_enabled(LogObject, OS_LOG_TYPE_ERROR))
    {
      log_audio_quality((uint64_t *)a1, v11);
    }
  }
  return std::map<AudioQualityMetric,double>::map[abi:ne180100](a5, a2);
}

void assess_audio_quality(uint64_t *a1, double *a2)
{
}

void sub_1E4E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,void *a31,uint64_t a32,char a33,void *a34)
{
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::destroy((uint64_t)&a30, a31);
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::destroy((uint64_t)&a33, a34);
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::destroy(v34 - 112, *(void **)(v34 - 104));
  _Unwind_Resume(a1);
}

void sub_1E4EBC()
{
}

void isolate_voice(double a1, unint64_t a2, const double *a3)
{
  uint64_t v3 = a3;
  EffectAudioUnit::create((EffectAudioUnit *)0x61756678, a1);
}

void sub_1E5078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v19 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v17 + 8) = v19;
    operator delete(v19);
  }
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  _Unwind_Resume(exception_object);
}

void assess_audio_quality_oneway(uint64_t *a1, double *a2, int a3)
{
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  memset(__p, 0, sizeof(__p));
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 == v6)
  {
    unint64_t v7 = 0;
    int v8 = 0;
  }
  else
  {
    do
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,float const*,float const*,std::back_insert_iterator<std::vector<float>>,0>(*(_DWORD **)(v5 + 8), (_DWORD *)(*(void *)(v5 + 8) + 4 * *(void *)v5), (uint64_t)__p);
      v5 += 16;
    }
    while (v5 != v6);
    unint64_t v7 = (const float *)__p[0];
    int v8 = __p[1];
  }
  normalize_recording_volume((v8 - (unsigned char *)v7) >> 2, v7, (uint64_t)a2, &v13);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __p[0] = v13;
  *(_OWORD *)&__p[1] = v14;
  std::vector<double>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(v15, (float *)v13, (float *)v14, (uint64_t)(v14 - (void)v13) >> 2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v9 = v15[0];
  if (a3)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<double>::__init_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<double *>>,std::reverse_iterator<std::__wrap_iter<double *>>>((char *)__p, (uint64_t)v15[1], (uint64_t)v15[1], (uint64_t)v15[0], (uint64_t)v15[0], v15[1] - v15[0]);
    std::string::size_type v10 = (const double *)__p[0];
    int64_t v11 = v15[0];
    BOOL v12 = v16;
    *(_OWORD *)uint64_t v15 = *(_OWORD *)__p;
    uint64_t v16 = __p[2];
    __p[0] = v11;
    __p[2] = v12;
    if (v11)
    {
      __p[1] = v11;
      operator delete(v11);
      uint64_t v9 = v15[0];
    }
    else
    {
      uint64_t v9 = v10;
    }
  }
  isolate_voice(*a2, v15[1] - v9, v9);
}

void sub_1E55F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_6vectorIdNS_9allocatorIdEEEES6_EEC2B8ne180100IJLm0ELm1EEJS6_S6_EJEJEJRS6_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(a1 + 3, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  return a1;
}

void sub_1E572C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<AudioQualityMetric,double>::at(uint64_t a1, int *a2)
{
  unint64_t v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  int v3 = *a2;
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4) {
        break;
      }
      unint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    unint64_t v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

uint64_t *std::map<AudioQualityMetric,double>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<AudioQualityMetric,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<AudioQualityMetric,double>,std::__tree_node<std::__value_type<AudioQualityMetric,double>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1E57E0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<AudioQualityMetric,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<AudioQualityMetric,double>,std::__tree_node<std::__value_type<AudioQualityMetric,double>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    int v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<AudioQualityMetric,double>,std::__map_value_compare<AudioQualityMetric,std::__value_type<AudioQualityMetric,double>,std::less<AudioQualityMetric>,true>,std::allocator<std::__value_type<AudioQualityMetric,double>>>::__emplace_hint_unique_key_args<AudioQualityMetric,std::pair<AudioQualityMetric const,double> const&>(v5, v6, v4 + 8, (_OWORD *)v4 + 2);
      unint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          int v8 = v7;
          unint64_t v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          int v4 = v8;
        }
        while (!v9);
      }
      int v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<AudioQualityMetric,double>,std::__map_value_compare<AudioQualityMetric,std::__value_type<AudioQualityMetric,double>,std::less<AudioQualityMetric>,true>,std::allocator<std::__value_type<AudioQualityMetric,double>>>::__emplace_hint_unique_key_args<AudioQualityMetric,std::pair<AudioQualityMetric const,double> const&>(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<AudioQualityMetric,double>,std::__map_value_compare<AudioQualityMetric,std::__value_type<AudioQualityMetric,double>,std::less<AudioQualityMetric>,true>,std::allocator<std::__value_type<AudioQualityMetric,double>>>::__find_equal<AudioQualityMetric>(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<AudioQualityMetric,double>,std::__map_value_compare<AudioQualityMetric,std::__value_type<AudioQualityMetric,double>,std::less<AudioQualityMetric>,true>,std::allocator<std::__value_type<AudioQualityMetric,double>>>::__find_equal<AudioQualityMetric>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    BOOL v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      BOOL v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

double *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>,std::__wrap_iter<double *>>(double *a1, double *a2, double *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    int v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      BOOL v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      uint64_t v13 = v6;
      do
      {
        double v14 = *v13;
        if (*v13 < *a1)
        {
          *uint64_t v13 = *a1;
          *a1 = v14;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>((uint64_t)a1, a4, v9, a1);
        }
        ++v13;
      }
      while (v13 != a3);
    }
    if (v8 >= 9)
    {
      uint64_t v15 = (unint64_t)v8 >> 3;
      do
      {
        uint64_t v16 = 0;
        double v17 = *a1;
        int v18 = a1;
        do
        {
          uint64_t v19 = v18;
          v18 += v16 + 1;
          uint64_t v20 = 2 * v16;
          uint64_t v16 = (2 * v16) | 1;
          uint64_t v21 = v20 + 2;
          if (v21 < v15 && *v18 < v18[1])
          {
            ++v18;
            uint64_t v16 = v21;
          }
          *uint64_t v19 = *v18;
        }
        while (v16 <= (uint64_t)((unint64_t)(v15 - 2) >> 1));
        if (v18 != --v6)
        {
          double *v18 = *v6;
          *int v6 = v17;
          uint64_t v22 = (char *)v18 - (char *)a1 + 8;
          if (v22 < 9) {
            continue;
          }
          unint64_t v23 = (((unint64_t)v22 >> 3) - 2) >> 1;
          int v24 = &a1[v23];
          double v25 = *v24;
          double v17 = *v18;
          if (*v24 >= *v18) {
            continue;
          }
          do
          {
            double *v18 = v25;
            int v18 = v24;
            if (!v23) {
              break;
            }
            unint64_t v23 = (v23 - 1) >> 1;
            int v24 = &a1[v23];
            double v25 = *v24;
          }
          while (*v24 < v17);
        }
        double *v18 = v17;
      }
      while (v15-- > 2);
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) | 1;
      uint64_t v8 = (double *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && *v8 < v8[1])
      {
        ++v8;
        uint64_t v7 = v9;
      }
      double v10 = *v8;
      double v11 = *a4;
      if (*v8 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v12 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (double *)(result + 8 * v7);
          uint64_t v13 = v12 + 2;
          if (v13 < a3 && *v8 < v8[1])
          {
            ++v8;
            uint64_t v7 = v13;
          }
          double v10 = *v8;
        }
        while (*v8 >= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

void std::__function::__func<isolate_voice(double,unsigned long,double const*)::$_0,std::allocator<isolate_voice(double,unsigned long,double const*)::$_0>,unsigned long ()(unsigned long,float *)>::~__func()
{
}

__n128 std::__function::__func<isolate_voice(double,unsigned long,double const*)::$_0,std::allocator<isolate_voice(double,unsigned long,double const*)::$_0>,unsigned long ()(unsigned long,float *)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = off_2704A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<isolate_voice(double,unsigned long,double const*)::$_0,std::allocator<isolate_voice(double,unsigned long,double const*)::$_0>,unsigned long ()(unsigned long,float *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_2704A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<isolate_voice(double,unsigned long,double const*)::$_0,std::allocator<isolate_voice(double,unsigned long,double const*)::$_0>,unsigned long ()(unsigned long,float *)>::operator()(uint64_t a1, unint64_t *a2, float **a3)
{
  unint64_t v3 = *a2;
  uint64_t v4 = *a3;
  int64_t v5 = *(double ***)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 8) - **(void **)(a1 + 24);
  if (v6 >= *a2) {
    unint64_t v7 = *a2;
  }
  else {
    unint64_t v7 = *(void *)(a1 + 8) - **(void **)(a1 + 24);
  }
  uint64_t v8 = *v5;
  uint64_t v9 = (uint64_t)&(*v5)[v7];
  if (v7)
  {
    uint64_t v10 = 8 * v7;
    double v11 = *a3;
    do
    {
      double v12 = *v8++;
      float v13 = v12;
      *v11++ = v13;
      v10 -= 8;
    }
    while (v10);
  }
  *int64_t v5 = (double *)v9;
  **(void **)(a1 + 24) += v7;
  if (v6 < v3)
  {
    double v14 = &v4[v6];
    uint64_t v15 = 4 * v3 - 4 * v6;
    if (v15 >= 1) {
      bzero(v14, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
    }
  }
  return v3;
}

uint64_t std::__function::__func<isolate_voice(double,unsigned long,double const*)::$_0,std::allocator<isolate_voice(double,unsigned long,double const*)::$_0>,unsigned long ()(unsigned long,float *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **std::__function::__func<isolate_voice(double,unsigned long,double const*)::$_0,std::allocator<isolate_voice(double,unsigned long,double const*)::$_0>,unsigned long ()(unsigned long,float *)>::target_type()
{
}

float *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<float *,float *,std::back_insert_iterator<std::vector<double>>>(uint64_t a1, float *a2, float *a3, uint64_t a4)
{
  uint64_t v4 = a2;
  uint64_t v9 = a4;
  if (a2 == a3) {
    return a2;
  }
  int64_t v5 = a3;
  do
  {
    float v6 = *v4++;
    double v8 = v6;
    std::back_insert_iterator<std::vector<double>>::operator=[abi:ne180100](&v9, &v8);
  }
  while (v4 != v5);
  return v5;
}

uint64_t *std::back_insert_iterator<std::vector<double>>::operator=[abi:ne180100](uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  int64_t v5 = *(void **)(*a1 + 8);
  float v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    double v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      float v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v6, v12);
      double v8 = *(void **)v4;
      int64_t v5 = *(void **)(v4 + 8);
    }
    else
    {
      float v13 = 0;
    }
    double v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)double v14 = *a2;
    unint64_t v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *int64_t v5 = *a2;
    unint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

_DWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,float const*,float const*,std::back_insert_iterator<std::vector<float>>,0>(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
    std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  int64_t v5 = *(_DWORD **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    double v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      float v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v6, v12);
      double v8 = *(_DWORD **)v4;
      int64_t v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      float v13 = 0;
    }
    double v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)double v14 = *a2;
    unint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *int64_t v5 = *a2;
    unint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

char *std::vector<double>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(void *a1, float *a2, float *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  __n128 result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    int v18 = (char *)a1[1];
    float v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      unint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = (double *)result;
        do
        {
          float v28 = *v6++;
          *v27++ = v28;
          v26 += 8;
        }
        while (v6 != a3);
      }
      double v17 = (char *)(v26 - result);
      unint64_t v12 = result;
    }
    else
    {
      uint64_t v20 = &a2[v19];
      if (v12 != result)
      {
        uint64_t v21 = 4 * v19;
        do
        {
          float v22 = *v6++;
          *(double *)__n128 result = v22;
          result += 8;
          v21 -= 4;
        }
        while (v21);
      }
      unint64_t v23 = v12;
      if (v20 != a3)
      {
        int v24 = (double *)v12;
        do
        {
          float v25 = *v20++;
          *v24++ = v25;
          v23 += 8;
        }
        while (v20 != a3);
      }
      double v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<std::pair<int,float>>::__vallocate[abi:ne180100](a1, v11);
    double v14 = (double *)a1[1];
    float v13 = a1 + 1;
    unint64_t v12 = (char *)v14;
    uint64_t v15 = v14;
    if (v6 != a3)
    {
      uint64_t v15 = (double *)v12;
      do
      {
        float v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != a3);
    }
    double v17 = (char *)((char *)v15 - v12);
  }
  *float v13 = &v17[(void)v12];
  return result;
}

char *std::vector<double>::__init_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<double *>>,std::reverse_iterator<std::__wrap_iter<double *>>>(char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a6)
  {
    uint64_t v8 = result;
    __n128 result = std::vector<std::pair<int,float>>::__vallocate[abi:ne180100](result, a6);
    uint64_t v9 = (void *)*((void *)v8 + 1);
    while (a3 != a5)
    {
      uint64_t v10 = *(void *)(a3 - 8);
      a3 -= 8;
      *v9++ = v10;
    }
    *((void *)v8 + 1) = v9;
  }
  return result;
}

void sub_1E6350(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<AudioQualityMetric,double>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      std::__tree<std::__value_type<AudioQualityMetric,double>,std::__map_value_compare<AudioQualityMetric,std::__value_type<AudioQualityMetric,double>,std::less<AudioQualityMetric>,true>,std::allocator<std::__value_type<AudioQualityMetric,double>>>::__emplace_hint_unique_key_args<AudioQualityMetric,std::pair<AudioQualityMetric const,double> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_1E63D4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void lfilter()
{
}

{
  __assert_rtn("lfilter", "AssessQuality.cc", 105, "A.size() == B.size()");
}

void log_audio_quality(uint64_t *a1, NSObject *a2)
{
  if (*((char *)a1 + 23) >= 0) {
    unint64_t v2 = a1;
  }
  else {
    unint64_t v2 = (uint64_t *)*a1;
  }
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_error_impl(&def_5A5E8, a2, OS_LOG_TYPE_ERROR, "%s unable to determine audio quality", (uint8_t *)&v3, 0xCu);
}

uint64_t TrainingUtils::read_metadata_from_file@<X0>(const char *a1@<X0>, uint64_t *a2@<X8>)
{
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (a1[23] >= 0) {
      int64_t v5 = a1;
    }
    else {
      int64_t v5 = *(const char **)a1;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Read metadata from %s", buf, 0xCu);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::ifstream::basic_ifstream((void (__cdecl ***)(std::ifstream *__hidden))buf);
  if (!v17)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    if (a1[23] >= 0) {
      unint64_t v11 = a1;
    }
    else {
      unint64_t v11 = *(const char **)a1;
    }
    StringFormatter::StringFormatter((StringFormatter *)&__p, "Can't open file from %s", v11);
    std::logic_error::logic_error(exception, &__p);
  }
  memset(&__p, 0, sizeof(__p));
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)]);
    uint64_t v6 = std::locale::use_facet(&v12, &std::ctype<char>::id);
    unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v12);
    uint64_t v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(buf, (uint64_t)&__p, v7);
    if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0) {
      break;
    }
    v15[3] = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::string&>((uint64_t)&__p, (uint64_t)v15, 1, (uint64_t)&v12);
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v15);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::push_back[abi:ne180100](a2, (uint64_t)&v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, LOBYTE(v12.__locale_));
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 32] | 4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::filebuf::~filebuf();
  std::istream::~istream();
  return std::ios::~ios();
}

void sub_1E680C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      std::ifstream::~ifstream(&a22);
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::string&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v14, a2);
  if ((v8 & 0x80u) == 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = v9;
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v12 = v8;
  }
  else {
    uint64_t v12 = v10;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>(v11, v11 + v12, (uint64_t)v14, a3, (uint64_t)v15);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::parse((uint64_t)v15, 1, a4);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::~lexer((uint64_t)&v16);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v15);
  return std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v14);
}

void sub_1E69A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::~lexer(v14 + 40);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](&a13);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](&a9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v13);
  _Unwind_Resume(a1);
}

uint64_t TrainingUtils::read_json_from_file@<X0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (a1[23] >= 0) {
      int64_t v5 = a1;
    }
    else {
      int64_t v5 = *(const char **)a1;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Read json from %s", buf, 0xCu);
  }
  std::ifstream::basic_ifstream((void (__cdecl ***)(std::ifstream *__hidden))buf);
  if (!v12)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    if (a1[23] >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *(const char **)a1;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v9, "Can't open file from %s", v8);
    std::logic_error::logic_error(exception, &v9);
  }
  v10[3] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(buf, (uint64_t)v10, 1, a2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v10);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 32] | 4);
  }
  std::filebuf::~filebuf();
  std::istream::~istream();
  return std::ios::~ios();
}

void sub_1E6C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ifstream::~ifstream(&a20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t TrainingUtils::write_json_to_file(uint64_t *a1, uint64_t a2)
{
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a1 + 23) >= 0) {
      int64_t v5 = a1;
    }
    else {
      int64_t v5 = (uint64_t *)*a1;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Write json to %s", buf, 0xCu);
  }
  std::ofstream::basic_ofstream((void (__cdecl ***)(std::ofstream *__hidden))buf);
  if (!v12)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v8 = (const char *)a1;
    std::string v9 = exception;
    if (v8[23] < 0) {
      uint64_t v8 = *(const char **)v8;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v10, "Can't open file from %s", v8);
    std::logic_error::logic_error(v9, &v10);
  }
  nlohmann::operator<<((uint64_t *)buf, a2);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 32] | 4);
  }
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1E6EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ofstream::~ofstream(&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t *nlohmann::operator<<(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  int64_t v5 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v6 = *((void *)v5 + 3);
  *((void *)v5 + 3) = 0;
  unsigned __int8 v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_270520;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_270570;
  v7[1].__shared_owners_ = (uint64_t)a1;
  uint64_t v12 = v7 + 1;
  float v13 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v8 = (const std::ios_base *)((char *)a1 + *(void *)(v4 - 24));
  std::ios_base::fmtflags fmtflags = v8[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v8);
    std::string v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
    std::ios_base::fmtflags fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
    std::locale::~locale(&v14);
    v8[1].__fmtflags_ = fmtflags;
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer((uint64_t)v15, (uint64_t)&v12, (char)fmtflags, 0);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(v15, a2, v6 > 0, 0, v6 & ~(v6 >> 63), 0);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)v15);
  return a1;
}

void sub_1E70F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, char a12)
{
  std::locale::~locale(&a11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

uint64_t TrainingUtils::write_metadata_to_file(uint64_t *a1, uint64_t *a2)
{
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a1 + 23) >= 0) {
      int64_t v5 = a1;
    }
    else {
      int64_t v5 = (uint64_t *)*a1;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Write metadata to %s", buf, 0xCu);
  }
  std::ofstream::basic_ofstream((void (__cdecl ***)(std::ofstream *__hidden))buf);
  if (!v14)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::string v10 = (const char *)a1;
    uint64_t v11 = exception;
    if (v10[23] < 0) {
      std::string v10 = *(const char **)v10;
    }
    StringFormatter::StringFormatter((StringFormatter *)&v12, "Can't open file from %s", v10);
    std::logic_error::logic_error(v11, &v12);
  }
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      nlohmann::operator<<((uint64_t *)buf, v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\n", 1);
      v6 += 16;
    }
    while (v6 != v7);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 32] | 4);
  }
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1E73A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ofstream::~ofstream(&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void TrainingUtils::accumulate_espresso_buffer_data(const float **a1, float **a2, float a3)
{
  uint64_t v4 = 1;
  for (uint64_t i = 2; i != 6; ++i)
    v4 *= (void)a1[i];
  cblas_saxpy(v4, a3, *a1, 1, *a2, 1);
}

void TrainingUtils::scale_espresso_buffer_data(float **a1, float a2)
{
  uint64_t v3 = 1;
  for (uint64_t i = 2; i != 6; ++i)
    v3 *= (void)a1[i];
  cblas_sscal(v3, a2, *a1, 1);
}

void *TrainingUtils::slice_espresso_buffer_data<float>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    TrainingUtils::slice_espresso_buffer_data<float>();
  }
  if (!a2) {
    TrainingUtils::slice_espresso_buffer_data<float>();
  }
  long long v11 = *(_OWORD *)(a1 + 48);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 16);
  long long v14 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v15;
  *(_OWORD *)(a2 + 96) = v13;
  *(_OWORD *)(a2 + 48) = v11;
  *(_OWORD *)(a2 + 64) = v12;
  *(_OWORD *)(a2 + 32) = v14;
  long long v16 = *(_OWORD *)(a1 + 112);
  long long v17 = *(_OWORD *)(a1 + 128);
  long long v18 = *(_OWORD *)(a1 + 144);
  *(void *)(a2 + 160) = *(void *)(a1 + 160);
  *(_OWORD *)(a2 + 128) = v17;
  *(_OWORD *)(a2 + 144) = v18;
  *(_OWORD *)(a2 + 112) = v16;
  *(void *)(a2 + 80) = a6 - a5;
  *(void *)(a2 + 88) = a4 - a3;
  *(void *)(a2 + 16) = a6 - a5;
  *(void *)(a2 + 24) = a4 - a3;
  uint64_t v19 = 1;
  for (uint64_t i = 16; i != 48; i += 8)
    v19 *= *(void *)(a2 + i);
  *(void *)(a2 + 136) = v19;
  *(void *)(a2 + 144) = v19;
  *(void *)(a2 + 152) = v19;
  __n128 result = malloc_type_malloc(4 * v19, 0x100004052888210uLL);
  *(void *)a2 = result;
  if (a4 > a3)
  {
    uint64_t v22 = 0;
    unint64_t v23 = a3 - a4;
    do
    {
      __n128 result = memcpy((void *)(*(void *)a2 + 4 * *(void *)(a2 + 80) * v22), (const void *)(*(void *)a1 + 4 * *(void *)(a1 + 80) * (a3 + v22) + 4 * a5), 4 * *(void *)(a2 + 80));
      ++v22;
    }
    while (v23 + v22);
  }
  return result;
}

void *_ZN13TrainingUtils26slice_espresso_buffer_dataIDF16_EEvP17espresso_buffer_tS2_mmmm(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    TrainingUtils::slice_espresso_buffer_data<float>();
  }
  if (!a2) {
    TrainingUtils::slice_espresso_buffer_data<float>();
  }
  long long v11 = *(_OWORD *)(a1 + 48);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 16);
  long long v14 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v15;
  *(_OWORD *)(a2 + 96) = v13;
  *(_OWORD *)(a2 + 48) = v11;
  *(_OWORD *)(a2 + 64) = v12;
  *(_OWORD *)(a2 + 32) = v14;
  long long v16 = *(_OWORD *)(a1 + 112);
  long long v17 = *(_OWORD *)(a1 + 128);
  long long v18 = *(_OWORD *)(a1 + 144);
  *(void *)(a2 + 160) = *(void *)(a1 + 160);
  *(_OWORD *)(a2 + 128) = v17;
  *(_OWORD *)(a2 + 144) = v18;
  *(_OWORD *)(a2 + 112) = v16;
  *(void *)(a2 + 80) = a6 - a5;
  *(void *)(a2 + 88) = a4 - a3;
  *(void *)(a2 + 16) = a6 - a5;
  *(void *)(a2 + 24) = a4 - a3;
  uint64_t v19 = 1;
  for (uint64_t i = 16; i != 48; i += 8)
    v19 *= *(void *)(a2 + i);
  *(void *)(a2 + 136) = v19;
  *(void *)(a2 + 144) = v19;
  *(void *)(a2 + 152) = v19;
  __n128 result = malloc_type_malloc(2 * v19, 0x1000040BDFB0063uLL);
  *(void *)a2 = result;
  if (a4 > a3)
  {
    uint64_t v22 = 0;
    unint64_t v23 = a3 - a4;
    do
    {
      __n128 result = memcpy((void *)(*(void *)a2 + 2 * *(void *)(a2 + 80) * v22), (const void *)(*(void *)a1 + 2 * *(void *)(a1 + 80) * (a3 + v22) + 2 * a5), 2 * *(void *)(a2 + 80));
      ++v22;
    }
    while (v23 + v22);
  }
  return result;
}

float SignalUtils::mulaw_encode(SignalUtils *this, float a2, float a3)
{
  float v3 = 0.0;
  if (a2 > 0.0) {
    float v3 = 1.0;
  }
  if (a2 >= 0.0) {
    float v4 = v3;
  }
  else {
    float v4 = -1.0;
  }
  float v5 = a3 + -1.0;
  float v6 = log1pf(fabsf(a2) * (float)(a3 + -1.0));
  return v4 * (float)(v6 / log1pf(v5));
}

void SignalUtils::preemphasize(uint64_t *a1@<X0>, float **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    float v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = a2 + 2;
    float v8 = 0.0;
    do
    {
      float v9 = *(float *)(v3 + 4 * v6) + (float)(v8 * -0.86);
      if ((unint64_t)v5 >= *v7)
      {
        long long v11 = *a2;
        uint64_t v12 = v5 - *a2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = *v7 - (void)v11;
        if (v14 >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          long long v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a2 + 2), v15);
          long long v11 = *a2;
          float v5 = a2[1];
        }
        else
        {
          long long v16 = 0;
        }
        long long v17 = (float *)&v16[4 * v12];
        *long long v17 = v9;
        std::string v10 = v17 + 1;
        while (v5 != v11)
        {
          int v18 = *((_DWORD *)v5-- - 1);
          *((_DWORD *)v17-- - 1) = v18;
        }
        *a2 = v17;
        a2[1] = v10;
        a2[2] = (float *)&v16[4 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *float v5 = v9;
        std::string v10 = v5 + 1;
      }
      a2[1] = v10;
      uint64_t v3 = *a1;
      float v8 = *(float *)(*a1 + 4 * v6++);
      float v5 = v10;
    }
    while (v6 < (a1[1] - *a1) >> 2);
  }
}

void sub_1E7850(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SignalUtils::quantization(SignalUtils *this, float a2)
{
  if (a2 < -1.0 || a2 > 1.0) {
    SignalUtils::quantization();
  }
  return (int)((a2 + 1.0) * 0.5 * (double)((int)this - 1) + 0.5);
}

float SignalUtils::dequantization(SignalUtils *this, int a2)
{
  return (float)((float)((float)(int)this / (float)(a2 - 1)) * 2.0) + -1.0;
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)&long long v8 = a1;
  *((void *)&v8 + 1) = a2;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::parser(a5, &v8, (uint64_t)v9, a4);
  return std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v9);
}

void sub_1E7960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::parse(uint64_t a1, int a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v33, a1);
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser((uint64_t)&v34, a3, (uint64_t)v33, *(unsigned char *)(a1 + 176));
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v33);
    nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, &v34);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
    if (a2)
    {
      int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(a1 + 40);
      *(_DWORD *)(a1 + 32) = v6;
      if (v6 != 15)
      {
        uint64_t v7 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(a1 + 40, &v32);
        long long v28 = *(_OWORD *)(a1 + 64);
        uint64_t v29 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(v25, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xFu, (uint64_t)v25, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v28, (uint64_t)&__p, (nlohmann::detail::exception *)&v30);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v34, v7, (uint64_t)&v32, (uint64_t)&v30);
        v30.__vftable = (std::exception_vtbl *)off_26F198;
        std::runtime_error::~runtime_error(&v31);
        std::exception::~exception(&v30);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v32.__r_.__value_.__l.__data_);
        }
      }
    }
    if (v39)
    {
      v23[0] = 9;
      long long v8 = (uint64_t **)&v24;
      uint64_t v24 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      unsigned __int8 v9 = *(unsigned char *)a3;
      *(unsigned char *)a3 = v23[0];
      v23[0] = v9;
      uint64_t v10 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v24;
      uint64_t v24 = v10;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      int v11 = v23[0];
    }
    else
    {
      if (*(unsigned char *)a3 != 9)
      {
LABEL_27:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser((uint64_t)&v34);
        return;
      }
      v21[0] = 0;
      long long v8 = (uint64_t **)&v22;
      uint64_t v22 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      unsigned __int8 v17 = *(unsigned char *)a3;
      *(unsigned char *)a3 = v21[0];
      v21[0] = v17;
      uint64_t v18 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v22;
      uint64_t v22 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
      int v11 = v21[0];
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v8, v11);
    goto LABEL_27;
  }
  char v12 = *(unsigned char *)(a1 + 176);
  uint64_t v34 = a3;
  long long v35 = 0u;
  long long v36 = 0u;
  char v37 = 0;
  char v38 = v12;
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, &v34);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  if (a2)
  {
    int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(a1 + 40);
    *(_DWORD *)(a1 + 32) = v13;
    if (v13 != 15)
    {
      uint64_t v14 = *(void *)(a1 + 64);
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(a1 + 40, &v32);
      long long v28 = *(_OWORD *)(a1 + 64);
      uint64_t v29 = *(void *)(a1 + 80);
      std::string::basic_string[abi:ne180100]<0>(v25, "value");
      nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xFu, (uint64_t)v25, &__p);
      nlohmann::detail::parse_error::create(101, (uint64_t *)&v28, (uint64_t)&__p, (nlohmann::detail::exception *)&v30);
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v34, v14, (uint64_t)&v32, (uint64_t)&v30);
      v30.__vftable = (std::exception_vtbl *)off_26F198;
      std::runtime_error::~runtime_error(&v31);
      std::exception::~exception(&v30);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v37)
  {
    v19[0] = 9;
    uint64_t v20 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    unsigned __int8 v15 = *(unsigned char *)a3;
    *(unsigned char *)a3 = v19[0];
    v19[0] = v15;
    long long v16 = *(uint64_t **)(a3 + 8);
    *(void *)(a3 + 8) = v20;
    uint64_t v20 = v16;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
  }
  if ((void)v35)
  {
    *((void *)&v35 + 1) = v35;
    operator delete((void *)v35);
  }
}

void sub_1E7D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::runtime_error a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  nlohmann::detail::exception::~exception(&a31);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  uint64_t v43 = *(void **)(v41 - 200);
  if (v43)
  {
    *(void *)(v41 - 192) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::parser(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  uint64_t v7 = std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1, a3);
  *(_DWORD *)(v7 + 32) = 0;
  uint64_t v8 = v7 + 40;
  *(_OWORD *)(v7 + 40) = *a2;
  *(_DWORD *)(v7 + 56) = -1;
  *(unsigned char *)(v7 + 60) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 136) = "";
  *(void *)(v7 + 152) = 0;
  *(void *)(v7 + 160) = 0;
  *(void *)(v7 + 144) = 0;
  *(_DWORD *)(a1 + 168) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_decimal_point();
  *(unsigned char *)(a1 + 176) = a4;
  *(_DWORD *)(a1 + 32) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v8);
  return a1;
}

void sub_1E7F14(_Unwind_Exception *a1)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::~lexer(v2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(uint64_t a1)
{
  if (!*(void *)(a1 + 24)
    && !nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::skip_bom((unsigned __int8 **)a1))
  {
    unsigned __int8 v9 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
    goto LABEL_21;
  }
  while (2)
  {
    while (1)
    {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
      int v2 = *(_DWORD *)(a1 + 16);
      if (v2 > 31) {
        break;
      }
      if ((v2 - 9) >= 2 && v2 != 13)
      {
        if ((v2 + 1) < 2) {
          return 15;
        }
        goto LABEL_40;
      }
    }
    if (v2 > 90)
    {
      if (v2 <= 109)
      {
        if (v2 == 91) {
          return 8;
        }
        if (v2 == 93) {
          return 10;
        }
        if (v2 != 102) {
          goto LABEL_40;
        }
        qmemcpy(v11, "false", 5);
        float v5 = v11;
        uint64_t v6 = a1;
        unint64_t v7 = 5;
        uint64_t v8 = 2;
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_literal(v6, (unsigned __int8 *)v5, v7, v8);
      }
      if (v2 <= 122)
      {
        if (v2 == 110)
        {
          int v10 = 1819047278;
          float v5 = &v10;
          uint64_t v6 = a1;
          unint64_t v7 = 4;
          uint64_t v8 = 3;
        }
        else
        {
          if (v2 != 116) {
            goto LABEL_40;
          }
          int v12 = 1702195828;
          float v5 = &v12;
          uint64_t v6 = a1;
          unint64_t v7 = 4;
          uint64_t v8 = 1;
        }
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_literal(v6, (unsigned __int8 *)v5, v7, v8);
      }
      if (v2 == 123) {
        return 9;
      }
      if (v2 == 125) {
        return 11;
      }
LABEL_40:
      unsigned __int8 v9 = "invalid literal";
LABEL_21:
      *(void *)(a1 + 96) = v9;
      return 14;
    }
    switch(v2)
    {
      case ' ':
        continue;
      case '""':
        uint64_t result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_string(a1);
        break;
      case ',':
        uint64_t result = 13;
        break;
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        uint64_t result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number(a1);
        break;
      case ':':
        uint64_t result = 12;
        break;
      default:
        goto LABEL_40;
    }
    return result;
  }
}

BOOL nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::skip_bom(unsigned __int8 **a1)
{
  if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get(a1) == 239)
  {
    return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get(a1) == 187
        && nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get(a1) == 191;
  }
  else
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget((uint64_t)a1);
    return 1;
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get(unsigned __int8 **a1)
{
  *(int64x2_t *)(a1 + 3) = vaddq_s64(*(int64x2_t *)(a1 + 3), vdupq_n_s64(1uLL));
  if (*((unsigned char *)a1 + 20))
  {
    *((unsigned char *)a1 + 20) = 0;
    int v2 = *((_DWORD *)a1 + 4);
  }
  else
  {
    uint64_t v3 = *a1;
    if (*a1 == a1[1])
    {
      int v2 = -1;
    }
    else
    {
      int v2 = *v3;
      *a1 = v3 + 1;
    }
    *((_DWORD *)a1 + 4) = v2;
  }
  if (v2 == -1) {
    return 0xFFFFFFFFLL;
  }
  float v5 = a1[7];
  unint64_t v4 = (unint64_t)a1[8];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = a1 + 6;
    unint64_t v8 = (unint64_t)a1[6];
    unsigned __int8 v9 = &v5[-v8];
    uint64_t v10 = (uint64_t)&v5[-v8 + 1];
    if (v10 < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v4 - v8;
    if (2 * v11 > v10) {
      uint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      int v13 = (unsigned __int8 *)operator new(v12);
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = &v13[v12];
    v9[(void)v13] = v2;
    uint64_t v6 = (uint64_t)&v9[(void)v13 + 1];
    if (v5 == (unsigned __int8 *)v8)
    {
      int v13 = &v9[(void)v13];
    }
    else
    {
      unsigned __int8 v15 = &v5[~v8];
      do
      {
        unsigned __int8 v16 = *--v5;
        (v15--)[(void)v13] = v16;
      }
      while (v5 != (unsigned __int8 *)v8);
      float v5 = *v7;
    }
    a1[6] = v13;
    a1[7] = (unsigned __int8 *)v6;
    a1[8] = v14;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *float v5 = v2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[7] = (unsigned __int8 *)v6;
  uint64_t result = *((unsigned int *)a1 + 4);
  if (result == 10)
  {
    uint64_t v18 = (uint64_t)(a1[5] + 1);
    a1[4] = 0;
    a1[5] = (unsigned __int8 *)v18;
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_literal(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  if (*a2 != *(unsigned __int8 *)(a1 + 16)) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal();
  }
  if (a3 >= 2)
  {
    unint64_t v6 = a3 - 1;
    unint64_t v7 = a2 + 1;
    while (1)
    {
      unsigned __int8 v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
      int v9 = *v7++;
      if (v9 != v8) {
        break;
      }
      if (!--v6) {
        return a4;
      }
    }
    *(void *)(a1 + 96) = "invalid literal";
    return 14;
  }
  return a4;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_string(uint64_t a1)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(a1);
  if (*(_DWORD *)(a1 + 16) != 34) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string();
  }
  while (2)
  {
    while (2)
    {
      int v2 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1)
         + 1;
      uint64_t result = 4;
      unint64_t v4 = "invalid string: missing closing quote";
      switch(v2)
      {
        case 0:
          goto LABEL_82;
        case 1:
          unint64_t v4 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
          goto LABEL_82;
        case 2:
          unint64_t v4 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
          goto LABEL_82;
        case 3:
          unint64_t v4 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
          goto LABEL_82;
        case 4:
          unint64_t v4 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
          goto LABEL_82;
        case 5:
          unint64_t v4 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
          goto LABEL_82;
        case 6:
          unint64_t v4 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
          goto LABEL_82;
        case 7:
          unint64_t v4 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
          goto LABEL_82;
        case 8:
          unint64_t v4 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
          goto LABEL_82;
        case 9:
          unint64_t v4 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
          goto LABEL_82;
        case 10:
          unint64_t v4 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
          goto LABEL_82;
        case 11:
          unint64_t v4 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
          goto LABEL_82;
        case 12:
          unint64_t v4 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
          goto LABEL_82;
        case 13:
          unint64_t v4 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
          goto LABEL_82;
        case 14:
          unint64_t v4 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
          goto LABEL_82;
        case 15:
          unint64_t v4 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
          goto LABEL_82;
        case 16:
          unint64_t v4 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
          goto LABEL_82;
        case 17:
          unint64_t v4 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
          goto LABEL_82;
        case 18:
          unint64_t v4 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
          goto LABEL_82;
        case 19:
          unint64_t v4 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
          goto LABEL_82;
        case 20:
          unint64_t v4 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
          goto LABEL_82;
        case 21:
          unint64_t v4 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
          goto LABEL_82;
        case 22:
          unint64_t v4 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
          goto LABEL_82;
        case 23:
          unint64_t v4 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
          goto LABEL_82;
        case 24:
          unint64_t v4 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
          goto LABEL_82;
        case 25:
          unint64_t v4 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
          goto LABEL_82;
        case 26:
          unint64_t v4 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
          goto LABEL_82;
        case 27:
          unint64_t v4 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
          goto LABEL_82;
        case 28:
          unint64_t v4 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
          goto LABEL_82;
        case 29:
          unint64_t v4 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
          goto LABEL_82;
        case 30:
          unint64_t v4 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
          goto LABEL_82;
        case 31:
          unint64_t v4 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
          goto LABEL_82;
        case 32:
          unint64_t v4 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
          goto LABEL_82;
        case 33:
        case 34:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
          int v5 = *(_DWORD *)(a1 + 16);
          goto LABEL_4;
        case 35:
          return result;
        case 93:
          int v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
          unint64_t v4 = "invalid string: forbidden character after backslash";
          if (v10 <= 97)
          {
            switch(v10)
            {
              case '""':
                LOBYTE(v5) = 34;
                break;
              case '/':
                LOBYTE(v5) = 47;
                break;
              case '\\':
                LOBYTE(v5) = 92;
                break;
              default:
                goto LABEL_82;
            }
            goto LABEL_4;
          }
          break;
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
          *(void *)&long long v14 = 0xBF00000080;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 2;
          goto LABEL_19;
        case 225:
          long long v8 = xmmword_212FC0;
          goto LABEL_7;
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 239:
        case 240:
          long long v8 = xmmword_212FB0;
          goto LABEL_7;
        case 238:
          long long v8 = xmmword_212FA0;
LABEL_7:
          long long v14 = v8;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 4;
          goto LABEL_19;
        case 241:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_214154;
          goto LABEL_18;
        case 242:
        case 243:
        case 244:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_21416C;
          goto LABEL_18;
        case 245:
          uint64_t v15 = 0xBF00000080;
          int v9 = &xmmword_214184;
LABEL_18:
          long long v14 = *v9;
          unint64_t v6 = (std::string *)a1;
          unint64_t v7 = 6;
LABEL_19:
          if ((nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::next_byte_in_range(v6, &v14, v7) & 1) == 0)return 14; {
          continue;
          }
        default:
          unint64_t v4 = "invalid string: ill-formed UTF-8 byte";
          goto LABEL_82;
      }
      break;
    }
    switch(v10)
    {
      case 'n':
        LOBYTE(v5) = 10;
        goto LABEL_4;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_82;
      case 'r':
        LOBYTE(v5) = 13;
        goto LABEL_4;
      case 't':
        LOBYTE(v5) = 9;
        goto LABEL_4;
      case 'u':
        unsigned int codepoint = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint(a1);
        if (codepoint == -1) {
          goto LABEL_85;
        }
        unsigned int v12 = codepoint;
        if ((codepoint & 0xFFFFFC00) != 0xD800)
        {
          if ((codepoint & 0xFFFFFC00) == 0xDC00)
          {
            unint64_t v4 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
            goto LABEL_82;
          }
          if (codepoint >= 0x110000) {
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string();
          }
          if (codepoint > 0x7F)
          {
            if (codepoint <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 72), (codepoint >> 6) | 0xC0);
              goto LABEL_39;
            }
            if (!HIWORD(codepoint))
            {
              std::string::push_back((std::string *)(a1 + 72), (codepoint >> 12) | 0xE0);
              goto LABEL_38;
            }
LABEL_37:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 18) | 0xF0);
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 12) & 0x3F | 0x80);
LABEL_38:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 6) & 0x3F | 0x80);
LABEL_39:
            LOBYTE(v5) = v12 & 0x3F | 0x80;
            goto LABEL_4;
          }
          LOBYTE(v5) = codepoint;
LABEL_4:
          std::string::push_back((std::string *)(a1 + 72), v5);
          continue;
        }
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1) != 92
          || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1) != 117)
        {
LABEL_86:
          unint64_t v4 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
          goto LABEL_82;
        }
        unsigned int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint(a1);
        if (v13 != -1)
        {
          if (v13 >> 10 != 55) {
            goto LABEL_86;
          }
          unsigned int v12 = v13 + (v12 << 10) - 56613888;
          goto LABEL_37;
        }
LABEL_85:
        unint64_t v4 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_82:
        *(void *)(a1 + 96) = v4;
        return 14;
      default:
        if (v10 == 98)
        {
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v10 != 102) {
            goto LABEL_82;
          }
          LOBYTE(v5) = 12;
        }
        goto LABEL_4;
    }
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number(uint64_t a1)
{
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(a1);
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 - 49) >= 9)
  {
    if (v2 == 48)
    {
      std::string::push_back((std::string *)(a1 + 72), 48);
      int v4 = 5;
    }
    else
    {
      if (v2 != 45) {
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
      }
      uint64_t v3 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), 45);
      int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
      if ((v13 - 49) < 9)
      {
        int v2 = *(_DWORD *)(a1 + 16);
        int v4 = 6;
        goto LABEL_3;
      }
      if (v13 != 48)
      {
        long long v14 = "invalid number; expected digit after '-'";
        goto LABEL_52;
      }
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      int v4 = 6;
    }
    int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    if (v15 == 101 || v15 == 69)
    {
      int v5 = (std::string *)(a1 + 72);
      goto LABEL_9;
    }
    if (v15 != 46) {
      goto LABEL_40;
    }
    int v5 = (std::string *)(a1 + 72);
LABEL_34:
    std::string::push_back(v5, *(unsigned char *)(a1 + 128));
    if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1)
       - 48 > 9)
    {
      long long v14 = "invalid number; expected digit after '.'";
      goto LABEL_52;
    }
    int v5 = (std::string *)(a1 + 72);
    do
    {
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      int v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    }
    while ((v16 - 48) < 0xA);
    if (v16 != 101 && v16 != 69)
    {
LABEL_13:
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(a1);
      __endptr = 0;
      *__error() = 0;
      goto LABEL_14;
    }
LABEL_9:
    std::string::push_back(v5, *(unsigned char *)(a1 + 16));
    int v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    if ((v7 - 48) < 0xA)
    {
      long long v8 = (std::string *)(a1 + 72);
      goto LABEL_11;
    }
    if (v7 == 45 || v7 == 43)
    {
      long long v8 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
      if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1)
         - 48 < 0xA)
      {
LABEL_11:
        std::string::push_back(v8, *(unsigned char *)(a1 + 16));
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1)
           - 48 <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
          while (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1)
                - 48 < 0xA);
        }
        goto LABEL_13;
      }
      long long v14 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      long long v14 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_52:
    *(void *)(a1 + 96) = v14;
    return 14;
  }
  uint64_t v3 = (std::string *)(a1 + 72);
  int v4 = 5;
LABEL_3:
  std::string::push_back(v3, v2);
  int v5 = (std::string *)(a1 + 72);
  while (1)
  {
    int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    if ((v6 - 48) >= 0xA) {
      break;
    }
    std::string::push_back((std::string *)(a1 + 72), *(unsigned char *)(a1 + 16));
  }
  if (v6 == 46) {
    goto LABEL_34;
  }
  if (v6 == 69 || v6 == 101) {
    goto LABEL_9;
  }
LABEL_40:
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(a1);
  __endptr = 0;
  *__error() = 0;
  if (v4 == 6)
  {
    int v21 = (const char **)(a1 + 72);
    uint64_t v22 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v22 = *v21;
    }
    uint64_t v23 = strtoll(v22, &__endptr, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      int v21 = *(const char ***)(a1 + 72);
      uint64_t v24 = *(void *)(a1 + 80);
    }
    else
    {
      uint64_t v24 = *(unsigned __int8 *)(a1 + 95);
    }
    if (__endptr != (char *)v21 + v24) {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
    }
    if (!*__error())
    {
      *(void *)(a1 + 104) = v23;
      return 6;
    }
  }
  else
  {
    unsigned __int8 v17 = (const char **)(a1 + 72);
    uint64_t v18 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v18 = *v17;
    }
    unint64_t v19 = strtoull(v18, &__endptr, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      unsigned __int8 v17 = *(const char ***)(a1 + 72);
      uint64_t v20 = *(void *)(a1 + 80);
    }
    else
    {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 95);
    }
    if (__endptr != (char *)v17 + v20) {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
    }
    if (!*__error())
    {
      *(void *)(a1 + 112) = v19;
      return 5;
    }
  }
LABEL_14:
  int v9 = (const char **)(a1 + 72);
  int v10 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    int v10 = *v9;
  }
  *(double *)(a1 + 120) = strtod(v10, &__endptr);
  if (*(char *)(a1 + 95) < 0)
  {
    int v9 = *(const char ***)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 80);
  }
  else
  {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 95);
  }
  if (__endptr != (char *)v9 + v11) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
  }
  return 7;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) != 117) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint();
  }
  uint64_t v2 = 0;
  LODWORD(v3) = 0;
  long long v8 = xmmword_212FD0;
  do
  {
    int v4 = *(_DWORD *)((char *)&v8 + v2);
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    int v5 = *(_DWORD *)(a1 + 16);
    int v6 = v5 - 48;
    if ((v5 - 48) >= 0xA)
    {
      if ((v5 - 65) > 5)
      {
        if ((v5 - 97) > 5) {
          return 0xFFFFFFFFLL;
        }
        int v6 = v5 - 87;
      }
      else
      {
        int v6 = v5 - 55;
      }
    }
    uint64_t v3 = ((v6 << v4) + v3);
    v2 += 4;
  }
  while (v2 != 16);
  if (v3 >= 0x10000) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint();
  }
  return v3;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::next_byte_in_range(std::string *a1, _DWORD *a2, unint64_t a3)
{
  if (a3 > 6 || ((1 << a3) & 0x54) == 0) {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range();
  }
  int v6 = a1 + 3;
  std::string::push_back(a1 + 3, a1->__r_.__value_.__s.__data_[16]);
  int v7 = &a2[a3];
  while (1)
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    int v8 = a1->__r_.__value_.__r.__words[2];
    if (*a2 > v8 || v8 > a2[1]) {
      break;
    }
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7) {
      return 1;
    }
  }
  uint64_t result = 0;
  a1[4].__r_.__value_.__r.__words[0] = (std::string::size_type)"invalid string: ill-formed UTF-8 byte";
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::~lexer(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  int v4 = (long long *)(a1 + 112);
  uint64_t v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v37.__vftable) = 1;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v37, 0);
        goto LABEL_19;
      case 2:
        LOBYTE(v37.__vftable) = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v37, 0);
        goto LABEL_19;
      case 3:
        v37.__vftable = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2, (uint64_t)&v37, 0);
        goto LABEL_19;
      case 4:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v4, 0);
        goto LABEL_19;
      case 5:
        v37.__vftable = *(std::runtime_error_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t **)&v37, 0);
        goto LABEL_19;
      case 6:
        v37.__vftable = *(std::runtime_error_vtbl **)(a1 + 144);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t **)&v37, 0);
        goto LABEL_19;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v37.__vftable = *(std::runtime_error_vtbl **)(a1 + 160);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t **)&v37, 0);
          goto LABEL_19;
        }
        uint64_t v28 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(v5, &v39);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(v5, &v33);
        uint64_t v29 = std::string::insert(&v33, 0, "number overflow parsing '");
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error v31 = std::string::append(&__p, "'");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        std::string::size_type v36 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)long long v35 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(406, (uint64_t)v35, (nlohmann::detail::exception *)&v37);
        uint64_t v17 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v28, (uint64_t)&v39, (uint64_t)&v37);
        nlohmann::detail::exception::~exception(&v37);
        if (SHIBYTE(v36) < 0) {
          operator delete(v35[0]);
        }
        goto LABEL_50;
      case 8:
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_56; {
        int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          char v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2);
          goto LABEL_13;
        }
        LOBYTE(v37.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v40, &v37);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)goto LABEL_56; {
        int v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4) {
            goto LABEL_59;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56; {
          int v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
          }
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 != 12) {
            goto LABEL_60;
          }
          LOBYTE(v37.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v40, &v37);
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
LABEL_37:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
        char v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_56:
          uint64_t v17 = 0;
          goto LABEL_44;
        }
LABEL_19:
        uint64_t v9 = v41;
        if (!v41)
        {
LABEL_43:
          uint64_t v17 = 1;
          goto LABEL_44;
        }
        while (2)
        {
          if ((*(void *)&v40[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)))
          {
            int v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13) {
              goto LABEL_36;
            }
            if (v10 != 10)
            {
              uint64_t v22 = *(void *)(a1 + 64);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(v5, &v39);
              *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
              std::string::size_type v36 = *(void *)(a1 + 80);
              std::string::basic_string[abi:ne180100]<0>(&v33, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xAu, (uint64_t)&v33, &__p);
              nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
              uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v22, (uint64_t)&v39, (uint64_t)&v37);
              goto LABEL_61;
            }
            if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2)) {
              goto LABEL_56;
            }
            uint64_t v11 = v41;
            if (!v41)
            {
              int v24 = 383;
              goto LABEL_63;
            }
LABEL_30:
            uint64_t v9 = v11 - 1;
            uint64_t v41 = v9;
            if (!v9) {
              goto LABEL_43;
            }
            continue;
          }
          break;
        }
        int v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            uint64_t v25 = *(void *)(a1 + 64);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(v5, &v39);
            *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
            std::string::size_type v36 = *(void *)(a1 + 80);
            std::string::basic_string[abi:ne180100]<0>(&v33, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xBu, (uint64_t)&v33, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
            uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v25, (uint64_t)&v39, (uint64_t)&v37);
            goto LABEL_61;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2)) {
            goto LABEL_56;
          }
          uint64_t v11 = v41;
          if (!v41)
          {
            int v24 = 439;
LABEL_63:
            __assert_rtn("sax_parse_internal", "parser.hpp", v24, "not states.empty()");
          }
          goto LABEL_30;
        }
        int v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_59:
          uint64_t v26 = *(void *)(a1 + 64);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(v5, &v39);
          *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
          std::string::size_type v36 = *(void *)(a1 + 80);
          std::string::basic_string[abi:ne180100]<0>(&v33, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 4u, (uint64_t)&v33, &__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
          uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v26, (uint64_t)&v39, (uint64_t)&v37);
          goto LABEL_61;
        }
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56; {
        int v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_36:
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
          goto LABEL_37;
        }
LABEL_60:
        uint64_t v27 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(v5, &v39);
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v33, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xCu, (uint64_t)&v33, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
        uint64_t v23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v27, (uint64_t)&v39, (uint64_t)&v37);
LABEL_61:
        uint64_t v17 = v23;
        nlohmann::detail::exception::~exception(&v37);
LABEL_50:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
LABEL_44:
        if (v40) {
          operator delete(v40);
        }
        return v17;
      case 0xE:
        uint64_t v19 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(v5, &v39);
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v33, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0, (uint64_t)&v33, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
        uint64_t v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v19, (uint64_t)&v39, (uint64_t)&v37);
        goto LABEL_49;
      default:
        uint64_t v21 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(v5, &v39);
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 64);
        std::string::size_type v36 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v33, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0x10u, (uint64_t)&v33, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v35, (uint64_t)&__p, (nlohmann::detail::exception *)&v37);
        uint64_t v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v21, (uint64_t)&v39, (uint64_t)&v37);
LABEL_49:
        uint64_t v17 = v20;
        v37.__vftable = (std::runtime_error_vtbl *)off_26F198;
        std::runtime_error::~runtime_error(&v38);
        std::exception::~exception(&v37);
        goto LABEL_50;
    }
  }
}

void sub_1E9A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::runtime_error a29)
{
  nlohmann::detail::exception::~exception(&a29);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v29 - 73) < 0) {
    operator delete(*(void **)(v29 - 96));
  }
  std::runtime_error v31 = *(void **)(v29 - 72);
  if (v31) {
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v4 = (std::runtime_error_vtbl *)(a1 + 112);
  uint64_t v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v38.__vftable) = 1;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v38);
        goto LABEL_17;
      case 2:
        LOBYTE(v38.__vftable) = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v38);
        goto LABEL_17;
      case 3:
        v38.__vftable = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2);
        goto LABEL_17;
      case 4:
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v4);
        goto LABEL_17;
      case 5:
        v38.__vftable = *(std::runtime_error_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t *)&v38);
        goto LABEL_17;
      case 6:
        v38.__vftable = *(std::runtime_error_vtbl **)(a1 + 144);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t *)&v38);
        goto LABEL_17;
      case 7:
        if ((*(void *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v38.__vftable = *(std::runtime_error_vtbl **)(a1 + 160);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t *)&v38);
          goto LABEL_17;
        }
        uint64_t v29 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(v5, &v40);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(v5, &v34);
        long long v30 = std::string::insert(&v34, 0, "number overflow parsing '");
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        long long v32 = std::string::append(&__p, "'");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        std::string::size_type v37 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string::size_type v36 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(406, (uint64_t)v36, (nlohmann::detail::exception *)&v38);
        uint64_t v18 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v29, (uint64_t)&v40, (uint64_t)&v38);
        nlohmann::detail::exception::~exception(&v38);
        if (SHIBYTE(v37) < 0) {
          operator delete(v36[0]);
        }
        goto LABEL_43;
      case 8:
        if (!nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_56; {
        int v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        }
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10) {
          goto LABEL_12;
        }
        LOBYTE(v38.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v41, &v38);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)
        {
LABEL_56:
          uint64_t v18 = 0;
          goto LABEL_37;
        }
        int v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 != 11)
        {
          if (v7 != 4) {
            goto LABEL_51;
          }
          int v16 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
          v38.__vftable = v4;
          a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, (const void **)&v4->~runtime_error, (uint64_t)&std::piecewise_construct, (long long **)&v38)+ 7);
          int v17 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
          *(_DWORD *)(a1 + 32) = v17;
          if (v17 != 12) {
            goto LABEL_54;
          }
          LOBYTE(v38.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v41, &v38);
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
LABEL_32:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
LABEL_12:
        a2[2] -= 8;
LABEL_17:
        uint64_t v8 = v42;
        if (!v42)
        {
LABEL_36:
          uint64_t v18 = 1;
          goto LABEL_37;
        }
        while (2)
        {
          if ((*(void *)&v41[((unint64_t)(v8 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v8 - 1)))
          {
            int v9 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
            *(_DWORD *)(a1 + 32) = v9;
            if (v9 == 13) {
              goto LABEL_31;
            }
            if (v9 != 10)
            {
              uint64_t v23 = *(void *)(a1 + 64);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(v5, &v40);
              *(_OWORD *)std::string::size_type v36 = *(_OWORD *)(a1 + 64);
              std::string::size_type v37 = *(void *)(a1 + 80);
              std::string::basic_string[abi:ne180100]<0>(&v34, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xAu, (uint64_t)&v34, &__p);
              nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
              uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v23, (uint64_t)&v40, (uint64_t)&v38);
              goto LABEL_55;
            }
            a2[2] -= 8;
            uint64_t v10 = v42;
            if (!v42)
            {
              int v25 = 383;
              goto LABEL_53;
            }
LABEL_26:
            uint64_t v8 = v10 - 1;
            uint64_t v42 = v8;
            if (!v8) {
              goto LABEL_36;
            }
            continue;
          }
          break;
        }
        int v11 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v11;
        if (v11 != 13)
        {
          if (v11 != 11)
          {
            uint64_t v26 = *(void *)(a1 + 64);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(v5, &v40);
            *(_OWORD *)std::string::size_type v36 = *(_OWORD *)(a1 + 64);
            std::string::size_type v37 = *(void *)(a1 + 80);
            std::string::basic_string[abi:ne180100]<0>(&v34, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xBu, (uint64_t)&v34, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
            uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v26, (uint64_t)&v40, (uint64_t)&v38);
            goto LABEL_55;
          }
          a2[2] -= 8;
          uint64_t v10 = v42;
          if (!v42)
          {
            int v25 = 439;
LABEL_53:
            __assert_rtn("sax_parse_internal", "parser.hpp", v25, "not states.empty()");
          }
          goto LABEL_26;
        }
        int v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 4)
        {
LABEL_51:
          uint64_t v27 = *(void *)(a1 + 64);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(v5, &v40);
          *(_OWORD *)std::string::size_type v36 = *(_OWORD *)(a1 + 64);
          std::string::size_type v37 = *(void *)(a1 + 80);
          std::string::basic_string[abi:ne180100]<0>(&v34, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 4u, (uint64_t)&v34, &__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
          uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v27, (uint64_t)&v40, (uint64_t)&v38);
          goto LABEL_55;
        }
        int v13 = *(uint64_t ***)(*(void *)(a2[2] - 8) + 8);
        v38.__vftable = v4;
        a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (const void **)&v4->~runtime_error, (uint64_t)&std::piecewise_construct, (long long **)&v38)+ 7);
        int v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_31:
          int v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
          goto LABEL_32;
        }
LABEL_54:
        uint64_t v28 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(v5, &v40);
        *(_OWORD *)std::string::size_type v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xCu, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        uint64_t v24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v28, (uint64_t)&v40, (uint64_t)&v38);
LABEL_55:
        uint64_t v18 = v24;
        nlohmann::detail::exception::~exception(&v38);
LABEL_43:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
LABEL_37:
        if (v41) {
          operator delete(v41);
        }
        return v18;
      case 0xE:
        uint64_t v20 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(v5, &v40);
        *(_OWORD *)std::string::size_type v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        uint64_t v21 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v20, (uint64_t)&v40, (uint64_t)&v38);
        goto LABEL_42;
      default:
        uint64_t v22 = *(void *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(v5, &v40);
        *(_OWORD *)std::string::size_type v36 = *(_OWORD *)(a1 + 64);
        std::string::size_type v37 = *(void *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0x10u, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        uint64_t v21 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v22, (uint64_t)&v40, (uint64_t)&v38);
LABEL_42:
        uint64_t v18 = v21;
        v38.__vftable = (std::runtime_error_vtbl *)off_26F198;
        std::runtime_error::~runtime_error(&v39);
        std::exception::~exception(&v38);
        goto LABEL_43;
    }
  }
}

void sub_1EA40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::runtime_error a29)
{
  nlohmann::detail::exception::~exception(&a29);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  long long v31 = *(void **)(v29 - 88);
  if (v31) {
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(void ***a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  switch(*(unsigned char *)a2)
  {
    case 0:
      int v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    case 1:
      uint64_t v12 = (uint64_t)**a1;
      if (!*(void *)(*(void *)(a2 + 8) + 16))
      {
        uint64_t v45 = *(uint64_t (**)(void))(v12 + 8);
        goto LABEL_52;
      }
      if (a3)
      {
        (*(void (**)(void))(v12 + 8))();
        unsigned int v13 = a6 + a5;
        int v14 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v15 = (unint64_t)a1[77];
          if (v15 >= v13) {
            goto LABEL_7;
          }
        }
        else
        {
          unint64_t v15 = *((unsigned __int8 *)a1 + 631);
          if (v13 <= v15)
          {
LABEL_7:
            int v16 = *(void **)(a2 + 8);
            int v17 = (void *)*v16;
            if (v16[2] == 1)
            {
              uint64_t v18 = (void *)*v16;
            }
            else
            {
              unint64_t v67 = 0;
              do
              {
                float v68 = a1 + 76;
                if (*((char *)a1 + 631) < 0) {
                  float v68 = (void ***)*v14;
                }
                ((void (*)(void, void ***, void))(**a1)[1])(*a1, v68, (a6 + a5));
                ((void (*)(void))***a1)();
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v17 + 4, a4);
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v17 + 7, 1, a4, a5, (a6 + a5));
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                uint64_t v69 = (void *)v17[1];
                if (v69)
                {
                  do
                  {
                    uint64_t v18 = v69;
                    uint64_t v69 = (void *)*v69;
                  }
                  while (v69);
                }
                else
                {
                  do
                  {
                    uint64_t v18 = (void *)v17[2];
                    BOOL v51 = *v18 == (void)v17;
                    int v17 = v18;
                  }
                  while (!v51);
                }
                ++v67;
                int v16 = *(void **)(a2 + 8);
                int v17 = v18;
              }
              while (v67 < v16[2] - 1);
            }
            std::string v70 = v16 + 1;
            if (v18 == v70) {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            }
            unint64_t v71 = (void *)v18[1];
            if (v71)
            {
              do
              {
                float v72 = v71;
                unint64_t v71 = (void *)*v71;
              }
              while (v71);
            }
            else
            {
              uint64_t v74 = v18;
              do
              {
                float v72 = (void *)v74[2];
                BOOL v51 = *v72 == (void)v74;
                uint64_t v74 = v72;
              }
              while (!v51);
            }
            if (v72 != v70) {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            }
            uint64_t v75 = a1 + 76;
            if (*((char *)a1 + 631) < 0) {
              uint64_t v75 = (void ***)*v14;
            }
            ((void (*)(void, void ***, void))(**a1)[1])(*a1, v75, (a6 + a5));
            ((void (*)(void))***a1)();
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v18 + 4, a4);
            ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v18 + 7, 1, a4, a5, (a6 + a5));
            ((void (*)(void))***a1)();
            uint64_t v66 = (void (*)(void))(**a1)[1];
            goto LABEL_121;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v15, 32);
        goto LABEL_7;
      }
      (*(void (**)(void))v12)();
      uint64_t v46 = *(void *)(a2 + 8);
      unint64_t v47 = *(void **)v46;
      if (*(void *)(v46 + 16) != 1)
      {
        unint64_t v48 = 0;
        do
        {
          ((void (*)(void, uint64_t))***a1)(*a1, 34);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v47 + 4, a4);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v47 + 7, 0, a4, a5, a6);
          ((void (*)(void))***a1)();
          uint64_t v49 = (void *)v47[1];
          unint64_t v50 = v47;
          if (v49)
          {
            do
            {
              unint64_t v47 = v49;
              uint64_t v49 = (void *)*v49;
            }
            while (v49);
          }
          else
          {
            do
            {
              unint64_t v47 = (void *)v50[2];
              BOOL v51 = *v47 == (void)v50;
              unint64_t v50 = v47;
            }
            while (!v51);
          }
          ++v48;
          uint64_t v46 = *(void *)(a2 + 8);
        }
        while (v48 < *(void *)(v46 + 16) - 1);
      }
      uint64_t v52 = (void *)(v46 + 8);
      if (v47 == v52) {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      }
      uint64_t v53 = (void *)v47[1];
      if (v53)
      {
        do
        {
          unint64_t v54 = v53;
          uint64_t v53 = (void *)*v53;
        }
        while (v53);
      }
      else
      {
        v73 = v47;
        do
        {
          unint64_t v54 = (void *)v73[2];
          BOOL v51 = *v54 == (void)v73;
          v73 = v54;
        }
        while (!v51);
      }
      if (v54 != v52) {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      }
      ((void (*)(void, uint64_t))***a1)(*a1, 34);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v47 + 4, a4);
      ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v47 + 7, 0, a4, a5, a6);
LABEL_122:
      int v11 = (uint64_t (*)(void))***a1;
LABEL_123:
      return v11();
    case 2:
      uint64_t v19 = (void (**)(void))**a1;
      if (**(void **)(a2 + 8) != *(void *)(*(void *)(a2 + 8) + 8))
      {
        if (!a3)
        {
          (*v19)();
          unint64_t v55 = *(uint64_t **)(a2 + 8);
          uint64_t v57 = *v55;
          uint64_t v56 = v55[1];
          if (v57 == v56 - 16)
          {
            uint64_t v58 = v57;
          }
          else
          {
            uint64_t v58 = v57;
            do
            {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v58, 0, a4, a5, a6);
              ((void (*)(void))***a1)();
              v58 += 16;
              int v59 = *(uint64_t **)(a2 + 8);
              uint64_t v56 = v59[1];
            }
            while (v58 != v56 - 16);
            uint64_t v57 = *v59;
          }
          if (v57 == v56) {
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
          }
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v58, 0, a4, a5, a6);
          goto LABEL_108;
        }
        v19[1]();
        unsigned int v20 = a6 + a5;
        uint64_t v21 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v22 = (unint64_t)a1[77];
          if (v22 >= v20) {
            goto LABEL_13;
          }
        }
        else
        {
          unint64_t v22 = *((unsigned __int8 *)a1 + 631);
          if (v20 <= v22)
          {
LABEL_13:
            uint64_t v23 = *(uint64_t **)(a2 + 8);
            uint64_t v25 = *v23;
            uint64_t v24 = v23[1];
            if (v25 != v24 - 16)
            {
              do
              {
                uint64_t v26 = a1 + 76;
                if (*((char *)a1 + 631) < 0) {
                  uint64_t v26 = (void ***)*v21;
                }
                ((void (*)(void, void ***, void))(**a1)[1])(*a1, v26, (a6 + a5));
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v25, 1, a4, a5, (a6 + a5));
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                v25 += 16;
                uint64_t v27 = *(uint64_t **)(a2 + 8);
                uint64_t v24 = v27[1];
              }
              while (v25 != v24 - 16);
              uint64_t v25 = *v27;
            }
            if (v25 == v24) {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            }
            uint64_t v28 = a1 + 76;
            if (*((char *)a1 + 631) < 0) {
              uint64_t v28 = (void ***)*v21;
            }
            ((void (*)(void, void ***, void))(**a1)[1])(*a1, v28, (a6 + a5));
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, *(void *)(*(void *)(a2 + 8) + 8) - 16, 1, a4, a5, (a6 + a5));
            ((void (*)(void))***a1)();
            if (*((char *)a1 + 631) < 0) {
              uint64_t v21 = (void *)*v21;
            }
            ((void (*)(void, void *, void))(**a1)[1])(*a1, v21, a6);
LABEL_108:
            int v11 = (uint64_t (*)(void))***a1;
            goto LABEL_123;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v22, 32);
        goto LABEL_13;
      }
      uint64_t v45 = (uint64_t (*)(void))v19[1];
LABEL_52:
      return v45();
    case 3:
      ((void (*)(void))***a1)();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, *(uint64_t **)(a2 + 8), a4);
      int v11 = (uint64_t (*)(void))***a1;
      goto LABEL_123;
    case 4:
      int v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    case 5:
      unint64_t v29 = *(void *)(a2 + 8);
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>((uint64_t (****)(void))a1, v29);
    case 6:
      unint64_t v31 = *(void *)(a2 + 8);
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>((uint64_t (****)(void))a1, v31);
    case 7:
      double v32 = *(double *)(a2 + 8);
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float((char *)a1, v32);
    case 8:
      long long v33 = (void (*)(void))(**a1)[1];
      if (a3)
      {
        v33();
        uint64_t v34 = (a6 + a5);
        long long v35 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          unint64_t v36 = (unint64_t)a1[77];
          if (v36 >= v34)
          {
            std::string::size_type v37 = (uint64_t (***)(void))*a1;
            goto LABEL_73;
          }
        }
        else
        {
          unint64_t v36 = *((unsigned __int8 *)a1 + 631);
          if (v34 <= v36)
          {
            std::string::size_type v37 = (uint64_t (***)(void))*a1;
            std::runtime_error v38 = a1 + 76;
            goto LABEL_74;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v36, 32);
        std::string::size_type v37 = (uint64_t (***)(void))*a1;
        std::runtime_error v38 = a1 + 76;
        if ((*((char *)a1 + 631) & 0x80000000) == 0)
        {
LABEL_74:
          ((void (*)(uint64_t (***)(void), void ***, uint64_t))(*v37)[1])(v37, v38, v34);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\"bytes\": [", 10);
          int v60 = *(unsigned __int8 ***)(a2 + 8);
          v62 = *v60;
          unint64_t v61 = v60[1];
          if (v62 != v61)
          {
            if (v62 != v61 - 1)
            {
              do
              {
                unsigned int v63 = *v62++;
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, v63);
                ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, ", ", 2);
              }
              while (v62 != (unsigned __int8 *)(*(void *)(*(void *)(a2 + 8) + 8) - 1));
            }
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *v62);
          }
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "],\n", 3);
          std::string v64 = a1 + 76;
          if (*((char *)a1 + 631) < 0) {
            std::string v64 = (void ***)*v35;
          }
          ((void (*)(void, void ***, uint64_t))(**a1)[1])(*a1, v64, v34);
          ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "\"subtype\": ", 11);
          uint64_t v65 = *(void *)(a2 + 8);
          if (*(unsigned char *)(v65 + 25)) {
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *(unsigned __int8 *)(v65 + 24));
          }
          else {
            ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "null", 4);
          }
          ((void (*)(void, uint64_t))***a1)(*a1, 10);
          uint64_t v66 = (void (*)(void))(**a1)[1];
LABEL_121:
          v66();
          goto LABEL_122;
        }
LABEL_73:
        std::runtime_error v38 = (void ***)*v35;
        goto LABEL_74;
      }
      v33();
      std::runtime_error v39 = *(unsigned __int8 ***)(a2 + 8);
      uint64_t v41 = *v39;
      std::string v40 = v39[1];
      if (v41 != v40)
      {
        while (v41 != v40 - 1)
        {
          unsigned int v42 = *v41++;
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, v42);
          ((void (*)(void, uint64_t))***a1)(*a1, 44);
          std::string v40 = *(unsigned __int8 **)(*(void *)(a2 + 8) + 8);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *v41);
      }
      ((void (*)(void, const char *, uint64_t))(**a1)[1])(*a1, "],\"subtype\":", 12);
      uint64_t v43 = *(void *)(a2 + 8);
      if (*(unsigned char *)(v43 + 25))
      {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>((uint64_t)a1, *(unsigned __int8 *)(v43 + 24));
        unint64_t v44 = (uint64_t (*)(void))***a1;
        return v44();
      }
      int v11 = (uint64_t (*)(void))(**a1)[1];
LABEL_83:
      return v11();
    case 9:
      int v11 = (uint64_t (*)(void))(**a1)[1];
      goto LABEL_83;
    default:
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
  }
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_270520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_270520;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_character()
{
  return std::ostream::put();
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_characters()
{
  return std::ostream::write();
}

void nlohmann::detail::output_stream_adapter<char>::~output_stream_adapter()
{
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  int v7 = localeconv();
  *(void *)(a1 + 80) = v7;
  thousands_sep = v7->thousands_sep;
  if (thousands_sep) {
    LOBYTE(thousands_sep) = *thousands_sep;
  }
  *(unsigned char *)(a1 + 88) = (_BYTE)thousands_sep;
  decimal_point = v7->decimal_point;
  if (v7->decimal_point) {
    LOBYTE(decimal_point) = *decimal_point;
  }
  *(_OWORD *)(a1 + 90) = 0u;
  *(unsigned char *)(a1 + 89) = (_BYTE)decimal_point;
  *(_OWORD *)(a1 + 106) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  *(_OWORD *)(a1 + 138) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_OWORD *)(a1 + 202) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 234) = 0u;
  *(_OWORD *)(a1 + 250) = 0u;
  *(_OWORD *)(a1 + 266) = 0u;
  *(_OWORD *)(a1 + 282) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  *(_OWORD *)(a1 + 314) = 0u;
  *(_OWORD *)(a1 + 330) = 0u;
  *(_OWORD *)(a1 + 346) = 0u;
  *(_OWORD *)(a1 + 362) = 0u;
  *(_OWORD *)(a1 + 378) = 0u;
  *(_OWORD *)(a1 + 394) = 0u;
  *(_OWORD *)(a1 + 410) = 0u;
  *(_OWORD *)(a1 + 426) = 0u;
  *(_OWORD *)(a1 + 442) = 0u;
  *(_OWORD *)(a1 + 458) = 0u;
  *(_OWORD *)(a1 + 474) = 0u;
  *(_OWORD *)(a1 + 490) = 0u;
  *(_OWORD *)(a1 + 506) = 0u;
  *(_OWORD *)(a1 + 522) = 0u;
  *(_OWORD *)(a1 + 538) = 0u;
  *(_OWORD *)(a1 + 554) = 0u;
  *(_OWORD *)(a1 + 570) = 0u;
  *(_OWORD *)(a1 + 586) = 0u;
  *(unsigned char *)(a1 + 602) = a3;
  uint64_t v10 = (int8x16_t *)operator new(0x208uLL);
  *(void *)(a1 + 608) = v10;
  *(void *)(a1 + 624) = 0x8000000000000208;
  int8x16_t v11 = vdupq_n_s8(a3);
  *(void *)(a1 + 616) = 512;
  *uint64_t v10 = v11;
  v10[1] = v11;
  v10[2] = v11;
  v10[3] = v11;
  void v10[4] = v11;
  void v10[5] = v11;
  v10[6] = v11;
  v10[7] = v11;
  char v10[8] = v11;
  void v10[9] = v11;
  v10[10] = v11;
  v10[11] = v11;
  v10[12] = v11;
  v10[13] = v11;
  v10[14] = v11;
  v10[15] = v11;
  v10[16] = v11;
  v10[17] = v11;
  v10[18] = v11;
  v10[19] = v11;
  v10[20] = v11;
  v10[21] = v11;
  v10[22] = v11;
  v10[23] = v11;
  v10[24] = v11;
  v10[25] = v11;
  v10[26] = v11;
  v10[27] = v11;
  v10[28] = v11;
  v10[29] = v11;
  v10[30] = v11;
  v10[31] = v11;
  v10[32].i8[0] = 0;
  *(_DWORD *)(a1 + 632) = a4;
  return a1;
}

void sub_1EB7D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped(uint64_t result, uint64_t *a2, int a3)
{
  char v46 = 0;
  LOBYTE(v3) = *((char *)a2 + 23) < 0;
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a2[1];
  }
  if (!v4) {
    return result;
  }
  int v7 = (void *)result;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v47[0] = 0;
  uint64_t v12 = result + 90;
  do
  {
    if (v3) {
      unsigned int v13 = (uint64_t *)*a2;
    }
    else {
      unsigned int v13 = a2;
    }
    int v14 = *((unsigned __int8 *)v13 + v8);
    uint64_t result = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(&v46, v47, v14);
    if (result == 1)
    {
      int v16 = *((_DWORD *)v7 + 158);
      if ((v16 - 1) >= 2)
      {
        if (!v16)
        {
          char v45 = 3;
          *(_DWORD *)std::string __str = 0;
          snprintf(__str, 3uLL, "%.2X", v14);
          exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
          std::to_string(&v38, v8);
          uint64_t v28 = std::string::insert(&v38, 0, "invalid UTF-8 byte at index ");
          long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v39.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          long long v30 = std::string::append(&v39, ": 0x");
          long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v40.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          if (v45 >= 0) {
            double v32 = __str;
          }
          else {
            double v32 = *(char **)__str;
          }
          if (v45 >= 0) {
            std::string::size_type v33 = v45;
          }
          else {
            std::string::size_type v33 = v44;
          }
          uint64_t v34 = std::string::append(&v40, v32, v33);
          long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          std::string::size_type v42 = v34->__r_.__value_.__r.__words[2];
          long long v41 = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          nlohmann::detail::type_error::create(316, (uint64_t)&v41, exception);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
      }
      uint64_t v17 = v9 != 0;
      if (v16 == 1)
      {
        uint64_t v18 = v12 + v10;
        if (a3)
        {
          *(_DWORD *)uint64_t v18 = 1717990748;
          *(_WORD *)(v18 + 4) = 25702;
          v10 += 6;
        }
        else
        {
          v10 += 3;
          *(_WORD *)uint64_t v18 = -16401;
          *(unsigned char *)(v18 + 2) = -67;
        }
        if ((unint64_t)(v10 - 500) <= 0xC)
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v10);
          uint64_t v10 = 0;
        }
      }
      uint64_t v9 = 0;
      v8 -= v17;
      char v46 = 0;
      uint64_t v11 = v10;
    }
    else if (result)
    {
      if ((a3 & 1) == 0)
      {
        if (*((char *)a2 + 23) >= 0) {
          uint64_t v19 = a2;
        }
        else {
          uint64_t v19 = (uint64_t *)*a2;
        }
        *(unsigned char *)(v12 + v11++) = *((unsigned char *)v19 + v8);
      }
      ++v9;
    }
    else
    {
      switch(v47[0])
      {
        case 8u:
          __int16 v15 = 25180;
          goto LABEL_43;
        case 9u:
          __int16 v15 = 29788;
          goto LABEL_43;
        case 0xAu:
          __int16 v15 = 28252;
          goto LABEL_43;
        case 0xBu:
          goto LABEL_29;
        case 0xCu:
          __int16 v15 = 26204;
          goto LABEL_43;
        case 0xDu:
          __int16 v15 = 29276;
          goto LABEL_43;
        default:
          if (v47[0] == 34)
          {
            __int16 v15 = 8796;
            goto LABEL_43;
          }
          if (v47[0] == 92)
          {
            __int16 v15 = 23644;
LABEL_43:
            *(_WORD *)(v12 + v11) = v15;
            v11 += 2;
            goto LABEL_44;
          }
LABEL_29:
          if (v47[0] > 0x7E) {
            int v20 = a3;
          }
          else {
            int v20 = 0;
          }
          if (v47[0] < 0x20 || v20)
          {
            uint64_t v24 = (char *)(v12 + v11);
            if (HIWORD(v47[0]))
            {
              uint64_t result = snprintf(v24, 0xDuLL, "\\u%04x\\u%04x", (unsigned __int16)((v47[0] >> 10) - 10304), v47[0] & 0x3FF | 0xDC00);
              v11 += 12;
            }
            else
            {
              uint64_t result = snprintf(v24, 7uLL, "\\u%04x", v47[0]);
              v11 += 6;
            }
          }
          else
          {
            if (*((char *)a2 + 23) >= 0) {
              uint64_t v21 = a2;
            }
            else {
              uint64_t v21 = (uint64_t *)*a2;
            }
            *(unsigned char *)(v12 + v11++) = *((unsigned char *)v21 + v8);
          }
LABEL_44:
          if ((unint64_t)(v11 - 500) > 0xC)
          {
            uint64_t v9 = 0;
            uint64_t v10 = v11;
          }
          else
          {
            uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v11);
            uint64_t v11 = 0;
            uint64_t v10 = 0;
            uint64_t v9 = 0;
          }
          break;
      }
    }
    ++v8;
    int v22 = *((char *)a2 + 23);
    unsigned int v3 = v22 >> 31;
    unint64_t v23 = a2[1];
    if (v22 >= 0) {
      unint64_t v23 = *((unsigned __int8 *)a2 + 23);
    }
  }
  while (v8 < v23);
  if (v46)
  {
    int v26 = *((_DWORD *)v7 + 158);
    switch(v26)
    {
      case 1:
        (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 8))(*v7, v12, v10);
        uint64_t v25 = *(uint64_t (**)(void))(*(void *)*v7 + 8);
        break;
      case 2:
        uint64_t v25 = *(uint64_t (**)(void))(*(void *)*v7 + 8);
        break;
      case 0:
        char v45 = 3;
        *(_DWORD *)std::string __str = 0;
        unint64_t v36 = (uint64_t *)*a2;
        if (v22 >= 0) {
          unint64_t v36 = a2;
        }
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v36 + v23 - 1));
        std::string::size_type v37 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        nlohmann::detail::type_error::create(316, (uint64_t)&v41, v37);
      default:
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
    }
    return v25();
  }
  else if (v11)
  {
    uint64_t v25 = *(uint64_t (**)(void))(*(void *)*v7 + 8);
    return v25();
  }
  return result;
}

void sub_1EBD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
  {
    operator delete(__p);
    if ((v40 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v41 - 97) < 0) {
        operator delete(*(void **)(v41 - 120));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v39);
  goto LABEL_6;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return (***(uint64_t (****)(void, uint64_t))a1)(*(void *)a1, 48);
  }
  LOBYTE(v2) = a2;
  if (a2 >= 0xA)
  {
    if (a2 >= 0x64)
    {
      *(_WORD *)(a1 + 17) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[(a2 - 100 * ((41 * a2) >> 12))];
      uint64_t v5 = a1 + 17;
      unsigned int v2 = (41 * a2) >> 12;
      goto LABEL_10;
    }
    uint64_t v3 = 2;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v5 = a1 + 16 + v3;
  if (a2 < 0xA)
  {
LABEL_10:
    *(unsigned char *)(v5 - 1) = v2 | 0x30;
    return (*(uint64_t (**)(void))(**(void **)a1 + 8))();
  }
  *(_WORD *)(v5 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[a2];
  return (*(uint64_t (**)(void))(**(void **)a1 + 8))();
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(uint64_t (****a1)(void), unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    uint64_t v3 = a1 + 2;
    if ((v2 & 0x8000000000000000) != 0)
    {
      *uint64_t v3 = 45;
      unint64_t v2 = -(uint64_t)v2;
      if (v2 >= 0xA)
      {
        int v7 = 4;
        unint64_t v11 = v2;
        while (1)
        {
          if (v11 <= 0x63)
          {
            v7 -= 2;
            goto LABEL_26;
          }
          if (v11 <= 0x3E7) {
            break;
          }
          if (v11 >> 4 < 0x271) {
            goto LABEL_26;
          }
          v7 += 4;
          BOOL v10 = v11 >= 0x186A0;
          v11 /= 0x2710uLL;
          if (!v10)
          {
            v7 -= 3;
            goto LABEL_26;
          }
        }
        --v7;
      }
      else
      {
        int v7 = 1;
      }
LABEL_26:
      unsigned int v8 = v7 + 1;
    }
    else
    {
      if (v2 < 0xA)
      {
        uint64_t v4 = (char *)a1 + 17;
        goto LABEL_35;
      }
      unsigned int v8 = 4;
      unint64_t v9 = v2;
      while (1)
      {
        if (v9 <= 0x63)
        {
          v8 -= 2;
          goto LABEL_27;
        }
        if (v9 <= 0x3E7) {
          break;
        }
        if (v9 >> 4 < 0x271) {
          goto LABEL_27;
        }
        v8 += 4;
        BOOL v10 = v9 >= 0x186A0;
        v9 /= 0x2710uLL;
        if (!v10)
        {
          v8 -= 3;
          goto LABEL_27;
        }
      }
      --v8;
    }
LABEL_27:
    if (v8 >= 0x3F) {
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
    }
    uint64_t v4 = &v3[v8];
    if (v2 < 0x64)
    {
      unint64_t v12 = v2;
    }
    else
    {
      do
      {
        unint64_t v12 = v2 / 0x64;
        *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v2 % 0x64];
        v4 -= 2;
        unint64_t v13 = v2 >> 4;
        v2 /= 0x64uLL;
      }
      while (v13 > 0x270);
    }
    if (v12 >= 0xA)
    {
      *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v12];
LABEL_36:
      int v14 = (**a1)[1];
      return v14();
    }
    LOBYTE(v2) = v12;
LABEL_35:
    *(v4 - 1) = v2 + 48;
    goto LABEL_36;
  }
  uint64_t v5 = ***a1;

  return v5();
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(uint64_t (****a1)(void), unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    if (a2 >= 0xA)
    {
      unsigned int v6 = 4;
      unint64_t v7 = a2;
      while (1)
      {
        if (v7 <= 0x63)
        {
          v6 -= 2;
          goto LABEL_15;
        }
        if (v7 <= 0x3E7) {
          break;
        }
        if (v7 >> 4 < 0x271) {
          goto LABEL_15;
        }
        unint64_t v8 = v7 >> 5;
        v7 /= 0x2710uLL;
        v6 += 4;
        if (v8 <= 0xC34)
        {
          v6 -= 3;
          goto LABEL_15;
        }
      }
      --v6;
LABEL_15:
      if (v6 >= 0x3F) {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
      }
      uint64_t v3 = (uint64_t)a1 + v6 + 16;
      if (a2 < 0x64)
      {
        unint64_t v9 = a2;
      }
      else
      {
        do
        {
          unint64_t v9 = v2 / 0x64;
          *(_WORD *)(v3 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v2 % 0x64];
          v3 -= 2;
          unint64_t v10 = v2 >> 4;
          v2 /= 0x64uLL;
        }
        while (v10 > 0x270);
      }
      if (v9 >= 0xA)
      {
        *(_WORD *)(v3 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v9];
LABEL_24:
        unint64_t v11 = (**a1)[1];
        return v11();
      }
      LOBYTE(v2) = v9;
    }
    else
    {
      uint64_t v3 = (uint64_t)a1 + 17;
    }
    *(unsigned char *)(v3 - 1) = v2 + 48;
    goto LABEL_24;
  }
  uint64_t v4 = ***a1;

  return v4();
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float(char *a1, double a2)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v4 = *(uint64_t (**)(uint64_t, const char *, char *))(**(void **)a1 + 8);
    unsigned int v6 = "null";
    uint64_t v3 = (char *)&dword_4;
  }
  else
  {
    uint64_t v3 = (char *)(nlohmann::detail::to_chars<double>(a1 + 16, (uint64_t)(a1 + 80), a2) - (a1 + 16));
    uint64_t v4 = *(uint64_t (**)(uint64_t, const char *, char *))(**(void **)a1 + 8);
    uint64_t v5 = *(void *)a1;
    unsigned int v6 = a1 + 16;
  }

  return v4(v5, v6, v3);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char *a1, unsigned int *a2, int a3)
{
  unsigned int v3 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[a3];
  if (*a1) {
    unsigned int v4 = a3 & 0x3F | (*a2 << 6);
  }
  else {
    unsigned int v4 = (0xFFu >> v3) & a3;
  }
  *a2 = v4;
  unint64_t v5 = 16 * *a1 + v3 + 256;
  if (v5 >= 0x190) {
    __assert_rtn("decode", "serializer.hpp", 892, "index < 400");
  }
  uint64_t v6 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v5];
  *a1 = v6;
  return v6;
}

char *nlohmann::detail::to_chars<double>(char *a1, uint64_t a2, double a3)
{
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    nlohmann::detail::to_chars<double>();
  }
  unsigned int v3 = a1;
  if ((*(void *)&a3 & 0x8000000000000000) != 0)
  {
    a3 = -a3;
    *a1 = 45;
    unsigned int v3 = a1 + 1;
  }
  if (a3 == 0.0)
  {
    *(_WORD *)unsigned int v3 = 11824;
    uint64_t result = v3 + 3;
    v3[2] = 48;
  }
  else
  {
    unint64_t v5 = a2 - (void)v3;
    if (a2 - (uint64_t)v3 <= 16) {
      nlohmann::detail::to_chars<double>();
    }
    uint64_t v6 = 0;
    nlohmann::detail::dtoa_impl::grisu2<double>((uint64_t)v3, (unsigned int *)&v6 + 1, &v6, a3);
    if (SHIDWORD(v6) >= 18) {
      nlohmann::detail::to_chars<double>();
    }
    if (v5 <= 0x15) {
      nlohmann::detail::to_chars<double>();
    }
    if (v5 == 22) {
      nlohmann::detail::to_chars<double>();
    }
    return nlohmann::detail::dtoa_impl::format_buffer((nlohmann::detail::dtoa_impl *)v3, (char *)HIDWORD(v6), (int)v6, -4, 15);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2<double>(uint64_t a1, unsigned int *a2, _DWORD *a3, double a4)
{
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    nlohmann::detail::dtoa_impl::grisu2<double>();
  }
  if (a4 <= 0.0) {
    nlohmann::detail::dtoa_impl::grisu2<double>();
  }
  nlohmann::detail::dtoa_impl::compute_boundaries<double>((uint64_t)v9, a4);
  return nlohmann::detail::dtoa_impl::grisu2(a1, a2, a3, v9[2], v9[3], v9[0], v9[1], v7, v9[4], (nlohmann::detail::dtoa_impl *)v9[5]);
}

char *nlohmann::detail::dtoa_impl::format_buffer(nlohmann::detail::dtoa_impl *this, char *a2, int a3, int a4, int a5)
{
  if ((a4 & 0x80000000) == 0) {
    nlohmann::detail::dtoa_impl::format_buffer();
  }
  if (a5 <= 0) {
    nlohmann::detail::dtoa_impl::format_buffer();
  }
  int v5 = (int)a2;
  uint64_t v7 = a3 + (uint64_t)(int)a2;
  if ((a3 & 0x80000000) == 0 && (int)v7 <= a5)
  {
    memset((char *)this + (int)a2, 48, a3);
    *((unsigned char *)this + v7) = 46;
    uint64_t result = (char *)this + v7 + 2;
    *((unsigned char *)this + (int)v7 + 1) = 48;
    return result;
  }
  if ((int)v7 < 1 || (int)v7 > a5)
  {
    if ((int)v7 > a4 && (int)v7 <= 0)
    {
      size_t v10 = -(int)v7;
      memmove((char *)this + v10 + 2, this, (int)a2);
      *(_WORD *)this = 11824;
      memset((char *)this + 2, 48, v10);
      return (char *)this + v10 + v5 + 2;
    }
    if (a2 == 1)
    {
      uint64_t v11 = 1;
    }
    else
    {
      memmove((char *)this + 2, (char *)this + 1, (int)a2 - 1);
      *((unsigned char *)this + 1) = 46;
      uint64_t v11 = v5 + 1;
    }
    unint64_t v12 = (char *)this + v11;
    *unint64_t v12 = 101;
    if ((int)v7 <= -999) {
      nlohmann::detail::dtoa_impl::format_buffer();
    }
    if ((int)v7 >= 1001) {
      nlohmann::detail::dtoa_impl::format_buffer();
    }
    if ((int)v7 >= 1) {
      char v13 = 43;
    }
    else {
      char v13 = 45;
    }
    if ((int)v7 - 1 >= 0) {
      unsigned int v14 = v7 - 1;
    }
    else {
      unsigned int v14 = 1 - v7;
    }
    v12[1] = v13;
    if (v14 > 9)
    {
      if (v14 > 0x63)
      {
        void v12[2] = (unsigned __int16)v14 / 0x64u + 48;
        unsigned __int8 v17 = (unsigned __int16)v14 % 0x64u;
        uint64_t v12[3] = (v17 / 0xAu) | 0x30;
        void v12[4] = (v17 % 0xAu) | 0x30;
        uint64_t v16 = 2;
        return &v12[v16 + 3];
      }
      void v12[2] = v14 / 0xAu + 48;
      char v15 = (v14 % 0xAu) | 0x30;
    }
    else
    {
      void v12[2] = 48;
      char v15 = v14 + 48;
    }
    uint64_t v12[3] = v15;
    uint64_t v16 = 1;
    return &v12[v16 + 3];
  }
  if ((a3 & 0x80000000) == 0) {
    nlohmann::detail::dtoa_impl::format_buffer();
  }
  unint64_t v9 = (char *)this + v7;
  memmove(v9 + 1, v9, (int)a2 - (unint64_t)v7);
  *unint64_t v9 = 46;
  return (char *)this + v5 + 1;
}

uint64_t nlohmann::detail::dtoa_impl::compute_boundaries<double>@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  }
  if (a2 <= 0.0) {
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  }
  uint64_t v4 = *(void *)&a2 >> 52;
  uint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  uint64_t v6 = 2 * v5;
  uint64_t v7 = *(void *)&a2 >> 53;
  uint64_t v8 = 4 * v5;
  int v9 = (*(void *)&a2 >> 52) - 1077;
  uint64_t v10 = 0x10000000000000;
  if ((*(void *)&a2 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v8 = 2 * v5;
    int v9 = (*(void *)&a2 >> 52) - 1076;
    uint64_t v10 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  BOOL v11 = v7 == 0;
  if (v7) {
    uint64_t v12 = v8;
  }
  else {
    uint64_t v12 = 2 * v5;
  }
  if (v11) {
    int v9 = (*(void *)&a2 >> 52) - 1076;
  }
  else {
    uint64_t v5 = v10;
  }
  uint64_t v3 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (v4)
  {
    unint64_t v13 = (*(void *)&a2 >> 52) - 1076;
  }
  else
  {
    uint64_t v12 = 2 * v3;
    int v9 = -1075;
    unint64_t v13 = 4294966221;
  }
  if (v4)
  {
    unint64_t v14 = (*(void *)&a2 >> 52) - 1075;
  }
  else
  {
    uint64_t v6 = 2 * v3;
    unint64_t v14 = 4294966222;
  }
  if (v4) {
    uint64_t v15 = v5;
  }
  else {
    uint64_t v15 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  }
  uint64_t v24 = v12 - 1;
  int v25 = v9;
  uint64_t v16 = nlohmann::detail::dtoa_impl::diyfp::normalize(v6 | 1, v13);
  int v18 = v17;
  unint64_t v19 = nlohmann::detail::dtoa_impl::diyfp::normalize_to(&v24, v17);
  int v21 = v20;
  uint64_t result = nlohmann::detail::dtoa_impl::diyfp::normalize(v15, v14);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v23;
  *(void *)(a1 + 16) = v19;
  *(_DWORD *)(a1 + 24) = v21;
  *(void *)(a1 + 32) = v16;
  *(_DWORD *)(a1 + 40) = v18;
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, nlohmann::detail::dtoa_impl *a10)
{
  v31[0] = a4;
  v31[1] = a5;
  v30[0] = a6;
  v30[1] = a7;
  v29[0] = a9;
  v29[1] = a10;
  if (a10 != a5) {
    nlohmann::detail::dtoa_impl::grisu2();
  }
  if (a10 != a7) {
    nlohmann::detail::dtoa_impl::grisu2();
  }
  uint64_t cached_power_for_binary_exponent = nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(a10);
  int v15 = v14;
  uint64_t v27 = cached_power_for_binary_exponent;
  int v28 = v16;
  unint64_t v17 = nlohmann::detail::dtoa_impl::diyfp::mul(v30, &v27);
  uint64_t v19 = v18;
  unint64_t v20 = nlohmann::detail::dtoa_impl::diyfp::mul(v31, &v27);
  unsigned int v22 = v21;
  unint64_t v23 = nlohmann::detail::dtoa_impl::diyfp::mul(v29, &v27);
  *a3 = -v15;
  return nlohmann::detail::dtoa_impl::grisu2_digit_gen(a1, a2, a3, v20 + 1, v22, v17, v19, v25, v23 - 1, v24);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::normalize(uint64_t result, unint64_t a2)
{
  if (!result) {
    __assert_rtn("normalize", "to_chars.hpp", 143, "x.f != 0");
  }
  for (; (result & 0x8000000000000000) == 0; a2 = (a2 - 1) | a2 & 0xFFFFFFFF00000000)
    result *= 2;
  return result;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::normalize_to(uint64_t *a1, int a2)
{
  int v2 = *((_DWORD *)a1 + 2) - a2;
  if (v2 < 0)
  {
    uint64_t v5 = "delta >= 0";
    int v6 = 162;
    goto LABEL_6;
  }
  uint64_t v3 = *a1;
  unint64_t result = *a1 << v2;
  if (result >> v2 != v3)
  {
    uint64_t v5 = "((x.f << delta) >> delta) == x.f";
    int v6 = 163;
LABEL_6:
    __assert_rtn("normalize_to", "to_chars.hpp", v6, v5);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(nlohmann::detail::dtoa_impl *this)
{
  if ((int)this <= -1501) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  if ((int)this >= 1501) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  int v1 = 78913 * (-61 - (int)this) / 0x40000;
  if ((int)this < -61) {
    ++v1;
  }
  if (v1 <= -315) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  unsigned int v2 = (int)((v1 + 307 + (((__int16)(v1 + 307) >> 28) & 7)) << 16) >> 19;
  if (v2 >= 0x4F) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  uint64_t v3 = (void *)((char *)&nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(int)::kCachedPowers
                + 16 * (unsigned __int16)v2);
  int v4 = v3[1] + this;
  if (v4 <= -125) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  if (v4 >= -95) {
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  }
  return *v3;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::mul(void *a1, void *a2)
{
  uint64_t v2 = HIDWORD(*a1);
  uint64_t v3 = HIDWORD(*a2);
  unint64_t v4 = v3 * (unint64_t)*a1;
  unint64_t v5 = *a2 * (unint64_t)v2;
  return HIDWORD(v5)
       + v3 * (unint64_t)v2
       + HIDWORD(v4)
       + ((((*a2 * (unint64_t)*a1) >> 32)
         + v4
         + v5
         + 0x80000000) >> 32);
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_digit_gen(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  v47[0] = a4;
  v47[1] = a5;
  v46[0] = a6;
  v46[1] = a7;
  unint64_t v44 = a9;
  uint64_t v45 = a10;
  if ((int)a10 <= -61) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  if ((int)a10 >= -31) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  unint64_t v13 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v47);
  uint64_t v14 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v46);
  int v15 = -(int)v45;
  unint64_t v16 = v44 >> -(char)v45;
  if (!v16) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  unint64_t v17 = v14;
  unint64_t v18 = 1 << v15;
  uint64_t v19 = (1 << v15) - 1;
  unint64_t v20 = v19 & v44;
  if (v16 <= 0x3B9AC9FF)
  {
    if (v16 <= 0x5F5E0FF)
    {
      if (v16 <= 0x98967F)
      {
        if (v16 <= 0xF423F)
        {
          unsigned int v23 = v16 >> 5;
          unsigned int v24 = v16 >> 4;
          if (v16 <= 9) {
            int v25 = 1;
          }
          else {
            int v25 = 10;
          }
          if (v16 <= 9) {
            int v26 = 1;
          }
          else {
            int v26 = 2;
          }
          if (v16 <= 0x63) {
            int v27 = v26;
          }
          else {
            int v27 = 3;
          }
          if (v16 <= 0x63) {
            int v28 = v25;
          }
          else {
            int v28 = 100;
          }
          if (v16 <= 0x3E7) {
            int v29 = v27;
          }
          else {
            int v29 = 4;
          }
          if (v16 <= 0x3E7) {
            int v30 = v28;
          }
          else {
            int v30 = 1000;
          }
          if (v24 <= 0x270) {
            int v31 = v29;
          }
          else {
            int v31 = 5;
          }
          if (v24 <= 0x270) {
            int v32 = v30;
          }
          else {
            int v32 = 10000;
          }
          if (v23 <= 0xC34) {
            int v22 = v31;
          }
          else {
            int v22 = 6;
          }
          if (v23 > 0xC34) {
            unsigned int v21 = 100000;
          }
          else {
            unsigned int v21 = v32;
          }
        }
        else
        {
          unsigned int v21 = 1000000;
          int v22 = 7;
        }
      }
      else
      {
        unsigned int v21 = 10000000;
        int v22 = 8;
      }
    }
    else
    {
      unsigned int v21 = 100000000;
      int v22 = 9;
    }
  }
  else
  {
    unsigned int v21 = 1000000000;
    int v22 = 10;
  }
  unsigned int v33 = v22 + 1;
  do
  {
    unsigned int v34 = v16 / v21;
    if (v16 / v21 >= 0xA) {
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    }
    unint64_t v16 = v16 % v21;
    uint64_t v35 = (int)*a2;
    *a2 = v35 + 1;
    *(unsigned char *)(a1 + v35) = v34 + 48;
    if ((v16 << v15) + v20 <= v13)
    {
      *a3 = *a3 + v33 - 2;
      unint64_t v18 = (unint64_t)v21 << v15;
      int v40 = (char *)*a2;
      uint64_t v41 = a1;
      unint64_t v42 = v13;
      v20 += v16 << v15;
      return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
    }
    v21 /= 0xAu;
    --v33;
  }
  while (v33 > 1);
  if (v20 <= v13) {
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  }
  int v36 = 0;
  do
  {
    if (v20 >= 0x199999999999999ALL) {
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    }
    unint64_t v37 = (10 * v20) >> v15;
    if (v37 >= 0xA) {
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    }
    uint64_t v38 = (int)*a2;
    *a2 = v38 + 1;
    *(unsigned char *)(a1 + v38) = v37 + 48;
    uint64_t v39 = 5 * v13;
    unint64_t v20 = (10 * v20) & v19;
    v13 *= 10;
    v17 *= 10;
    --v36;
  }
  while (v20 > 2 * v39);
  *a3 += v36;
  int v40 = (char *)*a2;
  uint64_t v41 = a1;
  unint64_t v42 = v13;
  return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::sub(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
  {
    unint64_t v4 = "x.e == y.e";
    int v5 = 66;
LABEL_6:
    __assert_rtn("sub", "to_chars.hpp", v5, v4);
  }
  BOOL v2 = *(void *)a1 >= *(void *)a2;
  uint64_t result = *(void *)a1 - *(void *)a2;
  if (!v2)
  {
    unint64_t v4 = "x.f >= y.f";
    int v5 = 67;
    goto LABEL_6;
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_round(uint64_t this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if ((int)a2 <= 0) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (a3 > a4) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (a4 < a5) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (!a6) {
    nlohmann::detail::dtoa_impl::grisu2_round();
  }
  if (a5 < a3 && a4 - a5 >= a6)
  {
    uint64_t v6 = (a2 - 1);
    uint64_t v7 = -(uint64_t)a5;
    unint64_t v8 = a6 + a5;
    do
    {
      if (v8 >= a3 && a3 + v7 <= v8 - a3) {
        break;
      }
      int v9 = *(unsigned __int8 *)(this + v6);
      if (v9 == 48) {
        nlohmann::detail::dtoa_impl::grisu2_round();
      }
      *(unsigned char *)(this + v6) = v9 - 1;
      if (v8 >= a3) {
        break;
      }
      unint64_t v10 = a4 - a6 + v7;
      v7 -= a6;
      v8 += a6;
    }
    while (v10 >= a6);
  }
  return this;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*(void **)(a1 + 608));
  }
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void TrainingUtils::slice_espresso_buffer_data<float>()
{
  __assert_rtn("slice_espresso_buffer_data", "TrainingUtils.cc", 103, "src != nullptr");
}

{
  __assert_rtn("slice_espresso_buffer_data", "TrainingUtils.cc", 104, "dst != nullptr");
}

void SignalUtils::quantization()
{
  __assert_rtn("quantization", "TrainingUtils.cc", 174, "signal >= -1.0 && signal <= 1.0");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump()
{
}

{
  __assert_rtn("dump", "serializer.hpp", 138, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 139, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 166, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 167, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 208, "not val.m_value.array->empty()");
}

{
  __assert_rtn("dump", "serializer.hpp", 229, "not val.m_value.array->empty()");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped()
{
}

{
  __assert_rtn("dump_escaped", "serializer.hpp", 562, "false");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>()
{
}

void nlohmann::detail::to_chars<double>()
{
  __assert_rtn("to_chars", "to_chars.hpp", 1082, "last - first >= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1092, "len <= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1100, "last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1101, "last - first >= std::numeric_limits<FloatType>::max_digits10 + 6");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1064, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2<double>()
{
}

{
  __assert_rtn("grisu2", "to_chars.hpp", 889, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::format_buffer()
{
}

{
  __assert_rtn("format_buffer", "to_chars.hpp", 980, "max_exp > 0");
}

{
  __assert_rtn("append_exponent", "to_chars.hpp", 926, "e > -1000");
}

{
  __assert_rtn("append_exponent", "to_chars.hpp", 927, "e < 1000");
}

{
  __assert_rtn("format_buffer", "to_chars.hpp", 1006, "k > n");
}

void nlohmann::detail::dtoa_impl::compute_boundaries<double>()
{
}

{
  __assert_rtn("compute_boundaries", "to_chars.hpp", 185, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2()
{
  __assert_rtn("grisu2", "to_chars.hpp", 828, "m_plus.e == v.e");
}

{
  __assert_rtn("grisu2", "to_chars.hpp", 827, "m_plus.e == m_minus.e");
}

void nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 466, "e >= -1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 467, "e <= 1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 472, "index >= 0");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 476, "kAlpha <= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 477, "kGamma >= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 473, "static_cast<std::size_t>(index) < kCachedPowers.size()");
}

void nlohmann::detail::dtoa_impl::grisu2_digit_gen()
{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 601, "M_plus.e >= kAlpha");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 602, "M_plus.e <= kGamma");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 623, "p1 > 0");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 659, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 757, "p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 766, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 746, "p2 > delta");
}

void nlohmann::detail::dtoa_impl::grisu2_round()
{
  __assert_rtn("grisu2_round", "to_chars.hpp", 545, "len >= 1");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 546, "dist <= delta");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 547, "rest <= delta");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 548, "ten_k > 0");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 573, "buf[len - 1] != '0'");
}

uint64_t TrainingEngineV2::TrainingEngineV2(uint64_t a1, uint64_t a2, int a3, std::string *__str, const std::string *a5)
{
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v7 = a1 + 96;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0x3F7AE1483F666666;
  v86 = (float *)(a1 + 120);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 128) = 814313567;
  float v84 = (float *)(a1 + 128);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  uint64_t v95 = a1 + 248;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  uint64_t v93 = a1 + 328;
  uint64_t v94 = a1 + 288;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  unint64_t v8 = (void **)(a1 + 424);
  std::chrono::steady_clock::time_point v91 = (std::string *)(a1 + 448);
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  uint64_t v87 = (uint64_t *)(a1 + 408);
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)(a1 + 664) = 1;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 680) = 0x3E800000000;
  *(_DWORD *)(a1 + 688) = 500;
  *(unsigned char *)(a1 + 692) = 0;
  *(void *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(unsigned char *)a1 = 0;
  uint64_t v85 = a1 + 136;
  uint64_t v88 = (void *)(a1 + 696);
  uint64_t v89 = a1 + 96;
  std::string::operator=((std::string *)(a1 + 136), __str);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)a2);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v113 = *(std::string *)a2;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "training_config.json");
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v112, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  }
  else {
    std::string v112 = v113;
  }
  boost::filesystem::path::append_v3(&v112, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::string::operator=((std::string *)(a1 + 696), a5);
  std::ifstream::basic_ifstream((void (__cdecl ***)(std::ifstream *__hidden))__p);
  v117[3] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(__p, (uint64_t)v117, 1, (uint64_t)v110);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v117);
  std::string::basic_string[abi:ne180100]<0>(v114, "model_init_config_file");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("", v110, (const void **)v114, &v109);
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  std::string::basic_string[abi:ne180100]<0>(v114, "model_grad_config_file");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("", v110, (const void **)v114, &v108);
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v107, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
  }
  else {
    std::string v107 = v109;
  }
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v114, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)int v114 = v113;
  }
  boost::filesystem::path::append_v3((std::string *)v114, &v107);
  std::string::operator=(&v109, (const std::string *)v114);
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v107, v108.__r_.__value_.__l.__data_, v108.__r_.__value_.__l.__size_);
  }
  else {
    std::string v107 = v108;
  }
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v114, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)int v114 = v113;
  }
  boost::filesystem::path::append_v3((std::string *)v114, &v107);
  std::string::operator=(&v108, (const std::string *)v114);
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v107, "model_checkpoint_config_file");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("", v110, (const void **)&v107.__r_.__value_.__l.__data_, (std::string *)v114);
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)unint64_t v8 = *(_OWORD *)v114;
  *(void *)(a1 + 440) = *(void *)&v114[16];
  v114[23] = 0;
  v114[0] = 0;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 447) < 0)
  {
    std::string::size_type v9 = *(void *)(a1 + 432);
    if (!v9) {
      goto LABEL_57;
    }
    std::string::__init_copy_ctor_external(&v107, (const std::string::value_type *)*v8, v9);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 447)) {
      goto LABEL_57;
    }
    *(_OWORD *)&v107.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
    v107.__r_.__value_.__r.__words[2] = *(void *)(a1 + 440);
  }
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v114, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)int v114 = v113;
  }
  boost::filesystem::path::append_v3((std::string *)v114, &v107);
  std::string::operator=((std::string *)(a1 + 424), (const std::string *)v114);
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  InferenceModel::get_saved_model_checkpoint_config_path(a1 + 160, v85, (std::string::size_type)v114);
  if (*(char *)(a1 + 471) < 0) {
    operator delete(v91->__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v91->__r_.__value_.__l.__data_ = *(_OWORD *)v114;
  v91->__r_.__value_.__r.__words[2] = *(void *)&v114[16];
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    BOOL v11 = (void *)(a1 + 424);
    if (*(char *)(a1 + 447) < 0) {
      BOOL v11 = *v8;
    }
    uint64_t v12 = v91;
    if (*(char *)(a1 + 471) < 0) {
      uint64_t v12 = (std::string *)v91->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int v114 = 136315394;
    *(void *)&v114[4] = v11;
    *(_WORD *)&v114[12] = 2080;
    *(void *)&v114[14] = v12;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Checkpointing is enabled. checkpoint_model_config_file=%s, saved_checkpoint_model_config_file=%s", v114, 0x16u);
  }
LABEL_57:
  unint64_t v13 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v110, "model_parameter_names");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>(v13, (std::vector<std::string> *)v114);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 184));
  *(_OWORD *)(a1 + 184) = *(_OWORD *)v114;
  *(void *)(a1 + 200) = *(void *)&v114[16];
  memset(v114, 0, 24);
  v107.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
  uint64_t v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v110, "model_parameter_to_grad_names");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::unordered_map<std::string,std::string>,std::unordered_map<std::string,std::string>,0>(v14, (uint64_t)v114);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(a1 + 208, (uint64_t *)v114);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v114);
  std::string::basic_string[abi:ne180100]<0>(&v107, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("fastspeech2", v110, (const void **)&v107.__r_.__value_.__l.__data_, (std::string *)v114);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)v7);
  }
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v114;
  *(void *)(v7 + 16) = *(void *)&v114[16];
  v114[23] = 0;
  v114[0] = 0;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v114, "learning_rate");
  v107.__r_.__value_.__r.__words[0] = 0x3FB999999999999ALL;
  float v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>(v110, (const void **)v114, (uint64_t)&v107);
  *(float *)(a1 + 40) = v15;
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  std::string::basic_string[abi:ne180100]<0>(v114, "learning_rate_decay");
  v107.__r_.__value_.__r.__words[0] = 0x3FE0000000000000;
  float v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>(v110, (const void **)v114, (uint64_t)&v107);
  *(float *)(a1 + 44) = v16;
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  std::string::basic_string[abi:ne180100]<0>(v114, "learning_rate_decay_steps");
  LODWORD(v107.__r_.__value_.__l.__data_) = 10000;
  *(_DWORD *)(a1 + 48) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v110, (const void **)v114, (unsigned int *)&v107);
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  std::string::basic_string[abi:ne180100]<0>(v114, "num_iter");
  LODWORD(v107.__r_.__value_.__l.__data_) = 100;
  *(void *)(a1 + 56) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v110, (const void **)v114, (unsigned int *)&v107);
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  std::string::basic_string[abi:ne180100]<0>(v114, "batch_size");
  LODWORD(v107.__r_.__value_.__l.__data_) = 1;
  *(_DWORD *)(a1 + 84) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v110, (const void **)v114, (unsigned int *)&v107);
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  std::string::basic_string[abi:ne180100]<0>(v114, "checkpoint_steps");
  LODWORD(v107.__r_.__value_.__l.__data_) = 100;
  *(void *)(a1 + 64) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v110, (const void **)v114, (unsigned int *)&v107);
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  std::string::basic_string[abi:ne180100]<0>(v114, "additional_early_stopping_epoch");
  LODWORD(v107.__r_.__value_.__l.__data_) = 10;
  *(void *)(a1 + 72) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v110, (const void **)v114, (unsigned int *)&v107);
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  std::string::basic_string[abi:ne180100]<0>(v114, "disable_min_ma_loss_checkpoint");
  v107.__r_.__value_.__s.__data_[0] = 0;
  *(unsigned char *)(a1 + 80) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v110, (const void **)v114, (unsigned __int8 *)&v107);
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  std::string::basic_string[abi:ne180100]<0>(v114, "num_of_grad_accum");
  LODWORD(v107.__r_.__value_.__l.__data_) = 1;
  *(_DWORD *)(a1 + 88) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v110, (const void **)v114, (unsigned int *)&v107);
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  std::string::basic_string[abi:ne180100]<0>(v114, "min_step_loss_check");
  *(_DWORD *)(a1 + 688) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v110, (const void **)v114, (unsigned int *)(a1 + 688));
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  std::string::basic_string[abi:ne180100]<0>(v114, "disable_inference_model_saving");
  *(unsigned char *)(a1 + 692) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v110, (const void **)v114, (unsigned __int8 *)(a1 + 692));
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  memset(&v107, 0, sizeof(v107));
  if (*(char *)(a1 + 471) < 0)
  {
    if (!*(void *)(a1 + 456))
    {
LABEL_91:
      unint64_t v17 = Diagnostics_GetLogObject();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v18 = a5;
        }
        else {
          unint64_t v18 = (const std::string *)a5->__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int v114 = 136315138;
        *(void *)&v114[4] = v18;
        _os_log_impl(&def_5A5E8, v17, OS_LOG_TYPE_INFO, "TaskId: %s, Init from init model.", v114, 0xCu);
      }
      uint64_t v19 = &v109;
      goto LABEL_97;
    }
  }
  else if (!*(unsigned char *)(a1 + 471))
  {
    goto LABEL_91;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>((std::string *)v114, (char *)v91);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)v114, 0);
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  if (!v102.__r_.__value_.__s.__data_[0] || v102.__r_.__value_.__s.__data_[0] == 255) {
    goto LABEL_91;
  }
  uint64_t v78 = Diagnostics_GetLogObject();
  BOOL v79 = os_log_type_enabled(v78, OS_LOG_TYPE_INFO);
  uint64_t v19 = v91;
  if (v79)
  {
    if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v80 = a5;
    }
    else {
      uint64_t v80 = (const std::string *)a5->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int v114 = 136315138;
    *(void *)&v114[4] = v80;
    _os_log_impl(&def_5A5E8, v78, OS_LOG_TYPE_INFO, "TaskId: %s, Init from checkpoint model.", v114, 0xCu);
    uint64_t v19 = v91;
  }
LABEL_97:
  std::string::operator=(&v107, v19);
  std::allocate_shared[abi:ne180100]<InferenceEngine::Mil2BnnsMilInferenceModel,std::allocator<InferenceEngine::Mil2BnnsMilInferenceModel>,std::string &,void>(&v105);
  (**(void (***)(uint64_t))v105)(v105);
  (*(void (**)(uint64_t))(*(void *)v105 + 40))(v105);
  unint64_t v20 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v21 = a5;
    }
    else {
      unsigned int v21 = (const std::string *)a5->__r_.__value_.__r.__words[0];
    }
    int v22 = &v107;
    if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v22 = (std::string *)v107.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int v114 = 136315394;
    *(void *)&v114[4] = v21;
    *(_WORD *)&v114[12] = 2080;
    *(void *)&v114[14] = v22;
    _os_log_impl(&def_5A5E8, v20, OS_LOG_TYPE_INFO, "TaskId: %s, Init net: load weights from %s", v114, 0x16u);
  }
  uint64_t v23 = *(void *)(a1 + 184);
  uint64_t v24 = *(void *)(a1 + 192);
  for (uint64_t i = a1; v23 != v24; v23 += 24)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)v105 + 32))(&v102);
    *(void *)int v114 = v23;
    int v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v95, (unsigned __int8 *)v23, (uint64_t)&std::piecewise_construct, (long long **)v114);
    long long v26 = *(_OWORD *)&v102.__r_.__value_.__l.__data_;
    if (v102.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v102.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    int v27 = (std::__shared_weak_count *)*((void *)v25 + 6);
    *(_OWORD *)(v25 + 40) = v26;
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    uint64_t v28 = v105;
    if (*(char *)(v23 + 23) >= 0) {
      size_t v29 = *(unsigned __int8 *)(v23 + 23);
    }
    else {
      size_t v29 = *(void *)(v23 + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v114, v29 + 5);
    if (v114[23] >= 0) {
      int v30 = v114;
    }
    else {
      int v30 = *(unsigned char **)v114;
    }
    if (v29)
    {
      if (*(char *)(v23 + 23) >= 0) {
        int v31 = (const void *)v23;
      }
      else {
        int v31 = *(const void **)v23;
      }
      memmove(v30, v31, v29);
    }
    strcpy(&v30[v29], "_mean");
    (*(void (**)(std::string *__return_ptr, uint64_t, unsigned char *))(*(void *)v28 + 32))(&v99, v28, v114);
    if ((v114[23] & 0x80000000) != 0) {
      operator delete(*(void **)v114);
    }
    *(void *)int v114 = v23;
    int v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v94, (unsigned __int8 *)v23, (uint64_t)&std::piecewise_construct, (long long **)v114);
    long long v33 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
    if (v99.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v99.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v34 = (std::__shared_weak_count *)*((void *)v32 + 6);
    *(_OWORD *)(v32 + 40) = v33;
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    uint64_t v35 = v105;
    if (*(char *)(v23 + 23) >= 0) {
      size_t v36 = *(unsigned __int8 *)(v23 + 23);
    }
    else {
      size_t v36 = *(void *)(v23 + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v114, v36 + 9);
    if (v114[23] >= 0) {
      unint64_t v37 = v114;
    }
    else {
      unint64_t v37 = *(unsigned char **)v114;
    }
    if (v36)
    {
      if (*(char *)(v23 + 23) >= 0) {
        uint64_t v38 = (const void *)v23;
      }
      else {
        uint64_t v38 = *(const void **)v23;
      }
      memmove(v37, v38, v36);
    }
    strcpy(&v37[v36], "_variance");
    (*(void (**)(void **__return_ptr, uint64_t, unsigned char *))(*(void *)v35 + 32))(&v96, v35, v114);
    if ((v114[23] & 0x80000000) != 0) {
      operator delete(*(void **)v114);
    }
    *(void *)int v114 = v23;
    uint64_t v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v93, (unsigned __int8 *)v23, (uint64_t)&std::piecewise_construct, (long long **)v114);
    uint64_t v41 = v96;
    int v40 = v97;
    if (v97) {
      atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v42 = (std::__shared_weak_count *)*((void *)v39 + 6);
    *((void *)v39 + 5) = v41;
    *((void *)v39 + 6) = v40;
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    if (v97) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v97);
    }
    if (v99.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v99.__r_.__value_.__l.__size_);
    }
    if (v102.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v102.__r_.__value_.__l.__size_);
    }
  }
  uint64_t v43 = v105;
  std::string::basic_string[abi:ne180100]<0>(v114, "step");
  (*(void (**)(std::string *__return_ptr, uint64_t, unsigned char *))(*(void *)v43 + 24))(&v102, v43, v114);
  long long v44 = *(_OWORD *)&v102.__r_.__value_.__l.__data_;
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v45 = *(std::__shared_weak_count **)(i + 416);
  *(_OWORD *)uint64_t v87 = v44;
  if (v45)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    if (v102.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v102.__r_.__value_.__l.__size_);
    }
  }
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  InferenceEngine::DataTensor::get_1d_array<int>(*v87, (std::vector<int> *)v114);
  char v46 = *(void **)v114;
  *(void *)(i + 664) = (int)**(_DWORD **)v114;
  *(void *)&v114[8] = v46;
  operator delete(v46);
  if (!*(void *)(i + 664)) {
    *(void *)(i + 664) = 1;
  }
  unint64_t v47 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
  {
    if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v48 = a5;
    }
    else {
      unint64_t v48 = (const std::string *)a5->__r_.__value_.__r.__words[0];
    }
    uint64_t v49 = *(void *)(i + 664);
    *(_DWORD *)int v114 = 136315394;
    *(void *)&v114[4] = v48;
    *(_WORD *)&v114[12] = 2048;
    *(void *)&v114[14] = v49;
    _os_log_impl(&def_5A5E8, v47, OS_LOG_TYPE_INFO, "TaskId: %s, Loading from step: %ld", v114, 0x16u);
  }
  (*(void (**)(uint64_t))(*(void *)v105 + 8))(v105);
  std::allocate_shared[abi:ne180100]<InferenceEngine::Mil2BnnsMilInferenceModel,std::allocator<InferenceEngine::Mil2BnnsMilInferenceModel>,std::string &,void>(v114);
  long long v50 = *(_OWORD *)v114;
  *(_OWORD *)int v114 = 0uLL;
  BOOL v51 = *(std::__shared_weak_count **)(i + 32);
  *(_OWORD *)(i + 24) = v50;
  if (v51)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    if (*(void *)&v114[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v114[8]);
    }
  }
  (***(void (****)(void))(i + 24))(*(void *)(i + 24));
  uint64_t v52 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
  {
    uint64_t v53 = v88;
    if (*(char *)(i + 719) < 0) {
      uint64_t v53 = (void *)*v88;
    }
    unint64_t v54 = &v108;
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v54 = (std::string *)v108.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int v114 = 136315394;
    *(void *)&v114[4] = v53;
    *(_WORD *)&v114[12] = 2080;
    *(void *)&v114[14] = v54;
    _os_log_impl(&def_5A5E8, v52, OS_LOG_TYPE_INFO, "TaskId: %s, Loaded network from %s", v114, 0x16u);
  }
  unint64_t v55 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
  {
    if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v56 = a5;
    }
    else {
      uint64_t v56 = (const std::string *)a5->__r_.__value_.__r.__words[0];
    }
    double v57 = *(float *)(i + 40);
    int v58 = *(_DWORD *)(i + 84);
    uint64_t v59 = *(void *)(i + 56);
    uint64_t v60 = *(void *)(i + 64);
    uint64_t v61 = *(void *)(i + 72);
    *(_DWORD *)int v114 = 136316418;
    *(void *)&v114[4] = v56;
    *(_WORD *)&v114[12] = 2048;
    *(double *)&v114[14] = v57;
    *(_WORD *)&v114[22] = 2048;
    *(void *)&v114[24] = v59;
    *(_WORD *)&v114[32] = 1024;
    *(_DWORD *)&v114[34] = v58;
    *(_WORD *)&v114[38] = 2048;
    *(void *)v115 = v60;
    *(_WORD *)&v115[8] = 2048;
    *(void *)&v115[10] = v61;
    _os_log_impl(&def_5A5E8, v55, OS_LOG_TYPE_INFO, "TaskId: %s, learning_rate_=%f, num_iters_=%ld, batch_size_=%d, checkpoint_steps=%ld, additional_early_stopping_epoch=%ld", v114, 0x3Au);
  }
  uint64_t v62 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v110, "optimizer_params");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v103, v62);
  std::string::basic_string[abi:ne180100]<0>(v114, "type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("adam", v103, (const void **)v114, &v102);
  if ((v114[23] & 0x80000000) != 0) {
    operator delete(*(void **)v114);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v102.__r_.__value_.__l.__size_ != 4) {
      goto LABEL_190;
    }
    unsigned int v63 = (std::string *)v102.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) != 4) {
      goto LABEL_190;
    }
    unsigned int v63 = &v102;
  }
  if (LODWORD(v63->__r_.__value_.__l.__data_) == 1835099233)
  {
    std::string::basic_string[abi:ne180100]<0>(v114, "beta1");
    float *v86 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(v103, (const void **)v114, (uint64_t)v86);
    if ((v114[23] & 0x80000000) != 0) {
      operator delete(*(void **)v114);
    }
    std::string::basic_string[abi:ne180100]<0>(v114, "beta2");
    *(float *)(i + 124) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(v103, (const void **)v114, i + 124);
    if ((v114[23] & 0x80000000) != 0) {
      operator delete(*(void **)v114);
    }
    std::string::basic_string[abi:ne180100]<0>(v114, "epsilon");
    *float v84 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(v103, (const void **)v114, (uint64_t)v84);
    if ((v114[23] & 0x80000000) != 0) {
      operator delete(*(void **)v114);
    }
  }
LABEL_190:
  TrainingEngineV2::setup_optimizer((TrainingEngineV2 *)i);
  uint64_t v64 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v110, "model_params");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v100, v64);
  if (*(char *)(i + 119) < 0)
  {
    uint64_t v68 = *(void *)(i + 104);
    if (v68 != 7)
    {
      if (v68 == 11
        && **(void **)v89 == 0x6565707374736166
        && *(void *)(*(void *)v89 + 3) == 0x3268636565707374)
      {
        goto LABEL_236;
      }
      goto LABEL_256;
    }
    uint64_t v66 = *(int **)v89;
LABEL_206:
    int v70 = *v66;
    int v71 = *(int *)((char *)v66 + 3);
    if (v70 == 1702257015 && v71 == 1852732005)
    {
      memset(&v114[8], 0, 32);
      *(_OWORD *)v115 = xmmword_213680;
      *(void *)&v115[16] = 0x4700000000000002;
      uint64_t v116 = 0x10000000258;
      int v73 = *(_DWORD *)(i + 88);
      *(_DWORD *)int v114 = 1;
      *(_DWORD *)&v114[4] = v73;
      std::string::basic_string[abi:ne180100]<0>(&v99, "step_sequence_length");
      LODWORD(v96) = 960;
      *(_DWORD *)v115 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v100, (const void **)&v99.__r_.__value_.__l.__data_, (unsigned int *)&v96);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v99, "step_shift_length");
      LODWORD(v96) = 240;
      *(_DWORD *)&v115[4] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v100, (const void **)&v99.__r_.__value_.__l.__data_, (unsigned int *)&v96);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v99, "samples_per_frame");
      LODWORD(v96) = 240;
      *(_DWORD *)&v115[8] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v100, (const void **)&v99.__r_.__value_.__l.__data_, (unsigned int *)&v96);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v99, "state_size");
      LODWORD(v96) = 448;
      *(_DWORD *)&v115[12] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v100, (const void **)&v99.__r_.__value_.__l.__data_, (unsigned int *)&v96);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v99, "samples_per_step");
      LODWORD(v96) = 2;
      *(_DWORD *)&v115[16] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v100, (const void **)&v99.__r_.__value_.__l.__data_, (unsigned int *)&v96);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v99, "audio_scalar");
      v96 = (void *)0x40E0000000000000;
      float v74 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>(v100, (const void **)&v99.__r_.__value_.__l.__data_, (uint64_t)&v96);
      *(float *)&v115[20] = v74;
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v99, "window_length");
      LODWORD(v96) = 600;
      LODWORD(v116) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v100, (const void **)&v99.__r_.__value_.__l.__data_, (unsigned int *)&v96);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      *(_DWORD *)int v114 = *(_DWORD *)(i + 84);
      std::string::basic_string[abi:ne180100]<0>(&v99, "enable_debug");
      LOBYTE(v96) = 0;
      v114[8] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v100, (const void **)&v99.__r_.__value_.__l.__data_, (unsigned __int8 *)&v96);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v96, "debug_data_dir");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("/tmp/iris/debug_data/%d/data", v100, (const void **)&v96, &v99);
      if ((v114[39] & 0x80000000) != 0) {
        operator delete(*(void **)&v114[16]);
      }
      *(std::string *)&v114[16] = v99;
      *((unsigned char *)&v99.__r_.__value_.__s + 23) = 0;
      v99.__r_.__value_.__s.__data_[0] = 0;
      if (v98 < 0) {
        operator delete(v96);
      }
      std::allocate_shared[abi:ne180100]<WaveRNNDataFeederV2,std::allocator<WaveRNNDataFeederV2>,std::string const&,std::string const&,WaveRNNDataFeederV2::Config &,void>(&v99);
      long long v75 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = 0uLL;
      uint64_t v76 = *(std::__shared_weak_count **)(i + 16);
      *(_OWORD *)(i + 8) = v75;
      if (v76)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v76);
        if (v99.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v99.__r_.__value_.__l.__size_);
        }
      }
      if ((v114[39] & 0x80000000) != 0) {
        operator delete(*(void **)&v114[16]);
      }
      goto LABEL_236;
    }
LABEL_256:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v82 = (const char *)a5;
    }
    else {
      double v82 = (const char *)a5->__r_.__value_.__r.__words[0];
    }
    double v83 = (const char *)v89;
    if (*(char *)(i + 119) < 0) {
      double v83 = *(const char **)v89;
    }
    StringFormatter::StringFormatter((StringFormatter *)v114, "TaskId: %s, Model type %s is not supported.", v82, v83);
    std::logic_error::logic_error(exception, (const std::string *)v114);
  }
  int v65 = *(unsigned __int8 *)(i + 119);
  uint64_t v66 = (int *)v89;
  if (v65 == 7) {
    goto LABEL_206;
  }
  if (v65 != 11) {
    goto LABEL_256;
  }
  if (*(void *)v89 != 0x6565707374736166 || *(void *)(v89 + 3) != 0x3268636565707374) {
    goto LABEL_256;
  }
LABEL_236:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v100);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v101, v100[0]);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v103);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v104, v103[0]);
  if (v106) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v106);
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v108.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v110);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v111, v110[0]);
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v113.__r_.__value_.__l.__data_);
  }
  return i;
}

void sub_1EEF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  if (a76 < 0) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a46);
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a49);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a69);
  std::ifstream::~ifstream(&STACK[0x238]);
  if (a72 < 0) {
    operator delete(a71);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (*(char *)(a22 + 719) < 0) {
    operator delete(*a20);
  }
  double v77 = *(void **)(a22 + 640);
  if (v77)
  {
    *(void *)(a22 + 648) = v77;
    operator delete(v77);
  }
  uint64_t v78 = *(void **)(a22 + 616);
  if (v78)
  {
    *(void *)(a22 + 624) = v78;
    operator delete(v78);
  }
  BOOL v79 = *(void **)(a22 + 592);
  if (v79)
  {
    *(void *)(a22 + 600) = v79;
    operator delete(v79);
  }
  uint64_t v80 = *(void **)(a22 + 568);
  if (v80)
  {
    *(void *)(a22 + 576) = v80;
    operator delete(v80);
  }
  uint64_t v81 = *(void **)(a22 + 544);
  if (v81)
  {
    *(void *)(a22 + 552) = v81;
    operator delete(v81);
  }
  double v82 = *a13;
  if (*a13)
  {
    *(void *)(a22 + 528) = v82;
    operator delete(v82);
  }
  if (*(char *)(a22 + 471) < 0) {
    operator delete(*a25);
  }
  if (*(char *)(a22 + 447) < 0) {
    operator delete(*a11);
  }
  double v83 = *(std::__shared_weak_count **)(a22 + 416);
  if (v83) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v83);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::~__hash_table(a22 + 368);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::~__hash_table(a27);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::~__hash_table(a28);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::~__hash_table(a29);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a23);
  STACK[0x238] = a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x238]);
  if (*(char *)(a22 + 183) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(a22 + 159) < 0) {
    operator delete(*a16);
  }
  if (*(char *)(a22 + 119) < 0) {
    operator delete(*a21);
  }
  float v84 = *(std::__shared_weak_count **)(a22 + 32);
  if (v84) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v84);
  }
  uint64_t v85 = *(std::__shared_weak_count **)(a22 + 16);
  if (v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v85);
  }
  _Unwind_Resume(a1);
}

void *InferenceEngine::DataTensor::get_1d_array<int>@<X0>(uint64_t a1@<X0>, std::vector<int> *a2@<X8>)
{
  unint64_t v4 = (uint64_t *)(a1 + 32);
  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    int v5 = *(unsigned __int8 *)(a1 + 55);
    if (v5 != 4)
    {
      if (v5 != 5) {
        goto LABEL_22;
      }
      goto LABEL_9;
    }
    if (*(_DWORD *)v4 != 842231910) {
      goto LABEL_22;
    }
LABEL_17:
      InferenceEngine::DataTensor::get_1d_array<float>();
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6 == 4 && *(_DWORD *)*v4 == 842231910) {
    goto LABEL_17;
  }
  if (v6 != 5) {
    goto LABEL_22;
  }
  unint64_t v4 = (uint64_t *)*v4;
LABEL_9:
  int v7 = *(_DWORD *)v4;
  int v8 = *((unsigned __int8 *)v4 + 4);
  if (v7 != 863268457 || v8 != 50) {
LABEL_22:
  }
    InferenceEngine::DataTensor::get_1d_array<float>();
    InferenceEngine::DataTensor::get_1d_array<float>();
LABEL_18:
  unint64_t v10 = *(const void **)(a1 + 88);
  int size = InferenceEngine::DataTensor::get_size((InferenceEngine::DataTensor *)a1);
  std::vector<int>::vector(a2, size);
  std::vector<int>::pointer begin = a2->__begin_;

  return memcpy(begin, v10, 4 * size);
}

void TrainingEngineV2::setup_optimizer(TrainingEngineV2 *this)
{
  int v2 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 118) = 0;
  *(void *)((char *)this + 476) = *((void *)this + 15);
  *((_DWORD *)this + 121) = 0;
  *((_DWORD *)this + 122) = v2;
  *(void *)((char *)this + 492) = 1065353216;
  *((unsigned char *)this + 500) = 0;
  *((void *)this + 63) = 0;
  *((_DWORD *)this + 128) = 0;
  uint64_t v3 = (uint64_t *)((char *)this + 520);
  TrainingEngineV2::populate_descs_from_bufs((uint64_t)this, (uint64_t *)this + 65, (uint64_t)this + 248);
  TrainingEngine::populate_desc_ptrs(v4, v3, (void *)this + 68);
  TrainingEngineV2::populate_descs_from_bufs((uint64_t)this, (uint64_t *)this + 77, (uint64_t)this + 288);
  TrainingEngineV2::populate_descs_from_bufs((uint64_t)this, (uint64_t *)this + 77, (uint64_t)this + 328);

  TrainingEngine::populate_desc_ptrs(v5, (uint64_t *)this + 77, (void *)this + 80);
}

void TrainingEngineV2::~TrainingEngineV2(TrainingEngineV2 *this)
{
  (*(void (**)(void))(**((void **)this + 3) + 8))(*((void *)this + 3));
  if (*((char *)this + 719) < 0) {
    operator delete(*((void **)this + 87));
  }
  int v2 = (void *)*((void *)this + 80);
  if (v2)
  {
    *((void *)this + 81) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 77);
  if (v3)
  {
    *((void *)this + 78) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 74);
  if (v4)
  {
    *((void *)this + 75) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 71);
  if (v5)
  {
    *((void *)this + 72) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 68);
  if (v6)
  {
    *((void *)this + 69) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 65);
  if (v7)
  {
    *((void *)this + 66) = v7;
    operator delete(v7);
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  int v8 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::~__hash_table((uint64_t)this + 368);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::~__hash_table((uint64_t)this + 328);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::~__hash_table((uint64_t)this + 288);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::~__hash_table((uint64_t)this + 248);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 208);
  BOOL v11 = (void **)((char *)this + 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  std::string::size_type v9 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  unint64_t v10 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void TrainingEngineV2::populate_descs_from_bufs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 4);
  std::vector<BNNSNDArrayDescriptor>::resize((uint64_t)a2, v6 + *(void *)(a3 + 24));
  uint64_t v7 = *(void *)(a1 + 184);
  if (*(void *)(a1 + 192) != v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = 176 * v6;
    do
    {
      uint64_t v11 = *a2;
      unint64_t v18 = (long long *)(v7 + v8);
      uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)(v7 + v8), (uint64_t)&std::piecewise_construct, &v18);
      uint64_t v14 = (InferenceEngine::DataTensor *)*((void *)v12 + 5);
      unint64_t v13 = (std::__shared_weak_count *)*((void *)v12 + 6);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = v11 + v10;
      *(_OWORD *)(v15 + 144) = 0u;
      *(_OWORD *)(v15 + 160) = 0u;
      *(_OWORD *)(v15 + 112) = 0u;
      *(_OWORD *)(v15 + 128) = 0u;
      *(_OWORD *)(v15 + 80) = 0u;
      *(_OWORD *)(v15 + 96) = 0u;
      *(_OWORD *)(v15 + 48) = 0u;
      *(_OWORD *)(v15 + 64) = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_OWORD *)(v15 + 32) = 0u;
      *(_OWORD *)uint64_t v15 = 0u;
      *(_DWORD *)(v15 + 4) = 0x10000;
      uint64_t size = InferenceEngine::DataTensor::get_size(v14);
      uint64_t v17 = v11 + v10;
      *(void *)(v17 + 8) = size;
      *(void *)(v17 + 136) = *((void *)v14 + 11);
      *(_DWORD *)(v17 + 144) = 65568;
      *(void *)(v17 + 164) = 1065353216;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      ++v9;
      uint64_t v7 = *(void *)(a1 + 184);
      v10 += 176;
      v8 += 24;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 192) - v7) >> 3));
  }
}

void sub_1EF9FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TrainingEngineV2::train(uint64_t a1, uint64_t a2)
{
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = (void *)(a1 + 696);
    if (*(char *)(a1 + 719) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "TaskId: %s, Init training setup.", buf, 0xCu);
  }
  v90.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v5 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = (void *)(a1 + 696);
    if (*(char *)(a1 + 719) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl(&def_5A5E8, v5, OS_LOG_TYPE_INFO, "TaskId: %s, Training start.", buf, 0xCu);
  }
  (***(void (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  unint64_t v7 = *(void *)(a1 + 664);
  uint64_t v8 = std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::__value_func[abi:ne180100]((uint64_t)v123, a2);
  int v9 = *(void *)(a1 + 56);
  *(_DWORD *)std::string buf = 13;
  uint8_t buf[4] = v7;
  buf[5] = BYTE1(v7);
  buf[6] = BYTE2(v7);
  buf[7] = BYTE3(v7);
  *(_DWORD *)&buf[8] = v9;
  std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()(v8, *(uint64_t *)buf, v9);
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100](v123);
  if (!*(unsigned char *)(a1 + 692)) {
    TrainingEngineV2::save_to_inference_model((TrainingEngineV2 *)a1);
  }
  if (v7 > *(void *)(a1 + 56)) {
    goto LABEL_12;
  }
  OptimizerAlgFields = (float *)(a1 + 472);
  uint64_t v94 = a1 + 96;
  uint64_t v99 = a1 + 368;
  v96 = (uint64_t *)(a1 + 568);
  std::chrono::steady_clock::time_point v91 = (uint64_t *)(a1 + 696);
  while (!*(unsigned char *)a1)
  {
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
      int v13 = *(unsigned __int8 *)(a1 + 119);
      uint64_t v14 = (int *)(a1 + 96);
      if (v13 != 7)
      {
        if (v13 == 11 && *(void *)v94 == 0x6565707374736166 && *(void *)(a1 + 99) == 0x3268636565707374) {
          goto LABEL_42;
        }
        goto LABEL_46;
      }
      goto LABEL_36;
    }
    uint64_t v16 = *(void *)(a1 + 104);
    if (v16 == 7)
    {
      uint64_t v14 = *(int **)v94;
LABEL_36:
      int v18 = *v14;
      int v19 = *(int *)((char *)v14 + 3);
      if (v18 == 1702257015 && v19 == 1852732005)
      {
        double v21 = *(float *)(a1 + 40);
        double v22 = pow(*(float *)(a1 + 44), (double)(int)(float)((float)(int)v7 / (float)*(int *)(a1 + 48))) * v21;
LABEL_45:
        float v28 = v22;
        float *OptimizerAlgFields = v28;
        goto LABEL_46;
      }
      goto LABEL_46;
    }
    if (v16 == 11
      && **(void **)v94 == 0x6565707374736166
      && *(void *)(*(void *)v94 + 3) == 0x3268636565707374)
    {
LABEL_42:
      float v23 = *(float *)(a1 + 44);
      double v24 = *(float *)(a1 + 40);
      double v25 = pow(4000.0, v23) * v24;
      double v26 = pow(4000.0, -(v23 + 1.0)) * (double)(int)v7;
      double v27 = pow((double)(int)v7, (float)-v23);
      if (v27 >= v26) {
        double v27 = v26;
      }
      double v22 = v25 * v27;
      goto LABEL_45;
    }
LABEL_46:
    *(float *)(a1 + 484) = (float)v7;
    v92.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    int v29 = *(_DWORD *)(a1 + 88);
    if (v29 < 1)
    {
      float v31 = 0.0;
    }
    else
    {
      uint64_t v30 = 0;
      float v31 = 0.0;
      unint64_t v97 = v7;
      do
      {
        (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 24))(v110);
        int v32 = *(long long **)(a1 + 184);
        long long v33 = *(long long **)(a1 + 192);
        while (v32 != v33)
        {
          uint64_t v34 = *(void *)(a1 + 24);
          v103[0] = v32;
          uint64_t v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 248, (unsigned __int8 *)v32, (uint64_t)&std::piecewise_construct, v103);
          size_t v36 = (std::__shared_weak_count *)*((void *)v35 + 6);
          uint64_t v108 = *((void *)v35 + 5);
          std::string v109 = v36;
          if (v36) {
            atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v34 + 16))(v34, &v108);
          if (v109) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v109);
          }
          int v32 = (long long *)((char *)v32 + 24);
        }
        unint64_t v37 = (uint64_t *)v110[0];
        uint64_t v38 = (uint64_t *)v110[1];
        while (v37 != v38)
        {
          uint64_t v39 = *(void *)(a1 + 24);
          uint64_t v106 = *v37;
          int v40 = (std::__shared_weak_count *)v37[1];
          std::string v107 = v40;
          if (v40) {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v39 + 16))(v39, &v106);
          if (v107) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v107);
          }
          v37 += 2;
        }
        (*(void (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
        uint64_t v41 = *(void *)(a1 + 24);
        (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 8) + 8))(buf);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *))(*(void *)v41 + 24))(&v104, v41, buf);
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        (*(void (**)(long long **__return_ptr))(**(void **)(a1 + 8) + 16))(v103);
        memset(v102, 0, sizeof(v102));
        unint64_t v42 = v103[0];
        uint64_t v43 = v103[1];
        while (v42 != v43)
        {
          (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 24) + 24))(buf);
          std::vector<std::shared_ptr<InferenceEngine::DataTensor>>::push_back[abi:ne180100](v102, (long long *)buf);
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          unint64_t v42 = (long long *)((char *)v42 + 24);
        }
        (*(void (**)(void, uint64_t, uint64_t *))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v30, v102);
        InferenceEngine::DataTensor::get_1d_array<float>(v104, (void **)buf);
        float v44 = **(float **)buf;
        *(void *)&buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
        memset(buf, 0, sizeof(buf));
        *(_DWORD *)int v114 = 1065353216;
        std::string::size_type v45 = *(void *)(a1 + 184);
        uint64_t v46 = *(void *)(a1 + 192);
        while (v45 != v46)
        {
          memset(&v101, 0, sizeof(v101));
          if (*(void *)(a1 + 232))
          {
            v100.__r_.__value_.__r.__words[0] = v45;
            unint64_t v47 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 208, (unsigned __int8 *)v45, (uint64_t)&std::piecewise_construct, (long long **)&v100);
            std::string::operator=(&v101, (const std::string *)(v47 + 40));
          }
          else
          {
            if (*(char *)(v45 + 23) >= 0) {
              size_t v48 = *(unsigned __int8 *)(v45 + 23);
            }
            else {
              size_t v48 = *(void *)(v45 + 8);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v100, v48 + 5);
            if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v49 = &v100;
            }
            else {
              uint64_t v49 = (std::string *)v100.__r_.__value_.__r.__words[0];
            }
            if (v48)
            {
              if (*(char *)(v45 + 23) >= 0) {
                long long v50 = (const void *)v45;
              }
              else {
                long long v50 = *(const void **)v45;
              }
              memmove(v49, v50, v48);
            }
            strcpy((char *)v49 + v48, "_grad");
            if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v101.__r_.__value_.__l.__data_);
            }
            std::string v101 = v100;
          }
          (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 24) + 32))(&v100);
          v111 = (long long *)v45;
          if (v30) {
            BOOL v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)buf, (unsigned __int8 *)v45, (uint64_t)&std::piecewise_construct, &v111);
          }
          else {
            BOOL v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v99, (unsigned __int8 *)v45, (uint64_t)&std::piecewise_construct, &v111);
          }
          uint64_t v52 = v51;
          long long v53 = *(_OWORD *)&v100.__r_.__value_.__l.__data_;
          if (v100.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v100.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v54 = (std::__shared_weak_count *)*((void *)v51 + 6);
          *(_OWORD *)(v52 + 40) = v53;
          if (v54) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v54);
          }
          if (v100.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v100.__r_.__value_.__l.__size_);
          }
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v101.__r_.__value_.__l.__data_);
          }
          v45 += 24;
        }
        int v55 = *(_DWORD *)(a1 + 88);
        if (v30 || v55 <= 1)
        {
          unint64_t v7 = v97;
          if (v30)
          {
            float v57 = 1.0 / (double)v55;
            TrainingEngineV2::accumulate_weights(a1, (uint64_t)buf, v99, v57);
          }
        }
        else
        {
          float v56 = 1.0 / (double)v55;
          TrainingEngineV2::scale_weights(a1, v99, v56);
          unint64_t v7 = v97;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::~__hash_table((uint64_t)buf);
        *(void *)std::string buf = v102;
        std::vector<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(void *)std::string buf = v103;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if (v105) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v105);
        }
        float v31 = v31 + v44;
        *(void *)std::string buf = v110;
        std::vector<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        uint64_t v30 = (v30 + 1);
        int v29 = *(_DWORD *)(a1 + 88);
      }
      while ((int)v30 < v29);
    }
    TrainingEngineV2::populate_descs_from_bufs(a1, v96, v99);
    TrainingEngine::populate_desc_ptrs(v58, v96, (void *)(a1 + 592));
    if (BNNSOptimizerStep(BNNSOptimizerFunctionAdam, OptimizerAlgFields, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 528) - *(void *)(a1 + 520)) >> 4), *(BNNSNDArrayDescriptor ***)(a1 + 544), *(const BNNSNDArrayDescriptor ***)(a1 + 592), *(BNNSNDArrayDescriptor ***)(a1 + 640), 0))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "optimizer step failed");
    }
    float v61 = v31 / (float)v29;
    *(void *)(a1 + 600) = *(void *)(a1 + 592);
    *(void *)(a1 + 576) = *(void *)(a1 + 568);
    int v62 = v7 - *(_DWORD *)(a1 + 664);
    if (*(_DWORD *)(a1 + 684) >= v62 + 1) {
      int v63 = v62 + 1;
    }
    else {
      int v63 = *(_DWORD *)(a1 + 684);
    }
    float v64 = *(float *)(a1 + 472);
    *(float *)(a1 + 672) = (float)(v61 / (float)v63)
                         + (float)((float)(*(float *)(a1 + 672) * (float)((float)v63 + -1.0)) / (float)v63);
    unint64_t v65 = v7 % 0x64;
    if (!(v7 % 0x64))
    {
      uint64_t v66 = Diagnostics_GetLogObject();
      if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
      {
        unint64_t v98 = v7;
        uint64_t v67 = a1 + 696;
        if (*(char *)(a1 + 719) < 0) {
          uint64_t v67 = *v91;
        }
        uint64_t v68 = a1 + 96;
        if (*(char *)(a1 + 119) < 0) {
          uint64_t v68 = *(void *)v94;
        }
        uint64_t v69 = *(void *)(a1 + 56);
        double v70 = *(float *)(a1 + 672);
        v71.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        *(_DWORD *)std::string buf = 136316930;
        *(void *)&uint8_t buf[4] = v67;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v68;
        *(_WORD *)&buf[22] = 2048;
        unint64_t v7 = v98;
        *(void *)&buf[24] = v98;
        *(_WORD *)int v114 = 2048;
        *(void *)&v114[2] = v69;
        __int16 v115 = 2048;
        double v116 = v70;
        __int16 v117 = 2048;
        double v118 = v61;
        __int16 v119 = 2048;
        double v120 = v64;
        __int16 v121 = 2048;
        double v122 = (double)((v71.__d_.__rep_ - v92.__d_.__rep_) / 1000000) / 1000.0;
        _os_log_impl(&def_5A5E8, v66, OS_LOG_TYPE_INFO, "TaskId: %s, model_type=%s, training_step=%ld / %ld, ma_loss=%f, training_loss=%f, lr=%f, time=%.3f s/step", buf, 0x52u);
      }
    }
    unint64_t v72 = v7 - *(void *)(a1 + 664);
    unint64_t v73 = *(int *)(a1 + 688);
    if (v72 == v73)
    {
      *(_DWORD *)(a1 + 676) = *(_DWORD *)(a1 + 672);
      *(_DWORD *)(a1 + 680) = v7;
    }
    unint64_t v74 = *(void *)(a1 + 64);
    if (v72 >= v73 && !(v7 % v74))
    {
      if (*(unsigned char *)(a1 + 80))
      {
        if (!*(unsigned char *)(a1 + 692))
        {
          TrainingEngineV2::save_to_inference_model((TrainingEngineV2 *)a1);
          unint64_t v74 = *(void *)(a1 + 64);
        }
      }
      else
      {
        if (*(float *)(a1 + 672) <= *(float *)(a1 + 676))
        {
          *(_DWORD *)(a1 + 680) = v7;
          uint64_t v76 = Diagnostics_GetLogObject();
          if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
          {
            uint64_t v77 = a1 + 696;
            if (*(char *)(a1 + 719) < 0) {
              uint64_t v77 = *v91;
            }
            double v78 = *(float *)(a1 + 672);
            double v79 = *(float *)(a1 + 676);
            *(_DWORD *)std::string buf = 136315906;
            *(void *)&uint8_t buf[4] = v77;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v7;
            *(_WORD *)&buf[22] = 2048;
            *(double *)&buf[24] = v78;
            *(_WORD *)int v114 = 2048;
            *(double *)&v114[2] = v79;
            _os_log_impl(&def_5A5E8, v76, OS_LOG_TYPE_INFO, "TaskId: %s, min_ma_loss detected, training_step=%ld, ma_loss=%f, min_ma_loss=%f", buf, 0x2Au);
          }
          *(_DWORD *)(a1 + 676) = *(_DWORD *)(a1 + 672);
          if (!*(unsigned char *)(a1 + 692)) {
            TrainingEngineV2::save_to_inference_model((TrainingEngineV2 *)a1);
          }
        }
        unint64_t v74 = *(void *)(a1 + 64);
        if ((v7 - *(int *)(a1 + 680)) / v74 >= *(void *)(a1 + 72))
        {
          uint64_t v80 = Diagnostics_GetLogObject();
          if (!os_log_type_enabled(v80, OS_LOG_TYPE_INFO)) {
            goto LABEL_12;
          }
          if (*(char *)(a1 + 719) < 0) {
            uint64_t v81 = *v91;
          }
          else {
            uint64_t v81 = a1 + 696;
          }
          double v87 = *(float *)(a1 + 672);
          double v88 = *(float *)(a1 + 676);
          *(_DWORD *)std::string buf = 136315906;
          *(void *)&uint8_t buf[4] = v81;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v7;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = v87;
          *(_WORD *)int v114 = 2048;
          *(double *)&v114[2] = v88;
          float v84 = "TaskId: %s, Exceed additional epoch due to early stopping, training_step=%ld, ma_loss=%f, min_ma_loss=%f";
          uint64_t v85 = v80;
          uint32_t v86 = 42;
          goto LABEL_152;
        }
      }
    }
    if (!(v7 % v74) || v7 == *(void *)(a1 + 56)) {
      TrainingEngineV2::save_checkpoint((TrainingEngineV2 *)a1, v7, v59, v60);
    }
    if (*(void *)(a2 + 24) && (!v65 || v7 == *(void *)(a1 + 56)))
    {
      std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::__value_func[abi:ne180100]((uint64_t)v112, a2);
      int v75 = *(void *)(a1 + 56);
      *(_DWORD *)std::string buf = 13;
      uint8_t buf[4] = v7;
      buf[5] = BYTE1(v7);
      buf[6] = BYTE2(v7);
      buf[7] = BYTE3(v7);
      *(_DWORD *)&buf[8] = v75;
      std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()((uint64_t)v112, *(uint64_t *)buf, v75);
      std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100](v112);
    }
    if (++v7 > *(void *)(a1 + 56)) {
      goto LABEL_12;
    }
  }
  double v82 = Diagnostics_GetLogObject();
  if (!os_log_type_enabled(v82, OS_LOG_TYPE_INFO)) {
    goto LABEL_12;
  }
  if (*(char *)(a1 + 719) < 0) {
    uint64_t v83 = *v91;
  }
  else {
    uint64_t v83 = a1 + 696;
  }
  *(_DWORD *)std::string buf = 136315138;
  *(void *)&uint8_t buf[4] = v83;
  float v84 = "TaskId: %s, Training stopped.";
  uint64_t v85 = v82;
  uint32_t v86 = 12;
LABEL_152:
  _os_log_impl(&def_5A5E8, v85, OS_LOG_TYPE_INFO, v84, buf, v86);
LABEL_12:
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v11 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = (void *)(a1 + 696);
    if (*(char *)(a1 + 719) < 0) {
      uint64_t v12 = (void *)*v12;
    }
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = (double)((v10.__d_.__rep_ - v90.__d_.__rep_) / 1000000) / 1000.0;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&buf[24] = *(double *)&buf[14] / (double)v7;
    _os_log_impl(&def_5A5E8, v11, OS_LOG_TYPE_INFO, "TaskId: %s, Training end. total_time=%.3f s, %.3f s/step", buf, 0x20u);
  }
}

void sub_1F0844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100]((void *)(v59 - 200));
  _Unwind_Resume(a1);
}

void TrainingEngineV2::save_to_inference_model(TrainingEngineV2 *this)
{
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = (void *)((char *)this + 696);
    if (*((char *)this + 719) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    uint64_t v4 = (void *)((char *)this + 136);
    if (*((char *)this + 159) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v4;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "TaskId: %s, Saving training model to inference model, output_path=%s", buf, 0x16u);
  }
  uint64_t v5 = (void *)((char *)this + 136);
  std::allocate_shared[abi:ne180100]<InferenceModule,std::allocator<InferenceModule>,std::string &,std::string &,void>(&v45);
  memset(v43, 0, sizeof(v43));
  int v44 = 1065353216;
  InferenceModel::get_model_weight_precision(*v45, (std::string *)buf);
  if ((buf[23] & 0x80000000) != 0)
  {
    if (*(void *)&buf[8] == 4)
    {
      int v6 = **(_DWORD **)buf;
      operator delete(*(void **)buf);
      if (v6 == 909209702) {
        goto LABEL_13;
      }
    }
    else
    {
      operator delete(*(void **)buf);
    }
LABEL_36:
    for (uint64_t i = (unsigned __int8 *)*((void *)this + 33); i; uint64_t i = *(unsigned __int8 **)i)
    {
      uint64_t v57 = 0;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      memset(buf, 0, sizeof(buf));
      *(void *)&v41[0] = i + 16;
      double v25 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v43, i + 16, (uint64_t)&std::piecewise_construct, (long long **)v41);
      long long v26 = v55;
      *(_OWORD *)(v25 + 152) = v54;
      *(_OWORD *)(v25 + 168) = v26;
      *(_OWORD *)(v25 + 184) = v56;
      uint64_t v27 = v57;
      long long v28 = v51;
      *(_OWORD *)(v25 + 88) = v50;
      *(_OWORD *)(v25 + 104) = v28;
      long long v29 = v53;
      *(_OWORD *)(v25 + 120) = v52;
      *(_OWORD *)(v25 + 136) = v29;
      long long v30 = *(_OWORD *)&buf[16];
      *(_OWORD *)(v25 + 40) = *(_OWORD *)buf;
      *((void *)v25 + 25) = v27;
      *(_OWORD *)(v25 + 56) = v30;
      *(_OWORD *)(v25 + 72) = v49;
      float v31 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v43, i + 16);
      if (!v31) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      int v32 = (InferenceEngine::DataTensor *)*((void *)i + 5);
      uint64_t v33 = *((void *)v32 + 11);
      InferenceEngine::DataTensor::get_shape(v32, 1, (char **)buf);
      InferenceEngine::EspressoUtils::convert_data_to_espresso_buffer<void>((uint64_t)(v31 + 40), v33, buf, 65568);
      if (*(void *)buf)
      {
        *(void *)&buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
    }
    (**(void (***)(InferenceModel *, _OWORD *))*v45)(*v45, v43);
    goto LABEL_42;
  }
  if (buf[23] != 4 || *(_DWORD *)buf != 909209702) {
    goto LABEL_36;
  }
LABEL_13:
  memset(v41, 0, sizeof(v41));
  int v42 = 1065353216;
  for (unint64_t j = (unsigned __int8 *)*((void *)this + 33); j; unint64_t j = *(unsigned __int8 **)j)
  {
    uint64_t v57 = 0;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    memset(buf, 0, sizeof(buf));
    v39.__r_.__value_.__r.__words[0] = (std::string::size_type)(j + 16);
    uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v43, j + 16, (uint64_t)&std::piecewise_construct, (long long **)&v39);
    long long v9 = v55;
    *(_OWORD *)(v8 + 152) = v54;
    *(_OWORD *)(v8 + 168) = v9;
    *(_OWORD *)(v8 + 184) = v56;
    uint64_t v10 = v57;
    long long v11 = v51;
    *(_OWORD *)(v8 + 88) = v50;
    *(_OWORD *)(v8 + 104) = v11;
    long long v12 = v53;
    *(_OWORD *)(v8 + 120) = v52;
    *(_OWORD *)(v8 + 136) = v12;
    long long v13 = *(_OWORD *)&buf[16];
    *(_OWORD *)(v8 + 40) = *(_OWORD *)buf;
    *((void *)v8 + 25) = v10;
    *(_OWORD *)(v8 + 56) = v13;
    *(_OWORD *)(v8 + 72) = v49;
    InferenceEngine::DataTensor::get_name(*((InferenceEngine::DataTensor **)j + 5), (std::string *)buf);
    InferenceEngine::MilIO::get_io_name(*((InferenceEngine::MilIO **)j + 5), &v39);
    InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)j + 5), 0, (char **)__p);
    std::allocate_shared[abi:ne180100]<InferenceEngine::MilIO,std::allocator<InferenceEngine::MilIO>,std::string,std::string,char const(&)[5],std::vector<unsigned long>,void>((int)buf, (int)&v39, "fp16", &v40);
    unint64_t v47 = (long long *)(j + 16);
    uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v41, j + 16, (uint64_t)&std::piecewise_construct, &v47);
    long long v15 = v40;
    long long v40 = 0uLL;
    uint64_t v16 = (std::__shared_weak_count *)*((void *)v14 + 6);
    *(_OWORD *)(v14 + 40) = v15;
    if (v16)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      if (*((void *)&v40 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v17 = *((void *)j + 5);
    int v18 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v41, j + 16);
    if (!v18) {
      goto LABEL_52;
    }
    int v19 = (std::__shared_weak_count *)*((void *)v18 + 6);
    uint64_t v36 = *((void *)v18 + 5);
    unint64_t v37 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    InferenceEngine::DataTensor::cast_data_to_target_tensor(v17, &v36);
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
    unint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v43, j + 16);
    if (!v20
      || (double v21 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v41, j + 16)) == 0)
    {
LABEL_52:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v22 = *(void *)(*((void *)v21 + 5) + 88);
    float v23 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v41, j + 16);
    if (!v23) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v23 + 5), 1, (char **)buf);
    InferenceEngine::EspressoUtils::convert_data_to_espresso_buffer<void>((uint64_t)(v20 + 40), v22, buf, 65552);
    if (*(void *)buf)
    {
      *(void *)&buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
  (**(void (***)(InferenceModel *, _OWORD *))*v45)(*v45, v43);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::~__hash_table((uint64_t)v41);
LABEL_42:
  uint64_t v34 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
  {
    uint64_t v35 = (void *)((char *)this + 696);
    if (*((char *)this + 719) < 0) {
      uint64_t v35 = (void *)*v35;
    }
    if (*((char *)this + 159) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v35;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v5;
    _os_log_impl(&def_5A5E8, v34, OS_LOG_TYPE_INFO, "TaskId: %s, Inference model saved to: %s", buf, 0x16u);
  }
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table((uint64_t)v43);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
}

void sub_1F0F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a35);
  }
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<InferenceEngine::DataTensor>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::TransitionModel::Tuple>>((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<InferenceEngine::DataTensor>>::__swap_out_circular_buffer(a1, v18);
    long long v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::~__split_buffer(v18);
  }
  else
  {
    *unint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1F1120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void TrainingEngineV2::scale_weights(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3 = *(long long **)(a1 + 184);
  for (uint64_t i = *(long long **)(a1 + 192); v3 != i; v3 = (long long *)((char *)v3 + 24))
  {
    uint64_t v10 = v3;
    unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)v3, (uint64_t)&std::piecewise_construct, &v10);
    data_uint64_t size = InferenceEngine::DataTensor::get_data_size(*((InferenceEngine::DataTensor **)v7 + 5));
    uint64_t v10 = v3;
    long long v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)v3, (uint64_t)&std::piecewise_construct, &v10);
    cblas_sscal(data_size, a3, *(float **)(*((void *)v9 + 5) + 88), 1);
  }
}

void TrainingEngineV2::accumulate_weights(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = *(long long **)(a1 + 184);
  for (i = *(long long **)(a1 + 192); v4 != i; uint64_t v4 = (long long *)((char *)v4 + 24))
  {
    unint64_t v13 = v4;
    long long v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)v4, (uint64_t)&std::piecewise_construct, &v13);
    int size = InferenceEngine::DataTensor::get_size(*((InferenceEngine::DataTensor **)v9 + 5));
    unint64_t v13 = v4;
    unint64_t v11 = *(const float **)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)v4, (uint64_t)&std::piecewise_construct, &v13)+ 5)+ 88);
    unint64_t v13 = v4;
    uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v4, (uint64_t)&std::piecewise_construct, &v13);
    cblas_saxpy(size, a4, v11, 1, *(float **)(*((void *)v12 + 5) + 88), 1);
  }
}

void TrainingEngineV2::save_checkpoint(TrainingEngineV2 *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int v4 = a2;
  if (*((char *)this + 447) < 0)
  {
    if (!*((void *)this + 54)) {
      return;
    }
  }
  else if (!*((unsigned char *)this + 447))
  {
    return;
  }
  if (*((char *)this + 471) < 0)
  {
    if (!*((void *)this + 57)) {
      return;
    }
    std::string::__init_copy_ctor_external(v59, *((const std::string::value_type **)this + 56), *((void *)this + 57));
    unint64_t v6 = (char *)this + 448;
  }
  else
  {
    if (!*((unsigned char *)this + 471)) {
      return;
    }
    unint64_t v6 = (char *)this + 448;
    v59[0] = *(std::string *)((char *)this + 448);
  }
  boost::filesystem::path::parent_path((boost::filesystem::path *)v59, a2, a3, a4, &v58);
  if (SHIBYTE(v59[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59[0].__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(v59, (char *)&v58);
  std::__fs::filesystem::__remove_all((const std::__fs::filesystem::path *)v59, 0);
  if (SHIBYTE(v59[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59[0].__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(v59, (char *)&v58);
  std::__fs::filesystem::__create_directory((const std::__fs::filesystem::path *)v59, 0);
  if (SHIBYTE(v59[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59[0].__r_.__value_.__l.__data_);
  }
  memset(v56, 0, sizeof(v56));
  int v57 = 1065353216;
  for (uint64_t i = (uint64_t *)*((void *)this + 33); i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v67 = 0;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v60 = 0u;
    memset(v59, 0, sizeof(v59));
    __p.__begin_ = (std::vector<int>::pointer)(i + 2);
    uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v56, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    long long v9 = v65;
    *(_OWORD *)(v8 + 152) = v64;
    *(_OWORD *)(v8 + 168) = v9;
    *(_OWORD *)(v8 + 184) = v66;
    uint64_t v10 = v67;
    long long v11 = v61;
    *(_OWORD *)(v8 + 88) = v60;
    *(_OWORD *)(v8 + 104) = v11;
    long long v12 = v63;
    *(_OWORD *)(v8 + 120) = v62;
    *(_OWORD *)(v8 + 136) = v12;
    long long v13 = *(_OWORD *)&v59[0].__r_.__value_.__r.__words[2];
    *(_OWORD *)(v8 + 40) = *(_OWORD *)&v59[0].__r_.__value_.__l.__data_;
    *((void *)v8 + 25) = v10;
    *(_OWORD *)(v8 + 56) = v13;
    *(_OWORD *)(v8 + 72) = *(_OWORD *)&v59[1].__r_.__value_.__r.__words[1];
    uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v56, (unsigned __int8 *)i + 16);
    if (!v14) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    long long v15 = (InferenceEngine::DataTensor *)i[5];
    uint64_t v16 = *((void *)v15 + 11);
    InferenceEngine::DataTensor::get_shape(v15, 1, &v59[0].__r_.__value_.__l.__data_);
    InferenceEngine::EspressoUtils::convert_data_to_espresso_buffer<void>((uint64_t)(v14 + 40), v16, v59, 65568);
    if (v59[0].__r_.__value_.__r.__words[0])
    {
      v59[0].__r_.__value_.__l.__size_ = v59[0].__r_.__value_.__r.__words[0];
      operator delete(v59[0].__r_.__value_.__l.__data_);
    }
  }
  int v49 = v4;
  for (unint64_t j = (uint64_t **)*((void *)this + 38); j; unint64_t j = (uint64_t **)*j)
  {
    if (*((char *)j + 39) >= 0) {
      size_t v18 = *((unsigned __int8 *)j + 39);
    }
    else {
      size_t v18 = (size_t)j[3];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v59, v18 + 5);
    if ((v59[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v19 = v59;
    }
    else {
      int v19 = (std::string *)v59[0].__r_.__value_.__r.__words[0];
    }
    if (v18)
    {
      if (*((char *)j + 39) >= 0) {
        unint64_t v20 = (uint64_t *)(j + 2);
      }
      else {
        unint64_t v20 = j[2];
      }
      memmove(v19, v20, v18);
    }
    strcpy((char *)v19 + v18, "_mean");
    __p.__begin_ = (std::vector<int>::pointer)v59;
    double v21 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v56, (unsigned __int8 *)v59, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    *((void *)v21 + 25) = 0;
    *(_OWORD *)(v21 + 184) = 0u;
    *(_OWORD *)(v21 + 168) = 0u;
    *(_OWORD *)(v21 + 152) = 0u;
    *(_OWORD *)(v21 + 136) = 0u;
    *(_OWORD *)(v21 + 120) = 0u;
    *(_OWORD *)(v21 + 104) = 0u;
    *(_OWORD *)(v21 + 88) = 0u;
    *(_OWORD *)(v21 + 72) = 0u;
    *(_OWORD *)(v21 + 56) = 0u;
    *(_OWORD *)(v21 + 40) = 0u;
    uint64_t v22 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v56, (unsigned __int8 *)v59);
    if (!v22) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    float v23 = (InferenceEngine::DataTensor *)j[5];
    uint64_t v24 = *((void *)v23 + 11);
    InferenceEngine::DataTensor::get_shape(v23, 1, (char **)&__p);
    InferenceEngine::EspressoUtils::convert_data_to_espresso_buffer<void>((uint64_t)(v22 + 40), v24, &__p, 65568);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (SHIBYTE(v59[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59[0].__r_.__value_.__l.__data_);
    }
  }
  for (k = (uint64_t **)*((void *)this + 43); k; k = (uint64_t **)*k)
  {
    if (*((char *)k + 39) >= 0) {
      size_t v26 = *((unsigned __int8 *)k + 39);
    }
    else {
      size_t v26 = (size_t)k[3];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v59, v26 + 9);
    if ((v59[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v27 = v59;
    }
    else {
      uint64_t v27 = (std::string *)v59[0].__r_.__value_.__r.__words[0];
    }
    if (v26)
    {
      if (*((char *)k + 39) >= 0) {
        long long v28 = (uint64_t *)(k + 2);
      }
      else {
        long long v28 = k[2];
      }
      memmove(v27, v28, v26);
    }
    strcpy((char *)v27 + v26, "_variance");
    __p.__begin_ = (std::vector<int>::pointer)v59;
    long long v29 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v56, (unsigned __int8 *)v59, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    *((void *)v29 + 25) = 0;
    *(_OWORD *)(v29 + 184) = 0u;
    *(_OWORD *)(v29 + 168) = 0u;
    *(_OWORD *)(v29 + 152) = 0u;
    *(_OWORD *)(v29 + 136) = 0u;
    *(_OWORD *)(v29 + 120) = 0u;
    *(_OWORD *)(v29 + 104) = 0u;
    *(_OWORD *)(v29 + 88) = 0u;
    *(_OWORD *)(v29 + 72) = 0u;
    *(_OWORD *)(v29 + 56) = 0u;
    *(_OWORD *)(v29 + 40) = 0u;
    long long v30 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v56, (unsigned __int8 *)v59);
    if (!v30) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    float v31 = (InferenceEngine::DataTensor *)k[5];
    uint64_t v32 = *((void *)v31 + 11);
    InferenceEngine::DataTensor::get_shape(v31, 1, (char **)&__p);
    InferenceEngine::EspressoUtils::convert_data_to_espresso_buffer<void>((uint64_t)(v30 + 40), v32, &__p, 65568);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (SHIBYTE(v59[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59[0].__r_.__value_.__l.__data_);
    }
  }
  InferenceEngine::DataTensor::get_name(*((InferenceEngine::DataTensor **)this + 51), v59);
  LODWORD(__x.__r_.__value_.__l.__data_) = v49;
  std::vector<int>::vector(&__p, 1uLL, (const std::vector<int>::value_type *)&__x);
  InferenceEngine::DataTensor::build_from_1d_array<int>((uint64_t)&__p, &v54);
  uint64_t v33 = (uint64_t *)((char *)this + 408);
  long long v34 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v35 = (std::__shared_weak_count *)*((void *)this + 52);
  *(_OWORD *)((char *)this + 408) = v34;
  if (v35)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    if (v54.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v54.__r_.__value_.__l.__size_);
    }
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (SHIBYTE(v59[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59[0].__r_.__value_.__l.__data_);
  }
  InferenceEngine::DataTensor::get_1d_array<int>(*v33, &__p);
  std::string::basic_string[abi:ne180100]<0>(v59, "step");
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
  uint64_t v36 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v56, (unsigned __int8 *)v59, (uint64_t)&std::piecewise_construct, (long long **)&v54);
  *((void *)v36 + 25) = 0;
  *(_OWORD *)(v36 + 184) = 0u;
  *(_OWORD *)(v36 + 168) = 0u;
  *(_OWORD *)(v36 + 152) = 0u;
  *(_OWORD *)(v36 + 136) = 0u;
  *(_OWORD *)(v36 + 120) = 0u;
  *(_OWORD *)(v36 + 104) = 0u;
  *(_OWORD *)(v36 + 88) = 0u;
  *(_OWORD *)(v36 + 72) = 0u;
  *(_OWORD *)(v36 + 56) = 0u;
  *(_OWORD *)(v36 + 40) = 0u;
  if (SHIBYTE(v59[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v59, "step");
  unint64_t v37 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v56, (unsigned __int8 *)v59);
  if (!v37) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  std::vector<int>::pointer begin = __p.__begin_;
  InferenceEngine::DataTensor::get_shape((InferenceEngine::DataTensor *)*v33, 1, &v54.__r_.__value_.__l.__data_);
  InferenceEngine::EspressoUtils::convert_data_to_espresso_buffer<void>((uint64_t)(v37 + 40), (uint64_t)begin, &v54, 131104);
  if (v54.__r_.__value_.__r.__words[0])
  {
    v54.__r_.__value_.__l.__size_ = v54.__r_.__value_.__r.__words[0];
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59[0].__r_.__value_.__l.__data_);
  }
  if (*((char *)this + 447) < 0) {
    std::string::__init_copy_ctor_external(v59, *((const std::string::value_type **)this + 53), *((void *)this + 54));
  }
  else {
    v59[0] = *(std::string *)((char *)this + 424);
  }
  boost::filesystem::path::parent_path((boost::filesystem::path *)v59, v39, v40, v41, &v54);
  if (SHIBYTE(v59[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v59, "model_file");
  InferenceEngine::MilInferenceModel::get_model_config_value_by_key<std::string>((char *)this + 424, (const void **)&v59[0].__r_.__value_.__l.__data_, &__x);
  if (SHIBYTE(v59[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(v59, __x.__r_.__value_.__l.__data_, __x.__r_.__value_.__l.__size_);
  }
  else {
    v59[0] = __x;
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v52, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  }
  else {
    std::string v52 = v54;
  }
  boost::filesystem::path::append_v3(&v52, v59);
  if (SHIBYTE(v59[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(v59, __x.__r_.__value_.__l.__data_, __x.__r_.__value_.__l.__size_);
  }
  else {
    v59[0] = __x;
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v51, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
  }
  else {
    std::string v51 = v58;
  }
  boost::filesystem::path::append_v3(&v51, v59);
  if (SHIBYTE(v59[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59[0].__r_.__value_.__l.__data_);
  }
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    uint64_t v43 = (void *)((char *)this + 696);
    if (*((char *)this + 719) < 0) {
      uint64_t v43 = (void *)*v43;
    }
    int v44 = &v52;
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v44 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v45 = &v51;
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v45 = (std::string *)v51.__r_.__value_.__r.__words[0];
    }
    LODWORD(v59[0].__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)v59[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
    WORD2(v59[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v59[0].__r_.__value_.__r.__words[1] + 6) = v49;
    WORD1(v59[0].__r_.__value_.__r.__words[2]) = 2080;
    *(std::string::size_type *)((char *)&v59[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v44;
    WORD2(v59[1].__r_.__value_.__r.__words[0]) = 2080;
    *(std::string::size_type *)((char *)v59[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v45;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "TaskId: %s, Saving step %d checkpoint src_path: %s, dst_path: %s", (uint8_t *)v59, 0x26u);
  }
  std::string::basic_string[abi:ne180100]<0>(&__to, "weight.bin");
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(v59, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
  }
  else {
    v59[0] = v58;
  }
  boost::filesystem::path::append_v3(v59, &__to.__pn_);
  InferenceEngine::EspressoUtils::save_mil_weights((uint64_t)&v52, (uint64_t)&v51, (uint64_t)v59, v56);
  if (SHIBYTE(v59[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__to.__pn_.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(v59, (char *)this + 424);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__to.__pn_, v6);
  std::__fs::filesystem::__copy((const std::__fs::filesystem::path *)v59, &__to, (std::__fs::filesystem::copy_options)0, 0);
  if (SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__to.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59[0].__r_.__value_.__l.__data_);
  }
  uint64_t v46 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
  {
    unint64_t v47 = (void *)((char *)this + 696);
    if (*((char *)this + 719) < 0) {
      unint64_t v47 = (void *)*v47;
    }
    size_t v48 = &v51;
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      size_t v48 = (std::string *)v51.__r_.__value_.__r.__words[0];
    }
    LODWORD(v59[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v59[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
    WORD2(v59[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v59[0].__r_.__value_.__r.__words[1] + 6) = v49;
    WORD1(v59[0].__r_.__value_.__r.__words[2]) = 2080;
    *(std::string::size_type *)((char *)&v59[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v48;
    _os_log_impl(&def_5A5E8, v46, OS_LOG_TYPE_INFO, "TaskId: %s, Saved step %d checkpoint to %s", (uint8_t *)v59, 0x1Cu);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table((uint64_t)v56);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
}

void sub_1F1CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a41) {
    operator delete(a41);
  }
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::~__hash_table((uint64_t)&a44);
  if (a54 < 0) {
    operator delete(a49);
  }
  _Unwind_Resume(a1);
}

void *boost::filesystem::path::parent_path@<X0>(boost::filesystem::path *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, void *a5@<X8>)
{
  unint64_t v6 = (char *)this;
  if (*((char *)this + 23) < 0) {
    unint64_t v6 = *(char **)this;
  }
  parent_path_int size = boost::filesystem::path::find_parent_path_size(this, a2, a3, a4);

  return std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a5, v6, (char *)&parent_path_size[(void)v6], (unint64_t)parent_path_size);
}

uint64_t InferenceEngine::EspressoUtils::convert_data_to_espresso_buffer<void>(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*a3 == a3[1]) {
    uint64_t result = espresso_buffer_set_rank();
  }
  else {
    uint64_t result = espresso_buffer_pack_tensor_shape();
  }
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 160) = a4;
  return result;
}

void InferenceEngine::DataTensor::build_from_1d_array<int>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v5 = *(const void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v6 = operator new(8uLL);
  long long v9 = v6;
  *unint64_t v6 = (v4 - (uint64_t)v5) >> 2;
  uint64_t v10 = v6 + 1;
  long long v11 = v6 + 1;
  InferenceEngine::DataUtils::get_type_string<int>(&__p);
  std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long> &,void>(a2);
  if (v8 < 0) {
    operator delete(__p);
  }
  memcpy(*(void **)(*a2 + 88), *(const void **)a1, *(void *)(*a2 + 80));
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
}

void sub_1F2104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::MilInferenceModel::get_model_config_value_by_key<std::string>(char *a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  InferenceEngine::Utils::read_json_from_file(a1, (uint64_t)v6);
  unint64_t v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v6, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v5, a3);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v7, v6[0]);
}

void sub_1F2198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

void InferenceEngine::EspressoUtils::save_mil_weights(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  long long v30 = 0;
  float v31 = 0;
  uint64_t v32 = 0;
  std::vector<int> __p = 0;
  long long v28 = 0;
  long long v29 = 0;
  for (uint64_t i = (uint64_t *)a4[2]; i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v6 = i + 2;
    unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::find<std::string>(a4, (unsigned __int8 *)i + 16);
    if (!v7) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    char v8 = v7 + 40;
    long long v9 = v31;
    if (v31 >= v32)
    {
      uint64_t v11 = (v31 - (unsigned char *)v30) >> 3;
      if ((unint64_t)(v11 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = (v32 - (unsigned char *)v30) >> 2;
      if (v12 <= v11 + 1) {
        unint64_t v12 = v11 + 1;
      }
      if ((unint64_t)(v32 - (unsigned char *)v30) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13) {
        uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v32, v13);
      }
      else {
        uint64_t v14 = 0;
      }
      long long v15 = (unsigned __int8 **)&v14[8 * v11];
      *long long v15 = v8;
      uint64_t v10 = (char *)(v15 + 1);
      long long v17 = (char *)v30;
      uint64_t v16 = v31;
      if (v31 != v30)
      {
        do
        {
          size_t v18 = (unsigned __int8 *)*((void *)v16 - 1);
          v16 -= 8;
          *--long long v15 = v18;
        }
        while (v16 != v17);
        uint64_t v16 = (char *)v30;
      }
      long long v30 = v15;
      float v31 = v10;
      uint64_t v32 = &v14[8 * v13];
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *(void *)float v31 = v8;
      uint64_t v10 = v9 + 8;
    }
    float v31 = v10;
    if (*((char *)i + 39) < 0) {
      unint64_t v6 = (void *)*v6;
    }
    if (v28 >= v29)
    {
      uint64_t v20 = (v28 - __p) >> 3;
      if ((unint64_t)(v20 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v21 = (v29 - __p) >> 2;
      if (v21 <= v20 + 1) {
        unint64_t v21 = v20 + 1;
      }
      if ((unint64_t)(v29 - __p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22) {
        float v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v29, v22);
      }
      else {
        float v23 = 0;
      }
      uint64_t v24 = &v23[8 * v20];
      *(void *)uint64_t v24 = v6;
      int v19 = v24 + 8;
      double v25 = v28;
      if (v28 != __p)
      {
        do
        {
          uint64_t v26 = *((void *)v25 - 1);
          v25 -= 8;
          *((void *)v24 - 1) = v26;
          v24 -= 8;
        }
        while (v25 != __p);
        double v25 = __p;
      }
      std::vector<int> __p = v24;
      long long v29 = &v23[8 * v22];
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *(void *)long long v28 = v6;
      int v19 = v28 + 8;
    }
    long long v28 = v19;
  }
  espresso_set_mil_const_values();
  if (__p) {
    operator delete(__p);
  }
  if (v30)
  {
    float v31 = (char *)v30;
    operator delete(v30);
  }
}

void sub_1F2438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<InferenceEngine::MilIO>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<InferenceEngine::MilIO>>,0>(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void *std::allocate_shared[abi:ne180100]<InferenceEngine::Mil2BnnsMilInferenceModel,std::allocator<InferenceEngine::Mil2BnnsMilInferenceModel>,std::string &,void>@<X0>(void *a1@<X8>)
{
  int v2 = operator new(0x138uLL);
  uint64_t result = std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilInferenceModel>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<InferenceEngine::Mil2BnnsMilInferenceModel>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1F2590(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  char v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  float v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *float v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1F2828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  char v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1F28C8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<InferenceEngine::MilIO>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *std::allocate_shared[abi:ne180100]<WaveRNNDataFeederV2,std::allocator<WaveRNNDataFeederV2>,std::string const&,std::string const&,WaveRNNDataFeederV2::Config &,void>@<X0>(void *a1@<X8>)
{
  int v2 = operator new(0x120uLL);
  uint64_t result = std::__shared_ptr_emplace<WaveRNNDataFeederV2>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,WaveRNNDataFeederV2::Config &,std::allocator<WaveRNNDataFeederV2>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1F2998(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<WaveRNNDataFeederV2>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,WaveRNNDataFeederV2::Config &,std::allocator<WaveRNNDataFeederV2>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_2705C8;
  WaveRNNDataFeederV2::WaveRNNDataFeederV2(a1 + 3);
  return a1;
}

void sub_1F29F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<WaveRNNDataFeederV2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2705C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WaveRNNDataFeederV2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2705C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<WaveRNNDataFeederV2>::__on_zero_shared(uint64_t a1)
{
}

void WaveRNNDataFeederV2::~WaveRNNDataFeederV2(void **this)
{
  *this = off_2706C0;
  uint64_t v3 = this + 30;
  std::vector<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = this + 27;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  *this = &off_270688;
  int v2 = (std::__shared_weak_count *)this[17];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  uint64_t v3 = this + 6;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

uint64_t std::vector<std::shared_ptr<InferenceEngine::DataTensor>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<InferenceEngine::DataTensor>>,std::reverse_iterator<std::shared_ptr<InferenceEngine::DataTensor>*>,std::reverse_iterator<std::shared_ptr<InferenceEngine::DataTensor>*>,std::reverse_iterator<std::shared_ptr<InferenceEngine::DataTensor>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<InferenceEngine::DataTensor>>,std::reverse_iterator<std::shared_ptr<InferenceEngine::DataTensor>*>,std::reverse_iterator<std::shared_ptr<InferenceEngine::DataTensor>*>,std::reverse_iterator<std::shared_ptr<InferenceEngine::DataTensor>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<InferenceEngine::DataTensor>>,std::reverse_iterator<std::shared_ptr<InferenceEngine::DataTensor>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<InferenceEngine::DataTensor>>,std::reverse_iterator<std::shared_ptr<InferenceEngine::DataTensor>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *InferenceEngine::DataUtils::get_type_string<int>@<X0>(void *a1@<X8>)
{
  {
    int v2 = "fp32";
  }
  else
  {
      InferenceEngine::DataUtils::get_type_string<float>();
    int v2 = "int32";
  }

  return std::string::basic_string[abi:ne180100]<0>(a1, v2);
}

char *std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      long long v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v10)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)v15 + 16, a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          long long v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  float v17 = (void *)(a1 + 16);
  long long v15 = (char *)operator new(0xD0uLL);
  *(void *)long long v15 = 0;
  *((void *)v15 + 1) = v10;
  float v18 = *a4;
  long long v19 = **a4;
  *((void *)v15 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)float v18 = 0;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  *(_OWORD *)(v15 + 184) = 0u;
  *((void *)v15 + 25) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)long long v15 = *v27;
LABEL_38:
    void *v27 = v15;
    goto LABEL_39;
  }
  *(void *)long long v15 = *v17;
  *float v17 = v15;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)v15)
  {
    unint64_t v28 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return v15;
}

void sub_1F2FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,espresso_buffer_t>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<InferenceEngine::MilIO,std::allocator<InferenceEngine::MilIO>,std::string,std::string,char const(&)[5],std::vector<unsigned long>,void>@<X0>(int a1@<W1>, int a2@<W2>, char *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x90uLL);
  uint64_t result = std::__shared_ptr_emplace<InferenceEngine::MilIO>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,char const(&)[5],std::vector<unsigned long>,std::allocator<InferenceEngine::MilIO>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1F3044(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<InferenceEngine::MilIO>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,char const(&)[5],std::vector<unsigned long>,std::allocator<InferenceEngine::MilIO>,0>(void *a1, int a2, int a3, char *__s)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_270618;
  std::allocator<InferenceEngine::MilIO>::construct[abi:ne180100]<InferenceEngine::MilIO,std::string,std::string,char const(&)[5],std::vector<unsigned long>>((int)&v6, (uint64_t)(a1 + 3), a2, a3, __s);
  return a1;
}

void sub_1F30C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::MilIO>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_270618;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::MilIO>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_270618;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t std::__shared_ptr_emplace<InferenceEngine::MilIO>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<InferenceEngine::MilIO>::construct[abi:ne180100]<InferenceEngine::MilIO,std::string,std::string,char const(&)[5],std::vector<unsigned long>>(int a1, uint64_t a2, int a3, int a4, char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  InferenceEngine::MilIO::MilIO(a2);
  if (v7 < 0) {
    operator delete(__p);
  }
}

void sub_1F31E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void WaveRNNModelIONames::WaveRNNModelIONames(WaveRNNModelIONames *this)
{
  *(void *)this = &off_270668;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v1 = (std::string *)((char *)this + 56);
  *(_OWORD *)((char *)this + 104) = 0u;
  int v2 = (std::string *)((char *)this + 104);
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v3 = (std::string *)((char *)this + 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  unint64_t v4 = (std::string *)((char *)this + 80);
  uint64_t v5 = (std::string *)((char *)this + 128);
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  std::string::assign((std::string *)((char *)this + 8), "input_state");
  std::string::assign(v3, "input");
  std::string::assign(v1, "input_coarse_groundtruth");
  std::string::assign(v4, "input_fine_groundtruth");
  std::string::assign(v2, "Identity_1");
  std::string::assign(v5, "Identity");
}

void sub_1F32F4(_Unwind_Exception *exception_object)
{
  if (v1[151] < 0) {
    operator delete(*v7);
  }
  if (v1[127] < 0) {
    operator delete(*v6);
  }
  if (v1[103] < 0) {
    operator delete(*v5);
  }
  if (v1[79] < 0) {
    operator delete(*v4);
  }
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void WaveRNNModelIONames::get_loss_name(WaveRNNModelIONames *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 127) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 13), *((void *)this + 14));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 104);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 15);
  }
}

void WaveRNNModelIONames::get_output_names(WaveRNNModelIONames *this@<X0>, std::string **a2@<X8>)
{
  if (*((char *)this + 151) < 0) {
    std::string::__init_copy_ctor_external(&v4, *((const std::string::value_type **)this + 16), *((void *)this + 17));
  }
  else {
    std::string v4 = *(std::string *)((char *)this + 128);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = (std::string *)operator new(0x18uLL);
  *a2 = v3;
  a2[1] = v3;
  a2[2] = v3 + 1;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (long long *)&v4, &v5, v3);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_1F3460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t BatchWaveRNNTrainDataV2::BatchWaveRNNTrainDataV2(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v3 = (uint64_t *)(a1 + 104);
  *(_OWORD *)(a1 + 152) = 0u;
  std::string v4 = (uint64_t *)(a1 + 152);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  uint64_t v5 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 72;
    do
    {
      uint64_t v9 = v5 + v8 - 72;
      unint64_t v10 = *(void *)(a1 + 112);
      if (v10 >= *(void *)(a1 + 120))
      {
        uint64_t v11 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v3, v9);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v3, v9);
        uint64_t v11 = v10 + 24;
      }
      *(void *)(a1 + 112) = v11;
      uint8x8_t v12 = (uint64_t *)(*a2 + v8 - 48);
      unint64_t v13 = *(void *)(a1 + 136);
      if (v13 >= *(void *)(a1 + 144))
      {
        uint64_t v14 = std::vector<std::vector<std::vector<float>>>::__push_back_slow_path<std::vector<std::vector<float>> const&>((uint64_t *)(a1 + 128), v12);
      }
      else
      {
        std::vector<std::vector<std::vector<float>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<float>> const&>(a1 + 128, v12);
        uint64_t v14 = v13 + 24;
      }
      *(void *)(a1 + 136) = v14;
      uint64_t v15 = *a2 + v8 - 24;
      unint64_t v16 = *(void *)(a1 + 160);
      if (v16 >= *(void *)(a1 + 168))
      {
        uint64_t v17 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v4, v15);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v4, v15);
        uint64_t v17 = v16 + 24;
      }
      *(void *)(a1 + 160) = v17;
      uint64_t v18 = *a2 + v8;
      unint64_t v19 = *(void *)(a1 + 184);
      if (v19 >= *(void *)(a1 + 192))
      {
        uint64_t v20 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)(a1 + 176), v18);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>(a1 + 176, v18);
        uint64_t v20 = v19 + 24;
      }
      *(void *)(a1 + 184) = v20;
      ++v7;
      uint64_t v5 = *a2;
      v8 += 104;
    }
    while (0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3) > v7);
  }
  return a1;
}

void sub_1F3634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::vector<std::vector<double>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  WaveRNNTrainData::~WaveRNNTrainData(v2);
  _Unwind_Resume(a1);
}

uint64_t DataFeederV2::DataFeederV2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *(void *)a1 = &off_270688;
  uint64_t v7 = *a4;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a4 + 8);
  *(void *)(a1 + 8) = v7;
  if (*((char *)a4 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), (const std::string::value_type *)a4[2], a4[3]);
  }
  else
  {
    long long v8 = *((_OWORD *)a4 + 1);
    *(void *)(a1 + 40) = a4[4];
    *(_OWORD *)(a1 + 24) = v8;
  }
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v9 = (void **)(a1 + 72);
  *(_OWORD *)(a1 + 96) = 0u;
  unint64_t v10 = (void **)(a1 + 96);
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 120) = 1;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    if (*(char *)(a1 + 95) < 0) {
      operator delete(*v9);
    }
  }
  else
  {
    std::string v13 = *(std::string *)a2;
  }
  *(_OWORD *)uint64_t v9 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(void *)(a1 + 88) = *((void *)&v13.__r_.__value_.__l + 2);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v13 = *(std::string *)a3;
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v10);
  }
  *(_OWORD *)unint64_t v10 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(void *)(a1 + 112) = *((void *)&v13.__r_.__value_.__l + 2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "metadata_mel.json");
  if (*(char *)(a1 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a1 + 72), *(void *)(a1 + 80));
  }
  else
  {
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = *(_OWORD *)v9;
    v13.__r_.__value_.__r.__words[2] = *(void *)(a1 + 88);
  }
  boost::filesystem::path::append_v3(&v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  InferenceEngine::Utils::read_metadata_from_file((char *)&v13, (uint64_t *)&__p);
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vdeallocate((void **)(a1 + 48));
  *(std::string *)(a1 + 48) = __p;
  memset(&__p, 0, sizeof(__p));
  p_p = &__p;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  *(_DWORD *)(a1 + 120) = 2020;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1F3884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v26 = *(std::__shared_weak_count **)(v21 + 136);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (*(char *)(v21 + 119) < 0) {
    operator delete(*v24);
  }
  if (*(char *)(v21 + 95) < 0) {
    operator delete(*v23);
  }
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (*(char *)(v21 + 47) < 0) {
    operator delete(*v22);
  }
  _Unwind_Resume(a1);
}

uint64_t DataFeederV2::get_loss_name(DataFeederV2 *this)
{
  return (***((uint64_t (****)(void))this + 16))(*((void *)this + 16));
}

uint64_t DataFeederV2::get_output_names(DataFeederV2 *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 16) + 8))();
}

uint64_t WaveRNNDataFeederV2::OneBatchReader::OneBatchReader(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = *a5;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a5 + 8);
  *(void *)a1 = v10;
  if (*((char *)a5 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)a5[2], a5[3]);
  }
  else
  {
    long long v11 = *((_OWORD *)a5 + 1);
    *(void *)(a1 + 32) = a5[4];
    *(_OWORD *)(a1 + 16) = v11;
  }
  long long v12 = *(_OWORD *)(a5 + 5);
  long long v13 = *(_OWORD *)(a5 + 7);
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 40) = v12;
  *(_OWORD *)(a1 + 56) = v13;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((void *)(a1 + 88), *a3, a3[1], (a3[1] - *a3) >> 4);
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 112) = a4;
  *(void *)(a1 + 120) = a2;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  int v14 = *(_DWORD *)(a1 + 48) / *(_DWORD *)(a1 + 56);
  if (*(_DWORD *)(a1 + 44) % v14)
  {
    unint64_t v16 = "params_.step_shift_length%(params_.samples_per_frame/params_.samples_per_step) == 0";
    int v17 = 65;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 40) % v14)
  {
    unint64_t v16 = "params_.step_sequence_length%(params_.samples_per_frame/params_.samples_per_step) == 0";
    int v17 = 66;
LABEL_9:
    __assert_rtn("OneBatchReader", "DataFeederV2.cpp", v17, v16);
  }
  return a1;
}

void sub_1F3AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 39) < 0) {
    operator delete(*v11);
  }
  _Unwind_Resume(exception_object);
}

void WaveRNNDataFeederV2::OneBatchReader::read_data(uint64_t a1, char *a2)
{
  uint64_t v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "utterance_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v4, &v61);
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_DEBUG)) {
    WaveRNNDataFeederV2::OneBatchReader::read_data((uint64_t *)&v61, LogObject);
  }
  std::string::basic_string[abi:ne180100]<0>(&v60, "mel_dim");
  LODWORD(v59.__r_.__value_.__l.__data_) = 80;
  int v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v60.__r_.__value_.__l.__data_, (unsigned int *)&v59);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = *(long long **)(a1 + 120);
  std::string::basic_string[abi:ne180100]<0>(&v58, "mel");
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)v7, *((void *)v7 + 1));
  }
  else
  {
    long long v8 = *v7;
    v59.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v8;
  }
  boost::filesystem::path::append_v3(&v59, &v58);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v61.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = &v56;
  std::string::basic_string[abi:ne180100]((uint64_t)&v56, size + 4);
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v10 = (std::string *)v56.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v11 = &v61;
    }
    else {
      long long v11 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    memmove(v10, v11, size);
  }
  strcpy((char *)v10 + size, ".mel");
  std::string __p = v56;
  memset(&v56, 0, sizeof(v56));
  boost::filesystem::path::append_v3(&v59, &__p);
  std::string v60 = v59;
  memset(&v59, 0, sizeof(v59));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  InferenceEngine::DataUtils::read_vector_from_file<float>(&v59);
  InferenceEngine::DataUtils::reshape_1d_to_2d<float>((uint64_t *)&v59, v6, (uint64_t *)&v58);
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)(a1 + 128));
  *(std::string *)(a1 + 128) = v58;
  memset(&v58, 0, sizeof(v58));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  long long v12 = *(long long **)(a1 + 120);
  std::string::basic_string[abi:ne180100]<0>(&v56, "silence_trimmed");
  if (*((char *)v12 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v12, *((void *)v12 + 1));
  }
  else
  {
    long long v13 = *v12;
    __p.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
  }
  boost::filesystem::path::append_v3(&__p, &v56);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = v61.__r_.__value_.__l.__size_;
  }
  p_src = &__src;
  std::string::basic_string[abi:ne180100]((uint64_t)&__src, v14 + 4);
  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
  }
  if (v14)
  {
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v16 = &v61;
    }
    else {
      unint64_t v16 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    memmove(p_src, v16, v14);
  }
  strcpy((char *)p_src + v14, ".wav");
  std::string v55 = __src;
  memset(&__src, 0, sizeof(__src));
  boost::filesystem::path::append_v3(&__p, &v55);
  std::string v58 = __p;
  memset(&__p, 0, sizeof(__p));
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__src.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  reader = PCMFile::create_reader((char *)&v58);
  uint64_t v18 = (PCMFile::Reader *)reader;
  if (!reader)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    long long v53 = &v58;
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v53 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    StringFormatter::StringFormatter((StringFormatter *)&__p, "Can't read wavfile from %s", (const char *)v53);
    std::logic_error::logic_error(exception, &__p);
  }
  uint64_t v19 = *((void *)reader + 6);
  std::vector<short>::vector(&__p, v19);
  PCMFile::Reader::read_samples(v18, v19, __p.__r_.__value_.__l.__data_, 2, 0, 1.0);
  memset(&v56, 0, sizeof(v56));
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>((char *)&v56, (__int16 *)__p.__r_.__value_.__l.__data_, (__int16 *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 1);
  uint64_t v21 = (uint64_t *)(a1 + 152);
  uint64_t v20 = *(void **)(a1 + 152);
  if (v20)
  {
    *(void *)(a1 + 160) = v20;
    operator delete(v20);
    *uint64_t v21 = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
  }
  BOOL v22 = (const void *)v56.__r_.__value_.__r.__words[0];
  *(std::string *)(a1 + 152) = v56;
  int v23 = *(_DWORD *)(a1 + 64);
  memset(&v56, 0, sizeof(v56));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v56, v22, (uint64_t)v22 + 4 * (v23 / 2), (uint64_t)(v23 + (v23 < 0)) >> 1);
  if (v56.__r_.__value_.__r.__words[0] != v56.__r_.__value_.__l.__size_)
  {
    unint64_t v24 = (_DWORD *)(v56.__r_.__value_.__l.__size_ - 4);
    if (v56.__r_.__value_.__l.__size_ - 4 > v56.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v25 = v56.__r_.__value_.__r.__words[0] + 4;
      do
      {
        int v26 = *(_DWORD *)(v25 - 4);
        *(_DWORD *)(v25 - 4) = *v24;
        *v24-- = v26;
        BOOL v27 = v25 >= (unint64_t)v24;
        v25 += 4;
      }
      while (!v27);
    }
  }
  uint64_t v28 = *(void *)(a1 + 160);
  int v29 = *(_DWORD *)(a1 + 64);
  memset(&v55, 0, sizeof(v55));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v55, (const void *)(v28 + 4 * (v29 / -2)), v28, (-4 * (v29 / -2)) >> 2);
  if (v55.__r_.__value_.__r.__words[0] != v55.__r_.__value_.__l.__size_)
  {
    long long v30 = (_DWORD *)(v55.__r_.__value_.__l.__size_ - 4);
    if (v55.__r_.__value_.__l.__size_ - 4 > v55.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v31 = v55.__r_.__value_.__r.__words[0] + 4;
      do
      {
        int v32 = *(_DWORD *)(v31 - 4);
        *(_DWORD *)(v31 - 4) = *v30;
        *v30-- = v32;
        BOOL v27 = v31 >= (unint64_t)v30;
        v31 += 4;
      }
      while (!v27);
    }
  }
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(a1 + 152, *v21, v56.__r_.__value_.__l.__data_, (char *)v56.__r_.__value_.__l.__size_, (uint64_t)(v56.__r_.__value_.__l.__size_ - v56.__r_.__value_.__r.__words[0]) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(a1 + 152, *(void *)(a1 + 160), v55.__r_.__value_.__l.__data_, (char *)v55.__r_.__value_.__l.__size_, (uint64_t)(v55.__r_.__value_.__l.__size_ - v55.__r_.__value_.__r.__words[0]) >> 2);
  uint64_t v33 = *(float **)(a1 + 152);
  long long v34 = *(float **)(a1 + 160);
  unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3) * *(int *)(a1 + 48);
  if (v35 < v34 - v33)
  {
    std::vector<float>::resize(a1 + 152, v35);
    uint64_t v33 = *(float **)(a1 + 152);
    long long v34 = *(float **)(a1 + 160);
  }
  if (v33 != v34)
  {
    uint64_t v36 = v33;
    do
    {
      float *v36 = *v36 / *(float *)(a1 + 60);
      ++v36;
    }
    while (v36 != v34);
    do
    {
      if (*v33 <= 1.0) {
        float v37 = *v33;
      }
      else {
        float v37 = 1.0;
      }
      if (*v33 >= -1.0) {
        float v38 = v37;
      }
      else {
        float v38 = -1.0;
      }
      *v33++ = v38;
    }
    while (v33 != v34);
  }
  SignalUtils::preemphasize((uint64_t *)(a1 + 152), (float **)&__src);
  uint64_t v39 = (void *)*v21;
  if (*v21)
  {
    *(void *)(a1 + 160) = v39;
    operator delete(v39);
    *uint64_t v21 = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
  }
  uint64_t v40 = (float *)__src.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 152) = __src.__r_.__value_.__r.__words[0];
  std::string::size_type v41 = __src.__r_.__value_.__l.__size_;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)&__src.__r_.__value_.__r.__words[1];
  int v42 = (float *)v41;
  if (v40 == (float *)v41) {
    goto LABEL_87;
  }
  uint64_t v43 = v40;
  do
  {
    if (*v43 <= 1.0) {
      float v44 = *v43;
    }
    else {
      float v44 = 1.0;
    }
    if (*v43 >= -1.0) {
      float v45 = v44;
    }
    else {
      float v45 = -1.0;
    }
    *v43++ = v45;
  }
  while (v43 != (float *)v41);
  do
  {
    *uint64_t v40 = SignalUtils::mulaw_encode((SignalUtils *)v39, *v40, (float)*(int *)(a1 + 68));
    ++v40;
  }
  while (v40 != v42);
  uint64_t v46 = *(float **)(a1 + 152);
  uint64_t v40 = *(float **)(a1 + 160);
  if (v46 == v40)
  {
LABEL_87:
    unint64_t v47 = (char *)v40;
  }
  else
  {
    do
    {
      *uint64_t v46 = (float)(int)SignalUtils::quantization((SignalUtils *)*(unsigned int *)(a1 + 68), *v46);
      ++v46;
    }
    while (v46 != v40);
    unint64_t v47 = *(char **)(a1 + 152);
    uint64_t v40 = *(float **)(a1 + 160);
  }
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 176), v47, (uint64_t)v40, ((char *)v40 - v47) >> 2);
  size_t v48 = *(char **)(a1 + 176);
  int v49 = *(char **)(a1 + 184);
  if (v48 == v49)
  {
    uint64_t v50 = *(void *)(a1 + 176);
  }
  else
  {
    do
    {
      *(float *)size_t v48 = SignalUtils::dequantization((SignalUtils *)(int)*(float *)v48, *(_DWORD *)(a1 + 68));
      v48 += 4;
    }
    while (v48 != v49);
    size_t v48 = *(char **)(a1 + 176);
    uint64_t v50 = *(void *)(a1 + 184);
  }
  *(void *)(a1 + 184) = v50 - 4;
  LODWORD(__src.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::insert(a1 + 176, v48, (float *)&__src);
  uint64_t v51 = (*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 2;
  *(_DWORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = v51;
  if (v55.__r_.__value_.__r.__words[0])
  {
    v55.__r_.__value_.__l.__size_ = v55.__r_.__value_.__r.__words[0];
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (v56.__r_.__value_.__r.__words[0])
  {
    v56.__r_.__value_.__l.__size_ = v56.__r_.__value_.__r.__words[0];
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  (*(void (**)(PCMFile::Reader *))(*(void *)v18 + 8))(v18);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (v59.__r_.__value_.__r.__words[0])
  {
    v59.__r_.__value_.__l.__size_ = v59.__r_.__value_.__r.__words[0];
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
}

void sub_1F42C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  float v44 = *(void **)(v42 - 144);
  if (v44)
  {
    *(void *)(v42 - 136) = v44;
    operator delete(v44);
  }
  if (*(char *)(v42 - 89) < 0) {
    operator delete(*(void **)(v42 - 112));
  }
  if (*(char *)(v42 - 57) < 0) {
    operator delete(*(void **)(v42 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::DataUtils::read_vector_from_file<float>@<X0>(void *a1@<X8>)
{
  std::ifstream::basic_ifstream(v4);
  std::istream::tellg();
  if ((v3 & 3) != 0) {
    __assert_rtn("read_vector_from_file", "DataTensor.hpp", 176, "filesize%sizeof(T) == 0");
  }
  std::vector<float>::vector(a1, v3 >> 2);
  std::istream::seekg();
  std::istream::read();
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v4 + (unint64_t)*(v4[0] - 3)), *(_DWORD *)((char *)&v4[4] + (unint64_t)*(v4[0] - 3)) | 4);
  }
  std::filebuf::~filebuf();
  std::istream::~istream();
  return std::ios::~ios();
}

void sub_1F467C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void WaveRNNDataFeederV2::OneBatchReader::fetch_data(WaveRNNDataFeederV2::OneBatchReader *this@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  int v4 = *((_DWORD *)this + 10);
  if (v4 >= 1)
  {
    int v5 = 0;
    long long v64 = (void **)(a2 + 72);
    long long v65 = (void **)(a2 + 48);
    do
    {
      uint64_t v6 = *((int *)this + 19) + *((int *)this + 14) * (uint64_t)v5;
      uint64_t v7 = *((void *)this + 19);
      uint64_t v8 = v6 + 1;
      float v9 = *(float *)(v7 + 4 * (v6 + 1));
      int v10 = (int)*(float *)(v7 + 4 * v6);
      long long v12 = *(int **)(a2 + 56);
      unint64_t v11 = *(void *)(a2 + 64);
      if ((unint64_t)v12 >= v11)
      {
        std::string::size_type v14 = (int *)*v65;
        uint64_t v15 = ((char *)v12 - (unsigned char *)*v65) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v11 - (void)v14;
        if (v17 >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 64, v18);
          std::string::size_type v14 = *(int **)(a2 + 48);
          long long v12 = *(int **)(a2 + 56);
        }
        else
        {
          uint64_t v19 = 0;
        }
        uint64_t v20 = (int *)&v19[4 * v15];
        *uint64_t v20 = v10;
        long long v13 = v20 + 1;
        while (v12 != v14)
        {
          int v21 = *--v12;
          *--uint64_t v20 = v21;
        }
        *(void *)(a2 + 48) = v20;
        *(void *)(a2 + 56) = v13;
        *(void *)(a2 + 64) = &v19[4 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *long long v12 = v10;
        long long v13 = v12 + 1;
      }
      *(void *)(a2 + 56) = v13;
      int v22 = (int)v9;
      unint64_t v24 = *(int **)(a2 + 80);
      unint64_t v23 = *(void *)(a2 + 88);
      if ((unint64_t)v24 >= v23)
      {
        int v26 = (int *)*v64;
        uint64_t v27 = ((char *)v24 - (unsigned char *)*v64) >> 2;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = v23 - (void)v26;
        if (v29 >> 1 > v28) {
          unint64_t v28 = v29 >> 1;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          std::string::size_type v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 88, v30);
          int v26 = *(int **)(a2 + 72);
          unint64_t v24 = *(int **)(a2 + 80);
        }
        else
        {
          std::string::size_type v31 = 0;
        }
        int v32 = (int *)&v31[4 * v27];
        *int v32 = v22;
        std::string::size_type v25 = v32 + 1;
        while (v24 != v26)
        {
          int v33 = *--v24;
          *--int v32 = v33;
        }
        *(void *)(a2 + 72) = v32;
        *(void *)(a2 + 80) = v25;
        *(void *)(a2 + 88) = &v31[4 * v30];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *unint64_t v24 = v22;
        std::string::size_type v25 = v24 + 1;
      }
      *(void *)(a2 + 80) = v25;
      uint64_t v34 = *((void *)this + 16) + 24 * ((int)v6 / *((_DWORD *)this + 12));
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v34, *(void *)(v34 + 8), (uint64_t)(*(void *)(v34 + 8) - *(void *)v34) >> 2);
      uint64_t v35 = *((void *)this + 22);
      float v37 = v67;
      uint64_t v36 = v68;
      if (v67 >= v68)
      {
        uint64_t v39 = (char *)__p;
        uint64_t v40 = (v67 - (unsigned char *)__p) >> 2;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62) {
          goto LABEL_81;
        }
        uint64_t v42 = v68 - (unsigned char *)__p;
        if ((v68 - (unsigned char *)__p) >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          float v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v68, v43);
          uint64_t v39 = (char *)__p;
          float v37 = v67;
        }
        else
        {
          float v44 = 0;
        }
        float v45 = &v44[4 * v40];
        *(_DWORD *)float v45 = *(_DWORD *)(v35 + 4 * v6);
        float v38 = v45 + 4;
        while (v37 != v39)
        {
          int v46 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        uint64_t v36 = &v44[4 * v43];
        std::string __p = v45;
        uint64_t v67 = v38;
        uint64_t v68 = v36;
        if (v39)
        {
          operator delete(v39);
          uint64_t v36 = v68;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v67 = *(_DWORD *)(v35 + 4 * v6);
        float v38 = v37 + 4;
      }
      uint64_t v67 = v38;
      uint64_t v47 = *((void *)this + 22);
      if (v38 >= v36)
      {
        int v49 = (char *)__p;
        uint64_t v50 = (v38 - (unsigned char *)__p) >> 2;
        unint64_t v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 62) {
LABEL_81:
        }
          std::vector<float>::__throw_length_error[abi:ne180100]();
        uint64_t v52 = v36 - (unsigned char *)__p;
        if (v52 >> 1 > v51) {
          unint64_t v51 = v52 >> 1;
        }
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v51;
        }
        if (v53)
        {
          std::string v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v68, v53);
          int v49 = (char *)__p;
          float v38 = v67;
        }
        else
        {
          std::string v54 = 0;
        }
        std::string v55 = &v54[4 * v50];
        *(_DWORD *)std::string v55 = *(_DWORD *)(v47 + 4 * v8);
        size_t v48 = v55 + 4;
        while (v38 != v49)
        {
          int v56 = *((_DWORD *)v38 - 1);
          v38 -= 4;
          *((_DWORD *)v55 - 1) = v56;
          v55 -= 4;
        }
        std::string __p = v55;
        uint64_t v67 = v48;
        uint64_t v68 = &v54[4 * v53];
        if (v49) {
          operator delete(v49);
        }
      }
      else
      {
        *(_DWORD *)float v38 = *(_DWORD *)(v47 + 4 * v8);
        size_t v48 = v38 + 4;
      }
      uint64_t v67 = v48;
      unint64_t v57 = *(void *)(a2 + 32);
      if (v57 >= *(void *)(a2 + 40))
      {
        uint64_t v58 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)(a2 + 24), (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>(a2 + 24, (uint64_t)&__p);
        uint64_t v58 = v57 + 24;
      }
      *(void *)(a2 + 32) = v58;
      if (__p)
      {
        uint64_t v67 = (char *)__p;
        operator delete(__p);
      }
      ++v5;
      int v4 = *((_DWORD *)this + 10);
    }
    while (v5 < v4);
  }
  int v59 = *((_DWORD *)this + 19);
  if (!v59) {
    *(unsigned char *)(a2 + 96) = 1;
  }
  int v60 = *((_DWORD *)this + 14);
  int v61 = v59 + v60 * *((_DWORD *)this + 11);
  *((_DWORD *)this + 19) = v61;
  if (v61 + v60 * v4 >= *((_DWORD *)this + 20))
  {
    unint64_t v62 = *((int *)this + 18) + 1;
    *((_DWORD *)this + 18) = v62;
    long long v63 = (char *)*((void *)this + 11);
    if (v62 >= (uint64_t)(*((void *)this + 12) - (void)v63) >> 4)
    {
      *((void *)this + 9) = 0;
      *((_DWORD *)this + 20) = 0;
    }
    else
    {
      v63 += 16 * v62;
    }
    WaveRNNDataFeederV2::OneBatchReader::read_data((uint64_t)this, v63);
  }
}

void sub_1F4B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  WaveRNNTrainData::~WaveRNNTrainData(v15);
  _Unwind_Resume(a1);
}

uint64_t WaveRNNDataFeederV2::WaveRNNDataFeederV2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = DataFeederV2::DataFeederV2(a1, a2, a3, (uint64_t *)a4);
  *(void *)uint64_t v6 = off_2706C0;
  char v7 = *(unsigned char *)(a4 + 8);
  *(void *)(v6 + 144) = *(void *)a4;
  uint64_t v8 = (uint64_t *)(v6 + 144);
  *(unsigned char *)(v6 + 152) = v7;
  float v9 = (std::string *)(v6 + 160);
  if (*(char *)(a4 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a4 + 16), *(void *)(a4 + 24));
  }
  else
  {
    long long v10 = *(_OWORD *)(a4 + 16);
    v9->__r_.__value_.__r.__words[2] = *(void *)(a4 + 32);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  long long v11 = *(_OWORD *)(a4 + 40);
  long long v12 = *(_OWORD *)(a4 + 56);
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  _ZNSt3__115allocate_sharedB8ne180100I19WaveRNNModelIONamesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v28);
  long long v13 = v28;
  long long v28 = 0uLL;
  std::string::size_type v14 = *(std::__shared_weak_count **)(a1 + 136);
  *(_OWORD *)(a1 + 128) = v13;
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    if (*((void *)&v28 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
    }
  }
  unint64_t v16 = *(int *)(a1 + 144);
  unint64_t v15 = *(int *)(a1 + 148);
  unint64_t v17 = ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4) / v16 / v15;
  if ((int)v17 < 1) {
    __assert_rtn("WaveRNNDataFeederV2", "DataFeederV2.cpp", 175, "num_metadata_entry >= 1");
  }
  if ((int)v15 * (int)v16 >= 1)
  {
    uint64_t v18 = 0;
    unint64_t v19 = (int)v17;
    do
    {
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      uint64_t v20 = (v16 - 1);
      unint64_t v21 = v18 * v19;
      if (v18 == v20)
      {
        uint64_t v22 = *(void *)(a1 + 56);
        uint64_t v23 = *(void *)(a1 + 48) + 16 * v21;
        uint64_t v27 = 0;
        long long v26 = 0uLL;
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(&v26, v23, v22, (v22 - v23) >> 4);
      }
      else
      {
        uint64_t v24 = *(void *)(a1 + 48) + 16 * v21;
        uint64_t v27 = 0;
        long long v26 = 0uLL;
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(&v26, v24, v24 + 16 * v19, v19);
      }
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vdeallocate((void **)&v28);
      long long v28 = v26;
      uint64_t v29 = v27;
      unint64_t v30 = (void **)&v26;
      uint64_t v27 = 0;
      long long v26 = 0uLL;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v30);
      std::allocate_shared[abi:ne180100]<WaveRNNDataFeederV2::OneBatchReader,std::allocator<WaveRNNDataFeederV2::OneBatchReader>,boost::filesystem::path &,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> &,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &,WaveRNNDataFeederV2::Config &,void>(a1 + 72, (uint64_t *)&v28, a1 + 120, v8, &v26);
      std::vector<std::shared_ptr<WaveRNNDataFeederV2::OneBatchReader>>::push_back[abi:ne180100]((uint64_t *)(a1 + 240), &v26);
      if (*((void *)&v26 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
      }
      *(void *)&long long v26 = &v28;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
      ++v18;
      LODWORD(v16) = *(_DWORD *)(a1 + 144);
      unint64_t v15 = *(int *)(a1 + 148);
    }
    while (v18 < (int)v15 * (uint64_t)(int)v16);
  }
  std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 216), v15);
  return a1;
}

void sub_1F4DA8(_Unwind_Exception *a1)
{
  DataFeederV2::~DataFeederV2(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<WaveRNNDataFeederV2::OneBatchReader>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    std::string::size_type v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::TransitionModel::Tuple>>((uint64_t)result, v13);
    unint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<WaveRNNDataFeederV2::OneBatchReader>>::__swap_out_circular_buffer(a1, v18);
    float v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::~__split_buffer(v18);
  }
  else
  {
    *char v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    float v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1F4F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void DataFeederV2::~DataFeederV2(DataFeederV2 *this)
{
  *(void *)this = &off_270688;
  int v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  unint64_t v3 = (void **)((char *)this + 48);
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

void WaveRNNDataFeederV2::reset(WaveRNNDataFeederV2 *this)
{
  int v2 = (uint64_t *)*((void *)this + 30);
  for (uint64_t i = (uint64_t *)*((void *)this + 31); v2 != i; v2 += 2)
  {
    uint64_t v4 = *v2;
    unint64_t v5 = (std::__shared_weak_count *)v2[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)(v4 + 72) = 0;
    *(_DWORD *)(v4 + 80) = 0;
    WaveRNNDataFeederV2::OneBatchReader::read_data(v4, *(char **)(v4 + 88));
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  unint64_t v6 = *((int *)this + 49) * (uint64_t)*((int *)this + 36);
  int v9 = 0;
  std::vector<float>::vector(&__p, v6, &v9);
  uint64_t v8 = (char *)*((void *)this + 27);
  char v7 = (char *)*((void *)this + 28);
  while (v8 != v7)
  {
    if (v8 != (char *)&__p) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v8, (char *)__p, (uint64_t)v11, (v11 - (unsigned char *)__p) >> 2);
    }
    v8 += 24;
  }
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_1F50BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void WaveRNNDataFeederV2::getData(WaveRNNDataFeederV2 *this@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  InferenceEngine::DataUtils::reshape_1d_to_2d<float>((uint64_t *)(*((void *)this + 27) + 24 * a3), *((_DWORD *)this + 49), v24);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  LODWORD(v8) = *((_DWORD *)this + 36);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      WaveRNNDataFeederV2::OneBatchReader::fetch_data(*(WaveRNNDataFeederV2::OneBatchReader **)(*((void *)this + 30) + 16 * (v10 + (int)v8 * a3)), (uint64_t)&v13);
      if ((void **)(v24[0] + v9) != &v13) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v13, *(char **)(v24[0] + v9), *(void *)(v24[0] + v9 + 8), (uint64_t)(*(void *)(v24[0] + v9 + 8) - *(void *)(v24[0] + v9)) >> 2);
      }
      if (v20 && v14 - (unsigned char *)v13 >= 1) {
        bzero(v13, 4 * (((unint64_t)(v14 - (unsigned char *)v13) >> 2) - ((unint64_t)(v14 - (unsigned char *)v13) > 3)) + 4);
      }
      unint64_t v11 = v22;
      if ((unint64_t)v22 >= v23)
      {
        uint64_t v12 = (WaveRNNTrainData *)std::vector<WaveRNNTrainDataV2>::__push_back_slow_path<WaveRNNTrainDataV2 const&>(&v21, (const WaveRNNTrainData *)&v13);
      }
      else
      {
        WaveRNNTrainData::WaveRNNTrainData(v22, (const WaveRNNTrainData *)&v13);
        uint64_t v12 = (WaveRNNTrainData *)((char *)v11 + 104);
      }
      uint64_t v22 = v12;
      if (__p)
      {
        unint64_t v19 = __p;
        operator delete(__p);
      }
      if (v16)
      {
        long long v17 = v16;
        operator delete(v16);
      }
      std::string::size_type v25 = (void **)&v15;
      std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v25);
      if (v13)
      {
        std::string::size_type v14 = v13;
        operator delete(v13);
      }
      ++v10;
      uint64_t v8 = *((int *)this + 36);
      v9 += 24;
    }
    while (v10 < v8);
  }
  WaveRNNDataFeederV2::convert_to_tensor_data((uint64_t)this, a2, &v21, a4);
  unint64_t v13 = &v21;
  std::vector<WaveRNNTrainData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  unint64_t v13 = v24;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
}

void sub_1F52A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  a9 = (void **)&a22;
  std::vector<WaveRNNTrainData>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)(v22 - 112);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void WaveRNNDataFeederV2::convert_to_tensor_data(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(const void **)(a1 + 128);
  if (v8
  {
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 136);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  BatchWaveRNNTrainDataV2::BatchWaveRNNTrainDataV2((uint64_t)v35, a3);
  uint64_t v10 = (const char *)(a1 + 160);
  if (*(char *)(a1 + 183) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a1 + 160), *(void *)(a1 + 168));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v10;
    __str.__r_.__value_.__r.__words[2] = *(void *)(a1 + 176);
  }
  if (*(unsigned char *)(a1 + 152))
  {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    std::string::resize(&__str, size + 100, 0);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (*(char *)(a1 + 183) < 0) {
      uint64_t v10 = *(const char **)v10;
    }
    int v13 = sprintf((char *)p_str, v10, a2);
    std::string::basic_string(&v33, &__str, 0, v13, (std::allocator<char> *)&__p);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = v33;
  }
  InferenceEngine::DataTensor::build_from_2d_array<float>(&v36, &v32);
  if (*(unsigned char *)(a1 + 152))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v14 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v14 = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v15 = &v33;
    std::string::basic_string[abi:ne180100]((uint64_t)&v33, v14 + 6);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v15 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if (v14)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v16 = &__str;
      }
      else {
        uint64_t v16 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(v15, v16, v14);
    }
    strcpy((char *)v15 + v14, "/state");
    std::string __p = 0;
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    TrainingUtils::read_vector_from_file<float>((uint64_t)&v33, &__p);
    InferenceEngine::DataTensor::override_data<float>(v32, (const void **)&__p);
    if (__p)
    {
      unint64_t v30 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
  }
  std::vector<std::shared_ptr<InferenceEngine::DataTensor>>::push_back[abi:ne180100](a4, &v32);
  InferenceEngine::DataTensor::build_from_3d_array<float>(v37, &v28);
  if (*(unsigned char *)(a1 + 152))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v17 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v17 = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v18 = &v33;
    std::string::basic_string[abi:ne180100]((uint64_t)&v33, v17 + 6);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v18 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if (v17)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v19 = &__str;
      }
      else {
        unint64_t v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(v18, v19, v17);
    }
    strcpy((char *)v18 + v17, "/input");
    std::string __p = 0;
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    TrainingUtils::read_vector_from_file<float>((uint64_t)&v33, &__p);
    InferenceEngine::DataTensor::override_data<float>(v28, (const void **)&__p);
    if (__p)
    {
      unint64_t v30 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
  }
  std::vector<std::shared_ptr<InferenceEngine::DataTensor>>::push_back[abi:ne180100](a4, &v28);
  InferenceEngine::DataTensor::build_from_2d_array<int>(&v38, &v27);
  if (*(unsigned char *)(a1 + 152))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v21 = &v33;
    std::string::basic_string[abi:ne180100]((uint64_t)&v33, v20 + 19);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v21 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if (v20)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v22 = &__str;
      }
      else {
        uint64_t v22 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(v21, v22, v20);
    }
    strcpy((char *)v21 + v20, "/coarse_groundtruth");
    std::string __p = 0;
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    TrainingUtils::read_vector_from_file<float>((uint64_t)&v33, &__p);
    InferenceEngine::DataTensor::override_data<int>(v27, (const void **)&__p);
    if (__p)
    {
      unint64_t v30 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
  }
  std::vector<std::shared_ptr<InferenceEngine::DataTensor>>::push_back[abi:ne180100](a4, &v27);
  InferenceEngine::DataTensor::build_from_2d_array<int>(&v39, &v26);
  if (*(unsigned char *)(a1 + 152))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v24 = &v33;
    std::string::basic_string[abi:ne180100]((uint64_t)&v33, v23 + 17);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v24 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if (v23)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v25 = &__str;
      }
      else {
        std::string::size_type v25 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(v24, v25, v23);
    }
    strcpy((char *)v24 + v23, "/fine_groundtruth");
    std::string __p = 0;
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    TrainingUtils::read_vector_from_file<float>((uint64_t)&v33, &__p);
    InferenceEngine::DataTensor::override_data<int>(v26, (const void **)&__p);
    if (__p)
    {
      unint64_t v30 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
  }
  std::vector<std::shared_ptr<InferenceEngine::DataTensor>>::push_back[abi:ne180100](a4, &v26);
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  if (*((void *)&v27 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
  }
  if (*((void *)&v28 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
  }
  if (*((void *)&v32 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  BatchWaveRNNTrainData::~BatchWaveRNNTrainData((BatchWaveRNNTrainData *)v35);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1F5858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34)
{
  BatchWaveRNNTrainData::~BatchWaveRNNTrainData((BatchWaveRNNTrainData *)&a34);
  std::vector<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(a1);
}

void sub_1F5968(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1F5918);
}

void sub_1F5990(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  JUMPOUT(0x1F5924);
}

void WaveRNNDataFeederV2::save_output(void *a1, int a2, InferenceEngine::DataTensor ***a3)
{
  unint64_t v6 = (const void *)a1[16];
  if (v6)
  {
    if (v7)
    {
      uint64_t v8 = (std::__shared_weak_count *)a1[17];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    char v7 = 0;
  }
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  if (*a3 == v10)
  {
LABEL_31:
    uint64_t v21 = 0;
    std::string::size_type v22 = 0;
    goto LABEL_33;
  }
  while (1)
  {
    InferenceEngine::DataTensor::get_name(*v9, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = *((unsigned __int8 *)v7 + 151);
    int v13 = (char)v12;
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = v7[17];
    }
    if (size != v12)
    {
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_30;
    }
    std::string::size_type v14 = v13 >= 0 ? (char *)(v7 + 16) : (char *)v7[16];
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
      break;
    }
    unint64_t v19 = (void *)__p.__r_.__value_.__r.__words[0];
    int v20 = memcmp(__p.__r_.__value_.__l.__data_, v14, __p.__r_.__value_.__l.__size_);
    operator delete(v19);
    if (!v20) {
      goto LABEL_32;
    }
LABEL_30:
    v9 += 2;
    if (v9 == v10) {
      goto LABEL_31;
    }
  }
  if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
    uint64_t v15 = 0;
    do
    {
      int v16 = __p.__r_.__value_.__s.__data_[v15];
      int v17 = v14[v15];
    }
    while (v16 == v17 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v15++);
    if (v16 != v17) {
      goto LABEL_30;
    }
  }
LABEL_32:
  InferenceEngine::DataTensor::get_1d_array<float>((uint64_t)*v9, (void **)&__p.__r_.__value_.__l.__data_);
  std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
  uint64_t v21 = (char *)__p.__r_.__value_.__r.__words[0];
LABEL_33:
  uint64_t v23 = a1[27] + 24 * a2;
  unint64_t v24 = (uint64_t)(*(void *)(v23 + 8) - *(void *)v23) >> 2;
  if (v24 != (uint64_t)(v22 - (void)v21) >> 2) {
    __assert_rtn("save_output", "DataFeederV2.cpp", 230, "batch_next_state_[grad_accu_step_idx].size() == next_state.size()");
  }
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v23, v21, v22, v24);
  if (v21) {
    operator delete(v21);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1F5BCC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *InferenceEngine::DataTensor::override_data<float>(uint64_t a1, const void **a2)
{
  uint64_t v4 = (void *)(a1 + 32);
  int v5 = *(char *)(a1 + 55);
  if (v5 < 0)
  {
    if (*(void *)(a1 + 40) != 4) {
      goto LABEL_14;
    }
    uint64_t v4 = (void *)*v4;
  }
  else if (v5 != 4)
  {
LABEL_14:
    InferenceEngine::DataTensor::override_data<float>();
  }
  if (*(_DWORD *)v4 != 842231910) {
    goto LABEL_14;
  }
    InferenceEngine::DataTensor::override_data<float>();
  uint64_t v6 = (unsigned char *)a2[1] - (unsigned char *)*a2;
  if (InferenceEngine::DataTensor::get_size((InferenceEngine::DataTensor *)a1) != v6 >> 2) {
    InferenceEngine::DataTensor::override_data<float>();
  }
  char v7 = *a2;
  size_t v9 = *(void *)(a1 + 80);
  uint64_t v8 = *(void **)(a1 + 88);

  return memcpy(v8, v7, v9);
}

void InferenceEngine::DataTensor::build_from_3d_array<float>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  int v5 = (void **)*a1;
  uint64_t v4 = a1[1];
  char v7 = *(uint64_t **)*a1;
  uint64_t v6 = *(void *)(*a1 + 8);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  uint64_t v10 = operator new(0x18uLL);
  std::string::size_type v14 = v10 + 3;
  uint64_t v15 = v10 + 3;
  *uint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3);
  v10[1] = 0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v7) >> 3);
  v10[2] = (v8 - v9) >> 2;
  int v13 = v10;
  InferenceEngine::DataUtils::get_type_string<float>(__p);
  std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long> &,void>(a2);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  TrainingUtils::flatten_3d_to_1d<float>(a1, __p);
  memcpy(*(void **)(*a2 + 88), __p[0], *(void *)(*a2 + 80));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v13)
  {
    std::string::size_type v14 = v13;
    operator delete(v13);
  }
}

void sub_1F5DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  unint64_t v19 = *(std::__shared_weak_count **)(v17 + 8);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::DataTensor::build_from_2d_array<int>(uint64_t **a1@<X1>, void *a2@<X8>)
{
  int v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v7 = **a1;
  uint64_t v6 = (*a1)[1];
  uint64_t v8 = operator new(0x10uLL);
  unint64_t v11 = v8 + 2;
  char v12 = v8 + 2;
  void *v8 = 0xAAAAAAAAAAAAAAABLL * (v4 - v5);
  v8[1] = (v6 - v7) >> 2;
  uint64_t v10 = v8;
  InferenceEngine::DataUtils::get_type_string<int>(&__p);
  std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long> &,void>(a2);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  InferenceEngine::DataUtils::flatten_2d_to_1d<int>(a1, &__p);
  memcpy(*(void **)(*a2 + 88), __p.__begin_, *(void *)(*a2 + 80));
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v10)
  {
    unint64_t v11 = v10;
    operator delete(v10);
  }
}

void sub_1F5EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  unint64_t v19 = *(std::__shared_weak_count **)(v17 + 8);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *InferenceEngine::DataTensor::override_data<int>(uint64_t a1, const void **a2)
{
  uint64_t v4 = (void *)(a1 + 32);
  int v5 = *(char *)(a1 + 55);
  if (v5 < 0)
  {
    if (*(void *)(a1 + 40) != 4) {
      goto LABEL_14;
    }
    uint64_t v4 = (void *)*v4;
  }
  else if (v5 != 4)
  {
LABEL_14:
    InferenceEngine::DataTensor::override_data<float>();
  }
  if (*(_DWORD *)v4 != 842231910) {
    goto LABEL_14;
  }
    InferenceEngine::DataTensor::override_data<float>();
  uint64_t v6 = (unsigned char *)a2[1] - (unsigned char *)*a2;
  if (InferenceEngine::DataTensor::get_size((InferenceEngine::DataTensor *)a1) != v6 >> 2) {
    InferenceEngine::DataTensor::override_data<float>();
  }
  uint64_t v7 = *a2;
  size_t v9 = *(void *)(a1 + 80);
  uint64_t v8 = *(void **)(a1 + 88);

  return memcpy(v8, v7, v9);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v11 = this;
  char v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      char v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1F60A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *_ZNSt3__115allocate_sharedB8ne180100I19WaveRNNModelIONamesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  int v2 = operator new(0xB0uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceI19WaveRNNModelIONamesNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1F60F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceI19WaveRNNModelIONamesNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_270748;
  WaveRNNModelIONames::WaveRNNModelIONames((WaveRNNModelIONames *)(a1 + 3));
  return a1;
}

void sub_1F6150(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<WaveRNNModelIONames>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_270748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WaveRNNModelIONames>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_270748;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<WaveRNNModelIONames>::__on_zero_shared(uint64_t a1)
{
  std::allocator<WaveRNNModelIONames>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<WaveRNNModelIONames>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_270668;
  if (*(char *)(a2 + 151) < 0) {
    operator delete(*(void **)(a2 + 128));
  }
  if (*(char *)(a2 + 127) < 0) {
    operator delete(*(void **)(a2 + 104));
  }
  if (*(char *)(a2 + 103) < 0) {
    operator delete(*(void **)(a2 + 80));
  }
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 31) < 0)
  {
    unint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

void *std::allocate_shared[abi:ne180100]<WaveRNNDataFeederV2::OneBatchReader,std::allocator<WaveRNNDataFeederV2::OneBatchReader>,boost::filesystem::path &,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> &,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &,WaveRNNDataFeederV2::Config &,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X4>, void *a5@<X8>)
{
  char v10 = operator new(0xE0uLL);
  uint64_t result = std::__shared_ptr_emplace<WaveRNNDataFeederV2::OneBatchReader>::__shared_ptr_emplace[abi:ne180100]<boost::filesystem::path &,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> &,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &,WaveRNNDataFeederV2::Config &,std::allocator<WaveRNNDataFeederV2::OneBatchReader>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1F6320(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<WaveRNNDataFeederV2::OneBatchReader>::__shared_ptr_emplace[abi:ne180100]<boost::filesystem::path &,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> &,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &,WaveRNNDataFeederV2::Config &,std::allocator<WaveRNNDataFeederV2::OneBatchReader>,0>(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_270798;
  WaveRNNDataFeederV2::OneBatchReader::OneBatchReader((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1F637C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<WaveRNNDataFeederV2::OneBatchReader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_270798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WaveRNNDataFeederV2::OneBatchReader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_270798;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<WaveRNNDataFeederV2::OneBatchReader>::__on_zero_shared(uint64_t a1)
{
  std::allocator<WaveRNNDataFeeder::OneBatchReader>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

uint64_t std::vector<std::shared_ptr<WaveRNNDataFeederV2::OneBatchReader>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<WaveRNNDataFeederV2::OneBatchReader>>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeederV2::OneBatchReader>*>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeederV2::OneBatchReader>*>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeederV2::OneBatchReader>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<WaveRNNDataFeederV2::OneBatchReader>>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeederV2::OneBatchReader>*>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeederV2::OneBatchReader>*>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeederV2::OneBatchReader>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<WaveRNNDataFeederV2::OneBatchReader>>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeederV2::OneBatchReader>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<WaveRNNDataFeederV2::OneBatchReader>>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeederV2::OneBatchReader>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>>,std::reverse_iterator<std::shared_ptr<WaveRNNDataFeeder::OneBatchReader>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<WaveRNNTrainDataV2>::__push_back_slow_path<WaveRNNTrainDataV2 const&>(uint64_t *a1, const WaveRNNTrainData *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x13B13B13B13B13BLL) {
    unint64_t v9 = 0x276276276276276;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<WaveRNNTrainData>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v13 = v10;
  long long v14 = (WaveRNNTrainData *)&v10[104 * v4];
  int v16 = &v10[104 * v9];
  WaveRNNTrainData::WaveRNNTrainData(v14, a2);
  long long v15 = (char *)v14 + 104;
  std::vector<WaveRNNTrainDataV2>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<WaveRNNTrainData>::~__split_buffer(&v13);
  return v11;
}

void sub_1F6680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<WaveRNNTrainData>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<WaveRNNTrainDataV2>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<WaveRNNTrainDataV2>,std::reverse_iterator<WaveRNNTrainDataV2*>,std::reverse_iterator<WaveRNNTrainDataV2*>,std::reverse_iterator<WaveRNNTrainDataV2*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<WaveRNNTrainDataV2>,std::reverse_iterator<WaveRNNTrainDataV2*>,std::reverse_iterator<WaveRNNTrainDataV2*>,std::reverse_iterator<WaveRNNTrainDataV2*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 104;
      std::allocator<WaveRNNTrainData>::construct[abi:ne180100]<WaveRNNTrainData,WaveRNNTrainData>(a1, v7 - 104, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 104;
      *((void *)&v16 + 1) -= 104;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<WaveRNNTrainDataV2>,std::reverse_iterator<WaveRNNTrainDataV2*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<WaveRNNTrainDataV2>,std::reverse_iterator<WaveRNNTrainDataV2*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<WaveRNNTrainData>,std::reverse_iterator<WaveRNNTrainData*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void *InferenceEngine::DataUtils::flatten_2d_to_1d<int>@<X0>(void *a1@<X0>, std::vector<int> *a2@<X8>)
{
  int64_t v4 = *(void *)(*a1 + 8) - *(void *)*a1;
  std::vector<int>::size_type v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) * (v4 >> 2);
  std::vector<int>::value_type __x = 0;
  uint64_t result = std::vector<int>::vector(a2, v5, &__x);
  uint64_t v7 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      uint64_t result = memcpy(&a2->__begin_[v8], *(const void **)(v7 + v9), v4);
      ++v10;
      uint64_t v7 = *a1;
      v9 += 24;
      v8 += v4 >> 2;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) > v10);
  }
  return result;
}

void WaveRNNDataFeederV2::OneBatchReader::read_data(uint64_t *a1, NSObject *a2)
{
  if (*((char *)a1 + 23) >= 0) {
    int v2 = a1;
  }
  else {
    int v2 = (uint64_t *)*a1;
  }
  int v3 = 136315138;
  int64_t v4 = v2;
  _os_log_debug_impl(&def_5A5E8, a2, OS_LOG_TYPE_DEBUG, "Processing %s", (uint8_t *)&v3, 0xCu);
}

void InferenceEngine::DataTensor::override_data<float>()
{
  __assert_rtn("override_data", "DataTensor.hpp", 260, "data_1d_array.size() == get_size()");
}

{
  __assert_rtn("override_data", "DataTensor.hpp", 256, "typeid(T) == typeid(float)");
}

{
  __assert_rtn("override_data", "DataTensor.hpp", 258, "0");
}

void EffectAudioUnit::create(EffectAudioUnit *this, double a2)
{
}

void sub_1F6A48()
{
}

uint64_t render_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 112);
  if (v7)
  {
    uint64_t v8 = a1 + 88;
    unsigned int v9 = *(_DWORD *)(a6 + 12) >> 2;
    if (v9 >= a5) {
      uint64_t v10 = a5;
    }
    else {
      uint64_t v10 = v9;
    }
    LODWORD(v7) = 4 * std::function<unsigned long ()(unsigned long,float *)>::operator()(v8, v10, *(void *)(a6 + 16));
  }
  *(_DWORD *)(a6 + 12) = v7;
  return 0;
}

void EffectAudioUnitImpl::EffectAudioUnitImpl(EffectAudioUnitImpl *this, double a2, OSType a3, OSType a4, OSType a5)
{
  *(void *)this = &off_2707E8;
  *((void *)this + 14) = 0;
  inDesc.componentType = a3;
  inDesc.componentSubType = a4;
  *(void *)&inDesc.componentFlags = 0;
  inDesc.componentManufacturer = a5;
  if (registerInternalComponents(void)::once != -1) {
    dispatch_once(&registerInternalComponents(void)::once, &__block_literal_global_0);
  }
  Next = AudioComponentFindNext(0, &inDesc);
  if (!Next)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to find AudioComponent!");
    goto LABEL_15;
  }
  uint64_t v8 = (AudioUnit *)((char *)this + 8);
  if (AudioComponentInstanceNew(Next, (AudioComponentInstance *)this + 1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to instantiate AudioUnit!");
LABEL_15:
  }
  UInt32 ioDataSize = 40;
  if (AudioUnitGetProperty(*v8, 8u, 1u, 0, outData, &ioDataSize))
  {
    uint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Failed to get stream format!");
    goto LABEL_19;
  }
  int v20 = 1;
  *(double *)outData = a2;
  if (AudioUnitSetProperty(*v8, 8u, 1u, 0, outData, 0x28u))
  {
    uint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Failed to set input stream format!");
    goto LABEL_19;
  }
  if (AudioUnitSetProperty(*v8, 8u, 2u, 0, outData, 0x28u))
  {
    uint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Failed to set output stream format!");
LABEL_19:
  }
  int inData = 0x2000;
  if (AudioUnitSetProperty(*v8, 0xEu, 0, 0, &inData, 4u))
  {
    uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Failed to set kAudioUnitProperty_MaximumFramesPerSlice");
    goto LABEL_22;
  }
  if (AudioUnitInitialize(*v8))
  {
    uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Failed to initialize AudioUnit!");
LABEL_22:
  }
  v16[0] = render_callback;
  v16[1] = this;
  if (AudioUnitSetProperty(*((AudioUnit *)this + 1), 0x17u, 1u, 0, v16, 0x10u))
  {
    char v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Failed to set render callback");
  }
  double v15 = 0.0;
  UInt32 v14 = 8;
  if (AudioUnitGetProperty(*v8, 0xCu, 0, 0, &v15, &v14))
  {
    char v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Failed to get kAudioUnitProperty_Latency");
  }
  *((_DWORD *)this + 4) = (v15 * a2);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = 1;
}

void sub_1F6E3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  std::__function::__value_func<unsigned long ()(unsigned long,float *)>::~__value_func[abi:ne180100]((void *)(v1 + 88));
  _Unwind_Resume(a1);
}

void EffectAudioUnitImpl::~EffectAudioUnitImpl(AudioComponentInstance *this)
{
  *this = (AudioComponentInstance)&off_2707E8;
  AudioComponentInstanceDispose(this[1]);
  std::__function::__value_func<unsigned long ()(unsigned long,float *)>::~__value_func[abi:ne180100](this + 11);
}

{
  uint64_t vars8;

  EffectAudioUnitImpl::~EffectAudioUnitImpl(this);

  operator delete();
}

void *EffectAudioUnitImpl::render(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = (void *)(a1 + 88);
  std::function<unsigned long ()(unsigned long,float *)>::operator=((void *)(a1 + 88), a4);
  *(&ioData.mNumberBuffers + 1) = 0;
  ioData.mNumberBuffers = 1;
  ioData.mBuffers[0].mNumberChannels = 1;
  ioData.mBuffers[0].mDataByteSize = 4 * a2;
  ioData.mBuffers[0].mData = a3;
  double v8 = *(double *)(a1 + 24);
  for (LODWORD(v9) = *(_DWORD *)(a1 + 16); ; LODWORD(v9) = *(_DWORD *)(a1 + 16))
  {
    double v10 = (double)*(unint64_t *)&v9;
    if (v8 >= v10) {
      break;
    }
    if ((v10 - v8) >= a2) {
      UInt32 v11 = a2;
    }
    else {
      UInt32 v11 = (v10 - v8);
    }
    if (AudioUnitRender(*(AudioUnit *)(a1 + 8), 0, (const AudioTimeStamp *)(a1 + 24), 0, v11, &ioData)) {
      goto LABEL_10;
    }
    ioData.mBuffers[0].mDataByteSize = 4 * a2;
    double v9 = *(double *)(a1 + 24);
    double v8 = v9 + (double)v11;
    *(double *)(a1 + 24) = v8;
  }
  if (AudioUnitRender(*(AudioUnit *)(a1 + 8), 0, (const AudioTimeStamp *)(a1 + 24), 0, a2, &ioData))
  {
LABEL_10:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to render");
  }
  *(double *)(a1 + 24) = *(double *)(a1 + 24) + (double)a2;
  return std::__function::__value_func<unsigned long ()(unsigned long,float *)>::operator=[abi:ne180100](v7);
}

void sub_1F707C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::function<unsigned long ()(unsigned long,float *)>::operator=(void *a1, uint64_t a2)
{
  std::__function::__value_func<unsigned long ()(unsigned long,float *)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<unsigned long ()(unsigned long,float *)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<unsigned long ()(unsigned long,float *)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::function<unsigned long ()(unsigned long,float *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

void ___ZL26registerInternalComponentsv_block_invoke(id a1)
{
  uint64_t v1 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (v1)
  {
    int v2 = (void (*)(void))dlsym(v1, "RegisterAudioUnits_Internal");
    if (v2)
    {
      v2();
      return;
    }
    uint64_t v3 = __stderrp;
    int64_t v4 = "Unable to link RegisterAudioUnits_Internal from AudioDSP";
    size_t v5 = 56;
  }
  else
  {
    uint64_t v3 = __stderrp;
    int64_t v4 = "Can't open AudioDSP for component registration!";
    size_t v5 = 47;
  }

  fwrite(v4, v5, 1uLL, v3);
}

uint64_t std::__function::__value_func<unsigned long ()(unsigned long,float *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<unsigned long ()(unsigned long,float *)>::swap[abi:ne180100](void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    int64_t v4 = (void *)result[3];
    size_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1F74F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<unsigned long ()(unsigned long,float *)>::operator=[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t Checkpointable::Checkpointable(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v4 = a1 + 32;
  *(void *)(a1 + 40) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 32);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v10 = *(std::string *)a2;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "checkpointable.json");
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v11, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else {
    std::string v11 = v10;
  }
  boost::filesystem::path::append_v3(&v11, &__p);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v11;
  *((unsigned char *)&v11.__r_.__value_.__s + 23) = 0;
  v11.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  Checkpointable::has_checkpoint_sync((Checkpointable *)a1);
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = (void *)a1;
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v6 = *(void **)a1;
    }
    int v7 = *(unsigned __int8 *)(a1 + 24);
    LODWORD(v11.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v11.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
    WORD2(v11.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v11.__r_.__value_.__r.__words[1] + 6) = v7;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Checkpoint path: %s, has_checkpoint: %d", (uint8_t *)&v11, 0x12u);
  }
  Checkpointable::load_checkpoint((Checkpointable *)a1);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1F7738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v29);
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(a1);
}

BOOL Checkpointable::has_checkpoint_sync(Checkpointable *this)
{
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)this);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  if (v5) {
    BOOL v2 = v5 == 255;
  }
  else {
    BOOL v2 = 1;
  }
  BOOL result = !v2;
  *((unsigned char *)this + 24) = result;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    return *((unsigned char *)this + 24) != 0;
  }
  return result;
}

void sub_1F7828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Checkpointable::load_checkpoint(Checkpointable *this)
{
  if (*((unsigned char *)this + 24))
  {
    TrainingUtils::read_json_from_file((const char *)this, (uint64_t)v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
    char v3 = *((unsigned char *)this + 32);
    BOOL v2 = (char *)this + 32;
    char *v2 = v14[0];
    v14[0] = v3;
    uint64_t v4 = (uint64_t *)*((void *)v2 + 1);
    *((void *)v2 + 1) = v15;
    double v15 = v4;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14[0]);
    LogObject = Diagnostics_GetLogObject();
    if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
    {
      std::string::basic_string[abi:ne180100]<0>(v11, "stage_key");
      uint64_t v6 = &v13;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("", v2, (const void **)v11, &v13);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v6 = (std::string *)v13.__r_.__value_.__r.__words[0];
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "step_key");
      unsigned int v8 = 0;
      int v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v2, (const void **)__p, &v8);
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v17 = v6;
      __int16 v18 = 1024;
      int v19 = v7;
      _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Checkpoint: %s : %d", buf, 0x12u);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v12 < 0) {
        operator delete(v11[0]);
      }
    }
  }
}

void sub_1F79E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void Checkpointable::write_checkpoint(uint64_t *a1, uint64_t a2, int a3)
{
  v18[0] = 0;
  int v19 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string const&,std::string,0>((uint64_t)v16, a2);
  uint64_t v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "stage_key");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
  unsigned __int8 v7 = *(unsigned char *)v6;
  *(unsigned char *)uint64_t v6 = v16[0];
  v16[0] = v7;
  unsigned int v8 = (uint64_t *)v6[1];
  v6[1] = (uint64_t)v17;
  uint64_t v17 = v8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
  v14[0] = 5;
  double v15 = (uint64_t *)a3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  double v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "step_key");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  unsigned __int8 v10 = *(unsigned char *)v9;
  *(unsigned char *)double v9 = v14[0];
  v14[0] = v10;
  std::string v11 = (uint64_t *)v9[1];
  v9[1] = (uint64_t)v15;
  double v15 = v11;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14[0]);
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = *(void *)a2;
    }
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v21 = v13;
    __int16 v22 = 1024;
    int v23 = a3;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Write Checkpoint: %s : %d", buf, 0x12u);
  }
  TrainingUtils::write_json_to_file(a1, (uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v19, v18[0]);
}

void sub_1F7C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t Checkpointable::should_skip_stage(char *a1, unsigned __int8 *a2)
{
  if (!a1[24]) {
    return 0;
  }
  char v3 = a1 + 32;
  if (!a1[32]) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v26, "stage_key");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("", v3, (const void **)v26, &__p);
  uint64_t v5 = a2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v8 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v6 != size)
  {
    BOOL v18 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v5 & 0x80) != 0)
  {
    BOOL v18 = memcmp(*(const void **)a2, p_p, *((void *)a2 + 1)) == 0;
    goto LABEL_24;
  }
  if (a2[23])
  {
    uint64_t v10 = v5 - 1;
    std::string v11 = a2;
    do
    {
      int v13 = *v11++;
      int v12 = v13;
      int v15 = p_p->__r_.__value_.__s.__data_[0];
      p_p = (std::string *)((char *)p_p + 1);
      int v14 = v15;
      BOOL v17 = v10-- != 0;
      BOOL v18 = v12 == v14;
    }
    while (v12 == v14 && v17);
LABEL_24:
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_25;
    }
LABEL_22:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_25;
  }
  BOOL v18 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_22;
  }
LABEL_25:
  if (v27 < 0)
  {
    operator delete(v26[0]);
    if (v18) {
      goto LABEL_27;
    }
  }
  else if (v18)
  {
LABEL_27:
    std::string::basic_string[abi:ne180100]<0>(&__p, "step_key");
    LODWORD(v26[0]) = 0;
    int v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v3, (const void **)&__p.__r_.__value_.__l.__data_, (unsigned int *)v26);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v19 == -1) {
      Checkpointable::remove_checkpoint((Checkpointable *)a1);
    }
    LogObject = Diagnostics_GetLogObject();
    if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
    {
      if ((a2[23] & 0x80u) == 0) {
        std::string::size_type v21 = (std::string::size_type)a2;
      }
      else {
        std::string::size_type v21 = *(void *)a2;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v21;
      _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Checkpoint hit: %s", (uint8_t *)&__p, 0xCu);
    }
    return 0;
  }
  unint64_t v24 = Diagnostics_GetLogObject();
  uint64_t v22 = 1;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    if ((a2[23] & 0x80u) == 0) {
      std::string::size_type v25 = (std::string::size_type)a2;
    }
    else {
      std::string::size_type v25 = *(void *)a2;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v25;
    _os_log_impl(&def_5A5E8, v24, OS_LOG_TYPE_INFO, "Checkpoint skip: %s", (uint8_t *)&__p, 0xCu);
  }
  return v22;
}

void sub_1F7ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Checkpointable::remove_checkpoint(Checkpointable *this)
{
  if (*((unsigned char *)this + 24))
  {
    LogObject = Diagnostics_GetLogObject();
    if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
    {
      char v3 = this;
      if (*((char *)this + 23) < 0) {
        char v3 = *(Checkpointable **)this;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
      _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Removing checkpoint: %s", (uint8_t *)&__p, 0xCu);
    }
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)this);
    std::__fs::filesystem::__remove_all((const std::__fs::filesystem::path *)&__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v4 = Diagnostics_GetLogObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&def_5A5E8, v4, OS_LOG_TYPE_INFO, "Checkpoint removed", (uint8_t *)&__p, 2u);
    }
  }
  *((unsigned char *)this + 24) = 0;
}

void sub_1F802C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Checkpointable::get_checkpoint_stage_step(char *a1, unsigned __int8 *a2)
{
  if (!a1[24]) {
    return 0;
  }
  char v3 = a1 + 32;
  if (!a1[32]) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v25, "stage_key");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("", v3, (const void **)v25, &__p);
  uint64_t v5 = a2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v8 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v6 != size)
  {
    BOOL v18 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v5 & 0x80) != 0)
  {
    BOOL v18 = memcmp(*(const void **)a2, p_p, *((void *)a2 + 1)) == 0;
    goto LABEL_24;
  }
  if (a2[23])
  {
    uint64_t v10 = v5 - 1;
    std::string v11 = a2;
    do
    {
      int v13 = *v11++;
      int v12 = v13;
      int v15 = p_p->__r_.__value_.__s.__data_[0];
      p_p = (std::string *)((char *)p_p + 1);
      int v14 = v15;
      BOOL v17 = v10-- != 0;
      BOOL v18 = v12 == v14;
    }
    while (v12 == v14 && v17);
LABEL_24:
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_25;
    }
LABEL_22:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_25;
  }
  BOOL v18 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_22;
  }
LABEL_25:
  if (v26 < 0)
  {
    operator delete(v25[0]);
    if (v18) {
      goto LABEL_27;
    }
    goto LABEL_35;
  }
  if (!v18)
  {
LABEL_35:
    LogObject = Diagnostics_GetLogObject();
    if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
    {
      if ((a2[23] & 0x80u) == 0) {
        std::string::size_type v23 = (std::string::size_type)a2;
      }
      else {
        std::string::size_type v23 = *(void *)a2;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v23;
      _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Checkpoint not found: %s", (uint8_t *)&__p, 0xCu);
    }
    return 0;
  }
LABEL_27:
  std::string::basic_string[abi:ne180100]<0>(&__p, "step_key");
  LODWORD(v25[0]) = 0;
  uint64_t v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v3, (const void **)&__p.__r_.__value_.__l.__data_, (unsigned int *)v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  Checkpointable::remove_checkpoint((Checkpointable *)a1);
  int v20 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    if ((a2[23] & 0x80u) == 0) {
      std::string::size_type v21 = (std::string::size_type)a2;
    }
    else {
      std::string::size_type v21 = *(void *)a2;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v21;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v19;
    _os_log_impl(&def_5A5E8, v20, OS_LOG_TYPE_INFO, "Checkpoint hit: %s : %d", (uint8_t *)&__p, 0x12u);
  }
  return v19;
}

void sub_1F82BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::Mil2BnnsMilIO::Mil2BnnsMilIO(uint64_t a1, long long *a2, long long *a3, long long *a4, uint64_t *a5, int a6)
{
  int v8 = InferenceEngine::MilIO::MilIO((InferenceEngine::DataTensor *)a1, a2, a3, a4, a5);
  *(void *)int v8 = off_270858;
  *((void *)v8 + 16) = 0;
  *((void *)v8 + 17) = 0;
  if (a6)
  {
    double v9 = (char *)operator new(0xC8uLL);
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *(void *)double v9 = off_270950;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(void *)(a1 + 128) = v9 + 24;
    *(void *)(a1 + 136) = v9;
    free(*(void **)(a1 + 88));
  }
  return a1;
}

void sub_1F83AC(_Unwind_Exception *a1)
{
  InferenceEngine::MilIO::~MilIO(v1);
  _Unwind_Resume(a1);
}

void InferenceEngine::MilIO::~MilIO(void **this)
{
  *this = off_270920;
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }

  InferenceEngine::DataTensor::~DataTensor(this);
}

{
  uint64_t vars8;

  *this = off_270920;
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  InferenceEngine::DataTensor::~DataTensor(this);

  operator delete();
}

int *InferenceEngine::Mil2BnnsMilIO::set_framework_specific_buffer(InferenceEngine::Mil2BnnsMilIO *this)
{
  BOOL v2 = (_DWORD *)((char *)this + 32);
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 55) != 4)
    {
      char v3 = (char *)this + 32;
      if (*((unsigned char *)this + 55) != 5) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    int v5 = 65552;
    if (*v2 != 842231910)
    {
      if (*v2 != 909209702) {
        goto LABEL_19;
      }
      goto LABEL_23;
    }
LABEL_22:
    int v5 = 65568;
    goto LABEL_23;
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4 == 4)
  {
    int v5 = 65552;
    if (**(_DWORD **)v2 == 842231910) {
      goto LABEL_22;
    }
    if (**(_DWORD **)v2 == 909209702) {
      goto LABEL_23;
    }
    uint64_t v4 = *((void *)this + 5);
  }
  if (v4 != 5) {
    goto LABEL_19;
  }
  char v3 = *(char **)v2;
LABEL_11:
  int v6 = *(_DWORD *)v3;
  int v7 = v3[4];
  if (v6 != 863268457 || v7 != 50)
  {
LABEL_19:
    double v9 = (char *)this + 32;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    if (*((char *)this + 55) < 0) {
      double v9 = *(const char **)v9;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v17, "dtype %s not supported", v9);
    std::logic_error::logic_error(exception, &v17);
  }
  int v5 = 131104;
LABEL_23:
  int v11 = 163841;
  *(_DWORD *)(*((void *)this + 16) + 144) = v5;
  BOOL result = (int *)InferenceEngine::DataTensor::get_rank(this);
  if (result == (int *)((char *)&dword_4 + 1))
  {
    int v11 = 360449;
  }
  else
  {
    BOOL result = (int *)InferenceEngine::DataTensor::get_rank(this);
    if (result == &dword_4)
    {
      int v11 = 294913;
    }
    else
    {
      BOOL result = (int *)InferenceEngine::DataTensor::get_rank(this);
      if (result == (int *)((char *)&def_5A5E8 + 3))
      {
        int v11 = 229377;
      }
      else
      {
        BOOL result = (int *)InferenceEngine::DataTensor::get_rank(this);
        if (result != (int *)((char *)&def_5A5E8 + 2))
        {
          BOOL result = (int *)InferenceEngine::DataTensor::get_rank(this);
          if (result != (int *)((char *)&def_5A5E8 + 1))
          {
            long long v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            InferenceEngine::StringFormatter::StringFormatter(&v17, "shape rank %ld not supported", (uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3);
            std::logic_error::logic_error(v16, &v17);
          }
          int v11 = 98305;
        }
      }
    }
  }
  uint64_t v13 = *((void *)this + 16);
  *(_DWORD *)(v13 + 4) = v11;
  *(void *)(v13 + 136) = *((void *)this + 11);
  int v14 = (unsigned char *)*((void *)this + 7);
  int v15 = (unsigned char *)*((void *)this + 8);
  if (v15 != v14)
  {
    return (int *)memmove((void *)(v13 + 8), v14, v15 - v14);
  }
  return result;
}

void sub_1F86B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::Mil2BnnsMilIO::read_framework_specific_buffer(InferenceEngine::Mil2BnnsMilIO *this)
{
  BOOL v2 = (_DWORD *)*((void *)this + 16);
  int v3 = v2[36];
  if (v3 == 65552)
  {
    int v8 = (void *)((char *)this + 32);
    int v9 = *((char *)this + 55);
    if (v9 < 0)
    {
      if (*((void *)this + 5) != 4) {
        goto LABEL_23;
      }
      int v8 = (void *)*v8;
    }
    else if (v9 != 4)
    {
      goto LABEL_23;
    }
    if (*(_DWORD *)v8 == 909209702) {
      goto LABEL_27;
    }
LABEL_23:
    InferenceEngine::Mil2BnnsMilIO::read_framework_specific_buffer();
  }
  if (v3 == 131104)
  {
    int v6 = (char *)this + 32;
    int v7 = *((char *)this + 55);
    if (v7 < 0)
    {
      if (*((void *)this + 5) != 5) {
        goto LABEL_19;
      }
      int v6 = *(char **)v6;
    }
    else if (v7 != 5)
    {
      goto LABEL_19;
    }
    int v10 = *(_DWORD *)v6;
    int v11 = v6[4];
    if (v10 == 863268457 && v11 == 50) {
      goto LABEL_27;
    }
LABEL_19:
    InferenceEngine::Mil2BnnsMilIO::read_framework_specific_buffer();
  }
  if (v3 != 65568)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::string v17 = (char *)this + 32;
    if (*((char *)this + 55) < 0) {
      std::string v17 = *(const char **)v17;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v37, "dtype %s not supported", v17);
    std::logic_error::logic_error(exception, &v37);
  }
  uint64_t v4 = (void *)((char *)this + 32);
  int v5 = *((char *)this + 55);
  if (v5 < 0)
  {
    if (*((void *)this + 5) != 4) {
      goto LABEL_45;
    }
    uint64_t v4 = (void *)*v4;
  }
  else if (v5 != 4)
  {
LABEL_45:
    InferenceEngine::Mil2BnnsMilIO::read_framework_specific_buffer();
  }
  if (*(_DWORD *)v4 != 842231910) {
    goto LABEL_45;
  }
LABEL_27:
  HIDWORD(v13) = v2[1] - 32769;
  LODWORD(v13) = HIDWORD(v13);
  switch((v13 >> 16))
  {
    case 0u:
      uint64_t v19 = 0;
      int v20 = 0;
      uint64_t v21 = 0;
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v19, 0, 0, 0);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v19);
      int v14 = v19;
      if (!v19) {
        goto LABEL_44;
      }
      int v20 = v19;
      goto LABEL_43;
    case 1u:
      memset(&v37, 0, sizeof(v37));
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v37, v2 + 2, (uint64_t)(v2 + 4), 1uLL);
      uint64_t v22 = 0;
      std::string::size_type v23 = 0;
      uint64_t v24 = 0;
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v22, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_, (uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v22);
      int v15 = v22;
      if (!v22) {
        goto LABEL_41;
      }
      std::string::size_type v23 = v22;
      goto LABEL_40;
    case 2u:
      memset(&v37, 0, sizeof(v37));
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v37, v2 + 2, (uint64_t)(v2 + 6), 2uLL);
      std::string::size_type v25 = 0;
      char v26 = 0;
      uint64_t v27 = 0;
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v25, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_, (uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v25);
      int v15 = v25;
      if (!v25) {
        goto LABEL_41;
      }
      char v26 = v25;
      goto LABEL_40;
    case 3u:
      memset(&v37, 0, sizeof(v37));
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v37, v2 + 2, (uint64_t)(v2 + 8), 3uLL);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v28, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_, (uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v28);
      int v15 = v28;
      if (!v28) {
        goto LABEL_41;
      }
      uint64_t v29 = v28;
      goto LABEL_40;
    case 4u:
      memset(&v37, 0, sizeof(v37));
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v37, v2 + 2, (uint64_t)(v2 + 10), 4uLL);
      uint64_t v31 = 0;
      long long v32 = 0;
      uint64_t v33 = 0;
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v31, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_, (uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v31);
      int v15 = v31;
      if (!v31) {
        goto LABEL_41;
      }
      long long v32 = v31;
      goto LABEL_40;
    case 5u:
      memset(&v37, 0, sizeof(v37));
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v37, v2 + 2, (uint64_t)(v2 + 12), 5uLL);
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v34, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_, (uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v34);
      int v15 = v34;
      if (!v34) {
        goto LABEL_41;
      }
      uint64_t v35 = v34;
LABEL_40:
      operator delete(v15);
LABEL_41:
      int v14 = (void *)v37.__r_.__value_.__r.__words[0];
      if (v37.__r_.__value_.__r.__words[0])
      {
        v37.__r_.__value_.__l.__size_ = v37.__r_.__value_.__r.__words[0];
LABEL_43:
        operator delete(v14);
      }
LABEL_44:
      *((void *)this + 11) = *(void *)(*((void *)this + 16) + 136);
      return;
    default:
      BOOL v18 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      InferenceEngine::StringFormatter::StringFormatter(&v37, "layout %ld not supported", *(unsigned int *)(*((void *)this + 16) + 4));
      std::logic_error::logic_error(v18, &v37);
  }
}

void sub_1F8B18(_Unwind_Exception *a1)
{
  if (*(char *)(v3 - 33) < 0)
  {
    operator delete(*(void **)(v3 - 56));
    if ((v2 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

uint64_t InferenceEngine::Mil2BnnsMilInferenceModel::Mil2BnnsMilInferenceModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)InferenceEngine::MilInferenceModel::MilInferenceModel(a1, a2);
  *uint64_t v3 = off_270888;
  uint64_t v4 = (void **)(v3 + 33);
  v3[34] = 0;
  v3[35] = 0;
  v3[33] = 0;
  BNNSGraphCompileOptionsMakeDefault();
  std::string::basic_string[abi:ne180100]<0>(&__p, "mil2bnns_model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("", (char *)(a1 + 112), (const void **)&__p.__r_.__value_.__l.__data_, &v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "mil2bnns_downcast_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("", (char *)(a1 + 112), (const void **)&buf.__r_.__value_.__l.__data_, &__p);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v25, "mil2bnns_mmap_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("", (char *)(a1 + 112), (const void **)v25, &buf);
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*v4);
  }
  *(std::string *)uint64_t v4 = buf;
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v28.__r_.__value_.__l.__size_ != 7) {
      goto LABEL_20;
    }
    int v5 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) != 7) {
      goto LABEL_20;
    }
    int v5 = &v28;
  }
  int data = (int)v5->__r_.__value_.__l.__data_;
  int v7 = *(_DWORD *)((char *)v5->__r_.__value_.__r.__words + 3);
  if (data == 1702257015 && v7 == 1852732005) {
    BNNSGraphCompileOptionsSetPredefinedOptimizations();
  }
LABEL_20:
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    cpu_capabilities = (InferenceEngine *)_get_cpu_capabilities();
    if ((cpu_capabilities & 0x78000000) >= 0x10000001uLL)
    {
      LogObject = InferenceEngine::Diagnostics_GetLogObject(cpu_capabilities);
      if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
        _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "BNNS downcast type: %s", (uint8_t *)&buf, 0xCu);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ != 4) {
          goto LABEL_62;
        }
        unint64_t v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 4) {
          goto LABEL_62;
        }
        unint64_t v13 = &__p;
      }
      if (LODWORD(v13->__r_.__value_.__l.__data_) == 909207138)
      {
        BNNSGraphCompileOptionsSetDownconvertMode();
        goto LABEL_35;
      }
LABEL_62:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      uint64_t v24 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      InferenceEngine::StringFormatter::StringFormatter(&buf, "BNNS downcast type not supported '%s'", (const char *)v24);
      std::logic_error::logic_error(exception, &buf);
    }
  }
LABEL_35:
  if (*(char *)(a1 + 287) < 0)
  {
    if (!*(void *)(a1 + 272)) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if (*(unsigned char *)(a1 + 287)) {
LABEL_39:
  }
    BNNSGraphCompileOptionsSetOutputPath();
LABEL_40:
  int v14 = (const char *)(a1 + 144);
  *(void *)(a1 + 200) = BNNSGraphCompileFromFile_v2();
  *(void *)(a1 + 208) = v15;
  BNNSGraphCompileOptionsDestroy();
  if (!*(void *)(a1 + 200))
  {
    uint64_t v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 167) < 0) {
      int v14 = *(const char **)v14;
    }
    InferenceEngine::StringFormatter::StringFormatter(&buf, "failed to compile mil2bnns model from: '%s'", v14);
    std::logic_error::logic_error(v21, &buf);
  }
  uint64_t v16 = BNNSGraphContextMake();
  *(void *)(a1 + 232) = v16;
  *(void *)(a1 + 240) = v17;
  if (!v16)
  {
    uint64_t v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 167) < 0) {
      int v14 = *(const char **)v14;
    }
    InferenceEngine::StringFormatter::StringFormatter(&buf, "failed to create context: '%s'", v14);
    std::logic_error::logic_error(v22, &buf);
  }
  if (*(unsigned char *)(a1 + 192))
  {
    WorkspaceSize_int v2 = (InferenceEngine *)BNNSGraphContextSetArgumentType();
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
  }
  else
  {
    WorkspaceSize_int v2 = (InferenceEngine *)BNNSGraphContextGetWorkspaceSize_v2();
    *(void *)(a1 + 216) = WorkspaceSize_v2;
    if (WorkspaceSize_v2) {
      WorkspaceSize_int v2 = (InferenceEngine *)malloc_type_valloc((size_t)WorkspaceSize_v2, 0x7C27CB89uLL);
    }
    *(void *)(a1 + 224) = WorkspaceSize_v2;
  }
  uint64_t v19 = InferenceEngine::Diagnostics_GetLogObject(WorkspaceSize_v2);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 167) < 0) {
      int v14 = *(const char **)v14;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
    _os_log_impl(&def_5A5E8, v19, OS_LOG_TYPE_INFO, "Load model from %s", (uint8_t *)&buf, 0xCu);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1F9128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
    {
LABEL_6:
      if (a21 < 0) {
        operator delete(a16);
      }
      if (a27 < 0) {
        operator delete(a22);
      }
      if (v33[287] < 0) {
        operator delete(*v36);
      }
      InferenceEngine::MilInferenceModel::~MilInferenceModel((InferenceEngine::MilInferenceModel *)v33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

void InferenceEngine::Mil2BnnsMilInferenceModel::~Mil2BnnsMilInferenceModel(InferenceEngine::Mil2BnnsMilInferenceModel *this)
{
  *(void *)this = off_270888;
  BNNSGraphContextDestroy_v2();
  int v2 = (void *)*((void *)this + 28);
  if (v2) {
    free(v2);
  }
  if (*((char *)this + 287) < 0) {
    uint64_t v3 = *((void *)this + 34);
  }
  else {
    uint64_t v3 = *((unsigned __int8 *)this + 287);
  }
  uint64_t v4 = (void *)*((void *)this + 25);
  if (v3) {
    munmap(v4, *((void *)this + 26));
  }
  else {
    free(v4);
  }
  if (*((char *)this + 287) < 0) {
    operator delete(*((void **)this + 33));
  }

  InferenceEngine::MilInferenceModel::~MilInferenceModel(this);
}

double InferenceEngine::Mil2BnnsMilInferenceModel::build_io@<D0>(uint64_t a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, uint64_t *a5@<X4>, _OWORD *a6@<X8>)
{
  std::allocate_shared[abi:ne180100]<InferenceEngine::Mil2BnnsMilIO,std::allocator<InferenceEngine::Mil2BnnsMilIO>,std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,BOOL &,void>(a2, a3, a4, a5, (unsigned __int8 *)(a1 + 192), v8);
  double result = v8[0];
  *a6 = *(_OWORD *)v8;
  return result;
}

void InferenceEngine::Mil2BnnsMilInferenceModel::prepare(InferenceEngine::Mil2BnnsMilInferenceModel *this)
{
  InferenceEngine::MilInferenceModel::prepare(this);
  uint64_t v2 = *((void *)this + 9) + *((void *)this + 4);
  *((void *)this + 31) = v2;
  *((void *)this + 32) = malloc_type_malloc(16 * v2, 0x10A20408DAD38D9uLL);
  for (uint64_t i = (void *)*((void *)this + 3); i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = (const void *)i[5];
    if (v4)
    {
      if (v5)
      {
        int v6 = (std::__shared_weak_count *)i[6];
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_8;
      }
    }
    else
    {
      int v5 = 0;
    }
    int v6 = 0;
LABEL_8:
    InferenceEngine::MilIO::get_io_name(v5, &__p);
    int ArgumentPosition = BNNSGraphGetArgumentPosition();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *((_DWORD *)v5 + 30) = ArgumentPosition;
    if (*((unsigned char *)this + 192)) {
      uint64_t v8 = *((void *)v5 + 16);
    }
    else {
      uint64_t v8 = *((void *)v5 + 11);
    }
    data_std::string::size_type size = InferenceEngine::DataTensor::get_data_size(v5);
    int v10 = (void *)(*((void *)this + 32) + 16 * *((int *)v5 + 30));
    *int v10 = v8;
    v10[1] = data_size;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  for (unint64_t j = (void *)*((void *)this + 8); j; unint64_t j = (void *)*j)
  {
    int v12 = (const void *)j[5];
    if (v12)
    {
      if (v13)
      {
        int v14 = (std::__shared_weak_count *)j[6];
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v13 = 0;
    }
    int v14 = 0;
LABEL_23:
    InferenceEngine::MilIO::get_io_name(v13, &__p);
    int v15 = BNNSGraphGetArgumentPosition();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *((_DWORD *)v13 + 30) = v15;
    if (*((unsigned char *)this + 192)) {
      uint64_t v16 = *((void *)v13 + 16);
    }
    else {
      uint64_t v16 = *((void *)v13 + 11);
    }
    uint64_t v17 = InferenceEngine::DataTensor::get_data_size(v13);
    BOOL v18 = (void *)(*((void *)this + 32) + 16 * *((int *)v13 + 30));
    void *v18 = v16;
    v18[1] = v17;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
}

void sub_1F95A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::Mil2BnnsMilInferenceModel::clean(void **this)
{
  free(this[32]);
  if (*((unsigned char *)this + 192))
  {
    for (uint64_t i = this[8]; i; uint64_t i = *(void **)i)
    {
      uint64_t v4 = (std::__shared_weak_count *)*((void *)i + 6);
      if (v4)
      {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        v3[11] = 0;
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      else
      {
        v3[11] = 0;
      }
    }
  }

  InferenceEngine::MilInferenceModel::clean((InferenceEngine::MilInferenceModel *)this);
}

uint64_t InferenceEngine::Mil2BnnsMilInferenceModel::execute(InferenceEngine::Mil2BnnsMilInferenceModel *this)
{
  return _BNNSGraphContextExecute_v2(*((void *)this + 29), *((void *)this + 30), 0, *((void *)this + 31), *((void *)this + 32), *((void *)this + 27), *((void *)this + 28));
}

void InferenceEngine::Mil2BnnsMilIO::~Mil2BnnsMilIO(InferenceEngine::Mil2BnnsMilIO *this)
{
  *(void *)this = off_270858;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)this = off_270920;
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }

  InferenceEngine::DataTensor::~DataTensor((void **)this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = off_270858;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)this = off_270920;
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  InferenceEngine::DataTensor::~DataTensor((void **)this);

  operator delete();
}

void std::__shared_ptr_emplace<BNNSNDArrayDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_270950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BNNSNDArrayDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_270950;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *std::allocate_shared[abi:ne180100]<InferenceEngine::Mil2BnnsMilIO,std::allocator<InferenceEngine::Mil2BnnsMilIO>,std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,BOOL &,void>@<X0>(long long *a1@<X1>, long long *a2@<X2>, long long *a3@<X3>, uint64_t *a4@<X4>, unsigned __int8 *a5@<X5>, void *a6@<X8>)
{
  int v12 = operator new(0xA8uLL);
  double result = std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,BOOL &,std::allocator<InferenceEngine::Mil2BnnsMilIO>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1F996C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,BOOL &,std::allocator<InferenceEngine::Mil2BnnsMilIO>,0>(void *a1, long long *a2, long long *a3, long long *a4, uint64_t *a5, unsigned __int8 *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_2709A0;
  InferenceEngine::Mil2BnnsMilIO::Mil2BnnsMilIO((uint64_t)(a1 + 3), a2, a3, a4, a5, *a6);
  return a1;
}

void sub_1F99CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilIO>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2709A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilIO>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2709A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilIO>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void InferenceEngine::Mil2BnnsMilIO::read_framework_specific_buffer()
{
  __assert_rtn("read_framework_specific_buffer", "Mil2BnnsInferenceModule.cpp", 65, "dtype_ == \"fp32\"");
}

{
  __assert_rtn("read_framework_specific_buffer", "Mil2BnnsInferenceModule.cpp", 67, "dtype_ == \"fp16\"");
}

{
  __assert_rtn("read_framework_specific_buffer", "Mil2BnnsInferenceModule.cpp", 69, "dtype_ == \"int32\"");
}

InferenceEngine::DataTensor *InferenceEngine::DataTensor::DataTensor(InferenceEngine::DataTensor *this, long long *a2, long long *a3, uint64_t *a4)
{
  *(void *)this = off_2709F0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *((void *)this + 3) = *((void *)a2 + 2);
    *(_OWORD *)((char *)this + 8) = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *((void *)this + 6) = *((void *)a3 + 2);
    *((_OWORD *)this + 2) = v8;
  }
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 11) = 0;
  if ((uint64_t *)((char *)this + 56) == a4) {
    goto LABEL_17;
  }
  std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)this + 56, (char *)*a4, a4[1], (a4[1] - *a4) >> 3);
  int v9 = (void *)*((void *)this + 7);
  uint64_t v10 = *((void *)this + 8) - (void)v9;
  if (!v10) {
    goto LABEL_17;
  }
  unint64_t v11 = v10 >> 3;
  uint64_t v12 = v11 <= 1 ? 1 : v11;
  if (*v9 != -1)
  {
    uint64_t v13 = 1;
    do
    {
      unint64_t v14 = v13;
      if (v12 == v13) {
        break;
      }
      uint64_t v15 = v9[v13++];
    }
    while (v15 != -1);
    if (v14 >= v11) {
LABEL_17:
    }
      InferenceEngine::DataTensor::allocate_memory(this);
  }
  return this;
}

void sub_1F9C34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *InferenceEngine::DataTensor::allocate_memory(InferenceEngine::DataTensor *this)
{
  InferenceEngine::DataTensor::init_data_size(this);
  free(*((void **)this + 11));
  double result = malloc_type_valloc(*((void *)this + 10), 0xB6D6211DuLL);
  *((void *)this + 11) = result;
  return result;
}

uint64_t InferenceEngine::DataTensor::init_data_size(InferenceEngine::DataTensor *this)
{
  uint64_t result = InferenceEngine::DataUtils::get_size((uint64_t)this + 56);
  uint64_t v3 = (int **)((char *)this + 32);
  int v4 = *((unsigned __int8 *)this + 55);
  if ((v4 & 0x80) != 0)
  {
    uint64_t v6 = *((void *)this + 5);
    if (v6 == 4)
    {
      if (**v3 == 842231910) {
        goto LABEL_16;
      }
      if (**v3 == 909209702)
      {
LABEL_19:
        uint64_t v10 = 2;
        goto LABEL_20;
      }
      uint64_t v6 = *((void *)this + 5);
    }
    if (v6 != 5) {
      goto LABEL_21;
    }
    int v5 = *v3;
    goto LABEL_11;
  }
  if (v4 != 4)
  {
    int v5 = (int *)((char *)this + 32);
    if (v4 != 5) {
      goto LABEL_21;
    }
LABEL_11:
    int v7 = *v5;
    int v8 = *((unsigned __int8 *)v5 + 4);
    if (v7 != 863268457 || v8 != 50)
    {
LABEL_21:
      unint64_t v11 = (char *)this + 32;
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      if (*((char *)this + 55) < 0) {
        unint64_t v11 = *(const char **)v11;
      }
      InferenceEngine::StringFormatter::StringFormatter(&v13, "DataTensor type not supported: '%s'", v11);
      std::logic_error::logic_error(exception, &v13);
    }
    goto LABEL_16;
  }
  if (*(_DWORD *)v3 != 842231910)
  {
    if (*(_DWORD *)v3 != 909209702) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
LABEL_16:
  uint64_t v10 = 4;
LABEL_20:
  *((void *)this + 10) = v10 * result;
  return result;
}

void sub_1F9E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void InferenceEngine::DataTensor::~DataTensor(void **this)
{
  *this = off_2709F0;
  free(this[11]);
  uint64_t v2 = this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  InferenceEngine::DataTensor::~DataTensor(this);

  operator delete();
}

void InferenceEngine::DataTensor::get_name(InferenceEngine::DataTensor *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
}

void InferenceEngine::DataTensor::get_dtype(InferenceEngine::DataTensor *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 6);
  }
}

uint64_t InferenceEngine::DataTensor::get_data_size(InferenceEngine::DataTensor *this)
{
  return *((void *)this + 10);
}

uint64_t InferenceEngine::DataTensor::get_rank(InferenceEngine::DataTensor *this)
{
  return (uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3;
}

void InferenceEngine::DataTensor::set_rank(InferenceEngine::DataTensor *this, unint64_t a2)
{
  if (!a2) {
    InferenceEngine::DataTensor::set_rank();
  }
  int v2 = a2;
  uint64_t v12 = 1;
  std::vector<unsigned long>::vector(&__p, a2, &v12);
  uint64_t v5 = *((void *)this + 7);
  uint64_t v4 = *((void *)this + 8);
  uint64_t v6 = (char *)this + 56;
  unint64_t v7 = (unint64_t)(v4 - v5) >> 3;
  if ((int)v7 - 1 >= 0)
  {
    int v8 = __p;
    int v9 = (uint64_t *)(v5 + 8 * (v7 - 1));
    int v10 = v2 - 1;
    do
    {
      if (v10 < 0) {
        __assert_rtn("set_rank", "DataTensor.cpp", 74, "new_shape_dim >= 0");
      }
      uint64_t v11 = *v9--;
      v8[v10] = v11;
      LODWORD(v7) = v7 - 1;
      --v10;
    }
    while ((int)v7 > 0);
  }
  if (v6 != (char *)&__p) {
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v6, (char *)__p, (uint64_t)v14, (v14 - (unsigned char *)__p) >> 3);
  }
  if (__p)
  {
    unint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_1FA060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::DataTensor::get_shape(InferenceEngine::DataTensor *this@<X0>, int a2@<W1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = *((void *)this + 7);
  uint64_t v4 = *((void *)this + 8);
  if (v4 != v5)
  {
    int v8 = 0;
    unint64_t v9 = 0;
    int v10 = a3 + 2;
    do
    {
      if (!a2 || *(void *)(v5 + 8 * v9) != 1)
      {
        if ((unint64_t)v8 >= *v10)
        {
          uint64_t v12 = *a3;
          uint64_t v13 = (v8 - *a3) >> 3;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = *v10 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 2), v16);
            uint64_t v12 = *a3;
            int v8 = a3[1];
          }
          else
          {
            uint64_t v17 = 0;
          }
          BOOL v18 = &v17[8 * v13];
          *(void *)BOOL v18 = *(void *)(v5 + 8 * v9);
          uint64_t v11 = v18 + 8;
          while (v8 != v12)
          {
            uint64_t v19 = *((void *)v8 - 1);
            v8 -= 8;
            *((void *)v18 - 1) = v19;
            v18 -= 8;
          }
          *a3 = v18;
          a3[1] = v11;
          a3[2] = &v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *(void *)int v8 = *(void *)(v5 + 8 * v9);
          uint64_t v11 = v8 + 8;
        }
        a3[1] = v11;
        int v8 = v11;
        uint64_t v5 = *((void *)this + 7);
        uint64_t v4 = *((void *)this + 8);
      }
      ++v9;
    }
    while (v9 < (v4 - v5) >> 3);
  }
}

void sub_1FA1C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__int16 InferenceEngine::DataTensor::cast_data_to_target_tensor@<H0>(uint64_t a1@<X0>, uint64_t *a2@<X1>)
{
  InferenceEngine::DataTensor::valid_shape((uint64_t **)(a1 + 56), *a2 + 56, 0, 0);
  uint64_t v5 = (const void **)(a1 + 32);
  uint64_t v6 = *a2;
  unint64_t v7 = (unsigned __int8 **)(*a2 + 32);
  int v8 = *(unsigned __int8 *)(a1 + 55);
  uint64_t v9 = *(void *)(a1 + 40);
  if ((v8 & 0x80u) == 0) {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    uint64_t v10 = *(void *)(a1 + 40);
  }
  int v11 = *(unsigned __int8 *)(v6 + 55);
  uint64_t v12 = *(void *)(v6 + 40);
  if ((v11 & 0x80u) == 0) {
    uint64_t v13 = *(unsigned __int8 *)(v6 + 55);
  }
  else {
    uint64_t v13 = *(void *)(v6 + 40);
  }
  if (v10 != v13) {
    goto LABEL_17;
  }
  if ((v11 & 0x80u) == 0) {
    unint64_t v14 = (unsigned __int8 **)(*a2 + 32);
  }
  else {
    unint64_t v14 = (unsigned __int8 **)*v7;
  }
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*v5, v14, *(void *)(a1 + 40))) {
      goto LABEL_22;
    }
LABEL_27:
    BOOL v18 = *(void **)(v6 + 88);
    size_t v20 = *(void *)(a1 + 80);
    uint64_t v19 = *(const void **)(a1 + 88);
    memcpy(v18, v19, v20);
    return LOWORD(_S0);
  }
  if (!*(unsigned char *)(a1 + 55)) {
    goto LABEL_27;
  }
  uint64_t v15 = (unsigned __int8 *)(a1 + 32);
  uint64_t v16 = *(unsigned __int8 *)(a1 + 55);
  while (*v15 == *(unsigned __int8 *)v14)
  {
    ++v15;
    unint64_t v14 = (unsigned __int8 **)((char *)v14 + 1);
    if (!--v16) {
      goto LABEL_27;
    }
  }
LABEL_17:
  if ((v8 & 0x80) == 0)
  {
    if (v8 != 4)
    {
      uint64_t v17 = (unsigned __int8 *)(a1 + 32);
      if (v8 != 5) {
        goto LABEL_76;
      }
      goto LABEL_35;
    }
    if (*(_DWORD *)v5 != 909209702) {
      goto LABEL_31;
    }
    goto LABEL_55;
  }
LABEL_22:
  if (v9 == 4)
  {
    if (*(_DWORD *)*v5 != 909209702)
    {
      if ((v8 & 0x80) != 0)
      {
        if (*(_DWORD *)*v5 != 842231910) {
          goto LABEL_76;
        }
        goto LABEL_66;
      }
      if (v8 != 4) {
        goto LABEL_76;
      }
LABEL_31:
      if (*(_DWORD *)v5 != 842231910) {
        goto LABEL_76;
      }
LABEL_66:
      if ((v11 & 0x80) != 0)
      {
        if (v12 != 4) {
          goto LABEL_91;
        }
        unint64_t v7 = (unsigned __int8 **)*v7;
      }
      else if (v11 != 4)
      {
        goto LABEL_91;
      }
      if (*(_DWORD *)v7 == 909209702)
      {
        unint64_t v43 = *(void *)(a1 + 80);
        if (v43 >= 4)
        {
          unint64_t v44 = v43 >> 2;
          float v45 = *(float **)(a1 + 88);
          int v46 = *(_WORD **)(v6 + 88);
          do
          {
            float v47 = *v45++;
            _S0 = v47;
            __asm { FCVT            H0, S0 }
            *v46++ = LOWORD(_S0);
            --v44;
          }
          while (v44);
        }
        return LOWORD(_S0);
      }
LABEL_91:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      uint64_t v61 = a1;
      unint64_t v62 = exception;
      if (*(char *)(v61 + 55) < 0) {
        uint64_t v5 = (const void **)*v5;
      }
      long long v63 = (const char *)(*a2 + 32);
      if (*(char *)(*a2 + 55) < 0) {
        long long v63 = *(const char **)v63;
      }
      InferenceEngine::StringFormatter::StringFormatter(&v65, "DataTensor type cast not supported: src_dtype=%s, target_dtype=%s", (const char *)v5, v63);
      std::logic_error::logic_error(v62, &v65);
    }
LABEL_55:
    if ((v11 & 0x80) != 0)
    {
      if (v12 != 4) {
        goto LABEL_86;
      }
      unint64_t v7 = (unsigned __int8 **)*v7;
    }
    else if (v11 != 4)
    {
      goto LABEL_86;
    }
    if (*(_DWORD *)v7 == 842231910)
    {
      unint64_t v37 = *(void *)(a1 + 80);
      if (v37 >= 2)
      {
        unint64_t v38 = v37 >> 1;
        uint64_t v39 = *(__int16 **)(a1 + 88);
        uint64_t v40 = *(float **)(v6 + 88);
        do
        {
          __int16 v41 = *v39++;
          _H0 = v41;
          __asm { FCVT            S0, H0 }
          *v40++ = _S0;
          --v38;
        }
        while (v38);
      }
      return LOWORD(_S0);
    }
LABEL_86:
    int v56 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v57 = a1;
    uint64_t v58 = v56;
    if (*(char *)(v57 + 55) < 0) {
      uint64_t v5 = (const void **)*v5;
    }
    int v59 = (const char *)(*a2 + 32);
    if (*(char *)(*a2 + 55) < 0) {
      int v59 = *(const char **)v59;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v65, "DataTensor type cast not supported: src_dtype=%s, target_dtype=%s", (const char *)v5, v59);
    std::logic_error::logic_error(v58, &v65);
  }
  if (v9 != 5) {
    goto LABEL_76;
  }
  uint64_t v17 = (unsigned __int8 *)*v5;
LABEL_35:
  int v21 = *(_DWORD *)v17;
  int v22 = v17[4];
  if (v21 != 863268457 || v22 != 50)
  {
LABEL_76:
    size_t v48 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v49 = a1;
    uint64_t v50 = v48;
    if (*(char *)(v49 + 55) < 0) {
      uint64_t v5 = (const void **)*v5;
    }
    unint64_t v51 = (const char *)(*a2 + 32);
    if (*(char *)(*a2 + 55) < 0) {
      unint64_t v51 = *(const char **)v51;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v65, "DataTensor type cast not supported: src_dtype=%s, target_dtype=%s", (const char *)v5, v51);
    std::logic_error::logic_error(v50, &v65);
  }
  if ((v11 & 0x80) != 0)
  {
    if (v12 != 4) {
      goto LABEL_81;
    }
    unint64_t v7 = (unsigned __int8 **)*v7;
  }
  else if (v11 != 4)
  {
LABEL_81:
    uint64_t v52 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v53 = a1;
    std::string v54 = v52;
    if (*(char *)(v53 + 55) < 0) {
      uint64_t v5 = (const void **)*v5;
    }
    std::string v55 = (const char *)(*a2 + 32);
    if (*(char *)(*a2 + 55) < 0) {
      std::string v55 = *(const char **)v55;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v65, "DataTensor type cast not supported: src_dtype=%s, target_dtype=%s", (const char *)v5, v55);
    std::logic_error::logic_error(v54, &v65);
  }
  if (*(_DWORD *)v7 == 842231910)
  {
    unint64_t v32 = *(void *)(a1 + 80);
    if (v32 >= 4)
    {
      unint64_t v33 = v32 >> 2;
      uint64_t v34 = *(int **)(a1 + 88);
      int v35 = *(float **)(v6 + 88);
      do
      {
        int v36 = *v34++;
        _S0 = (float)v36;
        *v35++ = (float)v36;
        --v33;
      }
      while (v33);
    }
  }
  else
  {
    if (*(_DWORD *)v7 != 909209702) {
      goto LABEL_81;
    }
    unint64_t v24 = *(void *)(a1 + 80);
    if (v24 >= 4)
    {
      unint64_t v25 = v24 >> 2;
      char v26 = *(int **)(a1 + 88);
      uint64_t v27 = *(_WORD **)(v6 + 88);
      do
      {
        int v28 = *v26++;
        _S0 = (float)v28;
        __asm { FCVT            H0, S0 }
        *v27++ = LOWORD(_S0);
        --v25;
      }
      while (v25);
    }
  }
  return LOWORD(_S0);
}

void sub_1FA71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v18) {
    __cxa_free_exception(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **InferenceEngine::DataTensor::valid_shape(uint64_t **result, uint64_t a2, int a3, char a4)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  uint64_t v6 = (char *)v5 - (char *)*result;
  unint64_t v7 = v6 >> 3;
  int v8 = *(uint64_t **)a2;
  if (v6 >> 3 != (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) {
    InferenceEngine::DataTensor::valid_shape();
  }
  if (v5 != v4)
  {
    uint64_t v9 = ((v6 << 29) - 0x100000000) >> 32;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    uint64_t v10 = &v8[v9];
    do
    {
      uint64_t v12 = *v4++;
      uint64_t v11 = v12;
      if (a3)
      {
        uint64_t v13 = *v10;
        if (a4)
        {
          if (v11 != -1 && v13 != -1 && v11 != v13) {
            InferenceEngine::DataTensor::valid_shape();
          }
        }
        else if (v11 == -1 || v11 != v13)
        {
          InferenceEngine::DataTensor::valid_shape();
        }
      }
      else
      {
        uint64_t v16 = *v8;
        if (a4)
        {
          if (v11 != -1 && v16 != -1 && v11 != v16) {
            InferenceEngine::DataTensor::valid_shape();
          }
        }
        else if (v11 == -1 || v11 != v16)
        {
          InferenceEngine::DataTensor::valid_shape();
        }
      }
      ++v8;
      --v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t InferenceEngine::DataTensor::get_size(InferenceEngine::DataTensor *this)
{
  return InferenceEngine::DataUtils::get_size((uint64_t)this + 56);
}

uint64_t InferenceEngine::DataUtils::get_size(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)a1;
  uint64_t v2 = *(void *)(a1 + 8) - *(void *)a1;
  if (!v2) {
    return 1;
  }
  unint64_t v3 = v2 >> 3;
  if (v3 <= 1) {
    unint64_t v3 = 1;
  }
  uint64_t result = 1;
  do
  {
    uint64_t v5 = *v1++;
    result *= v5;
    --v3;
  }
  while (v3);
  if (!result) {
    InferenceEngine::DataUtils::get_size();
  }
  return result;
}

void *InferenceEngine::DataTensor::resize(InferenceEngine::DataTensor *this, uint64_t a2)
{
  unint64_t v3 = (char *)this + 56;
  if (v3 != (char *)a2) {
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v3, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }

  return InferenceEngine::DataTensor::allocate_memory(this);
}

uint64_t InferenceEngine::DataTensor::set_shape(InferenceEngine::DataTensor *this, uint64_t a2)
{
  unint64_t v3 = (char *)this + 56;
  if (v3 != (char *)a2) {
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v3, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }

  return InferenceEngine::DataTensor::init_data_size(this);
}

InferenceEngine::DataTensor *InferenceEngine::MilIO::MilIO(InferenceEngine::DataTensor *a1, long long *a2, long long *a3, long long *a4, uint64_t *a5)
{
  unint64_t v7 = InferenceEngine::DataTensor::DataTensor(a1, a2, a4, a5);
  *(void *)unint64_t v7 = off_270920;
  int v8 = (std::string *)((char *)v7 + 96);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    v8->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_1FA99C(_Unwind_Exception *a1)
{
  InferenceEngine::DataTensor::~DataTensor(v1);
  _Unwind_Resume(a1);
}

void InferenceEngine::MilIO::get_io_name(InferenceEngine::MilIO *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 12), *((void *)this + 13));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 14);
  }
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<int,float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1FAA48(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::DataTensor::set_rank()
{
}

void InferenceEngine::DataTensor::valid_shape()
{
  __assert_rtn("valid_shape", "DataTensor.cpp", 175, "src_shape[dim] == dst_shape[maximum_index - dim] || src_shape[dim] == -1 || dst_shape[maximum_index - dim] == -1");
}

{
  __assert_rtn("valid_shape", "DataTensor.cpp", 173, "src_shape[dim] == dst_shape[maximum_index - dim] && src_shape[dim] != -1");
}

{
  __assert_rtn("valid_shape", "DataTensor.cpp", 181, "src_shape[dim] == dst_shape[dim] || src_shape[dim] == -1 || dst_shape[dim] == -1");
}

{
  __assert_rtn("valid_shape", "DataTensor.cpp", 179, "src_shape[dim] == dst_shape[dim] && src_shape[dim] != -1");
}

{
  __assert_rtn("valid_shape", "DataTensor.cpp", 168, "src_shape.size() == dst_shape.size()");
}

void InferenceEngine::DataUtils::get_size()
{
  __assert_rtn("get_size", "DataTensor.cpp", 217, "size != 0");
}

uint64_t InferenceEngine::MilInferenceModel::MilInferenceModel(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_270A20;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  uint64_t v4 = (char *)(a1 + 112);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 112);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 128);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 128);
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v8 = (void **)(a1 + 144);
  long long v9 = (void **)(a1 + 168);
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v24 = *(std::string *)a2;
  }
  boost::filesystem::path::parent_path((boost::filesystem::path *)&v24, v5, v6, v7, &v23);
  InferenceEngine::Utils::read_json_from_file((char *)&v24, (uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  char v10 = *(unsigned char *)(a1 + 112);
  *(unsigned char *)(a1 + 112) = v21[0];
  v21[0] = v10;
  uint64_t v11 = *(uint64_t **)(a1 + 120);
  *(void *)(a1 + 120) = v22;
  int v22 = v11;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
  std::string::basic_string[abi:ne180100]<0>(&v25, "model_file");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("", v4, (const void **)&v25.__r_.__value_.__l.__data_, &__p);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v19 = __p;
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v25, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  }
  else {
    std::string v25 = v23;
  }
  boost::filesystem::path::append_v3(&v25, &v19);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
  *(void *)(a1 + 160) = *((void *)&v25.__r_.__value_.__l + 2);
  *((unsigned char *)&v25.__r_.__value_.__s + 23) = 0;
  v25.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v25, "model_parameters");
  v19.__r_.__value_.__s.__data_[0] = 0;
  v19.__r_.__value_.__l.__size_ = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v4, (const void **)&v25.__r_.__value_.__l.__data_, (unsigned __int8 *)&v19, (uint64_t)v17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  char v12 = *(unsigned char *)(a1 + 128);
  *(unsigned char *)(a1 + 128) = v17[0];
  v17[0] = v12;
  uint64_t v13 = *(uint64_t **)(a1 + 136);
  *(void *)(a1 + 136) = v18;
  char v18 = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 128);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v18, v17[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v19.__r_.__value_.__l.__size_, v19.__r_.__value_.__s.__data_[0]);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v19, "model_function");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("main", v4, (const void **)&v19.__r_.__value_.__l.__data_, &v25);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)long long v9 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
  *(void *)(a1 + 184) = *((void *)&v25.__r_.__value_.__l + 2);
  *((unsigned char *)&v25.__r_.__value_.__s + 23) = 0;
  v25.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v25, "model_dynamic_shape");
  v19.__r_.__value_.__s.__data_[0] = 0;
  BOOL v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v4, (const void **)&v25.__r_.__value_.__l.__data_, (unsigned __int8 *)&v19);
  *(unsigned char *)(a1 + 192) = v14;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v14);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 191) < 0) {
      long long v9 = (void **)*v9;
    }
    LODWORD(v25.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Load model with %s function", (uint8_t *)&v25, 0xCu);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1FAFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (v37[191] < 0) {
    operator delete(*v43);
  }
  if (v37[167] < 0) {
    operator delete(*v44);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v41);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v40);
  if (v37[111] < 0) {
    operator delete(*v42);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::~__hash_table(v39);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::~__hash_table(v38);
  _Unwind_Resume(a1);
}

void sub_1FB0F4()
{
}

void InferenceEngine::MilInferenceModel::~MilInferenceModel(InferenceEngine::MilInferenceModel *this)
{
  *(void *)this = off_270A20;
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)this + 128);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 17, *((unsigned __int8 *)this + 128));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)this + 112);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 15, *((unsigned __int8 *)this + 112));
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::~__hash_table((uint64_t)this + 8);
}

void *InferenceEngine::MilInferenceModel::build_io@<X0>(void *a1@<X8>)
{
  return std::allocate_shared[abi:ne180100]<InferenceEngine::MilIO,std::allocator<InferenceEngine::MilIO>,std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,void>(a1);
}

void InferenceEngine::MilInferenceModel::add_model_ios(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v23, v3);
      std::string::basic_string[abi:ne180100]<0>(&__p, "name");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("", v23, (const void **)&__p.__r_.__value_.__l.__data_, &v22);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v20, "io_name");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("", v23, (const void **)&v20.__r_.__value_.__l.__data_, &__p);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(v18, "io_dtype");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("", v23, (const void **)v18, &v20);
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "shape");
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      v7.n128_f64[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<unsigned long>,0>(v23, (const void **)buf, (uint64_t)&v15, v18);
      if (v15)
      {
        uint64_t v16 = (std::__shared_weak_count *)v15;
        operator delete(v15);
      }
      if (v28 < 0) {
        operator delete(*(void **)buf);
      }
      (*(void (**)(void **__return_ptr, uint64_t, std::string *, std::string *, std::string *, void **, __n128))(*(void *)a1 + 56))(&v15, a1, &v22, &__p, &v20, v18, v7);
      *(void *)std::string buf = &v22;
      uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)&v22, (uint64_t)&std::piecewise_construct, (long long **)buf);
      char v10 = v15;
      long long v9 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = (std::__shared_weak_count *)*((void *)v8 + 6);
      *((void *)v8 + 5) = v10;
      *((void *)v8 + 6) = v9;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v8);
      if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
      {
        if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v13 = &v22;
        }
        else {
          uint64_t v13 = (std::string *)v22.__r_.__value_.__r.__words[0];
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = v13;
        __int16 v26 = 2080;
        uint64_t v27 = p_p;
        _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Added IO: %s -> %s", buf, 0x16u);
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if (v18[0])
      {
        v18[1] = v18[0];
        operator delete(v18[0]);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
      v3 += 16;
    }
    while (v3 != v4);
  }
}

void sub_1FB4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, std::__shared_weak_count *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t *a38)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a38);
  _Unwind_Resume(a1);
}

void sub_1FB5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    JUMPOUT(0x1FB58CLL);
  }
  JUMPOUT(0x1FB590);
}

void sub_1FB5B4()
{
}

void sub_1FB5BC()
{
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<unsigned long>,0>@<D0>(char *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    char v10 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    uint64_t v11 = std::string::insert(&v13, 0, "cannot use value() with ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v11->__r_.__value_.__r.__words[2];
    long long v14 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v14, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v14);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v13, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v13);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v14, (unsigned __int8 **)&v13))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(a4, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  }
  else
  {
    uint64_t v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v14);
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<unsigned long>,std::vector<unsigned long>,0>((char *)v8, a4);
  }
  return result;
}

void sub_1FB6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void InferenceEngine::MilInferenceModel::prepare(InferenceEngine::MilInferenceModel *this)
{
  uint64_t v2 = (char *)this + 112;
  std::string::basic_string[abi:ne180100]<0>(__p, "model_inputs");
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v2, (const void **)__p, (uint64_t *)v4, v8);
  v3[0] = v4;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](v3);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v4, "model_outputs");
  memset(v3, 0, sizeof(v3));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v2, (const void **)v4, (uint64_t *)v3, __p);
  long long v9 = v3;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
  InferenceEngine::MilInferenceModel::add_model_ios((uint64_t)this, v8, (uint64_t)this + 8);
  InferenceEngine::MilInferenceModel::add_model_ios((uint64_t)this, (uint64_t *)__p, (uint64_t)this + 48);
  v4[0] = __p;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v4);
  __p[0] = v8;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1FB85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  *(void *)(v25 - 40) = v24;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 40));
  if (a18 < 0) {
    operator delete(__p);
  }
  a19 = (void *)(v25 - 64);
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>@<X0>(char *a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    char v10 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    uint64_t v11 = std::string::insert(&v13, 0, "cannot use value() with ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v11->__r_.__value_.__r.__words[2];
    long long v14 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v14, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v14);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v13, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v13);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v14, (unsigned __int8 **)&v13))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(a4, *a3, a3[1], (a3[1] - *a3) >> 4);
  }
  else
  {
    uint64_t v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v14);
    return (void *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)v8, a4);
  }
}

void sub_1FBA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void InferenceEngine::MilInferenceModel::clean(InferenceEngine::MilInferenceModel *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::clear((uint64_t)this + 8);

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::clear((uint64_t)this + 48);
}

void InferenceEngine::MilInferenceModel::set_input(uint64_t a1, InferenceEngine::DataTensor **a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  InferenceEngine::DataTensor::get_name(*a2, &v20);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v4, (unsigned __int8 *)&v20);
  InferenceEngine::DataTensor::get_name(*a2, &v17);
  uint64_t v6 = std::string::insert(&v17, 0, "The key is not found: ");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  std::string::size_type v19 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  InferenceEngine::Utils::assert_with_log(v5 != 0, (char *)__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  InferenceEngine::DataTensor::get_name(*a2, &v20);
  __p[0] = &v20;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v4, (unsigned __int8 *)&v20, (uint64_t)&std::piecewise_construct, (long long **)__p);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  long long v9 = *a2;
  unint64_t rank = InferenceEngine::DataTensor::get_rank(*((InferenceEngine::DataTensor **)v8 + 5));
  InferenceEngine::DataTensor::set_rank(v9, rank);
  if (*(unsigned char *)(a1 + 192))
  {
    InferenceEngine::DataTensor::get_shape(*a2, 0, &v20.__r_.__value_.__l.__data_);
    InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v8 + 5), 0, (char **)__p);
    InferenceEngine::DataTensor::valid_shape((uint64_t **)&v20, (uint64_t)__p, 0, 1);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v20.__r_.__value_.__r.__words[0])
    {
      v20.__r_.__value_.__l.__size_ = v20.__r_.__value_.__r.__words[0];
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    uint64_t v11 = (InferenceEngine::DataTensor *)*((void *)v8 + 5);
    InferenceEngine::DataTensor::get_shape(*a2, 0, (char **)v16);
    InferenceEngine::DataTensor::resize(v11, (uint64_t)v16);
    if (v16[0])
    {
      v16[1] = v16[0];
      operator delete(v16[0]);
    }
    (*(void (**)(void))(**((void **)v8 + 5) + 16))(*((void *)v8 + 5));
  }
  else
  {
    InferenceEngine::DataTensor::get_shape(*a2, 0, &v20.__r_.__value_.__l.__data_);
    InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v8 + 5), 0, (char **)__p);
    InferenceEngine::DataTensor::valid_shape((uint64_t **)&v20, (uint64_t)__p, 0, 0);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v20.__r_.__value_.__r.__words[0])
    {
      v20.__r_.__value_.__l.__size_ = v20.__r_.__value_.__r.__words[0];
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  long long v12 = *a2;
  std::string v13 = (std::__shared_weak_count *)*((void *)v8 + 6);
  uint64_t v14 = *((void *)v8 + 5);
  std::string::size_type v15 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  InferenceEngine::DataTensor::cast_data_to_target_tensor((uint64_t)v12, &v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1FBD08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v27 = *(void **)(v25 - 56);
  if (v27)
  {
    *(void *)(v25 - 48) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::MilInferenceModel::get_output(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = a1 + 48;
  BOOL v7 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>((void *)(a1 + 48), a2) != 0;
  std::operator+<char>();
  InferenceEngine::Utils::assert_with_log(v7, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
  long long v9 = v8;
  if (*(unsigned char *)(a1 + 192)) {
    (*(void (**)(void))(**((void **)v8 + 5) + 24))(*((void *)v8 + 5));
  }
  InferenceEngine::DataTensor::get_dtype(*((InferenceEngine::DataTensor **)v9 + 5), &__p);
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v9 + 5), 0, (char **)v14);
  std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long>,void>(a3);
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = *((void *)v9 + 5);
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  std::string v13 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  InferenceEngine::DataTensor::cast_data_to_target_tensor(v10, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1FBF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::string v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::MilInferenceModel::get_output_io(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = a1 + 48;
  BOOL v7 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>((void *)(a1 + 48), a2) != 0;
  std::operator+<char>();
  InferenceEngine::Utils::assert_with_log(v7, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
  long long v9 = v8;
  if (*(unsigned char *)(a1 + 192)) {
    (*(void (**)(void))(**((void **)v8 + 5) + 24))(*((void *)v8 + 5));
  }
  InferenceEngine::MilIO::get_io_name(*((InferenceEngine::MilIO **)v9 + 5), &__p);
  InferenceEngine::DataTensor::get_dtype(*((InferenceEngine::DataTensor **)v9 + 5), &v15);
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v9 + 5), 0, (char **)v14);
  std::allocate_shared[abi:ne180100]<InferenceEngine::MilIO,std::allocator<InferenceEngine::MilIO>,std::string const&,std::string,std::string,std::vector<unsigned long>,void>(a3);
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = *((void *)v9 + 5);
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  std::string v13 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  InferenceEngine::DataTensor::cast_data_to_target_tensor(v10, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1FC0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v25 + 8);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<InferenceEngine::MilIO,std::allocator<InferenceEngine::MilIO>,std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x90uLL);
  double result = std::__shared_ptr_emplace<InferenceEngine::MilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,std::allocator<InferenceEngine::MilIO>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1FC1C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<InferenceEngine::MilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,std::allocator<InferenceEngine::MilIO>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_270618;
  InferenceEngine::MilIO::MilIO(a1 + 3);
  return a1;
}

void sub_1FC21C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<unsigned long>,std::vector<unsigned long>,0>@<D0>(char *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>,0>(a1, (uint64_t)a2);
}

void sub_1FC260(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>,0>(char *a1, uint64_t a2)
{
  if (*a1 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    uint64_t v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    uint64_t v6 = std::string::insert(&v8, 0, "type must be array, but is ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
    long long v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v9, exception);
  }

  return nlohmann::detail::from_json_array_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>>((unsigned __int8 *)a1, a2);
}

void sub_1FC354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

double nlohmann::detail::from_json_array_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>>(unsigned __int8 *a1, uint64_t a2)
{
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  unint64_t v4 = *a1;
  if (*a1)
  {
    if (v4 == 1)
    {
      unint64_t v4 = *(void *)(*((void *)a1 + 1) + 16);
    }
    else if (v4 == 2)
    {
      unint64_t v4 = (uint64_t)(*(void *)(*((void *)a1 + 1) + 8) - **((void **)a1 + 1)) >> 4;
    }
    else
    {
      unint64_t v4 = 1;
    }
  }
  std::vector<unsigned long>::reserve((void **)&v12, v4);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v11, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_begin(v11);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v10, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(v10);
  for (uint64_t i = (char *)*((void *)&v12 + 1);
        !nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(v11, v10);
        uint64_t i = v7 + 8)
  {
    uint64_t v6 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v11);
    unint64_t v14 = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v6, &v14);
    long long v7 = std::vector<unsigned long>::insert((uint64_t)&v12, i, &v14);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(v11);
  }
  std::string v8 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v8;
    operator delete(v8);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  double result = *(double *)&v12;
  *(_OWORD *)a2 = v12;
  *(void *)(a2 + 16) = v13;
  return result;
}

void sub_1FC4DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 48);
  if (v3)
  {
    *(void *)(v1 - 40) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    long long v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    long long v9 = &v6[8 * v8];
    std::string::size_type v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    long long v12 = v7;
    if (v11 != *a1)
    {
      long long v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

unsigned char *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(unsigned char *result, unint64_t *a2)
{
  uint64_t v2 = result;
  switch(*result)
  {
    case 4:
      unint64_t v3 = result[8];
      break;
    case 5:
    case 6:
      unint64_t v3 = *((void *)result + 1);
      break;
    case 7:
      unint64_t v3 = (unint64_t)*((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      int64_t v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
      std::string::basic_string[abi:ne180100]<0>(&v8, v5);
      uint64_t v6 = std::string::insert(&v8, 0, "type must be number, but is ");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
      long long v9 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(302, (uint64_t)&v9, exception);
  }
  *a2 = v3;
  return result;
}

void sub_1FC6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

char *std::vector<unsigned long>::insert(uint64_t a1, char *__src, void *a3)
{
  unint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    unint64_t v14 = *(unsigned char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v15 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = (__src - v14) >> 3;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 2 > v15) {
      unint64_t v15 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      std::string::size_type v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v7, v18);
    }
    else {
      std::string::size_type v19 = 0;
    }
    std::string __p = v19;
    int v22 = &v19[8 * v16];
    std::string v23 = v22;
    int v24 = &v19[8 * v18];
    std::__split_buffer<unsigned long>::push_back(&__p, a3);
    unint64_t v4 = std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)std::string __src = *a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    std::string::size_type v10 = __src + 8;
    uint64_t v11 = v6 - 8;
    long long v12 = v6;
    while (v11 < v6)
    {
      uint64_t v13 = *(void *)v11;
      v11 += 8;
      *(void *)long long v12 = v13;
      v12 += 8;
    }
    *(void *)(a1 + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    }
    *(void *)unint64_t v4 = *a3;
  }
  return v4;
}

void sub_1FC884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<unsigned long>::push_back(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    int64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      std::string::size_type v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      unint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        unint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        std::string v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)std::string v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        unint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        unint64_t v4 = (char *)a1[1];
      }
      unint64_t v15 = &v4[8 * v11];
      unint64_t v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  *(void *)unint64_t v4 = *a2;
  a1[2] = v4 + 8;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(a1, (uint64_t)a2);
}

void sub_1FCA04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (char *)result;
  if (*(unsigned char *)result != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    uint64_t v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
    std::string::basic_string[abi:ne180100]<0>(&v12, v9);
    uint64_t v10 = std::string::insert(&v12, 0, "type must be array, but is ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
    long long v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v13, exception);
  }
  unint64_t v3 = *(uint64_t **)(result + 8);
  if (v3 != (uint64_t *)a2)
  {
    uint64_t v4 = v3[1];
    unint64_t v5 = (v4 - *v3) >> 4;
    uint64_t v7 = *v3;
    return std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__assign_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(a2, v7, v4, v5);
  }
  return result;
}

void sub_1FCB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__assign_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void *)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vdeallocate((void **)a1);
    if (a4 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (*(void *)(a1 + 8) - v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + 16 * v14;
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v17, a2, v15, v9);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v8, v15, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v18, a2, a3, v9);
  return std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](a1, v16);
}

void sub_1FCCA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1FCCAC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  char v17 = operator new(0x38uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *char v17 = 0;
  v17[1] = v10;
  char v18 = *a4;
  long long v19 = **a4;
  void v17[4] = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)char v18 = 0;
  v17[5] = 0;
  v17[6] = 0;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  __int16 v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    *__int16 v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1FCF98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::MilIO>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long>,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<InferenceEngine::DataTensor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string,std::vector<unsigned long> &,std::allocator<InferenceEngine::DataTensor>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1FD010(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<InferenceEngine::MilIO,std::allocator<InferenceEngine::MilIO>,std::string const&,std::string,std::string,std::vector<unsigned long>,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x90uLL);
  uint64_t result = std::__shared_ptr_emplace<InferenceEngine::MilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,std::allocator<InferenceEngine::MilIO>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1FD08C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t InferenceEngine::Utils::read_metadata_from_file@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)a1);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (a1[23] >= 0) {
      unint64_t v5 = a1;
    }
    else {
      unint64_t v5 = *(char **)a1;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Read metadata from %s", buf, 0xCu);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::ifstream::basic_ifstream((void (__cdecl ***)(std::ifstream *__hidden))buf);
  if (!v17)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    if (a1[23] >= 0) {
      unint64_t v11 = a1;
    }
    else {
      unint64_t v11 = *(const char **)a1;
    }
    InferenceEngine::StringFormatter::StringFormatter(&__p, "Can't open file from %s", v11);
    std::logic_error::logic_error(exception, &__p);
  }
  memset(&__p, 0, sizeof(__p));
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)]);
    uint64_t v6 = std::locale::use_facet(&v12, &std::ctype<char>::id);
    unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v12);
    uint64_t v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(buf, (uint64_t)&__p, v7);
    if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0) {
      break;
    }
    v15[3] = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::string&>((uint64_t)&__p, (uint64_t)v15, 1, (uint64_t)&v12);
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v15);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::push_back[abi:ne180100](a2, (uint64_t)&v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, LOBYTE(v12.__locale_));
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 32] | 4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::filebuf::~filebuf();
  std::istream::~istream();
  return std::ios::~ios();
}

void sub_1FD3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      std::ifstream::~ifstream(&a22);
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

uint64_t InferenceEngine::Utils::read_json_from_file@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)a1);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (a1[23] >= 0) {
      unint64_t v5 = a1;
    }
    else {
      unint64_t v5 = *(char **)a1;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Read json from %s", buf, 0xCu);
  }
  std::ifstream::basic_ifstream((void (__cdecl ***)(std::ifstream *__hidden))buf);
  if (!v12)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    if (a1[23] >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *(const char **)a1;
    }
    InferenceEngine::StringFormatter::StringFormatter(&v9, "Can't open file from %s", v8);
    std::logic_error::logic_error(exception, &v9);
  }
  v10[3] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(buf, (uint64_t)v10, 1, a2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::~__value_func[abi:ne180100](v10);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(_DWORD *)&buf[*(void *)(*(void *)buf - 24) + 32] | 4);
  }
  std::filebuf::~filebuf();
  std::istream::~istream();
  return std::ios::~ios();
}

void sub_1FD6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ifstream::~ifstream(&a20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t InferenceEngine::Utils::assert_with_log(uint64_t result, char *a2)
{
  if ((result & 1) == 0) {
    InferenceEngine::Utils::assert_with_log(a2);
  }
  return result;
}

void InferenceEngine::Utils::assert_with_log(char *a1)
{
  LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)a1);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (a1[23] >= 0) {
      unint64_t v3 = a1;
    }
    else {
      unint64_t v3 = *(char **)a1;
    }
    int v4 = 136315138;
    unint64_t v5 = v3;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "Assertion Error: %s", (uint8_t *)&v4, 0xCu);
  }
  __assert_rtn("assert_with_log", "Utils.cpp", 80, "expr");
}

std::string *InferenceEngine::StringFormatter::StringFormatter(std::string *this, const char *a2, ...)
{
  va_start(va, a2);
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  StringFormatter::append(this, a2, va);
  return this;
}

void sub_1FD830(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::Diagnostics_GetLogObject(InferenceEngine *this)
{
  if (InferenceEngine::Diagnostics_GetLogObject(void)::onceToken != -1) {
    dispatch_once(&InferenceEngine::Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_1);
  }
  return InferenceEngine::Diagnostics_GetLogObject(void)::__profile_log_default;
}

void ___ZN15InferenceEngine24Diagnostics_GetLogObjectEv_block_invoke(id a1)
{
  InferenceEngine::Diagnostics_GetLogObject(void)::__profile_log_default = (uint64_t)os_log_create("com.apple.siri.tts.inferenceEngine", "default");
}

void sub_1FDC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1FE048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_1FE3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::destroy((uint64_t)&a12, a13);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1FE554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::destroy((uint64_t)&a22, a23);

  _Unwind_Resume(a1);
}

void sub_1FE698(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1FE8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, SiriTTS::TTSTrainer *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::unique_ptr<SiriTTS::TTSTrainer>::reset[abi:ne180100](&a10);

  _Unwind_Resume(a1);
}

void sub_1FEAA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1FEE7C(_Unwind_Exception *a1)
{
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100]((void *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_1FF6F4(_Unwind_Exception *a1)
{
  std::__function::__value_func<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__value_func[abi:ne180100]((void *)(v3 - 104));
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<AudioQualityMetric,double>,std::__map_value_compare<AudioQualityMetric,std::__value_type<AudioQualityMetric,double>,std::less<AudioQualityMetric>,true>,std::allocator<std::__value_type<AudioQualityMetric,double>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      void *result = 0;
      while (1)
      {
        int v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          int v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

SiriTTS::TTSTrainer *std::unique_ptr<SiriTTS::TTSTrainer>::reset[abi:ne180100](SiriTTS::TTSTrainer **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    SiriTTS::TTSTrainer::~TTSTrainer(result);
    operator delete();
  }
  return result;
}

void std::__shared_ptr_pointer<SiriTTS::TTSTrainer  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

SiriTTS::TTSTrainer *std::__shared_ptr_pointer<SiriTTS::TTSTrainer  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(SiriTTS::TTSTrainer **)(a1 + 24);
  if (result)
  {
    SiriTTS::TTSTrainer::~TTSTrainer(result);
    operator delete();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<SiriTTS::TTSTrainer  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t std::__function::__func<int({block_pointer} {__strong})(SiriTTS::TTSTrainer::CallbackMessage),std::allocator<int({block_pointer} {__strong})(SiriTTS::TTSTrainer::CallbackMessage)>,int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<int({block_pointer} {__strong})(SiriTTS::TTSTrainer::CallbackMessage),std::allocator<int({block_pointer} {__strong})(SiriTTS::TTSTrainer::CallbackMessage)>,int ()(SiriTTS::TTSTrainer::CallbackMessage)>::~__func(uint64_t a1)
{
  operator delete();
}

uint64_t std::__function::__func<int({block_pointer} {__strong})(SiriTTS::TTSTrainer::CallbackMessage),std::allocator<int({block_pointer} {__strong})(SiriTTS::TTSTrainer::CallbackMessage)>,int ()(SiriTTS::TTSTrainer::CallbackMessage)>::__clone()
{
  return 0;
}

id std::__function::__func<int({block_pointer} {__strong})(SiriTTS::TTSTrainer::CallbackMessage),std::allocator<int({block_pointer} {__strong})(SiriTTS::TTSTrainer::CallbackMessage)>,int ()(SiriTTS::TTSTrainer::CallbackMessage)>::__clone(uint64_t a1, void *a2)
{
  *a2 = off_270B00;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<int({block_pointer} {__strong})(SiriTTS::TTSTrainer::CallbackMessage),std::allocator<int({block_pointer} {__strong})(SiriTTS::TTSTrainer::CallbackMessage)>,int ()(SiriTTS::TTSTrainer::CallbackMessage)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return _objc_release_x1();
}

uint64_t std::__function::__func<int({block_pointer} {__strong})(SiriTTS::TTSTrainer::CallbackMessage),std::allocator<int({block_pointer} {__strong})(SiriTTS::TTSTrainer::CallbackMessage)>,int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<int({block_pointer} {__strong})(SiriTTS::TTSTrainer::CallbackMessage),std::allocator<int({block_pointer} {__strong})(SiriTTS::TTSTrainer::CallbackMessage)>,int ()(SiriTTS::TTSTrainer::CallbackMessage)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **std::__function::__func<int({block_pointer} {__strong})(SiriTTS::TTSTrainer::CallbackMessage),std::allocator<int({block_pointer} {__strong})(SiriTTS::TTSTrainer::CallbackMessage)>,int ()(SiriTTS::TTSTrainer::CallbackMessage)>::target_type()
{
}

id SiriTTSTrainerGetLog()
{
  if (qword_278C68 != -1) {
    dispatch_once(&qword_278C68, &__block_literal_global_2);
  }
  int v0 = (void *)_MergedGlobals;

  return v0;
}

void sub_2010CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_2013F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy()
{
}

uint64_t sub_2027E4()
{
  return URLResourceValues.isDirectory.getter();
}

uint64_t sub_2027F4()
{
  return URLResourceValues.fileSize.getter();
}

uint64_t sub_202804()
{
  return type metadata accessor for URLResourceValues();
}

uint64_t sub_202814()
{
  return NSFastEnumerationIterator.next()();
}

uint64_t sub_202824()
{
  return type metadata accessor for NSFastEnumerationIterator();
}

uint64_t sub_202834()
{
  return type metadata accessor for URL.DirectoryHint();
}

uint64_t sub_202844()
{
  return URL.resourceValues(forKeys:)();
}

uint64_t sub_202854()
{
  return URL.init(filePath:directoryHint:relativeTo:)();
}

uint64_t sub_202864()
{
  return type metadata accessor for URL();
}

uint64_t sub_202874()
{
  return os_log(_:dso:log:type:_:)();
}

NSDictionary sub_202884()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_202894()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_2028A4()
{
  return Dictionary.init(dictionaryLiteral:)();
}

NSString sub_2028B4()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_2028C4()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t sub_2028D4()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t sub_2028E4()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_2028F4()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_202904()
{
  return String.hash(into:)();
}

uint64_t sub_202914()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t sub_202924()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t sub_202944()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t sub_202954()
{
  return String.UTF16View.index(_:offsetBy:)();
}

uint64_t sub_202964()
{
  return String.init<A>(_:)();
}

uint64_t sub_202984()
{
  return NSEnumerator.makeIterator()();
}

uint64_t sub_202994()
{
  return NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();
}

uint64_t sub_2029A4()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_2029B4()
{
  return NSCoder.decodeObject<A>(of:forKey:)();
}

uint64_t sub_2029C4()
{
  return NSCoder.decodeDictionary<A, B>(withKeyClass:objectClass:forKey:)();
}

Swift::Int sub_2029D4(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t sub_2029E4()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t sub_2029F4()
{
  return type metadata accessor for Optional();
}

uint64_t sub_202A14()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t sub_202A24()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t sub_202A34()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t sub_202A44()
{
  return _StringObject.sharedUTF8.getter();
}

BOOL sub_202A54(Swift::Bool isUnique, Swift::Int capacity)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
}

uint64_t sub_202A64()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t sub_202A74()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t sub_202A94()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t sub_202AA4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_202AB4()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t sub_202AC4()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_202AD4()
{
  return Hasher.init(_seed:)();
}

Swift::Int sub_202AE4()
{
  return Hasher.finalize()();
}

Swift::Int sub_202AF4()
{
  return Hasher._finalize()();
}

uint64_t sub_202B04()
{
  return Hasher.init()();
}

AudioComponent AudioComponentFindNext(AudioComponent inComponent, const AudioComponentDescription *inDesc)
{
  return _AudioComponentFindNext(inComponent, inDesc);
}

OSStatus AudioComponentInstanceDispose(AudioComponentInstance inInstance)
{
  return _AudioComponentInstanceDispose(inInstance);
}

OSStatus AudioComponentInstanceNew(AudioComponent inComponent, AudioComponentInstance *outInstance)
{
  return _AudioComponentInstanceNew(inComponent, outInstance);
}

OSStatus AudioUnitGetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, void *outData, UInt32 *ioDataSize)
{
  return _AudioUnitGetProperty(inUnit, inID, inScope, inElement, outData, ioDataSize);
}

OSStatus AudioUnitInitialize(AudioUnit inUnit)
{
  return _AudioUnitInitialize(inUnit);
}

OSStatus AudioUnitRender(AudioUnit inUnit, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32 inOutputBusNumber, UInt32 inNumberFrames, AudioBufferList *ioData)
{
  return _AudioUnitRender(inUnit, ioActionFlags, inTimeStamp, inOutputBusNumber, inNumberFrames, ioData);
}

OSStatus AudioUnitSetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, const void *inData, UInt32 inDataSize)
{
  return _AudioUnitSetProperty(inUnit, inID, inScope, inElement, inData, inDataSize);
}

int BNNSFilterApplyBatch(void *filter, size_t batch_size, const void *in, size_t in_stride, void *out, size_t out_stride)
{
  return _BNNSFilterApplyBatch(filter, batch_size, in, in_stride, out, out_stride);
}

void *__cdecl BNNSFilterCreateConvolutionLayer(const BNNSImageStackDescriptor *in_desc, const BNNSImageStackDescriptor *out_desc, const BNNSConvolutionLayerParameters *layer_params, const BNNSFilterParameters *filter_params)
{
  return _BNNSFilterCreateConvolutionLayer(in_desc, out_desc, layer_params, filter_params);
}

void *__cdecl BNNSFilterCreateFullyConnectedLayer(const BNNSVectorDescriptor *in_desc, const BNNSVectorDescriptor *out_desc, const BNNSFullyConnectedLayerParameters *layer_params, const BNNSFilterParameters *filter_params)
{
  return _BNNSFilterCreateFullyConnectedLayer(in_desc, out_desc, layer_params, filter_params);
}

void BNNSFilterDestroy(void *filter)
{
}

uint64_t BNNSGraphCompileFromFile_v2()
{
  return _BNNSGraphCompileFromFile_v2();
}

uint64_t BNNSGraphCompileOptionsDestroy()
{
  return _BNNSGraphCompileOptionsDestroy();
}

uint64_t BNNSGraphCompileOptionsMakeDefault()
{
  return _BNNSGraphCompileOptionsMakeDefault();
}

uint64_t BNNSGraphCompileOptionsSetDownconvertMode()
{
  return _BNNSGraphCompileOptionsSetDownconvertMode();
}

uint64_t BNNSGraphCompileOptionsSetOutputPath()
{
  return _BNNSGraphCompileOptionsSetOutputPath();
}

uint64_t BNNSGraphCompileOptionsSetPredefinedOptimizations()
{
  return _BNNSGraphCompileOptionsSetPredefinedOptimizations();
}

uint64_t BNNSGraphContextDestroy_v2()
{
  return _BNNSGraphContextDestroy_v2();
}

uint64_t BNNSGraphContextGetWorkspaceSize_v2()
{
  return _BNNSGraphContextGetWorkspaceSize_v2();
}

uint64_t BNNSGraphContextMake()
{
  return _BNNSGraphContextMake();
}

uint64_t BNNSGraphContextSetArgumentType()
{
  return _BNNSGraphContextSetArgumentType();
}

uint64_t BNNSGraphGetArgumentPosition()
{
  return _BNNSGraphGetArgumentPosition();
}

int BNNSOptimizerStep(BNNSOptimizerFunction function, const void *OptimizerAlgFields, size_t number_of_parameters, BNNSNDArrayDescriptor **parameters, const BNNSNDArrayDescriptor **gradients, BNNSNDArrayDescriptor **accumulators, const BNNSFilterParameters *filter_params)
{
  return _BNNSOptimizerStep(function, OptimizerAlgFields, number_of_parameters, parameters, gradients, accumulators, filter_params);
}

uint64_t MGGetBoolAnswer()
{
  return _MGGetBoolAnswer();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this);
}

std::string::size_type std::string::rfind(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return std::string::rfind(this, __c, __pos);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return std::string::compare(this, __s);
}

uint64_t std::stringbuf::str()
{
  return std::stringbuf::str();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return std::locale::use_facet(this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return std::ios_base::getloc(this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return std::logic_error::logic_error(this, a2);
}

{
  return std::logic_error::logic_error(this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return std::logic_error::logic_error(this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return std::runtime_error::runtime_error(this, a2);
}

{
  return std::runtime_error::runtime_error(this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return std::runtime_error::runtime_error(this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return std::runtime_error::runtime_error(this, a2);
}

{
  return std::runtime_error::runtime_error(this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

{
  std::runtime_error::~runtime_error(this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return std::bad_array_new_length::bad_array_new_length(this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

size_t std::__next_prime(size_t __n)
{
  return std::__next_prime(__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return std::string::erase(this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return std::string::append(this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return std::string::append(this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return std::string::assign(this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return std::string::insert(this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return std::string::insert(this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return std::string::basic_string(this, __str, __pos, __n, __a);
}

void std::string::~string(std::string *this)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return std::string::operator=(this, __str);
}

uint64_t std::filebuf::open()
{
  return std::filebuf::open();
}

uint64_t std::filebuf::close()
{
  return std::filebuf::close();
}

uint64_t std::filebuf::basic_filebuf()
{
  return std::filebuf::basic_filebuf();
}

uint64_t std::filebuf::~filebuf()
{
  return std::filebuf::~filebuf();
}

uint64_t std::istream::get()
{
  return std::istream::get();
}

uint64_t std::istream::peek()
{
  return std::istream::peek();
}

uint64_t std::istream::read()
{
  return std::istream::read();
}

uint64_t std::istream::seekg()
{
  return std::istream::seekg();
}

uint64_t std::istream::tellg()
{
  return std::istream::tellg();
}

uint64_t std::istream::unget()
{
  return std::istream::unget();
}

uint64_t std::istream::sentry::sentry()
{
  return std::istream::sentry::sentry();
}

uint64_t std::istream::getline()
{
  return std::istream::getline();
}

uint64_t std::istream::~istream()
{
  return std::istream::~istream();
}

uint64_t std::istream::operator>>()
{
  return std::istream::operator>>();
}

{
  return std::istream::operator>>();
}

{
  return std::istream::operator>>();
}

{
  return std::istream::operator>>();
}

{
  return std::istream::operator>>();
}

uint64_t std::ostream::put()
{
  return std::ostream::put();
}

uint64_t std::ostream::flush()
{
  return std::ostream::flush();
}

uint64_t std::ostream::write()
{
  return std::ostream::write();
}

uint64_t std::ostream::sentry::sentry()
{
  return std::ostream::sentry::sentry();
}

uint64_t std::ostream::sentry::~sentry()
{
  return std::ostream::sentry::~sentry();
}

uint64_t std::ostream::~ostream()
{
  return std::ostream::~ostream();
}

uint64_t std::ostream::operator<<()
{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

uint64_t std::ifstream::open()
{
  return std::ifstream::open();
}

uint64_t std::iostream::~basic_iostream()
{
  return std::iostream::~basic_iostream();
}

uint64_t std::streambuf::basic_streambuf()
{
  return std::streambuf::basic_streambuf();
}

uint64_t std::streambuf::~streambuf()
{
  return std::streambuf::~streambuf();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

uintmax_t std::__fs::filesystem::__remove_all(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return std::__fs::filesystem::__remove_all(a1, __ec);
}

BOOL std::__fs::filesystem::__create_directory(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  return std::__fs::filesystem::__create_directory(a1, a2);
}

void std::__fs::filesystem::__copy(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt, std::error_code *__ec)
{
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return std::__fs::filesystem::__status(a1, __ec);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

uint64_t std::__sort<std::__less<char,char> &,char *>()
{
  return std::__sort<std::__less<char,char> &,char *>();
}

uint64_t std::__sort<std::__less<double,double> &,double *>()
{
  return std::__sort<std::__less<double,double> &,double *>();
}

uint64_t std::__sort<std::__less<float,float> &,float *>()
{
  return std::__sort<std::__less<float,float> &,float *>();
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return std::__sort<std::__less<int,int> &,int *>();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return std::chrono::steady_clock::now();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return std::locale::locale(this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return std::locale::locale(this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return std::ios::~ios();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return std::to_string(retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return std::to_string(retstr, __val);
}

uint64_t std::operator+<char>()
{
  return std::operator+<char>();
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return std::bad_alloc::bad_alloc(this);
}

void std::exception::~exception(std::exception *this)
{
}

BOOL std::uncaught_exception(void)
{
  return std::uncaught_exception();
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return ___cxa_allocate_exception(thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return ___cxa_atexit(lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return ___cxa_begin_catch(a1);
}

char *__cxa_demangle(const char *lpmangled, char *lpout, size_t *lpoutlen, int *lpstatus)
{
  return ___cxa_demangle(lpmangled, lpout, lpoutlen, lpstatus);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return ___cxa_guard_acquire((uint64_t *)a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)___dynamic_cast(lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return ___error();
}

double __exp10(double a1)
{
  return ___exp10(a1);
}

float __exp10f(float a1)
{
  return ___exp10f(a1);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return ___maskrune(a1, a2);
}

__float2 __sincosf_stret(float a1)
{
  __float2 v3 = ___sincosf_stret(a1);
  float cosval = v3.__cosval;
  float sinval = v3.__sinval;
  result.__float cosval = cosval;
  result.__float sinval = sinval;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return ___tolower(a1);
}

uint64_t _get_cpu_capabilities()
{
  return __get_cpu_capabilities();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

int backtrace(void **a1, int a2)
{
  return _backtrace(a1, a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return _backtrace_symbols(a1, a2);
}

void bzero(void *a1, size_t a2)
{
}

void cblas_daxpy(const int __N, const double __alpha, const double *__X, const int __incX, double *__Y, const int __incY)
{
}

double cblas_ddot(const int __N, const double *__X, const int __incX, const double *__Y, const int __incY)
{
  return _cblas_ddot(__N, __X, __incX, __Y, __incY);
}

void cblas_dscal(const int __N, const double __alpha, double *__X, const int __incX)
{
}

int cblas_isamax(const int __N, const float *__X, const int __incX)
{
  return _cblas_isamax(__N, __X, __incX);
}

float cblas_sasum(const int __N, const float *__X, const int __incX)
{
  return _cblas_sasum(__N, __X, __incX);
}

void cblas_saxpy(const int __N, const float __alpha, const float *__X, const int __incX, float *__Y, const int __incY)
{
}

void cblas_scopy(const int __N, const float *__X, const int __incX, float *__Y, const int __incY)
{
}

float cblas_sdot(const int __N, const float *__X, const int __incX, const float *__Y, const int __incY)
{
  return _cblas_sdot(__N, __X, __incX, __Y, __incY);
}

void cblas_sgbmv(const CBLAS_ORDER __Order, const CBLAS_TRANSPOSE __TransA, const int __M, const int __N, const int __KL, const int __KU, const float __alpha, const float *__A, const int __lda, const float *__X, const int __incX, const float __beta, float *__Y, const int __incY)
{
}

void cblas_sgemm(const CBLAS_ORDER __Order, const CBLAS_TRANSPOSE __TransA, const CBLAS_TRANSPOSE __TransB, const int __M, const int __N, const int __K, const float __alpha, const float *__A, const int __lda, const float *__B, const int __ldb, const float __beta, float *__C, const int __ldc)
{
}

void cblas_sgemv(const CBLAS_ORDER __Order, const CBLAS_TRANSPOSE __TransA, const int __M, const int __N, const float __alpha, const float *__A, const int __lda, const float *__X, const int __incX, const float __beta, float *__Y, const int __incY)
{
}

void cblas_sger(const CBLAS_ORDER __Order, const int __M, const int __N, const float __alpha, const float *__X, const int __incX, const float *__Y, const int __incY, float *__A, const int __lda)
{
}

float cblas_snrm2(const int __N, const float *__X, const int __incX)
{
  return _cblas_snrm2(__N, __X, __incX);
}

void cblas_sscal(const int __N, const float __alpha, float *__X, const int __incX)
{
}

clock_t clock(void)
{
  return _clock();
}

long double cos(long double __x)
{
  return _cos(__x);
}

float cosf(float a1)
{
  return _cosf(a1);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return _dlopen(__path, __mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

uint64_t espresso_buffer_get_count()
{
  return _espresso_buffer_get_count();
}

uint64_t espresso_buffer_pack_tensor_shape()
{
  return _espresso_buffer_pack_tensor_shape();
}

uint64_t espresso_buffer_set_rank()
{
  return _espresso_buffer_set_rank();
}

uint64_t espresso_context_destroy()
{
  return _espresso_context_destroy();
}

uint64_t espresso_create_context()
{
  return _espresso_create_context();
}

uint64_t espresso_create_plan()
{
  return _espresso_create_plan();
}

uint64_t espresso_get_status_string()
{
  return _espresso_get_status_string();
}

uint64_t espresso_network_bind_buffer()
{
  return _espresso_network_bind_buffer();
}

uint64_t espresso_network_change_blob_shape()
{
  return _espresso_network_change_blob_shape();
}

uint64_t espresso_network_change_input_blob_shapes_seq_rank()
{
  return _espresso_network_change_input_blob_shapes_seq_rank();
}

uint64_t espresso_network_declare_output()
{
  return _espresso_network_declare_output();
}

uint64_t espresso_plan_add_network()
{
  return _espresso_plan_add_network();
}

uint64_t espresso_plan_build()
{
  return _espresso_plan_build();
}

uint64_t espresso_plan_build_clean()
{
  return _espresso_plan_build_clean();
}

uint64_t espresso_plan_destroy()
{
  return _espresso_plan_destroy();
}

uint64_t espresso_plan_execute_sync()
{
  return _espresso_plan_execute_sync();
}

uint64_t espresso_set_mil_const_values()
{
  return _espresso_set_mil_const_values();
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  return _exp(__x);
}

float expf(float a1)
{
  return _expf(a1);
}

int fclose(FILE *a1)
{
  return _fclose(a1);
}

int fflush(FILE *a1)
{
  return _fflush(a1);
}

int fileno(FILE *a1)
{
  return _fileno(a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return _fopen(__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return _fputc(a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fread(__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return _fseek(a1, a2, a3);
}

int fseeko(FILE *__stream, off_t a2, int __whence)
{
  return _fseeko(__stream, a2, __whence);
}

off_t ftello(FILE *__stream)
{
  return _ftello(__stream);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fwrite(__ptr, __size, __nitems, __stream);
}

int getc(FILE *a1)
{
  return _getc(a1);
}

char *__cdecl getenv(const char *a1)
{
  return _getenv(a1);
}

uid_t getuid(void)
{
  return _getuid();
}

lconv *localeconv(void)
{
  return _localeconv();
}

long double log(long double __x)
{
  return _log(__x);
}

long double log10(long double __x)
{
  return _log10(__x);
}

float log10f(float a1)
{
  return _log10f(a1);
}

float log1pf(float a1)
{
  return _log1pf(a1);
}

long double log2(long double __x)
{
  return _log2(__x);
}

float logf(float a1)
{
  return _logf(a1);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return _lseek(a1, a2, a3);
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_posix_memalign(memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_valloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_valloc(size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return _memchr(__s, __c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

int munmap(void *a1, size_t a2)
{
  return _munmap(a1, a2);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return _os_signpost_enabled(log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return _os_signpost_id_generate(log);
}

int pclose(FILE *a1)
{
  return _pclose(a1);
}

FILE *__cdecl popen(const char *a1, const char *a2)
{
  return _popen(a1, a2);
}

long double pow(long double __x, long double __y)
{
  return _pow(__x, __y);
}

float powf(float a1, float a2)
{
  return _powf(a1, a2);
}

int printf(const char *a1, ...)
{
  return _printf(a1);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return _pthread_mutex_lock(a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return _pthread_mutex_unlock(a1);
}

int putchar(int a1)
{
  return _putchar(a1);
}

int rand_r(unsigned int *a1)
{
  return _rand_r(a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return _read(a1, a2, a3);
}

long double sin(long double __x)
{
  return _sin(__x);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return _sprintf(a1, a2);
}

void srand(unsigned int a1)
{
}

int strcasecmp(const char *a1, const char *a2)
{
  return _strcasecmp(a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return _strchr(__s, __c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

char *__cdecl strpbrk(char *__s1, const char *__s2)
{
  return _strpbrk(__s1, __s2);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return _strrchr(__s, __c);
}

double strtod(const char *a1, char **a2)
{
  return _strtod(a1, a2);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return _strtoll(__str, __endptr, __base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return _strtoull(__str, __endptr, __base);
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

int ungetc(int a1, FILE *a2)
{
  return _ungetc(a1, a2);
}

void vDSP_convD(const double *__A, vDSP_Stride __IA, const double *__F, vDSP_Stride __IF, double *__C, vDSP_Stride __IC, vDSP_Length __N, vDSP_Length __P)
{
}

FFTSetupD vDSP_create_fftsetupD(vDSP_Length __Log2n, FFTRadix __Radix)
{
  return _vDSP_create_fftsetupD(__Log2n, __Radix);
}

void vDSP_ctozD(const DSPDoubleComplex *__C, vDSP_Stride __IC, const DSPDoubleSplitComplex *__Z, vDSP_Stride __IZ, vDSP_Length __N)
{
}

void vDSP_destroy_fftsetupD(FFTSetupD __setup)
{
}

void vDSP_dotprD(const double *__A, vDSP_Stride __IA, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Length __N)
{
}

void vDSP_fft_zripD(FFTSetupD __Setup, const DSPDoubleSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __Log2N, FFTDirection __Direction)
{
}

void vDSP_maxmgv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_maxvD(const double *__A, vDSP_Stride __I, double *__C, vDSP_Length __N)
{
}

void vDSP_meanvD(const double *__A, vDSP_Stride __IA, double *__C, vDSP_Length __N)
{
}

void vDSP_measqv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_vclr(float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vmulD(const double *__A, vDSP_Stride __IA, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return _vasprintf(a1, a2, a3);
}

void vvexpf(float *a1, const float *a2, const int *a3)
{
}

void vvlog(double *a1, const double *a2, const int *a3)
{
}

void vvlogf(float *a1, const float *a2, const int *a3)
{
}

void vvpowsf(float *a1, const float *a2, const float *a3, const int *a4)
{
}

void vvtanhf(float *a1, const float *a2, const int *a3)
{
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_assetLanguage(void *a1, const char *a2, ...)
{
  return _[a1 assetLanguage];
}

id objc_msgSend_assetName(void *a1, const char *a2, ...)
{
  return _[a1 assetName];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_cancelTask_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelTask:reply:");
}

id objc_msgSend_cleanUpTaskQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanUpTaskQueue:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_dataAssetPath(void *a1, const char *a2, ...)
{
  return _[a1 dataAssetPath];
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeDoubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeDoubleForKey:");
}

id objc_msgSend_decodeFloatForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeFloatForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeDouble_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeDouble:forKey:");
}

id objc_msgSend_encodeFloat_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeFloat:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_factor(void *a1, const char *a2, ...)
{
  return _[a1 factor];
}

id objc_msgSend_floatChannelData(void *a1, const char *a2, ...)
{
  return _[a1 floatChannelData];
}

id objc_msgSend_forceToStart(void *a1, const char *a2, ...)
{
  return _[a1 forceToStart];
}

id objc_msgSend_format(void *a1, const char *a2, ...)
{
  return _[a1 format];
}

id objc_msgSend_frameCapacity(void *a1, const char *a2, ...)
{
  return _[a1 frameCapacity];
}

id objc_msgSend_getAllAvailableLocales(void *a1, const char *a2, ...)
{
  return _[a1 getAllAvailableLocales];
}

id objc_msgSend_getAllTasksWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAllTasksWithReply:");
}

id objc_msgSend_getCurrentAssetVersion_name_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCurrentAssetVersion:name:reply:");
}

id objc_msgSend_getInstallingProgressBlockForAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getInstallingProgressBlockForAsset:");
}

id objc_msgSend_getRecordingMetadata_name_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRecordingMetadata:name:reply:");
}

id objc_msgSend_getTaskById_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTaskById:reply:");
}

id objc_msgSend_globallyUniqueString(void *a1, const char *a2, ...)
{
  return _[a1 globallyUniqueString];
}

id objc_msgSend_inferenceAssetPath(void *a1, const char *a2, ...)
{
  return _[a1 inferenceAssetPath];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initWithFactor_path_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFactor:path:metadata:");
}

id objc_msgSend_initWithMachServiceName_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:options:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithPaths_dataAssetPath_inferenceAssetPath_taskId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPaths:dataAssetPath:inferenceAssetPath:taskId:");
}

id objc_msgSend_installTrainingAsset_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installTrainingAsset:reply:");
}

id objc_msgSend_installableTrainingAssetsForLanguage_name_type_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installableTrainingAssetsForLanguage:name:type:reply:");
}

id objc_msgSend_installedTrainingAssetsForLanguage_name_type_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installedTrainingAssetsForLanguage:name:type:reply:");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _[a1 mainBundle];
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _[a1 metadata];
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _[a1 processInfo];
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_sampleRate(void *a1, const char *a2, ...)
{
  return _[a1 sampleRate];
}

id objc_msgSend_setAppId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppId:");
}

id objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClasses:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setInstallingProgressBlock_forAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInstallingProgressBlock:forAsset:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_startRequest_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startRequest:reply:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronousRemoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_taskId(void *a1, const char *a2, ...)
{
  return _[a1 taskId];
}

id objc_msgSend_taskMode(void *a1, const char *a2, ...)
{
  return _[a1 taskMode];
}

id objc_msgSend_taskStatus(void *a1, const char *a2, ...)
{
  return _[a1 taskStatus];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_trainerTaskEvent_currentValue_totalValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trainerTaskEvent:currentValue:totalValue:");
}

id objc_msgSend_trainingAssetPath(void *a1, const char *a2, ...)
{
  return _[a1 trainingAssetPath];
}

id objc_msgSend_trainingStatus(void *a1, const char *a2, ...)
{
  return _[a1 trainingStatus];
}

id objc_msgSend_uninstallTrainingAsset_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uninstallTrainingAsset:completion:");
}

id objc_msgSend_uninstallTrainingAsset_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uninstallTrainingAsset:reply:");
}