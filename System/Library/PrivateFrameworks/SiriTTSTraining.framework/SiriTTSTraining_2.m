void sub_121790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 89) < 0) {
    operator delete(*(void **)(v22 - 112));
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<InFeatureMaps>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<OutFeatureMaps>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PatchStep>", v10, v11);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SectionStep>", v12, v13);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SectionSize>", v14, v15);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FilterSize>", v16, v17);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<InSharedBands>", v18, v19);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolSize>", v20, v21);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolStep>", v22, v23);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v24, v25);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v26, v27);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v28, v29);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v30, v31);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 272), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v32, v33);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v34, v35);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_121A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(void *a1, void *a2, const char *a3, int a4)
{
  (*(void (**)(void *))(*a1 + 168))(a1);
  kaldi::WriteBasicType<char>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Filters>", v8, v9);
  v11 = (int *)a1[19];
  if (!v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", v10);
  }
  kaldi::QuantizedMatrix<signed char>::Write(v11, a2, (int)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Bias>", v12, v13);
  uint64_t v16 = (_DWORD *)a1[20];
  if (!v16) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.offset + 3, "bias_", v15);
  }

  kaldi::CuVectorBase<float>::Write(v16, a2, (int)a3, v14, v15);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  v6 = *(unsigned int **)(a1 + 152);
  if (!v6 || (v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6), (uint64_t v8 = *(void *)(a1 + 152)) == 0)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", a5);
  }
  int v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8);
  uint64_t v11 = *(void *)(a1 + 160);
  if (!v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.offset + 3, "bias_", v10);
  }
  return (*(_DWORD *)(v11 + 16) + v9 * v7);
}

_DWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  uint64_t v8 = (unsigned int *)a1[19];
  if (!v8) {
    goto LABEL_8;
  }
  int v9 = kaldi::QuantizedMatrixBase<short>::NumRows(v8);
  uint64_t v10 = a1[19];
  if (!v10) {
    goto LABEL_8;
  }
  unsigned int v11 = kaldi::QuantizedMatrixBase<short>::NumCols(v10) * v9;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (v11 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_9;
  }
  uint64_t v18 = *(void **)a2;
  LODWORD(v19) = v11;
  uint64_t v12 = (unsigned int *)a1[19];
  if (!v12) {
LABEL_8:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", v7);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v18, v12);
  v15 = (_DWORD *)a1[20];
  if (!v15) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.offset + 3, "bias_", v7);
  }
  int v16 = v15[4];
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (v16 + v11 > *(_DWORD *)(a2 + 8)) {
LABEL_9:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v7);
  uint64_t v18 = (void *)(*(void *)a2 + 4 * (int)v11);
  LODWORD(v19) = v16;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(v15, (uint64_t)&v18, v13, v14, v7);
}

_DWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(void *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(void *))(*a1 + 176))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)&stru_2E8.nreloc, "wei_src.Dim() == NumParams()", v5);
  }
  v6 = (unsigned int *)a1[19];
  if (!v6
    || (v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6), (uint64_t v8 = a1[19]) == 0)
    || (v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8), (uint64_t v10 = (unsigned int *)a1[19]) == 0))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v5);
  }
  int v11 = v9 * v7;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (v11 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_10;
  }
  v17 = *(char **)a2;
  LODWORD(v18) = v11;
  kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v10, &v17);
  uint64_t v14 = (_DWORD *)a1[20];
  if (!v14) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.align + 3, "bias_", v5);
  }
  int v15 = v14[4];
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if ((v15 + v11) > *(_DWORD *)(a2 + 8)) {
LABEL_10:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v5);
  v17 = (char *)(*(void *)a2 + 4 * v11);
  LODWORD(v18) = v15;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v14, (uint64_t)&v17, v12, v13, v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 312);
  unint64_t v3 = *(void *)(a1 + 320) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  v6 = *(int **)(a1 + 152);
  if (!v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", a5);
  }
  float v8 = kaldi::QuantizedMatrixBase<signed char>::Sum(v6, a2, a3, a4, a5);
  uint64_t v9 = *(void *)(a1 + 160);
  if (!v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.offset + 3, "bias_", v7);
  }
  float v10 = v8;
  double v11 = kaldi::CuVectorBase<float>::Sum(v9);
  return v10 + *(float *)&v11;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  v6 = *(unsigned int **)(a1 + 152);
  if (v6)
  {
    uint64_t v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
    uint64_t v8 = *(void *)(a1 + 152);
    if (v8)
    {
      uint64_t v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8);
      kaldi::CuMatrix<float>::CuMatrix((uint64_t)v11, v7, v9, 1u, 0, 0);
      kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v11);
      if (*(void *)(a1 + 152)) {
        kaldi::QuantizedMatrixBase<signed char>::AddMat();
      }
      kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v10);
    }
  }
  kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", a5);
}

void sub_122128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v32, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ParamsString(a1);
  if ((v31 & 0x80u) == 0) {
    unint64_t v4 = v30;
  }
  else {
    unint64_t v4 = (void **)v30[0];
  }
  if ((v31 & 0x80u) == 0) {
    std::string::size_type v5 = v31;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v30[1];
  }
  v6 = std::string::append(&v32, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v33, "\n  filters");
  long long v10 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v10;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  double v11 = *(unsigned int **)(a1 + 152);
  if (!v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", v9);
  }
  kaldi::nnet1::MomentStatistics<signed char>(v11);
  if ((v29 & 0x80u) == 0) {
    uint64_t v12 = v28;
  }
  else {
    uint64_t v12 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v13 = v29;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v28[1];
  }
  uint64_t v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  int v16 = std::string::append(&v35, "\n  bias");
  long long v21 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v21;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v22 = *(_DWORD **)(a1 + 160);
  if (!v22) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.offset + 3, "bias_", v20);
  }
  kaldi::nnet1::MomentStatistics<float>(v22, v17, v18, v19, v20);
  if ((v27 & 0x80u) == 0) {
    v23 = __p;
  }
  else {
    v23 = (void **)__p[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v24 = v27;
  }
  else {
    std::string::size_type v24 = (std::string::size_type)__p[1];
  }
  v25 = std::string::append(&v36, (const std::string::value_type *)v23, v24);
  *a2 = *v25;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if ((char)v27 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if ((char)v29 < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if ((char)v31 < 0) {
    operator delete(v30[0]);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_12238C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v45 - 41) < 0) {
    operator delete(*(void **)(v45 - 64));
  }
  if (*(char *)(v45 - 73) < 0) {
    operator delete(*(void **)(v45 - 96));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ParamsString(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 168))(a1, v4, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" , # of sections: ", 18);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", section size after pooling: ", 30);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1225DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v57, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ParamsString(a1);
  if ((v56 & 0x80u) == 0) {
    unint64_t v4 = v55;
  }
  else {
    unint64_t v4 = (void **)v55[0];
  }
  if ((v56 & 0x80u) == 0) {
    std::string::size_type v5 = v56;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v55[1];
  }
  v6 = std::string::append(&v57, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v58, "\n  filters_grad");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 168), v10, v11, v12, v13);
  if ((v54 & 0x80u) == 0) {
    uint64_t v14 = v53;
  }
  else {
    uint64_t v14 = (void **)v53[0];
  }
  if ((v54 & 0x80u) == 0) {
    std::string::size_type v15 = v54;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)v53[1];
  }
  int v16 = std::string::append(&v59, (const std::string::value_type *)v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v18 = std::string::append(&v60, ", lr-coef ");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v52 & 0x80u) == 0) {
    uint64_t v20 = v51;
  }
  else {
    uint64_t v20 = (void **)v51[0];
  }
  if ((v52 & 0x80u) == 0) {
    std::string::size_type v21 = v52;
  }
  else {
    std::string::size_type v21 = (std::string::size_type)v51[1];
  }
  uint64_t v22 = std::string::append(&v61, (const std::string::value_type *)v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v24 = std::string::append(&v62, ", max-norm ");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v50 & 0x80u) == 0) {
    uint64_t v26 = v49;
  }
  else {
    uint64_t v26 = (void **)v49[0];
  }
  if ((v50 & 0x80u) == 0) {
    std::string::size_type v27 = v50;
  }
  else {
    std::string::size_type v27 = (std::string::size_type)v49[1];
  }
  uint64_t v28 = std::string::append(&v63, (const std::string::value_type *)v26, v27);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  uint64_t v30 = std::string::append(&v64, "\n  bias_grad");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 192), v32, v33, v34, v35);
  if ((v48 & 0x80u) == 0) {
    std::string v36 = v47;
  }
  else {
    std::string v36 = (void **)v47[0];
  }
  if ((v48 & 0x80u) == 0) {
    std::string::size_type v37 = v48;
  }
  else {
    std::string::size_type v37 = (std::string::size_type)v47[1];
  }
  v38 = std::string::append(&v65, (const std::string::value_type *)v36, v37);
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v40 = std::string::append(&v66, ", lr-coef ");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v46 & 0x80u) == 0) {
    v42 = __p;
  }
  else {
    v42 = (void **)__p[0];
  }
  if ((v46 & 0x80u) == 0) {
    std::string::size_type v43 = v46;
  }
  else {
    std::string::size_type v43 = (std::string::size_type)__p[1];
  }
  v44 = std::string::append(&v67, (const std::string::value_type *)v42, v43);
  *a2 = *v44;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if ((char)v46 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if ((char)v48 < 0) {
    operator delete(v47[0]);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if ((char)v50 < 0) {
    operator delete(v49[0]);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if ((char)v52 < 0) {
    operator delete(v51[0]);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if ((char)v54 < 0) {
    operator delete(v53[0]);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if ((char)v56 < 0) {
    operator delete(v55[0]);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
}

void sub_1229C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v73 - 57) < 0) {
    operator delete(*(void **)(v73 - 80));
  }
  if (*(char *)(v73 - 89) < 0) {
    operator delete(*(void **)(v73 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v73 - 121) < 0) {
    operator delete(*(void **)(v73 - 144));
  }
  if (*(char *)(v73 - 153) < 0) {
    operator delete(*(void **)(v73 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v73 - 185) < 0) {
    operator delete(*(void **)(v73 - 208));
  }
  if (*(char *)(v73 - 217) < 0) {
    operator delete(*(void **)(v73 - 240));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  _Unwind_Resume(a1);
}

void sub_122B24()
{
}

void sub_122B2C()
{
}

void sub_122B34()
{
}

void sub_122B3C()
{
}

void sub_122B44()
{
}

void sub_122B4C()
{
}

void sub_122B54()
{
}

void sub_122B5C()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFncDirect(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  if (*(int *)(a1 + 128) <= 0) {
    float v8 = 0.0;
  }
  else {
    float v8 = 1.0;
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 384) + 48 * a4, *(unsigned int *)(a2 + 20), (*(_DWORD *)(a1 + 108) * *(_DWORD *)(a1 + 120)), 3u, 0);
  if (*(int *)(a1 + 144) >= 1)
  {
    int v9 = 0;
    do
    {
      int v10 = *(_DWORD *)(a1 + 120);
      if (*(int *)(a1 + 128) >= 1)
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v45, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(v10 * v9 * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v42, a2, 0, *(_DWORD *)(a2 + 20), (const char *)(*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 140)), *(_DWORD *)(a1 + 128) * *(_DWORD *)(a1 + 104));
        uint64_t v12 = *(void *)(a1 + 152);
        if (!v12) {
          kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v11);
        }
        kaldi::QuantizedMatrixBase<signed char>::Range(v12, *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 124), *(_DWORD *)(a1 + 128) * *(_DWORD *)(a1 + 104), *(_DWORD *)(a1 + 108) * v9, *(_DWORD *)(a1 + 108), (uint64_t)&v39);
        kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v45, (uint64_t)&v42, 111, (unsigned int *)&v39, &stru_68.sectname[7], 1.0, 0.0);
        int v13 = *(_DWORD *)(a1 + 120);
        if (v13 >= 2)
        {
          for (int i = 1; i < v13; ++i)
          {
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v36, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(a1 + 108) * (i + v9 * v13)), *(_DWORD *)(a1 + 108));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v36, (uint64_t)&v45, 111, v15, v16);
            std::string v36 = off_262D80;
            long long v37 = 0u;
            long long v38 = 0u;
            fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v36);
            int v13 = *(_DWORD *)(a1 + 120);
          }
        }
        kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)&v39);
        v42 = off_262D80;
        long long v43 = 0u;
        long long v44 = 0u;
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v42);
        uint64_t v45 = off_262D80;
        long long v46 = 0u;
        long long v47 = 0u;
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v45);
        int v10 = *(_DWORD *)(a1 + 120);
      }
      if (v10 >= 1)
      {
        int v17 = 0;
        do
        {
          uint64_t v18 = *(void *)(a1 + 384) + 48 * a4;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v45, v18, 0, *(_DWORD *)(v18 + 20), (const char *)(*(_DWORD *)(a1 + 108) * v17), *(_DWORD *)(a1 + 108));
          uint64_t v20 = *(void *)(a1 + 160);
          if (!v20) {
            kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.align + 3, "bias_", v19);
          }
          kaldi::CuSubVector<float>::CuSubVector(&v39, v20, *(_DWORD *)(a1 + 108) * v9, *(_DWORD *)(a1 + 108), v19);
          kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v45, (uint64_t)&v39, v21, v22, v23, 1.0, v8);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v42, a2, 0, *(_DWORD *)(a2 + 20), (const char *)((*(_DWORD *)(a1 + 116) * v9 + *(_DWORD *)(a1 + 112) * v17)* *(_DWORD *)(a1 + 104)), *(_DWORD *)(a1 + 124) * *(_DWORD *)(a1 + 104));
          uint64_t v25 = *(void *)(a1 + 152);
          if (!v25) {
            kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v24);
          }
          kaldi::QuantizedMatrixBase<signed char>::Range(v25, 0, *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 124), *(_DWORD *)(a1 + 108) * v9, *(_DWORD *)(a1 + 108), (uint64_t)&v39);
          kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v45, (uint64_t)&v42, 111, (unsigned int *)&v39, &stru_68.sectname[7], 1.0, 1.0);
          kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)&v39);
          v42 = off_262D80;
          long long v43 = 0u;
          long long v44 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v42);
          uint64_t v45 = off_262D80;
          long long v46 = 0u;
          long long v47 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v45);
          ++v17;
        }
        while (v17 < *(_DWORD *)(a1 + 120));
      }
      int v26 = *(_DWORD *)(a1 + 148);
      if (v26 >= 1)
      {
        for (int j = 0; j < v26; ++j)
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v39, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(a1 + 108) * (j + v26 * v9)), *(_DWORD *)(a1 + 108));
          uint64_t v28 = *(void *)(a1 + 384) + 48 * a4;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v45, v28, 0, *(_DWORD *)(v28 + 20), (const char *)(*(_DWORD *)(a1 + 136) * j * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v39, (uint64_t)&v45, 111, v29, v30);
          uint64_t v45 = off_262D80;
          long long v46 = 0u;
          long long v47 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v45);
          if (*(int *)(a1 + 132) >= 2)
          {
            int v31 = 1;
            do
            {
              uint64_t v32 = *(void *)(a1 + 384) + 48 * a4;
              kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v45, v32, 0, *(_DWORD *)(v32 + 20), (const char *)((v31 + j * *(_DWORD *)(a1 + 136)) * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
              kaldi::CuMatrixBase<float>::Max((uint64_t)&v39, (uint64_t)&v45, v33, v34, v35);
              uint64_t v45 = off_262D80;
              long long v46 = 0u;
              long long v47 = 0u;
              fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v45);
              ++v31;
            }
            while (v31 < *(_DWORD *)(a1 + 132));
          }
          long long v39 = off_262D80;
          long long v40 = 0u;
          long long v41 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v39);
          int v26 = *(_DWORD *)(a1 + 148);
        }
      }
      ++v9;
    }
    while (v9 < *(_DWORD *)(a1 + 144));
  }
}

void sub_1230E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void (**a24)())
{
  a24 = off_262D80;
  *a12 = 0u;
  a12[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a24);
  *(void *)(v25 - 144) = off_262D80;
  *std::string::size_type v24 = 0u;
  v24[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v25 - 144);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 596);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Backpropagation of CNN ConvolutionalMaxPoolingComponent is not supported for quantized weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 640);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not supported for quantized weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 687);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v43, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v42, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, unsigned char *, void))(*(void *)v8 + 112))(v8, a2, v43, 0);
  (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, unsigned char *, void))(*(void *)v8 + 128))(v8, a2, v43, a3, v42, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v8 + 232))(v8, a2, a3, 0, 0);
  int v10 = (unsigned int *)a1[19];
  if (!v10 || (v11 = kaldi::QuantizedMatrixBase<short>::NumRows(v10), (uint64_t v12 = a1[19]) == 0)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", v9);
  }
  int v13 = kaldi::QuantizedMatrixBase<short>::NumCols(v12);
  uint64_t v14 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v14, 1, v15, v16);
  int v20 = v13 * v11;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  if (v20 > *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v19);
  }
  long long v39 = *(void **)a4;
  LODWORD(v40) = v20;
  uint64_t v21 = (_DWORD *)kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(v8, 0, v17, v18, v19);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v39, v21, v22, v23, v24);
  uint64_t v28 = a1[20];
  if (!v28)
  {
    std::string v35 = "bias_";
    std::string v36 = (unsigned char *)(&stru_B8 + 51);
    long long v37 = "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h";
    long long v38 = "Bias";
    goto LABEL_11;
  }
  int v29 = *(_DWORD *)(v28 + 16);
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  if ((v29 + v20) > *(_DWORD *)(a4 + 8))
  {
    std::string v35 = "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMa"
          "trixIndexT>(t.Dim())";
    std::string v36 = (char *)&stru_1F8.size + 6;
    long long v37 = "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h";
    long long v38 = "SubVector";
LABEL_11:
    kaldi::KaldiAssertFailure_((kaldi *)v38, v37, v36, v35, v27);
  }
  long long v39 = (void *)(*(void *)a4 + 4 * v20);
  LODWORD(v40) = v29;
  uint64_t v30 = (_DWORD *)kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(v8, 0, v25, v26, v27);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v30, (uint64_t)&v39, v31, v32, v33);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v42);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v43);
}

void sub_12362C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 276) = a3;
  *(_DWORD *)(result + 272) = a2;
  *(unsigned char *)(result + 480) = 0;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7 = a6;
  int v9 = *(_DWORD *)(a1 + 272);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      uint64_t v16 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v16, *(void *)(a1 + 216) + 48 * a2, v7);
      uint64_t v20 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v17, v18, v19);
      uint64_t v24 = *(void *)(a1 + 240) + 32 * a2;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v20, v24, v7, v21, v22, v23);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      uint64_t v25 = a2;
      if (*(unsigned char *)(a1 + 84)) {
        float v7 = (float)*(int *)(*(void *)(a1 + 288) + 4 * a2) * a6;
      }
      uint64_t v26 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v26, (unsigned int *)(*(void *)(a1 + 216) + 48 * (int)v25), v7, v27, v28, v29);
      uint64_t v33 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v30, v31, v32);
      long long v37 = (_DWORD *)(*(void *)(a1 + 240) + 32 * v25);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v33, v37, v34, v35, v36, v7);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    if (*(unsigned char *)(a1 + 84)) {
      float v7 = (float)*(int *)(*(void *)(a1 + 288) + 4 * a2) * a6;
    }
    uint64_t v10 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v10, v7);
    uint64_t v14 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v11, v12, v13);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v14, v7);
  }
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  uint64_t v7 = *(void *)(a1 + 160);
  if (!v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.align + 3, "bias_", v6);
  }
  uint64_t v8 = *(unsigned int **)(a1 + 152);
  if (!v8
    || (int v9 = *(_DWORD *)(v7 + 16),
        int v10 = kaldi::QuantizedMatrixBase<short>::NumRows(v8),
        (uint64_t v11 = *(void *)(a1 + 152)) == 0))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v6);
  }
  uint64_t result = kaldi::QuantizedMatrixBase<short>::NumCols(v11);
  *a3 = v9 + result * v10;
  uint64_t v16 = *(void *)(a1 + 176) - *(void *)(a1 + 168);
  if (v16)
  {
    uint64_t v17 = *(void *)(a1 + 200) - *(void *)(a1 + 192);
    if (v17)
    {
      uint64_t v18 = v16 >> 3;
      if (*(_DWORD *)(a1 + 80) == 1) {
        int v19 = 0;
      }
      else {
        int v19 = *(_DWORD *)(a1 + 80);
      }
      if (v18 - 1 != v19 || (v17 >> 3) - 1 != v19)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 883);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Unexpected mismatch in indexes: ", 32);
        uint64_t v30 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"  ", 2);
        uint64_t v31 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"  ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
      }
      uint64_t v20 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, v19, v13, v14, v15);
      int v25 = kaldi::CuMatrixBase<float>::CountZeros(v20, v21, v22, v23, v24);
      uint64_t v29 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, v19, v26, v27, v28);
      uint64_t result = kaldi::CuVectorBase<float>::CountZeros(v29);
      LODWORD(v17) = result + v25;
    }
  }
  else
  {
    LODWORD(v17) = 0;
  }
  *a2 = v17;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(uint64_t a1)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  if (!*(unsigned char *)(a1 + 480))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 408), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 360), v3);
    std::vector<BOOL>::resize(a1 + 456, v3, 0);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 168), v3);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 192), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 216), v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 240), v3);
    if (v3 >= 1) {
      operator new();
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 288), v3);
    *(unsigned char *)(a1 + 480) = 1;
  }
}

void sub_123D18()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 908);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void sub_123DF8()
{
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

void sub_123E6C()
{
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

double kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = off_26E7B8;
  *(_OWORD *)(a1 + 56) = xmmword_20CEC0;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_268578;
  *(void *)(a1 + 88) = off_2686B0;
  *(void *)(a1 + 96) = off_2686D8;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 264) = _D1;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 276) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  return result;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_268578;
  *(void *)(a1 + 88) = off_2686B0;
  *(void *)(a1 + 96) = off_2686D8;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 168), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 192), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 216), *(void *)(a2 + 216), *(void *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 4));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 240), *(void *)(a2 + 240), *(void *)(a2 + 248), (uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 5);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 288), *(const void **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 2);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 312), *(const void **)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 2);
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "ConvolutionalMaxPoolingComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 76);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  if (*(void *)(a2 + 152)) {
    operator new();
  }
  if (*(void *)(a2 + 160)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 176);
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a2 + 168) + 8 * v8);
      if (v9) {
        kaldi::NewCuSubOrMat<float>(v9, *(unsigned __int8 *)(a1 + 16));
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  uint64_t v11 = *(void *)(a1 + 192);
  uint64_t v10 = *(void *)(a1 + 200);
  if (v10 != v11)
  {
    unint64_t v12 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 192) + 8 * v12)) {
        kaldi::NewCuSubOrVec<float>();
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  if (*(void *)(a2 + 496) != *(void *)(a2 + 488)) {
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator((void *)a1, (uint64_t *)(a1 + 488));
  }
  return a1;
}

void sub_12449C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, uint64_t a14, uint64_t a15, void *a16)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  int v19 = (void *)*((void *)v16 + 57);
  if (v19) {
    operator delete(v19);
  }
  a16 = (void *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v20 = *a12;
  if (*a12)
  {
    *((void *)v16 + 40) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *a13;
  if (*a13)
  {
    *((void *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v22 = *((void *)v16 + 20);
  *((void *)v16 + 20) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v18, 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a14);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(void *a1, uint64_t *a2)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs((uint64_t)a1);
  uint64_t v7 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad((uint64_t)a1, ((a1[22] - a1[21]) >> 3) - 1, v4, v5, v6);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  uint64_t v11 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad((uint64_t)a1, ((a1[25] - a1[24]) >> 3) - 1, v8, v9, v10);

  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v11);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  *(void *)a1 = off_268578;
  uint64_t v2 = a1 + 88;
  *(void *)(a1 + 88) = off_2686B0;
  uint64_t v3 = a1 + 96;
  *(void *)(a1 + 96) = off_2686D8;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 488));
  uint64_t v4 = *(void **)(a1 + 456);
  if (v4) {
    operator delete(v4);
  }
  uint64_t v8 = (void **)(a1 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(void *)(a1 + 320) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(void *)(a1 + 296) = v6;
    operator delete(v6);
  }
  uint64_t v8 = (void **)(a1 + 240);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 216);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 192);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 168);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v7 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1);

  operator delete();
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1 - 88);

  operator delete();
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1 - 96);

  operator delete();
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::Copy()
{
}

void sub_124954()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3, uint64_t a4, const char *a5)
{
  int v93 = 0x40000000;
  int v94 = -1073741824;
  int v92 = 1036831949;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  uint64_t v8 = (int *)(a1 + 116);
  *(void *)(a1 + 132) = 0x100000001;
  uint64_t v9 = (int *)(a1 + 132);
  int v91 = -1;
  memset(v90, 0, sizeof(v90));
  uint64_t v10 = a2 + 4;
  uint64_t v11 = (int *)(a1 + 280);
  v79 = (int *)(a1 + 128);
  v80 = (int *)(a1 + 264);
  unint64_t v12 = (int *)(a1 + 124);
  v77 = (int *)(a1 + 136);
  v78 = (int *)(a1 + 120);
  v81 = (int *)(a1 + 112);
  v82 = (int *)(a1 + 268);
  v83 = (int *)(a1 + 108);
  uint64_t v13 = (int *)(a1 + 104);
  while (1)
  {
    if ((*((unsigned char *)v10 + *(void *)(*a2 - 24)) & 2) != 0)
    {
      int v52 = *(_DWORD *)(a1 + 8);
      int v53 = *(_DWORD *)(a1 + 12);
      int v55 = *(_DWORD *)(a1 + 104);
      int v54 = *(_DWORD *)(a1 + 108);
      int v56 = *(_DWORD *)(a1 + 132);
      int v57 = v52 / v55 - *(_DWORD *)(a1 + 128);
      int v58 = *(_DWORD *)(a1 + 120);
      int v59 = *(_DWORD *)(a1 + 136);
      int v60 = (v58 - v56) / v59 + 1;
      *(_DWORD *)(a1 + 148) = v60;
      int v61 = v54 * v60;
      int v62 = v53 / v61;
      *(_DWORD *)(a1 + 140) = v57;
      *(_DWORD *)(a1 + 144) = v53 / v61;
      if (v56 >= 1 && v58 >= v56)
      {
        if (v59 > 0)
        {
          if (v53 == v61 * v62)
          {
            if (v52 == v52 / v55 * v55)
            {
              if (*v12 + *v81 * (v58 - 1) + *v8 * (v62 - 1) <= v57)
              {
                if (v91 >= 1) {
                  kaldi::UniformRandomNumber::SetRandomSeeds(a3, v91);
                }
                kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v88, a3);
                kaldi::Matrix<float>::Matrix((uint64_t)&v84, ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104)), (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108)), 0, 0);
                for (int i = 0; i < (int)kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)&v84); ++i)
                {
                  for (unint64_t j = 0;
                        (uint64_t)j < (int)kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)&v84);
                        ++j)
                  {
                    float v68 = *(float *)&v92;
                    kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v88, 0, v65, v66, v67);
                    if (v86 <= i || j >= v85) {
                      kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v69);
                    }
                    *(float *)(v84 + 4 * i * v87 + 4 * j) = v68 * v70;
                  }
                }
                if (!*(void *)(a1 + 152)) {
                  operator new();
                }
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 275);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"pointer is thought to be un-initialized here", 44);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
              }
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 261);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: too few input bands to compute the output", 75);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
            }
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 257);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: input dim mismatch", 52);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
          }
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 254);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: output dim mismatch", 53);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
        }
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 251);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: Max pooling step must be >= 1", 63);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 249);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: Invalid max pooling size", 58);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v90, a4, a5);
    if ((SHIBYTE(v90[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v90[2]))
      {
        case 9:
          goto LABEL_78;
        case 0xA:
          if (v90[0] == 0x61654D736169423CLL && LOWORD(v90[1]) == 15982) {
            goto LABEL_165;
          }
          BOOL v17 = v90[0] == 0x7A69536C6F6F503CLL && LOWORD(v90[1]) == 15973;
          uint64_t v18 = v9;
          if (v17) {
            goto LABEL_162;
          }
          BOOL v19 = v90[0] == 0x6574536C6F6F503CLL && LOWORD(v90[1]) == 15984;
          uint64_t v18 = v77;
          if (v19) {
            goto LABEL_162;
          }
          if ((v90[2] & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
LABEL_77:
          if (HIBYTE(v90[2]) != 9) {
            goto LABEL_189;
          }
LABEL_78:
          BOOL v35 = v90[0] == 0x6D726F4E78614D3CLL && LOBYTE(v90[1]) == 62;
          uint64_t v30 = v11;
          if (v35) {
            goto LABEL_166;
          }
          if ((v90[2] & 0x8000000000000000) != 0) {
            goto LABEL_83;
          }
          goto LABEL_189;
        case 0xB:
          if (v90[0] == 0x6E6152736169423CLL && *(void *)((char *)v90 + 3) == 0x3E65676E61527361) {
            goto LABEL_164;
          }
          BOOL v32 = v90[0] == 0x745368637461503CLL && *(void *)((char *)v90 + 3) == 0x3E70657453686374;
          goto LABEL_110;
        case 0xC:
          BOOL v36 = v90[0] == 0x537265746C69463CLL && LODWORD(v90[1]) == 1046837865;
          uint64_t v18 = v12;
          if (!v36) {
            goto LABEL_88;
          }
          goto LABEL_162;
        case 0xD:
          if (v90[0] == 0x74536D617261503CLL && *(void *)((char *)v90 + 5) == 0x3E7665646474536DLL) {
            goto LABEL_163;
          }
          BOOL v25 = v90[0] == 0x6E6F69746365533CLL && *(void *)((char *)v90 + 5) == 0x3E706574536E6F69;
          uint64_t v18 = v8;
          if (v25) {
            goto LABEL_162;
          }
          BOOL v26 = v90[0] == 0x6E6F69746365533CLL && *(void *)((char *)v90 + 5) == 0x3E657A69536E6F69;
          goto LABEL_123;
        case 0xF:
          BOOL v27 = v90[0] == 0x75746165466E493CLL && *(void *)((char *)v90 + 7) == 0x3E7370614D657275;
          uint64_t v18 = v13;
          if (v27) {
            goto LABEL_162;
          }
          BOOL v28 = v90[0] == 0x65726168536E493CLL && *(void *)((char *)v90 + 7) == 0x3E73646E61426465;
          uint64_t v18 = v79;
          if (v28) {
            goto LABEL_162;
          }
          BOOL v29 = v90[0] == 0x61526E7261654C3CLL && *(void *)((char *)v90 + 7) == 0x3E66656F43657461;
          uint64_t v30 = v80;
          if (v29) {
            goto LABEL_166;
          }
          if (HIBYTE(v90[2]) == 9) {
            goto LABEL_78;
          }
          if (HIBYTE(v90[2]) != 12) {
            goto LABEL_189;
          }
LABEL_88:
          long long v37 = v90;
          goto LABEL_156;
        case 0x10:
          BOOL v38 = v90[0] == 0x7461654674754F3CLL && v90[1] == 0x3E7370614D657275;
          goto LABEL_101;
        case 0x13:
          BOOL v34 = v90[0] == 0x61654C736169423CLL
             && v90[1] == 0x6F43657461526E72
             && *(void *)((char *)&v90[1] + 3) == 0x3E66656F43657461;
          uint64_t v30 = v82;
          if (v34) {
            goto LABEL_166;
          }
          if (HIBYTE(v90[2]) != 12) {
            goto LABEL_77;
          }
          goto LABEL_88;
        default:
          goto LABEL_189;
      }
    }
    uint64_t v20 = v90[1];
    switch(v90[1])
    {
      case 0xALL:
        if (*(void *)v90[0] == 0x61654D736169423CLL && *(_WORD *)(v90[0] + 8) == 15982)
        {
LABEL_165:
          uint64_t v30 = &v94;
        }
        else
        {
          BOOL v22 = *(void *)v90[0] == 0x7A69536C6F6F503CLL && *(_WORD *)(v90[0] + 8) == 15973;
          uint64_t v18 = v9;
          if (v22) {
            goto LABEL_162;
          }
          if (v90[1] == 10)
          {
            BOOL v23 = *(void *)v90[0] == 0x6574536C6F6F503CLL && *(_WORD *)(v90[0] + 8) == 15984;
            uint64_t v18 = v77;
            if (v23) {
              goto LABEL_162;
            }
LABEL_33:
            uint64_t v20 = v90[1];
          }
LABEL_34:
          if (v20 == 15)
          {
LABEL_133:
            BOOL v45 = *(void *)v90[0] == 0x61526E7261654C3CLL && *(void *)(v90[0] + 7) == 0x3E66656F43657461;
            uint64_t v30 = v80;
            if (v45) {
              goto LABEL_166;
            }
            uint64_t v20 = v90[1];
          }
          if (v20 == 19)
          {
            BOOL v47 = *(void *)v90[0] == 0x61654C736169423CLL
               && *(void *)(v90[0] + 8) == 0x6F43657461526E72
               && *(void *)(v90[0] + 11) == 0x3E66656F43657461;
            uint64_t v30 = v82;
            if (v47) {
              goto LABEL_166;
            }
            uint64_t v20 = v90[1];
          }
          if (v20 != 9) {
            goto LABEL_154;
          }
          BOOL v48 = *(void *)v90[0] == 0x6D726F4E78614D3CLL && *(unsigned char *)(v90[0] + 8) == 62;
          uint64_t v30 = v11;
          if (!v48)
          {
LABEL_83:
            uint64_t v20 = v90[1];
LABEL_154:
            if (v20 != 12) {
              goto LABEL_189;
            }
LABEL_155:
            long long v37 = (void *)v90[0];
LABEL_156:
            uint64_t v49 = *v37;
            int v50 = *((_DWORD *)v37 + 2);
            if (v49 != 0x536D6F646E61523CLL || v50 != 1046766949)
            {
LABEL_189:
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 237);
              v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Unknown token ", 14);
              if (v90[2] >= 0) {
                uint64_t v73 = v90;
              }
              else {
                uint64_t v73 = (void *)v90[0];
              }
              if (v90[2] >= 0) {
                uint64_t v74 = HIBYTE(v90[2]);
              }
              else {
                uint64_t v74 = v90[1];
              }
              v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
              v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)", a typo in config?", 19);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" (ParamStddev|BiasMean|BiasRange|InFeatureMaps|OutFeatureMaps|PatchStep|SectionStep|SectionSize|FilterSize|LearnRateCoef|BiasLearnRateCoef|MaxNorm|RandomSeed)", 158);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
            }
            uint64_t v18 = &v91;
LABEL_162:
            kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v18, v14, v15);
            goto LABEL_167;
          }
        }
LABEL_166:
        kaldi::ReadBasicType<float>(a2, 0, (float *)v30, v14, v15);
LABEL_167:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        break;
      case 0xBLL:
        if (*(void *)v90[0] != 0x6E6152736169423CLL || *(void *)(v90[0] + 3) != 0x3E65676E61527361)
        {
          BOOL v32 = *(void *)v90[0] == 0x745368637461503CLL && *(void *)(v90[0] + 3) == 0x3E70657453686374;
LABEL_110:
          uint64_t v18 = v81;
          if (!v32) {
            goto LABEL_189;
          }
          goto LABEL_162;
        }
LABEL_164:
        uint64_t v30 = &v93;
        goto LABEL_166;
      case 0xCLL:
        BOOL v39 = *(void *)v90[0] == 0x537265746C69463CLL && *(_DWORD *)(v90[0] + 8) == 1046837865;
        uint64_t v18 = v12;
        if (!v39) {
          goto LABEL_155;
        }
        goto LABEL_162;
      case 0xDLL:
        if (*(void *)v90[0] != 0x74536D617261503CLL || *(void *)(v90[0] + 5) != 0x3E7665646474536DLL)
        {
          BOOL v42 = *(void *)v90[0] == 0x6E6F69746365533CLL && *(void *)(v90[0] + 5) == 0x3E706574536E6F69;
          uint64_t v18 = v8;
          if (!v42)
          {
            BOOL v26 = *(void *)v90[0] == 0x6E6F69746365533CLL && *(void *)(v90[0] + 5) == 0x3E657A69536E6F69;
LABEL_123:
            uint64_t v18 = v78;
            if (!v26) {
              goto LABEL_189;
            }
          }
          goto LABEL_162;
        }
LABEL_163:
        uint64_t v30 = &v92;
        goto LABEL_166;
      case 0xFLL:
        BOOL v43 = *(void *)v90[0] == 0x75746165466E493CLL && *(void *)(v90[0] + 7) == 0x3E7370614D657275;
        uint64_t v18 = v13;
        if (!v43)
        {
          BOOL v44 = *(void *)v90[0] == 0x65726168536E493CLL && *(void *)(v90[0] + 7) == 0x3E73646E61426465;
          uint64_t v18 = v79;
          if (!v44) {
            goto LABEL_133;
          }
        }
        goto LABEL_162;
      case 0x10:
        BOOL v38 = *(void *)v90[0] == 0x7461654674754F3CLL && *(void *)(v90[0] + 8) == 0x3E7370614D657275;
LABEL_101:
        uint64_t v18 = v83;
        if (!v38) {
          goto LABEL_189;
        }
        goto LABEL_162;
      default:
        goto LABEL_34;
    }
  }
}

void sub_125830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  JUMPOUT(0x12585CLL);
}

void sub_12584C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(exception_object);
}

void sub_125858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)va1);
  JUMPOUT(0x12586CLL);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  uint64_t v6 = a1 + 116;
  *(void *)(a1 + 132) = 0x100000001;
  uint64_t v7 = a1 + 132;
  uint64_t v52 = a1 + 136;
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_142:
    int v45 = *(_DWORD *)(a1 + 12);
    int v46 = *(_DWORD *)(a1 + 108);
    int v47 = *(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 128);
    int v48 = (*(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 132)) / *(_DWORD *)(a1 + 136) + 1;
    *(_DWORD *)(a1 + 148) = v48;
    *(unsigned char *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 140) = v47;
    *(_DWORD *)(a1 + 144) = v45 / (v46 * v48);
    LOBYTE(v55) = 0;
    kaldi::ReadBasicType<char>(a2, a3, &v55, v8, v9);
    if (!*(void *)(a1 + 152))
    {
      kaldi::ExpectToken(a2, a3, (kaldi *)"<Filters>");
      operator new();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 348);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "pointer is thought to be un-initialized here");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    long long v55 = 0uLL;
    uint64_t v56 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v55, v8, v9);
    if ((SHIBYTE(v56) & 0x80000000) == 0)
    {
      uint64_t v12 = (uint64_t *)&v55;
      switch(HIBYTE(v56))
      {
        case 0xA:
          goto LABEL_87;
        case 0xB:
LABEL_4:
          BOOL v13 = (void)v55 == 0x745368637461503CLL && *(void *)((char *)&v55 + 3) == 0x3E70657453686374;
          uint64_t v14 = a1 + 112;
          if (!v13) {
            goto LABEL_86;
          }
          goto LABEL_136;
        case 0xC:
          goto LABEL_81;
        case 0xD:
LABEL_68:
          BOOL v27 = (void)v55 == 0x6E6F69746365533CLL && *(void *)((char *)&v55 + 5) == 0x3E706574536E6F69;
          uint64_t v14 = v6;
          if (v27) {
            goto LABEL_136;
          }
          if (HIBYTE(v56) == 10) {
            goto LABEL_87;
          }
          if (HIBYTE(v56) == 12) {
            goto LABEL_81;
          }
          if (HIBYTE(v56) != 13) {
            goto LABEL_132;
          }
          BOOL v28 = (void)v55 == 0x6E6F69746365533CLL && *(void *)((char *)&v55 + 5) == 0x3E657A69536E6F69;
          uint64_t v14 = a1 + 120;
          if (!v28) {
            goto LABEL_132;
          }
          goto LABEL_136;
        case 0xF:
          BOOL v22 = (void)v55 == 0x75746165466E493CLL && *(void *)((char *)&v55 + 7) == 0x3E7370614D657275;
          uint64_t v14 = a1 + 104;
          if (v22) {
            goto LABEL_136;
          }
LABEL_52:
          BOOL v23 = (void)v55 == 0x65726168536E493CLL && *(void *)((char *)&v55 + 7) == 0x3E73646E61426465;
          uint64_t v14 = a1 + 128;
          if (v23) {
            goto LABEL_136;
          }
          if (HIBYTE(v56) != 15) {
            goto LABEL_86;
          }
          BOOL v24 = (void)v55 == 0x61526E7261654C3CLL && *(void *)((char *)&v55 + 7) == 0x3E66656F43657461;
          BOOL v25 = (float *)(a1 + 264);
          if (!v24) {
            goto LABEL_132;
          }
          goto LABEL_138;
        case 0x10:
          BOOL v26 = (void)v55 == 0x7461654674754F3CLL && *((void *)&v55 + 1) == 0x3E7370614D657275;
          uint64_t v14 = a1 + 108;
          if (!v26)
          {
            switch(HIBYTE(v56))
            {
              case 0xA:
                goto LABEL_87;
              case 0xB:
                goto LABEL_4;
              case 0xC:
                goto LABEL_81;
              case 0xD:
                goto LABEL_68;
              case 0xF:
                goto LABEL_52;
              default:
                goto LABEL_132;
            }
          }
          goto LABEL_136;
        case 0x13:
          goto LABEL_125;
        default:
          goto LABEL_132;
      }
    }
    uint64_t v15 = *((void *)&v55 + 1);
    if (*((void *)&v55 + 1) == 15)
    {
      BOOL v16 = *(void *)v55 == 0x75746165466E493CLL && *(void *)(v55 + 7) == 0x3E7370614D657275;
      uint64_t v14 = a1 + 104;
      if (v16) {
        goto LABEL_136;
      }
    }
    if (*((void *)&v55 + 1) == 16)
    {
      BOOL v17 = *(void *)v55 == 0x7461654674754F3CLL && *(void *)(v55 + 8) == 0x3E7370614D657275;
      uint64_t v14 = a1 + 108;
      if (v17) {
        goto LABEL_136;
      }
      uint64_t v15 = *((void *)&v55 + 1);
    }
    if (v15 == 11)
    {
      BOOL v18 = *(void *)v55 == 0x745368637461503CLL && *(void *)(v55 + 3) == 0x3E70657453686374;
      uint64_t v14 = a1 + 112;
      if (v18) {
        goto LABEL_136;
      }
      uint64_t v15 = *((void *)&v55 + 1);
    }
    if (v15 != 13) {
      goto LABEL_41;
    }
    BOOL v19 = *(void *)v55 == 0x6E6F69746365533CLL && *(void *)(v55 + 5) == 0x3E706574536E6F69;
    uint64_t v14 = v6;
    if (v19) {
      goto LABEL_136;
    }
    uint64_t v15 = *((void *)&v55 + 1);
    if (*((void *)&v55 + 1) != 13) {
      goto LABEL_41;
    }
    BOOL v20 = *(void *)v55 == 0x6E6F69746365533CLL && *(void *)(v55 + 5) == 0x3E657A69536E6F69;
    uint64_t v14 = a1 + 120;
    if (v20) {
      goto LABEL_136;
    }
    if ((v56 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v56) == 10) {
        goto LABEL_87;
      }
      if (HIBYTE(v56) != 12) {
        goto LABEL_132;
      }
LABEL_81:
      BOOL v29 = (void)v55 == 0x537265746C69463CLL && DWORD2(v55) == 1046837865;
      uint64_t v14 = a1 + 124;
      if (v29) {
        goto LABEL_136;
      }
      if ((v56 & 0x8000000000000000) == 0)
      {
LABEL_86:
        if (HIBYTE(v56) != 10) {
          goto LABEL_132;
        }
LABEL_87:
        BOOL v30 = (void)v55 == 0x7A69536C6F6F503CLL && WORD4(v55) == 15973;
        uint64_t v14 = v7;
        if (v30) {
          goto LABEL_136;
        }
        if ((v56 & 0x8000000000000000) == 0)
        {
          if (HIBYTE(v56) != 10) {
            goto LABEL_132;
          }
          BOOL v31 = (void)v55 == 0x6574536C6F6F503CLL && WORD4(v55) == 15984;
          uint64_t v14 = v52;
          if (!v31) {
            goto LABEL_132;
          }
          goto LABEL_136;
        }
LABEL_111:
        uint64_t v15 = *((void *)&v55 + 1);
        if (*((void *)&v55 + 1) != 10) {
          goto LABEL_117;
        }
        BOOL v34 = *(void *)v55 == 0x6574536C6F6F503CLL && *(_WORD *)(v55 + 8) == 15984;
        uint64_t v14 = v52;
        if (!v34)
        {
          if (v56 < 0)
          {
LABEL_117:
            if (v15 == 15)
            {
              BOOL v35 = *(void *)v55 == 0x61526E7261654C3CLL && *(void *)(v55 + 7) == 0x3E66656F43657461;
              BOOL v25 = (float *)(a1 + 264);
              if (!v35)
              {
                uint64_t v15 = *((void *)&v55 + 1);
                goto LABEL_123;
              }
LABEL_138:
              kaldi::ReadBasicType<float>(a2, a3, v25, v10, v11);
              goto LABEL_139;
            }
LABEL_123:
            if (v15 == 19)
            {
              uint64_t v12 = (uint64_t *)v55;
LABEL_125:
              uint64_t v36 = *v12;
              uint64_t v37 = v12[1];
              uint64_t v38 = *(uint64_t *)((char *)v12 + 11);
              BOOL v39 = v36 == 0x61654C736169423CLL && v37 == 0x6F43657461526E72;
              BOOL v40 = v39 && v38 == 0x3E66656F43657461;
              BOOL v25 = (float *)(a1 + 268);
              if (v40) {
                goto LABEL_138;
              }
            }
          }
LABEL_132:
          BOOL v41 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v55, "<MaxNorm>");
          BOOL v25 = (float *)(a1 + 280);
          if (!v41)
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v55, "<GradientNormType>"))
            {
              __p[0] = 0;
              __p[1] = 0;
              uint64_t v54 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)__p, v42, v43);
              *(_DWORD *)(a1 + 272) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
              if (SHIBYTE(v54) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_139;
            }
            BOOL v44 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v55, "<MaxGrad>");
            BOOL v25 = (float *)(a1 + 276);
            if (!v44)
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 332);
              uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
              if (v56 >= 0) {
                int v50 = &v55;
              }
              else {
                int v50 = (long long *)v55;
              }
              if (v56 >= 0) {
                uint64_t v51 = HIBYTE(v56);
              }
              else {
                uint64_t v51 = *((void *)&v55 + 1);
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
            }
          }
          goto LABEL_138;
        }
        goto LABEL_136;
      }
    }
    else
    {
LABEL_41:
      if (v15 != 12) {
        goto LABEL_100;
      }
      BOOL v21 = *(void *)v55 == 0x537265746C69463CLL && *(_DWORD *)(v55 + 8) == 1046837865;
      uint64_t v14 = a1 + 124;
      if (v21) {
        goto LABEL_136;
      }
    }
    uint64_t v15 = *((void *)&v55 + 1);
LABEL_100:
    if (v15 == 15)
    {
      BOOL v32 = *(void *)v55 == 0x65726168536E493CLL && *(void *)(v55 + 7) == 0x3E73646E61426465;
      uint64_t v14 = a1 + 128;
      if (v32) {
        goto LABEL_136;
      }
      uint64_t v15 = *((void *)&v55 + 1);
    }
    if (v15 != 10) {
      goto LABEL_117;
    }
    BOOL v33 = *(void *)v55 == 0x7A69536C6F6F503CLL && *(_WORD *)(v55 + 8) == 15973;
    uint64_t v14 = v7;
    if (!v33) {
      goto LABEL_111;
    }
LABEL_136:
    kaldi::ReadBasicType<int>(a2, a3, v14, v10, v11);
LABEL_139:
    if (SHIBYTE(v56) < 0) {
      operator delete((void *)v55);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_142;
    }
  }
}

void sub_126490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 89) < 0) {
    operator delete(*(void **)(v22 - 112));
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<InFeatureMaps>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<OutFeatureMaps>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PatchStep>", v10, v11);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SectionStep>", v12, v13);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SectionSize>", v14, v15);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FilterSize>", v16, v17);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<InSharedBands>", v18, v19);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolSize>", v20, v21);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolStep>", v22, v23);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v24, v25);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v26, v27);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v28, v29);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v30, v31);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 272), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v32, v33);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v34, v35);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_126794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::WriteData(void *a1, void *a2, const char *a3, int a4)
{
  (*(void (**)(void *))(*a1 + 168))(a1);
  kaldi::WriteBasicType<char>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Filters>", v8, v9);
  uint64_t v11 = (int *)a1[19];
  if (!v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", v10);
  }
  kaldi::QuantizedMatrix<short>::Write(v11, a2, (int)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Bias>", v12, v13);
  uint64_t v16 = (_DWORD *)a1[20];
  if (!v16) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.offset + 3, "bias_", v15);
  }

  kaldi::CuVectorBase<float>::Write(v16, a2, (int)a3, v14, v15);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::NumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(unsigned int **)(a1 + 152);
  if (!v6 || (v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6), (uint64_t v8 = *(void *)(a1 + 152)) == 0)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", a5);
  }
  int v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8);
  uint64_t v11 = *(void *)(a1 + 160);
  if (!v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.offset + 3, "bias_", v10);
  }
  return (*(_DWORD *)(v11 + 16) + v9 * v7);
}

_DWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::GetParams(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  uint64_t v8 = (unsigned int *)a1[19];
  if (!v8) {
    goto LABEL_8;
  }
  int v9 = kaldi::QuantizedMatrixBase<short>::NumRows(v8);
  uint64_t v10 = a1[19];
  if (!v10) {
    goto LABEL_8;
  }
  unsigned int v11 = kaldi::QuantizedMatrixBase<short>::NumCols(v10) * v9;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (v11 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_9;
  }
  uint64_t v18 = *(void **)a2;
  LODWORD(v19) = v11;
  uint64_t v12 = (unsigned int *)a1[19];
  if (!v12) {
LABEL_8:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", v7);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v18, v12);
  uint64_t v15 = (_DWORD *)a1[20];
  if (!v15) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.offset + 3, "bias_", v7);
  }
  int v16 = v15[4];
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (v16 + v11 > *(_DWORD *)(a2 + 8)) {
LABEL_9:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v7);
  uint64_t v18 = (void *)(*(void *)a2 + 4 * (int)v11);
  LODWORD(v19) = v16;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(v15, (uint64_t)&v18, v13, v14, v7);
}

_DWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::SetParams(void *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(void *))(*a1 + 176))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)&stru_2E8.nreloc, "wei_src.Dim() == NumParams()", v5);
  }
  uint64_t v6 = (unsigned int *)a1[19];
  if (!v6
    || (v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6), (uint64_t v8 = a1[19]) == 0)
    || (v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8), (uint64_t v10 = (unsigned int *)a1[19]) == 0))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v5);
  }
  int v11 = v9 * v7;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (v11 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_10;
  }
  BOOL v17 = *(char **)a2;
  LODWORD(v18) = v11;
  kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v10, &v17);
  uint64_t v14 = (_DWORD *)a1[20];
  if (!v14) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.align + 3, "bias_", v5);
  }
  int v15 = v14[4];
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if ((v15 + v11) > *(_DWORD *)(a2 + 8)) {
LABEL_10:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v5);
  BOOL v17 = (char *)(*(void *)a2 + 4 * v11);
  LODWORD(v18) = v15;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v14, (uint64_t)&v17, v12, v13, v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 312);
  unint64_t v3 = *(void *)(a1 + 320) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(int **)(a1 + 152);
  if (!v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", a5);
  }
  float v8 = kaldi::QuantizedMatrixBase<short>::Sum(v6, a2, a3, a4, a5);
  uint64_t v9 = *(void *)(a1 + 160);
  if (!v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.offset + 3, "bias_", v7);
  }
  float v10 = v8;
  double v11 = kaldi::CuVectorBase<float>::Sum(v9);
  return v10 + *(float *)&v11;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(unsigned int **)(a1 + 152);
  if (v6)
  {
    uint64_t v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
    uint64_t v8 = *(void *)(a1 + 152);
    if (v8)
    {
      uint64_t v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8);
      kaldi::CuMatrix<float>::CuMatrix((uint64_t)v11, v7, v9, 1u, 0, 0);
      kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v11);
      if (*(void *)(a1 + 152)) {
        kaldi::QuantizedMatrixBase<short>::AddMat();
      }
      kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v10);
    }
  }
  kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", a5);
}

void sub_126E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v32, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ParamsString(a1);
  if ((v31 & 0x80u) == 0) {
    unint64_t v4 = v30;
  }
  else {
    unint64_t v4 = (void **)v30[0];
  }
  if ((v31 & 0x80u) == 0) {
    std::string::size_type v5 = v31;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v30[1];
  }
  uint64_t v6 = std::string::append(&v32, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v33, "\n  filters");
  long long v10 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v10;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  double v11 = *(unsigned int **)(a1 + 152);
  if (!v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", v9);
  }
  kaldi::nnet1::MomentStatistics<short>(v11);
  if ((v29 & 0x80u) == 0) {
    uint64_t v12 = v28;
  }
  else {
    uint64_t v12 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v13 = v29;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v28[1];
  }
  uint64_t v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  int v16 = std::string::append(&v35, "\n  bias");
  long long v21 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v21;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v22 = *(_DWORD **)(a1 + 160);
  if (!v22) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.offset + 3, "bias_", v20);
  }
  kaldi::nnet1::MomentStatistics<float>(v22, v17, v18, v19, v20);
  if ((v27 & 0x80u) == 0) {
    BOOL v23 = __p;
  }
  else {
    BOOL v23 = (void **)__p[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v24 = v27;
  }
  else {
    std::string::size_type v24 = (std::string::size_type)__p[1];
  }
  BOOL v25 = std::string::append(&v36, (const std::string::value_type *)v23, v24);
  *a2 = *v25;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if ((char)v27 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if ((char)v29 < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if ((char)v31 < 0) {
    operator delete(v30[0]);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_12708C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v45 - 41) < 0) {
    operator delete(*(void **)(v45 - 64));
  }
  if (*(char *)(v45 - 73) < 0) {
    operator delete(*(void **)(v45 - 96));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ParamsString(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 168))(a1, v4, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" , # of sections: ", 18);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", section size after pooling: ", 30);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1272DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v57, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ParamsString(a1);
  if ((v56 & 0x80u) == 0) {
    unint64_t v4 = v55;
  }
  else {
    unint64_t v4 = (void **)v55[0];
  }
  if ((v56 & 0x80u) == 0) {
    std::string::size_type v5 = v56;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v55[1];
  }
  uint64_t v6 = std::string::append(&v57, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v58, "\n  filters_grad");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 168), v10, v11, v12, v13);
  if ((v54 & 0x80u) == 0) {
    uint64_t v14 = v53;
  }
  else {
    uint64_t v14 = (void **)v53[0];
  }
  if ((v54 & 0x80u) == 0) {
    std::string::size_type v15 = v54;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)v53[1];
  }
  int v16 = std::string::append(&v59, (const std::string::value_type *)v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v18 = std::string::append(&v60, ", lr-coef ");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v52 & 0x80u) == 0) {
    uint64_t v20 = v51;
  }
  else {
    uint64_t v20 = (void **)v51[0];
  }
  if ((v52 & 0x80u) == 0) {
    std::string::size_type v21 = v52;
  }
  else {
    std::string::size_type v21 = (std::string::size_type)v51[1];
  }
  uint64_t v22 = std::string::append(&v61, (const std::string::value_type *)v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v24 = std::string::append(&v62, ", max-norm ");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v50 & 0x80u) == 0) {
    uint64_t v26 = v49;
  }
  else {
    uint64_t v26 = (void **)v49[0];
  }
  if ((v50 & 0x80u) == 0) {
    std::string::size_type v27 = v50;
  }
  else {
    std::string::size_type v27 = (std::string::size_type)v49[1];
  }
  uint64_t v28 = std::string::append(&v63, (const std::string::value_type *)v26, v27);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  uint64_t v30 = std::string::append(&v64, "\n  bias_grad");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 192), v32, v33, v34, v35);
  if ((v48 & 0x80u) == 0) {
    std::string v36 = v47;
  }
  else {
    std::string v36 = (void **)v47[0];
  }
  if ((v48 & 0x80u) == 0) {
    std::string::size_type v37 = v48;
  }
  else {
    std::string::size_type v37 = (std::string::size_type)v47[1];
  }
  uint64_t v38 = std::string::append(&v65, (const std::string::value_type *)v36, v37);
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  BOOL v40 = std::string::append(&v66, ", lr-coef ");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v46 & 0x80u) == 0) {
    uint64_t v42 = __p;
  }
  else {
    uint64_t v42 = (void **)__p[0];
  }
  if ((v46 & 0x80u) == 0) {
    std::string::size_type v43 = v46;
  }
  else {
    std::string::size_type v43 = (std::string::size_type)__p[1];
  }
  BOOL v44 = std::string::append(&v67, (const std::string::value_type *)v42, v43);
  *a2 = *v44;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if ((char)v46 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if ((char)v48 < 0) {
    operator delete(v47[0]);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if ((char)v50 < 0) {
    operator delete(v49[0]);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if ((char)v52 < 0) {
    operator delete(v51[0]);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if ((char)v54 < 0) {
    operator delete(v53[0]);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if ((char)v56 < 0) {
    operator delete(v55[0]);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
}

void sub_1276C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v73 - 57) < 0) {
    operator delete(*(void **)(v73 - 80));
  }
  if (*(char *)(v73 - 89) < 0) {
    operator delete(*(void **)(v73 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v73 - 121) < 0) {
    operator delete(*(void **)(v73 - 144));
  }
  if (*(char *)(v73 - 153) < 0) {
    operator delete(*(void **)(v73 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v73 - 185) < 0) {
    operator delete(*(void **)(v73 - 208));
  }
  if (*(char *)(v73 - 217) < 0) {
    operator delete(*(void **)(v73 - 240));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  _Unwind_Resume(a1);
}

void sub_127824()
{
}

void sub_12782C()
{
}

void sub_127834()
{
}

void sub_12783C()
{
}

void sub_127844()
{
}

void sub_12784C()
{
}

void sub_127854()
{
}

void sub_12785C()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::PropagateFncDirect(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  if (*(int *)(a1 + 128) <= 0) {
    float v8 = 0.0;
  }
  else {
    float v8 = 1.0;
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 384) + 48 * a4, *(unsigned int *)(a2 + 20), (*(_DWORD *)(a1 + 108) * *(_DWORD *)(a1 + 120)), 3u, 0);
  if (*(int *)(a1 + 144) >= 1)
  {
    int v9 = 0;
    do
    {
      int v10 = *(_DWORD *)(a1 + 120);
      if (*(int *)(a1 + 128) >= 1)
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v45, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(v10 * v9 * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v42, a2, 0, *(_DWORD *)(a2 + 20), (const char *)(*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 140)), *(_DWORD *)(a1 + 128) * *(_DWORD *)(a1 + 104));
        uint64_t v12 = *(void *)(a1 + 152);
        if (!v12) {
          kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v11);
        }
        kaldi::QuantizedMatrixBase<short>::Range(v12, *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 124), *(_DWORD *)(a1 + 128) * *(_DWORD *)(a1 + 104), *(_DWORD *)(a1 + 108) * v9, *(_DWORD *)(a1 + 108), (uint64_t)&v39);
        kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v45, (uint64_t)&v42, 111, (unsigned int *)&v39, &stru_68.sectname[7], 1.0, 0.0);
        int v13 = *(_DWORD *)(a1 + 120);
        if (v13 >= 2)
        {
          for (int i = 1; i < v13; ++i)
          {
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v36, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(a1 + 108) * (i + v9 * v13)), *(_DWORD *)(a1 + 108));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v36, (uint64_t)&v45, 111, v15, v16);
            std::string v36 = off_262D80;
            long long v37 = 0u;
            long long v38 = 0u;
            fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v36);
            int v13 = *(_DWORD *)(a1 + 120);
          }
        }
        kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase((uint64_t)&v39);
        uint64_t v42 = off_262D80;
        long long v43 = 0u;
        long long v44 = 0u;
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v42);
        uint64_t v45 = off_262D80;
        long long v46 = 0u;
        long long v47 = 0u;
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v45);
        int v10 = *(_DWORD *)(a1 + 120);
      }
      if (v10 >= 1)
      {
        int v17 = 0;
        do
        {
          uint64_t v18 = *(void *)(a1 + 384) + 48 * a4;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v45, v18, 0, *(_DWORD *)(v18 + 20), (const char *)(*(_DWORD *)(a1 + 108) * v17), *(_DWORD *)(a1 + 108));
          uint64_t v20 = *(void *)(a1 + 160);
          if (!v20) {
            kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.align + 3, "bias_", v19);
          }
          kaldi::CuSubVector<float>::CuSubVector(&v39, v20, *(_DWORD *)(a1 + 108) * v9, *(_DWORD *)(a1 + 108), v19);
          kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v45, (uint64_t)&v39, v21, v22, v23, 1.0, v8);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v42, a2, 0, *(_DWORD *)(a2 + 20), (const char *)((*(_DWORD *)(a1 + 116) * v9 + *(_DWORD *)(a1 + 112) * v17)* *(_DWORD *)(a1 + 104)), *(_DWORD *)(a1 + 124) * *(_DWORD *)(a1 + 104));
          uint64_t v25 = *(void *)(a1 + 152);
          if (!v25) {
            kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v24);
          }
          kaldi::QuantizedMatrixBase<short>::Range(v25, 0, *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 124), *(_DWORD *)(a1 + 108) * v9, *(_DWORD *)(a1 + 108), (uint64_t)&v39);
          kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v45, (uint64_t)&v42, 111, (unsigned int *)&v39, &stru_68.sectname[7], 1.0, 1.0);
          kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase((uint64_t)&v39);
          uint64_t v42 = off_262D80;
          long long v43 = 0u;
          long long v44 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v42);
          uint64_t v45 = off_262D80;
          long long v46 = 0u;
          long long v47 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v45);
          ++v17;
        }
        while (v17 < *(_DWORD *)(a1 + 120));
      }
      int v26 = *(_DWORD *)(a1 + 148);
      if (v26 >= 1)
      {
        for (int j = 0; j < v26; ++j)
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v39, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(a1 + 108) * (j + v26 * v9)), *(_DWORD *)(a1 + 108));
          uint64_t v28 = *(void *)(a1 + 384) + 48 * a4;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v45, v28, 0, *(_DWORD *)(v28 + 20), (const char *)(*(_DWORD *)(a1 + 136) * j * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v39, (uint64_t)&v45, 111, v29, v30);
          uint64_t v45 = off_262D80;
          long long v46 = 0u;
          long long v47 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v45);
          if (*(int *)(a1 + 132) >= 2)
          {
            int v31 = 1;
            do
            {
              uint64_t v32 = *(void *)(a1 + 384) + 48 * a4;
              kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v45, v32, 0, *(_DWORD *)(v32 + 20), (const char *)((v31 + j * *(_DWORD *)(a1 + 136)) * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
              kaldi::CuMatrixBase<float>::Max((uint64_t)&v39, (uint64_t)&v45, v33, v34, v35);
              uint64_t v45 = off_262D80;
              long long v46 = 0u;
              long long v47 = 0u;
              fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v45);
              ++v31;
            }
            while (v31 < *(_DWORD *)(a1 + 132));
          }
          long long v39 = off_262D80;
          long long v40 = 0u;
          long long v41 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v39);
          int v26 = *(_DWORD *)(a1 + 148);
        }
      }
      ++v9;
    }
    while (v9 < *(_DWORD *)(a1 + 144));
  }
}

void sub_127DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void (**a24)())
{
  a24 = off_262D80;
  *a12 = 0u;
  a12[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a24);
  *(void *)(v25 - 144) = off_262D80;
  *std::string::size_type v24 = 0u;
  v24[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v25 - 144);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 596);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Backpropagation of CNN ConvolutionalMaxPoolingComponent is not supported for quantized weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::AccumGradients()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 640);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not supported for quantized weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 687);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::GetGradient(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v43, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v42, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, unsigned char *, void))(*(void *)v8 + 112))(v8, a2, v43, 0);
  (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, unsigned char *, void))(*(void *)v8 + 128))(v8, a2, v43, a3, v42, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v8 + 232))(v8, a2, a3, 0, 0);
  int v10 = (unsigned int *)a1[19];
  if (!v10 || (v11 = kaldi::QuantizedMatrixBase<short>::NumRows(v10), (uint64_t v12 = a1[19]) == 0)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", v9);
  }
  int v13 = kaldi::QuantizedMatrixBase<short>::NumCols(v12);
  uint64_t v14 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v14, 1, v15, v16);
  int v20 = v13 * v11;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  if (v20 > *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v19);
  }
  long long v39 = *(void **)a4;
  LODWORD(v40) = v20;
  uint64_t v21 = (_DWORD *)kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(v8, 0, v17, v18, v19);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v39, v21, v22, v23, v24);
  uint64_t v28 = a1[20];
  if (!v28)
  {
    std::string v35 = "bias_";
    std::string v36 = (unsigned char *)(&stru_B8 + 51);
    long long v37 = "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h";
    long long v38 = "Bias";
    goto LABEL_11;
  }
  int v29 = *(_DWORD *)(v28 + 16);
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  if ((v29 + v20) > *(_DWORD *)(a4 + 8))
  {
    std::string v35 = "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMa"
          "trixIndexT>(t.Dim())";
    std::string v36 = (char *)&stru_1F8.size + 6;
    long long v37 = "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h";
    long long v38 = "SubVector";
LABEL_11:
    kaldi::KaldiAssertFailure_((kaldi *)v38, v37, v36, v35, v27);
  }
  long long v39 = (void *)(*(void *)a4 + 4 * v20);
  LODWORD(v40) = v29;
  uint64_t v30 = (_DWORD *)kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(v8, 0, v25, v26, v27);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v30, (uint64_t)&v39, v31, v32, v33);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v42);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v43);
}

void sub_12832C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 276) = a3;
  *(_DWORD *)(result + 272) = a2;
  *(unsigned char *)(result + 480) = 0;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7 = a6;
  int v9 = *(_DWORD *)(a1 + 272);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      uint64_t v16 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v16, *(void *)(a1 + 216) + 48 * a2, v7);
      uint64_t v20 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v17, v18, v19);
      uint64_t v24 = *(void *)(a1 + 240) + 32 * a2;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v20, v24, v7, v21, v22, v23);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      uint64_t v25 = a2;
      if (*(unsigned char *)(a1 + 84)) {
        float v7 = (float)*(int *)(*(void *)(a1 + 288) + 4 * a2) * a6;
      }
      uint64_t v26 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v26, (unsigned int *)(*(void *)(a1 + 216) + 48 * (int)v25), v7, v27, v28, v29);
      uint64_t v33 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v30, v31, v32);
      long long v37 = (_DWORD *)(*(void *)(a1 + 240) + 32 * v25);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v33, v37, v34, v35, v36, v7);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    if (*(unsigned char *)(a1 + 84)) {
      float v7 = (float)*(int *)(*(void *)(a1 + 288) + 4 * a2) * a6;
    }
    uint64_t v10 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v10, v7);
    uint64_t v14 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v11, v12, v13);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v14, v7);
  }
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  uint64_t v7 = *(void *)(a1 + 160);
  if (!v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.align + 3, "bias_", v6);
  }
  uint64_t v8 = *(unsigned int **)(a1 + 152);
  if (!v8
    || (int v9 = *(_DWORD *)(v7 + 16),
        int v10 = kaldi::QuantizedMatrixBase<short>::NumRows(v8),
        (uint64_t v11 = *(void *)(a1 + 152)) == 0))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v6);
  }
  uint64_t result = kaldi::QuantizedMatrixBase<short>::NumCols(v11);
  *a3 = v9 + result * v10;
  uint64_t v16 = *(void *)(a1 + 176) - *(void *)(a1 + 168);
  if (v16)
  {
    uint64_t v17 = *(void *)(a1 + 200) - *(void *)(a1 + 192);
    if (v17)
    {
      uint64_t v18 = v16 >> 3;
      if (*(_DWORD *)(a1 + 80) == 1) {
        int v19 = 0;
      }
      else {
        int v19 = *(_DWORD *)(a1 + 80);
      }
      if (v18 - 1 != v19 || (v17 >> 3) - 1 != v19)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 883);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Unexpected mismatch in indexes: ", 32);
        uint64_t v30 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"  ", 2);
        uint64_t v31 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"  ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
      }
      uint64_t v20 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, v19, v13, v14, v15);
      int v25 = kaldi::CuMatrixBase<float>::CountZeros(v20, v21, v22, v23, v24);
      uint64_t v29 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, v19, v26, v27, v28);
      uint64_t result = kaldi::CuVectorBase<float>::CountZeros(v29);
      LODWORD(v17) = result + v25;
    }
  }
  else
  {
    LODWORD(v17) = 0;
  }
  *a2 = v17;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(uint64_t a1)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  if (!*(unsigned char *)(a1 + 480))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 408), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 360), v3);
    std::vector<BOOL>::resize(a1 + 456, v3, 0);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 168), v3);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 192), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 216), v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 240), v3);
    if (v3 >= 1) {
      operator new();
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 288), v3);
    *(unsigned char *)(a1 + 480) = 1;
  }
}

void sub_128A18()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 908);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void sub_128AF8()
{
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

void sub_128B6C()
{
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 262;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 263;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 264;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc(uint64_t a1)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 608);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "Backpropagation of CNN ConvolutionalMaxPoolingComponent is not supported on CPU");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  *(_DWORD *)(*(void *)(a1 + 288) + 4 * a5) = *(_DWORD *)(a2 + 20);
  if (((*(void *)(*(void *)(a1 + 456) + (((unint64_t)a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5) & 1) == 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v46, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 653);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v46, "ConvolutionalMaxPoolingComponent::AccumGradients can't be called before ConvolutionalMaxPoolingComponent::Backpropagate");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v46);
  }
  *(void *)(kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a5, v9, v10, v11)+ 32) = a4;
  *(void *)(kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a5, v12, v13, v14)+ 24) = a4;
  uint64_t v18 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a5, v15, v16, v17);
  kaldi::CuMatrixBase<float>::SetZero(v18);
  uint64_t v22 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a5, v19, v20, v21);
  kaldi::CuVectorBase<float>::SetZero(v22);
  if (*(int *)(a1 + 144) >= 1)
  {
    int v26 = 0;
    do
    {
      uint64_t v27 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a5, v23, v24, v25);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v27, 0, *(_DWORD *)(v27 + 20), (const char *)(*(_DWORD *)(a1 + 108) * v26), *(_DWORD *)(a1 + 108));
      uint64_t v28 = *(void *)(a1 + 408) + 48 * a5;
      int v29 = *(_DWORD *)(a2 + 20) * *(_DWORD *)(a1 + 120);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v28, v29 * v26, v29, 0, *(_DWORD *)(v28 + 16));
      int v30 = *(_DWORD *)(a2 + 20) * *(_DWORD *)(a1 + 120);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v40, *(void *)(a1 + 336) + 48 * a5, v30 * v26, v30, 0, *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 124));
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v46, (uint64_t)&v40, CblasTrans, (uint64_t)&v43, &stru_68.sectname[7], 1.0, 0.0);
      uint64_t v34 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a5, v31, v32, v33);
      kaldi::CuSubVector<float>::CuSubVector(v39, v34, *(_DWORD *)(a1 + 108) * v26, *(_DWORD *)(a1 + 108), v35);
      kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v39, &v43, 1.0, 1.0, v36, v37, v38);
      uint64_t v40 = off_262D80;
      long long v41 = 0u;
      long long v42 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v40);
      long long v43 = off_262D80;
      long long v44 = 0u;
      long long v45 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
      long long v46 = off_262D80;
      long long v47 = 0u;
      long long v48 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
      ++v26;
    }
    while (v26 < *(_DWORD *)(a1 + 144));
  }
}

void sub_128EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void (**a24)())
{
  a24 = off_262D80;
  *uint64_t v24 = 0u;
  v24[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a24);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, int a3)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  uint64_t v9 = *(void *)(a1 + 152);
  if (!v9) {
    goto LABEL_46;
  }
  float v11 = *(float *)(a1 + 64);
  float v10 = *(float *)(a1 + 68);
  float v12 = *(float *)(a1 + 72);
  int v13 = *(_DWORD *)(a1 + 76);
  *(void *)(v9 + 32) = a2;
  uint64_t v14 = *(void *)(a1 + 160);
  if (!v14) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.align + 3, "bias_", v8);
  }
  *(void *)(v14 + 24) = a2;
  int v15 = *(_DWORD *)(a1 + 80);
  if (a3 >= 0) {
    unsigned int v16 = a3;
  }
  else {
    unsigned int v16 = *(_DWORD *)(a1 + 80);
  }
  if (v15 == 1) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v16;
  }
  if ((int)v17 > v15) {
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)&stru_298.offset, "batch_idx <= opts_.num_subbatches", v8);
  }
  *(void *)(kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, v17, v6, v7, v8)+ 32) = a2;
  *(void *)(kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, v17, v18, v19, v20)+ 24) = a2;
  *(void *)(*(void *)(a1 + 216) + 48 * (int)v17 + 32) = a2;
  *(void *)(*(void *)(a1 + 240) + 32 * (int)v17 + 24) = a2;
  if (v17 == *(_DWORD *)(a1 + 80))
  {
    uint64_t v23 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, v17, v21, v22, v8);
    uint64_t v27 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, 0, v24, v25, v26);
    kaldi::CuMatrixBase<float>::AddMat(v23, v27, 111, v28, v29, 1.0, 0.0);
    uint64_t v33 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, v17, v30, v31, v32);
    uint64_t v37 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, 0, v34, v35, v36);
    kaldi::CuVectorBase<float>::AddVec(v33, v37, v38, v39, v40, 1.0, 0.0);
    if (*(int *)(a1 + 80) > 1)
    {
      int v41 = 1;
      do
      {
        uint64_t v42 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, v17, v21, v22, v8);
        uint64_t v46 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, v41, v43, v44, v45);
        kaldi::CuMatrixBase<float>::AddMat(v42, v46, 111, v47, v48, 1.0, 1.0);
        uint64_t v52 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, v17, v49, v50, v51);
        uint64_t v56 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, v41, v53, v54, v55);
        kaldi::CuVectorBase<float>::AddVec(v52, v56, v57, v58, v59, 1.0, 1.0);
        ++v41;
      }
      while (v41 < *(_DWORD *)(a1 + 80));
    }
    std::string v60 = *(int **)(a1 + 288);
    v60[(int)v17] = 0;
    if ((int)v17 >= 1)
    {
      int v61 = 0;
      uint64_t v62 = v17;
      std::string v63 = v60;
      do
      {
        int v64 = *v63++;
        v61 += v64;
        v60[(int)v17] = v61;
        --v62;
      }
      while (v62);
    }
  }
  float v65 = *(float *)(a1 + 56);
  if (*(unsigned char *)(a1 + 84)) {
    float v65 = v65 / (float)*(int *)(*(void *)(a1 + 288) + 4 * (int)v17);
  }
  uint64_t v66 = *(void *)(a1 + 312);
  if ((int)v17 >= (unint64_t)((*(void *)(a1 + 320) - v66) >> 2))
  {
    LODWORD(v104[0]) = 2143289344;
    std::vector<float>::resize(a1 + 312, (int)v17 + 1, v104);
    uint64_t v66 = *(void *)(a1 + 312);
  }
  *(float *)(v66 + 4 * (int)v17) = v65;
  if (*(float *)(a1 + 276) >= 0.0) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 248))(a1, v17);
  }
  if (v11 != 0.0)
  {
    uint64_t v67 = *(void *)(a1 + 152);
    if (!v67) {
      goto LABEL_46;
    }
    kaldi::CuMatrixBase<float>::AddMat(v67, *(void *)(a1 + 152), 111, v22, v8, (float)-(float)(v65 * v11) * (float)*(int *)(*(void *)(a1 + 288) + 4 * (int)v17), 1.0);
  }
  if (v10 != 0.0)
  {
    float v68 = *(_DWORD **)(a1 + 152);
    if (!v68) {
      goto LABEL_46;
    }
    uint64_t v69 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, v17, v21, v22, v8);
    kaldi::cu::RegularizeL1<float>(v68, v69, (float)(v10 * v65) * (float)*(int *)(*(void *)(a1 + 288) + 4 * (int)v17), v65, v70, v71, v72);
  }
  if (v12 > 0.0)
  {
    if (*(int *)(a1 + 80) >= 2)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v104, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 751);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v104, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v104);
    }
    if (*(void *)(a1 + 496) == *(void *)(a1 + 488)) {
      kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator((void *)a1, (uint64_t *)(a1 + 488));
    }
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 488), v13, v12, v21, v22, v8);
  }
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(a1, v17, v65);
  if (*(float *)(a1 + 280) > 0.0)
  {
    uint64_t v73 = *(void *)(a1 + 152);
    if (v73)
    {
      kaldi::CuMatrix<float>::CuMatrix(v104, v73, 111);
      uint64_t v77 = *(void *)(a1 + 152);
      if (!v77) {
        kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v76);
      }
      kaldi::CuMatrixBase<float>::MulElements((uint64_t)v104, v77, v74, v75, v76);
      uint64_t v80 = *(void *)(a1 + 152);
      if (!v80) {
        kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v79);
      }
      uint64_t v81 = *(unsigned int *)(v80 + 20);
      v102[1] = 0;
      v102[2] = 0;
      v102[0] = off_262E60;
      uint64_t v103 = 0;
      kaldi::CuVector<float>::Resize((uint64_t)v102, v81, 0, v78, v79);
      uint64_t v103 = a2;
      kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v102, (unsigned int *)v104, 1.0, 0.0, v82, v83, v84);
      kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v102, 0.5);
      kaldi::CuVector<float>::CuVector((uint64_t)v101, (uint64_t)v102, v85, v86, v87);
      kaldi::CuVectorBase<float>::Scale((uint64_t)v101, 1.0 / *(float *)(a1 + 280));
      kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v101, 1.0);
      kaldi::CuVectorBase<float>::InvertElements((uint64_t)v101);
      uint64_t v91 = *(void *)(a1 + 152);
      if (v91)
      {
        kaldi::CuMatrixBase<float>::MulRowsVec(v91, (uint64_t)v101, v88, v89, v90);
        uint64_t v95 = *(void *)(a1 + 160);
        if (v95)
        {
          kaldi::CuVectorBase<float>::ApplyMaxNorm(v95, *(float *)(a1 + 280), v92, v93, v94, v90);
          kaldi::CuVector<float>::~CuVector(v101);
          kaldi::CuVector<float>::~CuVector(v102);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v104);
          goto LABEL_41;
        }
        v98 = "bias_";
        v99 = (char *)&stru_B8.align + 3;
        v100 = "Bias";
      }
      else
      {
        v98 = "filters_";
        v99 = (unsigned char *)(&stru_B8 + 47);
        v100 = "Filters";
      }
      kaldi::KaldiAssertFailure_((kaldi *)v100, "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", v99, v98, v90);
    }
LABEL_46:
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v8);
  }
LABEL_41:
  v96 = *(unsigned char **)(a1 + 288);
  if (v17 == *(_DWORD *)(a1 + 80))
  {
    v97 = *(unsigned char **)(a1 + 296);
    if (v96 != v97) {
      bzero(v96, ((v97 - v96 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v96[4 * (int)v17] = 0;
  }
}

void sub_1294FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void sub_12950C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 918);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "Weights are already vectorized");
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v9, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 921);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Performing vectorization of convolutional maxpooling component", 62);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v9);
    }
    uint64_t v6 = *(void *)(a1 + 152);
    if (!v6) {
      kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", a5);
    }
    uint64_t v7 = *(void *)(a1 + 160);
    if (!v7) {
      kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.align + 3, "bias_", a5);
    }
    int v8 = *(_DWORD *)(v7 + 16) + *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 20);
    if (v8 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)) {
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 924);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "(nlinparams + Bias().Dim()) == NumParams()");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

void sub_129AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::CnnRearrangeComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  long long v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  memset(&v47, 0, sizeof(v47));
  int v46 = -1;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v7 = a2 + 4;
  uint64_t v45 = 0;
  while ((*((unsigned char *)v7 + *(void *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v43, a4, a5);
    if (SHIBYTE(v45) < 0)
    {
      if (v44 != 10) {
        goto LABEL_49;
      }
      uint64_t v10 = v43;
    }
    else
    {
      if (SHIBYTE(v45) != 10) {
        goto LABEL_49;
      }
      uint64_t v10 = (void **)&v43;
    }
    float v11 = *v10;
    int v12 = *((unsigned __int16 *)v10 + 4);
    if (v11 != (void *)0x646E61426D754E3CLL || v12 != 15987)
    {
LABEL_49:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1071);
      uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Unknown token ", 14);
      if (v45 >= 0) {
        uint64_t v38 = (void **)&v43;
      }
      else {
        uint64_t v38 = v43;
      }
      if (v45 >= 0) {
        uint64_t v39 = HIBYTE(v45);
      }
      else {
        uint64_t v39 = v44;
      }
      uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
      int v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" (NumBands)", 11);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42);
    }
    kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v46, v8, v9);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  int v14 = v46;
  if (v46 <= 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1076);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"NumBands should be > 0", 22);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42);
  }
  int v15 = *(_DWORD *)(a1 + 8);
  int v16 = v15 / v46;
  if (v15 % v46)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1078);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Invalid NumBands value", 22);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42);
  }
  int v17 = 0;
  do
  {
    if (v16 >= 1)
    {
      int v18 = 0;
      uint64_t v19 = v49;
      do
      {
        int v20 = v17 + v46 * v18;
        if (v19 >= v50)
        {
          uint64_t v22 = v48;
          uint64_t v23 = (v19 - v48) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v50 - v48;
          if ((v50 - v48) >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v50, v26);
            uint64_t v22 = v48;
            uint64_t v19 = v49;
          }
          else
          {
            uint64_t v27 = 0;
          }
          uint64_t v28 = &v27[4 * v23];
          *(_DWORD *)uint64_t v28 = v20;
          uint64_t v21 = v28 + 4;
          while (v19 != v22)
          {
            int v29 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          long long v48 = v28;
          uint64_t v49 = v21;
          uint64_t v50 = &v27[4 * v26];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v19 = v20;
          uint64_t v21 = v19 + 4;
        }
        uint64_t v49 = v21;
        ++v18;
        uint64_t v19 = v21;
      }
      while (v18 != v16);
      int v14 = v46;
    }
    ++v17;
  }
  while (v17 < v14);
  std::vector<int>::resize(&v47, *(int *)(a1 + 8));
  if (*(int *)(a1 + 8) >= 1)
  {
    uint64_t v32 = 0;
    uint64_t v33 = v48;
    std::vector<int>::pointer begin = v47.__begin_;
    do
    {
      begin[*(int *)&v33[4 * v32]] = v32;
      ++v32;
    }
    while (v32 < *(int *)(a1 + 8));
  }
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)(v49 - v48) >> 2, 1u, v30, v31);
  memcpy(*(void **)(a1 + 56), v48, v49 - v48);
  kaldi::CuArray<int>::Resize(a1 + 72, (unint64_t)((char *)v47.__end_ - (char *)v47.__begin_) >> 2, 1u, v35, v36);
  memcpy(*(void **)(a1 + 80), v47.__begin_, (char *)v47.__end_ - (char *)v47.__begin_);
  if (SHIBYTE(v45) < 0) {
    operator delete(v43);
  }
  if (v47.__begin_)
  {
    v47.__end_ = v47.__begin_;
    operator delete(v47.__begin_);
  }
  if (v48)
  {
    uint64_t v49 = v48;
    operator delete(v48);
  }
}

void sub_129EF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  int v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(void *)(v1 - 120) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(v1 - 104);
  if (v4)
  {
    *(void *)(v1 - 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::CnnRearrangeComponent::ReadData(uint64_t a1, void *a2, int a3, uint64_t a4, const char *a5)
{
  char v18 = 0;
  kaldi::ReadBasicType<char>(a2, a3, &v18, a4, a5);
  memset(&v17, 0, sizeof(v17));
  kaldi::ReadIntegerVector<int>(a2, a3, &v17, 0, 0, 0, 0);
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)v17.__end_ - (char *)v17.__begin_) >> 2, 1u, v8, v9);
  memcpy(*(void **)(a1 + 56), v17.__begin_, (char *)v17.__end_ - (char *)v17.__begin_);
  memset(&__p, 0, sizeof(__p));
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, 0, 0, 0, 0);
  kaldi::CuArray<int>::Resize(a1 + 72, (unint64_t)((char *)__p.__end_ - (char *)__p.__begin_) >> 2, 1u, v10, v11);
  memcpy(*(void **)(a1 + 80), __p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_);
  int v13 = *(_DWORD *)(a1 + 48);
  if (v13 != *(_DWORD *)(a1 + 12))
  {
    int v14 = "copy_from_indices_.Dim() == OutputDim()";
    int v15 = (unsigned char *)(&stru_428 + 43);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 72) != v13)
  {
    int v14 = "back_copy_from_indices_.Dim() == OutputDim()";
    int v15 = (char *)&stru_428.size + 4;
LABEL_10:
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", v15, v14, v12);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v17.__begin_)
  {
    v17.__end_ = v17.__begin_;
    operator delete(v17.__begin_);
  }
}

void sub_12A090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::CnnRearrangeComponent::WriteData(uint64_t a1, void *a2, int a3)
{
  kaldi::WriteBasicType<char>(a2, a3);
  std::vector<int>::vector(&v7, *(int *)(a1 + 48));
  kaldi::CuArray<int>::CopyToVec((int *)(a1 + 48), &v7);
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, v7.__end_ - v7.__begin_, (uint64_t)v7.__begin_);
  std::vector<int>::vector(&__p, *(int *)(a1 + 72));
  kaldi::CuArray<int>::CopyToVec((int *)(a1 + 72), &__p);
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, __p.__end_ - __p.__begin_, (uint64_t)__p.__begin_);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v7.__begin_)
  {
    v7.__end_ = v7.__begin_;
    operator delete(v7.__begin_);
  }
}

void sub_12A198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::nnet1::CnnRearrangeComponent::Info@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "\n CnnRearrange ");
}

uint64_t kaldi::nnet1::CnnRearrangeComponent::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  return kaldi::cu::Copy<float>(a2, (unsigned int *)(a1 + 48), a3, a4, a5);
}

uint64_t kaldi::nnet1::CnnRearrangeComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  return kaldi::cu::Copy<float>(a4, (unsigned int *)(a1 + 72), a5, a4, a5);
}

void kaldi::nnet1::PaddingComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = a1 + 56;
  uint64_t v7 = a1 + 52;
  uint64_t v8 = (_DWORD *)(a1 + 60);
  *(void *)(a1 + 48) = 0;
  uint64_t v9 = (float *)(a1 + 48);
  long long v33 = 0uLL;
  uint64_t v34 = 0;
  uint64_t v10 = a2 + 4;
  while ((*((unsigned char *)v10 + *(void *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v33, a4, a5);
    if (SHIBYTE(v34) < 0)
    {
      uint64_t v16 = *((void *)&v33 + 1);
      if (*((void *)&v33 + 1) == 12)
      {
        BOOL v17 = *(void *)v33 == 0x646461506572503CLL && *(_DWORD *)(v33 + 8) == 1046965865;
        uint64_t v15 = v7;
        if (v17)
        {
LABEL_47:
          kaldi::ReadBasicType<int>(a2, 0, v15, v11, v12);
          goto LABEL_48;
        }
      }
      if (*((void *)&v33 + 1) == 13)
      {
        BOOL v18 = *(void *)v33 == 0x64615074736F503CLL && *(void *)(v33 + 5) == 0x3E676E6964646150;
        uint64_t v15 = v6;
        if (v18) {
          goto LABEL_47;
        }
        uint64_t v16 = *((void *)&v33 + 1);
      }
      if (v16 == 11)
      {
        BOOL v19 = *(void *)v33 == 0x626D6174736F503CLL && *(void *)(v33 + 3) == 0x3E656C626D617473;
        uint64_t v15 = (uint64_t)v8;
        if (v19) {
          goto LABEL_47;
        }
        uint64_t v16 = *((void *)&v33 + 1);
      }
      if (v16 != 10) {
        goto LABEL_55;
      }
      int v13 = (long long *)v33;
    }
    else
    {
      int v13 = &v33;
      switch(HIBYTE(v34))
      {
        case 0xA:
          break;
        case 0xB:
          goto LABEL_35;
        case 0xC:
          BOOL v14 = (void)v33 == 0x646461506572503CLL && DWORD2(v33) == 1046965865;
          uint64_t v15 = v7;
          if (!v14) {
            goto LABEL_55;
          }
          goto LABEL_47;
        case 0xD:
          BOOL v20 = (void)v33 == 0x64615074736F503CLL && *(void *)((char *)&v33 + 5) == 0x3E676E6964646150;
          uint64_t v15 = v6;
          if (v20) {
            goto LABEL_47;
          }
          if (HIBYTE(v34) == 10) {
            goto LABEL_40;
          }
          if (HIBYTE(v34) != 11) {
            goto LABEL_55;
          }
LABEL_35:
          BOOL v21 = (void)v33 == 0x626D6174736F503CLL && *(void *)((char *)&v33 + 3) == 0x3E656C626D617473;
          uint64_t v15 = (uint64_t)v8;
          if (v21) {
            goto LABEL_47;
          }
          if (HIBYTE(v34) != 10) {
            goto LABEL_55;
          }
LABEL_40:
          int v13 = &v33;
          break;
        default:
          goto LABEL_55;
      }
    }
    uint64_t v22 = *(void *)v13;
    int v23 = *((unsigned __int16 *)v13 + 4);
    if (v22 != 0x756C61566461503CLL || v23 != 15973)
    {
LABEL_55:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1158);
      unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Unknown token ", 14);
      if (v34 >= 0) {
        uint64_t v27 = &v33;
      }
      else {
        uint64_t v27 = (long long *)v33;
      }
      if (v34 >= 0) {
        uint64_t v28 = HIBYTE(v34);
      }
      else {
        uint64_t v28 = *((void *)&v33 + 1);
      }
      int v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
      uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" (NumBands)", 11);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
    }
    kaldi::ReadBasicType<float>(a2, 0, v9, v11, v12);
LABEL_48:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  int v25 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 52) + v25 + *(_DWORD *)(a1 + 56) != *(_DWORD *)(a1 + 12))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1164);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Invalid pre and post padding sizes", 34);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
  if (v25 < *v8 || (*v8 & 0x80000000) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1166);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Invalid postamble size", 22);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
}

void sub_12A610(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::PaddingComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = a1 + 56;
  uint64_t v7 = (_DWORD *)(a1 + 60);
  *(void *)(a1 + 48) = 0;
  uint64_t v8 = (float *)(a1 + 48);
  while (kaldi::Peek(a2, a3) == 60)
  {
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v32, v9, v10);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
    {
      int v13 = &v32;
      switch(HIBYTE(v33))
      {
        case 0xA:
          goto LABEL_34;
        case 0xB:
          BOOL v14 = (void)v32 == 0x626D6174736F503CLL && *(void *)((char *)&v32 + 3) == 0x3E656C626D617473;
          uint64_t v15 = (uint64_t)v7;
          if (!v14) {
            goto LABEL_52;
          }
          goto LABEL_45;
        case 0xC:
          BOOL v20 = (void)v32 == 0x646461506572503CLL && DWORD2(v32) == 1046965865;
          uint64_t v15 = v6 - 4;
          if (!v20) {
            goto LABEL_32;
          }
          goto LABEL_45;
        case 0xD:
          BOOL v24 = (void)v32 == 0x64615074736F503CLL && *(void *)((char *)&v32 + 5) == 0x3E676E6964646150;
          uint64_t v15 = v6;
          if (v24) {
            goto LABEL_45;
          }
LABEL_32:
          if (HIBYTE(v33) != 10) {
            goto LABEL_52;
          }
          int v13 = &v32;
          break;
        default:
          goto LABEL_52;
      }
      goto LABEL_34;
    }
    uint64_t v16 = *((void *)&v32 + 1);
    if (*((void *)&v32 + 1) != 11
      || (*(void *)v32 == 0x626D6174736F503CLL ? (BOOL v17 = *(void *)(v32 + 3) == 0x3E656C626D617473) : (BOOL v17 = 0),
          uint64_t v15 = (uint64_t)v7,
          !v17))
    {
      if (*((void *)&v32 + 1) == 12)
      {
        BOOL v18 = *(void *)v32 == 0x646461506572503CLL && *(_DWORD *)(v32 + 8) == 1046965865;
        uint64_t v15 = v6 - 4;
        if (v18) {
          goto LABEL_45;
        }
        uint64_t v16 = *((void *)&v32 + 1);
      }
      if (v16 != 13) {
        goto LABEL_26;
      }
      BOOL v19 = *(void *)v32 == 0x64615074736F503CLL && *(void *)(v32 + 5) == 0x3E676E6964646150;
      uint64_t v15 = v6;
      if (!v19)
      {
        uint64_t v16 = *((void *)&v32 + 1);
LABEL_26:
        if (v16 != 10) {
          goto LABEL_52;
        }
        int v13 = (long long *)v32;
LABEL_34:
        uint64_t v21 = *(void *)v13;
        int v22 = *((unsigned __int16 *)v13 + 4);
        if (v21 != 0x756C61566461503CLL || v22 != 15973)
        {
LABEL_52:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1187);
          uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"unrecognized config token ", 26);
          if (v33 >= 0) {
            int v29 = &v32;
          }
          else {
            int v29 = (long long *)v32;
          }
          if (v33 >= 0) {
            uint64_t v30 = HIBYTE(v33);
          }
          else {
            uint64_t v30 = *((void *)&v32 + 1);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
        }
        kaldi::ReadBasicType<float>(a2, a3, v8, v11, v12);
        goto LABEL_46;
      }
    }
LABEL_45:
    kaldi::ReadBasicType<int>(a2, a3, v15, v11, v12);
LABEL_46:
    if (SHIBYTE(v33) < 0) {
      operator delete((void *)v32);
    }
  }
  LOBYTE(v31[0]) = 0;
  uint64_t result = kaldi::ReadBasicType<char>(a2, a3, v31, v9, v10);
  int v27 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 52) + v27 + *(_DWORD *)(a1 + 56) != *(_DWORD *)(a1 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)&stru_478.offset + 2, "InputDim() + pre_pad_size_ + post_pad_size_ == OutputDim()", v26);
  }
  if (v27 < *v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)&stru_478.offset + 3, "InputDim() >= postamble_", v26);
  }
  return result;
}

void sub_12A9EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::PaddingComponent::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  if (*(float *)(a1 + 48) != 0.0)
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<PadValue>", a4, a5);
    kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<Postamble>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PrePadding>", v7, v8);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PostPadding>", v9, v10);
  kaldi::WriteBasicType<int>(a2, (int)a3);

  return kaldi::WriteBasicType<char>(a2, (int)a3);
}

void *kaldi::nnet1::PaddingComponent::Info@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "\n PaddingComponent ");
}

uint64_t kaldi::nnet1::PaddingComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::CuMatrixBase<float>::Set(a3, a2, a3, a4, a5, *(float *)(a1 + 48));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a3, 0, *(_DWORD *)(a3 + 20), (const char *)*(unsigned int *)(a1 + 52), *(_DWORD *)(a2 + 16) - *(_DWORD *)(a1 + 60));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a2, 0, *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 16) - *(_DWORD *)(a1 + 60));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v17, (uint64_t)&v14, 111, v8, v9);
  BOOL v14 = off_262D80;
  long long v15 = 0u;
  long long v16 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v14);
  BOOL v17 = off_262D80;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v17);
  int v11 = *(_DWORD *)(a1 + 60);
  if (v11 >= 1)
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(a3 + 16) - v11), v11);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a2, 0, *(_DWORD *)(a2 + 20), (const char *)(*(_DWORD *)(a2 + 16) - *(_DWORD *)(a1 + 60)), *(_DWORD *)(a1 + 60));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v17, (uint64_t)&v14, 111, v12, v13);
    BOOL v14 = off_262D80;
    long long v15 = 0u;
    long long v16 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v14);
    BOOL v17 = off_262D80;
    long long v18 = 0u;
    long long v19 = 0u;
    return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v17);
  }
  return result;
}

void sub_12ACCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(), long long a10, long long a11, void (**a12)(), long long a13, long long a14)
{
  a9 = off_262D80;
  a10 = 0u;
  a11 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a9);
  a12 = off_262D80;
  a13 = 0u;
  a14 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::PaddingComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a5, 0, *(_DWORD *)(a5 + 20), 0, *(_DWORD *)(a5 + 16) - *(_DWORD *)(a1 + 60));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a4, 0, *(_DWORD *)(a4 + 20), (const char *)*(unsigned int *)(a1 + 52), *(_DWORD *)(a5 + 16) - *(_DWORD *)(a1 + 60));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v17, (uint64_t)&v14, 111, v8, v9);
  BOOL v14 = off_262D80;
  long long v15 = 0u;
  long long v16 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v14);
  BOOL v17 = off_262D80;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v17);
  int v11 = *(_DWORD *)(a1 + 60);
  if (v11 >= 1)
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a5, 0, *(_DWORD *)(a5 + 20), (const char *)(*(_DWORD *)(a5 + 16) - v11), v11);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a4, 0, *(_DWORD *)(a4 + 20), (const char *)(*(_DWORD *)(a4 + 16) - *(_DWORD *)(a1 + 60)), *(_DWORD *)(a1 + 60));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v17, (uint64_t)&v14, 111, v12, v13);
    BOOL v14 = off_262D80;
    long long v15 = 0u;
    long long v16 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v14);
    BOOL v17 = off_262D80;
    long long v18 = 0u;
    long long v19 = 0u;
    return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v17);
  }
  return result;
}

void sub_12AF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(), long long a10, long long a11, void (**a12)(), long long a13, long long a14)
{
  a9 = off_262D80;
  a10 = 0u;
  a11 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a9);
  a12 = off_262D80;
  a13 = 0u;
  a14 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a12);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Padding2DComponent::Init(void *this)
{
  this[6] = 0;
  this[7] = 0;
  this[8] = 0;
  return this;
}

void kaldi::nnet1::Padding2DComponent::Read(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, const char *a5)
{
  long long __p = 0uLL;
  uint64_t v25 = 0;
  kaldi::ReadToken(a2, a3, (uint64_t)&__p, a4, a5);
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    switch(HIBYTE(v25))
    {
      case 8:
        if ((void)__p != 0x3E706F546461503CLL) {
          goto LABEL_63;
        }
        goto LABEL_59;
      case 9:
        if ((void)__p != 0x7466654C6461503CLL || BYTE8(__p) != 62) {
          goto LABEL_63;
        }
        goto LABEL_37;
      case 0xA:
        if ((void)__p == 0x654C5870616D463CLL && WORD4(__p) == 15982) {
          goto LABEL_60;
        }
        if ((void)__p == 0x654C5970616D463CLL && WORD4(__p) == 15982) {
          goto LABEL_61;
        }
        p_p = &__p;
        break;
      case 0xB:
        if ((void)__p != 0x74746F426461503CLL || *(void *)((char *)&__p + 3) != 0x3E6D6F74746F4264) {
          goto LABEL_63;
        }
        goto LABEL_58;
      default:
        return;
    }
LABEL_47:
    uint64_t v20 = *(void *)p_p;
    int v21 = *((unsigned __int16 *)p_p + 4);
    if (v20 != 0x686769526461503CLL || v21 != 15988) {
      goto LABEL_63;
    }
    uint64_t v17 = a1 + 68;
    goto LABEL_62;
  }
  uint64_t v10 = *((void *)&__p + 1);
  if (*((void *)&__p + 1) == 8)
  {
    if (*(void *)__p == 0x3E706F546461503CLL)
    {
LABEL_59:
      uint64_t v17 = a1 + 56;
      goto LABEL_62;
    }
    uint64_t v10 = *((void *)&__p + 1);
  }
  else if (*((void *)&__p + 1) == 10)
  {
    if (*(void *)__p == 0x654C5870616D463CLL && *(_WORD *)(__p + 8) == 15982)
    {
LABEL_60:
      uint64_t v17 = a1 + 48;
      goto LABEL_62;
    }
    if (*(void *)__p == 0x654C5970616D463CLL && *(_WORD *)(__p + 8) == 15982)
    {
LABEL_61:
      uint64_t v17 = a1 + 52;
      goto LABEL_62;
    }
  }
  if (v10 == 11)
  {
    if (*(void *)__p == 0x74746F426461503CLL && *(void *)(__p + 3) == 0x3E6D6F74746F4264)
    {
LABEL_58:
      uint64_t v17 = a1 + 60;
      goto LABEL_62;
    }
    uint64_t v10 = *((void *)&__p + 1);
  }
  if (v10 != 9)
  {
LABEL_30:
    if (v10 != 10) {
      goto LABEL_63;
    }
    p_p = (long long *)__p;
    goto LABEL_47;
  }
  if (*(void *)__p != 0x7466654C6461503CLL || *(unsigned char *)(__p + 8) != 62)
  {
    uint64_t v10 = *((void *)&__p + 1);
    goto LABEL_30;
  }
LABEL_37:
  uint64_t v17 = a1 + 64;
LABEL_62:
  kaldi::ReadBasicType<int>(a2, a3, v17, v8, v9);
LABEL_63:
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)__p);
  }
}

void sub_12B294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *kaldi::nnet1::Padding2DComponent::Check(_DWORD *this)
{
  unsigned int v2 = this[12];
  signed int v1 = this[13];
  if (v1 < 1 || (int)v2 <= 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1265);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "h > 0 && w > 0");
    goto LABEL_17;
  }
  int v4 = this[14];
  int v5 = this[15];
  if ((-v5 & ~(-v5 >> 31)) + (-v4 & ~(-v4 >> 31)) >= v1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1268);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "num_to_trim_h < h");
    goto LABEL_17;
  }
  int v6 = this[16];
  int v7 = this[17];
  if ((-v7 & ~(-v7 >> 31)) + (-v6 & ~(-v6 >> 31)) >= v2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1271);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "num_to_trim_w < w");
    goto LABEL_17;
  }
  int v8 = this[2];
  int v9 = v8 / (int)(v2 * v1);
  if (v8 % (int)(v2 * v1))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1275);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "input_dim_ % (h * w) == 0");
    goto LABEL_17;
  }
  int v10 = v4 + v1 + v5;
  int v11 = this[3];
  int v12 = (v6 + v2 + v7) * v10;
  if (v11 % v12)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1276);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "output_dim_ % (out_h * out_w) == 0");
    goto LABEL_17;
  }
  if (v9 != v11 / v12)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 1280);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "c == out_c");
LABEL_17:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  return this;
}

_DWORD *kaldi::nnet1::Padding2DComponent::InitData(kaldi::nnet1::Padding2DComponent *this, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  int v6 = a2 + 4;
  while ((*((unsigned char *)v6 + *(void *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::nnet1::Padding2DComponent::Read((uint64_t)this, a2, 0, a4, a5);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }

  return kaldi::nnet1::Padding2DComponent::Check(this);
}

_DWORD *kaldi::nnet1::Padding2DComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  int v6 = a2;
  for (char i = a3; kaldi::Peek(v6, i) == 60; char i = a3)
  {
    kaldi::nnet1::Padding2DComponent::Read(a1, a2, a3, v8, v9);
    int v6 = a2;
  }
  char v11 = 0;
  kaldi::ReadBasicType<char>(a2, a3, &v11, v8, v9);
  return kaldi::nnet1::Padding2DComponent::Check((_DWORD *)a1);
}

uint64_t kaldi::nnet1::Padding2DComponent::WriteData(int a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapXLen>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapYLen>", v7, v8);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadTop>", v9, v10);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadBottom>", v11, v12);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadLeft>", v13, v14);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadRight>", v15, v16);
  kaldi::WriteBasicType<int>(a2, (int)a3);

  return kaldi::WriteBasicType<char>(a2, (int)a3);
}

uint64_t kaldi::nnet1::Padding2DComponent::Info(kaldi::nnet1::Padding2DComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  (*(void (**)(kaldi::nnet1::Padding2DComponent *, void *, void, void))(*(void *)this + 104))(this, v3, 0, 0);
  std::stringbuf::str();
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_12B864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Padding2DComponent::PropagateFnc(int *a1, uint64_t a2, uint64_t a3)
{
}

void kaldi::nnet1::Pad2D(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v30 = a8;
  if (a5 > 0 || a3 > 0 || a4 > 0 || a6 >= 1)
  {
    kaldi::CuMatrixBase<float>::SetZero(a2);
    a8 = v30;
  }
  int v25 = *(_DWORD *)(a1 + 16) / (a8 * a7);
  int v26 = a8 * a7;
  if (v25 >= 1)
  {
    int v14 = 0;
    int v15 = a6 + a5 + a8;
    int v16 = -a3;
    unsigned int v29 = (a5 & ~(a5 >> 31)) + a3 * v15;
    int v17 = a5 & (a5 >> 31);
    int v18 = (a6 & (a6 >> 31)) + a8 + v17;
    unsigned int v28 = -v17;
    int v24 = v15 * (a7 + a4 + a3);
    do
    {
      int v27 = v14;
      if (a7 >= 1)
      {
        int v19 = 0;
        unint64_t v21 = v28;
        unint64_t v20 = v29;
        do
        {
          if (v19 >= v16 && v19 < a7 + a4)
          {
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v35, a2, 0, *(_DWORD *)(a2 + 20), (const char *)v20, v18);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v32, a1, 0, *(_DWORD *)(a1 + 20), (const char *)v21, v18);
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v35, (uint64_t)&v32, 111, v22, v23);
            long long v32 = off_262D80;
            long long v33 = 0u;
            long long v34 = 0u;
            fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v32);
            uint64_t v35 = off_262D80;
            long long v36 = 0u;
            long long v37 = 0u;
            fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v35);
            a8 = v30;
          }
          ++v19;
          unint64_t v21 = (v21 + a8);
          unint64_t v20 = (v20 + v15);
        }
        while (a7 != v19);
      }
      int v14 = v27 + 1;
      v28 += v26;
      v29 += v24;
    }
    while (v27 + 1 != v25);
  }
}

void sub_12BAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (**a15)(), uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void (**a20)())
{
  a15 = off_262D80;
  _OWORD *v21 = 0u;
  v21[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a15);
  a20 = off_262D80;
  *unint64_t v20 = 0u;
  v20[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a20);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Padding2DComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void kaldi::nnet1::CnnRearrangeComponent::~CnnRearrangeComponent(kaldi::nnet1::CnnRearrangeComponent *this)
{
  kaldi::nnet1::CnnRearrangeComponent::~CnnRearrangeComponent(this);

  operator delete();
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = off_268700;
  unsigned int v2 = (void *)((char *)this + 72);
  int v3 = (void *)*((void *)this + 10);
  if (v3) {
    free(v3);
  }
  *unsigned int v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  char v4 = (void *)*((void *)this + 7);
  if (v4) {
    free(v4);
  }
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;

  kaldi::nnet1::Component::~Component(this);
}

void kaldi::nnet1::CnnRearrangeComponent::Copy(kaldi::nnet1::CnnRearrangeComponent *this)
{
}

void sub_12BC58()
{
  unsigned int v2 = (void *)*((void *)v0 + 7);
  if (v2) {
    free(v2);
  }
  *signed int v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  kaldi::nnet1::Component::~Component(v0);
  operator delete();
}

uint64_t kaldi::nnet1::CnnRearrangeComponent::GetType(kaldi::nnet1::CnnRearrangeComponent *this)
{
  return 1036;
}

void kaldi::nnet1::PaddingComponent::~PaddingComponent(kaldi::nnet1::PaddingComponent *this)
{
  kaldi::nnet1::Component::~Component(this);

  operator delete();
}

void kaldi::nnet1::PaddingComponent::Copy(kaldi::nnet1::PaddingComponent *this)
{
}

void sub_12BD90()
{
}

uint64_t kaldi::nnet1::PaddingComponent::GetType(kaldi::nnet1::PaddingComponent *this)
{
  return 1037;
}

void kaldi::nnet1::Padding2DComponent::~Padding2DComponent(kaldi::nnet1::Padding2DComponent *this)
{
  kaldi::nnet1::Component::~Component(this);

  operator delete();
}

void kaldi::nnet1::Padding2DComponent::Copy(kaldi::nnet1::Padding2DComponent *this)
{
}

void sub_12BEA0()
{
}

uint64_t kaldi::nnet1::Padding2DComponent::GetType(kaldi::nnet1::Padding2DComponent *this)
{
  return 1038;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_2683F0;
  *(void *)(a1 + 88) = off_268528;
  *(void *)(a1 + 96) = off_268550;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 168), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 192), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 216), *(void *)(a2 + 216), *(void *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 4));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 240), *(void *)(a2 + 240), *(void *)(a2 + 248), (uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 5);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 288), *(const void **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 2);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 312), *(const void **)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 2);
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "ConvolutionalMaxPoolingComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 133);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  if (*(void *)(a2 + 152)) {
    operator new();
  }
  if (*(void *)(a2 + 160)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 176);
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a2 + 168) + 8 * v8);
      if (v9) {
        kaldi::NewCuSubOrMat<float>(v9, *(unsigned __int8 *)(a1 + 16));
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  uint64_t v11 = *(void *)(a1 + 192);
  uint64_t v10 = *(void *)(a1 + 200);
  if (v10 != v11)
  {
    unint64_t v12 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 192) + 8 * v12)) {
        kaldi::NewCuSubOrVec<float>();
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  if (*(void *)(a2 + 496) != *(void *)(a2 + 488)) {
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator((void *)a1, (uint64_t *)(a1 + 488));
  }
  return a1;
}

void sub_12C428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, uint64_t a14, uint64_t a15, void *a16)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  int v19 = (void *)*((void *)v16 + 57);
  if (v19) {
    operator delete(v19);
  }
  a16 = (void *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  unint64_t v20 = *a12;
  if (*a12)
  {
    *((void *)v16 + 40) = v20;
    operator delete(v20);
  }
  unint64_t v21 = *a13;
  if (*a13)
  {
    *((void *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v22 = *((void *)v16 + 20);
  *((void *)v16 + 20) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v18, 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a14);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_268578;
  *(void *)(a1 + 88) = off_2686B0;
  *(void *)(a1 + 96) = off_2686D8;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 168), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 192), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 216), *(void *)(a2 + 216), *(void *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 4));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 240), *(void *)(a2 + 240), *(void *)(a2 + 248), (uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 5);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 288), *(const void **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 2);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 312), *(const void **)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 2);
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "ConvolutionalMaxPoolingComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 133);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  if (*(void *)(a2 + 152)) {
    operator new();
  }
  if (*(void *)(a2 + 160)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 176);
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a2 + 168) + 8 * v8);
      if (v9) {
        kaldi::NewCuSubOrMat<float>(v9, *(unsigned __int8 *)(a1 + 16));
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  uint64_t v11 = *(void *)(a1 + 192);
  uint64_t v10 = *(void *)(a1 + 200);
  if (v10 != v11)
  {
    unint64_t v12 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 192) + 8 * v12)) {
        kaldi::NewCuSubOrVec<float>();
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  if (*(void *)(a2 + 496) != *(void *)(a2 + 488)) {
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator((void *)a1, (uint64_t *)(a1 + 488));
  }
  return a1;
}

void sub_12CA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, uint64_t a14, uint64_t a15, void *a16)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  int v19 = (void *)*((void *)v16 + 57);
  if (v19) {
    operator delete(v19);
  }
  a16 = (void *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  unint64_t v20 = *a12;
  if (*a12)
  {
    *((void *)v16 + 40) = v20;
    operator delete(v20);
  }
  unint64_t v21 = *a13;
  if (*a13)
  {
    *((void *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v22 = *((void *)v16 + 20);
  *((void *)v16 + 20) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v18, 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a14);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_268578;
  *(void *)(a1 + 88) = off_2686B0;
  *(void *)(a1 + 96) = off_2686D8;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 168), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 192), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 216), *(void *)(a2 + 216), *(void *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 4));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 240), *(void *)(a2 + 240), *(void *)(a2 + 248), (uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 5);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 288), *(const void **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 2);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 312), *(const void **)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 2);
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "ConvolutionalMaxPoolingComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 133);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  if (*(void *)(a2 + 152)) {
    operator new();
  }
  if (*(void *)(a2 + 160)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 176);
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a2 + 168) + 8 * v8);
      if (v9) {
        kaldi::NewCuSubOrMat<float>(v9, *(unsigned __int8 *)(a1 + 16));
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  uint64_t v11 = *(void *)(a1 + 192);
  uint64_t v10 = *(void *)(a1 + 200);
  if (v10 != v11)
  {
    unint64_t v12 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 192) + 8 * v12)) {
        kaldi::NewCuSubOrVec<float>();
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  if (*(void *)(a2 + 496) != *(void *)(a2 + 488)) {
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator((void *)a1, (uint64_t *)(a1 + 488));
  }
  return a1;
}

void sub_12D100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, uint64_t a14, uint64_t a15, void *a16)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  int v19 = (void *)*((void *)v16 + 57);
  if (v19) {
    operator delete(v19);
  }
  a16 = (void *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  unint64_t v20 = *a12;
  if (*a12)
  {
    *((void *)v16 + 40) = v20;
    operator delete(v20);
  }
  unint64_t v21 = *a13;
  if (*a13)
  {
    *((void *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v22 = *((void *)v16 + 20);
  *((void *)v16 + 20) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v18, 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a14);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_2683F0;
  *(void *)(a1 + 88) = off_268528;
  *(void *)(a1 + 96) = off_268550;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 168), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 192), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 216), *(void *)(a2 + 216), *(void *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 4));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 240), *(void *)(a2 + 240), *(void *)(a2 + 248), (uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 5);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 288), *(const void **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 2);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 312), *(const void **)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 2);
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "ConvolutionalMaxPoolingComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 133);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  if (*(void *)(a2 + 152)) {
    operator new();
  }
  if (*(void *)(a2 + 160)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 176);
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a2 + 168) + 8 * v8);
      if (v9) {
        kaldi::NewCuSubOrMat<float>(v9, *(unsigned __int8 *)(a1 + 16));
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  uint64_t v11 = *(void *)(a1 + 192);
  uint64_t v10 = *(void *)(a1 + 200);
  if (v10 != v11)
  {
    unint64_t v12 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 192) + 8 * v12)) {
        kaldi::NewCuSubOrVec<float>();
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  if (*(void *)(a2 + 496) != *(void *)(a2 + 488)) {
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator((void *)a1, (uint64_t *)(a1 + 488));
  }
  return a1;
}

void sub_12D76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, uint64_t a14, uint64_t a15, void *a16)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  int v19 = (void *)*((void *)v16 + 57);
  if (v19) {
    operator delete(v19);
  }
  a16 = (void *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  unint64_t v20 = *a12;
  if (*a12)
  {
    *((void *)v16 + 40) = v20;
    operator delete(v20);
  }
  unint64_t v21 = *a13;
  if (*a13)
  {
    *((void *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v22 = *((void *)v16 + 20);
  *((void *)v16 + 20) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v18, 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a14);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::FixedAttentionComponent::FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 46) = a2;
  *((_DWORD *)this + 47) = a3;
  *((_WORD *)this + 96) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 28) = off_26E7B8;
  *(_OWORD *)((char *)this + 232) = xmmword_20CEC0;
  *((_DWORD *)this + 62) = -1082130432;
  *(void *)((char *)this + 252) = 0x100000003;
  *((_WORD *)this + 130) = 0;
  *((unsigned char *)this + 262) = 0;
  *((void *)this + 1) = -1;
  *(void *)this = off_268A68;
  *((void *)this + 22) = off_268C70;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = off_262DC8;
  *((unsigned char *)this + 64) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 9) = off_262DC8;
  *((unsigned char *)this + 112) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 15) = off_262DC8;
  *((unsigned char *)this + 160) = 0;
  *((unsigned char *)this + 168) = 0;
  return result;
}

kaldi::nnet1::FixedAttentionComponent *kaldi::nnet1::FixedAttentionComponent::FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this, const kaldi::nnet1::FixedAttentionComponent *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *((void *)this + 23) = *(void *)((char *)a2 + *(void *)(*(void *)a2 - 24) + 8);
  *((_WORD *)this + 96) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 28) = off_26E7B8;
  *(_OWORD *)((char *)this + 232) = xmmword_20CEC0;
  *((_DWORD *)this + 62) = -1082130432;
  *(void *)((char *)this + 252) = 0x100000003;
  *((_WORD *)this + 130) = 0;
  *((unsigned char *)this + 262) = 0;
  *((void *)this + 1) = -1;
  *(void *)this = off_268A68;
  *((void *)this + 22) = off_268C70;
  uint64_t v6 = (char *)this + 24;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 3) = off_262DC8;
  *((unsigned char *)this + 64) = 0;
  uint64_t v7 = (char *)this + 72;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 9) = off_262DC8;
  *((unsigned char *)this + 112) = 0;
  unint64_t v8 = (char *)this + 120;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 15) = off_262DC8;
  *((unsigned char *)this + 160) = 0;
  uint64_t v9 = *((void *)a2 + 2);
  if (!v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"FixedAttentionComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)&stru_20.cmd + 3, "src.component_", a5);
  }
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 2) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
  kaldi::CuMatrix<float>::operator=((uint64_t)v6, (uint64_t)a2 + 24);
  kaldi::CuMatrix<float>::operator=((uint64_t)v7, (uint64_t)a2 + 72);
  kaldi::CuMatrix<float>::operator=((uint64_t)v8, (uint64_t)a2 + 120);
  *((unsigned char *)this + 168) = *((unsigned char *)a2 + 168);
  return this;
}

void sub_12DC0C(_Unwind_Exception *a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FixedAttentionComponent::~FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[3];
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 2) = 0;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 120);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 72);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 24);

  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(this);
}

void kaldi::nnet1::FixedAttentionComponent::~FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 176));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 176));

  operator delete();
}

void virtual thunk to'kaldi::nnet1::FixedAttentionComponent::~FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this)
{
  uint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 176);

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::FixedAttentionComponent::~FixedAttentionComponent((kaldi::nnet1::FixedAttentionComponent *)((char *)this + *(void *)(*(void *)this - 24)));
}

void kaldi::nnet1::FixedAttentionComponent::Copy(kaldi::nnet1::FixedAttentionComponent *this)
{
}

void sub_12DEA4()
{
}

void virtual thunk to'kaldi::nnet1::FixedAttentionComponent::Copy(kaldi::nnet1::FixedAttentionComponent *this)
{
  kaldi::nnet1::FixedAttentionComponent::Copy((kaldi::nnet1::FixedAttentionComponent *)((char *)this
                                                                                      + *(void *)(*(void *)this
                                                                                                  - 32)));
}

uint64_t kaldi::nnet1::FixedAttentionComponent::GetType(kaldi::nnet1::FixedAttentionComponent *this)
{
  return 279;
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::GetType(kaldi::nnet1::FixedAttentionComponent *this)
{
  return 279;
}

void kaldi::nnet1::FixedAttentionComponent::InitData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  memset(v44, 0, 24);
  uint64_t v6 = a2 + 4;
  uint64_t v7 = (char *)a1 + 12;
  unint64_t v8 = a1 + 1;
  while (1)
  {
    if ((*((unsigned char *)v6 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_44;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v44, a4, a5);
    if (SHIBYTE(v44[2]) < 0) {
      break;
    }
    if (HIBYTE(v44[2]) == 15)
    {
      BOOL v16 = v44[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v44 + 7) == (void *)0x3E736E6F69746E65;
      uint64_t v11 = (uint64_t)v7;
      if (!v16)
      {
LABEL_35:
        if (HIBYTE(v44[2]) == 12)
        {
          int v17 = v44;
          goto LABEL_39;
        }
        goto LABEL_59;
      }
    }
    else
    {
      if (HIBYTE(v44[2]) != 22) {
        goto LABEL_35;
      }
      BOOL v10 = v44[0] == (void *)0x53656372756F533CLL
         && v44[1] == (void *)0x656D694465746174
         && *(void **)((char *)&v44[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      uint64_t v11 = (uint64_t)v8;
      if (!v10) {
        goto LABEL_59;
      }
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, 0, v11, a4, a5);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  unint64_t v12 = (int *)v44[1];
  if (v44[1] != (char *)&dword_C + 3)
  {
    if (v44[1] != (char *)&dword_14 + 2) {
      goto LABEL_37;
    }
    BOOL v13 = *(void *)v44[0] == 0x53656372756F533CLL && *((void *)v44[0] + 1) == 0x656D694465746174;
    BOOL v14 = v13 && *(void *)((char *)v44[0] + 14) == 0x3E6E6F69736E656DLL;
    uint64_t v11 = (uint64_t)v8;
    if (!v14) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  BOOL v15 = *(void *)v44[0] == 0x6574744178614D3CLL && *(void *)((char *)v44[0] + 7) == 0x3E736E6F69746E65;
  uint64_t v11 = (uint64_t)v7;
  if (v15) {
    goto LABEL_34;
  }
  unint64_t v12 = (int *)v44[1];
LABEL_37:
  if (v12 != &dword_C) {
    goto LABEL_59;
  }
  int v17 = (void **)v44[0];
LABEL_39:
  int v18 = *v17;
  int v19 = *((_DWORD *)v17 + 2);
  if (v18 != (void *)0x6E6F706D6F432F3CLL || v19 != 1047817829)
  {
LABEL_59:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", 81);
    long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v44[2]) >= 0) {
      long long v33 = v44;
    }
    else {
      long long v33 = (void **)v44[0];
    }
    if (SHIBYTE(v44[2]) >= 0) {
      uint64_t v34 = HIBYTE(v44[2]);
    }
    else {
      uint64_t v34 = (uint64_t)v44[1];
    }
    uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
    long long v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" (SourceStateDimension|MaxAttentions)", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39);
  }
LABEL_44:
  uint64_t v21 = a1[2];
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  int v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  kaldi::ReadToken(a2, 0, (uint64_t)&v41, a4, a5);
  uint64_t v22 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v41);
  uint64_t v40 = 0;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v39, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", 91, 3);
    int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Initializing component of type ", 31);
    if (v43 >= 0) {
      int v24 = (void **)&v41;
    }
    else {
      int v24 = v41;
    }
    if (v43 >= 0) {
      uint64_t v25 = HIBYTE(v43);
    }
    else {
      uint64_t v25 = v42;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v39);
  }
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v40 + 4, v26, v27);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v40, v28, v29);
  kaldi::nnet1::Component::NewComponentOfType(v22);
  a1[2] = v31;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v31 + 96))(v31, a2, a3);
  kaldi::nnet1::FixedAttentionComponent::Check(a1);
  if (SHIBYTE(v43) < 0) {
    operator delete(v41);
  }
  if (SHIBYTE(v44[2]) < 0) {
    operator delete(v44[0]);
  }
}

void *kaldi::nnet1::FixedAttentionComponent::Check(void *this)
{
  if (!*((unsigned char *)this + 168))
  {
    uint64_t v1 = (uint64_t)this;
    uint64_t v2 = (_DWORD *)this[2];
    if (!v2) {
      goto LABEL_5;
    }
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", 342);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "this is a non-recurrent version, cannot have a recurrent internal component");
      goto LABEL_16;
    }
    if (this)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", 345);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "no recursive inclusion");
    }
    else
    {
LABEL_5:
      int v3 = *(_DWORD *)(v1 + 12);
      if (v3 < 1 || (int v4 = *(_DWORD *)(v1 + 8), v4 <= 0))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", 348);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"component is not initialized, max attention is ", 47);
        uint64_t v6 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", source state dimension is ", 28);
        std::ostream::operator<<();
      }
      else
      {
        uint64_t v5 = v1 + *(void *)(*(void *)v1 - 24);
        if (*(_DWORD *)(v5 + 8) + v4 * v3 == v2[2])
        {
          if (*(_DWORD *)(v5 + 12) == v2[3])
          {
            *(unsigned char *)(v1 + 168) = 1;
            return this;
          }
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", 358);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"the output dim of attention component is ", 41);
          BOOL v10 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" , however, the internal training component has output dim ", 59);
          std::ostream::operator<<();
        }
        else
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", 352);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"component has input dim ", 24);
          uint64_t v7 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", attentions ", 13);
          unint64_t v8 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", source state dimension ", 25);
          uint64_t v9 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", however, the internal training component has input dim ", 57);
          std::ostream::operator<<();
        }
      }
    }
LABEL_16:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  return this;
}

void virtual thunk to'kaldi::nnet1::FixedAttentionComponent::InitData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::FixedAttentionComponent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  memset(v32, 0, 24);
  uint64_t v6 = (char *)a1 + 12;
  uint64_t v7 = a1 + 1;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_44;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)v32, v8, v9);
    if (SHIBYTE(v32[2]) < 0) {
      break;
    }
    if (HIBYTE(v32[2]) == 15)
    {
      BOOL v19 = v32[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v32 + 7) == (void *)0x3E736E6F69746E65;
      uint64_t v14 = (uint64_t)v6;
      if (!v19)
      {
LABEL_35:
        if (HIBYTE(v32[2]) == 12)
        {
          unint64_t v20 = v32;
          goto LABEL_39;
        }
        goto LABEL_51;
      }
    }
    else
    {
      if (HIBYTE(v32[2]) != 22) {
        goto LABEL_35;
      }
      BOOL v13 = v32[0] == (void *)0x53656372756F533CLL
         && v32[1] == (void *)0x656D694465746174
         && *(void **)((char *)&v32[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      uint64_t v14 = (uint64_t)v7;
      if (!v13) {
        goto LABEL_51;
      }
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, a3, v14, v10, v11);
  }
  BOOL v15 = (int *)v32[1];
  if (v32[1] != (char *)&dword_C + 3)
  {
    if (v32[1] != (char *)&dword_14 + 2) {
      goto LABEL_37;
    }
    BOOL v16 = *(void *)v32[0] == 0x53656372756F533CLL && *((void *)v32[0] + 1) == 0x656D694465746174;
    BOOL v17 = v16 && *(void *)((char *)v32[0] + 14) == 0x3E6E6F69736E656DLL;
    uint64_t v14 = (uint64_t)v7;
    if (!v17) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  BOOL v18 = *(void *)v32[0] == 0x6574744178614D3CLL && *(void *)((char *)v32[0] + 7) == 0x3E736E6F69746E65;
  uint64_t v14 = (uint64_t)v6;
  if (v18) {
    goto LABEL_34;
  }
  BOOL v15 = (int *)v32[1];
LABEL_37:
  if (v15 != &dword_C) {
    goto LABEL_51;
  }
  unint64_t v20 = (void **)v32[0];
LABEL_39:
  uint64_t v21 = *v20;
  int v22 = *((_DWORD *)v20 + 2);
  if (v21 != (void *)0x6E6F706D6F432F3CLL || v22 != 1047817829)
  {
LABEL_51:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", 112);
    uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Unrecognized token ", 19);
    if (SHIBYTE(v32[2]) >= 0) {
      int v27 = v32;
    }
    else {
      int v27 = (void **)v32[0];
    }
    if (SHIBYTE(v32[2]) >= 0) {
      uint64_t v28 = HIBYTE(v32[2]);
    }
    else {
      uint64_t v28 = (uint64_t)v32[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
  }
LABEL_44:
  uint64_t v24 = a1[2];
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (v25) {
  a1[2] = v25;
  }
  kaldi::nnet1::FixedAttentionComponent::Check(a1);
  if (SHIBYTE(v32[2]) < 0) {
    operator delete(v32[0]);
  }
}

void sub_12E98C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::FixedAttentionComponent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t kaldi::nnet1::FixedAttentionComponent::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<SourceStateDimension>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxAttentions>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v10, v11);
  unint64_t v12 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  kaldi::nnet1::Component::TypeToMarker(v12, &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteBasicType<int>(a2, (int)a3);
  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

void sub_12EAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::WriteConfig(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::FixedAttentionComponent::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::WriteData(void **a1)
{
  ((void (*)(void **))(*a1)[12])(a1);
  uint64_t v2 = *(uint64_t (**)(void))(*a1[2] + 104);

  return v2();
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::WriteData(void *a1)
{
  uint64_t v1 = (void **)((char *)a1 + *(void *)(*a1 - 120));
  ((void (*)(void **))(*v1)[12])(v1);
  uint64_t v2 = *(uint64_t (**)(void))(*v1[2] + 104);

  return v2();
}

uint64_t kaldi::nnet1::FixedAttentionComponent::NumParams(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 176))();
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::NumParams(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 192) + 16) + 176))();
}

uint64_t kaldi::nnet1::FixedAttentionComponent::GetParams(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))();
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::GetParams(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 200) + 16) + 184))();
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetParams(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 192))();
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::SetParams(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 208) + 16) + 192))();
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SumParams(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 208))();
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::SumParams(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 224) + 16) + 208))();
}

uint64_t kaldi::nnet1::FixedAttentionComponent::PerturbParams(kaldi::nnet1::FixedAttentionComponent *this, float a2)
{
  return (*(uint64_t (**)(float))(**((void **)this + 2) + 216))(a2);
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::PerturbParams(kaldi::nnet1::FixedAttentionComponent *this, float a2)
{
  return (*(uint64_t (**)(float))(**(void **)((char *)this + *(void *)(*(void *)this - 232) + 16)
                                          + 216))(a2);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::Info(kaldi::nnet1::FixedAttentionComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  (*(void (**)(kaldi::nnet1::FixedAttentionComponent *, void *, void))(*(void *)this + 96))(this, v7, 0);
  (*(void (**)(void **__return_ptr))(**((void **)this + 2) + 64))(__p);
  if ((v6 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v6 & 0x80u) == 0) {
    uint64_t v3 = v6;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v2, v3);
  if ((char)v6 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_12F014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::Info(kaldi::nnet1::FixedAttentionComponent *this)
{
  return kaldi::nnet1::FixedAttentionComponent::Info((kaldi::nnet1::FixedAttentionComponent *)((char *)this
                                                                                             + *(void *)(*(void *)this - 80)));
}

uint64_t kaldi::nnet1::FixedAttentionComponent::InfoGradient(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 72))();
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::InfoGradient(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 88) + 16) + 72))();
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetTrainOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(void *)(*(void *)a1 - 24);
  long long v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v2 + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v2 + 56) = v3;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 264))();
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::SetTrainOptions(void *a1, uint64_t a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 280);
  long long v3 = &v2[*(void *)(*(void *)v2 - 24)];
  long long v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v3 + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v3 + 56) = v4;
  return (*(uint64_t (**)(void))(**((void **)v2 + 2) + 264))();
}

void kaldi::nnet1::FixedAttentionComponent::SetSourceStates(uint64_t a1, uint64_t a2, void *a3)
{
  kaldi::nnet1::FixedAttentionComponent::Check((void *)a1);
  uint64_t v21 = a3;
  unint64_t v7 = a3[1] - *a3;
  uint64_t v8 = v7 >> 2;
  if (*(_DWORD *)(a2 + 20) % (int)(v7 >> 2)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)&stru_68.nreloc + 1, "seq_size * num_seq == source.NumRows()", v6);
  }
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)&stru_68.nreloc + 2, "source.NumCols() == source_vec_dim_", v6);
  }
  kaldi::CuMatrix<float>::Resize(a1 + 24, v8, *(unsigned int *)(*(void *)(a1 + 16) + 8), 0, 0);
  if ((int)v8 >= 1)
  {
    unint64_t v9 = 0;
    uint64_t v22 = (v7 >> 2);
    int v10 = *(_DWORD *)(a1 + 12);
    do
    {
      if (v10 >= 1)
      {
        int v11 = *(_DWORD *)(*v21 + 4 * v9);
        if (v11 >= 1)
        {
          int v12 = v11 & ~(v11 >> 31);
          unsigned int v13 = v9 + v8 * (v11 - 1);
          int v14 = 1;
          do
          {
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v24, a1 + 24, 0, *(_DWORD *)(a1 + 44), (const char *)(*(_DWORD *)(a1 + 8) * (v14 - 1)), *(_DWORD *)(a1 + 8));
            if (v9 >= HIDWORD(v25)) {
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v17);
            }
            uint64_t v28 = v25 + 4 * (int)v26 * (int)v9;
            int v27 = &off_262E20;
            uint64_t v29 = DWORD2(v25);
            uint64_t v30 = *((void *)&v26 + 1);
            if (*(_DWORD *)(a2 + 20) <= v13) {
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v17);
            }
            unsigned int v18 = *(_DWORD *)(a2 + 16);
            uint64_t v19 = *(void *)(a2 + 32);
            v23[1] = *(void *)(a2 + 8) + 4 * (int)(*(_DWORD *)(a2 + 24) * v13);
            v23[0] = &off_262E20;
            v23[2] = v18;
            v23[3] = v19;
            kaldi::CuVectorBase<float>::CopyFromVec(&v27, (uint64_t)v23, v15, v16, v17);
            int v27 = &off_262E20;
            uint64_t v28 = 0;
            LODWORD(v29) = 0;
            uint64_t v30 = 0;
            uint64_t v24 = off_262D80;
            long long v25 = 0u;
            long long v26 = 0u;
            fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v24);
            int v10 = *(_DWORD *)(a1 + 12);
            if (v14 >= v10) {
              break;
            }
            v13 -= v8;
          }
          while (v12 != v14++);
        }
      }
      ++v9;
    }
    while (v9 != v22);
  }
}

void sub_12F45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void (**a16)())
{
  a16 = off_262D80;
  *uint64_t v16 = 0u;
  v16[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FixedAttentionComponent::GetSourceDiffs(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  kaldi::nnet1::FixedAttentionComponent::Check((void *)a1);
  long long v26 = a3;
  unint64_t v9 = a3[1] - *a3;
  unint64_t v10 = v9 >> 2;
  uint64_t v11 = *(unsigned int *)(a2 + 20);
  if ((int)v11 % (int)(v9 >> 2)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", &stru_B8.sectname[3], "seq_size * num_seq == source.NumRows()", v8);
  }
  uint64_t v12 = *(unsigned int *)(a2 + 16);
  if (v12 != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", &stru_B8.sectname[4], "source.NumCols() == source_vec_dim_", v8);
  }
  if (*(_DWORD *)(a1 + 92) != v10) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", &stru_B8.sectname[5], "accumed_source_states_diff_.NumRows() == num_seq", v8);
  }
  if (*(_DWORD *)(a1 + 88) != *(_DWORD *)(a1 + 12) * v12) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", &stru_B8.sectname[6], "accumed_source_states_diff_.NumCols() == max_attentions_ * source_vec_dim_", v8);
  }
  kaldi::CuMatrix<float>::Resize(a4, v11, v12, 0, 0);
  if ((int)v10 >= 1)
  {
    unint64_t v14 = 0;
    uint64_t v27 = (v9 >> 2);
    int v15 = *(_DWORD *)(a1 + 12);
    do
    {
      if (v15 >= 1)
      {
        int v16 = *(_DWORD *)(*v26 + 4 * v14);
        if (v16 >= 1)
        {
          int v17 = v16 & ~(v16 >> 31);
          unsigned int v18 = v14 + v10 * (v16 - 1);
          int v19 = 1;
          do
          {
            if (*(_DWORD *)(a4 + 20) <= v18) {
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v13);
            }
            unsigned int v20 = *(_DWORD *)(a4 + 16);
            uint64_t v21 = *(void *)(a4 + 32);
            v35[1] = *(void *)(a4 + 8) + 4 * (int)(*(_DWORD *)(a4 + 24) * v18);
            v35[0] = &off_262E20;
            v35[2] = v20;
            v35[3] = v21;
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v28, a1 + 72, 0, *(_DWORD *)(a1 + 92), (const char *)(*(_DWORD *)(a1 + 8) * (v19 - 1)), *(_DWORD *)(a1 + 8));
            if (v14 >= HIDWORD(v29)) {
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v24);
            }
            uint64_t v32 = v29 + 4 * (int)v30 * (int)v14;
            uint64_t v31 = &off_262E20;
            uint64_t v33 = DWORD2(v29);
            uint64_t v34 = *((void *)&v30 + 1);
            kaldi::CuVectorBase<float>::CopyFromVec(v35, (uint64_t)&v31, v22, v23, v24);
            uint64_t v31 = &off_262E20;
            uint64_t v32 = 0;
            LODWORD(v33) = 0;
            uint64_t v34 = 0;
            uint64_t v28 = off_262D80;
            long long v29 = 0u;
            long long v30 = 0u;
            fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v28);
            int v15 = *(_DWORD *)(a1 + 12);
            if (v19 >= v15) {
              break;
            }
            v18 -= v10;
          }
          while (v17 != v19++);
        }
      }
      ++v14;
    }
    while (v14 != v27);
  }
}

void sub_12F7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (**a12)(), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20)
{
  a18 = 0;
  a19 = 0;
  a20 = 0;
  a12 = off_262D80;
  *unsigned int v20 = 0u;
  v20[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::GetCurrentAlignment()
{
  return 0;
}

uint64_t kaldi::nnet1::FixedAttentionComponent::GetOverallAlignment()
{
  return 0;
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(unsigned char *)(this + 168) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(unsigned char *)(this + 168) = 0;
  }
  return this;
}

void *kaldi::nnet1::FixedAttentionComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double result = kaldi::nnet1::FixedAttentionComponent::Check((void *)a1);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)&stru_B8.size + 2, "in.NumCols() == input_dim_", v9);
  }
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)&stru_B8.size + 4, "batch_idx == 0", v9);
  }
  int v10 = *(_DWORD *)(a1 + 44);
  int v11 = *(_DWORD *)(a2 + 20);
  int v12 = v11 / v10;
  if (v11 / v10 * v10 != v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)&stru_B8.size + 7, "num_seq * seq_size == in.NumRows()", v9);
  }
  int v13 = *(_DWORD *)(a1 + 8);
  int v14 = *(_DWORD *)(a1 + 12);
  *(void *)(a1 + 56) = *(void *)(a3 + 32);
  if (v12 >= 1)
  {
    int v15 = 0;
    unsigned int v18 = v13 * v14;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v22, a1 + 24, 0, *(_DWORD *)(a1 + 44), (const char *)v18, *(_DWORD *)(a1 + 8 + *(void *)(*(void *)a1 - 24)));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v19, a2, v15, v10, 0, *(_DWORD *)(a2 + 16));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v22, (uint64_t)&v19, 111, v16, v17);
      int v19 = off_262D80;
      long long v20 = 0u;
      long long v21 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v19);
      uint64_t v22 = off_262D80;
      long long v23 = 0u;
      long long v24 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v22);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v22, a3, v15, v10, 0, *(_DWORD *)(a3 + 16));
      (*(void (**)(void, uint64_t, void (***)(), void))(**(void **)(a1 + 16)
                                                                                          + 112))(*(void *)(a1 + 16), a1 + 24, &v22, 0);
      uint64_t v22 = off_262D80;
      long long v23 = 0u;
      long long v24 = 0u;
      double result = (void *)fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v22);
      v15 += v10;
      --v12;
    }
    while (v12);
  }
  return result;
}

void sub_12FAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void (**a16)())
{
  a16 = off_262D80;
  *uint64_t v16 = 0u;
  v16[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a16);
  _Unwind_Resume(a1);
}

void *virtual thunk to'kaldi::nnet1::FixedAttentionComponent::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  return kaldi::nnet1::FixedAttentionComponent::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 128), a2, a3, a4);
}

void kaldi::nnet1::FixedAttentionComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  kaldi::nnet1::FixedAttentionComponent::Check((void *)a1);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)&stru_B8.flags + 1, "in.NumCols() == input_dim_", v9);
  }
  if (a6) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)&stru_B8.flags + 2, "batch_idx == 0", v9);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 44);
  int v11 = *(_DWORD *)(a2 + 20);
  int v12 = v11 / (int)v10;
  if (v11 / (int)v10 * v10 != v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)&stru_B8.reserved1 + 1, "num_seq * seq_size == in.NumRows()", v9);
  }
  uint64_t v13 = (*(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 12));
  *(void *)(a1 + 104) = *(void *)(a5 + 32);
  *(void *)(a1 + 152) = *(void *)(a5 + 32);
  unsigned int v25 = v13;
  kaldi::CuMatrix<float>::Resize(a1 + 72, v10, v13, 0, 0);
  kaldi::CuMatrix<float>::Resize(a1 + 120, v10, *(unsigned int *)(*(void *)(a1 + 16) + 8), 0, 0);
  if (v12 >= 1)
  {
    int v14 = 0;
    do
    {
      uint64_t v15 = *(void *)(a1 + 16);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v32, a2, v14, v10, 0, *(_DWORD *)(a2 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v29, a3, v14, v10, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v26, a4, v14, v10, 0, *(_DWORD *)(a4 + 16));
      (*(void (**)(uint64_t, void (***)(), void (***)(), void (***)(), uint64_t, void))(*(void *)v15 + 128))(v15, &v32, &v29, &v26, a1 + 120, 0);
      long long v26 = off_262D80;
      long long v27 = 0u;
      long long v28 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v26);
      long long v29 = off_262D80;
      long long v30 = 0u;
      long long v31 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v29);
      uint64_t v32 = off_262D80;
      long long v33 = 0u;
      long long v34 = 0u;
      uint64_t v16 = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v32);
      kaldi::CuSubMatrix<float>::CuSubMatrix(v16, a5, v14, v10, 0, *(_DWORD *)(a5 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v29, a1 + 120, 0, *(_DWORD *)(a1 + 140), (const char *)v25, *(_DWORD *)(a1 + 8 + *(void *)(*(void *)a1 - 24)));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v32, (uint64_t)&v29, 111, v17, v18);
      long long v29 = off_262D80;
      long long v30 = 0u;
      long long v31 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v29);
      uint64_t v32 = off_262D80;
      long long v33 = 0u;
      long long v34 = 0u;
      uint64_t v19 = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v32);
      kaldi::CuSubMatrix<float>::CuSubMatrix(v19, a1 + 120, 0, *(_DWORD *)(a1 + 140), 0, v25);
      kaldi::CuMatrixBase<float>::AddMat(a1 + 72, (uint64_t)&v32, 111, v20, v21, 1.0, 1.0);
      uint64_t v32 = off_262D80;
      long long v33 = 0u;
      long long v34 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v32);
      v14 += v10;
      --v12;
    }
    while (v12);
  }
}

void sub_12FF24(_Unwind_Exception *a1)
{
  *(void *)(v2 - 128) = off_262D80;
  *uint64_t v1 = 0u;
  v1[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2 - 128);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::FixedAttentionComponent::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetGradientNormalization(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 240))();
}

uint64_t virtual thunk to'kaldi::nnet1::FixedAttentionComponent::SetGradientNormalization(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 256) + 16) + 240))();
}

void kaldi::nnet1::FixedAttentionComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::FixedAttentionComponent::Check((void *)a1);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", &stru_108.segname[8], "input.NumCols() == input_dim_", v10);
  }
  if (a5) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", &stru_108.segname[9], "batch_idx == 0", v10);
  }
  int v11 = *(_DWORD *)(a1 + 44);
  int v12 = *(_DWORD *)(a2 + 20);
  int v13 = v12 / v11;
  if (v12 / v11 * v11 != v12) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", &stru_108.segname[12], "num_seq * seq_size == input.NumRows()", v10);
  }
  int v14 = *(_DWORD *)(a1 + 8);
  int v15 = *(_DWORD *)(a1 + 12);
  *(void *)(a1 + 56) = a4;
  uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 272))(*(void *)(a1 + 16));
  long long v28 = off_26E7B8;
  long long v17 = *(_OWORD *)(v16 + 23);
  *(_OWORD *)long long v29 = *(_OWORD *)(v16 + 8);
  *(_OWORD *)((char *)&v29[3] + 3) = v17;
  float v18 = v29[0];
  v29[0] = v29[0] / (float)v13;
  (*(void (**)(void))(**(void **)(a1 + 16) + 264))();
  if (v13 >= 1)
  {
    int v19 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v25, a1 + 24, 0, *(_DWORD *)(a1 + 44), (const char *)(v14 * v15), *(_DWORD *)(a1 + 8 + *(void *)(*(void *)a1 - 24)));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v22, a2, v19, v11, 0, *(_DWORD *)(a2 + 16));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v25, (uint64_t)&v22, 111, v20, v21);
      uint64_t v22 = off_262D80;
      long long v23 = 0u;
      long long v24 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v22);
      unsigned int v25 = off_262D80;
      long long v26 = 0u;
      long long v27 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v25);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v25, a3, v19, v11, 0, *(_DWORD *)(a3 + 16));
      (*(void (**)(void, uint64_t, void (***)(), uint64_t, void))(**(void **)(a1 + 16) + 232))(*(void *)(a1 + 16), a1 + 24, &v25, a4, 0);
      (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 16) + 256))(*(void *)(a1 + 16), a4, 0);
      unsigned int v25 = off_262D80;
      long long v26 = 0u;
      long long v27 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v25);
      v19 += v11;
      --v13;
    }
    while (v13);
  }
  v29[0] = v18;
  (*(void (**)(void, void (***)(kaldi::nnet1::NnetTrainOptions *__hidden)))(**(void **)(a1 + 16)
                                                                                                  + 264))(*(void *)(a1 + 16), &v28);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&v28);
}

void sub_130420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::FixedAttentionComponent::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
}

void kaldi::nnet1::FixedAttentionComponent::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (const void *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 64))(a1);
  int v11 = v9[11];
  int v12 = *(_DWORD *)(a2 + 20);
  int v13 = v12 / v11;
  if (v12 / v11 * v11 != v12) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)&stru_108.reloff + 3, "num_seq * seq_size == input.NumRows()", v10);
  }
  int v14 = v9;
  int v15 = a1[3];
  int v16 = a1[2];
  uint64_t v17 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 112))(a1);
  kaldi::Vector<float>::Resize(a4, v17, 0, v18, v19);
  uint64_t v20 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 112))(a1);
  memset(v36, 0, sizeof(v36));
  kaldi::Vector<float>::Resize(v36, v20, 1, v21, v22);
  if (v13 > 0)
  {
    uint64_t v29 = (uint64_t)a4;
    int v23 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v30, (uint64_t)(v14 + 6), 0, v14[11], (const char *)(v16 * v15), *(_DWORD *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 8));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v33, a2, v23, v11, 0, *(_DWORD *)(a2 + 16));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v30, (uint64_t)&v33, 111, v24, v25);
      long long v33 = off_262D80;
      long long v34 = 0u;
      long long v35 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v33);
      long long v30 = off_262D80;
      long long v31 = 0u;
      long long v32 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v30);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v33, a3, v23, v11, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuMatrix<float>::CuMatrix(&v30, &v33, 111);
      long long v33 = off_262D80;
      long long v34 = 0u;
      long long v35 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v33);
      (*(void (**)(int *, int *, void (***)(), void **))(*(void *)v14 + 168))(v14, v14 + 6, &v30, v36);
      kaldi::VectorBase<float>::AddVec<float>(v29, (uint64_t)v36, 1.0, v26, v27, v28);
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v30);
      v23 += v11;
      --v13;
    }
    while (v13);
  }
  (*(void (**)(int *))(*(void *)v14 + 8))(v14);
  kaldi::Vector<float>::Destroy((uint64_t)v36);
}

void sub_130838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void (**a19)())
{
  a19 = off_262D80;
  _OWORD *v19 = 0u;
  v19[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a19);
  kaldi::Vector<float>::Destroy(v20 - 104);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::FixedAttentionComponent::GetGradient(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
}

double kaldi::nnet1::GlobalAttentionComponent::GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 220) = a2;
  *((_DWORD *)this + 221) = a3;
  *((_WORD *)this + 444) = 0;
  *((void *)this + 112) = 0;
  *((void *)this + 114) = 0;
  *((void *)this + 113) = 0;
  *((void *)this + 115) = off_26E7B8;
  *((_OWORD *)this + 58) = xmmword_20CEC0;
  *((void *)this + 118) = 0x3BF800000;
  *((_DWORD *)this + 238) = 1;
  *((_WORD *)this + 478) = 0;
  *((unsigned char *)this + 958) = 0;
  *((void *)this + 1) = -1;
  *(void *)this = off_269068;
  *((void *)this + 109) = off_269270;
  double result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = off_262DC8;
  *((unsigned char *)this + 88) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 12) = off_262DC8;
  *((unsigned char *)this + 136) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 18) = off_262DC8;
  *((unsigned char *)this + 184) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((void *)this + 24) = off_262DC8;
  *((unsigned char *)this + 232) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((void *)this + 30) = off_262DC8;
  *((unsigned char *)this + 280) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((void *)this + 36) = off_262DC8;
  *((unsigned char *)this + 328) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((void *)this + 42) = off_262DC8;
  *((unsigned char *)this + 376) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((void *)this + 48) = off_262DC8;
  *((unsigned char *)this + 424) = 0;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((void *)this + 54) = off_262DC8;
  *((unsigned char *)this + 472) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((void *)this + 60) = off_262DC8;
  *((unsigned char *)this + 520) = 0;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((void *)this + 66) = off_262DC8;
  *((unsigned char *)this + 568) = 0;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((void *)this + 72) = off_262DC8;
  *((unsigned char *)this + 616) = 0;
  *((void *)this + 80) = 0;
  *((void *)this + 79) = 0;
  *((void *)this + 81) = 0;
  *((void *)this + 78) = off_262E60;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((void *)this + 82) = off_262DC8;
  *((unsigned char *)this + 696) = 0;
  *((void *)this + 90) = 0;
  *((void *)this + 89) = 0;
  *((void *)this + 91) = 0;
  *((void *)this + 88) = off_262E60;
  *((void *)this + 94) = 0;
  *((void *)this + 93) = 0;
  *((void *)this + 95) = 0;
  *((void *)this + 92) = off_262E60;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((void *)this + 96) = off_262DC8;
  *((unsigned char *)this + 808) = 0;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_DWORD *)this + 216) = -1;
  *((unsigned char *)this + 868) = 0;
  return result;
}

kaldi::nnet1::GlobalAttentionComponent *kaldi::nnet1::GlobalAttentionComponent::GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this, const kaldi::nnet1::GlobalAttentionComponent *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *((void *)this + 110) = *(void *)((char *)a2 + *(void *)(*(void *)a2 - 24) + 8);
  *((_WORD *)this + 444) = 0;
  *((void *)this + 112) = 0;
  *((void *)this + 114) = 0;
  *((void *)this + 113) = 0;
  *((void *)this + 115) = off_26E7B8;
  *((_OWORD *)this + 58) = xmmword_20CEC0;
  *((_DWORD *)this + 236) = -1082130432;
  *(void *)((char *)this + 948) = 0x100000003;
  *((_WORD *)this + 478) = 0;
  *((unsigned char *)this + 958) = 0;
  *((void *)this + 1) = -1;
  *(void *)this = off_269068;
  *((void *)this + 109) = off_269270;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  uint64_t v38 = (char *)this + 48;
  *((void *)this + 6) = off_262DC8;
  *((unsigned char *)this + 88) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  long long v37 = (char *)this + 96;
  *((void *)this + 12) = off_262DC8;
  *((unsigned char *)this + 136) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  long long v36 = (char *)this + 144;
  *((void *)this + 18) = off_262DC8;
  *((unsigned char *)this + 184) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  long long v35 = (char *)this + 192;
  *((void *)this + 24) = off_262DC8;
  *((unsigned char *)this + 232) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  long long v34 = (char *)this + 240;
  *((void *)this + 30) = off_262DC8;
  *((unsigned char *)this + 280) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  long long v33 = (char *)this + 288;
  *((void *)this + 36) = off_262DC8;
  *((unsigned char *)this + 328) = 0;
  unsigned __int8 v6 = (char *)this + 336;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((void *)this + 42) = off_262DC8;
  *((unsigned char *)this + 376) = 0;
  unint64_t v7 = (char *)this + 384;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((void *)this + 48) = off_262DC8;
  *((unsigned char *)this + 424) = 0;
  uint64_t v8 = (char *)this + 432;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((void *)this + 54) = off_262DC8;
  *((unsigned char *)this + 472) = 0;
  unint64_t v9 = (char *)this + 480;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((void *)this + 60) = off_262DC8;
  *((unsigned char *)this + 520) = 0;
  uint64_t v10 = (char *)this + 528;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((void *)this + 66) = off_262DC8;
  *((unsigned char *)this + 568) = 0;
  int v11 = (char *)this + 576;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((void *)this + 72) = off_262DC8;
  *((unsigned char *)this + 616) = 0;
  *((void *)this + 80) = 0;
  *((void *)this + 79) = 0;
  *((void *)this + 81) = 0;
  long long v32 = (char *)this + 624;
  *((void *)this + 78) = off_262E60;
  int v12 = (char *)this + 656;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((void *)this + 82) = off_262DC8;
  *((unsigned char *)this + 696) = 0;
  *((void *)this + 90) = 0;
  *((void *)this + 89) = 0;
  *((void *)this + 91) = 0;
  long long v31 = (char *)this + 704;
  *((void *)this + 88) = off_262E60;
  *((void *)this + 94) = 0;
  *((void *)this + 93) = 0;
  *((void *)this + 95) = 0;
  long long v30 = (char *)this + 736;
  *((void *)this + 92) = off_262E60;
  int v13 = (char *)this + 768;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((void *)this + 96) = off_262DC8;
  *((unsigned char *)this + 808) = 0;
  long long v28 = (char *)this + 840;
  uint64_t v29 = (char *)this + 816;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((void *)this + 1) = *((void *)a2 + 1);
  uint64_t v14 = *((void *)a2 + 2);
  if (!v14)
  {
    uint64_t v26 = "src.src_dot_trans_";
    uint64_t v27 = (unsigned char *)(&stru_20 + 52);
    goto LABEL_12;
  }
  if (!*((void *)a2 + 3))
  {
    uint64_t v26 = "src.tgt_dot_trans_";
    uint64_t v27 = (unsigned char *)(&stru_20 + 53);
    goto LABEL_12;
  }
  if (!*((void *)a2 + 4))
  {
    uint64_t v26 = "src.src_add_trans_";
    uint64_t v27 = (unsigned char *)(&stru_20 + 54);
    goto LABEL_12;
  }
  if (!*((void *)a2 + 5))
  {
    uint64_t v26 = "src.tgt_add_trans_";
    uint64_t v27 = (char *)&stru_20.filesize + 7;
LABEL_12:
    kaldi::KaldiAssertFailure_((kaldi *)"GlobalAttentionComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", v27, v26, a5);
  }
  *((void *)this + 2) = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
  *((void *)this + 3) = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 16))(*((void *)a2 + 3));
  *((void *)this + 4) = (*(uint64_t (**)(void))(**((void **)a2 + 4) + 16))(*((void *)a2 + 4));
  *((void *)this + 5) = (*(uint64_t (**)(void))(**((void **)a2 + 5) + 16))(*((void *)a2 + 5));
  kaldi::CuMatrix<float>::operator=((uint64_t)v38, (uint64_t)a2 + 48);
  kaldi::CuMatrix<float>::operator=((uint64_t)v37, (uint64_t)a2 + 96);
  kaldi::CuMatrix<float>::operator=((uint64_t)v36, (uint64_t)a2 + 144);
  kaldi::CuMatrix<float>::operator=((uint64_t)v35, (uint64_t)a2 + 192);
  kaldi::CuMatrix<float>::operator=((uint64_t)v34, (uint64_t)a2 + 240);
  kaldi::CuMatrix<float>::operator=((uint64_t)v33, (uint64_t)a2 + 288);
  kaldi::CuMatrix<float>::operator=((uint64_t)v6, (uint64_t)a2 + 336);
  kaldi::CuMatrix<float>::operator=((uint64_t)v7, (uint64_t)a2 + 384);
  kaldi::CuMatrix<float>::operator=((uint64_t)v8, (uint64_t)a2 + 432);
  kaldi::CuMatrix<float>::operator=((uint64_t)v9, (uint64_t)a2 + 480);
  kaldi::CuMatrix<float>::operator=((uint64_t)v10, (uint64_t)a2 + 528);
  kaldi::CuMatrix<float>::operator=((uint64_t)v11, (uint64_t)a2 + 576);
  kaldi::CuVector<float>::operator=((uint64_t)v32, (uint64_t)a2 + 624, v16, v17, v18);
  kaldi::CuMatrix<float>::operator=((uint64_t)v12, (uint64_t)a2 + 656);
  kaldi::CuVector<float>::operator=((uint64_t)v31, (uint64_t)a2 + 704, v19, v20, v21);
  kaldi::CuVector<float>::operator=((uint64_t)v30, (uint64_t)a2 + 736, v22, v23, v24);
  kaldi::CuMatrix<float>::operator=((uint64_t)v13, (uint64_t)a2 + 768);
  if (this != a2)
  {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)v29, *((void *)a2 + 102), *((void *)a2 + 103), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 103) - *((void *)a2 + 102)) >> 3));
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v28, *((char **)a2 + 105), *((void *)a2 + 106), (uint64_t)(*((void *)a2 + 106) - *((void *)a2 + 105)) >> 2);
  }
  *((_DWORD *)this + 216) = *((_DWORD *)a2 + 216);
  *((unsigned char *)this + 868) = *((unsigned char *)a2 + 868);
  return this;
}

void sub_131358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, kaldi::nnet1::UpdatableComponent *a10, void **a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  long long v32 = *a11;
  if (*a11)
  {
    *(void *)(v21 + 848) = v32;
    operator delete(v32);
  }
  *(void *)(v30 - 88) = a12;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 88));
  kaldi::CuMatrix<float>::~CuMatrix(v27);
  kaldi::CuVector<float>::~CuVector(a13);
  kaldi::CuVector<float>::~CuVector(a14);
  kaldi::CuMatrix<float>::~CuMatrix(v26);
  kaldi::CuVector<float>::~CuVector(a15);
  kaldi::CuMatrix<float>::~CuMatrix(v25);
  kaldi::CuMatrix<float>::~CuMatrix(v24);
  kaldi::CuMatrix<float>::~CuMatrix(v23);
  kaldi::CuMatrix<float>::~CuMatrix(v22);
  kaldi::CuMatrix<float>::~CuMatrix(v29);
  kaldi::CuMatrix<float>::~CuMatrix(v28);
  kaldi::CuMatrix<float>::~CuMatrix(a16);
  kaldi::CuMatrix<float>::~CuMatrix(a17);
  kaldi::CuMatrix<float>::~CuMatrix(a18);
  kaldi::CuMatrix<float>::~CuMatrix(a19);
  kaldi::CuMatrix<float>::~CuMatrix(a20);
  kaldi::CuMatrix<float>::~CuMatrix(a21);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v21);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GlobalAttentionComponent::~GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[3];
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 4);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 5);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 105);
  if (v8)
  {
    *((void *)this + 106) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void **)((char *)this + 816);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 768);
  kaldi::CuVector<float>::~CuVector((void *)this + 92);
  kaldi::CuVector<float>::~CuVector((void *)this + 88);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 656);
  kaldi::CuVector<float>::~CuVector((void *)this + 78);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 576);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 528);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 480);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 432);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 384);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 336);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 288);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 240);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 192);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 144);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 96);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 48);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(this);
}

void kaldi::nnet1::GlobalAttentionComponent::~GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 872));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 872));

  operator delete();
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::~GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this)
{
  uint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 872);

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::GlobalAttentionComponent::~GlobalAttentionComponent((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(void *)(*(void *)this - 24)));
}

void kaldi::nnet1::GlobalAttentionComponent::Copy(kaldi::nnet1::GlobalAttentionComponent *this)
{
}

void sub_131790()
{
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::Copy(kaldi::nnet1::GlobalAttentionComponent *this)
{
  kaldi::nnet1::GlobalAttentionComponent::Copy((kaldi::nnet1::GlobalAttentionComponent *)((char *)this
                                                                                        + *(void *)(*(void *)this - 32)));
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::GetType(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return 282;
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::GetType(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return 282;
}

void kaldi::nnet1::GlobalAttentionComponent::InitData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  memset(v87, 0, 24);
  uint64_t v6 = a2 + 4;
  uint64_t v7 = (char *)a1 + 12;
  uint64_t v8 = a1 + 1;
  while (1)
  {
    if ((*((unsigned char *)v6 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_44;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v87, a4, a5);
    if (SHIBYTE(v87[2]) < 0) {
      break;
    }
    if (HIBYTE(v87[2]) == 15)
    {
      BOOL v18 = v87[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v87 + 7) == (void *)0x3E736E6F69746E65;
      uint64_t v13 = (uint64_t)v7;
      if (!v18)
      {
LABEL_35:
        if (HIBYTE(v87[2]) == 12)
        {
          uint64_t v19 = v87;
          goto LABEL_39;
        }
        goto LABEL_65;
      }
    }
    else
    {
      if (HIBYTE(v87[2]) != 22) {
        goto LABEL_35;
      }
      BOOL v12 = v87[0] == (void *)0x53656372756F533CLL
         && v87[1] == (void *)0x656D694465746174
         && *(void **)((char *)&v87[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      uint64_t v13 = (uint64_t)v8;
      if (!v12) {
        goto LABEL_65;
      }
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, 0, v13, v9, v10);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v14 = (int *)v87[1];
  if (v87[1] != (char *)&dword_C + 3)
  {
    if (v87[1] != (char *)&dword_14 + 2) {
      goto LABEL_37;
    }
    BOOL v15 = *(void *)v87[0] == 0x53656372756F533CLL && *((void *)v87[0] + 1) == 0x656D694465746174;
    BOOL v16 = v15 && *(void *)((char *)v87[0] + 14) == 0x3E6E6F69736E656DLL;
    uint64_t v13 = (uint64_t)v8;
    if (!v16) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  BOOL v17 = *(void *)v87[0] == 0x6574744178614D3CLL && *(void *)((char *)v87[0] + 7) == 0x3E736E6F69746E65;
  uint64_t v13 = (uint64_t)v7;
  if (v17) {
    goto LABEL_34;
  }
  uint64_t v14 = (int *)v87[1];
LABEL_37:
  if (v14 != &dword_C) {
    goto LABEL_65;
  }
  uint64_t v19 = (void **)v87[0];
LABEL_39:
  uint64_t v20 = *v19;
  int v21 = *((_DWORD *)v19 + 2);
  if (v20 != (void *)0x6E6F706D6F432F3CLL || v21 != 1047817829)
  {
LABEL_65:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 179);
    std::string v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v87[2]) >= 0) {
      int v64 = v87;
    }
    else {
      int v64 = (void **)v87[0];
    }
    if (SHIBYTE(v87[2]) >= 0) {
      uint64_t v65 = HIBYTE(v87[2]);
    }
    else {
      uint64_t v65 = (uint64_t)v87[1];
    }
    uint64_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
    uint64_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" (SourceStateDimension|MaxAttentions)", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86);
  }
LABEL_44:
  uint64_t v23 = a1[2];
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = a1[3];
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = a1[4];
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = a1[5];
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  std::string __p = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  uint64_t v82 = 0;
  kaldi::ExpectToken(a2, 0, (kaldi *)"<SourceDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&__p, v27, v28);
  uint64_t v29 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v82 + 4, v30, v31);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v82, v32, v33);
  kaldi::nnet1::Component::NewComponentOfType(v29);
  if (!v34)
  {
    a1[2] = 0;
LABEL_73:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 202);
    float v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"this is not an updatable component, you used ", 45);
    if (v85 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v85 >= 0) {
      uint64_t v70 = HIBYTE(v85);
    }
    else {
      uint64_t v70 = v84;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)p_p, v70);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86);
  }
  a1[2] = v35;
  if (!v35) {
    goto LABEL_73;
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v35 + 96))(v35, a2, a3);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<TargetDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&__p, v36, v37);
  uint64_t v38 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v82 + 4, v39, v40);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v82, v41, v42);
  kaldi::nnet1::Component::NewComponentOfType(v38);
  if (!v43)
  {
    a1[3] = 0;
LABEL_81:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 214);
    uint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"this is not an updatable component, you used ", 45);
    if (v85 >= 0) {
      v72 = &__p;
    }
    else {
      v72 = __p;
    }
    if (v85 >= 0) {
      uint64_t v73 = HIBYTE(v85);
    }
    else {
      uint64_t v73 = v84;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86);
  }
  a1[3] = v44;
  if (!v44) {
    goto LABEL_81;
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v44 + 96))(v44, a2, a3);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<SourceAddTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&__p, v45, v46);
  std::vector<int> v47 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v82 + 4, v48, v49);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v82, v50, v51);
  kaldi::nnet1::Component::NewComponentOfType(v47);
  if (!v52)
  {
    a1[4] = 0;
LABEL_89:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 226);
    uint64_t v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"this is not an updatable component, you used ", 45);
    if (v85 >= 0) {
      uint64_t v75 = &__p;
    }
    else {
      uint64_t v75 = __p;
    }
    if (v85 >= 0) {
      uint64_t v76 = HIBYTE(v85);
    }
    else {
      uint64_t v76 = v84;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, v76);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86);
  }
  a1[4] = v53;
  if (!v53) {
    goto LABEL_89;
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v53 + 96))(v53, a2, a3);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<TargetAddTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&__p, v54, v55);
  uint64_t v56 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v82 + 4, v57, v58);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v82, v59, v60);
  kaldi::nnet1::Component::NewComponentOfType(v56);
  if (!v61)
  {
    a1[5] = 0;
LABEL_97:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 238);
    uint64_t v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"this is not an updatable component, you used ", 45);
    if (v85 >= 0) {
      uint64_t v78 = &__p;
    }
    else {
      uint64_t v78 = __p;
    }
    if (v85 >= 0) {
      uint64_t v79 = HIBYTE(v85);
    }
    else {
      uint64_t v79 = v84;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86);
  }
  a1[5] = v62;
  if (!v62) {
    goto LABEL_97;
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v62 + 96))(v62, a2, a3);
  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)a1);
  if (SHIBYTE(v85) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v87[2]) < 0) {
    operator delete(v87[0]);
  }
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::Check(uint64_t this)
{
  if (!*(unsigned char *)(this + 868))
  {
    if (*(int *)(this + 12) < 1 || (int v1 = *(_DWORD *)(this + 8), v1 <= 0))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 645);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"component is not initialized, max attention is ", 47);
      uint64_t v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", source state dimension is ", 28);
      std::ostream::operator<<();
    }
    else
    {
      uint64_t v2 = *(void *)(this + 16);
      if (v1 == *(_DWORD *)(v2 + 8))
      {
        uint64_t v3 = *(void *)(this + 32);
        if (v1 == *(_DWORD *)(v3 + 8))
        {
          uint64_t v4 = this + *(void *)(*(void *)this - 24);
          int v5 = *(_DWORD *)(v4 + 8);
          uint64_t v6 = *(void *)(this + 24);
          if (v5 == *(_DWORD *)(v6 + 8))
          {
            uint64_t v7 = *(void *)(this + 40);
            if (v5 == *(_DWORD *)(v7 + 8))
            {
              if (*(_DWORD *)(v2 + 12) == *(_DWORD *)(v6 + 12))
              {
                int v8 = *(_DWORD *)(v3 + 12);
                if (v8 == *(_DWORD *)(v7 + 12))
                {
                  if (*(_DWORD *)(v4 + 12) == v8)
                  {
                    *(unsigned char *)(this + 868) = 1;
                    return this;
                  }
                  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 680);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the source/target add transform has output dim ", 47);
                  BOOL v16 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" , but the component has output dim ", 36);
                  std::ostream::operator<<();
                }
                else
                {
                  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 675);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the source and target add transform has different output dim ", 61);
                  BOOL v15 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" vs ", 4);
                  std::ostream::operator<<();
                }
              }
              else
              {
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 670);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the source and target dot transform has different output dim ", 61);
                uint64_t v14 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" vs ", 4);
                std::ostream::operator<<();
              }
            }
            else
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 665);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the component has input dim ", 28);
              uint64_t v13 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" , but the target add transform has input dim ", 46);
              std::ostream::operator<<();
            }
          }
          else
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 660);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the component has input dim ", 28);
            BOOL v12 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" , but the target dot transform has input dim ", 46);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 655);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"source state dimension is ", 26);
          int v11 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" , but the source add transform has input dim ", 46);
          std::ostream::operator<<();
        }
      }
      else
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 650);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"source state dimension is ", 26);
        uint64_t v10 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" , but the source dot transform has input dim ", 46);
        std::ostream::operator<<();
      }
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  return this;
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::InitData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::GlobalAttentionComponent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v40, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 245);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Reading attention model", 23);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v40);
  }
  memset(__p, 0, sizeof(__p));
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_46;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)__p, v7, v8);
    if (SHIBYTE(__p[2]) < 0) {
      break;
    }
    if (HIBYTE(__p[2]) == 15)
    {
      BOOL v18 = __p[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)__p + 7) == (void *)0x3E736E6F69746E65;
      uint64_t v13 = (uint64_t)a1 + 12;
      if (!v18)
      {
LABEL_37:
        if (HIBYTE(__p[2]) == 12)
        {
          uint64_t v19 = __p;
          goto LABEL_41;
        }
        goto LABEL_65;
      }
    }
    else
    {
      if (HIBYTE(__p[2]) != 22) {
        goto LABEL_37;
      }
      BOOL v12 = __p[0] == (void *)0x53656372756F533CLL
         && __p[1] == (void *)0x656D694465746174
         && *(void **)((char *)&__p[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      uint64_t v13 = (uint64_t)(a1 + 1);
      if (!v12) {
        goto LABEL_65;
      }
    }
LABEL_36:
    kaldi::ReadBasicType<int>(a2, a3, v13, v9, v10);
  }
  uint64_t v14 = (int *)__p[1];
  if (__p[1] != (char *)&dword_C + 3)
  {
    if (__p[1] != (char *)&dword_14 + 2) {
      goto LABEL_39;
    }
    BOOL v15 = *(void *)__p[0] == 0x53656372756F533CLL && *((void *)__p[0] + 1) == 0x656D694465746174;
    BOOL v16 = v15 && *(void *)((char *)__p[0] + 14) == 0x3E6E6F69736E656DLL;
    uint64_t v13 = (uint64_t)(a1 + 1);
    if (!v16) {
      goto LABEL_39;
    }
    goto LABEL_36;
  }
  BOOL v17 = *(void *)__p[0] == 0x6574744178614D3CLL && *(void *)((char *)__p[0] + 7) == 0x3E736E6F69746E65;
  uint64_t v13 = (uint64_t)a1 + 12;
  if (v17) {
    goto LABEL_36;
  }
  uint64_t v14 = (int *)__p[1];
LABEL_39:
  if (v14 != &dword_C) {
    goto LABEL_65;
  }
  uint64_t v19 = (void **)__p[0];
LABEL_41:
  uint64_t v20 = *v19;
  int v21 = *((_DWORD *)v19 + 2);
  if (v20 != (void *)0x6E6F706D6F432F3CLL || v21 != 1047817829)
  {
LABEL_65:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 256);
    long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Unrecognized token ", 19);
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v36 = __p;
    }
    else {
      uint64_t v36 = (void **)__p[0];
    }
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v37 = HIBYTE(__p[2]);
    }
    else {
      uint64_t v37 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
LABEL_46:
  uint64_t v23 = a1[2];
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = a1[3];
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = a1[4];
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = a1[5];
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"<SourceDotTransform>");
  uint64_t v27 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v27)
  {
    a1[2] = 0;
LABEL_73:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 266);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"read source dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
  a1[2] = v28;
  if (!v28) {
    goto LABEL_73;
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  kaldi::ExpectToken(a2, a3, (kaldi *)"<TargetDotTransform>");
  uint64_t v29 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v29)
  {
    a1[3] = 0;
LABEL_75:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 270);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"read target dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
  a1[3] = v30;
  if (!v30) {
    goto LABEL_75;
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  kaldi::ExpectToken(a2, a3, (kaldi *)"<SourceAddTransform>");
  long long v31 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v31)
  {
    a1[4] = 0;
LABEL_77:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 274);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"read source add transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
  a1[4] = v32;
  if (!v32) {
    goto LABEL_77;
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  kaldi::ExpectToken(a2, a3, (kaldi *)"<TargetAddTransform>");
  long long v33 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v33)
  {
    a1[5] = 0;
LABEL_79:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 278);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"read target dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
  a1[5] = v34;
  if (!v34) {
    goto LABEL_79;
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)a1);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_132C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::GlobalAttentionComponent::WriteConfig(int a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<SourceStateDimension>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxAttentions>", v7, v8);
  kaldi::WriteBasicType<int>(a2, (int)a3);

  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v9, v10);
}

void *virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::WriteConfig(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::GlobalAttentionComponent::WriteConfig(a1 + *(void *)(*a1 - 184), a2, a3, a4, a5);
}

void *kaldi::nnet1::GlobalAttentionComponent::WriteData(uint64_t *a1, void *a2, const char *a3, uint64_t a4)
{
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SourceDotTransform>", v8, v9);
  kaldi::nnet1::Component::Write(a1[2], a2, (uint64_t)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v10, v11);
  kaldi::WriteToken(a2, a3, (kaldi *)"<TargetDotTransform>", v12, v13);
  kaldi::nnet1::Component::Write(a1[3], a2, (uint64_t)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v14, v15);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SourceAddTransform>", v16, v17);
  kaldi::nnet1::Component::Write(a1[4], a2, (uint64_t)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v18, v19);
  kaldi::WriteToken(a2, a3, (kaldi *)"<TargetAddTransform>", v20, v21);
  kaldi::nnet1::Component::Write(a1[5], a2, (uint64_t)a3, a4);

  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v22, v23);
}

void *virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::WriteData(void *a1, void *a2, const char *a3, uint64_t a4)
{
  return kaldi::nnet1::GlobalAttentionComponent::WriteData((void *)((char *)a1 + *(void *)(*a1 - 120)), a2, a3, a4);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::NumParams(kaldi::nnet1::GlobalAttentionComponent *this)
{
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 2) + 176))(*((void *)this + 2));
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 3) + 176))(*((void *)this + 3)) + v2;
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 4) + 176))(*((void *)this + 4));
  return v3 + v4 + (*(unsigned int (**)(void))(**((void **)this + 5) + 176))(*((void *)this + 5));
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::NumParams(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return kaldi::nnet1::GlobalAttentionComponent::NumParams((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(void *)(*(void *)this - 192)));
}

void kaldi::nnet1::GlobalAttentionComponent::GetParams(void **a1, uint64_t a2)
{
  uint64_t v4 = ((uint64_t (*)(void **))(*a1)[14])(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 1, v5, v6);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  (*(void (**)(void *, uint64_t *))(*a1[2] + 184))(a1[2], &v28);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  if (v29 > *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  }
  uint64_t v25 = *(void **)a2;
  LODWORD(v26) = v29;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v25, (uint64_t)&v28, v7, v8, v9);
  uint64_t v10 = (int)v29;
  (*(void (**)(void *, uint64_t *))(*a1[3] + 184))(a1[3], &v28);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  if ((v29 + v10) > *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v13);
  }
  uint64_t v25 = (void *)(*(void *)a2 + 4 * v10);
  LODWORD(v26) = v29;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v25, (uint64_t)&v28, v11, v12, v13);
  int v14 = v29;
  (*(void (**)(void *, uint64_t *))(*a1[4] + 184))(a1[4], &v28);
  int v18 = v14 + v10;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  if ((v29 + v18) > *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v17);
  }
  uint64_t v25 = (void *)(*(void *)a2 + 4 * v18);
  LODWORD(v26) = v29;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v25, (uint64_t)&v28, v15, v16, v17);
  int v19 = v29;
  (*(void (**)(void *, uint64_t *))(*a1[5] + 184))(a1[5], &v28);
  int v23 = v19 + v18;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  if ((v29 + v19 + v18) > *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v22);
  }
  uint64_t v25 = (void *)(*(void *)a2 + 4 * v23);
  LODWORD(v26) = v29;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v25, (uint64_t)&v28, v20, v21, v22);
  if (v29 + v23 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)&stru_108.flags, "shift == wei_copy->Dim()", v24);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v28);
}

void sub_13329C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::GetParams(void *a1, uint64_t a2)
{
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetParams(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (v5 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_7;
  }
  uint64_t v18 = *(void *)a2;
  LODWORD(v19) = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 192))(v4, &v18);
  int v7 = (*(uint64_t (**)(void))(*(void *)a1[2] + 176))(a1[2]);
  uint64_t v8 = a1[3];
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 176))(v8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if ((v9 + v7) > *(_DWORD *)(a2 + 8)) {
    goto LABEL_7;
  }
  uint64_t v18 = *(void *)a2 + 4 * v7;
  LODWORD(v19) = v9;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 192))(v8, &v18);
  int v10 = (*(uint64_t (**)(void))(*(void *)a1[3] + 176))(a1[3]) + v7;
  uint64_t v11 = a1[4];
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 176))(v11);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if ((v12 + v10) > *(_DWORD *)(a2 + 8)) {
    goto LABEL_7;
  }
  uint64_t v18 = *(void *)a2 + 4 * v10;
  LODWORD(v19) = v12;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 192))(v11, &v18);
  int v13 = (*(uint64_t (**)(void))(*(void *)a1[4] + 176))(a1[4]) + v10;
  uint64_t v14 = a1[5];
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 176))(v14);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if ((v15 + v13) > *(_DWORD *)(a2 + 8)) {
LABEL_7:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v6);
  uint64_t v18 = *(void *)a2 + 4 * v13;
  LODWORD(v19) = v15;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 192))(v14, &v18);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1[5] + 176))(a1[5]);
  if (result + v13 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)&stru_108.reserved3 + 1, "shift == wei_src.Dim()", v17);
  }
  return result;
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::SetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::GlobalAttentionComponent::SetParams((void *)((char *)a1 + *(void *)(*a1 - 208)), a2);
}

float kaldi::nnet1::GlobalAttentionComponent::SumParams(kaldi::nnet1::GlobalAttentionComponent *this)
{
  float v2 = (*(float (**)(void))(**((void **)this + 2) + 208))(*((void *)this + 2));
  float v3 = v2 + (*(float (**)(void))(**((void **)this + 3) + 208))(*((void *)this + 3));
  float v4 = v3 + (*(float (**)(void))(**((void **)this + 4) + 208))(*((void *)this + 4));
  return v4 + (*(float (**)(void))(**((void **)this + 5) + 208))(*((void *)this + 5));
}

float virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::SumParams(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return kaldi::nnet1::GlobalAttentionComponent::SumParams((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(void *)(*(void *)this - 224)));
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::PerturbParams(kaldi::nnet1::GlobalAttentionComponent *this, float a2)
{
  (*(void (**)(void))(**((void **)this + 2) + 216))(*((void *)this + 2));
  (*(void (**)(void, float))(**((void **)this + 3) + 216))(*((void *)this + 3), a2);
  (*(void (**)(void, float))(**((void **)this + 4) + 216))(*((void *)this + 4), a2);
  float v4 = *(uint64_t (**)(__n128))(**((void **)this + 5) + 216);
  v5.n128_f32[0] = a2;

  return v4(v5);
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::PerturbParams(kaldi::nnet1::GlobalAttentionComponent *this, float a2)
{
  return kaldi::nnet1::GlobalAttentionComponent::PerturbParams((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(void *)(*(void *)this - 232)), a2);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::Info(kaldi::nnet1::GlobalAttentionComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v34);
  (*(void (**)(kaldi::nnet1::GlobalAttentionComponent *, void *, void))(*(void *)this + 96))(this, v34, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"\n## Source Dot Transform: input-dim ", 36);
  float v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", output-dim ", 13);
  float v3 = (void *)std::ostream::operator<<();
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((void **)this + 2) + 64))(v32);
  if ((v33 & 0x80u) == 0) {
    __n128 v5 = v32;
  }
  else {
    __n128 v5 = (void **)v32[0];
  }
  if ((v33 & 0x80u) == 0) {
    uint64_t v6 = v33;
  }
  else {
    uint64_t v6 = (uint64_t)v32[1];
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n## Target Dot Transform: input-dim ", 36);
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", output-dim ", 13);
  int v9 = (void *)std::ostream::operator<<();
  int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((void **)this + 3) + 64))(v30);
  if ((v31 & 0x80u) == 0) {
    uint64_t v11 = v30;
  }
  else {
    uint64_t v11 = (void **)v30[0];
  }
  if ((v31 & 0x80u) == 0) {
    uint64_t v12 = v31;
  }
  else {
    uint64_t v12 = (uint64_t)v30[1];
  }
  int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n## Source Add Transform: input-dim ", 36);
  uint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", output-dim ", 13);
  int v15 = (void *)std::ostream::operator<<();
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((void **)this + 4) + 64))(v28);
  if ((v29 & 0x80u) == 0) {
    BOOL v17 = v28;
  }
  else {
    BOOL v17 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    uint64_t v18 = v29;
  }
  else {
    uint64_t v18 = (uint64_t)v28[1];
  }
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n## Target Add Transform: input-dim ", 36);
  uint64_t v20 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", output-dim ", 13);
  uint64_t v21 = (void *)std::ostream::operator<<();
  uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((void **)this + 5) + 64))(__p);
  if ((v27 & 0x80u) == 0) {
    int v23 = __p;
  }
  else {
    int v23 = (void **)__p[0];
  }
  if ((v27 & 0x80u) == 0) {
    uint64_t v24 = v27;
  }
  else {
    uint64_t v24 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
  if ((char)v27 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v29 < 0) {
    operator delete(v28[0]);
  }
  if ((char)v31 < 0) {
    operator delete(v30[0]);
  }
  if ((char)v33 < 0) {
    operator delete(v32[0]);
  }
  std::stringbuf::str();
  if (v35 < 0) {
    operator delete((void *)v34[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_133C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  std::ostringstream::~ostringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::Info(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return kaldi::nnet1::GlobalAttentionComponent::Info((kaldi::nnet1::GlobalAttentionComponent *)((char *)this
                                                                                               + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::GlobalAttentionComponent::InfoGradient(kaldi::nnet1::GlobalAttentionComponent *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 2) + 72))(&v27);
  (*(void (**)(void **__return_ptr))(**((void **)this + 3) + 72))(v25);
  if ((v26 & 0x80u) == 0) {
    float v4 = v25;
  }
  else {
    float v4 = (void **)v25[0];
  }
  if ((v26 & 0x80u) == 0) {
    std::string::size_type v5 = v26;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v25[1];
  }
  uint64_t v6 = std::string::append(&v27, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**((void **)this + 4) + 72))(v23);
  if ((v24 & 0x80u) == 0) {
    uint64_t v8 = v23;
  }
  else {
    uint64_t v8 = (void **)v23[0];
  }
  if ((v24 & 0x80u) == 0) {
    std::string::size_type v9 = v24;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v23[1];
  }
  int v10 = std::string::append(&v28, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**((void **)this + 5) + 72))(v21);
  if ((v22 & 0x80u) == 0) {
    uint64_t v12 = v21;
  }
  else {
    uint64_t v12 = (void **)v21[0];
  }
  if ((v22 & 0x80u) == 0) {
    std::string::size_type v13 = v22;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v21[1];
  }
  uint64_t v14 = std::string::append(&v29, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "\n");
  if ((v20 & 0x80u) == 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = (void **)__p[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v17 = v20;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)__p[1];
  }
  uint64_t v18 = std::string::append(&v30, (const std::string::value_type *)v16, v17);
  *a2 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((char)v20 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if ((char)v22 < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if ((char)v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if ((char)v26 < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_133F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v45 - 41) < 0) {
    operator delete(*(void **)(v45 - 64));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v45 - 73) < 0) {
    operator delete(*(void **)(v45 - 96));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::InfoGradient(kaldi::nnet1::GlobalAttentionComponent *this@<X0>, std::string *a2@<X8>)
{
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetTrainOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + *(void *)(*(void *)a1 - 24);
  long long v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v3 + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v3 + 56) = v4;
  (*(void (**)(void))(**(void **)(a1 + 16) + 264))();
  (*(void (**)(void))(**(void **)(a1 + 24) + 264))();
  (*(void (**)(void))(**(void **)(a1 + 32) + 264))();
  std::string::size_type v5 = *(uint64_t (**)(void))(**(void **)(a1 + 40) + 264);

  return v5();
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::SetTrainOptions(void *a1, uint64_t a2)
{
  return kaldi::nnet1::GlobalAttentionComponent::SetTrainOptions((uint64_t)a1 + *(void *)(*a1 - 280), a2);
}

void kaldi::nnet1::GlobalAttentionComponent::SetSourceStates(uint64_t a1, uint64_t a2, int **a3)
{
  kaldi::nnet1::GlobalAttentionComponent::Check(a1);
  uint64_t v7 = (char *)a3[1] - (char *)*a3;
  int v8 = *(_DWORD *)(a2 + 20);
  int v9 = v8 / (int)((unint64_t)v7 >> 2);
  if (v9 * ((unint64_t)v7 >> 2) != v8) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)&stru_158.size + 3, "seq_size * num_seq == source.NumRows()", v6);
  }
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)&stru_158.size + 4, "source.NumCols() == source_vec_dim_", v6);
  }
  kaldi::CuMatrix<float>::operator=(a1 + 384, a2);
  if ((int **)(a1 + 840) != a3) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 840), (char *)*a3, (uint64_t)a3[1], a3[1] - *a3);
  }
  uint64_t v12 = *a3 + 1;
  int v11 = **a3;
  *(_DWORD *)(a1 + 864) = v11;
  std::string::size_type v13 = a3[1];
  while (v12 != v13)
  {
    int v14 = *v12;
    if (*v12 > v11)
    {
      *(_DWORD *)(a1 + 864) = v14;
      int v11 = v14;
    }
    ++v12;
  }
  if (v11 >= *(_DWORD *)(a1 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)&stru_158.align + 1, "max_src_length_ < max_attentions_", v10);
  }
  if (v11 >= v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)&stru_158.align + 2, "max_src_length_ + 1 <= seq_size", v10);
  }
  kaldi::nnet1::Component::Propagate(*(_DWORD **)(a1 + 16), a1 + 384, a1 + 48, 0);
  kaldi::nnet1::Component::Propagate(*(_DWORD **)(a1 + 32), a1 + 384, a1 + 144, 0);
  std::string __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 816), (int)(v7 >> 2), (uint64_t)&__p);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
}

void sub_134340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<int>>::assign(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= a2)
  {
    unint64_t v13 = (a1[1] - (uint64_t)v6) / 24;
    if (v13 >= a2) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = (a1[1] - (uint64_t)v6) / 24;
    }
    for (; v14; --v14)
    {
      if (v6 != (char *)a3) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v6, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      }
      v6 += 24;
    }
    if (a2 <= v13)
    {
      uint64_t v18 = a1[1];
      uint64_t v19 = *a1 + 24 * a2;
      if (v18 != v19)
      {
        uint64_t v20 = a1[1];
        do
        {
          unsigned __int8 v22 = *(void **)(v20 - 24);
          v20 -= 24;
          uint64_t v21 = v22;
          if (v22)
          {
            *(void *)(v18 - 16) = v21;
            operator delete(v21);
          }
          uint64_t v18 = v20;
        }
        while (v20 != v19);
      }
      a1[1] = v19;
    }
    else
    {
      long long v15 = (void *)a1[1];
      uint64_t v16 = &v15[3 * (a2 - v13)];
      uint64_t v17 = -24 * v13 + 24 * a2;
      do
      {
        void *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v15, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        v15 += 3;
        v17 -= 24;
      }
      while (v17);
      a1[1] = (uint64_t)v16;
    }
  }
  else
  {
    std::vector<std::vector<int>>::__vdeallocate(a1);
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v7 <= a2) {
      unint64_t v7 = a2;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
      unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v8 = v7;
    }
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, v8);
    int v9 = (void *)a1[1];
    uint64_t v10 = 3 * a2;
    int v11 = &v9[3 * a2];
    uint64_t v12 = 8 * v10;
    do
    {
      void *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v9, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v9 += 3;
      v12 -= 24;
    }
    while (v12);
    a1[1] = (uint64_t)v11;
  }
}

void sub_134534(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::GetSourceDiffs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::GlobalAttentionComponent::Check(a1);
  if (*(_DWORD *)(a2 + 20) != *(_DWORD *)(a1 + 404)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)&stru_158.flags + 2, "source.NumRows() == source_states_.NumRows()", v8);
  }
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 400)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)&stru_158.flags + 3, "source.NumCols() == source_states_.NumCols()", v8);
  }
  size_t v9 = *(void *)(a3 + 8) - *(void *)a3;
  uint64_t v10 = *(const void **)(a1 + 840);
  if (v9 != *(void *)(a1 + 848) - (void)v10 || memcmp(*(const void **)a3, v10, v9)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)&stru_158.reserved1, "sequence_length == src_sequence_length_", v8);
  }

  return kaldi::CuMatrix<float>::Swap(a1 + 432, a4);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::GetCurrentAlignment(uint64_t a1, std::vector<int> *this)
{
  int v4 = -1431655765 * ((uint64_t)(*(void *)(a1 + 824) - *(void *)(a1 + 816)) >> 3);
  std::vector<int>::resize(this, v4);
  if (v4 >= 1)
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v6 = v4;
    unint64_t v7 = (uint64_t *)(*(void *)(a1 + 816) + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 3;
      *begin++ = *(_DWORD *)(v8 - 4);
      --v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::GetOverallAlignment(uint64_t a1, uint64_t a2)
{
  if (a1 + 816 != a2) {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(a2, *(void *)(a1 + 816), *(void *)(a1 + 824), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 824) - *(void *)(a1 + 816)) >> 3));
  }
  return 1;
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(unsigned char *)(this + 868) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(unsigned char *)(this + 868) = 0;
  }
  return this;
}

void kaldi::nnet1::GlobalAttentionComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = a1;
  kaldi::nnet1::GlobalAttentionComponent::Check(a1);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(v6 + *(void *)(*(void *)v6 - 24) + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", &stru_1A8.segname[9], "in.NumCols() == input_dim_", v7);
  }
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", &stru_1A8.segname[11], "batch_idx == 0", v7);
  }
  unint64_t v8 = *(void *)(v6 + 848) - *(void *)(v6 + 840);
  uint64_t v9 = *(unsigned int *)(a2 + 20);
  unint64_t v89 = v8 >> 2;
  int v88 = (int)v9 / (int)(v8 >> 2);
  if (v88 * (v8 >> 2) != v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)&stru_1A8.addr + 1, "num_seq * tgt_seq_size == in.NumRows()", v7);
  }
  int v10 = *(_DWORD *)(v6 + 404);
  uint64_t v11 = v6 + 96;
  kaldi::nnet1::Component::Propagate(*(_DWORD **)(v6 + 24), a2, v6 + 96, 0);
  uint64_t v84 = v6 + 192;
  kaldi::nnet1::Component::Propagate(*(_DWORD **)(v6 + 40), a2, v6 + 192, 0);
  uint64_t v12 = (_DWORD *)(v6 + 624);
  kaldi::CuVector<float>::Resize(v6 + 624, *(unsigned int *)(v6 + 404), 0, v13, v14);
  uint64_t v15 = *(unsigned int *)(v6 + 404);
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  v113 = 0;
  kaldi::Vector<float>::Resize((void **)&v113, v15, 1, v16, v17);
  kaldi::Matrix<float>::Matrix((uint64_t)&v109);
  uint64_t v18 = v8 >> 2;
  uint64_t v86 = v6 + 480;
  unsigned int v87 = v10 / (int)v89;
  kaldi::CuMatrix<float>::Resize(v6 + 480, v9, (v10 / (int)v89), 1u, 0);
  if (v88 >= 1)
  {
    int v90 = 0;
    uint64_t v83 = v6 + 48;
    uint64_t v92 = (unsigned int *)(v6 + 576);
    uint64_t v82 = v6 + 144;
    uint64_t v19 = (int)((uint64_t)v8 >> 2);
    uint64_t v93 = v6;
    uint64_t v94 = (v8 >> 2);
    uint64_t v80 = v6 + 96;
    uint64_t v78 = "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h";
    uint64_t v79 = "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMat"
          "rixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)";
    uint64_t v81 = (_DWORD *)(v6 + 624);
    do
    {
      kaldi::CuMatrix<float>::operator=((uint64_t)v92, v83);
      int v91 = v90 * v18;
      if (*(int *)(v6 + 864) >= 1)
      {
        int v23 = 0;
        int v24 = 0;
        do
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v106, (uint64_t)v92, v23, v18, 0, *(_DWORD *)(v6 + 592));
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v103, v11, v91, v18, 0, *(_DWORD *)(v6 + 112));
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v106, (uint64_t)&v103, v25, v26, v27);
          uint64_t v103 = off_262D80;
          long long v104 = 0u;
          long long v105 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v103);
          v106 = off_262D80;
          long long v107 = 0u;
          long long v108 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v106);
          ++v24;
          v23 += v18;
        }
        while (v24 < *(_DWORD *)(v6 + 864));
      }
      kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v12, v92, 1.0, 0.0, v20, v21, v22);
      kaldi::CuVectorBase<float>::CopyToVec<float>(v12, (uint64_t)&v113, v28, v29, v30);
      kaldi::Matrix<float>::Resize((uint64_t)&v109, v18, v87, 0, 0);
      if ((int)v18 >= 1)
      {
        uint64_t v32 = 0;
        unint64_t v33 = 0;
        int v34 = -(int)v89;
        do
        {
          uint64_t v35 = *(unsigned int *)(*(void *)(v6 + 840) + 4 * v33);
          if ((int)v35 < 1)
          {
            int v38 = -1;
            float v39 = -INFINITY;
          }
          else
          {
            uint64_t v36 = 0;
            int v37 = 0;
            int v38 = -1;
            float v39 = -INFINITY;
            do
            {
              if (v114 <= v34 + (int)v36 + (int)v19) {
                kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", stru_68.sectname, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v31);
              }
              float v40 = *(float *)&v113[4 * v36 + v32];
              if (v40 > v39) {
                int v38 = v37;
              }
              int v41 = v37 + 1;
              if (v40 > v39) {
                float v39 = *(float *)&v113[4 * v36 + v32];
              }
              v36 += v19;
              ++v37;
            }
            while (v35 != v41);
          }
          uint64_t v42 = *(void *)(v6 + 816) + 24 * v33;
          uint64_t v44 = (int **)(v42 + 8);
          uint64_t v43 = *(int **)(v42 + 8);
          int v46 = (void *)(v42 + 16);
          unint64_t v45 = *(void *)(v42 + 16);
          if ((unint64_t)v43 >= v45)
          {
            uint64_t v48 = *(int **)v42;
            uint64_t v49 = ((uint64_t)v43 - *(void *)v42) >> 2;
            unint64_t v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v51 = v45 - (void)v48;
            if (v51 >> 1 > v50) {
              unint64_t v50 = v51 >> 1;
            }
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v50;
            }
            if (v52)
            {
              uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v46, v52);
              uint64_t v43 = *v44;
              uint64_t v48 = *(int **)v42;
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v54 = (int *)&v53[4 * v49];
            *uint64_t v54 = v38;
            std::vector<int> v47 = v54 + 1;
            while (v43 != v48)
            {
              int v55 = *--v43;
              *--uint64_t v54 = v55;
            }
            *(void *)uint64_t v42 = v54;
            void *v44 = v47;
            *int v46 = &v53[4 * v52];
            if (v48) {
              operator delete(v48);
            }
          }
          else
          {
            *uint64_t v43 = v38;
            std::vector<int> v47 = v43 + 1;
          }
          uint64_t v6 = v93;
          void *v44 = v47;
          if ((int)v35 >= 1)
          {
            uint64_t v56 = 0;
            unsigned int v57 = v114;
            uint64_t v58 = &v113[v32];
            float v59 = 0.0;
            int v60 = v35;
            do
            {
              if (v57 <= v34 + (int)v56 + (int)v19) {
                kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", stru_68.sectname, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v31);
              }
              --v60;
              float v61 = expf(*(float *)&v58[4 * v56] - v39);
              *(float *)&v58[4 * v56] = v61;
              float v59 = v59 + v61;
              v56 += v19;
            }
            while (v60);
            uint64_t v62 = 0;
            unint64_t v63 = 0;
            unsigned int v64 = v114;
            unint64_t v65 = v111;
            uint64_t v66 = v109 + 4 * v112 * (int)v33;
            uint64_t v67 = &v113[v32];
            uint64_t v6 = v93;
            while (v64 > v34 + (int)v62 + (int)v19)
            {
              float v68 = &stru_68 + 32;
              if (v33 >= v65 || v63 >= v110) {
                goto LABEL_60;
              }
              *(float *)(v66 + 4 * v63) = (float)(1.0 / v59) * *(float *)&v67[4 * v62];
              v62 += v19;
              if (v35 == ++v63) {
                goto LABEL_46;
              }
            }
            float v68 = &stru_68;
            uint64_t v78 = "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h";
            uint64_t v79 = "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)";
LABEL_60:
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", v78, v68->sectname, v79, v31);
          }
LABEL_46:
          ++v33;
          ++v34;
          v32 += 4;
        }
        while (v33 != v94);
      }
      uint64_t v18 = v89;
      uint64_t v69 = kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v106, v86, v91, v89, 0, *(_DWORD *)(v6 + 496));
      kaldi::CuMatrixBase<float>::CopyFromMat(v69, (uint64_t)&v109, 111, v70, v71);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v103, a3, v91, v89, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v100, v84, v91, v89, 0, *(_DWORD *)(v6 + 208));
      uint64_t v12 = v81;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v103, (uint64_t)&v100, 111, v72, v73);
      v100 = off_262D80;
      long long v101 = 0u;
      long long v102 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v100);
      if ((int)v89 >= 1)
      {
        unint64_t v75 = 0;
        do
        {
          if (v75 >= HIDWORD(v104)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v74);
          }
          unsigned int v76 = *(_DWORD *)(*(void *)(v6 + 840) + 4 * v75);
          v99[1] = v104 + 4 * (int)v105 * (int)v75;
          v99[0] = &off_262E20;
          v99[2] = DWORD2(v104);
          v99[3] = *((void *)&v105 + 1);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v100, v82, v75, v76 * v89, 0, *(_DWORD *)(v6 + 160));
          if (v89 != 1) {
            kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v100, *(_DWORD *)(v6 + 168) * v89);
          }
          if (v75 >= HIDWORD(v107)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v77);
          }
          uint64_t v97 = 0;
          uint64_t v98 = 0;
          uint64_t v96 = 0;
          uint64_t v95 = &off_262E20;
          if (v76 > DWORD2(v107)) {
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)&stru_1A8.size + 4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v77);
          }
          uint64_t v96 = v107 + 4 * (int)v108 * (int)v75;
          LODWORD(v97) = v76;
          uint64_t v98 = *((void *)&v108 + 1);
          kaldi::CuVectorBase<float>::AddMatVec((uint64_t)v99, &v100, CblasTrans, (uint64_t)&v95, v77, 1.0, 1.0);
          v100 = off_262D80;
          long long v101 = 0u;
          long long v102 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v100);
          ++v75;
        }
        while (v94 != v75);
      }
      uint64_t v103 = off_262D80;
      long long v104 = 0u;
      long long v105 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v103);
      v106 = off_262D80;
      long long v107 = 0u;
      long long v108 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v106);
      ++v90;
      uint64_t v11 = v80;
    }
    while (v90 != v88);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)&v109);
  kaldi::Vector<float>::Destroy((uint64_t)&v113);
}

void sub_135060(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(v1 - 184);
  kaldi::Vector<float>::Destroy(v1 - 144);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4)
{
}

void kaldi::nnet1::GlobalAttentionComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  kaldi::nnet1::GlobalAttentionComponent::Check(a1);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", &stru_1F8.segname[6], "in.NumCols() == input_dim_", v11);
  }
  if (a6) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", &stru_1F8.segname[7], "batch_idx == 0", v11);
  }
  uint64_t v59 = a5;
  unint64_t v12 = *(void *)(a1 + 848) - *(void *)(a1 + 840);
  unint64_t v13 = v12 >> 2;
  int v14 = *(_DWORD *)(a2 + 20);
  uint64_t v15 = (v14 / (int)(v12 >> 2));
  if (v15 * (v12 >> 2) != v14) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", &stru_1F8.segname[10], "num_seq * tgt_seq_size == in.NumRows()", v11);
  }
  uint64_t v63 = a1 + 240;
  kaldi::CuMatrix<float>::Resize(a1 + 240, *(unsigned int *)(a1 + 404), *(unsigned int *)(*(void *)(a1 + 16) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(a1 + 288, *(unsigned int *)(a2 + 20), *(unsigned int *)(*(void *)(a1 + 24) + 12), 0, 0);
  uint64_t v62 = a1 + 336;
  kaldi::CuMatrix<float>::Resize(a1 + 336, *(unsigned int *)(a1 + 404), *(unsigned int *)(*(void *)(a1 + 32) + 12), 0, 0);
  if ((int)v15 >= 1)
  {
    uint64_t v18 = 0;
    uint64_t v67 = a1 + 704;
    float v68 = (_DWORD *)(a1 + 656);
    uint64_t v66 = a1 + 736;
    unsigned int v64 = 0;
    unint64_t v65 = (_DWORD *)(a1 + 768);
    uint64_t v61 = (v12 >> 2);
    do
    {
      uint64_t v60 = v18;
      if ((int)v13 >= 1)
      {
        uint64_t v19 = 0;
        do
        {
          uint64_t v20 = *(unsigned int *)(*(void *)(a1 + 840) + 4 * v19);
          kaldi::CuVector<float>::Resize(v67, v20, 1u, v16, v17);
          uint64_t v21 = kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v77, a1 + 144, v19, (int)v20 * (int)v13, 0, *(_DWORD *)(a1 + 160));
          if (v13 != 1) {
            kaldi::CuMatrixBase<float>::SetStride(v21, *(_DWORD *)(a1 + 168) * v13);
          }
          unint64_t v23 = v64 + v19;
          if (v23 >= *(unsigned int *)(a4 + 20)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v22);
          }
          int v24 = v64 + v19;
          unsigned int v25 = *(_DWORD *)(a4 + 16);
          uint64_t v26 = *(void *)(a4 + 32);
          uint64_t v74 = *(void *)(a4 + 8) + 4 * (int)(*(_DWORD *)(a4 + 24) * (v64 + v19));
          uint64_t v73 = &off_262E20;
          uint64_t v75 = v25;
          uint64_t v76 = v26;
          kaldi::CuVectorBase<float>::AddMatVec(v67, &v77, CblasNoTrans, (uint64_t)&v73, v22, 1.0, 0.0);
          uint64_t v77 = off_262D80;
          long long v78 = 0u;
          long long v79 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v77);
          if (v23 >= *(unsigned int *)(a1 + 500)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v27);
          }
          uint64_t v28 = *(void *)(a1 + 488) + 4 * *(_DWORD *)(a1 + 504) * v24;
          unsigned int v29 = *(_DWORD *)(a1 + 496);
          uint64_t v30 = *(void *)(a1 + 512);
          *(void *)&long long v78 = v28;
          uint64_t v77 = &off_262E20;
          *((void *)&v78 + 1) = v29;
          *(void *)&long long v79 = v30;
          uint64_t v75 = 0;
          uint64_t v76 = 0;
          uint64_t v74 = 0;
          uint64_t v73 = &off_262E20;
          if (v20 > v29) {
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)&stru_1A8.size + 4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v27);
          }
          uint64_t v74 = v28;
          LODWORD(v75) = v20;
          uint64_t v76 = v30;
          kaldi::CuMatrix<float>::Resize((uint64_t)v68, v20, v20, 0, 0);
          kaldi::CuMatrixBase<float>::AddToDiag((uint64_t)v68, (uint64_t)&v73, v31, v32, v33, 1.0, 0.0);
          kaldi::CuMatrixBase<float>::AddVecVec((uint64_t)v68, (uint64_t)&v73, (uint64_t)&v73, v34, v35, -1.0, 1.0);
          kaldi::CuVector<float>::Resize(v66, v20, 1u, v36, v37);
          kaldi::CuVectorBase<float>::AddMatVec(v66, v68, CblasNoTrans, v67, v38, 1.0, 0.0);
          uint64_t v39 = kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v77, v63, v19, (int)v20 * (int)v13, 0, *(_DWORD *)(a1 + 256));
          if (v13 != 1) {
            kaldi::CuMatrixBase<float>::SetStride(v39, *(_DWORD *)(a1 + 264) * v13);
          }
          if (v23 >= *(unsigned int *)(a1 + 116)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v41);
          }
          unsigned int v42 = *(_DWORD *)(a1 + 112);
          uint64_t v43 = *(void *)(a1 + 128);
          uint64_t v70 = *(void *)(a1 + 104) + 4 * *(_DWORD *)(a1 + 120) * v24;
          uint64_t v69 = &off_262E20;
          uint64_t v71 = v42;
          uint64_t v72 = v43;
          kaldi::CuMatrixBase<float>::AddVecVec((uint64_t)&v77, v66, (uint64_t)&v69, v40, v41, 1.0, 1.0);
          uint64_t v77 = off_262D80;
          long long v78 = 0u;
          long long v79 = 0u;
          uint64_t v44 = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v77);
          uint64_t v45 = kaldi::CuSubMatrix<float>::CuSubMatrix(v44, v62, v19, (int)v20 * (int)v13, 0, *(_DWORD *)(a1 + 352));
          if (v13 != 1) {
            kaldi::CuMatrixBase<float>::SetStride(v45, *(_DWORD *)(a1 + 360) * v13);
          }
          if (v23 >= *(unsigned int *)(a4 + 20)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v47);
          }
          unsigned int v48 = *(_DWORD *)(a4 + 16);
          uint64_t v49 = *(void *)(a4 + 32);
          uint64_t v70 = *(void *)(a4 + 8) + 4 * *(_DWORD *)(a4 + 24) * v24;
          uint64_t v69 = &off_262E20;
          uint64_t v71 = v48;
          uint64_t v72 = v49;
          kaldi::CuMatrixBase<float>::AddVecVec((uint64_t)&v77, (uint64_t)&v73, (uint64_t)&v69, v46, v47, 1.0, 1.0);
          uint64_t v77 = off_262D80;
          long long v78 = 0u;
          long long v79 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v77);
          kaldi::CuMatrix<float>::Resize((uint64_t)v65, v20, *(unsigned int *)(*(void *)(a1 + 24) + 12), 0, 0);
          uint64_t v50 = kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v77, a1 + 48, v19, (int)v20 * (int)v13, 0, *(_DWORD *)(a1 + 64));
          if (v13 != 1) {
            kaldi::CuMatrixBase<float>::SetStride(v50, *(_DWORD *)(a1 + 72) * v13);
          }
          kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)v65, (uint64_t)v68, CblasNoTrans, (uint64_t)&v77, &stru_68.sectname[7], 1.0, 0.0);
          uint64_t v77 = off_262D80;
          long long v78 = 0u;
          long long v79 = 0u;
          uint64_t v51 = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v77);
          if (v23 >= *(unsigned int *)(a1 + 308)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v52);
          }
          unsigned int v53 = *(_DWORD *)(a1 + 304);
          uint64_t v54 = *(void *)(a1 + 320);
          *(void *)&long long v78 = *(void *)(a1 + 296) + 4 * *(_DWORD *)(a1 + 312) * v24;
          uint64_t v77 = &off_262E20;
          *((void *)&v78 + 1) = v53;
          *(void *)&long long v79 = v54;
          kaldi::CuVectorBase<float>::AddMatVec(v51, v65, CblasTrans, v67, v52, 1.0, 1.0);
          ++v19;
        }
        while (v61 != v19);
      }
      uint64_t v18 = v60 + 1;
      v64 += v13;
    }
    while (v60 + 1 != v15);
  }
  kaldi::CuMatrix<float>::Resize(a1 + 528, *(unsigned int *)(a2 + 20), *(unsigned int *)(*(void *)(a1 + 40) + 8), 0, 0);
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 40) + 128))(*(void *)(a1 + 40), a2, a1 + 192, a4, a1 + 528, 0);
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 24) + 128))(*(void *)(a1 + 24), a2, a1 + 96, a1 + 288, v59, 0);
  kaldi::CuMatrixBase<float>::AddMat(v59, a1 + 528, 111, v55, v56, 1.0, 1.0);
  kaldi::CuMatrix<float>::Resize(a1 + 528, *(unsigned int *)(a1 + 404), *(unsigned int *)(*(void *)(a1 + 32) + 8), 0, 0);
  kaldi::CuMatrix<float>::Resize(a1 + 432, *(unsigned int *)(a1 + 404), *(unsigned int *)(*(void *)(a1 + 32) + 8), 0, 0);
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 32) + 128))(*(void *)(a1 + 32), a1 + 384, a1 + 144, v62, a1 + 528, 0);
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 16) + 128))(*(void *)(a1 + 16), a1 + 384, a1 + 48, v63, a1 + 432, 0);
  kaldi::CuMatrixBase<float>::AddMat(a1 + 432, a1 + 528, 111, v57, v58, 1.0, 1.0);
}

void sub_135B14(_Unwind_Exception *a1)
{
  *(void *)(v2 - 128) = off_262D80;
  *uint64_t v1 = 0u;
  v1[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2 - 128);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetGradientNormalization(void **a1, uint64_t a2, float a3)
{
  (*(void (**)(void *))(*a1[2] + 240))(a1[2]);
  (*(void (**)(void *, uint64_t, float))(*a1[3] + 240))(a1[3], a2, a3);
  (*(void (**)(void *, uint64_t, float))(*a1[4] + 240))(a1[4], a2, a3);
  uint64_t v6 = *(uint64_t (**)(__n128))(*a1[5] + 240);
  v7.n128_f32[0] = a3;

  return v6(v7);
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::SetGradientNormalization(void *a1, uint64_t a2, float a3)
{
  return kaldi::nnet1::GlobalAttentionComponent::SetGradientNormalization((void **)((char *)a1 + *(void *)(*a1 - 256)), a2, a3);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::nnet1::GlobalAttentionComponent::Check(a1);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", &stru_248.sectname[14], "input.NumCols() == input_dim_", v9);
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 16) + 232))(*(void *)(a1 + 16), a1 + 384, a1 + 240, a4, a5);
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 24) + 232))(*(void *)(a1 + 24), a2, a1 + 288, a4, a5);
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 32) + 232))(*(void *)(a1 + 32), a1 + 384, a1 + 336, a4, a5);
  int v10 = *(uint64_t (**)(void))(**(void **)(a1 + 40) + 232);

  return v10();
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return kaldi::nnet1::GlobalAttentionComponent::AccumGradients((uint64_t)a1 + *(void *)(*a1 - 248), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::UpdateWeights(kaldi::nnet1::GlobalAttentionComponent *this, void *a2, uint64_t a3)
{
  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)this);
  (*(void (**)(void, void *, uint64_t))(**((void **)this + 2) + 256))(*((void *)this + 2), a2, a3);
  (*(void (**)(void))(**((void **)this + 3) + 256))();
  (*(void (**)(void))(**((void **)this + 4) + 256))();
  uint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 5) + 256);

  return v6();
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::UpdateWeights(kaldi::nnet1::GlobalAttentionComponent *this, void *a2, uint64_t a3)
{
  return kaldi::nnet1::GlobalAttentionComponent::UpdateWeights((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(void *)(*(void *)this - 272)), a2, a3);
}

void kaldi::nnet1::GlobalAttentionComponent::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v8, 1, v9, v10);
  uint64_t v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  if (v11) {
  else
  }
    unint64_t v12 = 0;
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v39, *(unsigned int *)(a2 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v35 = off_262DC8;
  char v38 = 0;
  kaldi::nnet1::Component::Backpropagate((void **)((char *)v12 + *(*v12 - 3)), a2, (uint64_t)v39, a3, (uint64_t)&v35, 0);
  uint64_t v13 = a1 + 384;
  (*(void (**)(void *, uint64_t, void **, uint64_t *))(*v12[2] + 224))(v12[2], v13, v12 + 30, &v40);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  if (v41 > *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v16);
  }
  uint64_t v32 = *(void **)a4;
  LODWORD(v33) = v41;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v32, (uint64_t)&v40, v14, v15, v16);
  uint64_t v17 = (int)v41;
  (*(void (**)(void *, uint64_t, void **, uint64_t *))(*v12[3] + 224))(v12[3], a2, v12 + 36, &v40);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if ((v41 + v17) > *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v20);
  }
  uint64_t v32 = (void *)(*(void *)a4 + 4 * v17);
  LODWORD(v33) = v41;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v32, (uint64_t)&v40, v18, v19, v20);
  int v21 = v41;
  (*(void (**)(void *, uint64_t, void **, uint64_t *))(*v12[4] + 224))(v12[4], v13, v12 + 42, &v40);
  int v25 = v21 + v17;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if ((v41 + v21 + v17) > *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v24);
  }
  uint64_t v32 = (void *)(*(void *)a4 + 4 * v25);
  LODWORD(v33) = v41;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v32, (uint64_t)&v40, v22, v23, v24);
  int v26 = v41;
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t *))(*v12[5] + 224))(v12[5], a2, a3, &v40);
  int v30 = v26 + v25;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if ((v41 + v26 + v25) > *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v29);
  }
  uint64_t v32 = (void *)(*(void *)a4 + 4 * v30);
  LODWORD(v33) = v41;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v32, (uint64_t)&v40, v27, v28, v29);
  if (v41 + v30 != *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)&stru_248.align, "shift == gradient_out->Dim()", v31);
  }
  ((void (*)(void **))(*v12)[1])(v12);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v35);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v39);
  kaldi::Vector<float>::Destroy((uint64_t)&v40);
}

void sub_136400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  kaldi::Vector<float>::Destroy(v4 - 88);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Component::Backpropagate(_DWORD *lpsrc, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (lpsrc[3] != *(_DWORD *)(a4 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24, "Backpropagate", "../subproject/libquasar/libkaldi/src/nnet/nnet-component.h", 712);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Non-matching output dims, component:", 36);
    uint64_t v23 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" data:", 6);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((unsigned char *)lpsrc + 17))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24, "Backpropagate", "../subproject/libquasar/libkaldi/src/nnet/nnet-component.h", 716);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, "Backpropagate() attempted while disabled");
LABEL_22:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
  }
  if (a5)
  {
    kaldi::CuMatrix<float>::Resize(a5, *(unsigned int *)(a2 + 20), lpsrc[2], 0, 0);
    if (*(_DWORD *)(a4 + 20) != *(_DWORD *)(a3 + 20)
      || (*(unsigned int (**)(_DWORD *, void))(*(void *)lpsrc + 56))(lpsrc, *(unsigned int *)(a2 + 20)) != *(_DWORD *)(a3 + 20))
    {
      kaldi::KaldiAssertFailure_((kaldi *)"Backpropagate", "../subproject/libquasar/libkaldi/src/nnet/nnet-component.h", (const char *)&stru_298.reserved1 + 2, "out_diff.NumRows() == out.NumRows() && OutputRowCount(in.NumRows()) == out.NumRows()", v12);
    }
    if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a5 + 16)) {
      kaldi::KaldiAssertFailure_((kaldi *)"Backpropagate", "../subproject/libquasar/libkaldi/src/nnet/nnet-component.h", (const char *)&stru_298.reserved1 + 3, "in.NumCols() == in_diff->NumCols()", v12);
    }
    if (*(_DWORD *)(a3 + 16) != *(_DWORD *)(a4 + 16)) {
      kaldi::KaldiAssertFailure_((kaldi *)"Backpropagate", "../subproject/libquasar/libkaldi/src/nnet/nnet-component.h", (const char *)&stru_298.reserved2, "out.NumCols() == out_diff.NumCols()", v12);
    }
    uint64_t v13 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)lpsrc + 128);
    uint64_t v14 = lpsrc;
    uint64_t v15 = a2;
    uint64_t v16 = a3;
    uint64_t v17 = a4;
    uint64_t v18 = a5;
    goto LABEL_15;
  }
  uint64_t v19 = *(void *)lpsrc;
  if ((*(unsigned int (**)(_DWORD *))(v19 + 24))(lpsrc) == 2055
    || ((uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)lpsrc + 24))(lpsrc), result != 2049)
      ? (BOOL v22 = v20 == 0)
      : (BOOL v22 = 0),
        !v22))
  {
    uint64_t v13 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)lpsrc + 128);
    uint64_t v14 = lpsrc;
    uint64_t v15 = a2;
    uint64_t v16 = a3;
    uint64_t v17 = a4;
    uint64_t v18 = 0;
LABEL_15:
    return v13(v14, v15, v16, v17, v18, a6);
  }
  return result;
}

void sub_136764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::GetGradient(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

kaldi::nnet1::ScaledDotAttention *kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, const kaldi::nnet1::ScaledDotAttention *a2, uint64_t a3)
{
  uint64_t v6 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)a2 + 1);
  uint64_t v7 = *(void *)a2;
  uint64_t *v6 = *(void *)a2;
  *(void *)((char *)this + *(void *)(v7 - 40)) = *((void *)a2 + 5);
  *(void *)((char *)this + *(void *)(*(void *)this - 48)) = *((void *)a2 + 6);
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = *((void *)a2 + 7);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 1) = off_262DC8;
  *((unsigned char *)this + 48) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  LOBYTE(v7) = *(unsigned char *)(a3 + 104);
  int v8 = *(_DWORD *)(a3 + 108);
  *((_OWORD *)this + 7) = 0u;
  uint64_t v9 = (uint64_t *)((char *)this + 112);
  *((void *)this + 7) = off_262DC8;
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 104) = v7;
  *((_DWORD *)this + 27) = v8;
  *((_OWORD *)this + 8) = 0u;
  uint64_t v10 = *(void *)(a3 + 112);
  if (v10)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    uint64_t v12 = *v9;
    uint64_t *v9 = v11;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  uint64_t v13 = *(void *)(a3 + 120);
  if (v13)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
    uint64_t v15 = *((void *)this + 15);
    *((void *)this + 15) = v14;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  uint64_t v16 = *(void *)(a3 + 128);
  if (v16)
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
    uint64_t v18 = *((void *)this + 16);
    *((void *)this + 16) = v17;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = *(void *)(a3 + 136);
  if (v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
    uint64_t v21 = *((void *)this + 17);
    *((void *)this + 17) = v20;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
  }
  return this;
}

void sub_136B04(_Unwind_Exception *a1)
{
  uint64_t v6 = v1[17];
  v1[17] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = v1[16];
  v1[16] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = v1[15];
  v1[15] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *v4;
  *uint64_t v4 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  kaldi::CuMatrix<float>::~CuMatrix(v2);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::ScaledDotAttention *kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, const kaldi::nnet1::ScaledDotAttention *a2)
{
  uint64_t v4 = (char *)a2 + *(void *)(*(void *)a2 - 40);
  *((void *)this + 18) = off_264E70;
  *((void *)this + 19) = *((void *)v4 + 1);
  *((_WORD *)this + 80) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  *(void *)this = off_267180;
  *((void *)this + 24) = off_2671A8;
  std::string::size_type v5 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)off_2698A8);
  v5[18] = (uint64_t)off_2697B8;
  v5[24] = (uint64_t)off_269888;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *std::string::size_type v5 = (uint64_t)off_269688;
  v5[1] = (uint64_t)off_262DC8;
  *((unsigned char *)v5 + 48) = 0;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  v5[7] = (uint64_t)off_262DC8;
  *((unsigned char *)v5 + 96) = 0;
  char v6 = *((unsigned char *)a2 + 104);
  int v7 = *((_DWORD *)a2 + 27);
  *((_OWORD *)v5 + 7) = 0u;
  uint64_t v8 = v5 + 14;
  *((unsigned char *)v5 + 104) = v6;
  *((_DWORD *)v5 + 27) = v7;
  *((_OWORD *)v5 + 8) = 0u;
  uint64_t v9 = *((void *)a2 + 14);
  if (v9)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t v11 = *v8;
    *uint64_t v8 = v10;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = *((void *)a2 + 15);
  if (v12)
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v14 = *((void *)this + 15);
    *((void *)this + 15) = v13;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  uint64_t v15 = *((void *)a2 + 16);
  if (v15)
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
    uint64_t v17 = *((void *)this + 16);
    *((void *)this + 16) = v16;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = *((void *)a2 + 17);
  if (v18)
  {
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    uint64_t v20 = *((void *)this + 17);
    *((void *)this + 17) = v19;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
  }
  return this;
}

void sub_136F2C(_Unwind_Exception *a1)
{
  uint64_t v8 = v1[17];
  v1[17] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v1[16];
  v1[16] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = v1[15];
  v1[15] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *v6;
  uint64_t *v6 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ScaledDotAttention::Copy(kaldi::nnet1::ScaledDotAttention *this)
{
}

void sub_1370DC()
{
}

double kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, int a2, int a3, char a4, float a5)
{
  *((void *)this + 18) = off_264E70;
  *((_DWORD *)this + 38) = a2;
  *((_DWORD *)this + 39) = a3;
  *((_WORD *)this + 80) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  *(void *)this = off_267180;
  *((void *)this + 24) = off_2671A8;
  int v7 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)off_2698A8);
  v7[18] = (uint64_t)off_2697B8;
  *int v7 = (uint64_t)off_269688;
  v7[24] = (uint64_t)off_269888;
  double result = 0.0;
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  v7[1] = (uint64_t)off_262DC8;
  *((unsigned char *)v7 + 48) = 0;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  v7[7] = (uint64_t)off_262DC8;
  *((unsigned char *)v7 + 96) = 0;
  *((unsigned char *)v7 + 104) = a4;
  *((float *)v7 + 27) = a5;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  return result;
}

void kaldi::nnet1::ScaledDotAttention::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 40) + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", &stru_20.segname[8], "in.NumCols() == InputDim()", a5);
  }
  (*(void (**)(void))(*(void *)a1 + 96))();
  if (*(void *)(a1 + 136))
  {
    __n128 v11 = kaldi::CuMatrix<float>::CuMatrix(v12, a3, 111);
    (*(void (**)(void, unsigned char *, uint64_t, uint64_t, __n128))(**(void **)(a1 + 136) + 112))(*(void *)(a1 + 136), v12, a3, a4, v11);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v12);
  }
  if (*(unsigned char *)(a1 + 104)) {
    kaldi::CuMatrixBase<float>::AddMat(a3, a2, 111, v9, v10, 1.0, 1.0);
  }
}

void sub_1373A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void virtual thunk to'kaldi::nnet1::ScaledDotAttention::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

unsigned int *kaldi::nnet1::ScaledDotAttention::SetKeyValueStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(unsigned int *)(a2 + 20);
  if (v6 != *(_DWORD *)(a3 + 20))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "SetKeyValueStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Mismatch in number of key and value pairs in ScaledDotAttention, got ", 69);
    BOOL v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" keys and ", 10);
    uint64_t v23 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, " values");
    goto LABEL_24;
  }
  uint64_t v9 = *(void *)(a1 + 120);
  uint64_t v10 = *(unsigned int *)(a2 + 16);
  if (v9)
  {
    if (v10 != *(_DWORD *)(v9 + 8))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "SetKeyValueStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 79);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Mismatch of key matrix input in ScaledDotAttention, expected ", 61);
      int v24 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", but got ", 10);
      std::ostream::operator<<();
      goto LABEL_24;
    }
    kaldi::CuMatrix<float>::Resize(a1 + 8, v6, *(unsigned int *)(v9 + 12), 0, 0);
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 120) + 112))(*(void *)(a1 + 120), a2, a1 + 8, a4);
  }
  else
  {
    if (v10 != *(_DWORD *)(*(void *)(a1 + 112) + 12))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "SetKeyValueStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 71);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Mismatch of key matrix input in ScaledDotAttention, expected ", 61);
      int v26 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", but got ", 10);
      std::ostream::operator<<();
      goto LABEL_24;
    }
    kaldi::CuMatrix<float>::Resize(a1 + 8, v6, v10, 0, 0);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 8), a2, 111, v11, v12);
  }
  uint64_t v13 = *(void *)(a1 + 128);
  if (v13)
  {
    if (*(_DWORD *)(a3 + 16) == *(_DWORD *)(v13 + 8))
    {
      kaldi::CuMatrix<float>::Resize(a1 + 56, *(unsigned int *)(a3 + 20), *(unsigned int *)(v13 + 12), 0, 0);
      uint64_t v14 = *(uint64_t (**)(void))(**(void **)(a1 + 128) + 112);
      return (unsigned int *)v14();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "SetKeyValueStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 98);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Mismatch of value matrix input in ScaledDotAttention, expected ", 63);
    int v25 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)", but got ", 10);
    std::ostream::operator<<();
LABEL_24:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
  uint64_t v16 = *(void *)(a1 + 136);
  uint64_t v17 = *(unsigned int *)(a3 + 16);
  if (v16) {
    int v18 = *(_DWORD *)(v16 + 8);
  }
  else {
    int v18 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 40) + 12);
  }
  if (v17 != v18)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "SetKeyValueStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Mismatch of value matrix input in ScaledDotAttention, expected ", 63);
    uint64_t v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)", but got ", 10);
    std::ostream::operator<<();
    goto LABEL_24;
  }
  uint64_t v19 = (unsigned int *)(a1 + 56);
  kaldi::CuMatrix<float>::Resize((uint64_t)v19, *(unsigned int *)(a3 + 20), v17, 0, 0);

  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v19, a3, 111, v20, v21);
}

uint64_t kaldi::nnet1::ScaledDotAttention::ClearKeyValueStates(kaldi::nnet1::ScaledDotAttention *this)
{
  long long v9 = 0u;
  long long v8 = 0u;
  int v7 = off_262DC8;
  char v10 = 0;
  long long v5 = 0u;
  long long v4 = 0u;
  uint64_t v3 = off_262DC8;
  char v6 = 0;
  kaldi::CuMatrix<float>::Swap((uint64_t)this + 8, (uint64_t)&v7);
  kaldi::CuMatrix<float>::Swap((uint64_t)this + 56, (uint64_t)&v3);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v3);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v7);
}

void sub_137874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t kaldi::nnet1::ScaledDotAttention::ComputeAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 112) + 12);
  if (v5 != *(_DWORD *)(a1 + 24))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "ComputeAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 117);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "SetKeyValueStores needs to be called in ScaledDotAttention for attention to work");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v10, *(unsigned int *)(a2 + 20), v5, 0, 0, 0);
  (*(void (**)(void, uint64_t, void *, uint64_t))(**(void **)(a1 + 112) + 112))(*(void *)(a1 + 112), a2, v10, a4);
  kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)v10, a1 + 8, a1 + 56, a3, 0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v10);
}

void sub_13799C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v19, *(unsigned int *)(a2 + 20), *(unsigned int *)(a3 + 20), 0, 0, 0);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)v19, a2, CblasNoTrans, a3, &stru_68.sectname[8], 1.0, 0.0);
  float v15 = *(float *)(a1 + 108);
  if (v15 != 1.0) {
    kaldi::CuMatrixBase<float>::Scale((uint64_t)v19, v15);
  }
  kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(v19, (uint64_t)v19, v12, v13, v14);
  if (a6) {
    kaldi::CuMatrixBase<float>::AddMat(a6, (uint64_t)v19, 111, v16, v17, 1.0, 0.0);
  }
  kaldi::CuMatrixBase<float>::AddMatMat(a5, (uint64_t)v19, CblasNoTrans, a4, &stru_68.sectname[7], 1.0, 0.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v19);
}

void sub_137AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *kaldi::nnet1::ScaledDotAttention::CopyQuantized<kaldi::nnet1::Quantizable8BitComponentItf>(uint64_t **a1)
{
  uint64_t v2 = (const void *)((uint64_t (*)(uint64_t **, uint64_t))(*a1)[11])(a1, 1);
  if (!v2
  {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyQuantized", "../subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.h", &stru_68.segname[1], "quantized_attention", v3);
  }
  uint64_t v5 = v4;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 14, &v19);
  uint64_t v6 = v19;
  uint64_t v19 = 0;
  uint64_t v7 = v5[14];
  v5[14] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    uint64_t v8 = v19;
    uint64_t v19 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 15, &v19);
  uint64_t v9 = v19;
  uint64_t v19 = 0;
  uint64_t v10 = v5[15];
  v5[15] = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    uint64_t v11 = v19;
    uint64_t v19 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 16, &v19);
  uint64_t v12 = v19;
  uint64_t v19 = 0;
  uint64_t v13 = v5[16];
  v5[16] = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    uint64_t v14 = v19;
    uint64_t v19 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 17, &v19);
  uint64_t v15 = v19;
  uint64_t v19 = 0;
  uint64_t v16 = v5[17];
  v5[17] = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    uint64_t v17 = v19;
    uint64_t v19 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  return (char *)v5 + *(void *)(*v5 - 40);
}

char *kaldi::nnet1::ScaledDotAttention::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>(uint64_t **a1)
{
  uint64_t v2 = (const void *)((uint64_t (*)(uint64_t **, uint64_t))(*a1)[11])(a1, 1);
  if (!v2
  {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyQuantized", "../subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.h", &stru_68.segname[1], "quantized_attention", v3);
  }
  uint64_t v5 = v4;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 14, &v19);
  uint64_t v6 = v19;
  uint64_t v19 = 0;
  uint64_t v7 = v5[14];
  v5[14] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    uint64_t v8 = v19;
    uint64_t v19 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 15, &v19);
  uint64_t v9 = v19;
  uint64_t v19 = 0;
  uint64_t v10 = v5[15];
  v5[15] = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    uint64_t v11 = v19;
    uint64_t v19 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 16, &v19);
  uint64_t v12 = v19;
  uint64_t v19 = 0;
  uint64_t v13 = v5[16];
  v5[16] = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    uint64_t v14 = v19;
    uint64_t v19 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 17, &v19);
  uint64_t v15 = v19;
  uint64_t v19 = 0;
  uint64_t v16 = v5[17];
  v5[17] = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    uint64_t v17 = v19;
    uint64_t v19 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  return (char *)v5 + *(void *)(*v5 - 40);
}

char *virtual thunk to'kaldi::nnet1::ScaledDotAttention::CopyQuantized16Bit(kaldi::nnet1::ScaledDotAttention *this)
{
  return kaldi::nnet1::ScaledDotAttention::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t **)((char *)this + *(void *)(*(void *)this - 32)));
}

uint64_t kaldi::nnet1::ScaledDotAttention::Info(kaldi::nnet1::ScaledDotAttention *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  kaldi::WriteToken(v19, 0, (kaldi *)"<AddQuery>", v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
  long long v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  if (*((void *)this + 14))
  {
    kaldi::WriteToken(v19, 0, (kaldi *)"<QueryTransform>", v5, v6);
    (*(void (**)(void **__return_ptr))(**((void **)this + 14) + 64))(&__p);
    uint64_t v7 = (v18 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v8 = (v18 & 0x80u) == 0 ? v18 : v17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v7, v8);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  if (*((void *)this + 15))
  {
    kaldi::WriteToken(v19, 0, (kaldi *)"<KeyTransform>", v5, v6);
    (*(void (**)(void **__return_ptr))(**((void **)this + 15) + 64))(&__p);
    uint64_t v9 = (v18 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v10 = (v18 & 0x80u) == 0 ? v18 : v17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v9, v10);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  if (*((void *)this + 16))
  {
    kaldi::WriteToken(v19, 0, (kaldi *)"<ValueTransform>", v5, v6);
    (*(void (**)(void **__return_ptr))(**((void **)this + 16) + 64))(&__p);
    uint64_t v11 = (v18 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v12 = (v18 & 0x80u) == 0 ? v18 : v17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v11, v12);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  if (*((void *)this + 17))
  {
    kaldi::WriteToken(v19, 0, (kaldi *)"<OutputTransform>", v5, v6);
    (*(void (**)(void **__return_ptr))(**((void **)this + 17) + 64))(&__p);
    uint64_t v13 = (v18 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v14 = (v18 & 0x80u) == 0 ? v18 : v17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v13, v14);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_138380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::ScaledDotAttention::Info(kaldi::nnet1::ScaledDotAttention *this)
{
  return kaldi::nnet1::ScaledDotAttention::Info((kaldi::nnet1::ScaledDotAttention *)((char *)this
                                                                                   + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::ScaledDotAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 170, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Reading ScaledDotAttention component", 36);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v52);
  }
  long long __p = 0uLL;
  uint64_t v51 = 0;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              if (kaldi::Peek(a2, a3) != 60) {
                goto LABEL_107;
              }
              kaldi::ReadToken(a2, a3, (uint64_t)&__p, v8, v9);
              if (SHIBYTE(v51) < 0) {
                break;
              }
              p_p = &__p;
              switch(HIBYTE(v51))
              {
                case 7:
                  if (__p != 1633899324 || *(_DWORD *)((char *)&__p + 3) != 1046834273) {
                    goto LABEL_123;
                  }
                  goto LABEL_51;
                case 0xA:
                  if ((void)__p != 0x726575516464413CLL || WORD4(__p) != 15993) {
                    goto LABEL_123;
                  }
                  goto LABEL_81;
                case 0xC:
                  goto LABEL_102;
                case 0xE:
                  goto LABEL_67;
                case 0x10:
                  if ((void)__p == 0x725479726575513CLL && *((void *)&__p + 1) == 0x3E6D726F66736E61) {
                    goto LABEL_94;
                  }
                  if (HIBYTE(v51) == 14)
                  {
LABEL_67:
                    if ((void)__p != 0x6E61725479654B3CLL || *(void *)((char *)&__p + 6) != 0x3E6D726F66736E61) {
                      goto LABEL_98;
                    }
                    goto LABEL_72;
                  }
                  if (HIBYTE(v51) != 16
                    || ((void)__p == 0x725465756C61563CLL
                      ? (BOOL v22 = *((void *)&__p + 1) == 0x3E6D726F66736E61)
                      : (BOOL v22 = 0),
                        !v22))
                  {
LABEL_98:
                    if (HIBYTE(v51) == 12)
                    {
                      p_p = &__p;
                      goto LABEL_102;
                    }
                    goto LABEL_123;
                  }
                  break;
                case 0x11:
                  if ((void)__p != 0x5474757074754F3CLL
                    || *((void *)&__p + 1) != 0x6D726F66736E6172
                    || v51 != 62)
                  {
                    goto LABEL_98;
                  }
                  goto LABEL_90;
                default:
                  goto LABEL_123;
              }
LABEL_63:
              uint64_t v23 = kaldi::nnet1::Component::Read(a2, a3, a4);
              uint64_t v24 = *(void *)(a1 + 128);
              *(void *)(a1 + 128) = v23;
              if (v24)
              {
                (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
                uint64_t v23 = *(void *)(a1 + 128);
              }
              if (!v23)
              {
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 192);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"reading value transform failed", 30);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
              }
            }
            uint64_t v13 = *((void *)&__p + 1);
            if (*((void *)&__p + 1) != 7) {
              break;
            }
            if (*(_DWORD *)__p != 1633899324 || *(_DWORD *)(__p + 3) != 1046834273)
            {
              uint64_t v13 = *((void *)&__p + 1);
              goto LABEL_24;
            }
LABEL_51:
            kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 108), v10, v9);
          }
          if (*((void *)&__p + 1) != 10) {
            break;
          }
          if (*(void *)__p != 0x726575516464413CLL || *(_WORD *)(__p + 8) != 15993) {
            break;
          }
LABEL_81:
          kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 104), v10, v9);
        }
LABEL_24:
        if (v13 != 16) {
          goto LABEL_30;
        }
        if (*(void *)__p != 0x725479726575513CLL || *(void *)(__p + 8) != 0x3E6D726F66736E61) {
          break;
        }
LABEL_94:
        uint64_t v33 = kaldi::nnet1::Component::Read(a2, a3, a4);
        uint64_t v34 = *(void *)(a1 + 112);
        *(void *)(a1 + 112) = v33;
        if (v34)
        {
          (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
          uint64_t v33 = *(void *)(a1 + 112);
        }
        if (!v33)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 182);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"reading query transform failed", 30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
        }
      }
      uint64_t v13 = *((void *)&__p + 1);
LABEL_30:
      if (v13 != 14) {
        goto LABEL_36;
      }
      if (*(void *)__p != 0x6E61725479654B3CLL || *(void *)(__p + 6) != 0x3E6D726F66736E61) {
        break;
      }
LABEL_72:
      uint64_t v26 = kaldi::nnet1::Component::Read(a2, a3, a4);
      uint64_t v27 = *(void *)(a1 + 120);
      *(void *)(a1 + 120) = v26;
      if (v27)
      {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
        uint64_t v26 = *(void *)(a1 + 120);
      }
      if (!v26)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 187);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"reading key transform failed", 28);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
      }
    }
    uint64_t v13 = *((void *)&__p + 1);
LABEL_36:
    if (v13 == 16)
    {
      if (*(void *)__p == 0x725465756C61563CLL && *(void *)(__p + 8) == 0x3E6D726F66736E61) {
        goto LABEL_63;
      }
      uint64_t v13 = *((void *)&__p + 1);
    }
    if (v13 != 17) {
      goto LABEL_100;
    }
    BOOL v19 = *(void *)__p == 0x5474757074754F3CLL && *(void *)(__p + 8) == 0x6D726F66736E6172;
    if (!v19 || *(unsigned char *)(__p + 16) != 62) {
      break;
    }
LABEL_90:
    uint64_t v31 = kaldi::nnet1::Component::Read(a2, a3, a4);
    uint64_t v32 = *(void *)(a1 + 136);
    *(void *)(a1 + 136) = v31;
    if (v32)
    {
      (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
      uint64_t v31 = *(void *)(a1 + 136);
    }
    if (!v31)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 197);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"reading output transform failed", 31);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
    }
  }
  uint64_t v13 = *((void *)&__p + 1);
LABEL_100:
  if (v13 != 12) {
    goto LABEL_123;
  }
  p_p = (long long *)__p;
LABEL_102:
  uint64_t v35 = *(void *)p_p;
  int v36 = *((_DWORD *)p_p + 2);
  if (v35 != 0x6E6F706D6F432F3CLL || v36 != 1047817829)
  {
LABEL_123:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 202);
    uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Unrecognized token ", 19);
    if (v51 >= 0) {
      uint64_t v46 = &__p;
    }
    else {
      uint64_t v46 = (long long *)__p;
    }
    if (v51 >= 0) {
      uint64_t v47 = HIBYTE(v51);
    }
    else {
      uint64_t v47 = *((void *)&__p + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
  }
LABEL_107:
  uint64_t v38 = *(void *)(a1 + 112);
  if (!v38)
  {
    unsigned int v48 = "query_transform_";
    uint64_t v49 = (unsigned char *)(&stru_B8 + 22);
    goto LABEL_136;
  }
  uint64_t v39 = *(void *)(a1 + 120);
  if (v39 && *(_DWORD *)(v38 + 12) != *(_DWORD *)(v39 + 12))
  {
    unsigned int v48 = "!key_transform_ || query_transform_->OutputDim() == key_transform_->OutputDim()";
    uint64_t v49 = (unsigned char *)(&stru_B8 + 23);
    goto LABEL_136;
  }
  uint64_t v40 = a1 + *(void *)(*(void *)a1 - 40);
  int v41 = *(_DWORD *)(v40 + 8);
  if (v41 != *(_DWORD *)(v38 + 8))
  {
    unsigned int v48 = "InputDim() == query_transform_->InputDim()";
    uint64_t v49 = (unsigned char *)(&stru_B8 + 24);
    goto LABEL_136;
  }
  if (*(unsigned char *)(a1 + 104) && v41 != *(_DWORD *)(v40 + 12))
  {
    unsigned int v48 = "!add_query_ || InputDim() == OutputDim()";
    uint64_t v49 = (unsigned char *)(&stru_B8 + 25);
    goto LABEL_136;
  }
  uint64_t v42 = *(void *)(a1 + 136);
  if (!v42)
  {
    uint64_t v44 = *(void *)(a1 + 128);
    if (!v44 || *(_DWORD *)(v40 + 12) == *(_DWORD *)(v44 + 12)) {
      goto LABEL_120;
    }
LABEL_135:
    unsigned int v48 = "!value_transform_ || (!output_transform_ && OutputDim() == value_transform_->OutputDim()) || (output_transform"
          "_ && output_transform_->InputDim() == value_transform_->OutputDim())";
    uint64_t v49 = &stru_B8.segname[12];
LABEL_136:
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", v49, v48, v9);
  }
  if (*(_DWORD *)(v40 + 12) != *(_DWORD *)(v42 + 12))
  {
    unsigned int v48 = "!output_transform_ || OutputDim() == output_transform_->OutputDim()";
    uint64_t v49 = (unsigned char *)(&stru_B8 + 26);
    goto LABEL_136;
  }
  uint64_t v43 = *(void *)(a1 + 128);
  if (v43 && *(_DWORD *)(v42 + 8) != *(_DWORD *)(v43 + 12)) {
    goto LABEL_135;
  }
LABEL_120:
  if (SHIBYTE(v51) < 0) {
    operator delete((void *)__p);
  }
}

void sub_138BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::ScaledDotAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::ScaledDotAttention::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<AddQuery>", a4, a5);
  kaldi::WriteBasicType<BOOL>(a2, (char)a3, *(unsigned __int8 *)(a1 + 104));
  kaldi::WriteToken(a2, a3, (kaldi *)"<Scale>", v9, v10);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  if (*(void *)(a1 + 112))
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<QueryTransform>", v11, v12);
    kaldi::nnet1::Component::Write(*(void *)(a1 + 112), a2, (uint64_t)a3, a4);
  }
  if (*(void *)(a1 + 120))
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<KeyTransform>", v11, v12);
    kaldi::nnet1::Component::Write(*(void *)(a1 + 120), a2, (uint64_t)a3, a4);
  }
  if (*(void *)(a1 + 128))
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<ValueTransform>", v11, v12);
    kaldi::nnet1::Component::Write(*(void *)(a1 + 128), a2, (uint64_t)a3, a4);
  }
  if (*(void *)(a1 + 136))
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<OutputTransform>", v11, v12);
    kaldi::nnet1::Component::Write(*(void *)(a1 + 136), a2, (uint64_t)a3, a4);
  }

  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v11, v12);
}

void *virtual thunk to'kaldi::nnet1::ScaledDotAttention::WriteData(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::ScaledDotAttention::WriteData((uint64_t)a1 + *(void *)(*a1 - 120), a2, a3, a4, a5);
}

kaldi::nnet1::ScaledDotAttention *kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, const kaldi::nnet1::MultiHeadAttention *a2, uint64_t a3)
{
  double result = kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, (const kaldi::nnet1::MultiHeadAttention *)((char *)a2 + 8), a3);
  uint64_t v6 = *(void *)a2;
  *(void *)double result = *(void *)a2;
  *(void *)((char *)result + *(void *)(v6 - 40)) = *((void *)a2 + 9);
  *(void *)((char *)result + *(void *)(*(void *)result - 48)) = *((void *)a2 + 10);
  *(void *)((char *)result + *(void *)(*(void *)result - 56)) = *((void *)a2 + 11);
  *((_DWORD *)result + 36) = *(_DWORD *)(a3 + 144);
  return result;
}

kaldi::nnet1::MultiHeadAttention *kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, const kaldi::nnet1::MultiHeadAttention *a2)
{
  long long v4 = (char *)a2 + *(void *)(*(void *)a2 - 40);
  *((void *)this + 19) = off_264E70;
  *((void *)this + 20) = *((void *)v4 + 1);
  *((_WORD *)this + 84) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 22) = 0;
  *(void *)this = off_267180;
  *((void *)this + 25) = off_2671A8;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, (const kaldi::nnet1::ScaledDotAttention *)&off_269B38, (uint64_t)a2);
  *((void *)this + 19) = off_269A48;
  *(void *)this = off_269918;
  *((void *)this + 25) = off_269B18;
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  return this;
}

void sub_13901C(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MultiHeadAttention::Copy(kaldi::nnet1::MultiHeadAttention *this)
{
}

void sub_1390E4()
{
}

kaldi::nnet1::MultiHeadAttention *kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, int a2, BOOL a3, int a4, float a5, int a6)
{
  *((void *)this + 19) = off_264E70;
  *((_DWORD *)this + 40) = a2;
  *((_DWORD *)this + 41) = a3;
  *((_WORD *)this + 84) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 22) = 0;
  *(void *)this = off_267180;
  *((void *)this + 25) = off_2671A8;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, (uint64_t *)&off_269B38, a2, a3, a5, a4 != 0);
  *((void *)this + 19) = off_269A48;
  *(void *)this = off_269918;
  *((void *)this + 25) = off_269B18;
  *((_DWORD *)this + 36) = a6;
  return this;
}

void sub_139224(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MultiHeadAttention::ComputeAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 112) + 12);
  if (v5 != *(_DWORD *)(a1 + 24))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26, "ComputeAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 261);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "SetKeyValueStores needs to be called in ScaledDotAttention for attention to work");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
  }
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v26, *(unsigned int *)(a2 + 20), v5, 0, 0, 0);
  (*(void (**)(void, uint64_t, void *, uint64_t))(**(void **)(a1 + 112) + 112))(*(void *)(a1 + 112), a2, v26, a4);
  int v9 = *(_DWORD *)(a1 + 144);
  if (v9 >= 1)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    int v12 = *(_DWORD *)(a2 + 16) / v9;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v23, (uint64_t)v26, 0, v27, v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a1 + 8, 0, *(_DWORD *)(a1 + 28), v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a1 + 56, 0, *(_DWORD *)(a1 + 76), v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a3, 0, *(_DWORD *)(a3 + 20), v10, v12);
      kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)&v23, (uint64_t)&v20, (uint64_t)&v17, (uint64_t)&v14, 0);
      uint64_t v14 = off_262D80;
      long long v15 = 0u;
      long long v16 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v14);
      uint64_t v17 = off_262D80;
      long long v18 = 0u;
      long long v19 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v17);
      char v20 = off_262D80;
      long long v21 = 0u;
      long long v22 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v20);
      uint64_t v23 = off_262D80;
      long long v24 = 0u;
      long long v25 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v23);
      ++v11;
      uint64_t v10 = (const char *)(v10 + v12);
    }
    while (v11 < *(_DWORD *)(a1 + 144));
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v26);
}

void sub_1394F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t kaldi::nnet1::MultiHeadAttention::Info(kaldi::nnet1::MultiHeadAttention *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  kaldi::WriteToken(v10, 0, (kaldi *)"<NumberHeads>", v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  long long v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  kaldi::nnet1::ScaledDotAttention::Info((uint64_t *)__p, this);
  if ((v9 & 0x80u) == 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v6 = v9;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v5, v6);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_139790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::MultiHeadAttention::Info(kaldi::nnet1::MultiHeadAttention *this)
{
  return kaldi::nnet1::MultiHeadAttention::Info((kaldi::nnet1::MultiHeadAttention *)((char *)this
                                                                                   + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::MultiHeadAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 288, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Reading MultiHeadAttention component", 36);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11);
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"<NumberHeads>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 144, v8, v9);
  kaldi::nnet1::ScaledDotAttention::ReadData(a1, a2, a3, a4);
  if (*(_DWORD *)(*(void *)(a1 + 112) + 12) % *(_DWORD *)(a1 + 144)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", &stru_108.segname[14], "int(query_transform_->OutputDim() / number_heads_) * number_heads_ == query_transform_->OutputDim()", v10);
  }
}

void sub_1398E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::MultiHeadAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::MultiHeadAttention::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumberHeads>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);

  return kaldi::nnet1::ScaledDotAttention::WriteData(a1, a2, a3, a4, v9);
}

void *virtual thunk to'kaldi::nnet1::MultiHeadAttention::WriteData(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::MultiHeadAttention::WriteData((uint64_t)a1 + *(void *)(*a1 - 120), a2, a3, a4, a5);
}

kaldi::nnet1::SupervisedMultiHeadAttention *kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, const kaldi::nnet1::SupervisedMultiHeadAttention *a2)
{
  long long v4 = (char *)a2 + *(void *)(*(void *)a2 - 40);
  *((void *)this + 25) = off_264E70;
  *((void *)this + 26) = *((void *)v4 + 1);
  *((_WORD *)this + 108) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 28) = 0;
  *(void *)this = off_267180;
  *((void *)this + 31) = off_2671A8;
  kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(this, (const kaldi::nnet1::MultiHeadAttention *)off_269DE8, (uint64_t)a2);
  *((void *)this + 25) = off_269CF8;
  *(void *)this = off_269BC8;
  *((void *)this + 31) = off_269DC8;
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 152, (char *)a2 + 152, 111);
  return this;
}

void sub_139ADC(_Unwind_Exception *a1)
{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(v2, (uint64_t *)&off_269DF0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SupervisedMultiHeadAttention::Copy(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
}

void sub_139BC8()
{
}

kaldi::nnet1::SupervisedMultiHeadAttention *kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, int a2, BOOL a3, int a4, float a5, int a6, int a7)
{
  *((void *)this + 25) = off_264E70;
  *((_DWORD *)this + 52) = a2;
  *((_DWORD *)this + 53) = a3;
  *((_WORD *)this + 108) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 28) = 0;
  *(void *)this = off_267180;
  *((void *)this + 31) = off_2671A8;
  kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(this, (uint64_t *)off_269DE8, a2, a3, a5, a4, a6);
  *((void *)this + 25) = off_269CF8;
  *(void *)this = off_269BC8;
  *((void *)this + 31) = off_269DC8;
  *((_DWORD *)this + 37) = a7;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((void *)this + 19) = off_262DC8;
  *((unsigned char *)this + 192) = 0;
  return this;
}

void sub_139D30(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::ComputeAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 112) + 12);
  if (v5 != *(_DWORD *)(a1 + 24))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "ComputeAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 331);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, "SetKeyValueStores needs to be called in ScaledDotAttention for attention to work");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v29, *(unsigned int *)(a2 + 20), v5, 0, 0, 0);
  (*(void (**)(void, uint64_t, void *, uint64_t))(**(void **)(a1 + 112) + 112))(*(void *)(a1 + 112), a2, v29, a4);
  kaldi::CuMatrix<float>::Resize(a1 + 152, v30, *(unsigned int *)(a1 + 28), 0, 0);
  kaldi::CuMatrixBase<float>::SetZero(a1 + 152);
  uint64_t v16 = a1 + 152;
  int v9 = *(_DWORD *)(a1 + 144);
  if (v9 >= 1)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    int v12 = *(_DWORD *)(a2 + 16) / v9;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v26, (uint64_t)v29, 0, v30, v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v23, a1 + 8, 0, *(_DWORD *)(a1 + 28), v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a1 + 56, 0, *(_DWORD *)(a1 + 76), v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a3, 0, *(_DWORD *)(a3 + 20), v10, v12);
      if (v11 >= *(_DWORD *)(a1 + 148)) {
        kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)&v26, (uint64_t)&v23, (uint64_t)&v20, (uint64_t)&v17, 0);
      }
      else {
        kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)&v26, (uint64_t)&v23, (uint64_t)&v20, (uint64_t)&v17, v16);
      }
      uint64_t v17 = off_262D80;
      long long v18 = 0u;
      long long v19 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v17);
      char v20 = off_262D80;
      long long v21 = 0u;
      long long v22 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v20);
      uint64_t v23 = off_262D80;
      long long v24 = 0u;
      long long v25 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v23);
      uint64_t v26 = off_262D80;
      long long v27 = 0u;
      long long v28 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v26);
      ++v11;
      uint64_t v10 = (const char *)(v10 + v12);
    }
    while (v11 < *(_DWORD *)(a1 + 144));
  }
  int v13 = *(_DWORD *)(a1 + 148);
  if (v13 > 1)
  {
    float v14 = 1.0 / (double)v13;
    kaldi::CuMatrixBase<float>::Scale(v16, v14);
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v29);
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::Info(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  kaldi::WriteToken(v10, 0, (kaldi *)"<SupervisedHeads>", v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  long long v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  kaldi::nnet1::MultiHeadAttention::Info((uint64_t *)__p, this);
  if ((v9 & 0x80u) == 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v6 = v9;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v5, v6);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_13A318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::Info(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  return kaldi::nnet1::SupervisedMultiHeadAttention::Info((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)this + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::SupervisedMultiHeadAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 367, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Reading SupervisedMultiHeadAttention component", 46);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"<SupervisedHeads>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 148, v8, v9);
  kaldi::nnet1::MultiHeadAttention::ReadData(a1, a2, a3, a4);
  int v11 = *(_DWORD *)(a1 + 148);
  if (v11 < 1) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", &stru_158.segname[13], "number_supervised_heads_ >= 1", v10);
  }
  if (v11 > *(_DWORD *)(a1 + 144)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", &stru_158.segname[14], "number_supervised_heads_ <= number_heads_", v10);
  }
}

void sub_13A488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::SupervisedMultiHeadAttention::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<SupervisedHeads>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);

  return kaldi::nnet1::MultiHeadAttention::WriteData(a1, a2, a3, a4, v9);
}

void *virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::WriteData(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SupervisedMultiHeadAttention::WriteData((uint64_t)a1 + *(void *)(*a1 - 120), a2, a3, a4, a5);
}

kaldi::nnet1::SelfAttention *kaldi::nnet1::SelfAttention::SelfAttention(kaldi::nnet1::SelfAttention *this, const kaldi::nnet1::SelfAttention *a2)
{
  long long v4 = (char *)a2 + *(void *)(*(void *)a2 - 40);
  *((void *)this + 10) = off_264E70;
  *((void *)this + 11) = *((void *)v4 + 1);
  *((_WORD *)this + 48) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 13) = 0;
  *(void *)this = off_267180;
  *((void *)this + 16) = off_2671A8;
  uint64_t v5 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)off_26A158);
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = (uint64_t)off_26E7D8;
  *((_DWORD *)v5 + 12) = 1;
  v5[9] = 0;
  v5[10] = (uint64_t)off_26A068;
  *uint64_t v5 = (uint64_t)off_269E98;
  v5[16] = (uint64_t)off_26A138;
  v5[1] = (uint64_t)off_269F50;
  v5[2] = 0;
  v5[7] = 0;
  uint64_t v6 = v5 + 7;
  v5[8] = 0;
  uint64_t v7 = *((void *)a2 + 7);
  if (v7)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v9 = *v6;
    uint64_t *v6 = v8;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  uint64_t v10 = *((void *)a2 + 8);
  if (v10)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    uint64_t v12 = *((void *)this + 8);
    *((void *)this + 8) = v11;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  int v13 = (char *)*((void *)a2 + 9);
  if (v13)
  {
    float v14 = (void *)(*(uint64_t (**)(char *))(*(void *)&v13[*(void *)(*(void *)v13 - 40)] + 16))(&v13[*(void *)(*(void *)v13 - 40)]);
    if (v14) {
    uint64_t v16 = *((void *)this + 9);
    }
    *((void *)this + 9) = v14;
    if (v16)
    {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      float v14 = (void *)*((void *)this + 9);
    }
    if (!v14) {
      kaldi::KaldiAssertFailure_((kaldi *)"SelfAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)&stru_158.reloff + 1, "attention_", v15);
    }
  }
  return this;
}

void sub_13A88C(_Unwind_Exception *a1)
{
  uint64_t v7 = *(void *)(v2 + 72);
  *(void *)(v2 + 72) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(v2 + 64);
  *(void *)(v2 + 64) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *v5;
  *uint64_t v5 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v4);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SelfAttention::PropagateFnc(uint64_t *a1, int *a2, int *a3, uint64_t a4, const char *a5)
{
  int v5 = *((_DWORD *)a1 + 12);
  if (a2[5] % v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)&stru_158.flags + 1, "batch_size % num_utts == 0", a5);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v58, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 411, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Running forward propagation for batch size = ", 45);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", which contains ", 17);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" frames each from ", 18);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v58);
  }
  (*(void (**)(uint64_t *))(*a1 + 160))(a1);
  uint64_t v13 = a1[2];
  uint64_t v14 = a1[7];
  if (v14) {
    long long v15 = (unsigned int *)(v14 + 12);
  }
  else {
    long long v15 = (unsigned int *)((char *)a1 + *(void *)(*a1 - 40) + 8);
  }
  unsigned int v16 = *v15;
  uint64_t v17 = a1[8];
  if (v17)
  {
    long long v18 = (int *)(v17 + 12);
    uint64_t v19 = *a1;
  }
  else
  {
    uint64_t v19 = *a1;
    long long v18 = (int *)((char *)a1 + *(void *)(*a1 - 40) + 8);
  }
  int v36 = *v18;
  signed int v20 = *v18 + v16;
  if (v20 != (*(unsigned int (**)(uint64_t *))(v19 + 88))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)&stru_158.reserved3, "history_state_size == HistoryStateSize()", v21);
  }
  uint64_t v22 = v13 + 48 * (int)a4;
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v58, *((unsigned int *)a1 + 12), (a2[5] * v20 / v5 + *(_DWORD *)(v22 + 16)), 0, 0, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v55, (uint64_t)v58, 0, v60, 0, *(_DWORD *)(v22 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v55, v22, 111, v23, v24);
  uint64_t v55 = off_262D80;
  long long v56 = 0u;
  long long v57 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v55);
  if (v5 >= 1)
  {
    int v25 = 0;
    for (unsigned int i = 0; i != v5; ++i)
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v55, (uint64_t)a2, i, v25 + a2[5], 0, a2[4]);
      if (v5 != 1) {
        kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v55, a2[6] * v5);
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v52, (uint64_t)a3, i, v25 + a3[5], 0, a3[4]);
      if (v5 != 1) {
        kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v52, a3[6] * v5);
      }
      if (v60 <= i) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v27);
      }
      *(void *)&long long v47 = v58[1] + 4 * (int)(v61 * i);
      uint64_t v46 = &off_262E20;
      *((void *)&v47 + 1) = v59;
      *(void *)&long long v48 = v62;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, (uint64_t)&v46, (int)v59 / v20);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)&v49, 0, SHIDWORD(v50), 0, v16);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, (uint64_t)&v49, 0, SHIDWORD(v50), (const char *)v16, v36);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v40, (uint64_t)&v46, HIDWORD(v47) - HIDWORD(v56), SHIDWORD(v56), 0, SDWORD2(v47));
      uint64_t v30 = a1[7];
      if (v30) {
        (*(void (**)(uint64_t, void (***)(), void (***)(), uint64_t))(*(void *)v30 + 112))(v30, &v55, &v40, a4);
      }
      else {
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v40, (uint64_t)&v55, 111, v28, v29);
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v37, (uint64_t)&v43, HIDWORD(v44) - HIDWORD(v56), SHIDWORD(v56), 0, SDWORD2(v44));
      uint64_t v33 = a1[8];
      if (v33) {
        (*(void (**)(uint64_t, void (***)(), void (***)(), uint64_t))(*(void *)v33 + 112))(v33, &v55, &v37, a4);
      }
      else {
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v37, (uint64_t)&v55, 111, v31, v32);
      }
      (*(void (**)(uint64_t, void (***)(), void (***)(), uint64_t))(*(void *)a1[9] + 24))(a1[9], &v46, &v43, a4);
      uint64_t v34 = a1[9] + *(void *)(*(void *)a1[9] - 40);
      (*(void (**)(uint64_t, void (***)(), void (***)(), uint64_t))(*(void *)v34 + 112))(v34, &v55, &v52, a4);
      long long v37 = off_262D80;
      long long v38 = 0u;
      long long v39 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v37);
      uint64_t v40 = off_262D80;
      long long v41 = 0u;
      long long v42 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v40);
      uint64_t v43 = off_262D80;
      long long v44 = 0u;
      long long v45 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
      uint64_t v46 = off_262D80;
      long long v47 = 0u;
      long long v48 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
      uint64_t v49 = off_262D80;
      long long v50 = 0u;
      long long v51 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v49);
      unint64_t v52 = off_262D80;
      long long v53 = 0u;
      long long v54 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v52);
      uint64_t v55 = off_262D80;
      long long v56 = 0u;
      long long v57 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v55);
      --v25;
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1[9] + 32))(a1[9]);
  (*(void (**)(uint64_t *, void *, uint64_t))(*a1 + 128))(a1, v58, a4);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v58);
}

void sub_13B0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void (**a46)(),uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  a46 = off_262D80;
  *(_OWORD *)(v51 + 8) = 0u;
  *(_OWORD *)(v51 + 24) = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a46);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a51);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::SelfAttention::PropagateFnc(void *a1, int *a2, int *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SelfAttention::PropagateFnc((void *)((char *)a1 + *(void *)(*a1 - 128)), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::SelfAttention::Info(kaldi::nnet1::SelfAttention *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  if (*((void *)this + 7))
  {
    kaldi::WriteToken(v15, 0, (kaldi *)"<KeyTransform>", v2, v3);
    (*(void (**)(void **__return_ptr))(**((void **)this + 7) + 64))(&__p);
    long long v4 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v5 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v4, v5);
    if ((char)v14 < 0) {
      operator delete(__p);
    }
  }
  if (*((void *)this + 8))
  {
    kaldi::WriteToken(v15, 0, (kaldi *)"<ValueTransform>", v2, v3);
    (*(void (**)(void **__return_ptr))(**((void **)this + 8) + 64))(&__p);
    uint64_t v6 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v7 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v6, v7);
    if ((char)v14 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v8 = (void *)*((void *)this + 9);
  if (v8)
  {
    (*(void (**)(void **__return_ptr))(*(void *)((char *)v8 + *(void *)(*v8 - 40)) + 64))(&__p);
    uint64_t v9 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v10 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v9, v10);
    if ((char)v14 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_13B578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::SelfAttention::Info(kaldi::nnet1::SelfAttention *this)
{
  return kaldi::nnet1::SelfAttention::Info((kaldi::nnet1::SelfAttention *)((char *)this
                                                                         + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::SelfAttention::CopyQuantized8Bit(kaldi::nnet1::SelfAttention *this)
{
}

void sub_13B81C()
{
}

uint64_t kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *v3;
    if (v5) {
      uint64_t result = kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v5);
    }
    else {
      uint64_t result = (*(uint64_t (**)(uint64_t *))(v4 + 16))(v3);
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

void kaldi::nnet1::SelfAttention::CopyQuantized16Bit(kaldi::nnet1::SelfAttention *this)
{
}

void sub_13BB2C()
{
}

uint64_t kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *v3;
    if (v5) {
      uint64_t result = kaldi::nnet1::Quantizable16BitComponentItf::CopyQuantized(v5);
    }
    else {
      uint64_t result = (*(uint64_t (**)(uint64_t *))(v4 + 16))(v3);
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

void virtual thunk to'kaldi::nnet1::SelfAttention::CopyQuantized16Bit(kaldi::nnet1::SelfAttention *this)
{
  kaldi::nnet1::SelfAttention::CopyQuantized16Bit((kaldi::nnet1::SelfAttention *)((char *)this
                                                                                + *(void *)(*(void *)this - 32)));
}

void kaldi::nnet1::SelfAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 509, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Reading SelfAttention component", 31);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32);
  }
  long long __p = 0uLL;
  uint64_t v31 = 0;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_60;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)&__p, v8, v9);
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      break;
    }
    uint64_t v14 = *((void *)&__p + 1);
    if (*((void *)&__p + 1) == 14
      && (*(void *)__p == 0x6E61725479654B3CLL ? (BOOL v15 = *(void *)(__p + 6) == 0x3E6D726F66736E61) : (BOOL v15 = 0), v15))
    {
LABEL_12:
      uint64_t v12 = kaldi::nnet1::Component::Read(a2, a3, a4);
      uint64_t v13 = a1[7];
      a1[7] = v12;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        uint64_t v12 = a1[7];
      }
      if (!v12)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 517);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"reading key transform failed", 28);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
      }
    }
    else
    {
      if (*((void *)&__p + 1) != 16) {
        goto LABEL_27;
      }
      if (*(void *)__p == 0x725465756C61563CLL && *(void *)(__p + 8) == 0x3E6D726F66736E61)
      {
LABEL_49:
        uint64_t v22 = kaldi::nnet1::Component::Read(a2, a3, a4);
        uint64_t v23 = a1[8];
        a1[8] = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
          uint64_t v22 = a1[8];
        }
        if (!v22)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 522);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"reading value transform failed", 30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
        }
      }
      else
      {
        uint64_t v14 = *((void *)&__p + 1);
LABEL_27:
        if (v14 != 11) {
          goto LABEL_53;
        }
        if (*(void *)__p != 0x69746E657474413CLL || *(void *)(__p + 3) != 0x3E6E6F69746E6574)
        {
          uint64_t v14 = *((void *)&__p + 1);
LABEL_53:
          if (v14 == 12)
          {
            uint64_t v10 = (long long *)__p;
            goto LABEL_55;
          }
LABEL_66:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 533);
          long long v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Unrecognized token ", 19);
          if (v31 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = (long long *)__p;
          }
          if (v31 >= 0) {
            uint64_t v29 = HIBYTE(v31);
          }
          else {
            uint64_t v29 = *((void *)&__p + 1);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)p_p, v29);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
        }
LABEL_43:
        signed int v20 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
        if (v20) {
        uint64_t v21 = a1[9];
        }
        a1[9] = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
          signed int v20 = (const void *)a1[9];
        }
        if (!v20)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 528);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"failed to read attention component in SelfAttention", 51);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
        }
      }
    }
  }
  uint64_t v10 = &__p;
  switch(HIBYTE(v31))
  {
    case 0xB:
      goto LABEL_38;
    case 0xC:
      goto LABEL_55;
    case 0xE:
      if ((void)__p != 0x6E61725479654B3CLL || *(void *)((char *)&__p + 6) != 0x3E6D726F66736E61) {
        goto LABEL_66;
      }
      goto LABEL_12;
    case 0x10:
      if ((void)__p == 0x725465756C61563CLL && *((void *)&__p + 1) == 0x3E6D726F66736E61) {
        goto LABEL_49;
      }
      if (HIBYTE(v31) == 11)
      {
LABEL_38:
        if ((void)__p != 0x69746E657474413CLL || *(void *)((char *)&__p + 3) != 0x3E6E6F69746E6574) {
          goto LABEL_66;
        }
        goto LABEL_43;
      }
      if (HIBYTE(v31) != 12) {
        goto LABEL_66;
      }
      uint64_t v10 = &__p;
LABEL_55:
      uint64_t v24 = *(void *)v10;
      int v25 = *((_DWORD *)v10 + 2);
      if (v24 != 0x6E6F706D6F432F3CLL || v25 != 1047817829) {
        goto LABEL_66;
      }
LABEL_60:
      if (!a1[9]) {
        kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)&stru_1F8.addr + 1, "attention_", v9);
      }
      if (SHIBYTE(v31) < 0) {
        operator delete((void *)__p);
      }
      return;
    default:
      goto LABEL_66;
  }
}

void sub_13C140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::SelfAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::SelfAttention::WriteData(uint64_t *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  if (!a1[9]) {
    kaldi::KaldiAssertFailure_((kaldi *)"WriteData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)&stru_1F8.addr + 5, "attention_", a5);
  }
  if (a1[7])
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<KeyTransform>", a4, a5);
    kaldi::nnet1::Component::Write(a1[7], a2, (uint64_t)a3, a4);
  }
  if (a1[8])
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<ValueTransform>", a4, a5);
    kaldi::nnet1::Component::Write(a1[8], a2, (uint64_t)a3, a4);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<Attention>", a4, a5);
  kaldi::nnet1::Component::Write(a1[9] + *(void *)(*(void *)a1[9] - 40), a2, (uint64_t)a3, a4);

  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v9, v10);
}

void *virtual thunk to'kaldi::nnet1::SelfAttention::WriteData(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SelfAttention::WriteData((void *)((char *)a1 + *(void *)(*a1 - 120)), a2, a3, a4, a5);
}

uint64_t *kaldi::nnet1::SelfAttention::EnsureBuffers(kaldi::nnet1::SelfAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 2, 1uLL);
}

uint64_t *non-virtual thunk to'kaldi::nnet1::SelfAttention::EnsureBuffers(kaldi::nnet1::SelfAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, 1uLL);
}

uint64_t kaldi::nnet1::SelfAttention::HistoryStateSize(kaldi::nnet1::SelfAttention *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (v1) {
    uint64_t v2 = (int *)(v1 + 12);
  }
  else {
    uint64_t v2 = (int *)((char *)this + *(void *)(*(void *)this - 40) + 8);
  }
  int v3 = *v2;
  uint64_t v4 = *((void *)this + 8);
  if (v4) {
    uint64_t v5 = (_DWORD *)(v4 + 12);
  }
  else {
    uint64_t v5 = (_DWORD *)((char *)this + *(void *)(*(void *)this - 40) + 8);
  }
  return (*v5 + v3);
}

uint64_t non-virtual thunk to'kaldi::nnet1::SelfAttention::HistoryStateSize(kaldi::nnet1::SelfAttention *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1) {
    uint64_t v2 = (int *)(v1 + 12);
  }
  else {
    uint64_t v2 = (int *)((char *)this + *(void *)(*((void *)this - 1) - 40));
  }
  int v3 = *v2;
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    uint64_t v5 = (_DWORD *)(v4 + 12);
  }
  else {
    uint64_t v5 = (_DWORD *)((char *)this + *(void *)(*((void *)this - 1) - 40));
  }
  return (*v5 + v3);
}

uint64_t kaldi::nnet1::SelfAttention::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 160))(a1);
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)&stru_1F8.nreloc + 3, "batch_idx == 0", v8);
  }
  uint64_t v9 = a2[1];
  if (v9 != *(_DWORD *)(a1 + 48)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)&stru_1F8.flags, "sequence_idx.size() == hopts_.num_sequences", v8);
  }
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(v10 + 32) = a3;
  if (v9)
  {
    for (unint64_t i = 0; i != v9; ++i)
    {
      if (((*(void *)(*a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v13, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 573);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v13, "ResetHistoryState for SelfAttention makes only sense if all utterances get reset at the same time");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v13);
      }
    }
  }
  long long v15 = 0u;
  long long v14 = 0u;
  uint64_t v13 = off_262DC8;
  char v16 = 0;
  kaldi::CuMatrix<float>::operator=(v10, (uint64_t)&v13);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v13);
}

void sub_13C518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_13C52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t non-virtual thunk to'kaldi::nnet1::SelfAttention::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  return kaldi::nnet1::SelfAttention::ResetHistoryState(a1 - 8, a2, a3, a4);
}

uint64_t kaldi::nnet1::SelfAttention::ResetHistoryState(kaldi::nnet1::SelfAttention *this)
{
  int v3 = (void *)*((void *)this + 2);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 6;
    uint64_t v5 = v2 - 6;
    uint64_t v6 = v2 - 6;
    do
    {
      uint64_t v7 = *v6;
      v6 -= 6;
      (*(void (**)(void *))(v7 + 16))(v5);
      v4 -= 6;
      BOOL v8 = v5 == v3;
      uint64_t v5 = v6;
    }
    while (!v8);
  }
  *((void *)this + 3) = v3;
  uint64_t v9 = *(uint64_t (**)(kaldi::nnet1::SelfAttention *))(*(void *)this + 160);

  return v9(this);
}

uint64_t non-virtual thunk to'kaldi::nnet1::SelfAttention::ResetHistoryState(kaldi::nnet1::SelfAttention *this)
{
  return kaldi::nnet1::SelfAttention::ResetHistoryState((kaldi::nnet1::SelfAttention *)((char *)this - 8));
}

unsigned int *kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  if (a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", &stru_248.sectname[1], "batch_idx == 0", a5);
  }
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(*(void *)(a1 + 16) + 20), *(unsigned int *)(*(void *)(a1 + 16) + 16), 1u, 0);
  uint64_t v9 = *(void *)(a1 + 16);

  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, v9, 111, v7, v8);
}

unsigned int *non-virtual thunk to'kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SelfAttention::GetHistoryState(a1 - 8, a2, a3, a4, a5);
}

void kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", &stru_248.sectname[7], "batch_idx == 0", a5);
  }
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 48) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", &stru_248.sectname[8], "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", a5);
  }
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(*(void *)(a1 + 16) + 16), 1u, a4, a5);
  uint64_t v11 = *(void *)(a1 + 16);
  int v12 = *(_DWORD *)(v11 + 20);
  if (v12 >= 1)
  {
    if (v12 <= a3) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v10);
    }
    uint64_t v13 = *(void *)(v11 + 8) + 4 * (int)(*(_DWORD *)(v11 + 24) * a3);
    unsigned int v14 = *(_DWORD *)(v11 + 16);
    uint64_t v15 = *(void *)(v11 + 32);
    v16[1] = v13;
    v16[0] = &off_262E20;
    v16[2] = v14;
    v16[3] = v15;
    kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v16, v8, v9, v10);
  }
}

void non-virtual thunk to'kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
}

unsigned int *kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t *a1, uint64_t a2, int a3)
{
  (*(void (**)(uint64_t *))(*a1 + 160))(a1);
  if (a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", &stru_248.segname[1], "batch_idx == 0", v6);
  }
  kaldi::CuMatrix<float>::Resize(a1[2], *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  uint64_t v9 = (unsigned int *)a1[2];

  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v9, a2, 111, v7, v8);
}

unsigned int *non-virtual thunk to'kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  return kaldi::nnet1::SelfAttention::SetHistoryState((uint64_t *)(a1 - 8), a2, a3);
}

void kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  (*(void (**)(uint64_t *))(*a1 + 160))(a1);
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", &stru_248.segname[8], "batch_idx == 0", v8);
  }
  if ((a3 & 0x80000000) != 0 || *((_DWORD *)a1 + 12) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", &stru_248.segname[9], "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", v8);
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if (v9 % (*(int (**)(uint64_t *))(*a1 + 88))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", &stru_248.segname[10], "history.Dim() % HistoryStateSize() == 0", v10);
  }
  uint64_t v11 = *(unsigned int *)(a2 + 16);
  uint64_t v12 = a1[2];
  if ((int)v11 < 1)
  {
    kaldi::CuMatrix<float>::Resize(v12, 0, 0, 0, 0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(v12, *((unsigned int *)a1 + 12), v11, 2u, 0);
    uint64_t v16 = a1[2];
    if (*(_DWORD *)(v16 + 20) <= a3) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v15);
    }
    uint64_t v17 = *(void *)(v16 + 8) + 4 * (int)(*(_DWORD *)(v16 + 24) * a3);
    unsigned int v18 = *(_DWORD *)(v16 + 16);
    uint64_t v19 = *(void *)(v16 + 32);
    v20[1] = v17;
    v20[0] = &off_262E20;
    v20[2] = v18;
    v20[3] = v19;
    kaldi::CuVectorBase<float>::CopyFromVec(v20, a2, v13, v14, v15);
  }
}

void non-virtual thunk to'kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
}

void kaldi::nnet1::AverageAttention::AverageAttention(kaldi::nnet1::AverageAttention *this, const kaldi::nnet1::AverageAttention *a2)
{
  uint64_t v2 = (char *)a2 + *(void *)(*(void *)a2 - 40);
  *((void *)this + 9) = off_264E70;
  *((void *)this + 10) = *((void *)v2 + 1);
  *((_WORD *)this + 44) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 12) = 0;
  *(void *)this = off_267180;
  *((void *)this + 15) = off_2671A8;
  int v3 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)off_26A488);
  v3[2] = 0;
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = (uint64_t)off_26E7D8;
  *((_DWORD *)v3 + 12) = 1;
  v3[9] = (uint64_t)off_26A398;
  v3[15] = (uint64_t)off_26A468;
  *int v3 = (uint64_t)off_26A1C8;
  v3[1] = (uint64_t)off_26A280;
  v3[7] = 0;
  v3[8] = 0;
  operator new();
}

void sub_13CC58()
{
}

uint64_t kaldi::nnet1::AverageAttention::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a2 + 20);
  if (v5 != *(_DWORD *)(a1 + 48)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)&stru_248.align + 2, "batch_size == num_utts", a5);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v62, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 640, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Running forward propagation for batch size = ", 45);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", which contains ", 17);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" frames each from ", 18);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v62);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 160))(a1);
  uint64_t v13 = *(void *)(a1 + 16) + 48 * (int)a4;
  int v14 = *(_DWORD *)(v13 + 20);
  if (!v14)
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    kaldi::CuMatrix<float>::Resize(v13, v5, v15, 0, 0);
    int v14 = *(_DWORD *)(v13 + 20);
  }
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v59, v13, 0, v14, 0, 1);
  kaldi::CuMatrixBase<float>::Add((uint64_t)&v59, 1.0);
  if (!HIDWORD(v60) || !DWORD2(v60)) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.size + 1, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v19);
  }
  float v20 = *(float *)v60;
  int v21 = kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 56), v16, v17, v18, v19);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v56, v13, 0, *(_DWORD *)(v13 + 20), (unsigned char *)&def_5A5E8 + 1, v21);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v56, a2, 111, v22, v23, 1.0, 1.0);
  kaldi::CuMatrix<float>::CuMatrix(v62, &v56, 111);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v62, 1.0 / v20);
  long long v54 = 0u;
  long long v53 = 0u;
  unint64_t v52 = off_262DC8;
  char v55 = 0;
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(a1 + 56), (uint64_t)v62, (uint64_t)&v52, a4, v24);
  if (*(void *)(a1 + 64))
  {
    kaldi::CuMatrix<float>::CuMatrix((uint64_t)v50, *(unsigned int *)(a2 + 20), (v63 + *(_DWORD *)(a2 + 16)), 0, 0, 0);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)v50, 0, v51, 0, *(_DWORD *)(a2 + 16));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v46, a2, 111, v27, v28);
    uint64_t v46 = off_262D80;
    long long v47 = 0u;
    long long v48 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)v50, 0, v51, (const char *)*(unsigned int *)(a2 + 16), v63);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v46, (uint64_t)&v52, 111, v29, v30);
    uint64_t v46 = off_262D80;
    long long v47 = 0u;
    long long v48 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
    long long v47 = 0u;
    long long v48 = 0u;
    uint64_t v46 = (void (**)())off_262DC8;
    char v49 = 0;
    kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(a1 + 64), (uint64_t)v50, (uint64_t)&v46, 0, v31);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, (uint64_t)&v46, 0, SHIDWORD(v47), 0, *(_DWORD *)(a2 + 16));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v43, a2, v32, v33, v34);
    uint64_t v43 = off_262D80;
    long long v44 = 0u;
    long long v45 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, (uint64_t)&v46, 0, SHIDWORD(v47), (const char *)*(unsigned int *)(a2 + 16), v63);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v43, (uint64_t)&v52, v35, v36, v37);
    uint64_t v43 = off_262D80;
    long long v44 = 0u;
    long long v45 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, (uint64_t)&v46, 0, SHIDWORD(v47), 0, *(_DWORD *)(a2 + 16));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, (uint64_t)&v43, 111, v38, v39);
    uint64_t v43 = off_262D80;
    long long v44 = 0u;
    long long v45 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, (uint64_t)&v46, 0, SHIDWORD(v47), (const char *)*(unsigned int *)(a2 + 16), v63);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)a3, (uint64_t)&v43, 111, v40, v41, 1.0, 1.0);
    uint64_t v43 = off_262D80;
    long long v44 = 0u;
    long long v45 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v46);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v50);
  }
  else
  {
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, (uint64_t)&v52, 111, v25, v26);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v52);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v62);
  long long v56 = off_262D80;
  long long v57 = 0u;
  long long v58 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v56);
  unsigned int v59 = off_262D80;
  long long v60 = 0u;
  long long v61 = 0u;
  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v59);
}

void sub_13D2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(), long long a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void (**a30)(),uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void (**a35)(),uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  a9 = off_262D80;
  a10 = 0u;
  a11 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a12);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a18);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a24);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a40);
  a30 = off_262D80;
  *(_OWORD *)((char *)v40 + 56) = 0u;
  *(_OWORD *)((char *)v40 + 72) = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a30);
  a35 = off_262D80;
  v40[6] = 0u;
  v40[7] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a35);
  _Unwind_Resume(a1);
}

void sub_13D424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

uint64_t virtual thunk to'kaldi::nnet1::AverageAttention::PropagateFnc(void *a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::AverageAttention::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 128), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::AverageAttention::Info(kaldi::nnet1::Nnet **this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  kaldi::WriteToken(v14, 0, (kaldi *)"<AverageFfn>", v2, v3);
  kaldi::nnet1::Nnet::Info((uint64_t *)&__p, this[7]);
  if ((v13 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v5 = v13;
  }
  else {
    uint64_t v5 = v12;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)p_p, v5);
  if ((char)v13 < 0) {
    operator delete(__p);
  }
  if (this[8])
  {
    kaldi::WriteToken(v14, 0, (kaldi *)"<Gate>", v6, v7);
    kaldi::nnet1::Nnet::Info((uint64_t *)&__p, this[8]);
    uint64_t v8 = (v13 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v9 = (v13 & 0x80u) == 0 ? v13 : v12;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v8, v9);
    if ((char)v13 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_13D628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::AverageAttention::Info(kaldi::nnet1::AverageAttention *this)
{
  return kaldi::nnet1::AverageAttention::Info((kaldi::nnet1::Nnet **)((char *)this + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::AverageAttention::CopyQuantized8Bit(kaldi::nnet1::AverageAttention *this)
{
}

void sub_13D6EC()
{
}

void kaldi::nnet1::AverageAttention::CopyQuantized16Bit(kaldi::nnet1::AverageAttention *this)
{
}

void sub_13D780()
{
}

void virtual thunk to'kaldi::nnet1::AverageAttention::CopyQuantized16Bit(kaldi::nnet1::AverageAttention *this)
{
  kaldi::nnet1::AverageAttention::CopyQuantized16Bit((kaldi::nnet1::AverageAttention *)((char *)this
                                                                                      + *(void *)(*(void *)this
                                                                                                  - 32)));
}

void kaldi::nnet1::AverageAttention::ReadData(uint64_t a1, uint64_t *a2, char a3)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 714, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading AverageAttention component", 34);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  uint64_t v6 = (kaldi::nnet1::Nnet **)(a1 + 64);
  long long v53 = 0;
  uint64_t v54 = 0;
  uint64_t v7 = (kaldi::nnet1::Nnet **)(a1 + 56);
  uint64_t v55 = 0;
  if (kaldi::Peek(a2, a3) != 60) {
    goto LABEL_43;
  }
  kaldi::ReadToken(a2, a3, (uint64_t)&v53, v8, v9);
  if (SHIBYTE(v55) < 0)
  {
    uint64_t v11 = v54;
    if (v54 == 6)
    {
      if (*(_DWORD *)v53 == 1952532284 && *((_WORD *)v53 + 2) == 15973) {
        goto LABEL_30;
      }
      uint64_t v11 = v54;
    }
    else if (v54 == 12 && *(void *)v53 == 0x656761726576413CLL && *((_DWORD *)v53 + 2) == 1047422534)
    {
      goto LABEL_12;
    }
    if (v11 != 19) {
      goto LABEL_64;
    }
    char v15 = (uint64_t *)v53;
    goto LABEL_35;
  }
  if (HIBYTE(v55) == 6)
  {
    if (v53 != 1952532284 || WORD2(v53) != 15973)
    {
LABEL_64:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 736);
      uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unrecognized token ", 19);
      if (v55 >= 0) {
        long long v47 = &v53;
      }
      else {
        long long v47 = v53;
      }
      if (v55 >= 0) {
        uint64_t v48 = HIBYTE(v55);
      }
      else {
        uint64_t v48 = v54;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
LABEL_30:
    operator new();
  }
  if (HIBYTE(v55) == 12)
  {
    if (v53 != (void *)0x656761726576413CLL || v54 != 1047422534) {
      goto LABEL_64;
    }
LABEL_12:
    operator new();
  }
  if (HIBYTE(v55) != 19) {
    goto LABEL_64;
  }
  char v15 = (uint64_t *)&v53;
LABEL_35:
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  uint64_t v18 = *(uint64_t *)((char *)v15 + 11);
  if (v16 != 0x6761726576412F3CLL || v17 != 0x69746E6574744165 || v18 != 0x3E6E6F69746E6574) {
    goto LABEL_64;
  }
LABEL_43:
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 739, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"done", 4);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  if (!*v7)
  {
    char v49 = "average_ffn_";
    long long v50 = (unsigned char *)(&stru_298 + 77);
    goto LABEL_75;
  }
  kaldi::nnet1::Nnet::GetHistoricalComponents(*v7, &__p);
  uint64_t v25 = __p;
  if (__p != v57)
  {
    BOOL v26 = 1;
    if (!__p) {
      goto LABEL_54;
    }
LABEL_53:
    long long v57 = v25;
    operator delete(v25);
    goto LABEL_54;
  }
  if (*v6)
  {
    kaldi::nnet1::Nnet::GetHistoricalComponents(*v6, &v51);
    BOOL v26 = v51 != v52;
    if (v51)
    {
      unint64_t v52 = v51;
      operator delete(v51);
    }
    uint64_t v25 = __p;
    if (__p) {
      goto LABEL_53;
    }
  }
  else
  {
    BOOL v26 = 0;
    if (__p) {
      goto LABEL_53;
    }
  }
LABEL_54:
  if (v26)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 743);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Recurrent neural networks are not supported inside the average attention component.", 83);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  int v27 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 40) + 12);
  if (v27 != kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 56), v21, v22, v23, v24))
  {
    char v49 = "OutputDim() == average_ffn_->OutputDim()";
    long long v50 = &stru_2E8.sectname[2];
LABEL_75:
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", v50, v49, v9);
  }
  if (*v6)
  {
    int v31 = kaldi::nnet1::Nnet::InputDim(*v6, v28, v29, v30, v9);
    int v32 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 40) + 8);
    if (v31 != kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 56), v33, v34, v35, v36) + v32
      || (int v40 = kaldi::nnet1::Nnet::OutputDim(*v6, v37, v38, v39, v9),
          int v41 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 40) + 12),
          v40 != kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 56), v42, v43, v44, v45)
               + v41))
    {
      char v49 = "!gate_ || (gate_->InputDim() == InputDim() + average_ffn_->InputDim() && gate_->OutputDim() == OutputDim() +"
            " average_ffn_->OutputDim())";
      long long v50 = (unsigned char *)(&stru_2E8 + 4);
      goto LABEL_75;
    }
  }
  if (SHIBYTE(v55) < 0) {
    operator delete(v53);
  }
}

void sub_13DE28()
{
}

void sub_13DE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::AverageAttention::ReadData(void *a1, uint64_t *a2, char a3)
{
}

void *kaldi::nnet1::AverageAttention::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  if (!*(void *)(a1 + 56)) {
    kaldi::KaldiAssertFailure_((kaldi *)"WriteData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", &stru_2E8.sectname[8], "average_ffn_", a5);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<AverageFfn>", a4, a5);
  kaldi::nnet1::Nnet::Write(*(uint64_t **)(a1 + 56), a2, (uint64_t)a3, a4, v9);
  if (*(void *)(a1 + 64))
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<Gate>", v10, v11);
    kaldi::nnet1::Nnet::Write(*(uint64_t **)(a1 + 64), a2, (uint64_t)a3, a4, v12);
  }

  return kaldi::WriteToken(a2, a3, (kaldi *)"</AverageAttention>", v10, v11);
}

void *virtual thunk to'kaldi::nnet1::AverageAttention::WriteData(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::AverageAttention::WriteData((uint64_t)a1 + *(void *)(*a1 - 120), a2, a3, a4, a5);
}

uint64_t *kaldi::nnet1::AverageAttention::EnsureBuffers(kaldi::nnet1::AverageAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 2, 1uLL);
}

uint64_t *non-virtual thunk to'kaldi::nnet1::AverageAttention::EnsureBuffers(kaldi::nnet1::AverageAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, 1uLL);
}

uint64_t kaldi::nnet1::AverageAttention::HistoryStateSize(kaldi::nnet1::Nnet **this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::Nnet::InputDim(this[7], a2, a3, a4, a5) + 1;
}

uint64_t non-virtual thunk to'kaldi::nnet1::AverageAttention::HistoryStateSize(kaldi::nnet1::Nnet **this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::Nnet::InputDim(this[6], a2, a3, a4, a5) + 1;
}

uint64_t kaldi::nnet1::AverageAttention::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 160))(a1);
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", &stru_2E8.segname[8], "batch_idx == 0", v8);
  }
  uint64_t v9 = a2[1];
  if (v9 != *(_DWORD *)(a1 + 48)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", &stru_2E8.segname[9], "sequence_idx.size() == hopts_.num_sequences", v8);
  }
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(v10 + 32) = a3;
  if (v9)
  {
    for (unint64_t i = 0; i != v9; ++i)
    {
      if (((*(void *)(*a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v13, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 774);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v13, "ResetHistoryState for AverageAttention makes only sense if all utterances get reset at the same time");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v13);
      }
    }
  }
  long long v15 = 0u;
  long long v14 = 0u;
  unsigned __int8 v13 = off_262DC8;
  char v16 = 0;
  kaldi::CuMatrix<float>::operator=(v10, (uint64_t)&v13);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v13);
}

void sub_13E148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_13E15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t non-virtual thunk to'kaldi::nnet1::AverageAttention::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  return kaldi::nnet1::AverageAttention::ResetHistoryState(a1 - 8, a2, a3, a4);
}

uint64_t kaldi::nnet1::AverageAttention::ResetHistoryState(kaldi::nnet1::AverageAttention *this)
{
  int v3 = (void *)*((void *)this + 2);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 6;
    uint64_t v5 = v2 - 6;
    uint64_t v6 = v2 - 6;
    do
    {
      uint64_t v7 = *v6;
      v6 -= 6;
      (*(void (**)(void *))(v7 + 16))(v5);
      v4 -= 6;
      BOOL v8 = v5 == v3;
      uint64_t v5 = v6;
    }
    while (!v8);
  }
  *((void *)this + 3) = v3;
  uint64_t v9 = *(uint64_t (**)(kaldi::nnet1::AverageAttention *))(*(void *)this + 160);

  return v9(this);
}

uint64_t non-virtual thunk to'kaldi::nnet1::AverageAttention::ResetHistoryState(kaldi::nnet1::AverageAttention *this)
{
  return kaldi::nnet1::AverageAttention::ResetHistoryState((kaldi::nnet1::AverageAttention *)((char *)this - 8));
}

unsigned int *kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  if (a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)&stru_2E8.size + 3, "batch_idx == 0", a5);
  }
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(*(void *)(a1 + 16) + 20), *(unsigned int *)(*(void *)(a1 + 16) + 16), 0, 0);
  uint64_t v9 = *(void *)(a1 + 16);

  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, v9, 111, v7, v8);
}

unsigned int *non-virtual thunk to'kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::AverageAttention::GetHistoryState(a1 - 8, a2, a3, a4, a5);
}

void kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, const char *a5)
{
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)&stru_2E8.offset + 1, "batch_idx == 0", a5);
  }
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 48) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)&stru_2E8.offset + 2, "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", a5);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  kaldi::CuVector<float>::Resize((uint64_t)a2, v8, 0, v9, v10);
  uint64_t v14 = *(void *)(a1 + 16);
  int v15 = *(_DWORD *)(v14 + 20);
  if (v15 >= 1)
  {
    if (v15 <= a3) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v13);
    }
    uint64_t v16 = *(void *)(v14 + 8) + 4 * (int)(*(_DWORD *)(v14 + 24) * a3);
    unsigned int v17 = *(_DWORD *)(v14 + 16);
    uint64_t v18 = *(void *)(v14 + 32);
    v19[1] = v16;
    v19[0] = &off_262E20;
    v19[2] = v17;
    v19[3] = v18;
    kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v19, v11, v12, v13);
  }
}

void non-virtual thunk to'kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, const char *a5)
{
}

unsigned int *kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t *a1, uint64_t a2, int a3)
{
  (*(void (**)(uint64_t *))(*a1 + 160))(a1);
  if (a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)&stru_2E8.reloff + 3, "batch_idx == 0", v6);
  }
  kaldi::CuMatrix<float>::Resize(a1[2], *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  uint64_t v9 = (unsigned int *)a1[2];

  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v9, a2, 111, v7, v8);
}

unsigned int *non-virtual thunk to'kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  return kaldi::nnet1::AverageAttention::SetHistoryState((uint64_t *)(a1 - 8), a2, a3);
}

void kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  (*(void (**)(uint64_t *))(*a1 + 160))(a1);
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)&stru_2E8.flags + 2, "batch_idx == 0", v8);
  }
  if ((a3 & 0x80000000) != 0 || *((_DWORD *)a1 + 12) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)&stru_2E8.flags + 3, "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", v8);
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if (v9 != (*(unsigned int (**)(uint64_t *))(*a1 + 88))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)&stru_2E8.reserved1, "history.Dim() == HistoryStateSize()", v10);
  }
  uint64_t v11 = *(unsigned int *)(a2 + 16);
  uint64_t v12 = a1[2];
  if ((int)v11 < 1)
  {
    kaldi::CuMatrix<float>::Resize(v12, 0, 0, 0, 0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(v12, *((unsigned int *)a1 + 12), v11, 2u, 0);
    uint64_t v16 = a1[2];
    if (*(_DWORD *)(v16 + 20) <= a3) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v15);
    }
    uint64_t v17 = *(void *)(v16 + 8) + 4 * (int)(*(_DWORD *)(v16 + 24) * a3);
    unsigned int v18 = *(_DWORD *)(v16 + 16);
    uint64_t v19 = *(void *)(v16 + 32);
    v20[1] = v17;
    v20[0] = &off_262E20;
    v20[2] = v18;
    v20[3] = v19;
    kaldi::CuVectorBase<float>::CopyFromVec(v20, a2, v13, v14, v15);
  }
}

void non-virtual thunk to'kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
}

void kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2 + 192);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::ScaledDotAttention *)((char *)this + 144));
}

{
  uint64_t vars8;

  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(this);

  operator delete();
}

uint64_t kaldi::nnet1::ScaledDotAttention::Copy(kaldi::nnet1::ScaledDotAttention *this)
{
  return (*(uint64_t (**)(kaldi::nnet1::ScaledDotAttention *, void))(*(void *)this + 88))(this, 0);
}

uint64_t kaldi::nnet1::ScaledDotAttention::GetType(kaldi::nnet1::ScaledDotAttention *this)
{
  return 285;
}

void virtual thunk to'kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this)
{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)((char *)this
                                                                                           + *(void *)(*(void *)this - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)((char *)this
                                                                                           + *(void *)(*(void *)this - 24)));

  operator delete();
}

uint64_t virtual thunk to'kaldi::nnet1::ScaledDotAttention::Copy(kaldi::nnet1::ScaledDotAttention *this)
{
  return (*(uint64_t (**)(char *, void))(*(void *)((char *)this + *(void *)(*(void *)this - 32))
                                                   + 88))((char *)this + *(void *)(*(void *)this - 32), 0);
}

void virtual thunk to'kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(void *a1)
{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)((char *)a1
                                                                                           + *(void *)(*a1 - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)((char *)a1
                                                                                           + *(void *)(*a1 - 24)));

  operator delete();
}

void kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this)
{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(this, (uint64_t *)&off_269B38);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2 + 200);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::MultiHeadAttention *)((char *)this + 152));
}

{
  uint64_t vars8;

  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(this);

  operator delete();
}

uint64_t kaldi::nnet1::MultiHeadAttention::GetType(kaldi::nnet1::MultiHeadAttention *this)
{
  return 286;
}

void virtual thunk to'kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this)
{
  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention((kaldi::nnet1::MultiHeadAttention *)((char *)this
                                                                                           + *(void *)(*(void *)this - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention((kaldi::nnet1::MultiHeadAttention *)((char *)this
                                                                                           + *(void *)(*(void *)this - 24)));

  operator delete();
}

void virtual thunk to'kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(void *a1)
{
  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention((kaldi::nnet1::MultiHeadAttention *)((char *)a1
                                                                                           + *(void *)(*a1 - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention((kaldi::nnet1::MultiHeadAttention *)((char *)a1
                                                                                           + *(void *)(*a1 - 24)));

  operator delete();
}

void kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2 + 248);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)this + 200));
}

{
  uint64_t vars8;

  kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(this);

  operator delete();
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::GetType(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  return 287;
}

void virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)this + *(void *)(*(void *)this - 24)));

  operator delete();
}

void virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(void *a1)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)a1 + *(void *)(*a1 - 24)));

  operator delete();
}

void kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2 + 128);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::SelfAttention *)((char *)this + 80));
}

{
  uint64_t vars8;

  kaldi::nnet1::SelfAttention::~SelfAttention(this);

  operator delete();
}

void kaldi::nnet1::SelfAttention::Copy(kaldi::nnet1::SelfAttention *this)
{
}

void sub_13EC04()
{
}

uint64_t kaldi::nnet1::SelfAttention::GetType(kaldi::nnet1::SelfAttention *this)
{
  return 288;
}

void non-virtual thunk to'kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)this - 8));

  operator delete();
}

void virtual thunk to'kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this)
{
  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)this
                                                                            + *(void *)(*(void *)this - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)this
                                                                            + *(void *)(*(void *)this - 24)));

  operator delete();
}

void virtual thunk to'kaldi::nnet1::SelfAttention::Copy(kaldi::nnet1::SelfAttention *this)
{
}

void virtual thunk to'kaldi::nnet1::SelfAttention::~SelfAttention(void *a1)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)a1 + *(void *)(*a1 - 24)));

  operator delete();
}

void kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2 + 120);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::AverageAttention *)((char *)this + 72));
}

{
  uint64_t vars8;

  kaldi::nnet1::AverageAttention::~AverageAttention(this);

  operator delete();
}

void kaldi::nnet1::AverageAttention::Copy(kaldi::nnet1::AverageAttention *this)
{
}

void sub_13EE44()
{
}

uint64_t kaldi::nnet1::AverageAttention::GetType(kaldi::nnet1::AverageAttention *this)
{
  return 289;
}

void non-virtual thunk to'kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8));

  operator delete();
}

void virtual thunk to'kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this)
{
  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this
                                                                                     + *(void *)(*(void *)this - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this
                                                                                     + *(void *)(*(void *)this - 24)));

  operator delete();
}

void virtual thunk to'kaldi::nnet1::AverageAttention::Copy(kaldi::nnet1::AverageAttention *this)
{
  kaldi::nnet1::AverageAttention::Copy((kaldi::nnet1::AverageAttention *)((char *)this
                                                                        + *(void *)(*(void *)this - 32)));
}

void virtual thunk to'kaldi::nnet1::AverageAttention::~AverageAttention(void *a1)
{
  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)a1
                                                                                     + *(void *)(*a1 - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)a1
                                                                                     + *(void *)(*a1 - 24)));

  operator delete();
}

double kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, uint64_t *a2, int a3, BOOL a4, float a5, char a6)
{
  int v9 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, a2 + 1);
  uint64_t v10 = *a2;
  uint64_t *v9 = *a2;
  *(uint64_t *)((char *)v9 + *(void *)(v10 - 40)) = a2[5];
  *(uint64_t *)((char *)v9 + *(void *)(*v9 - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[6];
  *(uint64_t *)((char *)v9 + *(void *)(*v9 - 56)) = a2[7];
  double result = 0.0;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  v9[1] = (uint64_t)off_262DC8;
  *((unsigned char *)v9 + 48) = 0;
  *((_OWORD *)v9 + 4) = 0u;
  *((_OWORD *)v9 + 5) = 0u;
  v9[7] = (uint64_t)off_262DC8;
  *((unsigned char *)v9 + 96) = 0;
  *((unsigned char *)v9 + 104) = a6;
  *((float *)v9 + 27) = a5;
  *((_OWORD *)v9 + 7) = 0u;
  *((_OWORD *)v9 + 8) = 0u;
  return result;
}

void kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 40)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[7];
  uint64_t v4 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 56);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 8);

  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(this);
}

void kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, uint64_t *a2, int a3, BOOL a4, float a5, int a6, int a7)
{
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, a2 + 1, a3, a4, a5, a6 != 0);
  uint64_t v9 = *a2;
  *(void *)uint64_t v10 = *a2;
  *(void *)(v10 + *(void *)(v9 - 40)) = a2[9];
  *(void *)(v10 + *(void *)(*(void *)v10 - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[10];
  *(void *)(v10 + *(void *)(*(void *)v10 - 56)) = a2[11];
  *(_DWORD *)(v10 + 144) = a7;
}

void kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 40)) = a2[13];
  *(void *)((char *)this + *(void *)(*(void *)this - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[14];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[15];
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 152);

  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(this, a2 + 2);
}

void kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 40)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[7];
  *((void *)this + 1) = off_269F50;
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent((kaldi::nnet1::SelfAttention *)((char *)this + 8));

  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(this);
}

void kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 40)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[7];
  *((void *)this + 1) = off_26A280;
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 8, 0);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 7, 0);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent((kaldi::nnet1::AverageAttention *)((char *)this + 8));

  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(this);
}

kaldi::nnet1::RecurrentAttentionBaseComponent *kaldi::nnet1::RecurrentAttentionBaseComponent::RecurrentAttentionBaseComponent(kaldi::nnet1::RecurrentAttentionBaseComponent *this, uint64_t *a2)
{
  uint64_t v4 = a2[1];
  *(void *)this = v4;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[2];
  *((void *)this + 1) = -1;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentAttentionBaseComponent *)((char *)this + 16), a2 + 3);
  uint64_t v5 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v5 - 24)) = a2[5];
  *((void *)this + 2) = a2[6];
  return this;
}

void sub_13FB68(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GlobalRecurrentAttention::GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this, int a2, int a3)
{
  *((_DWORD *)this + 170) = a2;
  *((_DWORD *)this + 171) = a3;
  *((_WORD *)this + 344) = 0;
  *((void *)this + 87) = 0;
  *((void *)this + 89) = 0;
  *((void *)this + 88) = 0;
  *((void *)this + 84) = off_266498;
  *((void *)this + 90) = off_26E7B8;
  *(_OWORD *)((char *)this + 728) = xmmword_20CEC0;
  *((void *)this + 93) = 0x3BF800000;
  *((_DWORD *)this + 188) = 1;
  *((_WORD *)this + 378) = 0;
  *((unsigned char *)this + 758) = 0;
  kaldi::nnet1::RecurrentAttentionBaseComponent::RecurrentAttentionBaseComponent(this, (uint64_t *)off_26BAB8);
  *(void *)this = off_26B6A8;
  *((void *)this + 84) = off_26B998;
  *((void *)this + 2) = off_26B7F0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  operator new();
}

void sub_13FE48()
{
}

kaldi::nnet1::GlobalRecurrentAttention *kaldi::nnet1::GlobalRecurrentAttention::GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::GlobalRecurrentAttention *a2)
{
  *((void *)this + 85) = *(void *)((char *)a2 + *(void *)(*(void *)a2 - 24) + 8);
  *((_WORD *)this + 344) = 0;
  *((void *)this + 89) = 0;
  *((void *)this + 88) = 0;
  *((void *)this + 87) = 0;
  *((void *)this + 84) = off_266498;
  *((void *)this + 90) = off_26E7B8;
  *(_OWORD *)((char *)this + 728) = xmmword_20CEC0;
  *((_DWORD *)this + 186) = -1082130432;
  *(void *)((char *)this + 748) = 0x100000003;
  *((_WORD *)this + 378) = 0;
  *((unsigned char *)this + 758) = 0;
  kaldi::nnet1::RecurrentAttentionBaseComponent::RecurrentAttentionBaseComponent(this, (uint64_t *)off_26BAB8);
  *(void *)this = off_26B6A8;
  *((void *)this + 84) = off_26B998;
  *((void *)this + 2) = off_26B7F0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((void *)this + 25) = off_262DC8;
  *((unsigned char *)this + 240) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((void *)this + 31) = off_262DC8;
  *((unsigned char *)this + 288) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((void *)this + 37) = off_262DC8;
  *((unsigned char *)this + 336) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((void *)this + 43) = off_262DC8;
  *((unsigned char *)this + 384) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((void *)this + 49) = off_262DC8;
  *((unsigned char *)this + 432) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((void *)this + 55) = off_262DC8;
  *((unsigned char *)this + 480) = 0;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((void *)this + 61) = off_262DC8;
  *((unsigned char *)this + 528) = 0;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((void *)this + 67) = off_262DC8;
  *((unsigned char *)this + 576) = 0;
  *((void *)this + 75) = 0;
  *((void *)this + 74) = 0;
  *((void *)this + 76) = 0;
  *((void *)this + 73) = off_262E60;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((void *)this + 1) = *((void *)a2 + 1);
  uint64_t v5 = *((void *)a2 + 22);
  if (!v5)
  {
    uint64_t v10 = "src.src_dot_trans_";
    uint64_t v11 = (unsigned char *)(&stru_20 + 20);
    goto LABEL_11;
  }
  if (!*((void *)a2 + 23))
  {
    uint64_t v10 = "src.tgt_dot_trans_";
    uint64_t v11 = (unsigned char *)(&stru_20 + 21);
    goto LABEL_11;
  }
  if (!*((void *)a2 + 24))
  {
    uint64_t v10 = "src.recurrent_net_";
    uint64_t v11 = &stru_20.segname[14];
LABEL_11:
    kaldi::KaldiAssertFailure_((kaldi *)"GlobalRecurrentAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", v11, v10, v4);
  }
  *((void *)this + 22) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  *((void *)this + 23) = (*(uint64_t (**)(void))(**((void **)a2 + 23) + 16))(*((void *)a2 + 23));
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 200, (uint64_t)a2 + 200);
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 248, (uint64_t)a2 + 248);
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 296, (uint64_t)a2 + 296);
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 440, (uint64_t)a2 + 440);
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 488, (uint64_t)a2 + 488);
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 536, (uint64_t)a2 + 536);
  kaldi::CuVector<float>::operator=((uint64_t)this + 584, (uint64_t)a2 + 584, v6, v7, v8);
  if (this != a2)
  {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)this + 616, *((void *)a2 + 77), *((void *)a2 + 78), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 78) - *((void *)a2 + 77)) >> 3));
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 640, *((char **)a2 + 80), *((void *)a2 + 81), (uint64_t)(*((void *)a2 + 81) - *((void *)a2 + 80)) >> 2);
  }
  *((_DWORD *)this + 166) = *((_DWORD *)a2 + 166);
  *((unsigned char *)this + 668) = 0;
  if ((kaldi::nnet1::Nnet::IsRnn(*((kaldi::nnet1::Nnet **)this + 24)) & 1) == 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "GlobalRecurrentAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 69);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"it doesn't make sense to use a non-reccurent network here", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *))(*(void *)this + 296))(this);
  return this;
}

void sub_140378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, kaldi::nnet1::UpdatableComponent *a12, void **a13, uint64_t a14)
{
  uint64_t v23 = *a13;
  if (*a13)
  {
    *((void *)v14 + 81) = v23;
    operator delete(v23);
  }
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  kaldi::CuVector<float>::~CuVector(v18);
  kaldi::CuMatrix<float>::~CuMatrix(v21);
  kaldi::CuMatrix<float>::~CuMatrix(v20);
  kaldi::CuMatrix<float>::~CuMatrix(v19);
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  kaldi::CuMatrix<float>::~CuMatrix(a11);
  kaldi::CuMatrix<float>::~CuMatrix(v17);
  kaldi::CuMatrix<float>::~CuMatrix(v16);
  kaldi::CuMatrix<float>::~CuMatrix(v15);
  kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent(v14, (uint64_t)off_26BAB8);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a12);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[8];
  *((void *)this + 2) = a2[9];
  uint64_t v5 = *((void *)this + 22);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 23);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (kaldi::nnet1::Nnet *)*((void *)this + 24);
  if (v7)
  {
    kaldi::nnet1::Nnet::~Nnet(v7);
    operator delete();
  }
  uint64_t v8 = (void *)*((void *)this + 80);
  if (v8)
  {
    *((void *)this + 81) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void **)((char *)this + 616);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  kaldi::CuVector<float>::~CuVector((void *)this + 73);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 536);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 488);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 440);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 392);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 344);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 296);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 248);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 200);
  kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent(this, (uint64_t)(a2 + 1));
}

void kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 672));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 672));

  operator delete();
}

void non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + 656));
}

{
  kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this - 16));
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  uint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 672);

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + *(void *)(*(void *)this - 24)));
}

void kaldi::nnet1::GlobalRecurrentAttention::Copy(kaldi::nnet1::GlobalRecurrentAttention *this)
{
}

void sub_140780()
{
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::Copy(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  kaldi::nnet1::GlobalRecurrentAttention::Copy((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this
                                                                                        + *(void *)(*(void *)this - 32)));
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetType(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return 283;
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetType(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return 283;
}

void kaldi::nnet1::GlobalRecurrentAttention::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  memset(v81, 0, sizeof(v81));
  uint64_t v6 = a2 + 4;
  uint64_t v7 = a1 + 12;
  uint64_t v8 = a1 + 8;
  while (1)
  {
    if ((*((unsigned char *)v6 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_44;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v81, a4, a5);
    if (SHIBYTE(v81[2]) < 0) {
      break;
    }
    if (HIBYTE(v81[2]) == 15)
    {
      BOOL v18 = v81[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v81 + 7) == (void *)0x3E736E6F69746E65;
      uint64_t v13 = v7;
      if (!v18)
      {
LABEL_35:
        if (HIBYTE(v81[2]) == 12)
        {
          uint64_t v19 = v81;
          goto LABEL_39;
        }
        goto LABEL_78;
      }
    }
    else
    {
      if (HIBYTE(v81[2]) != 22) {
        goto LABEL_35;
      }
      BOOL v12 = v81[0] == (void *)0x53656372756F533CLL
         && v81[1] == (void *)0x656D694465746174
         && *(void **)((char *)&v81[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      uint64_t v13 = v8;
      if (!v12) {
        goto LABEL_78;
      }
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, 0, v13, v9, v10);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v14 = (int *)v81[1];
  if (v81[1] != (char *)&dword_C + 3)
  {
    if (v81[1] != (char *)&dword_14 + 2) {
      goto LABEL_37;
    }
    BOOL v15 = *(void *)v81[0] == 0x53656372756F533CLL && *((void *)v81[0] + 1) == 0x656D694465746174;
    BOOL v16 = v15 && *(void *)((char *)v81[0] + 14) == 0x3E6E6F69736E656DLL;
    uint64_t v13 = v8;
    if (!v16) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  BOOL v17 = *(void *)v81[0] == 0x6574744178614D3CLL && *(void *)((char *)v81[0] + 7) == 0x3E736E6F69746E65;
  uint64_t v13 = v7;
  if (v17) {
    goto LABEL_34;
  }
  uint64_t v14 = (int *)v81[1];
LABEL_37:
  if (v14 != &dword_C) {
    goto LABEL_78;
  }
  uint64_t v19 = (void **)v81[0];
LABEL_39:
  uint64_t v20 = *v19;
  int v21 = *((_DWORD *)v19 + 2);
  if (v20 != (void *)0x6E6F706D6F432F3CLL || v21 != 1047817829)
  {
LABEL_78:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 131);
    long long v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v81[2]) >= 0) {
      long long v57 = v81;
    }
    else {
      long long v57 = (void **)v81[0];
    }
    if (SHIBYTE(v81[2]) >= 0) {
      uint64_t v58 = HIBYTE(v81[2]);
    }
    else {
      uint64_t v58 = (uint64_t)v81[1];
    }
    unsigned int v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
    long long v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" (SourceStateDimension|MaxAttentions)", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77);
  }
LABEL_44:
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v73 = 0;
  kaldi::ExpectToken(a2, 0, (kaldi *)"<SourceDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&v74, v23, v24);
  uint64_t v25 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v74);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v73 + 4, v26, v27);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v73, v28, v29);
  kaldi::nnet1::Component::NewComponentOfType(v25);
  if (!v30)
  {
    *(void *)(a1 + 176) = 0;
LABEL_86:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 149);
    long long v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"cannot initialize source dot transform from ", 44);
    if (v76 >= 0) {
      uint64_t v62 = &v74;
    }
    else {
      uint64_t v62 = v74;
    }
    if (v76 >= 0) {
      uint64_t v63 = HIBYTE(v76);
    }
    else {
      uint64_t v63 = v75;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77);
  }
  *(void *)(a1 + 176) = v31;
  if (!v31) {
    goto LABEL_86;
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v31 + 96))(v31, a2, a3);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<TargetDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&v74, v32, v33);
  uint64_t v34 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v74);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v73 + 4, v35, v36);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v73, v37, v38);
  kaldi::nnet1::Component::NewComponentOfType(v34);
  if (!v39)
  {
    *(void *)(a1 + 184) = 0;
LABEL_94:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 161);
    unsigned int v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"cannot initialize target dot transform from ", 44);
    if (v76 >= 0) {
      unint64_t v65 = &v74;
    }
    else {
      unint64_t v65 = v74;
    }
    if (v76 >= 0) {
      uint64_t v66 = HIBYTE(v76);
    }
    else {
      uint64_t v66 = v75;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77);
  }
  *(void *)(a1 + 184) = v40;
  if (!v40) {
    goto LABEL_94;
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v40 + 96))(v40, a2, a3);
  uint64_t v70 = 0;
  size_t v71 = 0;
  uint64_t v72 = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  int v41 = std::locale::use_facet(&v77, &std::ctype<char>::id);
  unsigned __int8 v42 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
  std::locale::~locale(&v77);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v70, v42);
  size_t v43 = HIBYTE(v72);
  char v44 = HIBYTE(v72);
  uint64_t v46 = (char *)v70;
  size_t v45 = v71;
  long long v47 = (char *)v70 + v71;
  if (v72 >= 0)
  {
    long long v47 = (char *)&v70 + HIBYTE(v72);
    uint64_t v46 = (char *)&v70;
  }
  if (v46 != v47)
  {
    do
    {
      int v48 = *v46;
      if (v48 == 124) {
        LOBYTE(v48) = 10;
      }
      *v46++ = v48;
    }
    while (v46 != v47);
    size_t v43 = HIBYTE(v72);
    size_t v45 = v71;
    char v44 = HIBYTE(v72);
  }
  if (v44 >= 0) {
    size_t v49 = v43;
  }
  else {
    size_t v49 = v45;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v49 + 1);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v50 = __p;
  }
  else {
    long long v50 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  if (v49)
  {
    if (v72 >= 0) {
      int v51 = &v70;
    }
    else {
      int v51 = v70;
    }
    memmove(v50, v51, v49);
  }
  *(_WORD *)((char *)&v50->__r_.__value_.__l.__data_ + v49) = 10;
  std::istringstream::basic_istringstream[abi:ne180100]((void (__cdecl ***)(std::istringstream *__hidden))&v77, __p, 8);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  kaldi::nnet1::Nnet::Init(*(kaldi::nnet1::Nnet **)(a1 + 192), (uint64_t *)&v77, a3);
  kaldi::nnet1::Nnet::ValidateNnet(*(kaldi::nnet1::Nnet **)(a1 + 192), v52, v53, v54, v55);
  if ((kaldi::nnet1::Nnet::IsRnn(*(kaldi::nnet1::Nnet **)(a1 + 192)) & 1) == 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 178);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"it doesn't make sense to use a non-recurrent network here", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  if (v80 < 0) {
    operator delete(v79);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  if (SHIBYTE(v72) < 0) {
    operator delete(v70);
  }
  if (SHIBYTE(v76) < 0) {
    operator delete(v74);
  }
  if (SHIBYTE(v81[2]) < 0) {
    operator delete(v81[0]);
  }
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::InitData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::GlobalRecurrentAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  memset(v38, 0, 24);
  uint64_t v7 = a1 + 12;
  uint64_t v8 = a1 + 8;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_44;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)v38, v9, v10);
    if (SHIBYTE(v38[2]) < 0) {
      break;
    }
    if (HIBYTE(v38[2]) == 15)
    {
      BOOL v20 = v38[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v38 + 7) == (void *)0x3E736E6F69746E65;
      uint64_t v15 = v7;
      if (!v20)
      {
LABEL_35:
        if (HIBYTE(v38[2]) == 12)
        {
          int v21 = v38;
          goto LABEL_39;
        }
        goto LABEL_52;
      }
    }
    else
    {
      if (HIBYTE(v38[2]) != 22) {
        goto LABEL_35;
      }
      BOOL v14 = v38[0] == (void *)0x53656372756F533CLL
         && v38[1] == (void *)0x656D694465746174
         && *(void **)((char *)&v38[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      uint64_t v15 = v8;
      if (!v14) {
        goto LABEL_52;
      }
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, a3, v15, v11, v12);
  }
  BOOL v16 = (int *)v38[1];
  if (v38[1] != (char *)&dword_C + 3)
  {
    if (v38[1] != (char *)&dword_14 + 2) {
      goto LABEL_37;
    }
    BOOL v17 = *(void *)v38[0] == 0x53656372756F533CLL && *((void *)v38[0] + 1) == 0x656D694465746174;
    BOOL v18 = v17 && *(void *)((char *)v38[0] + 14) == 0x3E6E6F69736E656DLL;
    uint64_t v15 = v8;
    if (!v18) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  BOOL v19 = *(void *)v38[0] == 0x6574744178614D3CLL && *(void *)((char *)v38[0] + 7) == 0x3E736E6F69746E65;
  uint64_t v15 = v7;
  if (v19) {
    goto LABEL_34;
  }
  BOOL v16 = (int *)v38[1];
LABEL_37:
  if (v16 != &dword_C) {
    goto LABEL_52;
  }
  int v21 = (void **)v38[0];
LABEL_39:
  uint64_t v22 = *v21;
  int v23 = *((_DWORD *)v21 + 2);
  if (v22 != (void *)0x6E6F706D6F432F3CLL || v23 != 1047817829)
  {
LABEL_52:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 194);
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unrecognized token ", 19);
    if (SHIBYTE(v38[2]) >= 0) {
      uint64_t v34 = v38;
    }
    else {
      uint64_t v34 = (void **)v38[0];
    }
    if (SHIBYTE(v38[2]) >= 0) {
      uint64_t v35 = HIBYTE(v38[2]);
    }
    else {
      uint64_t v35 = (uint64_t)v38[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
LABEL_44:
  kaldi::ExpectToken(a2, a3, (kaldi *)"<SourceDotTransform>");
  uint64_t v25 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v25)
  {
    *(void *)(a1 + 176) = 0;
LABEL_60:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 198);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"read source dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
  *(void *)(a1 + 176) = v26;
  if (!v26) {
    goto LABEL_60;
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  kaldi::ExpectToken(a2, a3, (kaldi *)"<TargetDotTransform>");
  int v27 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v27)
  {
    *(void *)(a1 + 184) = 0;
LABEL_62:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 202);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"read target dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
  *(void *)(a1 + 184) = v28;
  if (!v28) {
    goto LABEL_62;
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  kaldi::nnet1::Nnet::Read(*(uint64_t ***)(a1 + 192), a2, a3, a4);
  kaldi::nnet1::Nnet::ValidateNnet(*(kaldi::nnet1::Nnet **)(a1 + 192), v29, v30, v31, v32);
  if ((kaldi::nnet1::Nnet::IsRnn(*(kaldi::nnet1::Nnet **)(a1 + 192)) & 1) == 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 207);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"it doesn't make sense to use a non-reccurent network here", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  if (SHIBYTE(v38[2]) < 0) {
    operator delete(v38[0]);
  }
}

void sub_141590(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::GlobalRecurrentAttention::WriteConfig(int a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<SourceStateDimension>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxAttentions>", v7, v8);
  kaldi::WriteBasicType<int>(a2, (int)a3);

  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v9, v10);
}

void *virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::WriteConfig(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::GlobalRecurrentAttention::WriteConfig(a1 + *(void *)(*a1 - 184), a2, a3, a4, a5);
}

void *kaldi::nnet1::GlobalRecurrentAttention::WriteData(uint64_t *a1, void *a2, const char *a3, uint64_t a4)
{
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SourceDotTransform>", v8, v9);
  kaldi::nnet1::Component::Write(a1[22], a2, (uint64_t)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v10, v11);
  kaldi::WriteToken(a2, a3, (kaldi *)"<TargetDotTransform>", v12, v13);
  kaldi::nnet1::Component::Write(a1[23], a2, (uint64_t)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v14, v15);
  BOOL v17 = (uint64_t *)a1[24];

  return kaldi::nnet1::Nnet::Write(v17, a2, (uint64_t)a3, a4, v16);
}

void *virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::WriteData(void *a1, void *a2, const char *a3, uint64_t a4)
{
  return kaldi::nnet1::GlobalRecurrentAttention::WriteData((void *)((char *)a1 + *(void *)(*a1 - 120)), a2, a3, a4);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::NumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 22) + 176))(*((void *)this + 22));
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 23) + 176))(*((void *)this + 23)) + v2;
  return v3 + kaldi::nnet1::Nnet::NumParams(*((kaldi::nnet1::Nnet **)this + 24));
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::NumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return kaldi::nnet1::GlobalRecurrentAttention::NumParams((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + *(void *)(*(void *)this - 192)));
}

void kaldi::nnet1::GlobalRecurrentAttention::GetParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 1, v5, v6);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 176) + 184))(*(void *)(a1 + 176), &v23);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (v24 > *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  }
  BOOL v20 = *(void **)a2;
  LODWORD(v21) = v24;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v20, (uint64_t)&v23, v7, v8, v9);
  uint64_t v10 = (int)v24;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 184) + 184))(*(void *)(a1 + 184), &v23);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if ((v24 + v10) > *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v13);
  }
  BOOL v20 = (void *)(*(void *)a2 + 4 * v10);
  LODWORD(v21) = v24;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v20, (uint64_t)&v23, v11, v12, v13);
  int v14 = v24;
  kaldi::nnet1::Nnet::GetParams(*(kaldi::nnet1::Nnet **)(a1 + 192), (uint64_t)&v23);
  int v18 = v14 + v10;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if ((v24 + v14 + v10) > *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v17);
  }
  BOOL v20 = (void *)(*(void *)a2 + 4 * v18);
  LODWORD(v21) = v24;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v20, (uint64_t)&v23, v15, v16, v17);
  if (v24 + v18 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)&stru_B8.flags, "shift == wei_copy->Dim()", v19);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v23);
}

void sub_141A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetParams(void *a1, uint64_t a2)
{
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 176);
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (v5 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)a2;
  LODWORD(v16) = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 192))(v4, &v15);
  int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 176) + 176))(*(void *)(a1 + 176));
  uint64_t v8 = *(void *)(a1 + 184);
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 176))(v8);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if ((v9 + v7) > *(_DWORD *)(a2 + 8)) {
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)a2 + 4 * v7;
  LODWORD(v16) = v9;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 192))(v8, &v15);
  int v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 176))(*(void *)(a1 + 184)) + v7;
  uint64_t v11 = *(kaldi::nnet1::Nnet **)(a1 + 192);
  int v12 = kaldi::nnet1::Nnet::NumParams(v11);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if ((v12 + v10) > *(_DWORD *)(a2 + 8)) {
LABEL_6:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v6);
  uint64_t v15 = *(void *)a2 + 4 * v10;
  LODWORD(v16) = v12;
  kaldi::nnet1::Nnet::SetParams(v11, (uint64_t)&v15);
  uint64_t result = kaldi::nnet1::Nnet::NumParams(*(kaldi::nnet1::Nnet **)(a1 + 192));
  if (result + v10 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)&stru_B8.reserved2 + 3, "shift == wei_src.Dim()", v14);
  }
  return result;
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::GlobalRecurrentAttention::SetParams((uint64_t)a1 + *(void *)(*a1 - 208), a2);
}

float kaldi::nnet1::GlobalRecurrentAttention::SumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  float v2 = (*(float (**)(void))(**((void **)this + 22) + 208))(*((void *)this + 22));
  float v3 = v2 + (*(float (**)(void))(**((void **)this + 23) + 208))(*((void *)this + 23));
  return v3 + kaldi::nnet1::Nnet::SumParams(*((kaldi::nnet1::Nnet **)this + 24));
}

float virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return kaldi::nnet1::GlobalRecurrentAttention::SumParams((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + *(void *)(*(void *)this - 224)));
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::PerturbParams(kaldi::nnet1::GlobalRecurrentAttention *this, float a2)
{
  (*(void (**)(void))(**((void **)this + 22) + 216))(*((void *)this + 22));
  uint64_t v4 = *(uint64_t (**)(__n128))(**((void **)this + 23) + 216);
  v5.n128_f32[0] = a2;

  return v4(v5);
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::PerturbParams(kaldi::nnet1::GlobalRecurrentAttention *this, float a2)
{
  float v3 = (char *)this + *(void *)(*(void *)this - 232);
  (*(void (**)(void))(**((void **)v3 + 22) + 216))(*((void *)v3 + 22));
  uint64_t v4 = *(uint64_t (**)(__n128))(**((void **)v3 + 23) + 216);
  v5.n128_f32[0] = a2;

  return v4(v5);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::Info(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *, void *, void))(*(void *)this + 96))(this, v24, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n## Source Dot Transform: input-dim ", 36);
  float v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", output-dim ", 13);
  float v3 = (void *)std::ostream::operator<<();
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((void **)this + 22) + 64))(v22);
  if ((v23 & 0x80u) == 0) {
    __n128 v5 = v22;
  }
  else {
    __n128 v5 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v6 = v23;
  }
  else {
    uint64_t v6 = (uint64_t)v22[1];
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n## Target Dot Transform: input-dim ", 36);
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", output-dim ", 13);
  int v9 = (void *)std::ostream::operator<<();
  int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((void **)this + 23) + 64))(v20);
  if ((v21 & 0x80u) == 0) {
    uint64_t v11 = v20;
  }
  else {
    uint64_t v11 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v12 = v21;
  }
  else {
    uint64_t v12 = (uint64_t)v20[1];
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n## Internal recurrent network info ", 36);
  kaldi::nnet1::Nnet::Info((uint64_t *)__p, *((kaldi::nnet1::Nnet **)this + 24));
  if ((v19 & 0x80u) == 0) {
    uint64_t v15 = __p;
  }
  else {
    uint64_t v15 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v16 = v19;
  }
  else {
    uint64_t v16 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v21 < 0) {
    operator delete(v20[0]);
  }
  if ((char)v23 < 0) {
    operator delete(v22[0]);
  }
  std::stringbuf::str();
  if (v25 < 0) {
    operator delete((void *)v24[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1421B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  std::ostringstream::~ostringstream((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::Info(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return kaldi::nnet1::GlobalRecurrentAttention::Info((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this
                                                                                               + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::GlobalRecurrentAttention::InfoGradient(kaldi::nnet1::GlobalRecurrentAttention *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 22) + 72))(&v21);
  (*(void (**)(void **__return_ptr))(**((void **)this + 23) + 72))(v19);
  if ((v20 & 0x80u) == 0) {
    uint64_t v4 = v19;
  }
  else {
    uint64_t v4 = (void **)v19[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v5 = v20;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v19[1];
  }
  uint64_t v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::Nnet::InfoGradient(*((kaldi::nnet1::Nnet **)this + 24), v17);
  if ((v18 & 0x80u) == 0) {
    uint64_t v8 = v17;
  }
  else {
    uint64_t v8 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v9 = v18;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v17[1];
  }
  int v10 = std::string::append(&v22, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "\n");
  if ((v16 & 0x80u) == 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v13 = v16;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)__p[1];
  }
  int v14 = std::string::append(&v23, (const std::string::value_type *)v12, v13);
  *a2 = *v14;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((char)v20 < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_1423F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 41) < 0) {
    operator delete(*(void **)(v38 - 64));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::InfoGradient(kaldi::nnet1::GlobalRecurrentAttention *this@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  uint64_t v4 = (char *)this + *(void *)(*(void *)this - 24);
  long long v5 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)(v4 + 71) = *(_OWORD *)((char *)a2 + 23);
  *(_OWORD *)(v4 + 56) = v5;
  (*(void (**)(void))(**((void **)this + 22) + 264))();
  (*(void (**)(void))(**((void **)this + 23) + 264))();
  uint64_t v8 = (kaldi::nnet1::Nnet *)*((void *)this + 24);

  kaldi::nnet1::Nnet::SetTrainOptions(v8, a2, 0, v6, v7);
}

void non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
}

unsigned int *kaldi::nnet1::GlobalRecurrentAttention::SetSourceStates(uint64_t a1, uint64_t a2, int **a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  unint64_t v7 = (char *)a3[1] - (char *)*a3;
  int v8 = *(_DWORD *)(a2 + 20);
  int v9 = v8 / (int)(v7 >> 2);
  if (v9 * (v7 >> 2) != v8) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)&stru_108.addr + 3, "seq_size * num_seq == source.NumRows()", v6);
  }
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)&stru_108.addr + 4, "source.NumCols() == source_vec_dim_", v6);
  }
  kaldi::CuMatrix<float>::operator=(a1 + 296, a2);
  if ((int **)(a1 + 640) != a3) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 640), (char *)*a3, (uint64_t)a3[1], a3[1] - *a3);
  }
  uint64_t v12 = *a3 + 1;
  int v11 = **a3;
  *(_DWORD *)(a1 + 664) = v11;
  std::string::size_type v13 = a3[1];
  while (v12 != v13)
  {
    int v14 = *v12;
    if (*v12 > v11)
    {
      *(_DWORD *)(a1 + 664) = v14;
      int v11 = v14;
    }
    ++v12;
  }
  if (v11 >= *(_DWORD *)(a1 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)&stru_108.size + 5, "max_src_length_ < max_attentions_", v10);
  }
  if (v11 >= v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)&stru_108.size + 6, "max_src_length_ + 1 <= seq_size", v10);
  }
  kaldi::nnet1::Component::Propagate(*(_DWORD **)(a1 + 176), a1 + 296, a1 + 200, 0);
  long long __p = 0;
  long long v28 = 0uLL;
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 616), (int)((uint64_t)v7 >> 2), (uint64_t)&__p);
  if (__p)
  {
    *(void *)&long long v28 = __p;
    operator delete(__p);
  }
  uint64_t v19 = kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 192), v15, v16, v17, v18);
  kaldi::CuMatrix<float>::Resize(a1 + 344, v7 >> 2, v19, 0, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, a1 + 344, 0, *(_DWORD *)(a1 + 364), 0, *(_DWORD *)(a1 + 8));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v24, a1 + 296, 0, v7 >> 2, 0, *(_DWORD *)(a1 + 312));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&__p, (uint64_t)&v24, 111, v20, v21);
  uint64_t v24 = off_262D80;
  long long v25 = 0u;
  long long v26 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v24);
  long long __p = off_262D80;
  long long v28 = 0u;
  long long v29 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&__p);
  kaldi::nnet1::Nnet::ResetHistoryStateIfExists(*(void *)(a1 + 192));
  return kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(a1 + 192), a1 + 344, a1 + 392, 0, v22);
}

void sub_14286C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void (**a9)(), long long a10, long long a11, void (**__p)(), long long a13, long long a14)
{
  a9 = off_262D80;
  a10 = 0u;
  a11 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a9);
  long long __p = off_262D80;
  a13 = 0u;
  a14 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetSourceDiffs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  if (*(_DWORD *)(a2 + 20) != *(_DWORD *)(a1 + 316)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)&stru_108.nreloc + 3, "source.NumRows() == source_states_.NumRows()", v8);
  }
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 312)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)&stru_108.flags, "source.NumCols() == source_states_.NumCols()", v8);
  }
  size_t v9 = *(void *)(a3 + 8) - *(void *)a3;
  int v10 = *(const void **)(a1 + 640);
  if (v9 != *(void *)(a1 + 648) - (void)v10 || memcmp(*(const void **)a3, v10, v9)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)&stru_108.flags + 1, "sequence_length == src_sequence_length_", v8);
  }

  return kaldi::CuMatrix<float>::Swap(a1 + 440, a4);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetCurrentAlignment(uint64_t a1, std::vector<int> *this)
{
  int v4 = -1431655765 * ((uint64_t)(*(void *)(a1 + 624) - *(void *)(a1 + 616)) >> 3);
  std::vector<int>::resize(this, v4);
  if (v4 >= 1)
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v6 = v4;
    unint64_t v7 = (uint64_t *)(*(void *)(a1 + 616) + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 3;
      *begin++ = *(_DWORD *)(v8 - 4);
      --v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetOverallAlignment(uint64_t a1, uint64_t a2)
{
  if (a1 + 616 != a2) {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(a2, *(void *)(a1 + 616), *(void *)(a1 + 624), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 624) - *(void *)(a1 + 616)) >> 3));
  }
  return 1;
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(unsigned char *)(this + 668) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(unsigned char *)(this + 668) = 0;
  }
  return this;
}

void kaldi::nnet1::GlobalRecurrentAttention::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  uint64_t v95 = a2;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(v6 + *(void *)(*(void *)v6 - 24) + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", &stru_158.segname[6], "in.NumCols() == input_dim_", v8);
  }
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", &stru_158.segname[8], "batch_idx == 0", v8);
  }
  unint64_t v9 = *(void *)(v6 + 648) - *(void *)(v6 + 640);
  uint64_t v10 = v9 >> 2;
  int v11 = *(_DWORD *)(a2 + 20);
  int v94 = v11 / (int)(v9 >> 2);
  if (v94 * (v9 >> 2) != v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", &stru_158.segname[14], "num_seq * tgt_seq_size == in.NumRows()", v8);
  }
  uint64_t v12 = *(unsigned int *)(v6 + 316);
  std::string::size_type v13 = (_DWORD *)(v6 + 584);
  uint64_t v14 = ((int)v12 / (int)v10);
  kaldi::CuVector<float>::Resize(v6 + 584, v12, 0, v7, v8);
  uint64_t v92 = v6 + 488;
  unsigned int v93 = v14;
  kaldi::CuMatrix<float>::Resize(v6 + 488, v9 >> 2, v14, 1u, 0);
  uint64_t v15 = *(unsigned int *)(v6 + 316);
  uint64_t v123 = 0;
  uint64_t v124 = 0;
  v122 = 0;
  kaldi::Vector<float>::Resize((void **)&v122, v15, 1, v16, v17);
  kaldi::Matrix<float>::Matrix((uint64_t)&v118);
  if (v94 >= 1)
  {
    int v18 = 0;
    uint64_t v87 = v6 + 8;
    uint64_t v90 = v6 + 200;
    uint64_t v98 = v6 + 296;
    uint64_t v99 = v6 + 248;
    uint64_t v100 = v6 + 344;
    long long v101 = (unsigned int *)(v6 + 536);
    uint64_t v97 = v6 + 392;
    uint64_t v19 = (int)((uint64_t)v9 >> 2);
    uint64_t v102 = v6;
    uint64_t v103 = (v9 >> 2);
    int v86 = -(int)(v9 >> 2);
    uint64_t v84 = "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h";
    uint64_t v85 = "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMat"
          "rixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)";
    unint64_t v89 = v9 >> 2;
    int v88 = (_DWORD *)(v6 + 584);
    do
    {
      kaldi::CuMatrix<float>::operator=((uint64_t)v101, v90);
      kaldi::nnet1::Component::Propagate(*(_DWORD **)(v6 + 184), v97, v99, 0);
      if (*(int *)(v6 + 664) >= 1)
      {
        int v23 = 0;
        int v24 = 0;
        do
        {
          uint64_t v25 = kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v115, (uint64_t)v101, v23, v10, 0, *(_DWORD *)(v6 + 552));
          kaldi::CuMatrixBase<float>::MulElements(v25, v99, v26, v27, v28);
          uint64_t v115 = off_262D80;
          long long v116 = 0u;
          long long v117 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v115);
          ++v24;
          v23 += v10;
        }
        while (v24 < *(_DWORD *)(v6 + 664));
      }
      kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v13, v101, 1.0, 0.0, v20, v21, v22);
      kaldi::CuVectorBase<float>::CopyToVec<float>(v13, (uint64_t)&v122, v29, v30, v31);
      kaldi::Matrix<float>::Resize((uint64_t)&v118, v10, v93, 0, 0);
      int v96 = v18;
      if ((int)v10 >= 1)
      {
        uint64_t v34 = 0;
        unint64_t v35 = 0;
        int v36 = v86;
        do
        {
          uint64_t v37 = *(unsigned int *)(*(void *)(v6 + 640) + 4 * v35);
          if ((int)v37 < 1)
          {
            int v40 = -1;
            float v41 = -INFINITY;
          }
          else
          {
            uint64_t v38 = 0;
            int v39 = 0;
            int v40 = -1;
            float v41 = -INFINITY;
            do
            {
              if (v123 <= v36 + (int)v38 + (int)v19) {
                kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", stru_68.sectname, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v33);
              }
              float v42 = *(float *)&v122[4 * v38 + v34];
              if (v42 > v41) {
                int v40 = v39;
              }
              int v43 = v39 + 1;
              if (v42 > v41) {
                float v41 = *(float *)&v122[4 * v38 + v34];
              }
              v38 += v19;
              ++v39;
            }
            while (v37 != v43);
          }
          uint64_t v44 = *(void *)(v102 + 616) + 24 * v35;
          uint64_t v46 = (int **)(v44 + 8);
          size_t v45 = *(int **)(v44 + 8);
          int v48 = (void *)(v44 + 16);
          unint64_t v47 = *(void *)(v44 + 16);
          if ((unint64_t)v45 >= v47)
          {
            long long v50 = *(int **)v44;
            uint64_t v51 = ((uint64_t)v45 - *(void *)v44) >> 2;
            unint64_t v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v53 = v47 - (void)v50;
            if (v53 >> 1 > v52) {
              unint64_t v52 = v53 >> 1;
            }
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v54 = v52;
            }
            if (v54)
            {
              uint64_t v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v48, v54);
              size_t v45 = *v46;
              long long v50 = *(int **)v44;
            }
            else
            {
              uint64_t v55 = 0;
            }
            long long v56 = (int *)&v55[4 * v51];
            *long long v56 = v40;
            size_t v49 = v56 + 1;
            while (v45 != v50)
            {
              int v57 = *--v45;
              *--long long v56 = v57;
            }
            *(void *)uint64_t v44 = v56;
            *uint64_t v46 = v49;
            *int v48 = &v55[4 * v54];
            if (v50) {
              operator delete(v50);
            }
          }
          else
          {
            *size_t v45 = v40;
            size_t v49 = v45 + 1;
          }
          *uint64_t v46 = v49;
          if ((int)v37 >= 1)
          {
            uint64_t v58 = 0;
            unsigned int v59 = v123;
            long long v60 = &v122[v34];
            float v61 = 0.0;
            int v62 = v37;
            do
            {
              if (v59 <= v36 + (int)v58 + (int)v19) {
                kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", stru_68.sectname, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v33);
              }
              --v62;
              float v63 = expf(*(float *)&v60[4 * v58] - v41);
              *(float *)&v60[4 * v58] = v63;
              float v61 = v61 + v63;
              v58 += v19;
            }
            while (v62);
            uint64_t v64 = 0;
            unint64_t v65 = 0;
            unsigned int v66 = v123;
            unint64_t v67 = v120;
            uint64_t v68 = v118 + 4 * v121 * (int)v35;
            uint64_t v69 = &v122[v34];
            while (v66 > v36 + (int)v64 + (int)v19)
            {
              uint64_t v70 = &stru_68 + 32;
              if (v35 >= v67 || v65 >= v119) {
                goto LABEL_60;
              }
              *(float *)(v68 + 4 * v65) = (float)(1.0 / v61) * *(float *)&v69[4 * v64];
              v64 += v19;
              if (v37 == ++v65) {
                goto LABEL_46;
              }
            }
            uint64_t v70 = &stru_68;
            uint64_t v84 = "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h";
            uint64_t v85 = "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)";
LABEL_60:
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", v84, v70->sectname, v85, v33);
          }
LABEL_46:
          ++v35;
          ++v36;
          v34 += 4;
          uint64_t v6 = v102;
        }
        while (v35 != v103);
      }
      kaldi::CuMatrixBase<float>::CopyFromMat(v92, (uint64_t)&v118, 111, v32, v33);
      uint64_t v10 = v89;
      std::string::size_type v13 = v88;
      if ((int)v89 >= 1)
      {
        unint64_t v71 = 0;
        do
        {
          unsigned int v72 = *(_DWORD *)(*(void *)(v6 + 640) + 4 * v71);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v115, v100, 0, *(_DWORD *)(v6 + 364), 0, *(_DWORD *)(v6 + 8));
          if (v71 >= HIDWORD(v116)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v73);
          }
          uint64_t v112 = v116 + 4 * (int)v117 * (int)v71;
          unsigned int v111 = &off_262E20;
          uint64_t v113 = DWORD2(v116);
          uint64_t v114 = *((void *)&v117 + 1);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v108, v98, v71, v72 * v89, 0, *(_DWORD *)(v6 + 312));
          if (v89 != 1) {
            kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v108, *(_DWORD *)(v6 + 320) * v89);
          }
          if (v71 >= *(unsigned int *)(v6 + 508)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v74);
          }
          uint64_t v75 = *(void *)(v6 + 496) + 4 * *(_DWORD *)(v6 + 512) * (int)v71;
          unsigned int v76 = *(_DWORD *)(v6 + 504);
          uint64_t v77 = *(void *)(v6 + 520);
          uint64_t v106 = 0;
          uint64_t v107 = 0;
          uint64_t v105 = 0;
          long long v104 = &off_262E20;
          if (v72 > v76) {
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)&stru_1A8.size + 4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v74);
          }
          uint64_t v105 = v75;
          LODWORD(v106) = v72;
          uint64_t v107 = v77;
          kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v111, &v108, CblasTrans, (uint64_t)&v104, v74, 1.0, 0.0);
          long long v108 = off_262D80;
          long long v109 = 0u;
          long long v110 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v108);
          unsigned int v111 = &off_262E20;
          uint64_t v112 = 0;
          LODWORD(v113) = 0;
          uint64_t v114 = 0;
          uint64_t v115 = off_262D80;
          long long v116 = 0u;
          long long v117 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v115);
          ++v71;
        }
        while (v103 != v71);
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v115, v100, 0, *(_DWORD *)(v6 + 364), (const char *)*(unsigned int *)(v6 + 8), *(_DWORD *)(v87 + *(void *)(*(void *)v6 - 24)));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v108, v95, v96 * v89, v89, 0, *(_DWORD *)(v95 + 16));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v115, (uint64_t)&v108, 111, v78, v79);
      long long v108 = off_262D80;
      long long v109 = 0u;
      long long v110 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v108);
      uint64_t v115 = off_262D80;
      long long v116 = 0u;
      long long v117 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v115);
      kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(v6 + 192), v100, v97, 0, v80);
      uint64_t v81 = (unsigned int *)kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v115, a3, v96 * (int)v89, v89, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>(v81, v97, 111, v82, v83);
      uint64_t v115 = off_262D80;
      long long v116 = 0u;
      long long v117 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v115);
      int v18 = v96 + 1;
    }
    while (v96 + 1 != v94);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)&v118);
  kaldi::Vector<float>::Destroy((uint64_t)&v122);
}

void sub_14347C(_Unwind_Exception *a1)
{
  kaldi::Vector<float>::Destroy(v1 - 144);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4)
{
}

void kaldi::nnet1::GlobalRecurrentAttention::BackpropagateFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 448);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented yet");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::BackpropagateFnc()
{
}

void *kaldi::nnet1::GlobalRecurrentAttention::SetGradientNormalization(uint64_t a1, uint64_t a2, float a3)
{
  (*(void (**)(void))(**(void **)(a1 + 176) + 240))(*(void *)(a1 + 176));
  (*(void (**)(void, uint64_t, float))(**(void **)(a1 + 184) + 240))(*(void *)(a1 + 184), a2, a3);
  uint64_t v6 = *(void **)(a1 + 192);

  return kaldi::nnet1::Nnet::SetGradientNormalization(v6, a2, 0, 0, a3);
}

void *virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetGradientNormalization(void *a1, uint64_t a2, float a3)
{
  return kaldi::nnet1::GlobalRecurrentAttention::SetGradientNormalization((uint64_t)a1 + *(void *)(*a1 - 256), a2, a3);
}

void kaldi::nnet1::GlobalRecurrentAttention::AccumGradients()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 466);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented yet");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::AccumGradients()
{
}

void kaldi::nnet1::GlobalRecurrentAttention::UpdateWeights(kaldi::nnet1::GlobalRecurrentAttention *this, void *a2, uint64_t a3)
{
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *))(*(void *)this + 296))(this);
  (*(void (**)(void))(**((void **)this + 22) + 256))();
  (*(void (**)(void))(**((void **)this + 23) + 256))();
  uint64_t v6 = (kaldi::nnet1::Nnet *)*((void *)this + 24);

  kaldi::nnet1::Nnet::Update(v6, a2, a3);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::UpdateWeights(kaldi::nnet1::GlobalRecurrentAttention *this, void *a2, uint64_t a3)
{
}

void kaldi::nnet1::GlobalRecurrentAttention::GetGradient()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "GetGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 479);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented yet");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetGradient()
{
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::HistoryStateSize(kaldi::nnet1::Nnet **this)
{
  (*((void (**)(kaldi::nnet1::Nnet **))*this + 37))(this);
  float v2 = this[24];

  return kaldi::nnet1::Nnet::HistoryStateSize(v2);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::HistoryStateSize(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  uint64_t v1 = (char *)this - 16;
  (*(void (**)(char *))(*((void *)this - 2) + 296))((char *)this - 16);
  float v2 = (kaldi::nnet1::Nnet *)*((void *)v1 + 24);

  return kaldi::nnet1::Nnet::HistoryStateSize(v2);
}

void *kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void *))(*a1 + 296))(a1);
  unint64_t v9 = (void *)a1[24];

  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v9, a2, a3, a4, v8);
}

void *non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 - 16;
  (*(void (**)(uint64_t))(*(void *)(a1 - 16) + 296))(a1 - 16);
  unint64_t v9 = *(void **)(v7 + 192);

  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v9, a2, a3, a4, v8);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *))(*(void *)this + 296))(this);
  uint64_t v2 = *((void *)this + 24);

  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v2);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  uint64_t v1 = (char *)this - 16;
  (*(void (**)(char *))(*((void *)this - 2) + 296))((char *)this - 16);
  uint64_t v2 = *((void *)v1 + 24);

  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v2);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *))(*a1 + 296))(a1);
  uint64_t v6 = a1[24];

  return kaldi::nnet1::Nnet::GetHistoryState(v6, a2, a3);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 - 16;
  (*(void (**)(uint64_t))(*(void *)(a1 - 16) + 296))(a1 - 16);
  uint64_t v6 = *(void *)(v5 + 192);

  return kaldi::nnet1::Nnet::GetHistoryState(v6, a2, a3);
}

void *kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void *))(*a1 + 296))(a1);
  unint64_t v9 = (void *)a1[24];

  return kaldi::nnet1::Nnet::GetHistoryState(v9, a2, a3, a4, v8);
}

void *non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 - 16;
  (*(void (**)(uint64_t))(*(void *)(a1 - 16) + 296))(a1 - 16);
  unint64_t v9 = *(void **)(v7 + 192);

  return kaldi::nnet1::Nnet::GetHistoryState(v9, a2, a3, a4, v8);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *))(*a1 + 296))(a1);
  uint64_t v8 = a1[24];

  return kaldi::nnet1::Nnet::SetHistoryState(v8, a2, a3, v6, v7);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 - 16;
  (*(void (**)(uint64_t))(*(void *)(a1 - 16) + 296))(a1 - 16);
  uint64_t v8 = *(void *)(v5 + 192);

  return kaldi::nnet1::Nnet::SetHistoryState(v8, a2, a3, v6, v7);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void *))(*a1 + 296))(a1);
  uint64_t v9 = a1[24];

  return kaldi::nnet1::Nnet::SetHistoryState(v9, a2, a3, a4, v8);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 - 16;
  (*(void (**)(uint64_t))(*(void *)(a1 - 16) + 296))(a1 - 16);
  uint64_t v9 = *(void *)(v7 + 192);

  return kaldi::nnet1::Nnet::SetHistoryState(v9, a2, a3, a4, v8);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetInternalBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::nnet1::Nnet::SetInternalBoundary(*(void *)(a1 + 192), a2, a3);
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetInternalBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::nnet1::Nnet::SetInternalBoundary(*(void *)(a1 + 176), a2, a3);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::Check(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (!*(unsigned char *)(this + 668))
  {
    uint64_t v5 = this;
    if (*(int *)(this + 12) < 1 || (int v6 = *(_DWORD *)(this + 8), v6 <= 0))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 531);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"component is not initialized, max attention is ", 47);
      uint64_t v19 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", source state dimension is ", 28);
      std::ostream::operator<<();
    }
    else if (v6 == *(_DWORD *)(*(void *)(this + 176) + 8))
    {
      int v7 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(this + 192), a2, a3, a4, a5);
      uint64_t v12 = *(void *)(v5 + 184);
      if (v7 == *(_DWORD *)(v12 + 8))
      {
        if (*(_DWORD *)(*(void *)(v5 + 176) + 12) == *(_DWORD *)(v12 + 12))
        {
          int v13 = *(_DWORD *)(v5 + *(void *)(*(void *)v5 - 24) + 8) + *(_DWORD *)(v5 + 8);
          if (v13 == kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(v5 + 192), v8, v9, v10, v11))
          {
            int v18 = *(_DWORD *)(v5 + *(void *)(*(void *)v5 - 24) + 12);
            this = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(v5 + 192), v14, v15, v16, v17);
            if (v18 == this)
            {
              *(unsigned char *)(v5 + 668) = 1;
              return this;
            }
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 558);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"the internal network has output dim ", 36);
            kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(v5 + 192), v35, v36, v37, v38);
            int v39 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" , but the component has output dim ", 36);
            std::ostream::operator<<();
          }
          else
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 551);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"the internal network takes input dimension ", 43);
            kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(v5 + 192), v27, v28, v29, v30);
            uint64_t v31 = (void *)std::ostream::operator<<();
            uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" , that is not equal the sum of ", 32);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"source vector dimension ", 24);
            uint64_t v33 = (void *)std::ostream::operator<<();
            uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" and ", 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"target input network dim ", 25);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 546);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"the source and target dot transform has different output dim ", 61);
          uint64_t v26 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" vs ", 4);
          std::ostream::operator<<();
        }
      }
      else
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 541);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"the internal recurrent network has output dim ", 46);
        kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(v5 + 192), v21, v22, v23, v24);
        uint64_t v25 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" , but the target dot transform has input dim ", 46);
        std::ostream::operator<<();
      }
    }
    else
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 536);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"source state dimension is ", 26);
      uint64_t v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" , but the source dot transform has input dim ", 46);
      std::ostream::operator<<();
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
  return this;
}

uint64_t non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::Check(kaldi::nnet1::GlobalRecurrentAttention *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::GlobalRecurrentAttention::Check((uint64_t)this - 16, a2, a3, a4, a5);
}

void kaldi::nnet1::GatedRecurrentUnit::InitData(unsigned int *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  *(float *)&int v69 = -2.0;
  v70[0] = -1;
  float v67 = 0.1;
  float v68 = 2.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)((char *)&def_5A5E8 + 2), &v66);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[39], &v65);
  memset(v64, 0, sizeof(v64));
  while (2)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_118;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v64, v6, v7);
    if ((SHIBYTE(v64[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v64[2]))
      {
        case 9:
          BOOL v10 = v64[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v64[1]) == 62;
          int v11 = (float *)(a1 + 153);
          if (v10) {
            goto LABEL_99;
          }
          BOOL v12 = v64[0] == (void *)0x6461724778614D3CLL && LOBYTE(v64[1]) == 62;
          goto LABEL_20;
        case 0xA:
          if (v64[0] != (void *)0x61654D736169423CLL || LOWORD(v64[1]) != 15982) {
            goto LABEL_133;
          }
          goto LABEL_98;
        case 0xB:
          if (v64[0] != (void *)0x6E6152736169423CLL || *(void **)((char *)v64 + 3) != (void *)0x3E65676E61527361) {
            goto LABEL_133;
          }
          goto LABEL_77;
        case 0xC:
          if (v64[0] == (void *)0x536D6F646E61523CLL && LODWORD(v64[1]) == 1046766949) {
            goto LABEL_92;
          }
          uint64_t v32 = v64;
          goto LABEL_113;
        case 0xD:
          if (v64[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v64 + 5) != (void *)0x3E7665646474536DLL) {
            goto LABEL_133;
          }
          goto LABEL_66;
        case 0xF:
          BOOL v15 = v64[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v64 + 7) == (void *)0x3E66656F43657461;
          goto LABEL_70;
        case 0x12:
          if (v64[0] != (void *)0x6E6569646172473CLL
            || v64[1] != (void *)0x7079546D726F4E74
            || LOWORD(v64[2]) != 15973)
          {
            goto LABEL_133;
          }
          goto LABEL_108;
        case 0x13:
          if (v64[0] != (void *)0x61725474696E493CLL
            || v64[1] != (void *)0x79546D726F66736ELL
            || *(void **)((char *)&v64[1] + 3) != (void *)0x3E657079546D726FLL)
          {
            goto LABEL_133;
          }
          goto LABEL_86;
        default:
          goto LABEL_133;
      }
    }
    switch((unint64_t)v64[1])
    {
      case 9uLL:
        BOOL v13 = *(void *)v64[0] == 0x6D726F4E78614D3CLL && *((unsigned char *)v64[0] + 8) == 62;
        int v11 = (float *)(a1 + 153);
        if (!v13)
        {
          BOOL v12 = *(void *)v64[0] == 0x6461724778614D3CLL && *((unsigned char *)v64[0] + 8) == 62;
LABEL_20:
          int v11 = (float *)(a1 + 38);
          if (!v12) {
            goto LABEL_133;
          }
        }
        goto LABEL_99;
      case 0xAuLL:
        if (*(void *)v64[0] != 0x61654D736169423CLL || *((_WORD *)v64[0] + 4) != 15982) {
          goto LABEL_133;
        }
LABEL_98:
        int v11 = (float *)&v69;
        goto LABEL_99;
      case 0xBuLL:
        if (*(void *)v64[0] != 0x6E6152736169423CLL || *(void *)((char *)v64[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_133;
        }
LABEL_77:
        int v11 = &v68;
        goto LABEL_99;
      case 0xCuLL:
        if (*(void *)v64[0] != 0x536D6F646E61523CLL || *((_DWORD *)v64[0] + 2) != 1046766949) {
          goto LABEL_112;
        }
LABEL_92:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v70, v8, v9);
        goto LABEL_110;
      case 0xDuLL:
        if (*(void *)v64[0] != 0x74536D617261503CLL || *(void *)((char *)v64[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_133;
        }
LABEL_66:
        int v11 = &v67;
LABEL_99:
        kaldi::ReadBasicType<float>(a2, 0, v11, v8, v9);
        goto LABEL_110;
      case 0xFuLL:
        BOOL v15 = *(void *)v64[0] == 0x61526E7261654C3CLL && *(void *)((char *)v64[0] + 7) == 0x3E66656F43657461;
LABEL_70:
        int v11 = (float *)(a1 + 152);
        if (!v15) {
          goto LABEL_133;
        }
        goto LABEL_99;
      case 0x12uLL:
        if (*(void *)v64[0] != 0x6E6569646172473CLL
          || *((void *)v64[0] + 1) != 0x7079546D726F4E74
          || *((_WORD *)v64[0] + 8) != 15973)
        {
          goto LABEL_133;
        }
LABEL_108:
        uint64_t v27 = &v65;
        goto LABEL_109;
      case 0x13uLL:
        if (*(void *)v64[0] == 0x61725474696E493CLL
          && *((void *)v64[0] + 1) == 0x79546D726F66736ELL
          && *(void *)((char *)v64[0] + 11) == 0x3E657079546D726FLL)
        {
LABEL_86:
          uint64_t v27 = &v66;
LABEL_109:
          kaldi::ReadToken(a2, 0, (uint64_t)v27, v8, v9);
LABEL_110:
          std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
          continue;
        }
        if (v64[1] != &dword_C) {
          goto LABEL_133;
        }
LABEL_112:
        uint64_t v32 = (void **)v64[0];
LABEL_113:
        uint64_t v33 = *v32;
        int v34 = *((_DWORD *)v32 + 2);
        if (v33 != (void *)0x6E6F706D6F432F3CLL || v34 != 1047817829)
        {
LABEL_133:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v60, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 72);
          uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Invalid token ", 14);
          if (SHIBYTE(v64[2]) >= 0) {
            unint64_t v52 = v64;
          }
          else {
            unint64_t v52 = (void **)v64[0];
          }
          if (SHIBYTE(v64[2]) >= 0) {
            uint64_t v53 = HIBYTE(v64[2]);
          }
          else {
            uint64_t v53 = (uint64_t)v64[1];
          }
          unint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
          uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)". Allowed tokens: ", 18);
          long long v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"(BiasMean|BiasRange|ParamStddev|LearnRateCoef|MaxNorm|MaxGrad|InitTransformType", 79);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"|GradientNormType|RandomSeed)", 29);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v60);
        }
LABEL_118:
        kaldi::nnet1::GatedRecurrentUnit::AllocateParams((kaldi::nnet1::GatedRecurrentUnit *)a1);
        int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v66);
        a1[39] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v65);
        if (v70[0] >= 1) {
          kaldi::UniformRandomNumber::SetRandomSeeds(a3, v70[0]);
        }
        kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v60, a3);
        kaldi::nnet1::RandMatrix(a3, (kaldi::GaussRandomNumber *)v60, inited, (uint64_t)(a1 + 40), v67);
        kaldi::nnet1::RandMatrix(a3, (kaldi::GaussRandomNumber *)v60, inited, (uint64_t)(a1 + 52), v67);
        kaldi::nnet1::RandMatrix(a3, (kaldi::GaussRandomNumber *)v60, inited, (uint64_t)(a1 + 64), v67);
        uint64_t v37 = a1[80];
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        int v57 = 0;
        kaldi::Vector<float>::Resize((void **)&v57, v37, 0, v38, v39);
        uint64_t v43 = v58;
        if ((int)v58 >= 1)
        {
          unint64_t v44 = 0;
          do
          {
            float v45 = *(float *)&v69;
            float v46 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v40, v41, v42);
            uint64_t v43 = v58;
            if (v44 >= v58) {
              kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", stru_68.sectname, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v42);
            }
            float v47 = v45 + (v46 + -0.5) * v68;
            v57[v44++] = v47;
          }
          while ((uint64_t)v44 < (int)v43);
        }
        kaldi::CuVector<float>::Resize((uint64_t)(a1 + 76), v43, 1u, v41, v42);
        kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 76, (uint64_t)&v57, v48, v49, v50);
        (*(void (**)(unsigned int *))(*(void *)a1 + 128))(a1);
        kaldi::Vector<float>::Destroy((uint64_t)&v57);
        if (__p)
        {
          float v63 = __p;
          operator delete(__p);
        }
        int v57 = (float *)&v61;
        std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
        if (SHIBYTE(v64[2]) < 0) {
          operator delete(v64[0]);
        }
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v65.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        return;
      default:
        goto LABEL_133;
    }
  }
}

void sub_144B8C()
{
  kaldi::Vector<float>::Destroy(&v0);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v1);
  JUMPOUT(0x144BB0);
}

void sub_144BAC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  if (*(char *)(v1 - 145) < 0) {
    operator delete(*(void **)(v1 - 168));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateParams(kaldi::nnet1::GatedRecurrentUnit *this)
{
  kaldi::CuMatrix<float>::Resize((uint64_t)this + 160, (3 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 8), 0, 0);
  uint64_t v2 = *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12);
  kaldi::CuMatrix<float>::Resize((uint64_t)this + 208, (2 * v2), v2, 0, 0);
  uint64_t v3 = *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12);
  kaldi::CuMatrix<float>::Resize((uint64_t)this + 256, v3, v3, 0, 0);
  kaldi::CuVector<float>::Resize((uint64_t)this + 304, (3 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), 0, v4, v5);
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 663, 2);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Allocated memory for the parameters: ", 37);
    (*(void (**)(void **__return_ptr, kaldi::nnet1::GatedRecurrentUnit *))(*(void *)this + 232))(__p, this);
    if ((v10 & 0x80u) == 0) {
      int v7 = __p;
    }
    else {
      int v7 = (void **)__p[0];
    }
    if ((v10 & 0x80u) == 0) {
      uint64_t v8 = v10;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11);
  }
}

void sub_144DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, uint64_t a4, float a5)
{
  kaldi::Matrix<float>::Matrix((uint64_t)&v23, *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 0, 0);
  unint64_t v10 = 0;
LABEL_2:
  if ((uint64_t)v10 < (int)kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)&v23))
  {
    for (unint64_t i = 0; ; ++i)
    {
      if ((uint64_t)i >= (int)kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)&v23))
      {
        ++v10;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0, v14, v15, v16);
          if (v10 >= v25 || i >= v24) {
            goto LABEL_25;
          }
          uint64_t v18 = v23 + 4 * (int)v10 * v26;
          float v19 = v20 * a5;
        }
        else
        {
          if (a3 != 1) {
            continue;
          }
          float v17 = kaldi::UniformRandomNumber::RandUniform(a1, 0, v14, v15, v16);
          if (v10 >= v25 || i >= v24) {
            goto LABEL_25;
          }
          uint64_t v18 = v23 + 4 * (int)v10 * v26;
          float v19 = (v17 + -0.5) * (float)(a5 + a5);
        }
      }
      else
      {
        if (v10 >= v25 || i >= v24) {
LABEL_25:
        }
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v16);
        uint64_t v18 = v23 + 4 * (int)v10 * v26;
        if (v10 == i) {
          float v19 = 1.0;
        }
        else {
          float v19 = 0.0;
        }
      }
      *(float *)(v18 + 4 * i) = v19;
    }
  }
  kaldi::CuMatrixBase<float>::CopyFromMat(a4, (uint64_t)&v23, 111, v11, v12);
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v23);
}

void sub_144FD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InitData(void *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::ReadData(float *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    long long v35 = 0uLL;
    uint64_t v36 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v35, v8, v9);
    if (SHIBYTE(v36) < 0)
    {
      uint64_t v14 = *((void *)&v35 + 1);
      if (*((void *)&v35 + 1) == 9)
      {
        BOOL v17 = *(void *)v35 == 0x6D726F4E78614D3CLL && *(unsigned char *)(v35 + 8) == 62;
        uint64_t v16 = a1 + 153;
        if (!v17)
        {
          uint64_t v14 = *((void *)&v35 + 1);
LABEL_27:
          if (v14 == 18)
          {
            if (*(void *)v35 == 0x6E6569646172473CLL
              && *(void *)(v35 + 8) == 0x7079546D726F4E74
              && *(_WORD *)(v35 + 16) == 15973)
            {
              goto LABEL_59;
            }
            uint64_t v14 = *((void *)&v35 + 1);
          }
          if (v14 != 9) {
            goto LABEL_62;
          }
          float v20 = (long long *)v35;
LABEL_49:
          uint64_t v23 = *(void *)v20;
          int v24 = *((unsigned __int8 *)v20 + 8);
          BOOL v25 = v23 == 0x6461724778614D3CLL && v24 == 62;
          uint64_t v16 = a1 + 38;
          if (!v25) {
            goto LABEL_62;
          }
        }
      }
      else
      {
        if (*((void *)&v35 + 1) != 15) {
          goto LABEL_27;
        }
        BOOL v15 = *(void *)v35 == 0x61526E7261654C3CLL && *(void *)(v35 + 7) == 0x3E66656F43657461;
        uint64_t v16 = a1 + 152;
        if (!v15) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      if (HIBYTE(v36) != 9)
      {
        if (HIBYTE(v36) == 15)
        {
          BOOL v21 = (void)v35 == 0x61526E7261654C3CLL && *(void *)((char *)&v35 + 7) == 0x3E66656F43657461;
          uint64_t v16 = a1 + 152;
          if (!v21)
          {
LABEL_62:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 115);
            uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v36 >= 0) {
              uint64_t v31 = &v35;
            }
            else {
              uint64_t v31 = (long long *)v35;
            }
            if (v36 >= 0) {
              uint64_t v32 = HIBYTE(v36);
            }
            else {
              uint64_t v32 = *((void *)&v35 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
          goto LABEL_54;
        }
        if (HIBYTE(v36) != 18) {
          goto LABEL_62;
        }
        if ((void)v35 == 0x6E6569646172473CLL
          && *((void *)&v35 + 1) == 0x7079546D726F4E74
          && (unsigned __int16)v36 == 15973)
        {
LABEL_59:
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v34 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)__p, v10, v11);
          *((_DWORD *)a1 + 39) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
          if (SHIBYTE(v34) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_55;
        }
LABEL_47:
        if (HIBYTE(v36) != 9) {
          goto LABEL_62;
        }
        float v20 = &v35;
        goto LABEL_49;
      }
      BOOL v22 = (void)v35 == 0x6D726F4E78614D3CLL && BYTE8(v35) == 62;
      uint64_t v16 = a1 + 153;
      if (!v22) {
        goto LABEL_47;
      }
    }
LABEL_54:
    kaldi::ReadBasicType<float>(a2, a3, v16, v10, v11);
LABEL_55:
    if (SHIBYTE(v36) < 0) {
      operator delete((void *)v35);
    }
  }
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 40), a2, a3, a4);
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 52), a2, a3, a4);
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 64), a2, a3, a4);
  double v28 = kaldi::CuVector<float>::Read((uint64_t)(a1 + 76), a2, a3, v26, v27);
  return (*(uint64_t (**)(float *, double))(*(void *)a1 + 128))(a1, v28);
}

void sub_1453D0()
{
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::GatedRecurrentUnit::ReadData((float *)((char *)a1 + *(void *)(*a1 - 176)), a2, a3, a4);
}

void *kaldi::nnet1::GatedRecurrentUnit::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v10, v11);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v12, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v14, v15);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_1454F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::WriteConfig(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::GatedRecurrentUnit::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3, a4, a5);
}

void kaldi::nnet1::GatedRecurrentUnit::WriteData(_DWORD *a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v8 = (uint64_t)(a1 + 40);
  (*(void (**)(_DWORD *))(*(void *)a1 + 128))(a1);
  (*(void (**)(_DWORD *, void *, uint64_t))(*(void *)a1 + 168))(a1, a2, a3);
  kaldi::CuMatrixBase<float>::Write(v8, a2, a3, a4);
  kaldi::CuMatrixBase<float>::Write((uint64_t)(a1 + 52), a2, a3, a4);
  kaldi::CuMatrixBase<float>::Write((uint64_t)(a1 + 64), a2, a3, a4);

  kaldi::CuVectorBase<float>::Write(a1 + 76, a2, a3, v9, v10);
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::WriteData(void *a1, void *a2, uint64_t a3, int a4)
{
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::NumParams(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return (*((_DWORD *)this + 44) * *((_DWORD *)this + 45)
                      + *((_DWORD *)this + 56) * *((_DWORD *)this + 57)
                      + *((_DWORD *)this + 68) * *((_DWORD *)this + 69)
                      + *((_DWORD *)this + 80));
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::NumParams(kaldi::nnet1::GatedRecurrentUnit *this)
{
  uint64_t v1 = (_DWORD *)((char *)this + *(void *)(*(void *)this - 192));
  return (v1[44] * v1[45] + v1[56] * v1[57] + v1[68] * v1[69] + v1[80]);
}

_DWORD *kaldi::nnet1::GatedRecurrentUnit::GetParams(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  int v10 = a1[44] * a1[45];
  int v12 = a1[56];
  int v11 = a1[57];
  int v13 = a1[69];
  int v14 = a1[68];
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if (v10 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_6;
  }
  int v15 = v12 * v11;
  uint64_t v27 = *(void **)a2;
  LODWORD(v28) = v10;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v27, a1 + 40, v7, v8, v9);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v18 = v15 + v10;
  if ((v15 + v10) > *(_DWORD *)(a2 + 8)) {
    goto LABEL_6;
  }
  int v19 = v14 * v13;
  uint64_t v27 = (void *)(*(void *)a2 + 4 * v10);
  LODWORD(v28) = v15;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v27, a1 + 52, v16, v17, v9);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v22 = v19 + v18;
  if ((v19 + v18) > *(_DWORD *)(a2 + 8)
    || (uint64_t v27 = (void *)(*(void *)a2 + 4 * v18),
        LODWORD(v28) = v19,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v27, a1 + 64, v20, v21, v9),
        int v25 = a1[80],
        uint64_t v28 = 0,
        uint64_t v29 = 0,
        (v25 + v22) > *(_DWORD *)(a2 + 8)))
  {
LABEL_6:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  }
  uint64_t v27 = (void *)(*(void *)a2 + 4 * v22);
  LODWORD(v28) = v25;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(a1 + 76, (uint64_t)&v27, v23, v24, v9);
}

_DWORD *virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::GetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::GatedRecurrentUnit::GetParams((void *)((char *)a1 + *(void *)(*a1 - 200)), a2);
}

_DWORD *kaldi::nnet1::GatedRecurrentUnit::SetParams(_DWORD *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_DWORD *))(*(void *)a1 + 184))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)&stru_68.reserved1, "wei_src.Dim() == NumParams()", v5);
  }
  int v6 = a1[44] * a1[45];
  int v8 = a1[56];
  int v7 = a1[57];
  int v9 = a1[69];
  int v10 = a1[68];
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  if (v6 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_7;
  }
  int v11 = v8 * v7;
  int v19 = *(char **)a2;
  LODWORD(v20) = v6;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 40), &v19);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v12 = v11 + v6;
  if ((v11 + v6) > *(_DWORD *)(a2 + 8)) {
    goto LABEL_7;
  }
  int v13 = v10 * v9;
  int v19 = (char *)(*(void *)a2 + 4 * v6);
  LODWORD(v20) = v11;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 52), &v19);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v14 = v13 + v12;
  if ((v13 + v12) > *(_DWORD *)(a2 + 8)
    || (int v19 = (char *)(*(void *)a2 + 4 * v12),
        LODWORD(v20) = v13,
        kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 64), &v19),
        int v17 = a1[80],
        uint64_t v20 = 0,
        uint64_t v21 = 0,
        (v17 + v14) > *(_DWORD *)(a2 + 8)))
  {
LABEL_7:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v5);
  }
  int v19 = (char *)(*(void *)a2 + 4 * v14);
  LODWORD(v20) = v17;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 76, (uint64_t)&v19, v15, v16, v5);
}

_DWORD *virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::SetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::GatedRecurrentUnit::SetParams((void *)((char *)a1 + *(void *)(*a1 - 208)), a2);
}

float kaldi::nnet1::GatedRecurrentUnit::SumParams(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v6 = kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 160, a2, a3, a4, a5);
  float v11 = v6 + kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 208, v7, v8, v9, v10);
  float v16 = v11 + kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 256, v12, v13, v14, v15);
  double v17 = kaldi::CuVectorBase<float>::Sum((uint64_t)this + 304);
  return v16 + *(float *)&v17;
}

float virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::SumParams(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::GatedRecurrentUnit::SumParams((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(void *)(*(void *)this - 224)), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (const void *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
  if (v8) {
  else
  }
    uint64_t v9 = 0;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, void, void))(*v9 + 296))(v9, a2, a3, 0, 0);
  uint64_t v10 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v10, 0, v11, v12);
  int v15 = a1[44] * a1[45];
  int v17 = a1[56];
  int v16 = a1[57];
  int v18 = a1[69];
  int v19 = a1[68];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  if (v15 > *(_DWORD *)(a4 + 8)) {
    goto LABEL_9;
  }
  long long v35 = *(char **)a4;
  LODWORD(v36) = v15;
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v32, v9[81], 111, v13, v14);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v35, (kaldi::ContextDependency *)&v32);
  int v20 = v17 * v16;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v32);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int v23 = v20 + v15;
  if ((v20 + v15) > *(_DWORD *)(a4 + 8)) {
    goto LABEL_9;
  }
  int v24 = v19 * v18;
  uint64_t v32 = *(void *)a4 + 4 * v15;
  LODWORD(v33) = v20;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v32, (_DWORD *)v9[84], v21, v22, v14);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int v27 = v24 + v23;
  if ((v24 + v23) > *(_DWORD *)(a4 + 8)
    || (uint64_t v32 = *(void *)a4 + 4 * v23,
        LODWORD(v33) = v24,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v32, (_DWORD *)v9[87], v25, v26, v14),
        int v30 = a1[80],
        uint64_t v33 = 0,
        uint64_t v34 = 0,
        (v30 + v27) > *(_DWORD *)(a4 + 8)))
  {
LABEL_9:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
  }
  uint64_t v32 = *(void *)a4 + 4 * v27;
  LODWORD(v33) = v30;
  kaldi::CuVectorBase<float>::CopyToVec<float>((_DWORD *)v9[90], (uint64_t)&v32, v28, v29, v14);
  return (*(uint64_t (**)(uint64_t *))(*v9 + 8))(v9);
}

void sub_145CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::GetGradient(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::GatedRecurrentUnit::GetGradient((void *)((char *)a1 + *(void *)(*a1 - 240)), a2, a3, a4);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::PerturbParams(kaldi::nnet1::GatedRecurrentUnit *this, float a2)
{
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v18, *((unsigned int *)this + 45), *((unsigned int *)this + 44), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v18);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)v18, 111, v4, v5, a2, 1.0);
  kaldi::CuMatrix<float>::Resize((uint64_t)v18, *((unsigned int *)this + 57), *((unsigned int *)this + 56), 1u, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v18);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 208, (uint64_t)v18, 111, v6, v7, a2, 1.0);
  kaldi::CuMatrix<float>::Resize((uint64_t)v18, *((unsigned int *)this + 69), *((unsigned int *)this + 68), 1u, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v18);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 256, (uint64_t)v18, 111, v8, v9, a2, 1.0);
  uint64_t v10 = *((unsigned int *)this + 80);
  v17[0] = off_262E60;
  memset(&v17[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v17, v10, 1u, v11, v12);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v17);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 304, (uint64_t)v17, v13, v14, v15, a2, 1.0);
  kaldi::CuVector<float>::~CuVector(v17);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v18);
}

void sub_145E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::PerturbParams(kaldi::nnet1::GatedRecurrentUnit *this, float a2)
{
  return kaldi::nnet1::GatedRecurrentUnit::PerturbParams((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(void *)(*(void *)this - 232)), a2);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::Info(kaldi::nnet1::GatedRecurrentUnit *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
  (*(void (**)(kaldi::nnet1::GatedRecurrentUnit *, void *, void))(*(void *)this + 168))(this, v30, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\n Input weights:", 16);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 160);
  if ((v29 & 0x80u) == 0) {
    uint64_t v3 = v28;
  }
  else {
    uint64_t v3 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    uint64_t v4 = v29;
  }
  else {
    uint64_t v4 = (uint64_t)v28[1];
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n Gate recurrent weights:", 25);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 208);
  if ((v27 & 0x80u) == 0) {
    uint64_t v7 = v26;
  }
  else {
    uint64_t v7 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    uint64_t v8 = v27;
  }
  else {
    uint64_t v8 = (uint64_t)v26[1];
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n Activation recurrent weights:", 31);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 256);
  if ((v25 & 0x80u) == 0) {
    uint64_t v11 = v24;
  }
  else {
    uint64_t v11 = (void **)v24[0];
  }
  if ((v25 & 0x80u) == 0) {
    uint64_t v12 = v25;
  }
  else {
    uint64_t v12 = (uint64_t)v24[1];
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n Bias:", 7);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 76, v15, v16, v17, v18);
  if ((v23 & 0x80u) == 0) {
    int v19 = __p;
  }
  else {
    int v19 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v20 = v23;
  }
  else {
    uint64_t v20 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v19, v20);
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v25 < 0) {
    operator delete(v24[0]);
  }
  if ((char)v27 < 0) {
    operator delete(v26[0]);
  }
  if ((char)v29 < 0) {
    operator delete(v28[0]);
  }
  std::stringbuf::str();
  if (v31 < 0) {
    operator delete((void *)v30[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_146114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  std::ostringstream::~ostringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::Info(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return kaldi::nnet1::GatedRecurrentUnit::Info((kaldi::nnet1::GatedRecurrentUnit *)((char *)this
                                                                                   + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::GatedRecurrentUnit::InfoGradient(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)this + 640))
  {
    memset(&v88, 0, sizeof(v88));
    int v87 = 0;
    if (*((int *)this + 20) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v75, "\n For batch ");
        kaldi::nnet1::ToString<int>();
        if ((v74 & 0x80u) == 0) {
          uint64_t v3 = v73;
        }
        else {
          uint64_t v3 = (void **)v73[0];
        }
        if ((v74 & 0x80u) == 0) {
          std::string::size_type v4 = v74;
        }
        else {
          std::string::size_type v4 = (std::string::size_type)v73[1];
        }
        uint64_t v5 = std::string::append(&v75, (const std::string::value_type *)v3, v4);
        long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v76.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v71, ": ");
        if ((v72 & 0x80u) == 0) {
          uint64_t v7 = v71;
        }
        else {
          uint64_t v7 = (void **)v71[0];
        }
        if ((v72 & 0x80u) == 0) {
          std::string::size_type v8 = v72;
        }
        else {
          std::string::size_type v8 = (std::string::size_type)v71[1];
        }
        uint64_t v9 = std::string::append(&v76, (const std::string::value_type *)v7, v8);
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v77.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v69, "\n  Input weights gradient: ");
        if ((v70 & 0x80u) == 0) {
          uint64_t v11 = v69;
        }
        else {
          uint64_t v11 = (void **)v69[0];
        }
        if ((v70 & 0x80u) == 0) {
          std::string::size_type v12 = v70;
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v69[1];
        }
        uint64_t v13 = std::string::append(&v77, (const std::string::value_type *)v11, v12);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v78.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>(*((void *)this + 81) + 48 * v87);
        if ((v68 & 0x80u) == 0) {
          uint64_t v15 = v67;
        }
        else {
          uint64_t v15 = (void **)v67[0];
        }
        if ((v68 & 0x80u) == 0) {
          std::string::size_type v16 = v68;
        }
        else {
          std::string::size_type v16 = (std::string::size_type)v67[1];
        }
        uint64_t v17 = std::string::append(&v78, (const std::string::value_type *)v15, v16);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v79.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v65, "\n  Gate recurrent weights gradient: ");
        if ((v66 & 0x80u) == 0) {
          int v19 = v65;
        }
        else {
          int v19 = (void **)v65[0];
        }
        if ((v66 & 0x80u) == 0) {
          std::string::size_type v20 = v66;
        }
        else {
          std::string::size_type v20 = (std::string::size_type)v65[1];
        }
        uint64_t v21 = std::string::append(&v79, (const std::string::value_type *)v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v80.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>(*((void *)this + 84) + 48 * v87);
        if ((v64 & 0x80u) == 0) {
          unsigned __int8 v23 = v63;
        }
        else {
          unsigned __int8 v23 = (void **)v63[0];
        }
        if ((v64 & 0x80u) == 0) {
          std::string::size_type v24 = v64;
        }
        else {
          std::string::size_type v24 = (std::string::size_type)v63[1];
        }
        unsigned __int8 v25 = std::string::append(&v80, (const std::string::value_type *)v23, v24);
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v81.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v61, "\n  Activation recurrent weights gradient: ");
        if ((v62 & 0x80u) == 0) {
          unsigned __int8 v27 = v61;
        }
        else {
          unsigned __int8 v27 = (void **)v61[0];
        }
        if ((v62 & 0x80u) == 0) {
          std::string::size_type v28 = v62;
        }
        else {
          std::string::size_type v28 = (std::string::size_type)v61[1];
        }
        unsigned __int8 v29 = std::string::append(&v81, (const std::string::value_type *)v27, v28);
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v82.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>(*((void *)this + 87) + 48 * v87);
        if ((v60 & 0x80u) == 0) {
          char v31 = v59;
        }
        else {
          char v31 = (void **)v59[0];
        }
        if ((v60 & 0x80u) == 0) {
          std::string::size_type v32 = v60;
        }
        else {
          std::string::size_type v32 = (std::string::size_type)v59[1];
        }
        uint64_t v33 = std::string::append(&v82, (const std::string::value_type *)v31, v32);
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v83.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v57, "\n  Bias gradient: ");
        if ((v58 & 0x80u) == 0) {
          long long v35 = v57;
        }
        else {
          long long v35 = (void **)v57[0];
        }
        if ((v58 & 0x80u) == 0) {
          std::string::size_type v36 = v58;
        }
        else {
          std::string::size_type v36 = (std::string::size_type)v57[1];
        }
        uint64_t v37 = std::string::append(&v83, (const std::string::value_type *)v35, v36);
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v84.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>((_DWORD *)(*((void *)this + 90) + 32 * v87), v39, v40, v41, v42);
        if ((v56 & 0x80u) == 0) {
          uint64_t v43 = __p;
        }
        else {
          uint64_t v43 = (void **)__p[0];
        }
        if ((v56 & 0x80u) == 0) {
          std::string::size_type v44 = v56;
        }
        else {
          std::string::size_type v44 = (std::string::size_type)__p[1];
        }
        float v45 = std::string::append(&v84, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        int64_t v86 = v45->__r_.__value_.__r.__words[2];
        long long v85 = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        if (v86 >= 0) {
          float v47 = (const std::string::value_type *)&v85;
        }
        else {
          float v47 = (const std::string::value_type *)v85;
        }
        if (v86 >= 0) {
          std::string::size_type v48 = HIBYTE(v86);
        }
        else {
          std::string::size_type v48 = *((void *)&v85 + 1);
        }
        std::string::append(&v88, v47, v48);
        if (SHIBYTE(v86) < 0) {
          operator delete((void *)v85);
        }
        if ((char)v56 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        if ((char)v58 < 0) {
          operator delete(v57[0]);
        }
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v83.__r_.__value_.__l.__data_);
        }
        if ((char)v60 < 0) {
          operator delete(v59[0]);
        }
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
        if ((char)v62 < 0) {
          operator delete(v61[0]);
        }
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        if ((char)v64 < 0) {
          operator delete(v63[0]);
        }
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80.__r_.__value_.__l.__data_);
        }
        if ((char)v66 < 0) {
          operator delete(v65[0]);
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        if ((char)v68 < 0) {
          operator delete(v67[0]);
        }
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        if ((char)v70 < 0) {
          operator delete(v69[0]);
        }
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
        if ((char)v72 < 0) {
          operator delete(v71[0]);
        }
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v76.__r_.__value_.__l.__data_);
        }
        if ((char)v74 < 0) {
          operator delete(v73[0]);
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        ++v87;
      }
      while (v87 < *((_DWORD *)this + 20));
    }
    uint64_t v49 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v85, "\n");
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v50 = &v88;
    }
    else {
      long long v50 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v88.__r_.__value_.__l.__size_;
    }
    unint64_t v52 = std::string::insert(v49, 0, (const std::string::value_type *)v50, size);
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v52->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v86) < 0) {
      operator delete((void *)v85);
    }
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_146780(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_146944()
{
}

void sub_14694C()
{
}

void sub_146954()
{
}

void sub_14695C()
{
}

void sub_146964()
{
}

void sub_14696C()
{
}

void sub_146974()
{
}

void sub_14697C()
{
}

void sub_146984()
{
}

void sub_14698C()
{
}

void sub_146994()
{
}

void sub_14699C()
{
}

uint64_t kaldi::nnet1::ToString<int>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_146AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InfoGradient(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, void *a2@<X8>)
{
}

void kaldi::nnet1::GatedRecurrentUnit::InfoPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
  memset(&v69, 0, sizeof(v69));
  int v68 = 0;
  if (*((int *)this + 20) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v58, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v57 & 0x80u) == 0) {
        uint64_t v3 = v56;
      }
      else {
        uint64_t v3 = (void **)v56[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v4 = v57;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v56[1];
      }
      uint64_t v5 = std::string::append(&v58, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, ": ");
      if ((v55 & 0x80u) == 0) {
        uint64_t v7 = v54;
      }
      else {
        uint64_t v7 = (void **)v54[0];
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v8 = v55;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v54[1];
      }
      uint64_t v9 = std::string::append(&v59, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v52, "\n  Gates values: ");
      if ((v53 & 0x80u) == 0) {
        uint64_t v11 = v52;
      }
      else {
        uint64_t v11 = (void **)v52[0];
      }
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v12 = v53;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v52[1];
      }
      uint64_t v13 = std::string::append(&v60, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 46) + 48 * v68);
      if ((v51 & 0x80u) == 0) {
        uint64_t v15 = v50;
      }
      else {
        uint64_t v15 = (void **)v50[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v16 = v51;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v50[1];
      }
      uint64_t v17 = std::string::append(&v61, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v48, "\n  Candidate activations: ");
      if ((v49 & 0x80u) == 0) {
        int v19 = v48;
      }
      else {
        int v19 = (void **)v48[0];
      }
      if ((v49 & 0x80u) == 0) {
        std::string::size_type v20 = v49;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v48[1];
      }
      uint64_t v21 = std::string::append(&v62, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 49) + 48 * v68);
      if ((v47 & 0x80u) == 0) {
        unsigned __int8 v23 = v46;
      }
      else {
        unsigned __int8 v23 = (void **)v46[0];
      }
      if ((v47 & 0x80u) == 0) {
        std::string::size_type v24 = v47;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v46[1];
      }
      unsigned __int8 v25 = std::string::append(&v63, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, "\n  Activations: ");
      if ((v45 & 0x80u) == 0) {
        unsigned __int8 v27 = v44;
      }
      else {
        unsigned __int8 v27 = (void **)v44[0];
      }
      if ((v45 & 0x80u) == 0) {
        std::string::size_type v28 = v45;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v44[1];
      }
      unsigned __int8 v29 = std::string::append(&v64, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 61) + 48 * v68);
      if ((v43 & 0x80u) == 0) {
        char v31 = __p;
      }
      else {
        char v31 = (void **)__p[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v32 = v43;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)__p[1];
      }
      uint64_t v33 = std::string::append(&v65, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      int64_t v67 = v33->__r_.__value_.__r.__words[2];
      long long v66 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v67 >= 0) {
        long long v35 = (const std::string::value_type *)&v66;
      }
      else {
        long long v35 = (const std::string::value_type *)v66;
      }
      if (v67 >= 0) {
        std::string::size_type v36 = HIBYTE(v67);
      }
      else {
        std::string::size_type v36 = *((void *)&v66 + 1);
      }
      std::string::append(&v69, v35, v36);
      if (SHIBYTE(v67) < 0) {
        operator delete((void *)v66);
      }
      if ((char)v43 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if ((char)v45 < 0) {
        operator delete(v44[0]);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if ((char)v47 < 0) {
        operator delete(v46[0]);
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if ((char)v49 < 0) {
        operator delete(v48[0]);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if ((char)v51 < 0) {
        operator delete(v50[0]);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if ((char)v53 < 0) {
        operator delete(v52[0]);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if ((char)v55 < 0) {
        operator delete(v54[0]);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if ((char)v57 < 0) {
        operator delete(v56[0]);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      ++v68;
    }
    while (v68 < *((_DWORD *)this + 20));
  }
  uint64_t v37 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v66, "\n");
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v38 = &v69;
  }
  else {
    long long v38 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v69.__r_.__value_.__l.__size_;
  }
  uint64_t v40 = std::string::insert(v37, 0, (const std::string::value_type *)v38, size);
  *a2 = *v40;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v67) < 0) {
    operator delete((void *)v66);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
}

void sub_146FB8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_14713C()
{
}

void sub_147144()
{
}

void sub_14714C()
{
}

void sub_147154()
{
}

void sub_14715C()
{
}

void sub_147164()
{
}

void sub_14716C()
{
}

void sub_147174()
{
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InfoPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::GatedRecurrentUnit::InfoBackPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
  memset(&v69, 0, sizeof(v69));
  int v68 = 0;
  if (*((int *)this + 20) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v58, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v57 & 0x80u) == 0) {
        uint64_t v3 = v56;
      }
      else {
        uint64_t v3 = (void **)v56[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v4 = v57;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v56[1];
      }
      uint64_t v5 = std::string::append(&v58, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, ": ");
      if ((v55 & 0x80u) == 0) {
        uint64_t v7 = v54;
      }
      else {
        uint64_t v7 = (void **)v54[0];
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v8 = v55;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v54[1];
      }
      uint64_t v9 = std::string::append(&v59, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v52, "\n  Gates diff: ");
      if ((v53 & 0x80u) == 0) {
        uint64_t v11 = v52;
      }
      else {
        uint64_t v11 = (void **)v52[0];
      }
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v12 = v53;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v52[1];
      }
      uint64_t v13 = std::string::append(&v60, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 70) + 48 * v68);
      if ((v51 & 0x80u) == 0) {
        uint64_t v15 = v50;
      }
      else {
        uint64_t v15 = (void **)v50[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v16 = v51;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v50[1];
      }
      uint64_t v17 = std::string::append(&v61, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v48, "\n  Candidate activation diff: ");
      if ((v49 & 0x80u) == 0) {
        int v19 = v48;
      }
      else {
        int v19 = (void **)v48[0];
      }
      if ((v49 & 0x80u) == 0) {
        std::string::size_type v20 = v49;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v48[1];
      }
      uint64_t v21 = std::string::append(&v62, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 67) + 48 * v68);
      if ((v47 & 0x80u) == 0) {
        unsigned __int8 v23 = v46;
      }
      else {
        unsigned __int8 v23 = (void **)v46[0];
      }
      if ((v47 & 0x80u) == 0) {
        std::string::size_type v24 = v47;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v46[1];
      }
      unsigned __int8 v25 = std::string::append(&v63, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, "\n  Activation diff: ");
      if ((v45 & 0x80u) == 0) {
        unsigned __int8 v27 = v44;
      }
      else {
        unsigned __int8 v27 = (void **)v44[0];
      }
      if ((v45 & 0x80u) == 0) {
        std::string::size_type v28 = v45;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v44[1];
      }
      unsigned __int8 v29 = std::string::append(&v64, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 64) + 48 * v68);
      if ((v43 & 0x80u) == 0) {
        char v31 = __p;
      }
      else {
        char v31 = (void **)__p[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v32 = v43;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)__p[1];
      }
      uint64_t v33 = std::string::append(&v65, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      int64_t v67 = v33->__r_.__value_.__r.__words[2];
      long long v66 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v67 >= 0) {
        long long v35 = (const std::string::value_type *)&v66;
      }
      else {
        long long v35 = (const std::string::value_type *)v66;
      }
      if (v67 >= 0) {
        std::string::size_type v36 = HIBYTE(v67);
      }
      else {
        std::string::size_type v36 = *((void *)&v66 + 1);
      }
      std::string::append(&v69, v35, v36);
      if (SHIBYTE(v67) < 0) {
        operator delete((void *)v66);
      }
      if ((char)v43 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if ((char)v45 < 0) {
        operator delete(v44[0]);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if ((char)v47 < 0) {
        operator delete(v46[0]);
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if ((char)v49 < 0) {
        operator delete(v48[0]);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if ((char)v51 < 0) {
        operator delete(v50[0]);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if ((char)v53 < 0) {
        operator delete(v52[0]);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if ((char)v55 < 0) {
        operator delete(v54[0]);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if ((char)v57 < 0) {
        operator delete(v56[0]);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      ++v68;
    }
    while (v68 < *((_DWORD *)this + 20));
  }
  uint64_t v37 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v66, "\n");
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v38 = &v69;
  }
  else {
    long long v38 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v69.__r_.__value_.__l.__size_;
  }
  uint64_t v40 = std::string::insert(v37, 0, (const std::string::value_type *)v38, size);
  *a2 = *v40;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v67) < 0) {
    operator delete((void *)v66);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
}

void sub_147648(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_1477CC()
{
}

void sub_1477D4()
{
}

void sub_1477DC()
{
}

void sub_1477E4()
{
}

void sub_1477EC()
{
}

void sub_1477F4()
{
}

void sub_1477FC()
{
}

void sub_147804()
{
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InfoBackPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a2 + 20);
  uint64_t v6 = *((unsigned int *)this + 24);
  int v67 = (int)v5 / (int)v6;
  if ((int)v5 % (int)v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", &stru_108.segname[14], "batch_size % num_utts == 0", a5);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v88, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 296, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    std::string::size_type v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v88);
  }
  long long v14 = *(void **)(a3 + 32);
  kaldi::nnet1::GatedRecurrentUnit::AllocateForwardBuffers(this, a4, v5, v14);
  uint64_t v16 = *((void *)this + 105);
  std::string v63 = (unsigned int *)a3;
  if (*((void *)this + 106) == v16 || (int v17 = *(_DWORD *)(v16 + 32 * a4 + 16), v17 < 1))
  {
    int v64 = 0;
  }
  else
  {
    if (v17 != v5) {
      kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)&stru_108.addr + 7, "boundary_[batch_index].Dim() == batch_size", v15);
    }
    uint64_t v18 = *((void *)this + 108) + 48 * a4;
    *(void *)(v18 + 32) = v14;
    int v64 = 1;
    kaldi::CuMatrix<float>::Resize(v18, v6, *(unsigned int *)(*((void *)this + 1) + 48 * a4 + 16), 1u, 0);
  }
  uint64_t v19 = *((void *)this + 43) + 48 * a4;
  uint64_t v20 = *((void *)this + 46) + 48 * a4;
  uint64_t v21 = *((void *)this + 49);
  uint64_t v69 = *((void *)this + 55);
  uint64_t v22 = *((void *)this + 58);
  uint64_t v23 = *((void *)this + 61);
  kaldi::CuMatrixBase<float>::AddMatMat(v19, a2, CblasNoTrans, (uint64_t)this + 160, &stru_68.sectname[8], 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddVecToRows(v19, (uint64_t)this + 304, v24, v25, v26, 1.0, 1.0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v88, v19, 0, *(_DWORD *)(v19 + 20), 0, 2 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)v20, (uint64_t)&v88, 111, v27, v28);
  std::string v88 = off_262D80;
  memset(v89, 0, sizeof(v89));
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v88);
  int v29 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v88, v19, 0, *(_DWORD *)(v19 + 20), (const char *)(2 * v29), v29);
  uint64_t v66 = v21 + 48 * a4;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)v66, (uint64_t)&v88, 111, v30, v31);
  std::string v88 = off_262D80;
  uint64_t v68 = v23 + 48 * a4;
  memset(v89, 0, sizeof(v89));
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v88);
  kaldi::CuMatrixBase<float>::Set(v22 + 48 * a4, v32, v33, v34, v35, 1.0);
  if (v67 >= 1)
  {
    int v38 = 0;
    int v39 = 0;
    uint64_t v40 = v69 + 48 * a4;
    unsigned __int8 v70 = (char *)this + 12;
    uint64_t v65 = v40;
    long long v41 = 0uLL;
    while (1)
    {
      v89[0] = v41;
      v89[1] = v41;
      std::string v88 = off_262D80;
      *(_OWORD *)&v87[1] = v41;
      *(_OWORD *)&v87[3] = v41;
      v87[0] = off_262D80;
      if (!v39) {
        break;
      }
      if (!v64)
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v85, v68, v38 - v6, v6, 0, *(_DWORD *)(v68 + 16));
        goto LABEL_16;
      }
      kaldi::CuMatrixBase<float>::SetZero(*((void *)this + 108) + 48 * a4);
      uint64_t v42 = *((void *)this + 108) + 48 * a4;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v85, v42, 0, *(_DWORD *)(v42 + 20), 0, *(_DWORD *)&v70[*(void *)(*(void *)this - 24)]);
      *(_OWORD *)((char *)v89 + 8) = *(_OWORD *)&v86[1];
      *(void *)&v89[0] = v86[0];
      *((void *)&v89[1] + 1) = v86[3];
      long long v85 = off_262D80;
      memset(v86, 0, sizeof(v86));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v85);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v85, v68, v38 - v6, v6, 0, *(_DWORD *)(v68 + 16));
      kaldi::CuSubVector<float>::CuSubVector(&v82, *((void *)this + 105) + 32 * a4, v38, v6, v43);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v88, (uint64_t)&v85, (uint64_t)&v82, 1, v44);
LABEL_17:
      long long v85 = off_262D80;
      memset(v86, 0, sizeof(v86));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v85);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v85, v20, v38, v6, 0, *(_DWORD *)(v20 + 16));
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v85, (uint64_t)&v88, CblasNoTrans, (uint64_t)this + 208, &stru_68.sectname[8], 1.0, 1.0);
      long long v85 = off_262D80;
      memset(v86, 0, sizeof(v86));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v85);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v85, v20, v38, v6, 0, *(_DWORD *)&v70[*(void *)(*(void *)this - 24)]);
      kaldi::CuMatrixBase<float>::Sigmoid(&v85, &v85, v46, v47, v48);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v82, v20, v38, v6, (const char *)*(unsigned int *)&v70[*(void *)(*(void *)this - 24)], *(_DWORD *)&v70[*(void *)(*(void *)this - 24)]);
      kaldi::CuMatrixBase<float>::Sigmoid(&v82, &v82, v49, v50, v51);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v80, v65, v38, v6, 0, *(_DWORD *)(v65 + 16));
      v87[1] = v81[0];
      *(_OWORD *)&v87[2] = *(_OWORD *)&v81[1];
      v87[4] = v81[3];
      std::string v80 = off_262D80;
      memset(v81, 0, sizeof(v81));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v80);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)v87, (uint64_t)&v82, 111, (uint64_t)&v88, &stru_68.sectname[7], 1.0, 0.0);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v80, v66, v38, v6, 0, *(_DWORD *)(v66 + 16));
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v80, (uint64_t)v87, CblasNoTrans, (uint64_t)this + 256, &stru_68.sectname[7], 1.0, 1.0);
      kaldi::CuMatrixBase<float>::Tanh(&v80, &v80, v52, v53, v54);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v77, v22 + 48 * a4, v38, v6, 0, *(_DWORD *)(v22 + 48 * a4 + 16));
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v77, (uint64_t)&v85, 111, v55, v56, -1.0, 1.0);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v74, v68, v38, v6, 0, *(_DWORD *)(v68 + 16));
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v74, (uint64_t)&v77, 111, (uint64_t)&v88, &stru_68.sectname[7], 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v74, (uint64_t)&v85, 111, (uint64_t)&v80, &stru_68.sectname[7], 1.0, 1.0);
      uint64_t v57 = *((void *)this + 52) + 48 * a4;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v71, v57, v38, v6, 0, *(_DWORD *)(v57 + 16));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v71, (uint64_t)&v80, 111, v58, v59);
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v71, (uint64_t)&v88, 111, v60, v61, -1.0, 1.0);
      unint64_t v71 = off_262D80;
      long long v72 = 0u;
      long long v73 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v71);
      unsigned __int8 v74 = off_262D80;
      long long v75 = 0u;
      long long v76 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v74);
      std::string v77 = off_262D80;
      long long v78 = 0u;
      long long v79 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v77);
      std::string v80 = off_262D80;
      memset(v81, 0, sizeof(v81));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v80);
      std::string v82 = off_262D80;
      long long v83 = 0u;
      long long v84 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v82);
      long long v85 = off_262D80;
      memset(v86, 0, sizeof(v86));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v85);
      v87[0] = off_262D80;
      memset(&v87[1], 0, 32);
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v87);
      std::string v88 = off_262D80;
      memset(v89, 0, sizeof(v89));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v88);
      long long v41 = 0uLL;
      ++v39;
      v38 += v6;
      if (v67 == v39) {
        goto LABEL_18;
      }
    }
    uint64_t v45 = *((void *)this + 1) + 48 * a4;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v85, v45, 0, *(_DWORD *)(v45 + 20), 0, *(_DWORD *)&v70[*(void *)(*(void *)this - 24)]);
LABEL_16:
    *(_OWORD *)((char *)v89 + 8) = *(_OWORD *)&v86[1];
    *(void *)&v89[0] = v86[0];
    *((void *)&v89[1] + 1) = v86[3];
    goto LABEL_17;
  }
LABEL_18:
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v63, v68, 111, v36, v37);
  return kaldi::nnet1::GatedRecurrentUnit::SaveLastState(this, a4);
}

void sub_148238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void (**a63)())
{
  a63 = off_262D80;
  *(_OWORD *)(v63 + 168) = 0u;
  *(_OWORD *)(v63 + 184) = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a63);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateForwardBuffers(kaldi::nnet1::GatedRecurrentUnit *this, int a2, uint64_t a3, void *a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateForwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 744, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    std::string::size_type v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*((void *)this + 43) + 48 * a2, a3, (3 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 46) + 48 * a2, a3, (2 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 49) + 48 * a2, a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 52) + 48 * a2, a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 55) + 48 * a2, a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 58) + 48 * a2, a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 61) + 48 * a2, a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  *(void *)(*((void *)this + 43) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 46) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 49) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 52) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 55) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 58) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 61) + 48 * a2 + 32) = a4;
}

void sub_148744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::SaveLastState(kaldi::nnet1::GatedRecurrentUnit *this, int a2)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v9, "SaveLastState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 852, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Saving last activation batch ", 29);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v9);
  }
  uint64_t v4 = *((void *)this + 61) + 48 * a2;
  uint64_t v5 = (unsigned int *)(*((void *)this + 1) + 48 * a2);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v9, v4, *(_DWORD *)(v4 + 20) - *((_DWORD *)this + 24), *((_DWORD *)this + 24), 0, *(_DWORD *)(v4 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v5, (uint64_t)&v9, 111, v6, v7);
  uint64_t v9 = off_262D80;
  long long v10 = 0u;
  long long v11 = 0u;
  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v9);
}

void sub_148850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)(), long long a11, long long a12)
{
  a10 = off_262D80;
  a11 = 0u;
  a12 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a10);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  return kaldi::nnet1::GatedRecurrentUnit::PropagateFnc((kaldi::nnet1::GatedRecurrentUnit *)((char *)a1 + *(void *)(*a1 - 128)), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 96) != 1) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)&stru_158.addr + 4, "ropts_.num_sequences == 1", a5);
  }
  std::string::size_type v8 = *(void **)(a3 + 24);
  kaldi::nnet1::GatedRecurrentUnit::AllocateForwardBuffers((kaldi::nnet1::GatedRecurrentUnit *)a1, 0, 1, v8);
  uint64_t v10 = *(void *)(a1 + 840);
  if (*(void *)(a1 + 848) != v10)
  {
    int v11 = *(_DWORD *)(v10 + 16);
    if (v11 >= 1)
    {
      if (v11 != 1) {
        kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)&stru_158.size + 1, "boundary_[0].Dim() == 1", v9);
      }
      uint64_t v12 = *(void *)(a1 + 864);
      *(void *)(v12 + 32) = v8;
      kaldi::CuMatrix<float>::Resize(v12, 1, *(unsigned int *)(*(void *)(a1 + 8) + 16), 1u, 0);
    }
  }
  uint64_t v13 = *(void *)(a1 + 344);
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t v100 = 0;
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v99 = &off_262E20;
  uint64_t v100 = v14;
  LODWORD(v101) = *(_DWORD *)(v13 + 16);
  uint64_t v102 = *(void *)(v13 + 32);
  uint64_t v15 = *(void *)(a1 + 368);
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v96 = 0;
  uint64_t v16 = *(void *)(v15 + 8);
  uint64_t v95 = &off_262E20;
  uint64_t v96 = v16;
  LODWORD(v97) = *(_DWORD *)(v15 + 16);
  uint64_t v98 = *(void *)(v15 + 32);
  uint64_t v17 = *(void *)(a1 + 488);
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v92 = 0;
  uint64_t v18 = *(void *)(v17 + 8);
  int v91 = &off_262E20;
  uint64_t v92 = v18;
  LODWORD(v93) = *(_DWORD *)(v17 + 16);
  uint64_t v94 = *(void *)(v17 + 32);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v99, (_DWORD *)(a1 + 160), CblasNoTrans, a2, v9, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)&v99, a1 + 304, v19, v20, v21, 1.0, 1.0);
  unsigned int v25 = 2 * *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  int v87 = &off_262E20;
  uint64_t v88 = 0;
  if (v25 > v101) {
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)&stru_1A8.size + 4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v24);
  }
  uint64_t v88 = v100;
  LODWORD(v89) = v25;
  uint64_t v90 = v102;
  kaldi::CuVectorBase<float>::CopyFromVec(&v95, (uint64_t)&v87, v22, v23, v24);
  uint64_t v27 = *(void *)(a1 + 8);
  if (!*(_DWORD *)(v27 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v26);
  }
  uint64_t v28 = *(void *)(v27 + 8);
  unsigned int v29 = *(_DWORD *)(v27 + 16);
  uint64_t v30 = *(void *)(v27 + 32);
  uint64_t v88 = v28;
  int v87 = &off_262E20;
  uint64_t v89 = v29;
  uint64_t v90 = v30;
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v95, (_DWORD *)(a1 + 208), CblasNoTrans, (uint64_t)&v87, v26, 1.0, 1.0);
  unsigned int v34 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  long long v83 = &off_262E20;
  uint64_t v84 = 0;
  if (v34 > v97) {
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)&stru_1A8.size + 4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v33);
  }
  uint64_t v84 = v96;
  LODWORD(v85) = v34;
  uint64_t v86 = v98;
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)&v83, (uint64_t)&v83, v31, v32, v33);
  int v35 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  kaldi::CuSubVector<float>::CuSubVector(v82, (uint64_t)&v95, v35, v35, v36);
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)v82, (uint64_t)v82, v37, v38, v39);
  uint64_t v40 = *(void *)(a1 + 440);
  uint64_t v80 = 0;
  uint64_t v41 = *(void *)(v40 + 8);
  v79[0] = &off_262E20;
  v79[1] = v41;
  LODWORD(v80) = *(_DWORD *)(v40 + 16);
  uint64_t v81 = *(void *)(v40 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v79, (uint64_t)v82, (uint64_t)&v87, v42, v43, 1.0, 0.0);
  uint64_t v44 = *(void *)(a1 + 392);
  uint64_t v77 = 0;
  uint64_t v45 = *(void *)(v44 + 8);
  v76[0] = &off_262E20;
  v76[1] = v45;
  LODWORD(v77) = *(_DWORD *)(v44 + 16);
  uint64_t v78 = *(void *)(v44 + 32);
  int v46 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  kaldi::CuSubVector<float>::CuSubVector(v73, (uint64_t)&v99, 2 * v46, v46, v47);
  kaldi::CuVectorBase<float>::CopyFromVec(v76, (uint64_t)v73, v48, v49, v50);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)v76, (_DWORD *)(a1 + 256), CblasNoTrans, (uint64_t)v79, v51, 1.0, 1.0);
  kaldi::CuVectorBase<float>::Tanh((uint64_t)v76, (uint64_t)v76, v52, v53, v54);
  uint64_t v55 = *(void *)(a1 + 464);
  uint64_t v74 = 0;
  uint64_t v56 = *(void *)(v55 + 8);
  v73[0] = &off_262E20;
  v73[1] = v56;
  LODWORD(v74) = *(_DWORD *)(v55 + 16);
  uint64_t v75 = *(void *)(v55 + 32);
  kaldi::CuVectorBase<float>::Set((uint64_t)v73, 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)v73, (uint64_t)&v83, v57, v58, v59, -1.0, 1.0);
  uint64_t v60 = *(void *)(a1 + 488);
  uint64_t v71 = 0;
  uint64_t v61 = *(void *)(v60 + 8);
  v70[0] = &off_262E20;
  v70[1] = v61;
  LODWORD(v71) = *(_DWORD *)(v60 + 16);
  uint64_t v72 = *(void *)(v60 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v70, (uint64_t)v73, (uint64_t)&v87, v62, v63, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v70, (uint64_t)&v83, (uint64_t)v76, v64, v65, 1.0, 1.0);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)a3, (uint64_t)v70, v66, v67, v68);
  return kaldi::nnet1::GatedRecurrentUnit::SaveLastState((kaldi::nnet1::GatedRecurrentUnit *)a1, 0);
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::GatedRecurrentUnit::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 136), a2, a3, a4, a5);
}

double kaldi::nnet1::GatedRecurrentUnit::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  int v11 = *(_DWORD *)(a1 + 96);
  kaldi::nnet1::GatedRecurrentUnit::EnsureTrainingBuffers((uint64_t *)a1);
  int v52 = (int)v10 / v11;
  if ((int)v10 % v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", &stru_1A8.segname[8], "batch_size % num_utts == 0", v12);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v90, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 450, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Running backward propagation for batch std::string::size_type size = ", 46);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", which contains ", 17);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" frames each from ", 18);
    uint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v90);
  }
  if (v52 < 2) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", &stru_1A8.segname[12], "frames_in_batch > 1 && \"GRU backprop will not work with batches of single frames.\"", v12);
  }
  uint64_t v51 = a5;
  uint64_t v16 = a4;
  if (a5) {
    uint64_t v17 = a5;
  }
  else {
    uint64_t v17 = a4;
  }
  kaldi::nnet1::GatedRecurrentUnit::AllocateBackwardBuffers((kaldi::nnet1::GatedRecurrentUnit *)a1, a6, v10, *(void **)(v17 + 32));
  uint64_t v18 = *(void *)(a1 + 368) + 48 * a6;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v90, v18, 0, *(_DWORD *)(v18 + 20), 0, *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, v18, 0, *(_DWORD *)(v18 + 20), (const char *)*(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12));
  uint64_t v19 = a6;
  uint64_t v58 = *(void *)(a1 + 464);
  uint64_t v60 = *(void *)(a1 + 392);
  uint64_t v20 = *(void *)(a1 + 488);
  uint64_t v21 = *(void *)(a1 + 512);
  uint64_t v22 = 3 * a6;
  uint64_t v23 = *(void *)(a1 + 560) + 48 * a6;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v84, v23, 0, *(_DWORD *)(v23 + 20), 0, *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12));
  uint64_t v57 = v23;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v81, v23, 0, *(_DWORD *)(v23 + 20), (const char *)*(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12));
  uint64_t v24 = *(void *)(a1 + 536);
  uint64_t v53 = a1;
  uint64_t v55 = *(void *)(a1 + 584);
  uint64_t v62 = v21 + 16 * v22;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)v62, v16, 111, v25, v26);
  int v27 = (int)v10 / v11;
  int v28 = v10 - v11;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v78, (uint64_t)&v81, v11, v28, 0, SDWORD2(v82));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v75, (uint64_t)&v87, v11, v28, 0, SDWORD2(v88));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v72, v20 + 16 * v22, 0, v28, 0, *(_DWORD *)(v20 + 16 * v22 + 16));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v78, (uint64_t)&v75, (uint64_t)&v72, v29, v30);
  uint64_t v72 = off_262D80;
  long long v73 = 0u;
  long long v74 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v72);
  uint64_t v75 = off_262D80;
  long long v76 = 0u;
  long long v77 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v75);
  uint64_t v78 = off_262D80;
  long long v79 = 0u;
  long long v80 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v78);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v78, (uint64_t)&v81, 0, v11, 0, SDWORD2(v82));
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v78);
  uint64_t v78 = off_262D80;
  long long v79 = 0u;
  long long v80 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v78);
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v84, (uint64_t)&v90, *(void *)(v53 + 416) + 48 * (int)v19, v31, v32);
  uint64_t v33 = v60 + 16 * v22;
  uint64_t v34 = 3 * v19;
  uint64_t v61 = v24 + 48 * v19;
  kaldi::CuMatrixBase<float>::DiffTanh(v61, v33, (uint64_t)&v90, v35, v36);
  int v37 = 0;
  uint64_t v54 = v58 + 16 * v22;
  int v59 = v11 * (v52 - 1);
  uint64_t v38 = v55 + 16 * v34;
  int v56 = v11 * v52;
  do
  {
    int v39 = v59 + v37;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v78, v62, v59 + v37, v11, 0, *(_DWORD *)(v62 + 16));
    if (--v27 < v52 - 1)
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v75, v62, v56 + v37, v11, 0, *(_DWORD *)(v62 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v72, v54, v56 + v37, v11, 0, *(_DWORD *)(v54 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v69, v38, v56 + v37, v11, 0, *(_DWORD *)(v38 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v66, (uint64_t)&v87, v56 + v37, v11, 0, SDWORD2(v88));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v63, v57, v56 + v37, v11, 0, *(_DWORD *)(v57 + 16));
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v78, (uint64_t)&v75, 111, (uint64_t)&v72, &stru_68.sectname[7], 1.0, 1.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v78, (uint64_t)&v69, 111, (uint64_t)&v66, &stru_68.sectname[7], 1.0, 1.0);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v78, (uint64_t)&v63, CblasNoTrans, v53 + 208, &stru_68.sectname[7], 1.0, 1.0);
      uint64_t v63 = off_262D80;
      long long v64 = 0u;
      long long v65 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v63);
      uint64_t v66 = off_262D80;
      long long v67 = 0u;
      long long v68 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v66);
      uint64_t v69 = off_262D80;
      long long v70 = 0u;
      long long v71 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v69);
      uint64_t v72 = off_262D80;
      long long v73 = 0u;
      long long v74 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v72);
      uint64_t v75 = off_262D80;
      long long v76 = 0u;
      long long v77 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v75);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v75, (uint64_t)&v84, v39, v11, 0, SDWORD2(v85));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v75, (uint64_t)&v78, v40, v41, v42);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v72, v61, v39, v11, 0, *(_DWORD *)(v61 + 16));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v72, (uint64_t)&v78, v43, v44, v45);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v69, v38, v39, v11, 0, *(_DWORD *)(v38 + 16));
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v69, (uint64_t)&v72, CblasNoTrans, v53 + 256, &stru_68.sectname[7], 1.0, 0.0);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v66, (uint64_t)&v81, v39, v11, 0, SDWORD2(v82));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v66, (uint64_t)&v69, v46, v47, v48);
    uint64_t v66 = off_262D80;
    long long v67 = 0u;
    long long v68 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v66);
    uint64_t v69 = off_262D80;
    long long v70 = 0u;
    long long v71 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v69);
    uint64_t v72 = off_262D80;
    long long v73 = 0u;
    long long v74 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v72);
    uint64_t v75 = off_262D80;
    long long v76 = 0u;
    long long v77 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v75);
    uint64_t v78 = off_262D80;
    long long v79 = 0u;
    long long v80 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v78);
    v37 -= v11;
  }
  while (v27 > 0);
  if (v51)
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v78, v53 + 160, 0, 2 * *(_DWORD *)(v53 + *(void *)(*(void *)v53 - 24) + 12), 0, *(_DWORD *)(v53 + 176));
    int v49 = *(_DWORD *)(v53 + *(void *)(*(void *)v53 - 24) + 12);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v75, v53 + 160, 2 * v49, v49, 0, *(_DWORD *)(v53 + 176));
    kaldi::CuMatrixBase<float>::AddMatMat(v51, v57, CblasNoTrans, (uint64_t)&v78, &stru_68.sectname[7], 1.0, 0.0);
    kaldi::CuMatrixBase<float>::AddMatMat(v51, v61, CblasNoTrans, (uint64_t)&v75, &stru_68.sectname[7], 1.0, 1.0);
    uint64_t v75 = off_262D80;
    long long v76 = 0u;
    long long v77 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v75);
    uint64_t v78 = off_262D80;
    long long v79 = 0u;
    long long v80 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v78);
  }
  uint64_t v81 = off_262D80;
  long long v82 = 0u;
  long long v83 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v81);
  uint64_t v84 = off_262D80;
  long long v85 = 0u;
  long long v86 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v84);
  int v87 = off_262D80;
  long long v88 = 0u;
  long long v89 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v87);
  uint64_t v90 = off_262D80;
  long long v91 = 0u;
  long long v92 = 0u;
  *(void *)&double result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v90).n128_u64[0];
  return result;
}

void sub_149908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void (**a49)(),long long a50,long long a51,void (**a52)(),long long a53,long long a54,void (**a55)(),long long a56,long long a57,void (**a58)(),long long a59,long long a60,void (**a61)(),long long a62,long long a63)
{
  a49 = off_262D80;
  a50 = 0u;
  a51 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a49);
  a52 = off_262D80;
  a53 = 0u;
  a54 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a52);
  a55 = off_262D80;
  a56 = 0u;
  a57 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a55);
  a58 = off_262D80;
  a59 = 0u;
  a60 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a58);
  a61 = off_262D80;
  a62 = 0u;
  a63 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a61);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::nnet1::GatedRecurrentUnit::EnsureTrainingBuffers(uint64_t *this)
{
  if (!*((unsigned char *)this + 337))
  {
    uint64_t v1 = this;
    std::vector<kaldi::CuMatrix<float>>::resize(this + 64, *((int *)this + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 67, *((int *)v1 + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 70, *((int *)v1 + 20));
    this = std::vector<kaldi::CuMatrix<float>>::resize(v1 + 73, *((int *)v1 + 20));
    *((unsigned char *)v1 + 337) = 1;
  }
  return this;
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateBackwardBuffers(kaldi::nnet1::GatedRecurrentUnit *this, int a2, uint64_t a3, void *a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateBackwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 763, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    std::string::size_type v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*((void *)this + 64) + 48 * a2, a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 67) + 48 * a2, a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 70) + 48 * a2, a3, (2 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((void *)this + 73) + 48 * a2, a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  *(void *)(*((void *)this + 64) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 67) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 70) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 73) + 48 * a2 + 32) = a4;
}

void sub_149FB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return kaldi::nnet1::GatedRecurrentUnit::BackpropagateFnc((uint64_t)a1 + *(void *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void kaldi::nnet1::GatedRecurrentUnit::AccumGradients(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*((_DWORD *)this + 20) <= (int)a5) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", &stru_1F8.segname[6], "batch_index < ropts_.num_subbatches", a5);
  }
  int v7 = *((_DWORD *)this + 24);
  int v8 = *(_DWORD *)(a2 + 20);
  if (v8 % v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", &stru_1F8.segname[10], "batch_size % num_utts == 0", a5);
  }
  int v9 = (int)a5;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v45, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 532, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"Accumulating gradients for batch id = ", 38);
    int v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v45);
  }
  kaldi::nnet1::GatedRecurrentUnit::AllocateGradients(this);
  float v14 = *((float *)this + 15);
  *(_DWORD *)(*((void *)this + 77) + 4 * v9) = v8;
  uint64_t v15 = v9;
  uint64_t v16 = *((void *)this + 70);
  uint64_t v17 = 3 * v9;
  uint64_t v18 = *((void *)this + 67);
  uint64_t v19 = *((void *)this + 81) + 48 * v9;
  *(void *)(v19 + 32) = a4;
  *(void *)(*((void *)this + 84) + 48 * v9 + 32) = a4;
  *(void *)(*((void *)this + 87) + 48 * v9 + 32) = a4;
  *(void *)(*((void *)this + 90) + 32 * v9 + 24) = a4;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v45, v19, 0, 2 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, *(_DWORD *)(v19 + 16));
  uint64_t v20 = *((void *)this + 81) + 48 * v9;
  int v21 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v42, v20, 2 * v21, v21, 0, *(_DWORD *)(v20 + 16));
  uint64_t v22 = (_DWORD *)(v16 + 48 * v9);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v45, v16 + 16 * v17, CblasTrans, a2, &stru_68.sectname[7], 1.0, v14);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v42, v18 + 16 * v17, CblasTrans, a2, &stru_68.sectname[7], 1.0, v14);
  uint64_t v23 = *((void *)this + 84);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v39, (uint64_t)v22, v7, v8 - v7, 0, v22[4]);
  uint64_t v24 = *((void *)this + 61) + 48 * (int)v15;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v36, v24, 0, v8 - v7, 0, *(_DWORD *)(v24 + 16));
  kaldi::CuMatrixBase<float>::AddMatMat(v23 + 48 * (int)v15, (uint64_t)&v39, CblasTrans, (uint64_t)&v36, &stru_68.sectname[7], 1.0, v14);
  uint64_t v36 = off_262D80;
  long long v37 = 0u;
  long long v38 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v36);
  int v39 = off_262D80;
  long long v40 = 0u;
  long long v41 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v39);
  uint64_t v25 = *((void *)this + 87);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v39, v18 + 16 * v17, v7, v8 - v7, 0, *(_DWORD *)(v18 + 16 * v17 + 16));
  uint64_t v26 = *((void *)this + 55) + 48 * (int)v15;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v36, v26, 0, v8 - v7, 0, *(_DWORD *)(v26 + 16));
  kaldi::CuMatrixBase<float>::AddMatMat(v25 + 48 * (int)v15, (uint64_t)&v39, CblasTrans, (uint64_t)&v36, &stru_68.sectname[7], 1.0, v14);
  uint64_t v36 = off_262D80;
  long long v37 = 0u;
  long long v38 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v36);
  int v39 = off_262D80;
  long long v40 = 0u;
  long long v41 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v39);
  kaldi::CuSubVector<float>::CuSubVector(&v39, *((void *)this + 90) + 32 * v15, 0, 2 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12), v27);
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)&v39, v22, 1.0, v14, v28, v29, v30);
  int v31 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12);
  kaldi::CuSubVector<float>::CuSubVector(&v39, *((void *)this + 90) + 32 * v15, 2 * v31, v31, v32);
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)&v39, (_DWORD *)(v18 + 16 * v17), 1.0, v14, v33, v34, v35);
  uint64_t v42 = off_262D80;
  long long v43 = 0u;
  long long v44 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v42);
  uint64_t v45 = off_262D80;
  long long v46 = 0u;
  long long v47 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v45);
}

void sub_14A4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void (**a20)(),long long a21,long long a22,void (**a23)(),long long a24,long long a25)
{
  a20 = off_262D80;
  a21 = 0u;
  a22 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a20);
  a23 = off_262D80;
  a24 = 0u;
  a25 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a23);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateGradients(kaldi::nnet1::GatedRecurrentUnit *this)
{
  if (!*((unsigned char *)this + 640))
  {
    int v2 = *((_DWORD *)this + 39);
    int v3 = *((_DWORD *)this + 20);
    if (v3 > 1) {
      uint64_t v4 = (v3 + 1);
    }
    else {
      uint64_t v4 = 1;
    }
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 81, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 84, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 87, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 90, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 93, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 96, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 99, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 102, (int)v4);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (char *)this + 12;
      do
      {
        kaldi::CuMatrix<float>::Resize(*((void *)this + 81) + 48 * v5, (3 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 8), 0, 0);
        uint64_t v7 = *(unsigned int *)&v6[*(void *)(*(void *)this - 24)];
        kaldi::CuMatrix<float>::Resize(*((void *)this + 84) + 48 * v5, (2 * v7), v7, 0, 0);
        uint64_t v8 = *(unsigned int *)&v6[*(void *)(*(void *)this - 24)];
        kaldi::CuMatrix<float>::Resize(*((void *)this + 87) + 48 * v5, v8, v8, 0, 0);
        kaldi::CuVector<float>::Resize(*((void *)this + 90) + 32 * v5, (3 * *(_DWORD *)&v6[*(void *)(*(void *)this - 24)]), 0, v9, v10);
        if ((v2 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize(*((void *)this + 93) + 48 * v5, (3 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 8), 1u, 0);
          uint64_t v11 = *(unsigned int *)&v6[*(void *)(*(void *)this - 24)];
          kaldi::CuMatrix<float>::Resize(*((void *)this + 96) + 48 * v5, (2 * v11), v11, 1u, 0);
          uint64_t v12 = *(unsigned int *)&v6[*(void *)(*(void *)this - 24)];
          kaldi::CuMatrix<float>::Resize(*((void *)this + 99) + 48 * v5, v12, v12, 1u, 0);
          kaldi::CuVector<float>::Resize(*((void *)this + 102) + 32 * v5, (3 * *(_DWORD *)&v6[*(void *)(*(void *)this - 24)]), 1u, v13, v14);
          if (*((_DWORD *)this + 39) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*((void *)this + 93) + 48 * v5, v15, v16, v17, v18, 1.0);
            kaldi::CuMatrixBase<float>::Set(*((void *)this + 96) + 48 * v5, v19, v20, v21, v22, 1.0);
            kaldi::CuMatrixBase<float>::Set(*((void *)this + 99) + 48 * v5, v23, v24, v25, v26, 1.0);
            kaldi::CuVectorBase<float>::Set(*((void *)this + 102) + 32 * v5, 1.0);
          }
        }
        ++v5;
      }
      while (v5 != v4);
    }
    *((unsigned char *)this + 640) = 1;
    if (kaldi::g_kaldi_verbose_level > 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 739, 2);
      int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Allocated memory for the gradients: ", 36);
      (*(void (**)(void **__return_ptr, kaldi::nnet1::GatedRecurrentUnit *))(*(void *)this + 240))(__p, this);
      if ((v31 & 0x80u) == 0) {
        uint64_t v28 = __p;
      }
      else {
        uint64_t v28 = (void **)__p[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v29 = v31;
      }
      else {
        uint64_t v29 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
      if ((char)v31 < 0) {
        operator delete(__p[0]);
      }
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32);
    }
  }
}

void sub_14A9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::GatedRecurrentUnit::UpdateWeights(kaldi::nnet1::GatedRecurrentUnit *this, void *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v5 = *((float *)this + 14);
  float v6 = *((float *)this + 16);
  float v7 = *((float *)this + 17);
  *((void *)this + 24) = a2;
  *((void *)this + 30) = a2;
  *((void *)this + 36) = a2;
  *((void *)this + 41) = a2;
  uint64_t v8 = *(void *)this;
  int v9 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 80);
  if ((int)a3 >= 0) {
    unsigned int v10 = a3;
  }
  else {
    unsigned int v10 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 80);
  }
  if (v9 == 1) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  if ((int)v11 > v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", &stru_248.sectname[1], "batch_index <= opts_.num_subbatches", a5);
  }
  float v14 = (void *)((char *)this + 80);
  int v13 = *((_DWORD *)this + 20);
  uint64_t v15 = *((void *)this + 81) + 48 * (int)v11;
  *(void *)(v15 + 32) = a2;
  *(void *)(v14[74] + 48 * (int)v11 + 32) = a2;
  *(void *)(v14[77] + 48 * (int)v11 + 32) = a2;
  *(void *)(v14[80] + 32 * (int)v11 + 24) = a2;
  *(void *)(v14[83] + 48 * (int)v11 + 32) = a2;
  *(void *)(v14[86] + 48 * (int)v11 + 32) = a2;
  *(void *)(v14[89] + 48 * (int)v11 + 32) = a2;
  *(void *)(v14[92] + 32 * (int)v11 + 24) = a2;
  if (v11 == v13)
  {
    kaldi::CuMatrixBase<float>::SetZero(v15);
    kaldi::CuMatrixBase<float>::SetZero(*((void *)this + 84) + 48 * (int)v11);
    kaldi::CuMatrixBase<float>::SetZero(*((void *)this + 87) + 48 * (int)v11);
    kaldi::CuVectorBase<float>::SetZero(*((void *)this + 90) + 32 * (int)v11);
    uint64_t v8 = *(void *)this;
    if (*(int *)((char *)v14 + *(void *)(*(void *)this - 24)) >= 1)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*((void *)this + 81) + 48 * (int)v11, *((void *)this + 81) + v17, 111, a4, a5, 1.0, 1.0);
        kaldi::CuMatrixBase<float>::AddMat(*((void *)this + 84) + 48 * (int)v11, *((void *)this + 84) + v17, 111, v19, v20, 1.0, 1.0);
        kaldi::CuMatrixBase<float>::AddMat(*((void *)this + 87) + 48 * (int)v11, *((void *)this + 87) + v17, 111, v21, v22, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*((void *)this + 90) + 32 * (int)v11, *((void *)this + 90) + v16, v23, v24, v25, 1.0, 1.0);
        ++v18;
        uint64_t v8 = *(void *)this;
        v17 += 48;
        v16 += 32;
      }
      while (v18 < *(int *)((char *)v14 + *(void *)(*(void *)this - 24)));
    }
    uint64_t v26 = (int *)*((void *)this + 77);
    v26[(int)v11] = 0;
    if ((int)v11 >= 1)
    {
      int v27 = 0;
      uint64_t v28 = v11;
      uint64_t v29 = v26;
      do
      {
        int v30 = *v29++;
        v27 += v30;
        v26[(int)v11] = v27;
        --v28;
      }
      while (v28);
    }
  }
  if (*((unsigned char *)this + 84)) {
    float v5 = v5 / (float)*(int *)(*((void *)this + 77) + 4 * (int)v11);
  }
  if (*((float *)this + 38) >= 0.0) {
    (*(void (**)(kaldi::nnet1::GatedRecurrentUnit *, uint64_t))(v8 + 320))(this, v11);
  }
  if (v6 != 0.0)
  {
    float v31 = -(float)(v5 * v6);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)this + 160, 111, a4, a5, v31 * (float)*(int *)(*((void *)this + 77) + 4 * (int)v11), 1.0);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 208, (uint64_t)this + 208, 111, v32, v33, v31 * (float)*(int *)(*((void *)this + 77) + 4 * (int)v11), 1.0);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 256, (uint64_t)this + 256, 111, v34, v35, v31 * (float)*(int *)(*((void *)this + 77) + 4 * (int)v11), 1.0);
    kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 304, (uint64_t)this + 304, v36, v37, v38, v31, 1.0);
  }
  uint64_t v39 = *((void *)this + 81);
  if (v7 != 0.0)
  {
    kaldi::cu::RegularizeL1<float>((_DWORD *)this + 40, v39 + 48 * (int)v11, (float)(v7 * v5) * (float)*(int *)(*((void *)this + 77) + 4 * (int)v11), v5, a3, a4, a5);
    kaldi::cu::RegularizeL1<float>((_DWORD *)this + 52, *((void *)this + 84) + 48 * (int)v11, (float)(v7 * v5) * (float)*(int *)(*((void *)this + 77) + 4 * (int)v11), v5, v40, v41, v42);
    kaldi::cu::RegularizeL1<float>((_DWORD *)this + 64, *((void *)this + 87) + 48 * (int)v11, (float)(v7 * v5) * (float)*(int *)(*((void *)this + 77) + 4 * (int)v11), v5, v43, v44, v45);
    uint64_t v39 = *((void *)this + 81);
  }
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, v39 + 48 * (int)v11, 111, a4, a5, -(float)(v5 * *((float *)this + 152)), 1.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 208, *((void *)this + 84) + 48 * (int)v11, 111, v46, v47, -(float)(v5 * *((float *)this + 152)), 1.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 256, *((void *)this + 87) + 48 * (int)v11, 111, v48, v49, -(float)(v5 * *((float *)this + 152)), 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 304, *((void *)this + 90) + 32 * (int)v11, v50, v51, v52, -(float)(v5 * *((float *)this + 152)), 1.0);
  float v53 = *((float *)this + 153);
  if (v53 > 0.0)
  {
    kaldi::CuMatrixBase<float>::ApplyMaxNorm((uint64_t)this + 160, 1, v53);
    kaldi::CuMatrixBase<float>::ApplyMaxNorm((uint64_t)this + 208, 1, *((float *)this + 153));
    kaldi::CuMatrixBase<float>::ApplyMaxNorm((uint64_t)this + 256, 1, *((float *)this + 153));
    kaldi::CuVectorBase<float>::ApplyMaxNorm((uint64_t)this + 304, *((float *)this + 153), v54, v55, v56, v57);
  }
  uint64_t v58 = (unsigned char *)*((void *)this + 77);
  if (v11 == *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 80))
  {
    int v59 = (unsigned char *)*((void *)this + 78);
    if (v58 != v59)
    {
      bzero(v58, ((v59 - v58 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v58[4 * (int)v11] = 0;
  }
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::UpdateWeights(kaldi::nnet1::GatedRecurrentUnit *this, void *a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::GatedRecurrentUnit::EnsureBuffers(kaldi::nnet1::GatedRecurrentUnit *this)
{
  if (!*((unsigned char *)this + 336))
  {
    unint64_t v2 = *((int *)this + 20);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 43, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 46, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 49, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 52, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 55, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 58, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 61, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, v2);
    if ((int)v2 >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize(*((void *)this + 1) + v3, *((unsigned int *)this + 24), *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<int> *)((char *)this + 616), v2);
    *((unsigned char *)this + 336) = 1;
  }
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(unsigned char *)(result + 640) = 0;
  return result;
}

void *virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::SetGradientNormalization(void *result, int a2, float a3)
{
  uint64_t v3 = (float *)((char *)result + *(void *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((unsigned char *)v3 + 640) = 0;
  return result;
}

void kaldi::nnet1::GatedRecurrentUnit::NormalizeGradients(kaldi::nnet1::GatedRecurrentUnit *this, float a2, unsigned int a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if ((a3 & 0x80000000) != 0 || *((_DWORD *)this + 20) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"NormalizeGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)&stru_2E8.addr + 6, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a6);
  }
  float v7 = a2;
  int v8 = *((_DWORD *)this + 39);
  if (v8 == 1)
  {
    if (a2 > 0.0)
    {
      uint64_t v16 = a3;
      if (*((unsigned char *)this + 84)) {
        float v7 = (float)*(int *)(*((void *)this + 77) + 4 * a3) * a2;
      }
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((void *)this + 81) + 48 * a3, v7);
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((void *)this + 84) + 48 * v16, v7);
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((void *)this + 87) + 48 * v16, v7);
      uint64_t v18 = *((void *)this + 90) + 32 * v16;
      kaldi::nnet1::UpdatableComponent::ClipGradient(v18, v7);
    }
  }
  else if (v8 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
    {
      uint64_t v9 = a3;
      uint64_t v10 = 3 * a3;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((void *)this + 81) + 48 * a3, *((void *)this + 93) + 48 * a3, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((void *)this + 84) + 16 * v10, *((void *)this + 96) + 16 * v10, v7);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((void *)this + 87) + 16 * v10, *((void *)this + 99) + 16 * v10, v7);
      uint64_t v14 = *((void *)this + 90) + 32 * v9;
      uint64_t v15 = *((void *)this + 102) + 32 * v9;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v14, v15, v7, v11, v12, v13);
    }
  }
  else if (a2 > 0.0 && v8 == 2)
  {
    uint64_t v17 = a3;
    if (*((unsigned char *)this + 84)) {
      float v7 = (float)*(int *)(*((void *)this + 77) + 4 * a3) * a2;
    }
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((void *)this + 81) + 48 * a3, (unsigned int *)(*((void *)this + 93) + 48 * a3), v7, a4, a5, a6);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((void *)this + 84) + 48 * v17, (unsigned int *)(*((void *)this + 96) + 48 * v17), v7, v19, v20, v21);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((void *)this + 87) + 48 * v17, (unsigned int *)(*((void *)this + 99) + 48 * v17), v7, v22, v23, v24);
    uint64_t v28 = *((void *)this + 90) + 32 * v17;
    uint64_t v29 = (_DWORD *)(*((void *)this + 102) + 32 * v17);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v28, v29, v25, v26, v27, v7);
  }
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::NormalizeGradients(kaldi::nnet1::GatedRecurrentUnit *this, float a2, unsigned int a3, uint64_t a4, uint64_t a5, const char *a6)
{
}

float kaldi::nnet1::GatedRecurrentUnit::Check(kaldi::nnet1::GatedRecurrentUnit *this)
{
  int v1 = *((_DWORD *)this + 45);
  unint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
  int v3 = *((_DWORD *)v2 + 3);
  if (v1 != 3 * v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 812);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Input weights #rows = ", 22);
    float v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"; expecting ", 12);
    float v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 44) != *((_DWORD *)v2 + 2))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 816);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Input weights #columns = ", 25);
    float v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; expecting ", 12);
    int v8 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, " (same as input dim)");
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 57) != 2 * v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 820);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Gate recurrent weights #rows = ", 31);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; expecting ", 12);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 56) != v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 824);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Gate recurrent weights #columns = ", 34);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; expecting ", 12);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, " (same as output dim)");
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 69) != v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 828);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Activation recurrent weights #rows = ", 37);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 68) != v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 832);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Activation recurrent weights #columns = ", 40);
    uint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"; expecting ", 12);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, " (same as output dim)");
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 80) != v1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 836);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Bias dim = ", 11);
    uint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; expecting ", 12);
    uint64_t v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((float *)this + 152) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 841);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((float *)this + 153) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 844);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  float result = *((float *)this + 38);
  if (result < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 847);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
LABEL_22:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  return result;
}

unsigned int *kaldi::nnet1::GatedRecurrentUnit::GetHistoryState(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)&stru_338.addr + 2, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  uint64_t v8 = *(void *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(v8 + 20), *(unsigned int *)(v8 + 16), 1u, 0);
  uint64_t v11 = *(void *)(a1 + 8) + 48 * a3;

  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, v11, 111, v9, v10);
}

_DWORD *kaldi::nnet1::GatedRecurrentUnit::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)&stru_338.size, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  if ((a3 & 0x80000000) != 0
    || (uint64_t v7 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v7 + 20) <= (signed int)a3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)&stru_338.size + 1, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", a5);
  }
  unsigned int v9 = a4;
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(v7 + 16), 1u, a4, a5);
  uint64_t v13 = *(void *)(a1 + 8) + 48 * v9;
  if (*(_DWORD *)(v13 + 20) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
  }
  uint64_t v14 = *(void *)(v13 + 8) + 4 * (int)(*(_DWORD *)(v13 + 24) * a3);
  unsigned int v15 = *(_DWORD *)(v13 + 16);
  uint64_t v16 = *(void *)(v13 + 32);
  v18[1] = v14;
  v18[0] = &off_262E20;
  v18[2] = v15;
  v18[3] = v16;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v18, v10, v11, v12);
}

_DWORD *kaldi::nnet1::GatedRecurrentUnit::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v7 = (void *)(a1 + 840);
  uint64_t v8 = *(void *)(a1 + 840);
  if (v8 == *(void *)(a1 + 848))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 840), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 864), *(int *)(a1 + 80));
    uint64_t v8 = *(void *)(a1 + 840);
  }
  kaldi::CuVector<float>::Resize(v8 + 32 * a3, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  uint64_t v13 = (_DWORD *)(*v7 + 32 * a3);

  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2, v10, v11, v12);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::HistoryStateSize(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12);
}

unsigned int *kaldi::nnet1::GatedRecurrentUnit::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)&stru_338.nreloc, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v7);
  }
  uint64_t v8 = (unsigned int *)(*(void *)(a1 + 8) + 48 * a3);
  if (*(_DWORD *)(a2 + 20) != v8[5]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)&stru_338.nreloc + 1, "history.NumRows() == history_state_[batch_index].NumRows()", v7);
  }
  if (*(_DWORD *)(a2 + 16) != v8[4]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)&stru_338.nreloc + 2, "history.NumCols() == history_state_[batch_index].NumCols()", v7);
  }

  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v8, a2, 111, v6, v7);
}

_DWORD *kaldi::nnet1::GatedRecurrentUnit::SetHistoryState(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)&stru_338.reserved1 + 2, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v10);
  }
  if (a3 < 0 || (uint64_t v11 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v11 + 20) <= a3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)&stru_338.reserved1 + 3, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", v10);
  }
  unsigned int v12 = *(_DWORD *)(a2 + 16);
  if (v12 != *(_DWORD *)(v11 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)&stru_338.reserved2, "history.Dim() == history_state_[batch_index].NumCols()", v10);
  }
  uint64_t v13 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * a3;
  uint64_t v14 = *(void *)(v11 + 32);
  v16[1] = v13;
  v16[0] = &off_262E20;
  v16[2] = v12;
  v16[3] = v14;
  return kaldi::CuVectorBase<float>::CopyFromVec(v16, a2, v8, v9, v10);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, const char *a5)
{
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)&stru_338.reserved3 + 1, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  if (a2[1] != *(_DWORD *)(*(void *)(a1 + 8) + 48 * a4 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)&stru_338.reserved3 + 2, "sequence_idx.size() == history_state_[batch_index].NumRows()", a5);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  *(void *)(*(void *)(a1 + 8) + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    unint64_t v10 = 0;
    do
    {
      if ((*(void *)(*a2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10))
      {
        uint64_t v11 = *(void *)(a1 + 8) + 48 * a4;
        if (v10 >= *(unsigned int *)(v11 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v9);
        }
        uint64_t v12 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * (int)v10;
        unsigned int v13 = *(_DWORD *)(v11 + 16);
        uint64_t v14 = *(void *)(v11 + 32);
        v22[1] = v12;
        v22[0] = &off_262E20;
        v22[2] = v13;
        v22[3] = v14;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v22);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          unsigned int v15 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
        }
      }
      ++v10;
    }
    while (a2[1] > v10);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-gru.cc", 914, 3);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v21 & 0x80u) == 0) {
      uint64_t v17 = __p;
    }
    else {
      uint64_t v17 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      uint64_t v18 = v21;
    }
    else {
      uint64_t v18 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22);
  }
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_14C120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GatedRecurrentUnit::ResetHistoryState(kaldi::nnet1::GatedRecurrentUnit *this)
{
  (*(void (**)(kaldi::nnet1::GatedRecurrentUnit *))(*(void *)this + 88))(this);
  for (uint64_t i = *((void *)this + 1); i != *((void *)this + 2); i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

void kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 888));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 888));

  operator delete();
}

void kaldi::nnet1::GatedRecurrentUnit::Copy(kaldi::nnet1::GatedRecurrentUnit *this)
{
}

void sub_14C2BC()
{
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::GetType(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return 277;
}

void kaldi::nnet1::GatedRecurrentUnit::GetUnitOutputFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-gru.h", 93);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this)
{
  unint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 888);

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit((kaldi::nnet1::GatedRecurrentUnit *)((char *)this
                                                                                           + *(void *)(*(void *)this - 24)));
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::Copy(kaldi::nnet1::GatedRecurrentUnit *this)
{
  kaldi::nnet1::GatedRecurrentUnit::Copy((kaldi::nnet1::GatedRecurrentUnit *)((char *)this
                                                                            + *(void *)(*(void *)this - 32)));
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::GetUnitOutputFnc()
{
}

void kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[3];
  uint64_t v6 = (void **)((char *)this + 864);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 840);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 816);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 792);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 768);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 744);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 720);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 696);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 672);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 648);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  float v5 = (void *)*((void *)this + 77);
  if (v5)
  {
    *((void *)this + 78) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void **)((char *)this + 584);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 560);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 536);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 512);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 488);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 464);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  kaldi::CuVector<float>::~CuVector((void *)this + 38);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 256);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 208);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 160);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(this, a2 + 1);
}

kaldi::nnet1::GatedRecurrentUnit *kaldi::nnet1::GatedRecurrentUnit::GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this, const kaldi::nnet1::GatedRecurrentUnit *a2)
{
  uint64_t v4 = (char *)a2 + *(void *)(*(void *)a2 - 24);
  *((void *)this + 111) = off_264E70;
  uint64_t v5 = *((void *)v4 + 1);
  *((_WORD *)this + 452) = *((_WORD *)v4 + 8);
  *((void *)this + 112) = v5;
  *((void *)this + 114) = 0;
  *((void *)this + 116) = 0;
  *((void *)this + 115) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)this + 114, *((const void **)v4 + 3), *((void *)v4 + 4), (uint64_t)(*((void *)v4 + 4) - *((void *)v4 + 3)) >> 3);
  *((void *)this + 111) = off_266498;
  *((void *)this + 117) = off_26E7B8;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)((char *)this + 959) = *(_OWORD *)(v4 + 71);
  *((_OWORD *)this + 59) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (const kaldi::nnet1::RecurrentBaseComponent *)off_26C768, (uint64_t)a2);
  *(void *)this = off_26C3E0;
  *((void *)this + 111) = off_26C648;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 160, (char *)a2 + 160, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 208, (char *)a2 + 208, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 256, (char *)a2 + 256, 111);
  kaldi::CuVector<float>::CuVector((uint64_t)this + 304, (uint64_t)a2 + 304, v7, v8, v9);
  *((_WORD *)this + 168) = *((_WORD *)a2 + 168);
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 43) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 43, *((void *)a2 + 43), *((void *)a2 + 44), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 44) - *((void *)a2 + 43)) >> 4));
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 46, *((void *)a2 + 46), *((void *)a2 + 47), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 47) - *((void *)a2 + 46)) >> 4));
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 49, *((void *)a2 + 49), *((void *)a2 + 50), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 50) - *((void *)a2 + 49)) >> 4));
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 52, *((void *)a2 + 52), *((void *)a2 + 53), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 53) - *((void *)a2 + 52)) >> 4));
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 57) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 55, *((void *)a2 + 55), *((void *)a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 56) - *((void *)a2 + 55)) >> 4));
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  *((void *)this + 60) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 58, *((void *)a2 + 58), *((void *)a2 + 59), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 59) - *((void *)a2 + 58)) >> 4));
  *((void *)this + 61) = 0;
  *((void *)this + 62) = 0;
  *((void *)this + 63) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 61, *((void *)a2 + 61), *((void *)a2 + 62), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 62) - *((void *)a2 + 61)) >> 4));
  *((void *)this + 66) = 0;
  *((_OWORD *)this + 32) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 64, *((void *)a2 + 64), *((void *)a2 + 65), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 65) - *((void *)a2 + 64)) >> 4));
  *((void *)this + 69) = 0;
  *(_OWORD *)((char *)this + 536) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 67, *((void *)a2 + 67), *((void *)a2 + 68), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 68) - *((void *)a2 + 67)) >> 4));
  *((void *)this + 72) = 0;
  *((_OWORD *)this + 35) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 70, *((void *)a2 + 70), *((void *)a2 + 71), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 71) - *((void *)a2 + 70)) >> 4));
  *((void *)this + 75) = 0;
  *(_OWORD *)((char *)this + 584) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 73, *((void *)a2 + 73), *((void *)a2 + 74), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 74) - *((void *)a2 + 73)) >> 4));
  *((void *)this + 76) = *((void *)a2 + 76);
  *((void *)this + 77) = 0;
  *((void *)this + 79) = 0;
  *((void *)this + 78) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 77, *((const void **)a2 + 77), *((void *)a2 + 78), (uint64_t)(*((void *)a2 + 78) - *((void *)a2 + 77)) >> 2);
  *((unsigned char *)this + 640) = *((unsigned char *)a2 + 640);
  *((void *)this + 81) = 0;
  *((void *)this + 83) = 0;
  *((void *)this + 82) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 81, *((void *)a2 + 81), *((void *)a2 + 82), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 82) - *((void *)a2 + 81)) >> 4));
  *((void *)this + 86) = 0;
  *((_OWORD *)this + 42) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 84, *((void *)a2 + 84), *((void *)a2 + 85), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 85) - *((void *)a2 + 84)) >> 4));
  *((void *)this + 89) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 87, *((void *)a2 + 87), *((void *)a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 88) - *((void *)a2 + 87)) >> 4));
  *((void *)this + 92) = 0;
  *((_OWORD *)this + 45) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 90, *((void *)a2 + 90), *((void *)a2 + 91), (uint64_t)(*((void *)a2 + 91) - *((void *)a2 + 90)) >> 5);
  *((void *)this + 95) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 93, *((void *)a2 + 93), *((void *)a2 + 94), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 94) - *((void *)a2 + 93)) >> 4));
  *((void *)this + 98) = 0;
  *((_OWORD *)this + 48) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 96, *((void *)a2 + 96), *((void *)a2 + 97), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 97) - *((void *)a2 + 96)) >> 4));
  *((void *)this + 101) = 0;
  *(_OWORD *)((char *)this + 792) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 99, *((void *)a2 + 99), *((void *)a2 + 100), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 100) - *((void *)a2 + 99)) >> 4));
  *((void *)this + 104) = 0;
  *((_OWORD *)this + 51) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 102, *((void *)a2 + 102), *((void *)a2 + 103), (uint64_t)(*((void *)a2 + 103) - *((void *)a2 + 102)) >> 5);
  *((void *)this + 107) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 105, *((void *)a2 + 105), *((void *)a2 + 106), (uint64_t)(*((void *)a2 + 106) - *((void *)a2 + 105)) >> 5);
  *((void *)this + 110) = 0;
  *((_OWORD *)this + 54) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 108, *((void *)a2 + 108), *((void *)a2 + 109), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 109) - *((void *)a2 + 108)) >> 4));
  return this;
}

void sub_14CBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  *(void *)(v33 - 96) = v28;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v30;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v27;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v31;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v24;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v29;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  uint64_t v35 = *a11;
  if (*a11)
  {
    *((void *)v25 + 78) = v35;
    operator delete(v35);
  }
  *(void *)(v33 - 96) = v32;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a15;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  kaldi::CuVector<float>::~CuVector(a22);
  kaldi::CuMatrix<float>::~CuMatrix(a23);
  kaldi::CuMatrix<float>::~CuMatrix(a24);
  kaldi::CuMatrix<float>::~CuMatrix(*(void *)(v33 - 112));
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v25, (uint64_t *)off_26C768);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(*(kaldi::nnet1::UpdatableComponent **)(v33 - 104));
  _Unwind_Resume(a1);
}

void sub_14CD44()
{
}

void sub_14CD4C()
{
}

void sub_14CD54()
{
}

void sub_14CD5C()
{
}

void sub_14CD64()
{
}

void sub_14CD6C()
{
}

void sub_14CD74()
{
}

void sub_14CD7C()
{
}

void sub_14CD84()
{
}

void sub_14CD8C()
{
}

void sub_14CD94()
{
}

void sub_14CD9C()
{
}

void sub_14CDA4()
{
}

void sub_14CDAC()
{
}

void sub_14CDB4()
{
}

void sub_14CDBC()
{
}

void sub_14CDC4()
{
}

void sub_14CDCC()
{
}

void sub_14CDD4()
{
}

void sub_14CDDC()
{
}

void sub_14CDE4()
{
}

void sub_14CDEC()
{
}

void *std::vector<std::vector<double>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_14CE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    int v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void kaldi::TransitionModel::~TransitionModel(kaldi::TransitionModel *this)
{
  kaldi::Vector<float>::Destroy((uint64_t)this + 216);
  kaldi::Vector<float>::Destroy((uint64_t)this + 192);
  uint64_t v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 19) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 15);
  if (v4)
  {
    *((void *)this + 16) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 12);
  if (v5)
  {
    *((void *)this + 13) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 9);
  if (v6)
  {
    *((void *)this + 10) = v6;
    operator delete(v6);
  }
  int v9 = (void **)((char *)this + 48);
  std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__destroy_vector::operator()[abi:ne180100](&v9);
  int v7 = (void *)*((void *)this + 3);
  if (v7)
  {
    *((void *)this + 4) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v8;
    operator delete(v8);
  }
}

uint64_t *std::unique_ptr<kaldi::nnet1::PdfPrior>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    kaldi::CuVector<float>::~CuVector((void *)(v2 + 8));
    operator delete();
  }
  return result;
}

kaldi::nnet1::LayerNorm *kaldi::nnet1::LayerNorm::LayerNorm(kaldi::nnet1::LayerNorm *this, const kaldi::nnet1::LayerNorm *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *((void *)this + 1) = *((void *)a2 + 1);
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = off_26CA68;
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((unsigned char *)this + 52) = *((unsigned char *)a2 + 52);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 7) = off_262E60;
  *((void *)this + 8) = 0;
  int v7 = (char *)this + 88;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 11) = off_262E60;
  *((void *)this + 12) = 0;
  kaldi::CuVector<float>::operator=((uint64_t)this + 56, (uint64_t)a2 + 56, a3, a4, a5);
  kaldi::CuVector<float>::operator=((uint64_t)v7, (uint64_t)a2 + 88, v8, v9, v10);
  return this;
}

void sub_14D1C4(_Unwind_Exception *a1)
{
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::CuVector<float>::~CuVector(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::LayerNorm::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-layer-norm-component.cc", (const char *)&dword_18 + 2, "in.NumCols() == input_dim_", a5);
  }
  uint64_t v8 = *(unsigned int *)(a2 + 20);
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  long long v47 = off_262E60;
  uint64_t v48 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)&v47, v8, 0, a4, a5);
  if (*(int *)(a2 + 20) >= 1)
  {
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v11;
      unsigned int v13 = *(_DWORD *)(a2 + 16);
      uint64_t v14 = *(void *)(a2 + 32);
      uint64_t v43 = &off_262E20;
      uint64_t v44 = v12;
      uint64_t v46 = v14;
      uint64_t v45 = v13;
      double v15 = kaldi::CuVectorBase<float>::Sum((uint64_t)&v43);
      if (v11 >= v49) {
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)&stru_B8.reserved3 + 2, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v10);
      }
      *(float *)(v48 + 4 * v11++) = *(float *)&v15 / (float)(int)v45;
    }
    while ((uint64_t)v11 < *(int *)(a2 + 20));
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, a2, 111, v9, v10);
  kaldi::CuMatrixBase<float>::AddVecToCols(a3, (uint64_t)&v47, v16, v17, v18, -1.0, 1.0);
  uint64_t v19 = *(unsigned int *)(a2 + 20);
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v43 = (void (**)())off_262E60;
  uint64_t v44 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)&v43, v19, 0, v20, v21);
  if (*(int *)(a2 + 20) >= 1)
  {
    unint64_t v25 = 0;
    do
    {
      if (v25 >= *(unsigned int *)(a3 + 20)) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v24);
      }
      unsigned int v26 = *(_DWORD *)(a3 + 16);
      uint64_t v27 = *(void *)(a3 + 32);
      v42[1] = *(void *)(a3 + 8) + 4 * *(_DWORD *)(a3 + 24) * (int)v25;
      v42[0] = &off_262E20;
      v42[2] = v26;
      v42[3] = v27;
      kaldi::CuVector<float>::CuVector(v40);
      kaldi::CuVectorBase<float>::MulElements((uint64_t)v40, (uint64_t)v42, v28, v29, v30);
      double v32 = kaldi::CuVectorBase<float>::Sum((uint64_t)v40);
      if (v25 >= v45) {
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)&stru_B8.reserved3 + 2, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v31);
      }
      *(float *)(v44 + 4 * v25) = 1.0
                                / (float)(*(float *)(a1 + 48)
                                        + sqrtf(*(float *)&v32 / (float)(v41 - *(unsigned __int8 *)(a1 + 52))));
      kaldi::CuVector<float>::~CuVector(v40);
      ++v25;
    }
    while ((uint64_t)v25 < *(int *)(a2 + 20));
  }
  kaldi::CuMatrixBase<float>::MulRowsVec(a3, (uint64_t)&v43, v22, v23, v24);
  kaldi::CuMatrixBase<float>::MulColsVec(a3, a1 + 56, v33, v34, v35);
  kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 88, v36, v37, v38, 1.0, 1.0);
  kaldi::CuVector<float>::~CuVector(&v43);
  return kaldi::CuVector<float>::~CuVector(&v47);
}

void sub_14D4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LayerNorm::Info(kaldi::nnet1::LayerNorm *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v27);
  kaldi::WriteToken(v28, 0, (kaldi *)"<Epsilon>", v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ", 1);
  std::ostream::operator<<();
  kaldi::WriteToken(v28, 0, (kaldi *)"<UnbiasedVar>", v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ", 1);
  std::ostream::operator<<();
  kaldi::WriteToken(v28, 0, (kaldi *)"<Gamma>", v6, v7);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 14, v8, v9, v10, v11);
  if ((v26 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v13 = v26;
  }
  else {
    uint64_t v13 = v25;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)p_p, v13);
  if ((char)v26 < 0) {
    operator delete(__p);
  }
  kaldi::WriteToken(v28, 0, (kaldi *)"<Beta>", v14, v15);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 22, v16, v17, v18, v19);
  if ((v26 & 0x80u) == 0) {
    uint64_t v20 = &__p;
  }
  else {
    uint64_t v20 = __p;
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v21 = v26;
  }
  else {
    uint64_t v21 = v25;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v20, v21);
  if ((char)v26 < 0) {
    operator delete(__p);
  }
  std::stringbuf::str();
  *(void *)((char *)v27
  v28[0] = v22;
  if (v29 < 0) {
    operator delete((void *)v28[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_14D7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LayerNorm::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-layer-norm-component.cc", 64, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Reading LayerNorm component", 27);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32);
  }
  long long __p = 0uLL;
  uint64_t v31 = 0;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_61;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)&__p, v6, v7);
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      break;
    }
    uint64_t v11 = *((void *)&__p + 1);
    if (*((void *)&__p + 1) == 9
      && (*(void *)__p == 0x6E6F6C697370453CLL ? (BOOL v12 = *(unsigned char *)(__p + 8) == 62) : (BOOL v12 = 0), v12))
    {
LABEL_35:
      kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 48), v8, v7);
    }
    else if (*((void *)&__p + 1) == 13)
    {
      if (*(void *)__p != 0x65736169626E553CLL || *(void *)(__p + 5) != 0x3E72615664657361)
      {
        uint64_t v11 = *((void *)&__p + 1);
        goto LABEL_23;
      }
LABEL_53:
      kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 52), v8, v7);
    }
    else
    {
LABEL_23:
      if (v11 == 7)
      {
        BOOL v14 = *(_DWORD *)__p == 1835091772 && *(_DWORD *)(__p + 3) == 1046572397;
        uint64_t v15 = a1 + 56;
        if (v14) {
          goto LABEL_52;
        }
        uint64_t v11 = *((void *)&__p + 1);
      }
      if (v11 != 6) {
        goto LABEL_54;
      }
      BOOL v16 = *(_DWORD *)__p == 1952793148 && *(_WORD *)(__p + 4) == 15969;
      uint64_t v15 = a1 + 88;
      if (!v16)
      {
        uint64_t v11 = *((void *)&__p + 1);
LABEL_54:
        if (v11 == 12)
        {
          uint64_t v9 = (long long *)__p;
          goto LABEL_56;
        }
LABEL_69:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-layer-norm-component.cc", 80);
        uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Unrecognized token ", 19);
        if (v31 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = (long long *)__p;
        }
        if (v31 >= 0) {
          uint64_t v27 = HIBYTE(v31);
        }
        else {
          uint64_t v27 = *((void *)&__p + 1);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)p_p, v27);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
      }
LABEL_52:
      kaldi::CuVector<float>::Read(v15, a2, a3, v8, v7);
    }
  }
  uint64_t v9 = &__p;
  switch(HIBYTE(v31))
  {
    case 6:
      goto LABEL_47;
    case 7:
      goto LABEL_42;
    case 9:
      if ((void)__p != 0x6E6F6C697370453CLL || BYTE8(__p) != 62) {
        goto LABEL_69;
      }
      goto LABEL_35;
    case 0xC:
      goto LABEL_56;
    case 0xD:
      if ((void)__p == 0x65736169626E553CLL && *(void *)((char *)&__p + 5) == 0x3E72615664657361) {
        goto LABEL_53;
      }
      if (HIBYTE(v31) == 6) {
        goto LABEL_47;
      }
      if (HIBYTE(v31) == 7)
      {
LABEL_42:
        BOOL v18 = __p == 1835091772 && *(_DWORD *)((char *)&__p + 3) == 1046572397;
        uint64_t v15 = a1 + 56;
        if (!v18)
        {
          if (HIBYTE(v31) != 6) {
            goto LABEL_69;
          }
LABEL_47:
          BOOL v19 = __p == 1952793148 && WORD2(__p) == 15969;
          uint64_t v15 = a1 + 88;
          if (!v19) {
            goto LABEL_69;
          }
        }
        goto LABEL_52;
      }
      if (HIBYTE(v31) != 12) {
        goto LABEL_69;
      }
      uint64_t v9 = &__p;
LABEL_56:
      uint64_t v20 = *(void *)v9;
      int v21 = *((_DWORD *)v9 + 2);
      if (v20 != 0x6E6F706D6F432F3CLL || v21 != 1047817829) {
        goto LABEL_69;
      }
LABEL_61:
      int v23 = *(_DWORD *)(a1 + 104);
      if (v23 != *(_DWORD *)(a1 + 72))
      {
        uint64_t v28 = "beta_.Dim() == gamma_.Dim()";
        char v29 = (unsigned char *)(&stru_20 + 52);
        goto LABEL_79;
      }
      int v24 = *(_DWORD *)(a1 + 8);
      if (v24 != *(_DWORD *)(a1 + 12))
      {
        uint64_t v28 = "input_dim_ == output_dim_";
        char v29 = (unsigned char *)(&stru_20 + 53);
        goto LABEL_79;
      }
      if (v23 != v24)
      {
        uint64_t v28 = "beta_.Dim() == output_dim_";
        char v29 = (char *)&stru_20.filesize + 6;
LABEL_79:
        kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-layer-norm-component.cc", v29, v28, v7);
      }
      if (SHIBYTE(v31) < 0) {
        operator delete((void *)__p);
      }
      return;
    default:
      goto LABEL_69;
  }
}

void sub_14DC10(_Unwind_Exception *a1)
{
  if (v3 < 0) {
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::LayerNorm::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<Epsilon>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<UnbiasedVar>", v8, v9);
  kaldi::WriteBasicType<BOOL>(a2, (char)a3, *(unsigned __int8 *)(a1 + 52));
  kaldi::WriteToken(a2, a3, (kaldi *)"<Gamma>", v10, v11);
  kaldi::CuVectorBase<float>::Write((_DWORD *)(a1 + 56), a2, (int)a3, v12, v13);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Beta>", v14, v15);
  kaldi::CuVectorBase<float>::Write((_DWORD *)(a1 + 88), a2, (int)a3, v16, v17);

  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v18, v19);
}

void kaldi::nnet1::LayerNorm::~LayerNorm(kaldi::nnet1::LayerNorm *this)
{
  kaldi::nnet1::LayerNorm::~LayerNorm(this);

  operator delete();
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_26CA68;
  uint64_t v2 = (void *)((char *)this + 56);
  kaldi::CuVector<float>::~CuVector((void *)this + 11);
  kaldi::CuVector<float>::~CuVector(v2);

  kaldi::nnet1::Component::~Component(this);
}

void kaldi::nnet1::LayerNorm::Copy(kaldi::nnet1::LayerNorm *this)
{
}

void sub_14DDB4()
{
}

uint64_t kaldi::nnet1::LayerNorm::GetType(kaldi::nnet1::LayerNorm *this)
{
  return 290;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 257);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 258);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 262);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 263);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 268);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 269);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 273);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 274);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 279);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 280);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 284);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 285);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 290);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 291);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 292);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 296);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 297);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 298);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 303);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 304);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 305);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 309);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 310);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 311);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(a1);
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v5);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v6);
  uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v4);
  uint64_t result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v4);
    uint64_t result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v9);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v4);
    return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v10);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = off_264E70;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = off_266498;
  *(void *)(a1 + 896) = off_26E7B8;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)off_26CF58, a2);
  *(void *)a1 = off_26CB48;
  *(void *)(a1 + 848) = off_26CE38;
  *(void *)(a1 + 160) = off_26CCD8;
  *(void *)(a1 + 168) = off_26CD00;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 248);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v10 = *(void *)(a2 + 216);
  if (v10) {
    kaldi::NewCuSubOrMat<float>(v10, 0);
  }
  if (*(void *)(a2 + 232)) {
    operator new();
  }
  uint64_t v11 = *(void *)(a1 + 544);
  uint64_t v12 = *(void *)(a1 + 536);
  uint64_t v13 = (v11 - v12) >> 3;
  if (v13 != (uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    int v21 = (unsigned char *)(&stru_B8 + 75);
    goto LABEL_41;
  }
  if (v13 != (uint64_t)(*(void *)(a1 + 616) - *(void *)(a1 + 608)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == bias_gradient_.size()";
    int v21 = (unsigned char *)(&stru_B8 + 76);
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 208) && v13 != (uint64_t)(*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    int v21 = (unsigned char *)(&stru_B8 + 78);
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 224) && v13 != (uint64_t)(*(void *)(a1 + 640) - *(void *)(a1 + 632)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    int v21 = &stru_108.sectname[1];
LABEL_41:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", v21, v20, v9);
  }
  if (v11 != v12)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v15, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v14))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v16, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v14))
      {
        kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a2, v14);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v14))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v17, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v14))
      {
        uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v18, 0);
      }
      ++v14;
    }
    while (v14 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_14EE7C()
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(a1);
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v5);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v6);
  uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v4);
  uint64_t result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v4);
    uint64_t result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v9);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v4);
    return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v10);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = off_264E70;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = off_266498;
  *(void *)(a1 + 896) = off_26E7B8;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)off_26D398, a2);
  *(void *)a1 = off_26CF88;
  *(void *)(a1 + 848) = off_26D278;
  *(void *)(a1 + 160) = off_26D118;
  *(void *)(a1 + 168) = off_26D140;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 248);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v10 = *(void *)(a2 + 216);
  if (v10) {
    kaldi::NewCuSubOrMat<float>(v10, 0);
  }
  if (*(void *)(a2 + 232)) {
    operator new();
  }
  uint64_t v11 = *(void *)(a1 + 544);
  uint64_t v12 = *(void *)(a1 + 536);
  uint64_t v13 = (v11 - v12) >> 3;
  if (v13 != (uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    int v21 = (unsigned char *)(&stru_B8 + 75);
    goto LABEL_41;
  }
  if (v13 != (uint64_t)(*(void *)(a1 + 616) - *(void *)(a1 + 608)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == bias_gradient_.size()";
    int v21 = (unsigned char *)(&stru_B8 + 76);
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 208) && v13 != (uint64_t)(*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    int v21 = (unsigned char *)(&stru_B8 + 78);
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 224) && v13 != (uint64_t)(*(void *)(a1 + 640) - *(void *)(a1 + 632)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    int v21 = &stru_108.sectname[1];
LABEL_41:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", v21, v20, v9);
  }
  if (v11 != v12)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v15, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v14))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v16, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v14))
      {
        kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a2, v14);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v14))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v17, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v14))
      {
        uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v18, 0);
      }
      ++v14;
    }
    while (v14 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_14FDA8()
{
}

double kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::LstmComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 856) = a2;
  *(_DWORD *)(a1 + 860) = a3;
  *(_WORD *)(a1 + 864) = 0;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 848) = off_266498;
  *(void *)(a1 + 896) = off_26E7B8;
  *(_OWORD *)(a1 + 904) = xmmword_20CEC0;
  *(void *)(a1 + 920) = 0x3BF800000;
  *(_DWORD *)(a1 + 928) = 1;
  *(_WORD *)(a1 + 932) = 0;
  *(unsigned char *)(a1 + 934) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (uint64_t *)off_26D7D8);
  *(void *)uint64_t v4 = off_26D3C8;
  *(void *)(v4 + 848) = off_26D6B8;
  *(void *)(v4 + 160) = off_26D558;
  *(void *)(v4 + 168) = off_26D580;
  *(_DWORD *)(v4 + 176) = a3;
  *(void *)(v4 + 192) = 0;
  *(void *)(v4 + 200) = 0;
  *(void *)(v4 + 184) = 0;
  *(_WORD *)(v4 + 208) = 1;
  *(void *)(v4 + 216) = 0;
  *(unsigned char *)(v4 + 224) = 0;
  *(void *)(v4 + 232) = 0;
  *(_WORD *)(v4 + 240) = 0;
  *(void *)(v4 + 456) = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(void *)(v4 + 464) = 0x3DCCCCCD3F800000;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_OWORD *)(v4 + 488) = 0u;
  *(_OWORD *)(v4 + 504) = 0u;
  *(_OWORD *)(v4 + 513) = 0u;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_OWORD *)(v4 + 552) = 0u;
  *(_OWORD *)(v4 + 568) = 0u;
  *(_OWORD *)(v4 + 584) = 0u;
  *(_OWORD *)(v4 + 600) = 0u;
  *(_OWORD *)(v4 + 616) = 0u;
  *(_OWORD *)(v4 + 632) = 0u;
  *(_OWORD *)(v4 + 648) = 0u;
  *(_OWORD *)(v4 + 664) = 0u;
  *(_OWORD *)(v4 + 680) = 0u;
  *(_OWORD *)(v4 + 696) = 0u;
  *(_OWORD *)(v4 + 712) = 0u;
  *(_OWORD *)(v4 + 728) = 0u;
  *(_OWORD *)(v4 + 744) = 0u;
  *(_OWORD *)(v4 + 760) = 0u;
  *(_OWORD *)(v4 + 776) = 0u;
  *(_OWORD *)(v4 + 792) = 0u;
  *(_OWORD *)(v4 + 808) = 0u;
  *(_OWORD *)(v4 + 824) = 0u;
  *(void *)(v4 + 840) = 0;
  return result;
}

void sub_150290(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v5);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v6);
  uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v4);
  uint64_t result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v4);
    uint64_t result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v9);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v4);
    return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v10);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::LstmComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = off_264E70;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = off_266498;
  *(void *)(a1 + 896) = off_26E7B8;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)off_26D7D8, a2);
  *(void *)a1 = off_26D3C8;
  *(void *)(a1 + 848) = off_26D6B8;
  *(void *)(a1 + 160) = off_26D558;
  *(void *)(a1 + 168) = off_26D580;
  int v7 = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 176) = v7;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  LOBYTE(v7) = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 151);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  uint64_t v10 = *(void *)(a2 + 184);
  if (v10) {
    kaldi::NewCuSubOrMat<float>(v10, 0);
  }
  uint64_t v11 = *(void *)(a2 + 192);
  if (v11) {
    kaldi::NewCuSubOrMat<float>(v11, 0);
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v12 = *(void *)(a2 + 216);
  if (v12) {
    kaldi::NewCuSubOrMat<float>(v12, 0);
  }
  uint64_t v13 = *(void *)(a2 + 232);
  if (v13) {
    kaldi::NewCuSubOrMat<float>(v13, 0);
  }
  uint64_t v14 = *(void *)(a1 + 544);
  uint64_t v15 = *(void *)(a1 + 536);
  uint64_t v16 = (v14 - v15) >> 3;
  if (v16 != (uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3)
  {
    int v23 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    p_flags = (_DWORD *)(&stru_68 + 58);
    goto LABEL_41;
  }
  if (v16 != (uint64_t)(*(void *)(a1 + 616) - *(void *)(a1 + 608)) >> 3)
  {
    int v23 = "input_weights_gradient_.size() == bias_gradient_.size()";
    p_flags = (_DWORD *)(&stru_68 + 59);
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 208) && v16 != (uint64_t)(*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3)
  {
    int v23 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    p_flags = (_DWORD *)(&stru_68 + 61);
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 224) && v16 != (uint64_t)(*(void *)(a1 + 640) - *(void *)(a1 + 632)) >> 3)
  {
    int v23 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    p_flags = &stru_68.flags;
LABEL_41:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)p_flags, v23, v9);
  }
  if (v14 != v15)
  {
    unint64_t v17 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v17))
      {
        uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a2, v17);
        kaldi::NewCuSubOrMat<float>(v18, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v17))
      {
        uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a2, v17);
        kaldi::NewCuSubOrMat<float>(v19, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v17))
      {
        kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a2, v17);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v17))
      {
        uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a2, v17);
        kaldi::NewCuSubOrMat<float>(v20, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v17))
      {
        uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a2, v17);
        kaldi::NewCuSubOrMat<float>(v21, 0);
      }
      ++v17;
    }
    while (v17 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_150F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,kaldi::nnet1::UpdatableComponent *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t a28)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v29);
  a28 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a11;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  uint64_t v31 = *a14;
  if (*a14)
  {
    *((void *)v28 + 64) = v31;
    operator delete(v31);
  }
  double v32 = *a15;
  if (*a15)
  {
    *((void *)v28 + 61) = v32;
    operator delete(v32);
  }
  a28 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a22;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a23;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  uint64_t v33 = *((void *)v28 + 29);
  *((void *)v28 + 29) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 24))(v33);
  }
  uint64_t v34 = *((void *)v28 + 27);
  *((void *)v28 + 27) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 24))(v34);
  }
  uint64_t v35 = *((void *)v28 + 25);
  *((void *)v28 + 25) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
  }
  uint64_t v36 = *((void *)v28 + 24);
  *((void *)v28 + 24) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 24))(v36);
  }
  uint64_t v37 = *a27;
  *a27 = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
  }
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a19);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a20);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v28, (uint64_t *)off_26D7D8);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a21);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v4 - 24)) = a2[3];
  *(void *)(a1 + 160) = off_26D558;
  *(void *)(a1 + 168) = off_26D580;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 776));
  uint64_t v12 = (void **)(a1 + 752);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 728);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 704);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 680);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 656);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 632);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 608);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 584);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 560);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 536);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v5 = *(void **)(a1 + 504);
  if (v5)
  {
    *(void *)(a1 + 512) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 480);
  if (v6)
  {
    *(void *)(a1 + 488) = v6;
    operator delete(v6);
  }
  uint64_t v12 = (void **)(a1 + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 320);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 296);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 272);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v7 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }
  uint64_t v11 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1 + 168);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1 + 160);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, a2 + 1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v2 + 848));
  return a1;
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 688));
}

{
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 680));
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(a1 - 160);
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(a1 - 168);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(void *a1)
{
  uint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 848);

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent((uint64_t)a1 + *(void *)(*a1 - 24));
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));

  operator delete();
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Copy()
{
}

void sub_151810()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Copy()
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void sub_1518AC()
{
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

void sub_151934()
{
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  int v72 = -1;
  int v73 = v4;
  int v70 = 0x40000000;
  int v71 = -1073741824;
  int v68 = -1073741824;
  int v69 = 1036831949;
  int v67 = 0x40000000;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)((char *)&def_5A5E8 + 2), &v66);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &v65);
  memset(v64, 0, sizeof(v64));
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_210;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v64, v5, v6);
    if ((SHIBYTE(v64[2]) & 0x80000000) == 0)
    {
      uint64_t v9 = v64;
      switch(HIBYTE(v64[2]))
      {
        case 8:
          goto LABEL_44;
        case 9:
          BOOL v10 = v64[0] == 0x6D726F4E78614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 472);
          if (v10) {
            goto LABEL_202;
          }
          BOOL v12 = v64[0] == 0x6461724778614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 152);
          if (v12) {
            goto LABEL_202;
          }
          BOOL v13 = v64[0] == 0x6C6C654378614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 476);
          if (v13) {
            goto LABEL_202;
          }
          if ((v64[2] & 0x8000000000000000) != 0) {
            goto LABEL_120;
          }
          goto LABEL_43;
        case 0xA:
          if (v64[0] == 0x6C6C65436D754E3CLL && LOWORD(v64[1]) == 15987) {
            goto LABEL_205;
          }
          if (v64[0] != 0x61654D736169423CLL || LOWORD(v64[1]) != 15982) {
            goto LABEL_209;
          }
          goto LABEL_161;
        case 0xB:
          if (v64[0] != 0x6E6152736169423CLL || *(void *)((char *)v64 + 3) != 0x3E65676E61527361) {
            goto LABEL_209;
          }
          goto LABEL_107;
        case 0xC:
          if (v64[0] == 0x536D6F646E61523CLL && LODWORD(v64[1]) == 1046766949) {
            goto LABEL_206;
          }
          if ((v64[2] & 0x8000000000000000) != 0) {
            goto LABEL_126;
          }
LABEL_43:
          if (HIBYTE(v64[2]) != 8) {
            goto LABEL_209;
          }
LABEL_44:
          if (v64[0] == 0x3E706565506F4E3CLL) {
            goto LABEL_151;
          }
          if ((v64[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_129;
        case 0xD:
          if (v64[0] != 0x74536D617261503CLL || *(void *)((char *)v64 + 5) != 0x3E7665646474536DLL) {
            goto LABEL_209;
          }
          goto LABEL_185;
        case 0xF:
          BOOL v33 = v64[0] == 0x61526E7261654C3CLL && *(void *)((char *)v64 + 7) == 0x3E66656F43657461;
          goto LABEL_189;
        case 0x12:
          if (v64[0] == 0x6E6569646172473CLL && v64[1] == 0x7079546D726F4E74 && LOWORD(v64[2]) == 15973) {
            goto LABEL_204;
          }
          if (v64[0] == 0x4374757074754F3CLL && v64[1] == 0x65756C61566C6C65 && LOWORD(v64[2]) == 15987) {
            goto LABEL_208;
          }
          if ((v64[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_138;
        case 0x13:
          goto LABEL_141;
        case 0x14:
          if (v64[0] != 0x47746567726F463CLL || v64[1] != 0x4D73616942657461 || LODWORD(v64[2]) != 1047421285) {
            goto LABEL_209;
          }
          goto LABEL_170;
        case 0x15:
          if (v64[0] != 0x47746567726F463CLL
            || v64[1] != 0x5273616942657461
            || *(void *)((char *)&v64[1] + 5) != 0x3E65676E61527361)
          {
            goto LABEL_209;
          }
          goto LABEL_179;
        case 0x19:
          BOOL v22 = v64[0] == 0x7463656A6F72503CLL
             && v64[1] == 0x6E7261654C6E6F69
             && v64[2] == 0x66656F4365746152
             && v65.__r_.__value_.__s.__data_[0] == 62;
          goto LABEL_200;
        default:
          goto LABEL_209;
      }
    }
    uint64_t v14 = v64[1];
    switch(v64[1])
    {
      case 9:
        BOOL v15 = *(void *)v64[0] == 0x6D726F4E78614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
        uint64_t v11 = (int *)(a1 + 472);
        if (!v15)
        {
          BOOL v16 = *(void *)v64[0] == 0x6461724778614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
          uint64_t v11 = (int *)(a1 + 152);
          if (!v16) {
            goto LABEL_116;
          }
        }
        goto LABEL_202;
      case 0xALL:
        if (*(void *)v64[0] == 0x6C6C65436D754E3CLL && *(_WORD *)(v64[0] + 8) == 15987)
        {
LABEL_205:
          uint64_t v56 = &v73;
LABEL_207:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v56, v7, v8);
          break;
        }
        if (*(void *)v64[0] != 0x61654D736169423CLL || *(_WORD *)(v64[0] + 8) != 15982) {
          goto LABEL_209;
        }
LABEL_161:
        uint64_t v11 = &v71;
LABEL_202:
        kaldi::ReadBasicType<float>(a2, 0, (float *)v11, v7, v8);
        break;
      case 0xBLL:
        if (*(void *)v64[0] != 0x6E6152736169423CLL || *(void *)(v64[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_209;
        }
LABEL_107:
        uint64_t v11 = &v70;
        goto LABEL_202;
      case 0xDLL:
        if (*(void *)v64[0] != 0x74536D617261503CLL || *(void *)(v64[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_209;
        }
LABEL_185:
        uint64_t v11 = &v69;
        goto LABEL_202;
      case 0xFLL:
        BOOL v33 = *(void *)v64[0] == 0x61526E7261654C3CLL && *(void *)(v64[0] + 7) == 0x3E66656F43657461;
LABEL_189:
        uint64_t v11 = (int *)(a1 + 464);
        if (!v33) {
          goto LABEL_209;
        }
        goto LABEL_202;
      case 0x12:
        if (*(void *)v64[0] == 0x6E6569646172473CLL
          && *(void *)(v64[0] + 8) == 0x7079546D726F4E74
          && *(_WORD *)(v64[0] + 16) == 15973)
        {
LABEL_204:
          uint64_t v46 = &v65;
          goto LABEL_150;
        }
        if (v64[1] != 9) {
          goto LABEL_121;
        }
LABEL_116:
        BOOL v37 = *(void *)v64[0] == 0x6C6C654378614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
        uint64_t v11 = (int *)(a1 + 476);
        if (v37) {
          goto LABEL_202;
        }
LABEL_120:
        uint64_t v14 = v64[1];
LABEL_121:
        if (v14 != 12) {
          goto LABEL_127;
        }
        if (*(void *)v64[0] == 0x536D6F646E61523CLL && *(_DWORD *)(v64[0] + 8) == 1046766949)
        {
LABEL_206:
          uint64_t v56 = &v72;
          goto LABEL_207;
        }
LABEL_126:
        uint64_t v14 = v64[1];
LABEL_127:
        if (v14 == 8)
        {
          if (*(void *)v64[0] == 0x3E706565506F4E3CLL)
          {
LABEL_151:
            *(unsigned char *)(a1 + 208) = 0;
            break;
          }
LABEL_129:
          uint64_t v14 = v64[1];
        }
        if (v14 != 18) {
          goto LABEL_139;
        }
        if (*(void *)v64[0] != 0x4374757074754F3CLL
          || *(void *)(v64[0] + 8) != 0x65756C61566C6C65
          || *(_WORD *)(v64[0] + 16) != 15987)
        {
LABEL_138:
          uint64_t v14 = v64[1];
LABEL_139:
          if (v14 != 19) {
            goto LABEL_209;
          }
          uint64_t v9 = (uint64_t *)v64[0];
LABEL_141:
          uint64_t v41 = *v9;
          uint64_t v42 = v9[1];
          uint64_t v43 = *(uint64_t *)((char *)v9 + 11);
          BOOL v44 = v41 == 0x61725474696E493CLL && v42 == 0x79546D726F66736ELL;
          if (!v44 || v43 != 0x3E657079546D726FLL)
          {
LABEL_209:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v64, "</Component>"))
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v63, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 351);
              uint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Invalid token ", 14);
              if (v64[2] >= 0) {
                uint64_t v58 = v64;
              }
              else {
                uint64_t v58 = (void *)v64[0];
              }
              if (v64[2] >= 0) {
                uint64_t v59 = HIBYTE(v64[2]);
              }
              else {
                uint64_t v59 = v64[1];
              }
              uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
              uint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)". Allowed tokens: ", 18);
              uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"(NumCells|BiasMean|BiasRange|ForgetGateBiasMean|ForgetGateBiasRange|ParamStddev|LearnRateCoef|ProjectionLearnRateCoef|MaxNorm|", 126);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"MaxGrad|MaxCell|NoPeep|InitTransformType|GradientNormType|RandomSeed)", 69);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v63);
            }
LABEL_210:
            kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateParams(a1, v73);
          }
          uint64_t v46 = &v66;
LABEL_150:
          kaldi::ReadToken(a2, 0, (uint64_t)v46, v7, v8);
          break;
        }
LABEL_208:
        *(unsigned char *)(a1 + 209) = 1;
        break;
      case 0x14:
        if (*(void *)v64[0] != 0x47746567726F463CLL
          || *(void *)(v64[0] + 8) != 0x4D73616942657461
          || *(_DWORD *)(v64[0] + 16) != 1047421285)
        {
          goto LABEL_209;
        }
LABEL_170:
        uint64_t v11 = &v68;
        goto LABEL_202;
      case 0x15:
        if (*(void *)v64[0] != 0x47746567726F463CLL
          || *(void *)(v64[0] + 8) != 0x5273616942657461
          || *(void *)(v64[0] + 13) != 0x3E65676E61527361)
        {
          goto LABEL_209;
        }
LABEL_179:
        uint64_t v11 = &v67;
        goto LABEL_202;
      case 0x19:
        BOOL v22 = *(void *)v64[0] == 0x7463656A6F72503CLL
           && *(void *)(v64[0] + 8) == 0x6E7261654C6E6F69
           && *(void *)(v64[0] + 16) == 0x66656F4365746152
           && *(unsigned char *)(v64[0] + 24) == 62;
LABEL_200:
        uint64_t v11 = (int *)(a1 + 468);
        if (!v22) {
          goto LABEL_209;
        }
        goto LABEL_202;
      default:
        goto LABEL_121;
    }
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
}

void sub_152634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  if (*(char *)(v14 - 185) < 0) {
    operator delete(*(void **)(v14 - 208));
  }
  if (*(char *)(v14 - 161) < 0) {
    operator delete(*(void **)(v14 - 184));
  }
  if (*(char *)(v14 - 137) < 0) {
    operator delete(*(void **)(v14 - 160));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateParams(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 176) = a2;
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) > a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1249);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"# LSTM cells (", 14);
    uint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") should not be less than output dim (", 38);
    char v3 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, ").");
  }
  else
  {
    if (!*(void *)(a1 + 184)) {
      operator new();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1253);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_ thought to be un-initialized here");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
}

void sub_152D28()
{
}

void sub_152D3C(_Unwind_Exception *a1)
{
  operator delete(v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix<kaldi::CuMatrixBase<float>>(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, uint64_t a4, float a5)
{
  kaldi::Matrix<float>::Matrix((uint64_t)&v23, *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 0, 0);
  unint64_t v10 = 0;
LABEL_2:
  if ((uint64_t)v10 < (int)kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)&v23))
  {
    for (unint64_t i = 0; ; ++i)
    {
      if ((uint64_t)i >= (int)kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)&v23))
      {
        ++v10;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0, v14, v15, v16);
          if (v10 >= v25 || i >= v24) {
            goto LABEL_25;
          }
          uint64_t v18 = v23 + 4 * (int)v10 * v26;
          float v19 = v20 * a5;
        }
        else
        {
          if (a3 != 1) {
            continue;
          }
          float v17 = kaldi::UniformRandomNumber::RandUniform(a1, 0, v14, v15, v16);
          if (v10 >= v25 || i >= v24) {
            goto LABEL_25;
          }
          uint64_t v18 = v23 + 4 * (int)v10 * v26;
          float v19 = (v17 + -0.5) * (float)(a5 + a5);
        }
      }
      else
      {
        if (v10 >= v25 || i >= v24) {
LABEL_25:
        }
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v16);
        uint64_t v18 = v23 + 4 * (int)v10 * v26;
        if (v10 == i) {
          float v19 = 1.0;
        }
        else {
          float v19 = 0.0;
        }
      }
      *(float *)(v18 + 4 * i) = v19;
    }
  }
  kaldi::CuMatrixBase<float>::CopyFromMat(a4, (uint64_t)&v23, 111, v11, v12);
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v23);
}

void sub_152F28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 214);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 210);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 223);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 219);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 232);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 228);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 241);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 237);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 250);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 246);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitData(void *a1, uint64_t *a2)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_135:
    int v38 = *(_DWORD *)(a1 + 176);
    int v39 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
    if (v38 < v39)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 430);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# LSTM cells (", 14);
      uint64_t v43 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") should not be less than output dim (", 38);
      BOOL v44 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v44, ").");
    }
    else
    {
      *(unsigned char *)(a1 + 224) = v38 > v39;
      if (!*(void *)(a1 + 184)) {
        operator new();
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 436);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_weights_ thougth to be un-initialized here");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    long long v47 = 0uLL;
    uint64_t v48 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v47, v6, v7);
    if ((SHIBYTE(v48) & 0x80000000) == 0)
    {
      switch(HIBYTE(v48))
      {
        case 8:
          goto LABEL_97;
        case 9:
          goto LABEL_85;
        case 0xA:
          if ((void)v47 != 0x6C6C65436D754E3CLL || WORD4(v47) != 15987) {
            goto LABEL_138;
          }
          goto LABEL_46;
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x10:
        case 0x11:
          goto LABEL_138;
        case 0xF:
          BOOL v27 = (void)v47 == 0x61526E7261654C3CLL && *(void *)((char *)&v47 + 7) == 0x3E66656F43657461;
          uint64_t v14 = (float *)(a1 + 464);
          if (v27) {
            goto LABEL_127;
          }
          if (HIBYTE(v48) != 8) {
            goto LABEL_84;
          }
          goto LABEL_97;
        case 0x12:
          if ((void)v47 == 0x4374757074754F3CLL
            && *((void *)&v47 + 1) == 0x65756C61566C6C65
            && (unsigned __int16)v48 == 15987)
          {
            goto LABEL_132;
          }
          if (HIBYTE(v48) == 9) {
            goto LABEL_119;
          }
          if (HIBYTE(v48) != 18) {
            goto LABEL_138;
          }
          BOOL v25 = (void)v47 == 0x6E6569646172473CLL && *((void *)&v47 + 1) == 0x7079546D726F4E74;
          if (!v25 || (unsigned __int16)v48 != 15973) {
            goto LABEL_138;
          }
          goto LABEL_133;
        default:
          if (HIBYTE(v48) != 25) {
            goto LABEL_138;
          }
          BOOL v22 = (void)v47 == 0x7463656A6F72503CLL
             && *((void *)&v47 + 1) == 0x6E7261654C6E6F69
             && v48 == 0x66656F4365746152
             && v49 == 62;
          uint64_t v14 = (float *)(a1 + 468);
          if (v22) {
            goto LABEL_127;
          }
LABEL_84:
          if (HIBYTE(v48) != 9) {
            goto LABEL_138;
          }
LABEL_85:
          BOOL v28 = (void)v47 == 0x6D726F4E78614D3CLL && BYTE8(v47) == 62;
          uint64_t v14 = (float *)(a1 + 472);
          if (v28) {
            goto LABEL_127;
          }
          if (HIBYTE(v48) == 8) {
            goto LABEL_97;
          }
          if (HIBYTE(v48) != 9) {
            goto LABEL_138;
          }
          BOOL v29 = (void)v47 == 0x6C6C654378614D3CLL && BYTE8(v47) == 62;
          uint64_t v14 = (float *)(a1 + 476);
          if (!v29) {
            goto LABEL_119;
          }
          goto LABEL_127;
      }
    }
    uint64_t v11 = *((void *)&v47 + 1);
    if (*((void *)&v47 + 1) == 10
      && (*(void *)v47 == 0x6C6C65436D754E3CLL ? (BOOL v12 = *(unsigned __int16 *)(v47 + 8) == 15987) : (BOOL v12 = 0), v12))
    {
LABEL_46:
      kaldi::ReadBasicType<int>(a2, a3, a1 + 176, v8, v9);
    }
    else
    {
      if (*((void *)&v47 + 1) == 15)
      {
        BOOL v13 = *(void *)v47 == 0x61526E7261654C3CLL && *(void *)(v47 + 7) == 0x3E66656F43657461;
        uint64_t v14 = (float *)(a1 + 464);
        if (v13) {
          goto LABEL_127;
        }
        uint64_t v11 = *((void *)&v47 + 1);
      }
      if (v11 == 25)
      {
        BOOL v17 = *(void *)v47 == 0x7463656A6F72503CLL
           && *(void *)(v47 + 8) == 0x6E7261654C6E6F69
           && *(void *)(v47 + 16) == 0x66656F4365746152
           && *(unsigned char *)(v47 + 24) == 62;
        uint64_t v14 = (float *)(a1 + 468);
        if (v17) {
          goto LABEL_127;
        }
        uint64_t v11 = *((void *)&v47 + 1);
      }
      if (v11 != 9) {
        goto LABEL_47;
      }
      BOOL v18 = *(void *)v47 == 0x6D726F4E78614D3CLL && *(unsigned char *)(v47 + 8) == 62;
      uint64_t v14 = (float *)(a1 + 472);
      if (v18) {
        goto LABEL_127;
      }
      uint64_t v11 = *((void *)&v47 + 1);
      if (*((void *)&v47 + 1) != 9) {
        goto LABEL_47;
      }
      BOOL v19 = *(void *)v47 == 0x6C6C654378614D3CLL && *(unsigned char *)(v47 + 8) == 62;
      uint64_t v14 = (float *)(a1 + 476);
      if (v19) {
        goto LABEL_127;
      }
      if ((v48 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v48) == 9) {
          goto LABEL_119;
        }
        if (HIBYTE(v48) != 8) {
          goto LABEL_138;
        }
LABEL_97:
        if ((void)v47 != 0x3E706565506F4E3CLL)
        {
          if ((v48 & 0x8000000000000000) == 0) {
            goto LABEL_138;
          }
LABEL_100:
          uint64_t v11 = *((void *)&v47 + 1);
          if (v11 != 18) {
            goto LABEL_120;
          }
LABEL_101:
          if (*(void *)v47 == 0x4374757074754F3CLL
            && *(void *)(v47 + 8) == 0x65756C61566C6C65
            && *(_WORD *)(v47 + 16) == 15987)
          {
LABEL_132:
            *(unsigned char *)(a1 + 209) = 1;
            goto LABEL_128;
          }
          uint64_t v11 = *((void *)&v47 + 1);
          if (*((void *)&v47 + 1) != 18) {
            goto LABEL_120;
          }
          if (*(void *)v47 == 0x6E6569646172473CLL
            && *(void *)(v47 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v47 + 16) == 15973)
          {
LABEL_133:
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v46 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p, v8, v9);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v46) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_128;
          }
          if ((v48 & 0x8000000000000000) == 0)
          {
            if (HIBYTE(v48) != 9) {
              goto LABEL_138;
            }
LABEL_119:
            uint64_t v34 = &v47;
          }
          else
          {
LABEL_120:
            if (v11 != 9) {
              goto LABEL_138;
            }
            uint64_t v34 = (long long *)v47;
          }
          uint64_t v35 = *(void *)v34;
          int v36 = *((unsigned __int8 *)v34 + 8);
          BOOL v37 = v35 == 0x6461724778614D3CLL && v36 == 62;
          uint64_t v14 = (float *)(a1 + 152);
          if (!v37)
          {
LABEL_138:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 424);
            uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v48 >= 0) {
              uint64_t v41 = &v47;
            }
            else {
              uint64_t v41 = (long long *)v47;
            }
            if (v48 >= 0) {
              uint64_t v42 = HIBYTE(v48);
            }
            else {
              uint64_t v42 = *((void *)&v47 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
LABEL_127:
          kaldi::ReadBasicType<float>(a2, a3, v14, v8, v9);
          goto LABEL_128;
        }
      }
      else
      {
LABEL_47:
        if (v11 != 8) {
          goto LABEL_101;
        }
        if (*(void *)v47 != 0x3E706565506F4E3CLL) {
          goto LABEL_100;
        }
      }
      *(unsigned char *)(a1 + 208) = 0;
    }
LABEL_128:
    if (SHIBYTE(v48) < 0) {
      operator delete((void *)v47);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_135;
    }
  }
}

void sub_153DF4()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ReadData(void *a1, uint64_t *a2, int a3)
{
}

void *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumCells>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<ProjectionLearnRateCoef>", v10, v11);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v12, v13);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v14, v15);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v16, v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v18, v19);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxCell>", v20, v21);
  uint64_t result = kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  if (!*(unsigned char *)(a1 + 208)) {
    uint64_t result = kaldi::WriteToken(a2, a3, (kaldi *)"<NoPeep>", v23, v24);
  }
  if (*(unsigned char *)(a1 + 209)) {
    return kaldi::WriteToken(a2, a3, (kaldi *)"<OutputCellValues>", v23, v24);
  }
  return result;
}

void sub_153FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteConfig(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteData(unsigned char *a1, void *a2, uint64_t a3, int a4)
{
  (*(void (**)(unsigned char *))(*(void *)a1 + 128))(a1);
  (*(void (**)(unsigned char *, void *, uint64_t))(*(void *)a1 + 192))(a1, a2, a3);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1);
  kaldi::CuMatrixBase<float>::Write(v8, a2, a3, a4);
  uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1);
  kaldi::CuMatrixBase<float>::Write(v9, a2, a3, a4);
  if (a1[208])
  {
    uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v10, a2, a3, a4);
  }
  uint64_t v11 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::Write(v11, a2, a3, v12, v13);
  if (a1[224])
  {
    uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v14, a2, a3, a4);
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteData(void *a1, void *a2, uint64_t a3, int a4)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NumParams(uint64_t a1)
{
  int v2 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20);
  int v3 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 16) * v2;
  int v4 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20);
  int v5 = v3 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 16) * v4;
  uint64_t v6 = (v5 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16));
  if (*(unsigned char *)(a1 + 208))
  {
    int v7 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20);
    uint64_t v6 = (v6
                      + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 16)
                      * v7);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    int v8 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20);
    return (v6
                        + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 16)
                        * v8);
  }
  return v6;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NumParams((uint64_t)a1 + *(void *)(*a1 - 192));
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetParams(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  int v7 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 20);
  int v8 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 16) * v7;
  int v9 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 20);
  int v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 16);
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if (v8 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  int v12 = v11 * v9;
  uint64_t v42 = *(void **)a2;
  LODWORD(v43) = v8;
  BOOL v13 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v42, v13, v14, v15, v16);
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  int v17 = v12 + v8;
  if ((v12 + v8) > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  uint64_t v42 = (void *)(*(void *)a2 + 4 * v8);
  LODWORD(v43) = v12;
  uint64_t v18 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v42, v18, v19, v20, v21);
  if (a1[208])
  {
    int v22 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 20);
    int v23 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 16) * v22;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    int v24 = v23 + v17;
    if ((v23 + v17) > *(_DWORD *)(a2 + 8)) {
      goto LABEL_11;
    }
    uint64_t v42 = (void *)(*(void *)a2 + 4 * v17);
    LODWORD(v43) = v23;
    BOOL v25 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v42, v25, v26, v27, v28);
    int v17 = v24;
  }
  int v29 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16);
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if ((v29 + v17) > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  uint64_t v42 = (void *)(*(void *)a2 + 4 * v17);
  LODWORD(v43) = v29;
  uint64_t v30 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1);
  uint64_t result = kaldi::CuVectorBase<float>::CopyToVec<float>(v30, (uint64_t)&v42, v31, v32, v33);
  if (!a1[224]) {
    return result;
  }
  int v35 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16) + v17;
  int v36 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 20);
  int v37 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 16) * v36;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if ((v37 + v35) > *(_DWORD *)(a2 + 8)) {
LABEL_11:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v10);
  uint64_t v42 = (void *)(*(void *)a2 + 4 * v35);
  LODWORD(v43) = v37;
  int v38 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1);
  return kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v42, v38, v39, v40, v41);
}

_DWORD *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetParams((unsigned char *)a1 + *(void *)(*a1 - 200), a2);
}

int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetParams(unsigned char *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(unsigned char *))(*(void *)a1 + 208))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_1F8.size + 2, "wei_src.Dim() == NumParams()", v5);
  }
  int v6 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 20);
  int v7 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 16) * v6;
  int v8 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 20);
  int v9 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 16);
  uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if (v7 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  int v12 = v9 * v8;
  uint64_t v27 = *(char **)a2;
  LODWORD(v28) = v7;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v10, &v27);
  uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v14 = v12 + v7;
  if ((v12 + v7) > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  uint64_t v27 = (char *)(*(void *)a2 + 4 * v7);
  LODWORD(v28) = v12;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v13, &v27);
  if (a1[208])
  {
    int v15 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 20);
    int v16 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 16) * v15;
    uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    if ((v16 + v14) > *(_DWORD *)(a2 + 8)) {
      goto LABEL_12;
    }
    uint64_t v27 = (char *)(*(void *)a2 + 4 * v14);
    LODWORD(v28) = v16;
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v17, &v27);
    v14 += v16;
  }
  uint64_t v18 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1);
  int v21 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if ((v21 + v14) > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  uint64_t v27 = (char *)(*(void *)a2 + 4 * v14);
  LODWORD(v28) = v21;
  uint64_t result = kaldi::CuVectorBase<float>::CopyFromVec<float>(v18, (uint64_t)&v27, v19, v20, v11);
  if (!a1[224]) {
    return result;
  }
  int v23 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16) + v14;
  int v24 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 20);
  int v25 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 16) * v24;
  uint64_t v26 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if ((v25 + v23) > *(_DWORD *)(a2 + 8)) {
LABEL_12:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v11);
  uint64_t v27 = (char *)(*(void *)a2 + 4 * v23);
  LODWORD(v28) = v25;
  return kaldi::CuMatrixBase<float>::CopyRowsFromVec(v26, &v27);
}

int *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetParams((unsigned char *)a1 + *(void *)(*a1 - 208), a2);
}

float kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SumParams(uint64_t a1)
{
  uint64_t v2 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  float v7 = kaldi::CuMatrixBase<float>::Sum(v2, v3, v4, v5, v6);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  float v13 = v7 + kaldi::CuMatrixBase<float>::Sum(v8, v9, v10, v11, v12);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    float v13 = v13 + kaldi::CuMatrixBase<float>::Sum(v14, v15, v16, v17, v18);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    float v13 = v13 + kaldi::CuMatrixBase<float>::Sum(v19, v20, v21, v22, v23);
  }
  uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  double v25 = kaldi::CuVectorBase<float>::Sum(v24);
  return v13 + *(float *)&v25;
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SumParams((uint64_t)a1 + *(void *)(*a1 - 224));
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PerturbParams(uint64_t a1, float a2)
{
  uint64_t v4 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20);
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v33, v4, *(unsigned int *)(v5 + 16), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v33);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuMatrixBase<float>::AddMat(v6, (uint64_t)v33, 111, v7, v8, a2, 1.0);
  uint64_t v9 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20);
  uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::CuMatrix<float>::Resize((uint64_t)v33, v9, *(unsigned int *)(v10 + 16), 1u, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v33);
  uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::CuMatrixBase<float>::AddMat(v11, (uint64_t)v33, 111, v12, v13, a2, 1.0);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v14 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20);
    uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    kaldi::CuMatrix<float>::Resize((uint64_t)v33, v14, *(unsigned int *)(v15 + 16), 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v33);
    uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v16, (uint64_t)v33, 111, v17, v18, a2, 1.0);
  }
  uint64_t v19 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16);
  memset(&v32[1], 0, 24);
  v32[0] = off_262E60;
  kaldi::CuVector<float>::Resize((uint64_t)v32, v19, 1u, v20, v21);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v32);
  uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::CuVectorBase<float>::AddVec(v22, (uint64_t)v32, v23, v24, v25, a2, 1.0);
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v26 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20);
    uint64_t v27 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::CuMatrix<float>::Resize((uint64_t)v33, v26, *(unsigned int *)(v27 + 16), 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v33);
    uint64_t v28 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v28, (uint64_t)v33, 111, v29, v30, a2, 1.0);
  }
  kaldi::CuVector<float>::~CuVector(v32);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v33);
}

void sub_154BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PerturbParams(void *a1, float a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PerturbParams((uint64_t)a1 + *(void *)(*a1 - 232), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetGradient(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (const void *)(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 136))(a1);
  if (v8) {
  else
  }
    uint64_t v9 = 0;
  (*(void (**)(void *, uint64_t, uint64_t, void, void))(*(void *)v9 + 336))(v9, a2, a3, 0, 0);
  uint64_t v10 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v10, 0, v11, v12);
  int v13 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 20);
  int v14 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 16) * v13;
  int v15 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 20);
  int v17 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 16);
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  if (v14 > *(_DWORD *)(a4 + 8)) {
    goto LABEL_14;
  }
  uint64_t v50 = *(char **)a4;
  LODWORD(v51) = v14;
  uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient((uint64_t)v9, 0);
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v47, v18, 111, v19, v20);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v50, (kaldi::ContextDependency *)&v47);
  int v21 = v17 * v15;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v47);
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  int v22 = v21 + v14;
  if ((v21 + v14) > *(_DWORD *)(a4 + 8)) {
    goto LABEL_14;
  }
  uint64_t v47 = *(void *)a4 + 4 * v14;
  LODWORD(v48) = v21;
  uint64_t v23 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient((uint64_t)v9, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v47, v23, v24, v25, v26);
  if (a1[208])
  {
    int v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 20);
    int v28 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 16) * v27;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v29 = v28 + v22;
    if ((v28 + v22) > *(_DWORD *)(a4 + 8)) {
      goto LABEL_14;
    }
    uint64_t v47 = *(void *)a4 + 4 * v22;
    LODWORD(v48) = v28;
    uint64_t v30 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v47, v30, v31, v32, v33);
    int v22 = v29;
  }
  int v34 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16);
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  if ((v34 + v22) > *(_DWORD *)(a4 + 8)) {
LABEL_14:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v16);
  uint64_t v47 = *(void *)a4 + 4 * v22;
  LODWORD(v48) = v34;
  int v35 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient((uint64_t)v9, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v35, (uint64_t)&v47, v36, v37, v38);
  if (a1[224])
  {
    int v39 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16) + v22;
    int v40 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 20);
    int v41 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 16)
        * v40;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    if ((v41 + v39) <= *(_DWORD *)(a4 + 8))
    {
      uint64_t v47 = *(void *)a4 + 4 * v39;
      LODWORD(v48) = v41;
      uint64_t v42 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient((uint64_t)v9, 0);
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v47, v42, v43, v44, v45);
      return (*(uint64_t (**)(void *))(*(void *)v9 + 8))(v9);
    }
    goto LABEL_14;
  }
  return (*(uint64_t (**)(void *))(*(void *)v9 + 8))(v9);
}

void sub_154F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetGradient(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetGradient((unsigned char *)a1 + *(void *)(*a1 - 240), a2, a3, a4);
}

float kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(void *a1, int a2)
{
  uint64_t v2 = (float *)((char *)a1 + *(void *)(*a1 - 24));
  if (!*((unsigned char *)v2 + 84)) {
    return v2[14];
  }
  uint64_t v3 = a1[63];
  unint64_t v4 = a1[64] - v3;
  if (!v4) {
    return NAN;
  }
  unint64_t v5 = v4 >> 2;
  if ((int)v5 <= a2) {
    return NAN;
  }
  int v6 = v5 - 1;
  if (a2 >= 0) {
    int v6 = a2;
  }
  return *(float *)(v3 + 4 * v6);
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(void *a1, int a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate((void *)((char *)a1 + *(void *)(*a1 - 216)), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Info(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v50);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 192))(a1, v50, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Input weights:", 16);
  uint64_t v3 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::nnet1::MomentStatistics<float>(v3);
  if ((v49 & 0x80u) == 0) {
    unint64_t v4 = v48;
  }
  else {
    unint64_t v4 = (void **)v48[0];
  }
  if ((v49 & 0x80u) == 0) {
    uint64_t v5 = v49;
  }
  else {
    uint64_t v5 = (uint64_t)v48[1];
  }
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n Recurrent weights:", 20);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::nnet1::MomentStatistics<float>(v8);
  if ((v47 & 0x80u) == 0) {
    uint64_t v9 = v46;
  }
  else {
    uint64_t v9 = (void **)v46[0];
  }
  if ((v47 & 0x80u) == 0) {
    uint64_t v10 = v47;
  }
  else {
    uint64_t v10 = (uint64_t)v46[1];
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n Bias:", 7);
  int v13 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::nnet1::MomentStatistics<float>(v13, v14, v15, v16, v17);
  if ((v45 & 0x80u) == 0) {
    uint64_t v18 = v44;
  }
  else {
    uint64_t v18 = (void **)v44[0];
  }
  if ((v45 & 0x80u) == 0) {
    uint64_t v19 = v45;
  }
  else {
    uint64_t v19 = (uint64_t)v44[1];
  }
  uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v18, v19);
  int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n Forget gate bias:", 19);
  uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::CuSubVector<float>::CuSubVector(&v39, v22, *(_DWORD *)(a1 + 176), *(_DWORD *)(a1 + 176), v23);
  kaldi::nnet1::MomentStatistics<float>(&v39, v24, v25, v26, v27);
  if ((v43 & 0x80u) == 0) {
    int v28 = __p;
  }
  else {
    int v28 = (void **)__p[0];
  }
  if ((v43 & 0x80u) == 0) {
    uint64_t v29 = v43;
  }
  else {
    uint64_t v29 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v28, v29);
  if ((char)v43 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v45 < 0) {
    operator delete(v44[0]);
  }
  if ((char)v47 < 0) {
    operator delete(v46[0]);
  }
  if ((char)v49 < 0) {
    operator delete(v48[0]);
  }
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Peephole weights:", 19);
    uint64_t v31 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v31);
    uint64_t v32 = (v41 & 0x80u) == 0 ? &v39 : (void **)v39;
    uint64_t v33 = (v41 & 0x80u) == 0 ? v41 : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
    if ((char)v41 < 0) {
      operator delete(v39);
    }
  }
  if (*(unsigned char *)(a1 + 224))
  {
    int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Projection weights:", 21);
    uint64_t v35 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v35);
    uint64_t v36 = (v41 & 0x80u) == 0 ? &v39 : (void **)v39;
    uint64_t v37 = (v41 & 0x80u) == 0 ? v41 : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
    if ((char)v41 < 0) {
      operator delete(v39);
    }
  }
  std::stringbuf::str();
  if (v51 < 0) {
    operator delete((void *)v50[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1557C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Info(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Info((uint64_t)a1 + *(void *)(*a1 - 80));
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 528))
  {
    memset(&v105, 0, sizeof(v105));
    int v104 = 0;
    if (*(int *)(a1 + 80) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v92, "\n For batch ");
        kaldi::nnet1::ToString<int>();
        if ((v91 & 0x80u) == 0) {
          uint64_t v3 = v90;
        }
        else {
          uint64_t v3 = (void **)v90[0];
        }
        if ((v91 & 0x80u) == 0) {
          std::string::size_type v4 = v91;
        }
        else {
          std::string::size_type v4 = (std::string::size_type)v90[1];
        }
        uint64_t v5 = std::string::append(&v92, (const std::string::value_type *)v3, v4);
        long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v88, ": ");
        if ((v89 & 0x80u) == 0) {
          uint64_t v7 = v88;
        }
        else {
          uint64_t v7 = (void **)v88[0];
        }
        if ((v89 & 0x80u) == 0) {
          std::string::size_type v8 = v89;
        }
        else {
          std::string::size_type v8 = (std::string::size_type)v88[1];
        }
        uint64_t v9 = std::string::append(&v93, (const std::string::value_type *)v7, v8);
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v86, "\n  Number of cells : ");
        if ((v87 & 0x80u) == 0) {
          uint64_t v11 = v86;
        }
        else {
          uint64_t v11 = (void **)v86[0];
        }
        if ((v87 & 0x80u) == 0) {
          std::string::size_type v12 = v87;
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v86[1];
        }
        int v13 = std::string::append(&v94, (const std::string::value_type *)v11, v12);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::ToString<int>();
        if ((v85 & 0x80u) == 0) {
          uint64_t v15 = v84;
        }
        else {
          uint64_t v15 = (void **)v84[0];
        }
        if ((v85 & 0x80u) == 0) {
          std::string::size_type v16 = v85;
        }
        else {
          std::string::size_type v16 = (std::string::size_type)v84[1];
        }
        int v17 = std::string::append(&v95, (const std::string::value_type *)v15, v16);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v82, "\n  Input weights gradient: ");
        if ((v83 & 0x80u) == 0) {
          uint64_t v19 = v82;
        }
        else {
          uint64_t v19 = (void **)v82[0];
        }
        if ((v83 & 0x80u) == 0) {
          std::string::size_type v20 = v83;
        }
        else {
          std::string::size_type v20 = (std::string::size_type)v82[1];
        }
        int v21 = std::string::append(&v96, (const std::string::value_type *)v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v23);
        if ((v81 & 0x80u) == 0) {
          uint64_t v24 = v80;
        }
        else {
          uint64_t v24 = (void **)v80[0];
        }
        if ((v81 & 0x80u) == 0) {
          std::string::size_type v25 = v81;
        }
        else {
          std::string::size_type v25 = (std::string::size_type)v80[1];
        }
        uint64_t v26 = std::string::append(&v97, (const std::string::value_type *)v24, v25);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v78, "\n  Recurrent weights gradient: ");
        if ((v79 & 0x80u) == 0) {
          int v28 = v78;
        }
        else {
          int v28 = (void **)v78[0];
        }
        if ((v79 & 0x80u) == 0) {
          std::string::size_type v29 = v79;
        }
        else {
          std::string::size_type v29 = (std::string::size_type)v78[1];
        }
        uint64_t v30 = std::string::append(&v98, (const std::string::value_type *)v28, v29);
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v99.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        uint64_t v32 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v32);
        if ((v77 & 0x80u) == 0) {
          uint64_t v33 = v76;
        }
        else {
          uint64_t v33 = (void **)v76[0];
        }
        if ((v77 & 0x80u) == 0) {
          std::string::size_type v34 = v77;
        }
        else {
          std::string::size_type v34 = (std::string::size_type)v76[1];
        }
        uint64_t v35 = std::string::append(&v99, (const std::string::value_type *)v33, v34);
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v74, "\n  Bias gradient: ");
        if ((v75 & 0x80u) == 0) {
          uint64_t v37 = v74;
        }
        else {
          uint64_t v37 = (void **)v74[0];
        }
        if ((v75 & 0x80u) == 0) {
          std::string::size_type v38 = v75;
        }
        else {
          std::string::size_type v38 = (std::string::size_type)v74[1];
        }
        int v39 = std::string::append(&v100, (const std::string::value_type *)v37, v38);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v101.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        unsigned __int8 v41 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v41, v42, v43, v44, v45);
        if ((v73 & 0x80u) == 0) {
          uint64_t v46 = __p;
        }
        else {
          uint64_t v46 = (void **)__p[0];
        }
        if ((v73 & 0x80u) == 0) {
          std::string::size_type v47 = v73;
        }
        else {
          std::string::size_type v47 = (std::string::size_type)__p[1];
        }
        uint64_t v48 = std::string::append(&v101, (const std::string::value_type *)v46, v47);
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        int64_t v103 = v48->__r_.__value_.__r.__words[2];
        long long v102 = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if (v103 >= 0) {
          uint64_t v50 = (const std::string::value_type *)&v102;
        }
        else {
          uint64_t v50 = (const std::string::value_type *)v102;
        }
        if (v103 >= 0) {
          std::string::size_type v51 = HIBYTE(v103);
        }
        else {
          std::string::size_type v51 = *((void *)&v102 + 1);
        }
        std::string::append(&v105, v50, v51);
        if (SHIBYTE(v103) < 0) {
          operator delete((void *)v102);
        }
        if ((char)v73 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        if ((char)v75 < 0) {
          operator delete(v74[0]);
        }
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
        if ((char)v77 < 0) {
          operator delete(v76[0]);
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        if ((char)v79 < 0) {
          operator delete(v78[0]);
        }
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v98.__r_.__value_.__l.__data_);
        }
        if ((char)v81 < 0) {
          operator delete(v80[0]);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((char)v83 < 0) {
          operator delete(v82[0]);
        }
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v96.__r_.__value_.__l.__data_);
        }
        if ((char)v85 < 0) {
          operator delete(v84[0]);
        }
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v95.__r_.__value_.__l.__data_);
        }
        if ((char)v87 < 0) {
          operator delete(v86[0]);
        }
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
        if ((char)v89 < 0) {
          operator delete(v88[0]);
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if ((char)v91 < 0) {
          operator delete(v90[0]);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if (*(unsigned char *)(a1 + 208))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Peephole weights gradient: ");
          uint64_t v52 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v52);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            float v53 = &v100;
          }
          else {
            float v53 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v100.__r_.__value_.__l.__size_;
          }
          uint64_t v55 = std::string::append(&v101, (const std::string::value_type *)v53, size);
          long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          int64_t v103 = v55->__r_.__value_.__r.__words[2];
          long long v102 = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0) {
            uint64_t v57 = (const std::string::value_type *)&v102;
          }
          else {
            uint64_t v57 = (const std::string::value_type *)v102;
          }
          if (v103 >= 0) {
            std::string::size_type v58 = HIBYTE(v103);
          }
          else {
            std::string::size_type v58 = *((void *)&v102 + 1);
          }
          std::string::append(&v105, v57, v58);
          if (SHIBYTE(v103) < 0) {
            operator delete((void *)v102);
          }
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v101.__r_.__value_.__l.__data_);
          }
        }
        if (*(unsigned char *)(a1 + 224))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Projection weights gradient: ");
          uint64_t v59 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v59);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v60 = &v100;
          }
          else {
            uint64_t v60 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v61 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v61 = v100.__r_.__value_.__l.__size_;
          }
          uint64_t v62 = std::string::append(&v101, (const std::string::value_type *)v60, v61);
          long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          int64_t v103 = v62->__r_.__value_.__r.__words[2];
          long long v102 = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0) {
            long long v64 = (const std::string::value_type *)&v102;
          }
          else {
            long long v64 = (const std::string::value_type *)v102;
          }
          if (v103 >= 0) {
            std::string::size_type v65 = HIBYTE(v103);
          }
          else {
            std::string::size_type v65 = *((void *)&v102 + 1);
          }
          std::string::append(&v105, v64, v65);
          if (SHIBYTE(v103) < 0) {
            operator delete((void *)v102);
          }
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v101.__r_.__value_.__l.__data_);
          }
        }
        ++v104;
      }
      while (v104 < *(_DWORD *)(a1 + 80));
    }
    std::string v66 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v102, "\n");
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v67 = &v105;
    }
    else {
      int v67 = (std::string *)v105.__r_.__value_.__r.__words[0];
    }
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v68 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v68 = v105.__r_.__value_.__l.__size_;
    }
    int v69 = std::string::insert(v66, 0, (const std::string::value_type *)v67, v68);
    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v69->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v103) < 0) {
      operator delete((void *)v102);
    }
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v105.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_155FB8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoGradient(void *a1@<X0>, void *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v89, 0, sizeof(v89));
  int v88 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v75 & 0x80u) == 0) {
        uint64_t v3 = v74;
      }
      else {
        uint64_t v3 = (void **)v74[0];
      }
      if ((v75 & 0x80u) == 0) {
        std::string::size_type v4 = v75;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v74[1];
      }
      uint64_t v5 = std::string::append(&v76, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v72, ": ");
      if ((v73 & 0x80u) == 0) {
        uint64_t v7 = v72;
      }
      else {
        uint64_t v7 = (void **)v72[0];
      }
      if ((v73 & 0x80u) == 0) {
        std::string::size_type v8 = v73;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v72[1];
      }
      uint64_t v9 = std::string::append(&v77, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v70, "\n  Gates values: ");
      if ((v71 & 0x80u) == 0) {
        uint64_t v11 = v70;
      }
      else {
        uint64_t v11 = (void **)v70[0];
      }
      if ((v71 & 0x80u) == 0) {
        std::string::size_type v12 = v71;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v70[1];
      }
      int v13 = std::string::append(&v78, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 248) + 48 * v88);
      if ((v69 & 0x80u) == 0) {
        uint64_t v15 = v68;
      }
      else {
        uint64_t v15 = (void **)v68[0];
      }
      if ((v69 & 0x80u) == 0) {
        std::string::size_type v16 = v69;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v68[1];
      }
      int v17 = std::string::append(&v79, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v66, "\n  Cell values: ");
      if ((v67 & 0x80u) == 0) {
        uint64_t v19 = v66;
      }
      else {
        uint64_t v19 = (void **)v66[0];
      }
      if ((v67 & 0x80u) == 0) {
        std::string::size_type v20 = v67;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v66[1];
      }
      int v21 = std::string::append(&v80, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 272) + 48 * v88);
      if ((v65 & 0x80u) == 0) {
        uint64_t v23 = v64;
      }
      else {
        uint64_t v23 = (void **)v64[0];
      }
      if ((v65 & 0x80u) == 0) {
        std::string::size_type v24 = v65;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v64[1];
      }
      std::string::size_type v25 = std::string::append(&v81, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v62, "\n  Cell outputs: ");
      if ((v63 & 0x80u) == 0) {
        long long v27 = v62;
      }
      else {
        long long v27 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v28 = v63;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v62[1];
      }
      std::string::size_type v29 = std::string::append(&v82, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 296) + 48 * v88);
      if ((v61 & 0x80u) == 0) {
        long long v31 = v60;
      }
      else {
        long long v31 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v32 = v61;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)v60[1];
      }
      uint64_t v33 = std::string::append(&v83, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Cell outputs gated: ");
      if ((v59 & 0x80u) == 0) {
        uint64_t v35 = v58;
      }
      else {
        uint64_t v35 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v36 = v59;
      }
      else {
        std::string::size_type v36 = (std::string::size_type)v58[1];
      }
      uint64_t v37 = std::string::append(&v84, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 320) + 48 * v88);
      if ((v57 & 0x80u) == 0) {
        int v39 = __p;
      }
      else {
        int v39 = (void **)__p[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v40 = v57;
      }
      else {
        std::string::size_type v40 = (std::string::size_type)__p[1];
      }
      unsigned __int8 v41 = std::string::append(&v85, (const std::string::value_type *)v39, v40);
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      int64_t v87 = v41->__r_.__value_.__r.__words[2];
      long long v86 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (v87 >= 0) {
        uint64_t v43 = (const std::string::value_type *)&v86;
      }
      else {
        uint64_t v43 = (const std::string::value_type *)v86;
      }
      if (v87 >= 0) {
        std::string::size_type v44 = HIBYTE(v87);
      }
      else {
        std::string::size_type v44 = *((void *)&v86 + 1);
      }
      std::string::append(&v89, v43, v44);
      if (SHIBYTE(v87) < 0) {
        operator delete((void *)v86);
      }
      if ((char)v57 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v83.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      if ((char)v65 < 0) {
        operator delete(v64[0]);
      }
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
      if ((char)v67 < 0) {
        operator delete(v66[0]);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      if ((char)v69 < 0) {
        operator delete(v68[0]);
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if ((char)v71 < 0) {
        operator delete(v70[0]);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      if ((char)v73 < 0) {
        operator delete(v72[0]);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if ((char)v75 < 0) {
        operator delete(v74[0]);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "\n  Output values: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 344) + 48 * v88);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v45 = &v84;
        }
        else {
          unsigned __int8 v45 = (std::string *)v84.__r_.__value_.__r.__words[0];
        }
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v84.__r_.__value_.__l.__size_;
        }
        std::string::size_type v47 = std::string::append(&v85, (const std::string::value_type *)v45, size);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        int64_t v87 = v47->__r_.__value_.__r.__words[2];
        long long v86 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (v87 >= 0) {
          long long v49 = (const std::string::value_type *)&v86;
        }
        else {
          long long v49 = (const std::string::value_type *)v86;
        }
        if (v87 >= 0) {
          std::string::size_type v50 = HIBYTE(v87);
        }
        else {
          std::string::size_type v50 = *((void *)&v86 + 1);
        }
        std::string::append(&v89, v49, v50);
        if (SHIBYTE(v87) < 0) {
          operator delete((void *)v86);
        }
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
      }
      ++v88;
    }
    while (v88 < *(_DWORD *)(a1 + 80));
  }
  std::string::size_type v51 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v86, "\n");
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v52 = &v89;
  }
  else {
    uint64_t v52 = (std::string *)v89.__r_.__value_.__r.__words[0];
  }
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v53 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v53 = v89.__r_.__value_.__l.__size_;
  }
  uint64_t v54 = std::string::insert(v51, 0, (const std::string::value_type *)v52, v53);
  *a2 = *v54;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v87) < 0) {
    operator delete((void *)v86);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
}

void sub_156898(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_156AA4()
{
}

void sub_156AAC()
{
}

void sub_156AB4()
{
}

void sub_156ABC()
{
}

void sub_156AC4()
{
}

void sub_156ACC()
{
}

void sub_156AD4()
{
}

void sub_156ADC()
{
}

void sub_156AE4()
{
}

void sub_156AEC()
{
}

void sub_156AF4()
{
}

void sub_156AFC()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoBackPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v75, 0, sizeof(v75));
  int v74 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v64, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v63 & 0x80u) == 0) {
        uint64_t v3 = v62;
      }
      else {
        uint64_t v3 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v4 = v63;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v62[1];
      }
      uint64_t v5 = std::string::append(&v64, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v60, ": ");
      if ((v61 & 0x80u) == 0) {
        uint64_t v7 = v60;
      }
      else {
        uint64_t v7 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v8 = v61;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v60[1];
      }
      uint64_t v9 = std::string::append(&v65, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Gates diff: ");
      if ((v59 & 0x80u) == 0) {
        uint64_t v11 = v58;
      }
      else {
        uint64_t v11 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v12 = v59;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v58[1];
      }
      int v13 = std::string::append(&v66, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 440) + 48 * v74);
      if ((v57 & 0x80u) == 0) {
        uint64_t v15 = v56;
      }
      else {
        uint64_t v15 = (void **)v56[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v16 = v57;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v56[1];
      }
      int v17 = std::string::append(&v67, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, "\n  Cell diff: ");
      if ((v55 & 0x80u) == 0) {
        uint64_t v19 = v54;
      }
      else {
        uint64_t v19 = (void **)v54[0];
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v20 = v55;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v54[1];
      }
      int v21 = std::string::append(&v68, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 416) + 48 * v74);
      if ((v53 & 0x80u) == 0) {
        uint64_t v23 = v52;
      }
      else {
        uint64_t v23 = (void **)v52[0];
      }
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v24 = v53;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v52[1];
      }
      std::string::size_type v25 = std::string::append(&v69, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v50, "\n  Cell out gated diff: ");
      if ((v51 & 0x80u) == 0) {
        long long v27 = v50;
      }
      else {
        long long v27 = (void **)v50[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v28 = v51;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v50[1];
      }
      std::string::size_type v29 = std::string::append(&v70, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 392) + 48 * v74);
      if ((v49 & 0x80u) == 0) {
        long long v31 = __p;
      }
      else {
        long long v31 = (void **)__p[0];
      }
      if ((v49 & 0x80u) == 0) {
        std::string::size_type v32 = v49;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)__p[1];
      }
      uint64_t v33 = std::string::append(&v71, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      int64_t v73 = v33->__r_.__value_.__r.__words[2];
      long long v72 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v73 >= 0) {
        uint64_t v35 = (const std::string::value_type *)&v72;
      }
      else {
        uint64_t v35 = (const std::string::value_type *)v72;
      }
      if (v73 >= 0) {
        std::string::size_type v36 = HIBYTE(v73);
      }
      else {
        std::string::size_type v36 = *((void *)&v72 + 1);
      }
      std::string::append(&v75, v35, v36);
      if (SHIBYTE(v73) < 0) {
        operator delete((void *)v72);
      }
      if ((char)v49 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if ((char)v51 < 0) {
        operator delete(v50[0]);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if ((char)v53 < 0) {
        operator delete(v52[0]);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if ((char)v55 < 0) {
        operator delete(v54[0]);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if ((char)v57 < 0) {
        operator delete(v56[0]);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v71, "\n  Output diff: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 368) + 48 * v74);
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v70;
        }
        else {
          uint64_t v37 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v70.__r_.__value_.__l.__size_;
        }
        int v39 = std::string::append(&v71, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        int64_t v73 = v39->__r_.__value_.__r.__words[2];
        long long v72 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v73 >= 0) {
          unsigned __int8 v41 = (const std::string::value_type *)&v72;
        }
        else {
          unsigned __int8 v41 = (const std::string::value_type *)v72;
        }
        if (v73 >= 0) {
          std::string::size_type v42 = HIBYTE(v73);
        }
        else {
          std::string::size_type v42 = *((void *)&v72 + 1);
        }
        std::string::append(&v75, v41, v42);
        if (SHIBYTE(v73) < 0) {
          operator delete((void *)v72);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
      }
      ++v74;
    }
    while (v74 < *(_DWORD *)(a1 + 80));
  }
  uint64_t v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v72, "\n");
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = &v75;
  }
  else {
    std::string::size_type v44 = (std::string *)v75.__r_.__value_.__r.__words[0];
  }
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v45 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v45 = v75.__r_.__value_.__l.__size_;
  }
  uint64_t v46 = std::string::insert(v43, 0, (const std::string::value_type *)v44, v45);
  *a2 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)v72);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
}

void sub_157088(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_157254()
{
}

void sub_15725C()
{
}

void sub_157264()
{
}

void sub_15726C()
{
}

void sub_157274()
{
}

void sub_15727C()
{
}

void sub_157284()
{
}

void sub_15728C()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoBackPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

double kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a2 + 20);
  uint64_t v6 = *(unsigned int *)(a1 + 96);
  int v81 = (int)v5 / (int)v6;
  if ((int)v5 % (int)v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_298.addr + 3, "batch_size % num_utts == 0", a5);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v108, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 701, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v108, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    std::string::size_type v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v108);
  }
  uint64_t v14 = *(void *)(a3 + 32);
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateForwardBuffers(a1, a4, v5, v14);
  uint64_t v16 = *(void *)(a1 + 104);
  uint64_t v17 = a4;
  uint64_t v83 = a4;
  int v78 = a4;
  if (*(void *)(a1 + 112) == v16)
  {
    int v79 = 0;
  }
  else
  {
    int v18 = *(_DWORD *)(v16 + 32 * a4 + 16);
    if (v18 < 1)
    {
      int v79 = 0;
      uint64_t v17 = a4;
    }
    else
    {
      if (v18 != v5) {
        kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_298.size + 5, "boundary_[batch_index].Dim() == batch_size", v15);
      }
      uint64_t v17 = a4;
      uint64_t v19 = *(void *)(a1 + 128) + 48 * a4;
      *(void *)(v19 + 32) = v14;
      int v79 = 1;
      kaldi::CuMatrix<float>::Resize(v19, v6, *(unsigned int *)(*(void *)(a1 + 8) + 48 * a4 + 16), 1u, 0);
    }
  }
  uint64_t v20 = *(void *)(a1 + 248) + 48 * v17;
  uint64_t v82 = *(void *)(a1 + 344) + 48 * v17;
  uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuMatrixBase<float>::AddMatMat(v20, a2, CblasNoTrans, v21, &stru_68.sectname[8], 1.0, 0.0);
  uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::CuMatrixBase<float>::AddVecToRows(v20, v22, v23, v24, v25, 1.0, 1.0);
  if (v81 >= 1)
  {
    int v28 = v17;
    int v29 = 0;
    int v30 = 0;
    uint64_t v80 = a1 + 12;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v108, v20, v29, v6, 0, *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v105, v20, v29, v6, (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v102, v20, v29, v6, (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      uint64_t v31 = *(void *)(a1 + 272) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v99, v31, v29, v6, 0, *(_DWORD *)(v31 + 16));
      memset(v98, 0, sizeof(v98));
      std::string v97 = off_262D80;
      memset(v96, 0, sizeof(v96));
      std::string v95 = off_262D80;
      if (v30)
      {
        if (v79)
        {
          kaldi::CuMatrixBase<float>::SetZero(*(void *)(a1 + 128) + 48 * (int)v83);
          uint64_t v32 = *(void *)(a1 + 128) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v32, 0, *(_DWORD *)(v32 + 20), 0, *(_DWORD *)(a1 + 176));
          v96[0] = v94[0];
          *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
          v96[3] = v94[3];
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
          uint64_t v33 = *(void *)(a1 + 272) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v33, v29 - v6, v6, 0, *(_DWORD *)(v33 + 16));
          kaldi::CuSubVector<float>::CuSubVector(&v90, *(void *)(a1 + 104) + 32 * v83, v29, v6, v34);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v95, (uint64_t)&v93, (uint64_t)&v90, 1, v35);
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
          uint64_t v36 = *(void *)(a1 + 128) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v36, 0, *(_DWORD *)(v36 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v80 + *(void *)(*(void *)a1 - 24)));
          *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
          v98[0] = v94[0];
          v98[3] = v94[3];
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v82, v29 - v6, v6, 0, *(_DWORD *)(v82 + 16));
          int v28 = v83;
          kaldi::CuSubVector<float>::CuSubVector(&v90, *(void *)(a1 + 104) + 32 * v83, v29, v6, v37);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v97, (uint64_t)&v93, (uint64_t)&v90, 1, v38);
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
        }
        else
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v82, v29 - v6, v6, 0, *(_DWORD *)(v82 + 16));
          *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
          v98[0] = v94[0];
          v98[3] = v94[3];
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
          uint64_t v41 = *(void *)(a1 + 272) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v41, v29 - v6, v6, 0, *(_DWORD *)(v41 + 16));
          v96[0] = v94[0];
          *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
          v96[3] = v94[3];
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
          int v28 = v83;
        }
      }
      else
      {
        int v28 = v83;
        uint64_t v39 = *(void *)(a1 + 8) + 48 * (int)v83;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v39, 0, *(_DWORD *)(v39 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v80 + *(void *)(*(void *)a1 - 24)));
        *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
        v98[0] = v94[0];
        v98[3] = v94[3];
        std::string v93 = off_262D80;
        memset(v94, 0, sizeof(v94));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
        uint64_t v40 = *(void *)(a1 + 8) + 48 * (int)v83;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v40, 0, *(_DWORD *)(v40 + 20), 0, *(_DWORD *)(a1 + 176));
        v96[0] = v94[0];
        *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
        v96[3] = v94[3];
        std::string v93 = off_262D80;
        memset(v94, 0, sizeof(v94));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v20, v29, v6, 0, *(_DWORD *)(v20 + 16));
      uint64_t v42 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v93, (uint64_t)&v97, CblasNoTrans, v42, &stru_68.sectname[8], 1.0, 1.0);
      std::string v93 = off_262D80;
      memset(v94, 0, sizeof(v94));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v46 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v46 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v47);
        }
        unsigned int v48 = *(_DWORD *)(v46 + 16);
        uint64_t v49 = *(void *)(v46 + 32);
        v94[0] = *(void *)(v46 + 8);
        std::string v93 = &off_262E20;
        v94[1] = v48;
        v94[2] = v49;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v108, (uint64_t)&v95, 111, (uint64_t)&v93, v47, 1.0, 1.0);
        uint64_t v50 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v50 + 20) <= 1u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v51);
        }
        unsigned int v52 = *(_DWORD *)(v50 + 16);
        uint64_t v53 = *(void *)(v50 + 32);
        v94[0] = *(void *)(v50 + 8) + 4 * *(int *)(v50 + 24);
        std::string v93 = &off_262E20;
        v94[1] = v52;
        v94[2] = v53;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v105, (uint64_t)&v95, 111, (uint64_t)&v93, v51, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid(&v108, &v108, v43, v44, v45);
      kaldi::CuMatrixBase<float>::Sigmoid(&v105, &v105, v54, v55, v56);
      kaldi::CuMatrixBase<float>::ApplyTanh((uint64_t)&v102, v57, v58, v59, v60);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v99, (uint64_t)&v108, 111, (uint64_t)&v102, &stru_68.sectname[7], 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v99, (uint64_t)&v105, 111, (uint64_t)&v95, &stru_68.sectname[7], 1.0, 1.0);
      float v61 = *(float *)(a1 + 476);
      if (v61 > 0.0)
      {
        kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)&v99, v61);
        kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v99, -*(float *)(a1 + 476));
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v20, v29, v6, (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v65 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v65 + 20) <= 2u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v66);
        }
        unsigned int v67 = *(_DWORD *)(v65 + 16);
        uint64_t v68 = *(void *)(v65 + 32);
        *(void *)&long long v91 = *(void *)(v65 + 8) + 8 * *(int *)(v65 + 24);
        uint64_t v90 = &off_262E20;
        *((void *)&v91 + 1) = v67;
        *(void *)&long long v92 = v68;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v93, (uint64_t)&v99, 111, (uint64_t)&v90, v66, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid(&v93, &v93, v62, v63, v64);
      uint64_t v69 = *(void *)(a1 + 296) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v90, v69, v29, v6, 0, *(_DWORD *)(v69 + 16));
      kaldi::CuMatrixBase<float>::Tanh(&v90, &v99, v70, v71, v72);
      uint64_t v73 = *(void *)(a1 + 320) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, v73, v29, v6, 0, *(_DWORD *)(v73 + 16));
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v87, (uint64_t)&v93, 111, (uint64_t)&v90, &stru_68.sectname[7], 1.0, 0.0);
      if (*(unsigned char *)(a1 + 224))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v84, v82, v29, v6, 0, *(_DWORD *)(v82 + 16));
        uint64_t v74 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
        kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v84, (uint64_t)&v87, CblasNoTrans, v74, &stru_68.sectname[8], 1.0, 0.0);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v84, v82, v29, v6, 0, *(_DWORD *)(v82 + 16));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v84, (uint64_t)&v87, 111, v75, v76);
      }
      std::string v84 = off_262D80;
      long long v85 = 0u;
      long long v86 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v84);
      int64_t v87 = off_262D80;
      long long v88 = 0u;
      long long v89 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v87);
      uint64_t v90 = off_262D80;
      long long v91 = 0u;
      long long v92 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v90);
      std::string v93 = off_262D80;
      memset(v94, 0, sizeof(v94));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
      std::string v95 = off_262D80;
      memset(v96, 0, sizeof(v96));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v95);
      std::string v97 = off_262D80;
      memset(v98, 0, sizeof(v98));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v97);
      std::string v99 = off_262D80;
      long long v100 = 0u;
      long long v101 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v99);
      long long v102 = off_262D80;
      long long v103 = 0u;
      long long v104 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v102);
      std::string v105 = off_262D80;
      long long v106 = 0u;
      long long v107 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v105);
      long long v108 = off_262D80;
      long long v109 = 0u;
      long long v110 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v108);
      ++v30;
      v29 += v6;
    }
    while (v81 != v30);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, v82, 111, v26, v27);
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SaveLastState(a1, v78);
}

void sub_158040(_Unwind_Exception *a1)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateForwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateForwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1397, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    std::string::size_type v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 248) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 272) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 296) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 320) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 344) + 48 * a2, a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  *(void *)(*(void *)(a1 + 248) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 272) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 296) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 320) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 344) + 48 * a2 + 32) = a4;
}

void sub_158510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SaveLastState(uint64_t a1, int a2)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16, "SaveLastState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1700, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Saving last output and cell state for batch ", 44);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16);
  }
  int v4 = *(_DWORD *)(*(void *)(a1 + 272) + 48 * a2 + 20) - *(_DWORD *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 8) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, v5, 0, *(_DWORD *)(v5 + 20), 0, *(_DWORD *)(a1 + 176));
  uint64_t v6 = *(void *)(a1 + 272) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, v6, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(v6 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v7, v8);
  int v13 = off_262D80;
  long long v14 = 0u;
  long long v15 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v13);
  uint64_t v16 = off_262D80;
  long long v17 = 0u;
  long long v18 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v16);
  uint64_t v9 = 3 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, *(void *)(a1 + 8) + 16 * v9, 0, *(_DWORD *)(*(void *)(a1 + 8) + 16 * v9 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, *(void *)(a1 + 344) + 16 * v9, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(*(void *)(a1 + 344) + 16 * v9 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v10, v11);
  int v13 = off_262D80;
  long long v14 = 0u;
  long long v15 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v13);
  uint64_t v16 = off_262D80;
  long long v17 = 0u;
  long long v18 = 0u;
  *(void *)&double result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v16).n128_u64[0];
  return result;
}

void sub_158758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(), long long a10, long long a11, void (**a12)(), long long a13, long long a14)
{
  a9 = off_262D80;
  a10 = 0u;
  a11 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a9);
  a12 = off_262D80;
  a13 = 0u;
  a14 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a12);
  _Unwind_Resume(a1);
}

double virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 128), a2, a3, a4, a5);
}

double kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (*(_DWORD *)(a1 + 96) != 1) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_2E8.reloff, "ropts_.num_sequences == 1", v6);
  }
  uint64_t v7 = *(void *)(a3 + 24);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateForwardBuffers(a1, 0, 1, v7);
  uint64_t v9 = *(void *)(a1 + 104);
  if (*(void *)(a1 + 112) != v9)
  {
    int v10 = *(_DWORD *)(v9 + 16);
    if (v10 >= 1)
    {
      if (v10 != 1) {
        kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_2E8.nreloc + 1, "boundary_[0].Dim() == 1", v8);
      }
      uint64_t v11 = *(void *)(a1 + 128);
      *(void *)(v11 + 32) = v7;
      kaldi::CuMatrix<float>::Resize(v11, 1, *(unsigned int *)(*(void *)(a1 + 8) + 16), 1u, 0);
    }
  }
  uint64_t v12 = *(void *)(a1 + 248);
  uint64_t v120 = 0;
  uint64_t v121 = 0;
  uint64_t v119 = 0;
  uint64_t v13 = *(void *)(v12 + 8);
  uint64_t v118 = &off_262E20;
  uint64_t v119 = v13;
  LODWORD(v120) = *(_DWORD *)(v12 + 16);
  uint64_t v121 = *(void *)(v12 + 32);
  uint64_t v14 = *(void *)(a1 + 344);
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  uint64_t v115 = 0;
  uint64_t v15 = *(void *)(v14 + 8);
  uint64_t v114 = &off_262E20;
  uint64_t v115 = v15;
  LODWORD(v116) = *(_DWORD *)(v14 + 16);
  uint64_t v117 = *(void *)(v14 + 32);
  uint64_t v16 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v118, v16, CblasNoTrans, a2, v17, 1.0, 0.0);
  uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)&v118, v18, v19, v20, v21, 1.0, 1.0);
  unsigned int v23 = *(_DWORD *)(a1 + 176);
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  long long v110 = &off_262E20;
  uint64_t v111 = 0;
  if (v23 > v120) {
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)&stru_1A8.size + 4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v22);
  }
  uint64_t v111 = v119;
  LODWORD(v112) = v23;
  uint64_t v113 = v121;
  kaldi::CuSubVector<float>::CuSubVector(v109, (uint64_t)&v118, v23, v23, v22);
  kaldi::CuSubVector<float>::CuSubVector(v108, (uint64_t)&v118, 3 * *(_DWORD *)(a1 + 176), *(_DWORD *)(a1 + 176), v24);
  uint64_t v26 = *(void *)(a1 + 272);
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  uint64_t v105 = 0;
  uint64_t v27 = *(void *)(v26 + 8);
  long long v104 = &off_262E20;
  uint64_t v105 = v27;
  LODWORD(v106) = *(_DWORD *)(v26 + 16);
  uint64_t v107 = *(void *)(v26 + 32);
  uint64_t v28 = *(void *)(a1 + 8);
  if (!*(_DWORD *)(v28 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
  }
  uint64_t v29 = *(void *)(v28 + 8);
  unsigned int v30 = *(_DWORD *)(v28 + 16);
  uint64_t v31 = *(void *)(v28 + 32);
  uint64_t v100 = v29;
  std::string v99 = &off_262E20;
  uint64_t v101 = v30;
  uint64_t v102 = v31;
  kaldi::CuSubVector<float>::CuSubVector(v103, (uint64_t)&v99, *(_DWORD *)(a1 + 176), *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12), v25);
  uint64_t v33 = *(void *)(a1 + 8);
  if (!*(_DWORD *)(v33 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v32);
  }
  uint64_t v34 = *(void *)(v33 + 8);
  unsigned int v35 = *(_DWORD *)(v33 + 16);
  uint64_t v36 = *(void *)(v33 + 32);
  uint64_t v96 = v34;
  std::string v95 = &off_262E20;
  uint64_t v97 = v35;
  unsigned int v37 = *(_DWORD *)(a1 + 176);
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t v100 = 0;
  uint64_t v98 = v36;
  std::string v99 = &off_262E20;
  if (v37 > v35) {
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)&stru_1A8.size + 4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v32);
  }
  uint64_t v100 = v34;
  LODWORD(v101) = v37;
  uint64_t v102 = v36;
  long long v38 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v118, v38, CblasNoTrans, (uint64_t)v103, v39, 1.0, 1.0);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v43 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    if (!*(_DWORD *)(v43 + 20)) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v45);
    }
    unsigned int v46 = *(_DWORD *)(v43 + 16);
    uint64_t v47 = *(void *)(v43 + 32);
    uint64_t v96 = *(void *)(v43 + 8);
    std::string v95 = &off_262E20;
    uint64_t v97 = v46;
    uint64_t v98 = v47;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v110, (uint64_t)&v99, (uint64_t)&v95, v44, v45, 1.0, 1.0);
    uint64_t v48 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    if (*(_DWORD *)(v48 + 20) <= 1u) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v50);
    }
    unsigned int v51 = *(_DWORD *)(v48 + 16);
    uint64_t v52 = *(void *)(v48 + 32);
    uint64_t v96 = *(void *)(v48 + 8) + 4 * *(int *)(v48 + 24);
    std::string v95 = &off_262E20;
    uint64_t v97 = v51;
    uint64_t v98 = v52;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v109, (uint64_t)&v99, (uint64_t)&v95, v49, v50, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)&v110, (uint64_t)&v110, v40, v41, v42);
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)v109, (uint64_t)v109, v53, v54, v55);
  kaldi::CuVectorBase<float>::ApplyTanh((uint64_t)v108);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v104, (uint64_t)&v110, (uint64_t)v108, v56, v57, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v104, (uint64_t)&v99, (uint64_t)v109, v58, v59, 1.0, 1.0);
  float v61 = *(float *)(a1 + 476);
  if (v61 > 0.0)
  {
    kaldi::CuVectorBase<float>::ApplyCeiling((uint64_t)&v104, v61);
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)&v104, -*(float *)(a1 + 476));
  }
  kaldi::CuSubVector<float>::CuSubVector(&v95, (uint64_t)&v118, 2 * *(_DWORD *)(a1 + 176), *(_DWORD *)(a1 + 176), v60);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v65 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    if (*(_DWORD *)(v65 + 20) <= 2u) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v67);
    }
    unsigned int v68 = *(_DWORD *)(v65 + 16);
    uint64_t v69 = *(void *)(v65 + 32);
    uint64_t v92 = *(void *)(v65 + 8) + 8 * *(int *)(v65 + 24);
    long long v91 = &off_262E20;
    uint64_t v93 = v68;
    uint64_t v94 = v69;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v95, (uint64_t)&v104, (uint64_t)&v91, v66, v67, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)&v95, (uint64_t)&v95, v62, v63, v64);
  uint64_t v70 = *(void *)(a1 + 296);
  uint64_t v93 = 0;
  uint64_t v71 = *(void *)(v70 + 8);
  long long v91 = &off_262E20;
  uint64_t v92 = v71;
  LODWORD(v93) = *(_DWORD *)(v70 + 16);
  uint64_t v94 = *(void *)(v70 + 32);
  kaldi::CuVectorBase<float>::Tanh((uint64_t)&v91, (uint64_t)&v104, v72, v73, v74);
  uint64_t v75 = *(void *)(a1 + 320);
  uint64_t v89 = 0;
  uint64_t v76 = *(void *)(v75 + 8);
  v88[0] = &off_262E20;
  v88[1] = v76;
  LODWORD(v89) = *(_DWORD *)(v75 + 16);
  uint64_t v90 = *(void *)(v75 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v88, (uint64_t)&v95, (uint64_t)&v91, v77, v78, 1.0, 0.0);
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v82 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v114, v82, CblasNoTrans, (uint64_t)v88, v83, 1.0, 0.0);
  }
  else
  {
    kaldi::CuVectorBase<float>::CopyFromVec(&v114, (uint64_t)v88, v79, v80, v81);
  }
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)a3, (uint64_t)&v114, v84, v85, v86);
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SaveLastState(a1, 0);
}

double virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 136), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 876);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

{
  void *v0;
  void v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 881);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc()
{
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc();
}

double kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  uint64_t v11 = *(unsigned int *)(a1 + 96);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers((uint64_t *)a1);
  int v13 = (int)v10 / (int)v11;
  if ((int)v10 % (int)v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_338.reserved2, "batch_size % num_utts == 0", v12);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v151, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 898, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v151, (uint64_t)"Running backward propagation for batch std::string::size_type size = ", 46);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", which contains ", 17);
    uint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" frames each from ", 18);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v151);
  }
  if (v13 < 2) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_338.reserved3, "frames_in_batch > 1 && \"LSTM backprop will not work with batches of single frames.\"", v12);
  }
  uint64_t v102 = a5;
  if (a5) {
    uint64_t v17 = a5;
  }
  else {
    uint64_t v17 = a4;
  }
  uint64_t v18 = *(void *)(v17 + 32);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateBackwardBuffers(a1, a6, v10, v18);
  uint64_t v21 = a6;
  uint64_t v22 = *(void *)(a1 + 248);
  uint64_t v23 = 3 * a6;
  uint64_t v24 = *(void *)(a1 + 440) + 16 * v23;
  uint64_t v25 = *(void *)(a1 + 368);
  uint64_t v105 = *(void *)(a1 + 416);
  uint64_t v26 = *(void *)(a1 + 104);
  uint64_t v103 = v24;
  if (*(void *)(a1 + 112) == v26 || (int v27 = *(_DWORD *)(v26 + 32 * v21 + 16), v27 < 1))
  {
    int v106 = 0;
  }
  else
  {
    if (v27 != v10) {
      kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", &stru_388.sectname[8], "boundary_[batch_index].Dim() == batch_size", v20);
    }
    uint64_t v28 = *(void *)(a1 + 128) + 48 * (int)v21;
    *(void *)(v28 + 32) = v18;
    int v106 = 1;
    kaldi::CuMatrix<float>::Resize(v28, v11, *(unsigned int *)(v24 + 16), 1u, 0);
  }
  uint64_t v29 = v22 + 16 * v23;
  uint64_t v30 = v25 + 16 * v23;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)v30, a4, 111, v19, v20);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v151, v29, 0, *(_DWORD *)(v29 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v148, v29, 0, *(_DWORD *)(v29 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v145, v29, 0, *(_DWORD *)(v29 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v142, v29, 0, *(_DWORD *)(v29 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  uint64_t v31 = v103;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v139, v103, 0, *(_DWORD *)(v103 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v136, v31, 0, *(_DWORD *)(v31 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v133, v31, 0, *(_DWORD *)(v31 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, v31, 0, *(_DWORD *)(v31 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v139, (uint64_t)&v151, (uint64_t)&v142, v32, v33);
  int v34 = v10 - v11;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, (uint64_t)&v136, v11, v34, 0, SDWORD2(v137));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, (uint64_t)&v148, v11, v34, 0, SDWORD2(v149));
  uint64_t v35 = *(void *)(a1 + 272) + 48 * (int)v21;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v121, v35, 0, v34, 0, *(_DWORD *)(v35 + 16));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v127, (uint64_t)&v124, (uint64_t)&v121, v36, v37);
  uint64_t v121 = off_262D80;
  long long v122 = 0u;
  long long v123 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v121);
  uint64_t v124 = off_262D80;
  long long v125 = 0u;
  long long v126 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v124);
  v127 = off_262D80;
  long long v128 = 0u;
  long long v129 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v127);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, (uint64_t)&v136, 0, v11, 0, SDWORD2(v137));
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v127);
  v127 = off_262D80;
  long long v128 = 0u;
  long long v129 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v127);
  if (v106)
  {
    uint64_t v40 = *(void *)(a1 + 128) + 48 * (int)v21;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, v40, 0, *(_DWORD *)(v40 + 20), 0, *(_DWORD *)(a1 + 176));
    kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v127);
    int v41 = v13 - 1;
    int v42 = v11;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, (uint64_t)&v136, v42, v11, 0, SDWORD2(v137));
      kaldi::CuSubVector<float>::CuSubVector(&v121, *(void *)(a1 + 104) + 32 * v21, v42, v11, v43);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v124, (uint64_t)&v127, (uint64_t)&v121, 0, v44);
      uint64_t v124 = off_262D80;
      long long v125 = 0u;
      long long v126 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v124);
      v42 += v11;
      --v41;
    }
    while (v41);
    v127 = off_262D80;
    long long v128 = 0u;
    long long v129 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v127);
  }
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v133, (uint64_t)&v145, *(void *)(a1 + 296) + 48 * (int)v21, v38, v39);
  kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)&v130, (uint64_t)&v142, (uint64_t)&v151, v45, v46);
  uint64_t v47 = v105 + 16 * v23;
  kaldi::CuMatrixBase<float>::DiffTanh(v47, *(void *)(a1 + 296) + 48 * (int)v21, (uint64_t)&v145, v48, v49);
  int v50 = v13 - 1;
  int v104 = v13 - 1;
  do
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, v30, v50 * v11, v11, 0, *(_DWORD *)(v30 + 16));
    uint64_t v51 = *(void *)(a1 + 392) + 48 * (int)v21;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, v51, v50 * v11, v11, 0, *(_DWORD *)(v51 + 16));
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v54 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v124, (uint64_t)&v127, CblasNoTrans, v54, &stru_68.sectname[7], 1.0, 0.0);
    }
    else
    {
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v124, (uint64_t)&v127, 111, v52, v53);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v121, (uint64_t)&v133, v50 * v11, v11, 0, SDWORD2(v134));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v121, (uint64_t)&v124, v55, v56, v57);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v118, v47, v50 * v11, v11, 0, *(_DWORD *)(v47 + 16));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v118, (uint64_t)&v124, v58, v59, v60);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v61 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      if (*(_DWORD *)(v61 + 20) <= 2u) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v62);
      }
      unsigned int v63 = *(_DWORD *)(v61 + 16);
      uint64_t v64 = *(void *)(v61 + 32);
      v117[0] = *(void *)(v61 + 8) + 8 * *(int *)(v61 + 24);
      uint64_t v116 = &off_262E20;
      v117[1] = v63;
      v117[2] = v64;
      kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v121, 111, (uint64_t)&v116, v62, 1.0, 1.0);
    }
    if (v50 < v104)
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, v47, v11 + v11 * v50, v11, 0, *(_DWORD *)(v47 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, (uint64_t)&v148, v11 + v11 * v50, v11, 0, SDWORD2(v149));
      if (v106)
      {
        uint64_t v65 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v112, v65, 0, *(_DWORD *)(v65 + 20), 0, *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v112);
        kaldi::CuSubVector<float>::CuSubVector(&v110, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v66);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v112, (uint64_t)&v116, (uint64_t)&v110, 1, v67);
        *(_OWORD *)&v117[1] = *(_OWORD *)&v113[1];
        v117[0] = v113[0];
        v117[3] = v113[3];
        uint64_t v68 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v110, v68, 0, *(_DWORD *)(v68 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v110);
        kaldi::CuSubVector<float>::CuSubVector(v109, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v69);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v110, (uint64_t)&v114, (uint64_t)v109, 1, v70);
        v115[0] = v111[0];
        *(_OWORD *)&v115[1] = *(_OWORD *)&v111[1];
        v115[3] = v111[3];
        long long v110 = off_262D80;
        memset(v111, 0, sizeof(v111));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v110);
        uint64_t v112 = off_262D80;
        memset(v113, 0, sizeof(v113));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v112);
      }
      if (*(unsigned char *)(a1 + 208))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v112, (uint64_t)&v136, v11 + v11 * v50, v11, 0, SDWORD2(v137));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v110, (uint64_t)&v139, v11 + v11 * v50, v11, 0, SDWORD2(v140));
        if (v106)
        {
          uint64_t v71 = *(void *)(a1 + 128) + 48 * (int)v21;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)v109, v71, 0, *(_DWORD *)(v71 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v109);
          kaldi::CuSubVector<float>::CuSubVector(v108, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v72);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v109, (uint64_t)&v112, (uint64_t)v108, 1, v73);
          *(_OWORD *)&v113[1] = *(_OWORD *)&v109[2];
          v113[0] = v109[1];
          v113[3] = v109[4];
          uint64_t v74 = *(void *)(a1 + 128) + 48 * (int)v21;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)v108, v74, 0, *(_DWORD *)(v74 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v108);
          kaldi::CuSubVector<float>::CuSubVector(v107, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v75);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v108, (uint64_t)&v110, (uint64_t)v107, 1, v76);
          v111[0] = v108[1];
          *(_OWORD *)&v111[1] = *(_OWORD *)&v108[2];
          v111[3] = v108[4];
          v108[0] = off_262D80;
          memset(&v108[1], 0, 32);
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v108);
          v109[0] = off_262D80;
          memset(&v109[1], 0, 32);
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v109);
        }
        uint64_t v77 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v77 + 20) <= 1u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v78);
        }
        unsigned int v79 = *(_DWORD *)(v77 + 16);
        uint64_t v80 = *(void *)(v77 + 32);
        v109[1] = *(void *)(v77 + 8) + 4 * *(int *)(v77 + 24);
        v109[0] = &off_262E20;
        v109[2] = v79;
        v109[3] = v80;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v112, 111, (uint64_t)v109, v78, 1.0, 1.0);
        uint64_t v81 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v81 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v82);
        }
        unsigned int v83 = *(_DWORD *)(v81 + 16);
        uint64_t v84 = *(void *)(v81 + 32);
        v109[1] = *(void *)(v81 + 8);
        v109[0] = &off_262E20;
        v109[2] = v83;
        v109[3] = v84;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v110, 111, (uint64_t)v109, v82, 1.0, 1.0);
        long long v110 = off_262D80;
        memset(v111, 0, sizeof(v111));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v110);
        uint64_t v112 = off_262D80;
        memset(v113, 0, sizeof(v113));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v112);
      }
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v118, (uint64_t)&v116, 111, (uint64_t)&v114, &stru_68.sectname[7], 1.0, 1.0);
      uint64_t v114 = off_262D80;
      memset(v115, 0, sizeof(v115));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v114);
      uint64_t v116 = off_262D80;
      memset(v117, 0, sizeof(v117));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v116);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v139, v50 * v11, v11, 0, SDWORD2(v140));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v85, v86, v87);
    uint64_t v116 = off_262D80;
    memset(v117, 0, sizeof(v117));
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v116);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v130, v50 * v11, v11, 0, SDWORD2(v131));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v88, v89, v90);
    uint64_t v116 = off_262D80;
    memset(v117, 0, sizeof(v117));
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v116);
    if (v50 <= 0)
    {
      int v97 = v50 - 1;
    }
    else
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v136, v50 * v11, v11, 0, SDWORD2(v137));
      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v91, v92, v93);
      uint64_t v116 = off_262D80;
      memset(v117, 0, sizeof(v117));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v116);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, v103, v50 * v11, v11, 0, *(_DWORD *)(v103 + 16));
      if (v106)
      {
        uint64_t v94 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, v94, 0, *(_DWORD *)(v94 + 20), 0, v117[1]);
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v114);
        kaldi::CuSubVector<float>::CuSubVector(&v112, *(void *)(a1 + 104) + 32 * v21, v50 * v11, v11, v95);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v114, (uint64_t)&v116, (uint64_t)&v112, 1, v96);
        *(_OWORD *)&v117[1] = *(_OWORD *)&v115[1];
        v117[0] = v115[0];
        v117[3] = v115[3];
        uint64_t v114 = off_262D80;
        memset(v115, 0, sizeof(v115));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v114);
      }
      int v97 = v50 - 1;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, v30, (v50 - 1) * v11, v11, 0, *(_DWORD *)(v30 + 16));
      uint64_t v98 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v114, (uint64_t)&v116, CblasNoTrans, v98, &stru_68.sectname[7], 1.0, 1.0);
      uint64_t v114 = off_262D80;
      memset(v115, 0, sizeof(v115));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v114);
      uint64_t v116 = off_262D80;
      memset(v117, 0, sizeof(v117));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v116);
    }
    uint64_t v118 = off_262D80;
    long long v119 = 0u;
    long long v120 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v118);
    uint64_t v121 = off_262D80;
    long long v122 = 0u;
    long long v123 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v121);
    uint64_t v124 = off_262D80;
    long long v125 = 0u;
    long long v126 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v124);
    v127 = off_262D80;
    long long v128 = 0u;
    long long v129 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v127);
    BOOL v99 = v50 <= 0;
    int v50 = v97;
  }
  while (!v99);
  if (v102)
  {
    uint64_t v100 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::AddMatMat(v102, v103, CblasNoTrans, v100, &stru_68.sectname[7], 1.0, 0.0);
  }
  v130 = off_262D80;
  long long v131 = 0u;
  long long v132 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v130);
  v133 = off_262D80;
  long long v134 = 0u;
  long long v135 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v133);
  v136 = off_262D80;
  long long v137 = 0u;
  long long v138 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v136);
  v139 = off_262D80;
  long long v140 = 0u;
  long long v141 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v139);
  v142 = off_262D80;
  long long v143 = 0u;
  long long v144 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v142);
  v145 = off_262D80;
  long long v146 = 0u;
  long long v147 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v145);
  v148 = off_262D80;
  long long v149 = 0u;
  long long v150 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v148);
  v151 = off_262D80;
  long long v152 = 0u;
  long long v153 = 0u;
  *(void *)&double result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v151).n128_u64[0];
  return result;
}

void sub_15A2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a71 = off_262D80;
  a72 = 0u;
  *(_OWORD *)&STACK[0x208] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a71);
  STACK[0x218] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x220] = 0u;
  *(_OWORD *)&STACK[0x230] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x218]);
  STACK[0x240] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x248] = 0u;
  *(_OWORD *)&STACK[0x258] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x240]);
  STACK[0x268] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x270] = 0u;
  *(_OWORD *)&STACK[0x280] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x268]);
  STACK[0x290] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x298] = 0u;
  *(_OWORD *)&STACK[0x2A8] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x290]);
  STACK[0x2B8] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x2C0] = 0u;
  *(_OWORD *)&STACK[0x2D0] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x2B8]);
  STACK[0x2E0] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x2E8] = 0u;
  *(_OWORD *)&STACK[0x2F8] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x2E0]);
  STACK[0x308] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x310] = 0u;
  *(_OWORD *)&STACK[0x320] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x308]);
  STACK[0x330] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x338] = 0u;
  *(_OWORD *)&STACK[0x348] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x330]);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers(uint64_t *result)
{
  if (!*((unsigned char *)result + 241))
  {
    uint64_t v1 = result;
    std::vector<kaldi::CuMatrix<float>>::resize(result + 46, *((int *)result + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 49, *((int *)v1 + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 52, *((int *)v1 + 20));
    double result = std::vector<kaldi::CuMatrix<float>>::resize(v1 + 55, *((int *)v1 + 20));
    *((unsigned char *)v1 + 241) = 1;
  }
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateBackwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateBackwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1413, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    std::string::size_type v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 368) + 48 * a2, a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 392) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 416) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 440) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  *(void *)(*(void *)(a1 + 368) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 392) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 416) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 440) + 48 * a2 + 32) = a4;
}

void sub_15ABA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc((uint64_t)a1 + *(void *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 80) <= (int)a5) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_3D8.align + 1, "batch_index < ropts_.num_subbatches", a5);
  }
  int v7 = *(_DWORD *)(a1 + 96);
  int v8 = *(_DWORD *)(a2 + 20);
  if (v8 % v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_3D8.reloff + 1, "batch_size % num_utts == 0", a5);
  }
  int v9 = (int)a5;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1043, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"Accumulating gradients for batch id = ", 38);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55);
  }
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  uint64_t v38 = *(void *)(a1 + 272);
  uint64_t v14 = (_DWORD *)(*(void *)(a1 + 440) + 48 * v9);
  float v15 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 480) + 4 * v9) = v8;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v55, (uint64_t)v14, 0, v14[5], 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v52, (uint64_t)v14, 0, v14[5], (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, (uint64_t)v14, 0, v14[5], (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v9) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v9) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v9) + 24) = a4;
  if (*(unsigned char *)(a1 + 208)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v9) + 32) = a4;
  }
  if (*(unsigned char *)(a1 + 224)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v9) + 32) = a4;
  }
  uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v9);
  kaldi::CuMatrixBase<float>::AddMatMat(v16, (uint64_t)v14, CblasTrans, a2, &stru_68.sectname[7], 1.0, v15);
  uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v9);
  int v18 = v8 - v7;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)v14, v7, v8 - v7, 0, v14[4]);
  uint64_t v19 = *(void *)(a1 + 344) + 48 * v9;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v19, 0, v8 - v7, 0, *(_DWORD *)(v19 + 16));
  kaldi::CuMatrixBase<float>::AddMatMat(v17, (uint64_t)&v46, CblasTrans, (uint64_t)&v43, &stru_68.sectname[7], 1.0, v15);
  uint64_t v43 = off_262D80;
  long long v44 = 0u;
  long long v45 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
  unsigned int v46 = off_262D80;
  long long v47 = 0u;
  long long v48 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
  uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v9);
  kaldi::CuVectorBase<float>::AddRowSumMat(v20, v14, 1.0, v15, v21, v22, v23);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v9);
    if (!*(_DWORD *)(v24 + 20)) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
    }
    unsigned int v26 = *(_DWORD *)(v24 + 16);
    uint64_t v27 = *(void *)(v24 + 32);
    uint64_t v40 = *(void *)(v24 + 8);
    uint64_t v39 = &off_262E20;
    uint64_t v41 = v26;
    uint64_t v42 = v27;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)&v55, v7, v18, 0, SDWORD2(v56));
    uint64_t v28 = v38 + 48 * v9;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v28, 0, v18, 0, *(_DWORD *)(v28 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v39, (uint64_t)&v46, 112, (uint64_t)&v43, 111, 1.0, v15);
    uint64_t v43 = off_262D80;
    long long v44 = 0u;
    long long v45 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
    unsigned int v46 = off_262D80;
    long long v47 = 0u;
    long long v48 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
    uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v29 + 20) <= 1u) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v30);
    }
    unsigned int v31 = *(_DWORD *)(v29 + 16);
    uint64_t v32 = *(void *)(v29 + 32);
    uint64_t v40 = *(void *)(v29 + 8) + 4 * *(int *)(v29 + 24);
    uint64_t v39 = &off_262E20;
    uint64_t v41 = v31;
    uint64_t v42 = v32;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)&v52, v7, v18, 0, SDWORD2(v53));
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v28, 0, v18, 0, *(_DWORD *)(v28 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v39, (uint64_t)&v46, 112, (uint64_t)&v43, 111, 1.0, v15);
    uint64_t v43 = off_262D80;
    long long v44 = 0u;
    long long v45 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
    unsigned int v46 = off_262D80;
    long long v47 = 0u;
    long long v48 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
    uint64_t v33 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v33 + 20) <= 2u) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v34);
    }
    unsigned int v35 = *(_DWORD *)(v33 + 16);
    uint64_t v36 = *(void *)(v33 + 32);
    *(void *)&long long v47 = *(void *)(v33 + 8) + 8 * *(int *)(v33 + 24);
    unsigned int v46 = &off_262E20;
    *((void *)&v47 + 1) = v35;
    *(void *)&long long v48 = v36;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v46, (uint64_t)&v49, 112, v28, 111, 1.0, v15);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v37 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v9);
    kaldi::CuMatrixBase<float>::AddMatMat(v37, *(void *)(a1 + 368) + 48 * v9, CblasTrans, *(void *)(a1 + 320) + 48 * v9, &stru_68.sectname[7], 1.0, v15);
  }
  uint64_t v49 = off_262D80;
  long long v50 = 0u;
  long long v51 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v49);
  uint64_t v52 = off_262D80;
  long long v53 = 0u;
  long long v54 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v52);
  uint64_t v55 = off_262D80;
  long long v56 = 0u;
  long long v57 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v55);
}

void sub_15B318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void (**a25)(),long long a26,long long a27,void (**a28)(),long long a29,long long a30,void (**a31)(),long long a32,long long a33)
{
  a25 = off_262D80;
  a26 = 0u;
  a27 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a25);
  a28 = off_262D80;
  a29 = 0u;
  a30 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a28);
  a31 = off_262D80;
  a32 = 0u;
  a33 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a31);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 528)) {
    return;
  }
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  if (*(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1332);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "input_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 568) != *(void *)(a1 + 560))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1333);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "recurrent_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 616) != *(void *)(a1 + 608))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1334);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "bias_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 208) && *(void *)(a1 + 592) != *(void *)(a1 + 584))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1335);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "peephole_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 224) && *(void *)(a1 + 640) != *(void *)(a1 + 632))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1336);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "projection_weights_gradient_.size() == 0");
LABEL_34:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 536), v3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 560), v3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 608), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 656), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 680), v3);
  std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 728), v3);
  if (v3 >= 1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 208))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 584), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 704), v3);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 632), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 752), v3);
  }
  *(unsigned char *)(a1 + 528) = 1;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1391, 2);
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocated memory for the gradients: ", 36);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 272))(__p, a1);
    if ((v8 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      uint64_t v6 = v8;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
}

void sub_15BCDC()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v7 = *(void *)(a1 + 104);
  unsigned __int8 v8 = (void *)(a1 + 104);
  if (v7 == *(void *)(a1 + 112))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 104), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 128), *(int *)(a1 + 80));
    uint64_t v7 = *(void *)(a1 + 104);
  }
  kaldi::CuVector<float>::Resize(v7 + 32 * a3, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  int v13 = (_DWORD *)(*v8 + 32 * a3);

  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2, v10, v11, v12);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  *((_WORD *)a1 + 120) = 0;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetTrainOptions(void *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  int v2 = (kaldi::nnet1::RecurrentBaseComponent *)((char *)a1 + *(void *)(*a1 - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 120) = 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::HistoryStateSize(uint64_t a1)
{
  return (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) + *(_DWORD *)(a1 + 176));
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetHistoryState(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", &stru_6A8.sectname[6], "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  uint64_t v8 = *(void *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(v8 + 20), *(unsigned int *)(v8 + 16), 1u, 0);
  uint64_t v11 = *(void *)(a1 + 8) + 48 * a3;

  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, v11, 111, v9, v10);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", &stru_6A8.sectname[13], "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  if ((a3 & 0x80000000) != 0
    || (uint64_t v7 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v7 + 20) <= (signed int)a3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", &stru_6A8.sectname[14], "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", a5);
  }
  unsigned int v9 = a4;
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(v7 + 16), 1u, a4, a5);
  uint64_t v13 = *(void *)(a1 + 8) + 48 * v9;
  if (*(_DWORD *)(v13 + 20) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
  }
  uint64_t v14 = *(void *)(v13 + 8) + 4 * (int)(*(_DWORD *)(v13 + 24) * a3);
  unsigned int v15 = *(_DWORD *)(v13 + 16);
  uint64_t v16 = *(void *)(v13 + 32);
  v18[1] = v14;
  v18[0] = &off_262E20;
  v18[2] = v15;
  v18[3] = v16;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v18, v10, v11, v12);
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.size + 5, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v7);
  }
  uint64_t v8 = (unsigned int *)(*(void *)(a1 + 8) + 48 * a3);
  if (*(_DWORD *)(a2 + 20) != v8[5]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.size + 6, "history.NumRows() == history_state_[batch_index].NumRows()", v7);
  }
  if (*(_DWORD *)(a2 + 16) != v8[4]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.size + 7, "history.NumCols() == history_state_[batch_index].NumCols()", v7);
  }

  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v8, a2, 111, v6, v7);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetHistoryState(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.align + 2, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v10);
  }
  if (a3 < 0 || (uint64_t v11 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v11 + 20) <= a3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.align + 3, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", v10);
  }
  unsigned int v12 = *(_DWORD *)(a2 + 16);
  if (v12 != *(_DWORD *)(v11 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.reloff, "history.Dim() == history_state_[batch_index].NumCols()", v10);
  }
  uint64_t v13 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * a3;
  uint64_t v14 = *(void *)(v11 + 32);
  v16[1] = v13;
  v16[0] = &off_262E20;
  v16[2] = v12;
  v16[3] = v14;
  return kaldi::CuVectorBase<float>::CopyFromVec(v16, a2, v8, v9, v10);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.nreloc + 3, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v8);
  }
  if (a2[1] != *(_DWORD *)(*(void *)(a1 + 8) + 48 * a4 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.flags, "sequence_idx.size() == history_state_[batch_index].NumRows()", v8);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  *(void *)(*(void *)(a1 + 8) + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    unint64_t v10 = 0;
    do
    {
      if ((*(void *)(*a2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10))
      {
        uint64_t v11 = *(void *)(a1 + 8) + 48 * a4;
        if (v10 >= *(unsigned int *)(v11 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v9);
        }
        uint64_t v12 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * (int)v10;
        unsigned int v13 = *(_DWORD *)(v11 + 16);
        uint64_t v14 = *(void *)(v11 + 32);
        v22[1] = v12;
        v22[0] = &off_262E20;
        v22[2] = v13;
        v22[3] = v14;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v22);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          unsigned int v15 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
        }
      }
      ++v10;
    }
    while (a2[1] > v10);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1779, 3);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v21 & 0x80u) == 0) {
      uint64_t v17 = __p;
    }
    else {
      uint64_t v17 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      uint64_t v18 = v21;
    }
    else {
      uint64_t v18 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22);
  }
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_15C5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ResetHistoryState(void *a1)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  for (uint64_t i = a1[1]; i != a1[2]; i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(unsigned char *)(result + 528) = 0;
  return result;
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(void *result, int a2, float a3)
{
  int v3 = (float *)((char *)result + *(void *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((unsigned char *)v3 + 528) = 0;
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(uint64_t a1, unsigned int a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"NormalizeGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_568.offset + 2, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a6);
  }
  float v8 = a3;
  int v9 = *(_DWORD *)(a1 + 156);
  if (v9 == 1)
  {
    if (a3 > 0.0)
    {
      if (*(unsigned char *)(a1 + 84)) {
        float v8 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
      }
      uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v19, v8);
      uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v20, v8);
      uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v21, v8);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v22, v8);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v23, v8);
      }
    }
  }
  else if (v9 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *(void *)(a1 + 656) + 48 * a2, v8);
      uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, *(void *)(a1 + 680) + 48 * a2, v8);
      uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, *(void *)(a1 + 728) + 32 * a2, v8, v13, v14, v15);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v16, *(void *)(a1 + 704) + 48 * a2, v8);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
        uint64_t v18 = *(void *)(a1 + 752) + 48 * a2;
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v17, v18, v8);
      }
    }
  }
  else if (a3 > 0.0 && v9 == 2)
  {
    uint64_t v24 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v8 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
    }
    uint64_t v25 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v25, (unsigned int *)(*(void *)(a1 + 656) + 48 * v24), v8, v26, v27, v28);
    uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v29, (unsigned int *)(*(void *)(a1 + 680) + 48 * v24), v8, v30, v31, v32);
    uint64_t v33 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v33, (_DWORD *)(*(void *)(a1 + 728) + 32 * v24), v34, v35, v36, v8);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v37 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v37, (unsigned int *)(*(void *)(a1 + 704) + 48 * v24), v8, v38, v39, v40);
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v41 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
      long long v45 = (unsigned int *)(*(void *)(a1 + 752) + 48 * v24);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v41, v45, v8, v42, v43, v44);
    }
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
  *a3 = result;
  if (*(void *)(a1 + 544) == *(void *)(a1 + 536) || *(void *)(a1 + 568) == *(void *)(a1 + 560))
  {
    int v31 = 0;
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v7 = 0;
  }
  else {
    int v7 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v7);
  int v13 = kaldi::CuMatrixBase<float>::CountZeros(v8, v9, v10, v11, v12);
  uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v7);
  int v19 = kaldi::CuMatrixBase<float>::CountZeros(v14, v15, v16, v17, v18) + v13;
  uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v7);
  uint64_t result = kaldi::CuVectorBase<float>::CountZeros(v20);
  *a2 = v19 + result;
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v21, v22, v23, v24, v25);
    *a2 += result;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v26 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v26, v27, v28, v29, v30);
    int v31 = *a2 + result;
LABEL_11:
    *a2 = v31;
  }
  return result;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(void *a1, _DWORD *a2, _DWORD *a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr((uint64_t)a1 + *(void *)(*a1 - 56), a2, a3);
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetInternalMemory(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(void *)(a1 + 272) + 48 * a3, 111, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(uint64_t a1, int a2, float a3)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  float v7 = -a3;
  float v8 = -(float)(a3 * *(float *)(a1 + 464));
  uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
  kaldi::CuMatrixBase<float>::AddMat(v6, v9, 111, v10, v11, v8, 1.0);
  uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  float v13 = -(float)(a3 * *(float *)(a1 + 464));
  uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
  kaldi::CuMatrixBase<float>::AddMat(v12, v14, 111, v15, v16, v13, 1.0);
  uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  float v18 = -(float)(a3 * *(float *)(a1 + 464));
  uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
  kaldi::CuVectorBase<float>::AddVec(v17, v19, v20, v21, v22, v18, 1.0);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    float v24 = *(float *)(a1 + 464) * v7;
    uint64_t v25 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
    kaldi::CuMatrixBase<float>::AddMat(v23, v25, 111, v26, v27, v24, 1.0);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v28 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    float v29 = *(float *)(a1 + 468) * v7;
    uint64_t v30 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
    kaldi::CuMatrixBase<float>::AddMat(v28, v30, 111, v31, v32, v29, 1.0);
  }
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureBuffers(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 240))
  {
    unint64_t v2 = *(int *)(a1 + 80);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 8), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 272), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 296), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 320), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 344), v2);
    if ((int)v2 >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 8) + v3, *(unsigned int *)(a1 + 96), (*(_DWORD *)(a1 + 12 + *(void *)(*(void *)a1 - 24)) + *(_DWORD *)(a1 + 176)), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 480), v2);
    *(unsigned char *)(a1 + 240) = 1;
  }
}

float kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Check(uint64_t a1)
{
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1642);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Input weights #rows = ", 22);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"; expecting ", 12);
    int v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 16) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 8))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1646);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Input weights #columns = ", 25);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"; expecting ", 12);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, " (same as input dim)");
    goto LABEL_28;
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1650);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Recurrent weights #rows = ", 26);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    float v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; expecting ", 12);
    float v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 16) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1654);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Recurrent weights #columns = ", 29);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; expecting ", 12);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, " (same as output dim)");
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 208))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20) != 3)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1659);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Peephole weights #rows = ", 25);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      float v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
      std::ostream::operator<<();
      goto LABEL_28;
    }
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 16) != *(_DWORD *)(a1 + 176))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1662);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Peephole weights #columns = ", 28);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      uint64_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"; expecting ", 12);
      uint64_t v15 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, " (same as #cells)");
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1667);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Bias dim = ", 11);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; expecting ", 12);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20) == *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12))
    {
      if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 16) == *(_DWORD *)(a1 + 176)) {
        goto LABEL_12;
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1675);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Projection weights #columns = ", 30);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      float v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"; expecting ", 12);
      uint64_t v19 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, " (same as #cells)");
    }
    else
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1671);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Projection weights #rows = ", 27);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      uint64_t v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; expecting ", 12);
      uint64_t v17 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, " (same as output dim)");
    }
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
LABEL_12:
  if (*(float *)(a1 + 464) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1681);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 468) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1684);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"projection_learn_rate_coeff_ must not be negative; found: ",
      58);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 472) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1688);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 152) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1691);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  float result = *(float *)(a1 + 476);
  if (result < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1694);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"max_cell_values_ must not be negative; found: ",
      46);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  return result;
}

void sub_15D524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 856) = a2;
  *(_DWORD *)(a1 + 860) = a3;
  *(_WORD *)(a1 + 864) = 0;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 848) = off_266498;
  *(void *)(a1 + 896) = off_26E7B8;
  *(_OWORD *)(a1 + 904) = xmmword_20CEC0;
  *(void *)(a1 + 920) = 0x3BF800000;
  *(_DWORD *)(a1 + 928) = 1;
  *(_WORD *)(a1 + 932) = 0;
  *(unsigned char *)(a1 + 934) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (uint64_t *)off_26CF58);
  *(void *)uint64_t v4 = off_26CB48;
  *(void *)(v4 + 848) = off_26CE38;
  *(void *)(v4 + 160) = off_26CCD8;
  *(void *)(v4 + 168) = off_26CD00;
  *(_DWORD *)(v4 + 176) = a3;
  *(void *)(v4 + 192) = 0;
  *(void *)(v4 + 200) = 0;
  *(void *)(v4 + 184) = 0;
  *(_WORD *)(v4 + 208) = 1;
  *(void *)(v4 + 216) = 0;
  *(unsigned char *)(v4 + 224) = 0;
  *(void *)(v4 + 232) = 0;
  *(_WORD *)(v4 + 240) = 0;
  *(void *)(v4 + 456) = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(void *)(v4 + 464) = 0x3DCCCCCD3F800000;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_OWORD *)(v4 + 488) = 0u;
  *(_OWORD *)(v4 + 504) = 0u;
  *(_OWORD *)(v4 + 513) = 0u;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_OWORD *)(v4 + 552) = 0u;
  *(_OWORD *)(v4 + 568) = 0u;
  *(_OWORD *)(v4 + 584) = 0u;
  *(_OWORD *)(v4 + 600) = 0u;
  *(_OWORD *)(v4 + 616) = 0u;
  *(_OWORD *)(v4 + 632) = 0u;
  *(_OWORD *)(v4 + 648) = 0u;
  *(_OWORD *)(v4 + 664) = 0u;
  *(_OWORD *)(v4 + 680) = 0u;
  *(_OWORD *)(v4 + 696) = 0u;
  *(_OWORD *)(v4 + 712) = 0u;
  *(_OWORD *)(v4 + 728) = 0u;
  *(_OWORD *)(v4 + 744) = 0u;
  *(_OWORD *)(v4 + 760) = 0u;
  *(_OWORD *)(v4 + 776) = 0u;
  *(_OWORD *)(v4 + 792) = 0u;
  *(_OWORD *)(v4 + 808) = 0u;
  *(_OWORD *)(v4 + 824) = 0u;
  *(void *)(v4 + 840) = 0;
  return result;
}

void sub_15D738(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 257);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 258);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 262);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 263);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 268);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 269);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 273);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 274);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 279);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 280);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 284);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 285);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 290);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 291);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 292);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 296);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 297);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 298);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 303);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 304);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 305);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 309);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 310);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 311);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = off_264E70;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = off_266498;
  *(void *)(a1 + 896) = off_26E7B8;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)off_26CF58, a2);
  *(void *)a1 = off_26CB48;
  *(void *)(a1 + 848) = off_26CE38;
  *(void *)(a1 + 160) = off_26CCD8;
  *(void *)(a1 + 168) = off_26CD00;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 151);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  if (*(void *)(a2 + 184)) {
    kaldi::NewCuSubOrMat<signed char>();
  }
  if (*(void *)(a2 + 192)) {
    kaldi::NewCuSubOrMat<signed char>();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v10 = *(void *)(a2 + 216);
  if (v10) {
    kaldi::NewCuSubOrMat<float>(v10, 0);
  }
  if (*(void *)(a2 + 232)) {
    kaldi::NewCuSubOrMat<signed char>();
  }
  uint64_t v11 = *(void *)(a1 + 544);
  uint64_t v12 = *(void *)(a1 + 536);
  uint64_t v13 = (v11 - v12) >> 3;
  if (v13 != (uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    p_flags = (_DWORD *)(&stru_68 + 58);
    goto LABEL_41;
  }
  if (v13 != (uint64_t)(*(void *)(a1 + 616) - *(void *)(a1 + 608)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == bias_gradient_.size()";
    p_flags = (_DWORD *)(&stru_68 + 59);
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 208) && v13 != (uint64_t)(*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    p_flags = (_DWORD *)(&stru_68 + 61);
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 224) && v13 != (uint64_t)(*(void *)(a1 + 640) - *(void *)(a1 + 632)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    p_flags = &stru_68.flags;
LABEL_41:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)p_flags, v20, v9);
  }
  if (v11 != v12)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v15, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v14))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v16, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v14))
      {
        kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a2, v14);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v14))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v17, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v14))
      {
        uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v18, 0);
      }
      ++v14;
    }
    while (v14 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_15E6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,kaldi::nnet1::UpdatableComponent *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t a30)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a11;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  uint64_t v33 = *a14;
  if (*a14)
  {
    *((void *)v30 + 64) = v33;
    operator delete(v33);
  }
  uint64_t v34 = *a15;
  if (*a15)
  {
    *((void *)v30 + 61) = v34;
    operator delete(v34);
  }
  a30 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a22;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a23;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a27, 0);
  uint64_t v35 = *((void *)v30 + 27);
  *((void *)v30 + 27) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 24))(v35);
  }
  uint64_t v36 = *((void *)v30 + 25);
  *((void *)v30 + 25) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a29, 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a19);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a20);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v30, (uint64_t *)off_26CF58);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a21);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v4 - 24)) = a2[3];
  *(void *)(a1 + 160) = off_26CCD8;
  *(void *)(a1 + 168) = off_26CD00;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 776));
  uint64_t v9 = (void **)(a1 + 752);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 728);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 704);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 680);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 656);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 632);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 608);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 584);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 560);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 536);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v5 = *(void **)(a1 + 504);
  if (v5)
  {
    *(void *)(a1 + 512) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 480);
  if (v6)
  {
    *(void *)(a1 + 488) = v6;
    operator delete(v6);
  }
  uint64_t v9 = (void **)(a1 + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 320);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 296);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 272);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), 0);
  uint64_t v7 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1 + 168);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1 + 160);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, a2 + 1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v2 + 848));
  return a1;
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 688));
}

{
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 680));
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(a1 - 160);
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(a1 - 168);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(void *a1)
{
  uint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 848);

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent((uint64_t)a1 + *(void *)(*a1 - 24));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));

  operator delete();
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Copy()
{
}

void sub_15EE7C()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Copy()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void sub_15EF18()
{
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

void sub_15EFA0()
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = off_264E70;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = off_266498;
  *(void *)(a1 + 896) = off_26E7B8;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)off_26D398, a2);
  *(void *)a1 = off_26CF88;
  *(void *)(a1 + 848) = off_26D278;
  *(void *)(a1 + 160) = off_26D118;
  *(void *)(a1 + 168) = off_26D140;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 248);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v10 = *(void *)(a2 + 216);
  if (v10) {
    kaldi::NewCuSubOrMat<float>(v10, 0);
  }
  if (*(void *)(a2 + 232)) {
    operator new();
  }
  uint64_t v11 = *(void *)(a1 + 544);
  uint64_t v12 = *(void *)(a1 + 536);
  uint64_t v13 = (v11 - v12) >> 3;
  if (v13 != (uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    uint64_t v21 = (unsigned char *)(&stru_B8 + 75);
    goto LABEL_41;
  }
  if (v13 != (uint64_t)(*(void *)(a1 + 616) - *(void *)(a1 + 608)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == bias_gradient_.size()";
    uint64_t v21 = (unsigned char *)(&stru_B8 + 76);
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 208) && v13 != (uint64_t)(*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    uint64_t v21 = (unsigned char *)(&stru_B8 + 78);
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 224) && v13 != (uint64_t)(*(void *)(a1 + 640) - *(void *)(a1 + 632)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    uint64_t v21 = &stru_108.sectname[1];
LABEL_41:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", v21, v20, v9);
  }
  if (v11 != v12)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v15, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v14))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v16, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v14))
      {
        kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a2, v14);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v14))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v17, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v14))
      {
        uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v18, 0);
      }
      ++v14;
    }
    while (v14 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_15FAE0()
{
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitData(uint64_t a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  int v72 = -1;
  int v73 = v4;
  int v70 = 0x40000000;
  int v71 = -1073741824;
  int v68 = -1073741824;
  int v69 = 1036831949;
  int v67 = 0x40000000;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)((char *)&def_5A5E8 + 2), &v66);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &v65);
  memset(v64, 0, sizeof(v64));
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_210;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v64, v5, v6);
    if ((SHIBYTE(v64[2]) & 0x80000000) == 0)
    {
      uint64_t v9 = v64;
      switch(HIBYTE(v64[2]))
      {
        case 8:
          goto LABEL_44;
        case 9:
          BOOL v10 = v64[0] == 0x6D726F4E78614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 472);
          if (v10) {
            goto LABEL_202;
          }
          BOOL v12 = v64[0] == 0x6461724778614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 152);
          if (v12) {
            goto LABEL_202;
          }
          BOOL v13 = v64[0] == 0x6C6C654378614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 476);
          if (v13) {
            goto LABEL_202;
          }
          if ((v64[2] & 0x8000000000000000) != 0) {
            goto LABEL_120;
          }
          goto LABEL_43;
        case 0xA:
          if (v64[0] == 0x6C6C65436D754E3CLL && LOWORD(v64[1]) == 15987) {
            goto LABEL_205;
          }
          if (v64[0] != 0x61654D736169423CLL || LOWORD(v64[1]) != 15982) {
            goto LABEL_209;
          }
          goto LABEL_161;
        case 0xB:
          if (v64[0] != 0x6E6152736169423CLL || *(void *)((char *)v64 + 3) != 0x3E65676E61527361) {
            goto LABEL_209;
          }
          goto LABEL_107;
        case 0xC:
          if (v64[0] == 0x536D6F646E61523CLL && LODWORD(v64[1]) == 1046766949) {
            goto LABEL_206;
          }
          if ((v64[2] & 0x8000000000000000) != 0) {
            goto LABEL_126;
          }
LABEL_43:
          if (HIBYTE(v64[2]) != 8) {
            goto LABEL_209;
          }
LABEL_44:
          if (v64[0] == 0x3E706565506F4E3CLL) {
            goto LABEL_151;
          }
          if ((v64[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_129;
        case 0xD:
          if (v64[0] != 0x74536D617261503CLL || *(void *)((char *)v64 + 5) != 0x3E7665646474536DLL) {
            goto LABEL_209;
          }
          goto LABEL_185;
        case 0xF:
          BOOL v33 = v64[0] == 0x61526E7261654C3CLL && *(void *)((char *)v64 + 7) == 0x3E66656F43657461;
          goto LABEL_189;
        case 0x12:
          if (v64[0] == 0x6E6569646172473CLL && v64[1] == 0x7079546D726F4E74 && LOWORD(v64[2]) == 15973) {
            goto LABEL_204;
          }
          if (v64[0] == 0x4374757074754F3CLL && v64[1] == 0x65756C61566C6C65 && LOWORD(v64[2]) == 15987) {
            goto LABEL_208;
          }
          if ((v64[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_138;
        case 0x13:
          goto LABEL_141;
        case 0x14:
          if (v64[0] != 0x47746567726F463CLL || v64[1] != 0x4D73616942657461 || LODWORD(v64[2]) != 1047421285) {
            goto LABEL_209;
          }
          goto LABEL_170;
        case 0x15:
          if (v64[0] != 0x47746567726F463CLL
            || v64[1] != 0x5273616942657461
            || *(void *)((char *)&v64[1] + 5) != 0x3E65676E61527361)
          {
            goto LABEL_209;
          }
          goto LABEL_179;
        case 0x19:
          BOOL v22 = v64[0] == 0x7463656A6F72503CLL
             && v64[1] == 0x6E7261654C6E6F69
             && v64[2] == 0x66656F4365746152
             && v65.__r_.__value_.__s.__data_[0] == 62;
          goto LABEL_200;
        default:
          goto LABEL_209;
      }
    }
    uint64_t v14 = v64[1];
    switch(v64[1])
    {
      case 9:
        BOOL v15 = *(void *)v64[0] == 0x6D726F4E78614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
        uint64_t v11 = (int *)(a1 + 472);
        if (!v15)
        {
          BOOL v16 = *(void *)v64[0] == 0x6461724778614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
          uint64_t v11 = (int *)(a1 + 152);
          if (!v16) {
            goto LABEL_116;
          }
        }
        goto LABEL_202;
      case 0xALL:
        if (*(void *)v64[0] == 0x6C6C65436D754E3CLL && *(_WORD *)(v64[0] + 8) == 15987)
        {
LABEL_205:
          long long v56 = &v73;
LABEL_207:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v56, v7, v8);
          break;
        }
        if (*(void *)v64[0] != 0x61654D736169423CLL || *(_WORD *)(v64[0] + 8) != 15982) {
          goto LABEL_209;
        }
LABEL_161:
        uint64_t v11 = &v71;
LABEL_202:
        kaldi::ReadBasicType<float>(a2, 0, (float *)v11, v7, v8);
        break;
      case 0xBLL:
        if (*(void *)v64[0] != 0x6E6152736169423CLL || *(void *)(v64[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_209;
        }
LABEL_107:
        uint64_t v11 = &v70;
        goto LABEL_202;
      case 0xDLL:
        if (*(void *)v64[0] != 0x74536D617261503CLL || *(void *)(v64[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_209;
        }
LABEL_185:
        uint64_t v11 = &v69;
        goto LABEL_202;
      case 0xFLL:
        BOOL v33 = *(void *)v64[0] == 0x61526E7261654C3CLL && *(void *)(v64[0] + 7) == 0x3E66656F43657461;
LABEL_189:
        uint64_t v11 = (int *)(a1 + 464);
        if (!v33) {
          goto LABEL_209;
        }
        goto LABEL_202;
      case 0x12:
        if (*(void *)v64[0] == 0x6E6569646172473CLL
          && *(void *)(v64[0] + 8) == 0x7079546D726F4E74
          && *(_WORD *)(v64[0] + 16) == 15973)
        {
LABEL_204:
          unsigned int v46 = &v65;
          goto LABEL_150;
        }
        if (v64[1] != 9) {
          goto LABEL_121;
        }
LABEL_116:
        BOOL v37 = *(void *)v64[0] == 0x6C6C654378614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
        uint64_t v11 = (int *)(a1 + 476);
        if (v37) {
          goto LABEL_202;
        }
LABEL_120:
        uint64_t v14 = v64[1];
LABEL_121:
        if (v14 != 12) {
          goto LABEL_127;
        }
        if (*(void *)v64[0] == 0x536D6F646E61523CLL && *(_DWORD *)(v64[0] + 8) == 1046766949)
        {
LABEL_206:
          long long v56 = &v72;
          goto LABEL_207;
        }
LABEL_126:
        uint64_t v14 = v64[1];
LABEL_127:
        if (v14 == 8)
        {
          if (*(void *)v64[0] == 0x3E706565506F4E3CLL)
          {
LABEL_151:
            *(unsigned char *)(a1 + 208) = 0;
            break;
          }
LABEL_129:
          uint64_t v14 = v64[1];
        }
        if (v14 != 18) {
          goto LABEL_139;
        }
        if (*(void *)v64[0] != 0x4374757074754F3CLL
          || *(void *)(v64[0] + 8) != 0x65756C61566C6C65
          || *(_WORD *)(v64[0] + 16) != 15987)
        {
LABEL_138:
          uint64_t v14 = v64[1];
LABEL_139:
          if (v14 != 19) {
            goto LABEL_209;
          }
          uint64_t v9 = (uint64_t *)v64[0];
LABEL_141:
          uint64_t v41 = *v9;
          uint64_t v42 = v9[1];
          uint64_t v43 = *(uint64_t *)((char *)v9 + 11);
          BOOL v44 = v41 == 0x61725474696E493CLL && v42 == 0x79546D726F66736ELL;
          if (!v44 || v43 != 0x3E657079546D726FLL)
          {
LABEL_209:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v64, "</Component>"))
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v63, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 351);
              long long v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Invalid token ", 14);
              if (v64[2] >= 0) {
                uint64_t v58 = v64;
              }
              else {
                uint64_t v58 = (void *)v64[0];
              }
              if (v64[2] >= 0) {
                uint64_t v59 = HIBYTE(v64[2]);
              }
              else {
                uint64_t v59 = v64[1];
              }
              uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
              uint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)". Allowed tokens: ", 18);
              uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"(NumCells|BiasMean|BiasRange|ForgetGateBiasMean|ForgetGateBiasRange|ParamStddev|LearnRateCoef|ProjectionLearnRateCoef|MaxNorm|", 126);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"MaxGrad|MaxCell|NoPeep|InitTransformType|GradientNormType|RandomSeed)", 69);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v63);
            }
LABEL_210:
            kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateParams(a1, v73);
          }
          unsigned int v46 = &v66;
LABEL_150:
          kaldi::ReadToken(a2, 0, (uint64_t)v46, v7, v8);
          break;
        }
LABEL_208:
        *(unsigned char *)(a1 + 209) = 1;
        break;
      case 0x14:
        if (*(void *)v64[0] != 0x47746567726F463CLL
          || *(void *)(v64[0] + 8) != 0x4D73616942657461
          || *(_DWORD *)(v64[0] + 16) != 1047421285)
        {
          goto LABEL_209;
        }
LABEL_170:
        uint64_t v11 = &v68;
        goto LABEL_202;
      case 0x15:
        if (*(void *)v64[0] != 0x47746567726F463CLL
          || *(void *)(v64[0] + 8) != 0x5273616942657461
          || *(void *)(v64[0] + 13) != 0x3E65676E61527361)
        {
          goto LABEL_209;
        }
LABEL_179:
        uint64_t v11 = &v67;
        goto LABEL_202;
      case 0x19:
        BOOL v22 = *(void *)v64[0] == 0x7463656A6F72503CLL
           && *(void *)(v64[0] + 8) == 0x6E7261654C6E6F69
           && *(void *)(v64[0] + 16) == 0x66656F4365746152
           && *(unsigned char *)(v64[0] + 24) == 62;
LABEL_200:
        uint64_t v11 = (int *)(a1 + 468);
        if (!v22) {
          goto LABEL_209;
        }
        goto LABEL_202;
      default:
        goto LABEL_121;
    }
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
}

void sub_160AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  if (*(char *)(v14 - 185) < 0) {
    operator delete(*(void **)(v14 - 208));
  }
  if (*(char *)(v14 - 161) < 0) {
    operator delete(*(void **)(v14 - 184));
  }
  if (*(char *)(v14 - 137) < 0) {
    operator delete(*(void **)(v14 - 160));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateParams(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 176) = a2;
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) > a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1249);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"# LSTM cells (", 14);
    uint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") should not be less than output dim (", 38);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, ").");
  }
  else
  {
    if (!*(void *)(a1 + 184)) {
      operator new();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1253);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_ thought to be un-initialized here");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
}

void sub_161154()
{
}

void sub_161170(_Unwind_Exception *a1)
{
  operator delete(v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<signed char>>(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, unsigned int *a4, float a5)
{
  uint64_t v10 = kaldi::QuantizedMatrixBase<short>::NumRows(a4);
  uint64_t v11 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a4);
  kaldi::Matrix<float>::Matrix((uint64_t)&v23, v10, v11, 0, 0);
  unint64_t v12 = 0;
LABEL_2:
  if ((uint64_t)v12 < (int)kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)&v23))
  {
    for (unint64_t i = 0; ; ++i)
    {
      if ((uint64_t)i >= (int)kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)&v23))
      {
        ++v12;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0, v14, v15, v16);
          if (v12 >= v25 || i >= v24) {
            goto LABEL_25;
          }
          uint64_t v18 = v23 + 4 * (int)v12 * v26;
          float v19 = v20 * a5;
        }
        else
        {
          if (a3 != 1) {
            continue;
          }
          float v17 = kaldi::UniformRandomNumber::RandUniform(a1, 0, v14, v15, v16);
          if (v12 >= v25 || i >= v24) {
            goto LABEL_25;
          }
          uint64_t v18 = v23 + 4 * (int)v12 * v26;
          float v19 = (v17 + -0.5) * (float)(a5 + a5);
        }
      }
      else
      {
        if (v12 >= v25 || i >= v24) {
LABEL_25:
        }
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v16);
        uint64_t v18 = v23 + 4 * (int)v12 * v26;
        if (v12 == i) {
          float v19 = 1.0;
        }
        else {
          float v19 = 0.0;
        }
      }
      *(float *)(v18 + 4 * i) = v19;
    }
  }
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat((uint64_t)a4, (kaldi::ContextDependency *)&v23);
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v23);
}

void sub_161370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 214);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 210);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 223);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 219);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 232);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 228);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 241);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 237);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 250);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 246);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitData(void *a1, uint64_t *a2)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_135:
    int v38 = *(_DWORD *)(a1 + 176);
    int v39 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
    if (v38 < v39)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 430);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# LSTM cells (", 14);
      BOOL v44 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)") should not be less than output dim (", 38);
      long long v45 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v45, ").");
    }
    else
    {
      uint64_t v40 = *(void *)(a1 + 184);
      *(unsigned char *)(a1 + 224) = v38 > v39;
      if (!v40) {
        operator new();
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 436);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_weights_ thougth to be un-initialized here");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    long long v48 = 0uLL;
    uint64_t v49 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v48, v6, v7);
    if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      switch(HIBYTE(v49))
      {
        case 8:
          goto LABEL_97;
        case 9:
          goto LABEL_85;
        case 0xA:
          if ((void)v48 != 0x6C6C65436D754E3CLL || WORD4(v48) != 15987) {
            goto LABEL_138;
          }
          goto LABEL_46;
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x10:
        case 0x11:
          goto LABEL_138;
        case 0xF:
          BOOL v27 = (void)v48 == 0x61526E7261654C3CLL && *(void *)((char *)&v48 + 7) == 0x3E66656F43657461;
          uint64_t v14 = (float *)(a1 + 464);
          if (v27) {
            goto LABEL_127;
          }
          if (HIBYTE(v49) != 8) {
            goto LABEL_84;
          }
          goto LABEL_97;
        case 0x12:
          if ((void)v48 == 0x4374757074754F3CLL
            && *((void *)&v48 + 1) == 0x65756C61566C6C65
            && (unsigned __int16)v49 == 15987)
          {
            goto LABEL_132;
          }
          if (HIBYTE(v49) == 9) {
            goto LABEL_119;
          }
          if (HIBYTE(v49) != 18) {
            goto LABEL_138;
          }
          BOOL v25 = (void)v48 == 0x6E6569646172473CLL && *((void *)&v48 + 1) == 0x7079546D726F4E74;
          if (!v25 || (unsigned __int16)v49 != 15973) {
            goto LABEL_138;
          }
          goto LABEL_133;
        default:
          if (HIBYTE(v49) != 25) {
            goto LABEL_138;
          }
          BOOL v22 = (void)v48 == 0x7463656A6F72503CLL
             && *((void *)&v48 + 1) == 0x6E7261654C6E6F69
             && v49 == 0x66656F4365746152
             && v50 == 62;
          uint64_t v14 = (float *)(a1 + 468);
          if (v22) {
            goto LABEL_127;
          }
LABEL_84:
          if (HIBYTE(v49) != 9) {
            goto LABEL_138;
          }
LABEL_85:
          BOOL v28 = (void)v48 == 0x6D726F4E78614D3CLL && BYTE8(v48) == 62;
          uint64_t v14 = (float *)(a1 + 472);
          if (v28) {
            goto LABEL_127;
          }
          if (HIBYTE(v49) == 8) {
            goto LABEL_97;
          }
          if (HIBYTE(v49) != 9) {
            goto LABEL_138;
          }
          BOOL v29 = (void)v48 == 0x6C6C654378614D3CLL && BYTE8(v48) == 62;
          uint64_t v14 = (float *)(a1 + 476);
          if (!v29) {
            goto LABEL_119;
          }
          goto LABEL_127;
      }
    }
    uint64_t v11 = *((void *)&v48 + 1);
    if (*((void *)&v48 + 1) == 10
      && (*(void *)v48 == 0x6C6C65436D754E3CLL ? (BOOL v12 = *(unsigned __int16 *)(v48 + 8) == 15987) : (BOOL v12 = 0), v12))
    {
LABEL_46:
      kaldi::ReadBasicType<int>(a2, a3, a1 + 176, v8, v9);
    }
    else
    {
      if (*((void *)&v48 + 1) == 15)
      {
        BOOL v13 = *(void *)v48 == 0x61526E7261654C3CLL && *(void *)(v48 + 7) == 0x3E66656F43657461;
        uint64_t v14 = (float *)(a1 + 464);
        if (v13) {
          goto LABEL_127;
        }
        uint64_t v11 = *((void *)&v48 + 1);
      }
      if (v11 == 25)
      {
        BOOL v17 = *(void *)v48 == 0x7463656A6F72503CLL
           && *(void *)(v48 + 8) == 0x6E7261654C6E6F69
           && *(void *)(v48 + 16) == 0x66656F4365746152
           && *(unsigned char *)(v48 + 24) == 62;
        uint64_t v14 = (float *)(a1 + 468);
        if (v17) {
          goto LABEL_127;
        }
        uint64_t v11 = *((void *)&v48 + 1);
      }
      if (v11 != 9) {
        goto LABEL_47;
      }
      BOOL v18 = *(void *)v48 == 0x6D726F4E78614D3CLL && *(unsigned char *)(v48 + 8) == 62;
      uint64_t v14 = (float *)(a1 + 472);
      if (v18) {
        goto LABEL_127;
      }
      uint64_t v11 = *((void *)&v48 + 1);
      if (*((void *)&v48 + 1) != 9) {
        goto LABEL_47;
      }
      BOOL v19 = *(void *)v48 == 0x6C6C654378614D3CLL && *(unsigned char *)(v48 + 8) == 62;
      uint64_t v14 = (float *)(a1 + 476);
      if (v19) {
        goto LABEL_127;
      }
      if ((v49 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v49) == 9) {
          goto LABEL_119;
        }
        if (HIBYTE(v49) != 8) {
          goto LABEL_138;
        }
LABEL_97:
        if ((void)v48 != 0x3E706565506F4E3CLL)
        {
          if ((v49 & 0x8000000000000000) == 0) {
            goto LABEL_138;
          }
LABEL_100:
          uint64_t v11 = *((void *)&v48 + 1);
          if (v11 != 18) {
            goto LABEL_120;
          }
LABEL_101:
          if (*(void *)v48 == 0x4374757074754F3CLL
            && *(void *)(v48 + 8) == 0x65756C61566C6C65
            && *(_WORD *)(v48 + 16) == 15987)
          {
LABEL_132:
            *(unsigned char *)(a1 + 209) = 1;
            goto LABEL_128;
          }
          uint64_t v11 = *((void *)&v48 + 1);
          if (*((void *)&v48 + 1) != 18) {
            goto LABEL_120;
          }
          if (*(void *)v48 == 0x6E6569646172473CLL
            && *(void *)(v48 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v48 + 16) == 15973)
          {
LABEL_133:
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v47 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p, v8, v9);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v47) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_128;
          }
          if ((v49 & 0x8000000000000000) == 0)
          {
            if (HIBYTE(v49) != 9) {
              goto LABEL_138;
            }
LABEL_119:
            uint64_t v34 = &v48;
          }
          else
          {
LABEL_120:
            if (v11 != 9) {
              goto LABEL_138;
            }
            uint64_t v34 = (long long *)v48;
          }
          uint64_t v35 = *(void *)v34;
          int v36 = *((unsigned __int8 *)v34 + 8);
          BOOL v37 = v35 == 0x6461724778614D3CLL && v36 == 62;
          uint64_t v14 = (float *)(a1 + 152);
          if (!v37)
          {
LABEL_138:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 424);
            uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v49 >= 0) {
              uint64_t v42 = &v48;
            }
            else {
              uint64_t v42 = (long long *)v48;
            }
            if (v49 >= 0) {
              uint64_t v43 = HIBYTE(v49);
            }
            else {
              uint64_t v43 = *((void *)&v48 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
LABEL_127:
          kaldi::ReadBasicType<float>(a2, a3, v14, v8, v9);
          goto LABEL_128;
        }
      }
      else
      {
LABEL_47:
        if (v11 != 8) {
          goto LABEL_101;
        }
        if (*(void *)v48 != 0x3E706565506F4E3CLL) {
          goto LABEL_100;
        }
      }
      *(unsigned char *)(a1 + 208) = 0;
    }
LABEL_128:
    if (SHIBYTE(v49) < 0) {
      operator delete((void *)v48);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_135;
    }
  }
}

void sub_162170()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(void *a1, uint64_t *a2, int a3)
{
}

void *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumCells>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<ProjectionLearnRateCoef>", v10, v11);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v12, v13);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v14, v15);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v16, v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v18, v19);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxCell>", v20, v21);
  uint64_t result = kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  if (!*(unsigned char *)(a1 + 208)) {
    uint64_t result = kaldi::WriteToken(a2, a3, (kaldi *)"<NoPeep>", v23, v24);
  }
  if (*(unsigned char *)(a1 + 209)) {
    return kaldi::WriteToken(a2, a3, (kaldi *)"<OutputCellValues>", v23, v24);
  }
  return result;
}

void sub_162360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(unsigned char *a1, void *a2, uint64_t a3, int a4)
{
  (*(void (**)(unsigned char *))(*(void *)a1 + 128))(a1);
  (*(void (**)(unsigned char *, void *, uint64_t))(*(void *)a1 + 192))(a1, a2, a3);
  uint64_t v8 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<signed char>::Write(v8, a2, a3, a4);
  uint64_t v9 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<signed char>::Write(v9, a2, a3, a4);
  if (a1[208])
  {
    uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v10, a2, a3, a4);
  }
  uint64_t v11 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::Write(v11, a2, a3, v12, v13);
  if (a1[224])
  {
    uint64_t v14 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    kaldi::QuantizedMatrix<signed char>::Write(v14, a2, a3, a4);
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(void *a1, void *a2, uint64_t a3, int a4)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  int v3 = kaldi::QuantizedMatrixBase<short>::NumRows(v2);
  uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  int v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4) * v3;
  uint64_t v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  int v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  int v9 = v5 + kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
  uint64_t v10 = (v9 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1) + 16));
  if (*(unsigned char *)(a1 + 208))
  {
    int v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1) + 20);
    uint64_t v10 = (v10
                       + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1)
                                   + 16)
                       * v11);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v12 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    int v13 = kaldi::QuantizedMatrixBase<short>::NumRows(v12);
    uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    return v10 + kaldi::QuantizedMatrixBase<short>::NumCols(v14) * v13;
  }
  return v10;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NumParams((uint64_t)a1 + *(void *)(*a1 - 192));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  int v7 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  int v8 = kaldi::QuantizedMatrixBase<short>::NumRows(v7);
  uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  unsigned int v10 = kaldi::QuantizedMatrixBase<short>::NumCols(v9) * v8;
  int v11 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  int v12 = kaldi::QuantizedMatrixBase<short>::NumRows(v11);
  uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  int v14 = kaldi::QuantizedMatrixBase<short>::NumCols(v13);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v10 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  int v16 = v14 * v12;
  int v38 = *(void **)a2;
  LODWORD(v39) = v10;
  BOOL v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v38, v17);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  unsigned int v18 = v16 + v10;
  if (v16 + v10 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  int v38 = (void *)(*(void *)a2 + 4 * (int)v10);
  LODWORD(v39) = v16;
  BOOL v19 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v38, v19);
  if (a1[208])
  {
    int v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 20);
    int v21 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 16)
        * v20;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    unsigned int v22 = v21 + v18;
    if (v21 + v18 > *(_DWORD *)(a2 + 8)) {
      goto LABEL_11;
    }
    int v38 = (void *)(*(void *)a2 + 4 * (int)v18);
    LODWORD(v39) = v21;
    uint64_t v23 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v38, v23, v24, v25, v26);
    unsigned int v18 = v22;
  }
  int v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v27 + v18 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  int v38 = (void *)(*(void *)a2 + 4 * (int)v18);
  LODWORD(v39) = v27;
  BOOL v28 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v28, (uint64_t)&v38, v29, v30, v31);
  if (!a1[224]) {
    return;
  }
  unsigned int v32 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16) + v18;
  BOOL v33 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  int v34 = kaldi::QuantizedMatrixBase<short>::NumRows(v33);
  uint64_t v35 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  int v36 = kaldi::QuantizedMatrixBase<short>::NumCols(v35);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v36 * v34 + v32 > *(_DWORD *)(a2 + 8)) {
LABEL_11:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
  int v38 = (void *)(*(void *)a2 + 4 * (int)v32);
  LODWORD(v39) = v36 * v34;
  BOOL v37 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v38, v37);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(void *a1, uint64_t a2)
{
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(unsigned char *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(unsigned char *))(*(void *)a1 + 208))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_1F8.size + 2, "wei_src.Dim() == NumParams()", v5);
  }
  uint64_t v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  int v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  unsigned int v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
  unsigned int v10 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  int v11 = kaldi::QuantizedMatrixBase<short>::NumRows(v10);
  uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  int v13 = kaldi::QuantizedMatrixBase<short>::NumCols(v12);
  int v14 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (v9 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  int v16 = v13 * v11;
  BOOL v33 = *(char **)a2;
  LODWORD(v34) = v9;
  kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v14, &v33);
  BOOL v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  unsigned int v18 = v16 + v9;
  if (v16 + v9 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  BOOL v33 = (char *)(*(void *)a2 + 4 * (int)v9);
  LODWORD(v34) = v16;
  kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v17, &v33);
  if (a1[208])
  {
    int v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 20);
    int v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 16)
        * v19;
    uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    if (v20 + v18 > *(_DWORD *)(a2 + 8)) {
      goto LABEL_12;
    }
    BOOL v33 = (char *)(*(void *)a2 + 4 * (int)v18);
    LODWORD(v34) = v20;
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v21, &v33);
    v18 += v20;
  }
  unsigned int v22 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1);
  int v25 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (v25 + v18 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  BOOL v33 = (char *)(*(void *)a2 + 4 * (int)v18);
  LODWORD(v34) = v25;
  uint64_t result = kaldi::CuVectorBase<float>::CopyFromVec<float>(v22, (uint64_t)&v33, v23, v24, v15);
  if (!a1[224]) {
    return result;
  }
  unsigned int v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16) + v18;
  BOOL v28 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  int v29 = kaldi::QuantizedMatrixBase<short>::NumRows(v28);
  uint64_t v30 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  int v31 = kaldi::QuantizedMatrixBase<short>::NumCols(v30) * v29;
  unsigned int v32 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (v31 + v27 > *(_DWORD *)(a2 + 8)) {
LABEL_12:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
  BOOL v33 = (char *)(*(void *)a2 + 4 * (int)v27);
  LODWORD(v34) = v31;
  return (_DWORD *)kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v32, &v33);
}

_DWORD *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetParams((unsigned char *)a1 + *(void *)(*a1 - 208), a2);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(uint64_t a1)
{
  uint64_t v2 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  float v7 = kaldi::QuantizedMatrixBase<signed char>::Sum(v2, v3, v4, v5, v6);
  uint64_t v8 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  float v13 = v7 + kaldi::QuantizedMatrixBase<signed char>::Sum(v8, v9, v10, v11, v12);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
    float v13 = v13 + kaldi::CuMatrixBase<float>::Sum(v14, v15, v16, v17, v18);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    int v19 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    float v13 = v13 + kaldi::QuantizedMatrixBase<signed char>::Sum(v19, v20, v21, v22, v23);
  }
  uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  double v25 = kaldi::CuVectorBase<float>::Sum(v24);
  return v13 + *(float *)&v25;
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SumParams((uint64_t)a1 + *(void *)(*a1 - 224));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  uint64_t v3 = kaldi::QuantizedMatrixBase<short>::NumRows(v2);
  uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  uint64_t v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v6, v3, v5, 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v6);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

void sub_162DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  uint64_t v5 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v4);
  uint64_t v6 = kaldi::QuantizedMatrixBase<short>::NumRows(v5);
  uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v4);
  uint64_t v8 = kaldi::QuantizedMatrixBase<short>::NumCols(v7);
  kaldi::CuMatrix<float>::Resize((uint64_t)va, v6, v8, 1u, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)va);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v4);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

uint64_t sub_162E3C()
{
  if (*(unsigned char *)(v0 + 208))
  {
    uint64_t v2 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0) + 20);
    uint64_t v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0);
    kaldi::CuMatrix<float>::Resize((uint64_t)v20, v2, *(unsigned int *)(v3 + 16), 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
    uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0);
    kaldi::CuMatrixBase<float>::AddMat(v4, (uint64_t)v20, 111, v5, v6, v1, 1.0);
  }
  uint64_t v7 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(v0) + 16);
  memset(&v19[1], 0, 24);
  v19[0] = off_262E60;
  kaldi::CuVector<float>::Resize((uint64_t)v19, v7, 1u, v8, v9);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v19);
  uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(v0);
  kaldi::CuVectorBase<float>::AddVec(v10, (uint64_t)v19, v11, v12, v13, v1, 1.0);
  if (*(unsigned char *)(v0 + 224))
  {
    uint64_t v14 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v0);
    uint64_t v15 = kaldi::QuantizedMatrixBase<short>::NumRows(v14);
    uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v0);
    uint64_t v17 = kaldi::QuantizedMatrixBase<short>::NumCols(v16);
    kaldi::CuMatrix<float>::Resize((uint64_t)v20, v15, v17, 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v0);
    kaldi::QuantizedMatrixBase<signed char>::AddMat();
  }
  kaldi::CuVector<float>::~CuVector(v19);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v20);
}

void sub_162F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(void *a1)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (const void *)(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 136))(a1);
  if (v8) {
  else
  }
    uint64_t v9 = 0;
  (*(void (**)(void *, uint64_t, uint64_t, void, void))(*(void *)v9 + 336))(v9, a2, a3, 0, 0);
  uint64_t v10 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v10, 0, v11, v12);
  float v13 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  int v14 = kaldi::QuantizedMatrixBase<short>::NumRows(v13);
  uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  unsigned int v16 = kaldi::QuantizedMatrixBase<short>::NumCols(v15) * v14;
  uint64_t v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  int v18 = kaldi::QuantizedMatrixBase<short>::NumRows(v17);
  uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  int v20 = kaldi::QuantizedMatrixBase<short>::NumCols(v19);
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  if (v16 > *(_DWORD *)(a4 + 8)) {
    goto LABEL_14;
  }
  int v22 = v20;
  long long v57 = *(char **)a4;
  LODWORD(v58) = v16;
  uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient((uint64_t)v9, 0);
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v54, v23, 111, v24, v25);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v57, (kaldi::ContextDependency *)&v54);
  int v26 = v22 * v18;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v54);
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unsigned int v27 = v26 + v16;
  if (v26 + v16 > *(_DWORD *)(a4 + 8)) {
    goto LABEL_14;
  }
  uint64_t v54 = *(void *)a4 + 4 * (int)v16;
  LODWORD(v55) = v26;
  BOOL v28 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient((uint64_t)v9, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v28, v29, v30, v31);
  if (a1[208])
  {
    int v32 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 20);
    int v33 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 16)
        * v32;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    unsigned int v34 = v33 + v27;
    if (v33 + v27 > *(_DWORD *)(a4 + 8)) {
      goto LABEL_14;
    }
    uint64_t v54 = *(void *)a4 + 4 * (int)v27;
    LODWORD(v55) = v33;
    uint64_t v35 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v35, v36, v37, v38);
    unsigned int v27 = v34;
  }
  int v39 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16);
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  if (v39 + v27 > *(_DWORD *)(a4 + 8)) {
LABEL_14:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v21);
  uint64_t v54 = *(void *)a4 + 4 * (int)v27;
  LODWORD(v55) = v39;
  uint64_t v40 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient((uint64_t)v9, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v40, (uint64_t)&v54, v41, v42, v43);
  if (a1[224])
  {
    unsigned int v44 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16) + v27;
    long long v45 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    int v46 = kaldi::QuantizedMatrixBase<short>::NumRows(v45);
    uint64_t v47 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    int v48 = kaldi::QuantizedMatrixBase<short>::NumCols(v47);
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    if (v48 * v46 + v44 <= *(_DWORD *)(a4 + 8))
    {
      uint64_t v54 = *(void *)a4 + 4 * (int)v44;
      LODWORD(v55) = v48 * v46;
      uint64_t v49 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient((uint64_t)v9, 0);
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v49, v50, v51, v52);
      return (*(uint64_t (**)(void *))(*(void *)v9 + 8))(v9);
    }
    goto LABEL_14;
  }
  return (*(uint64_t (**)(void *))(*(void *)v9 + 8))(v9);
}

void sub_16331C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient((unsigned char *)a1 + *(void *)(*a1 - 240), a2, a3, a4);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(void *a1, int a2)
{
  uint64_t v2 = (float *)((char *)a1 + *(void *)(*a1 - 24));
  if (!*((unsigned char *)v2 + 84)) {
    return v2[14];
  }
  uint64_t v3 = a1[63];
  unint64_t v4 = a1[64] - v3;
  if (!v4) {
    return NAN;
  }
  unint64_t v5 = v4 >> 2;
  if ((int)v5 <= a2) {
    return NAN;
  }
  int v6 = v5 - 1;
  if (a2 >= 0) {
    int v6 = a2;
  }
  return *(float *)(v3 + 4 * v6);
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(void *a1, int a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate((void *)((char *)a1 + *(void *)(*a1 - 216)), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Info(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v50);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 192))(a1, v50, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Input weights:", 16);
  uint64_t v3 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  kaldi::nnet1::MomentStatistics<signed char>(v3);
  if ((v49 & 0x80u) == 0) {
    unint64_t v4 = v48;
  }
  else {
    unint64_t v4 = (void **)v48[0];
  }
  if ((v49 & 0x80u) == 0) {
    uint64_t v5 = v49;
  }
  else {
    uint64_t v5 = (uint64_t)v48[1];
  }
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n Recurrent weights:", 20);
  uint64_t v8 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  kaldi::nnet1::MomentStatistics<signed char>(v8);
  if ((v47 & 0x80u) == 0) {
    uint64_t v9 = v46;
  }
  else {
    uint64_t v9 = (void **)v46[0];
  }
  if ((v47 & 0x80u) == 0) {
    uint64_t v10 = v47;
  }
  else {
    uint64_t v10 = (uint64_t)v46[1];
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n Bias:", 7);
  float v13 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  kaldi::nnet1::MomentStatistics<float>(v13, v14, v15, v16, v17);
  if ((v45 & 0x80u) == 0) {
    int v18 = v44;
  }
  else {
    int v18 = (void **)v44[0];
  }
  if ((v45 & 0x80u) == 0) {
    uint64_t v19 = v45;
  }
  else {
    uint64_t v19 = (uint64_t)v44[1];
  }
  int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v18, v19);
  uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n Forget gate bias:", 19);
  uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  kaldi::CuSubVector<float>::CuSubVector(&v39, v22, *(_DWORD *)(a1 + 176), *(_DWORD *)(a1 + 176), v23);
  kaldi::nnet1::MomentStatistics<float>(&v39, v24, v25, v26, v27);
  if ((v43 & 0x80u) == 0) {
    BOOL v28 = __p;
  }
  else {
    BOOL v28 = (void **)__p[0];
  }
  if ((v43 & 0x80u) == 0) {
    uint64_t v29 = v43;
  }
  else {
    uint64_t v29 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v28, v29);
  if ((char)v43 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v45 < 0) {
    operator delete(v44[0]);
  }
  if ((char)v47 < 0) {
    operator delete(v46[0]);
  }
  if ((char)v49 < 0) {
    operator delete(v48[0]);
  }
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Peephole weights:", 19);
    uint64_t v31 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v31);
    int v32 = (v41 & 0x80u) == 0 ? &v39 : (void **)v39;
    uint64_t v33 = (v41 & 0x80u) == 0 ? v41 : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
    if ((char)v41 < 0) {
      operator delete(v39);
    }
  }
  if (*(unsigned char *)(a1 + 224))
  {
    unsigned int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Projection weights:", 21);
    uint64_t v35 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    kaldi::nnet1::MomentStatistics<signed char>(v35);
    uint64_t v36 = (v41 & 0x80u) == 0 ? &v39 : (void **)v39;
    uint64_t v37 = (v41 & 0x80u) == 0 ? v41 : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
    if ((char)v41 < 0) {
      operator delete(v39);
    }
  }
  std::stringbuf::str();
  if (v51 < 0) {
    operator delete((void *)v50[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_163B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Info(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Info((uint64_t)a1 + *(void *)(*a1 - 80));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 528))
  {
    memset(&v105, 0, sizeof(v105));
    int v104 = 0;
    if (*(int *)(a1 + 80) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v92, "\n For batch ");
        kaldi::nnet1::ToString<int>();
        if ((v91 & 0x80u) == 0) {
          uint64_t v3 = v90;
        }
        else {
          uint64_t v3 = (void **)v90[0];
        }
        if ((v91 & 0x80u) == 0) {
          std::string::size_type v4 = v91;
        }
        else {
          std::string::size_type v4 = (std::string::size_type)v90[1];
        }
        uint64_t v5 = std::string::append(&v92, (const std::string::value_type *)v3, v4);
        long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v88, ": ");
        if ((v89 & 0x80u) == 0) {
          uint64_t v7 = v88;
        }
        else {
          uint64_t v7 = (void **)v88[0];
        }
        if ((v89 & 0x80u) == 0) {
          std::string::size_type v8 = v89;
        }
        else {
          std::string::size_type v8 = (std::string::size_type)v88[1];
        }
        uint64_t v9 = std::string::append(&v93, (const std::string::value_type *)v7, v8);
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v86, "\n  Number of cells : ");
        if ((v87 & 0x80u) == 0) {
          uint64_t v11 = v86;
        }
        else {
          uint64_t v11 = (void **)v86[0];
        }
        if ((v87 & 0x80u) == 0) {
          std::string::size_type v12 = v87;
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v86[1];
        }
        float v13 = std::string::append(&v94, (const std::string::value_type *)v11, v12);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::ToString<int>();
        if ((v85 & 0x80u) == 0) {
          uint64_t v15 = v84;
        }
        else {
          uint64_t v15 = (void **)v84[0];
        }
        if ((v85 & 0x80u) == 0) {
          std::string::size_type v16 = v85;
        }
        else {
          std::string::size_type v16 = (std::string::size_type)v84[1];
        }
        uint64_t v17 = std::string::append(&v95, (const std::string::value_type *)v15, v16);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v82, "\n  Input weights gradient: ");
        if ((v83 & 0x80u) == 0) {
          uint64_t v19 = v82;
        }
        else {
          uint64_t v19 = (void **)v82[0];
        }
        if ((v83 & 0x80u) == 0) {
          std::string::size_type v20 = v83;
        }
        else {
          std::string::size_type v20 = (std::string::size_type)v82[1];
        }
        uint64_t v21 = std::string::append(&v96, (const std::string::value_type *)v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v23);
        if ((v81 & 0x80u) == 0) {
          uint64_t v24 = v80;
        }
        else {
          uint64_t v24 = (void **)v80[0];
        }
        if ((v81 & 0x80u) == 0) {
          std::string::size_type v25 = v81;
        }
        else {
          std::string::size_type v25 = (std::string::size_type)v80[1];
        }
        uint64_t v26 = std::string::append(&v97, (const std::string::value_type *)v24, v25);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v78, "\n  Recurrent weights gradient: ");
        if ((v79 & 0x80u) == 0) {
          BOOL v28 = v78;
        }
        else {
          BOOL v28 = (void **)v78[0];
        }
        if ((v79 & 0x80u) == 0) {
          std::string::size_type v29 = v79;
        }
        else {
          std::string::size_type v29 = (std::string::size_type)v78[1];
        }
        uint64_t v30 = std::string::append(&v98, (const std::string::value_type *)v28, v29);
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v99.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        uint64_t v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v32);
        if ((v77 & 0x80u) == 0) {
          uint64_t v33 = v76;
        }
        else {
          uint64_t v33 = (void **)v76[0];
        }
        if ((v77 & 0x80u) == 0) {
          std::string::size_type v34 = v77;
        }
        else {
          std::string::size_type v34 = (std::string::size_type)v76[1];
        }
        uint64_t v35 = std::string::append(&v99, (const std::string::value_type *)v33, v34);
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v74, "\n  Bias gradient: ");
        if ((v75 & 0x80u) == 0) {
          uint64_t v37 = v74;
        }
        else {
          uint64_t v37 = (void **)v74[0];
        }
        if ((v75 & 0x80u) == 0) {
          std::string::size_type v38 = v75;
        }
        else {
          std::string::size_type v38 = (std::string::size_type)v74[1];
        }
        int v39 = std::string::append(&v100, (const std::string::value_type *)v37, v38);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v101.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        unsigned __int8 v41 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v41, v42, v43, v44, v45);
        if ((v73 & 0x80u) == 0) {
          int v46 = __p;
        }
        else {
          int v46 = (void **)__p[0];
        }
        if ((v73 & 0x80u) == 0) {
          std::string::size_type v47 = v73;
        }
        else {
          std::string::size_type v47 = (std::string::size_type)__p[1];
        }
        int v48 = std::string::append(&v101, (const std::string::value_type *)v46, v47);
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        int64_t v103 = v48->__r_.__value_.__r.__words[2];
        long long v102 = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if (v103 >= 0) {
          uint64_t v50 = (const std::string::value_type *)&v102;
        }
        else {
          uint64_t v50 = (const std::string::value_type *)v102;
        }
        if (v103 >= 0) {
          std::string::size_type v51 = HIBYTE(v103);
        }
        else {
          std::string::size_type v51 = *((void *)&v102 + 1);
        }
        std::string::append(&v105, v50, v51);
        if (SHIBYTE(v103) < 0) {
          operator delete((void *)v102);
        }
        if ((char)v73 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        if ((char)v75 < 0) {
          operator delete(v74[0]);
        }
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
        if ((char)v77 < 0) {
          operator delete(v76[0]);
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        if ((char)v79 < 0) {
          operator delete(v78[0]);
        }
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v98.__r_.__value_.__l.__data_);
        }
        if ((char)v81 < 0) {
          operator delete(v80[0]);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((char)v83 < 0) {
          operator delete(v82[0]);
        }
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v96.__r_.__value_.__l.__data_);
        }
        if ((char)v85 < 0) {
          operator delete(v84[0]);
        }
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v95.__r_.__value_.__l.__data_);
        }
        if ((char)v87 < 0) {
          operator delete(v86[0]);
        }
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
        if ((char)v89 < 0) {
          operator delete(v88[0]);
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if ((char)v91 < 0) {
          operator delete(v90[0]);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if (*(unsigned char *)(a1 + 208))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Peephole weights gradient: ");
          uint64_t v52 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v52);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v53 = &v100;
          }
          else {
            long long v53 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v100.__r_.__value_.__l.__size_;
          }
          uint64_t v55 = std::string::append(&v101, (const std::string::value_type *)v53, size);
          long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          int64_t v103 = v55->__r_.__value_.__r.__words[2];
          long long v102 = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0) {
            long long v57 = (const std::string::value_type *)&v102;
          }
          else {
            long long v57 = (const std::string::value_type *)v102;
          }
          if (v103 >= 0) {
            std::string::size_type v58 = HIBYTE(v103);
          }
          else {
            std::string::size_type v58 = *((void *)&v102 + 1);
          }
          std::string::append(&v105, v57, v58);
          if (SHIBYTE(v103) < 0) {
            operator delete((void *)v102);
          }
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v101.__r_.__value_.__l.__data_);
          }
        }
        if (*(unsigned char *)(a1 + 224))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Projection weights gradient: ");
          uint64_t v59 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v59);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v60 = &v100;
          }
          else {
            uint64_t v60 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v61 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v61 = v100.__r_.__value_.__l.__size_;
          }
          uint64_t v62 = std::string::append(&v101, (const std::string::value_type *)v60, v61);
          long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          int64_t v103 = v62->__r_.__value_.__r.__words[2];
          long long v102 = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0) {
            uint64_t v64 = (const std::string::value_type *)&v102;
          }
          else {
            uint64_t v64 = (const std::string::value_type *)v102;
          }
          if (v103 >= 0) {
            std::string::size_type v65 = HIBYTE(v103);
          }
          else {
            std::string::size_type v65 = *((void *)&v102 + 1);
          }
          std::string::append(&v105, v64, v65);
          if (SHIBYTE(v103) < 0) {
            operator delete((void *)v102);
          }
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v101.__r_.__value_.__l.__data_);
          }
        }
        ++v104;
      }
      while (v104 < *(_DWORD *)(a1 + 80));
    }
    std::string v66 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v102, "\n");
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v67 = &v105;
    }
    else {
      int v67 = (std::string *)v105.__r_.__value_.__r.__words[0];
    }
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v68 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v68 = v105.__r_.__value_.__l.__size_;
    }
    int v69 = std::string::insert(v66, 0, (const std::string::value_type *)v67, v68);
    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v69->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v103) < 0) {
      operator delete((void *)v102);
    }
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v105.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_164384(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(void *a1@<X0>, void *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v89, 0, sizeof(v89));
  int v88 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v75 & 0x80u) == 0) {
        uint64_t v3 = v74;
      }
      else {
        uint64_t v3 = (void **)v74[0];
      }
      if ((v75 & 0x80u) == 0) {
        std::string::size_type v4 = v75;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v74[1];
      }
      uint64_t v5 = std::string::append(&v76, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v72, ": ");
      if ((v73 & 0x80u) == 0) {
        uint64_t v7 = v72;
      }
      else {
        uint64_t v7 = (void **)v72[0];
      }
      if ((v73 & 0x80u) == 0) {
        std::string::size_type v8 = v73;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v72[1];
      }
      uint64_t v9 = std::string::append(&v77, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v70, "\n  Gates values: ");
      if ((v71 & 0x80u) == 0) {
        uint64_t v11 = v70;
      }
      else {
        uint64_t v11 = (void **)v70[0];
      }
      if ((v71 & 0x80u) == 0) {
        std::string::size_type v12 = v71;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v70[1];
      }
      float v13 = std::string::append(&v78, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 248) + 48 * v88);
      if ((v69 & 0x80u) == 0) {
        uint64_t v15 = v68;
      }
      else {
        uint64_t v15 = (void **)v68[0];
      }
      if ((v69 & 0x80u) == 0) {
        std::string::size_type v16 = v69;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v68[1];
      }
      uint64_t v17 = std::string::append(&v79, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v66, "\n  Cell values: ");
      if ((v67 & 0x80u) == 0) {
        uint64_t v19 = v66;
      }
      else {
        uint64_t v19 = (void **)v66[0];
      }
      if ((v67 & 0x80u) == 0) {
        std::string::size_type v20 = v67;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v66[1];
      }
      uint64_t v21 = std::string::append(&v80, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 272) + 48 * v88);
      if ((v65 & 0x80u) == 0) {
        uint64_t v23 = v64;
      }
      else {
        uint64_t v23 = (void **)v64[0];
      }
      if ((v65 & 0x80u) == 0) {
        std::string::size_type v24 = v65;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v64[1];
      }
      std::string::size_type v25 = std::string::append(&v81, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v62, "\n  Cell outputs: ");
      if ((v63 & 0x80u) == 0) {
        long long v27 = v62;
      }
      else {
        long long v27 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v28 = v63;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v62[1];
      }
      std::string::size_type v29 = std::string::append(&v82, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 296) + 48 * v88);
      if ((v61 & 0x80u) == 0) {
        long long v31 = v60;
      }
      else {
        long long v31 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v32 = v61;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)v60[1];
      }
      uint64_t v33 = std::string::append(&v83, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Cell outputs gated: ");
      if ((v59 & 0x80u) == 0) {
        uint64_t v35 = v58;
      }
      else {
        uint64_t v35 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v36 = v59;
      }
      else {
        std::string::size_type v36 = (std::string::size_type)v58[1];
      }
      uint64_t v37 = std::string::append(&v84, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 320) + 48 * v88);
      if ((v57 & 0x80u) == 0) {
        int v39 = __p;
      }
      else {
        int v39 = (void **)__p[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v40 = v57;
      }
      else {
        std::string::size_type v40 = (std::string::size_type)__p[1];
      }
      unsigned __int8 v41 = std::string::append(&v85, (const std::string::value_type *)v39, v40);
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      int64_t v87 = v41->__r_.__value_.__r.__words[2];
      long long v86 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (v87 >= 0) {
        uint64_t v43 = (const std::string::value_type *)&v86;
      }
      else {
        uint64_t v43 = (const std::string::value_type *)v86;
      }
      if (v87 >= 0) {
        std::string::size_type v44 = HIBYTE(v87);
      }
      else {
        std::string::size_type v44 = *((void *)&v86 + 1);
      }
      std::string::append(&v89, v43, v44);
      if (SHIBYTE(v87) < 0) {
        operator delete((void *)v86);
      }
      if ((char)v57 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v83.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      if ((char)v65 < 0) {
        operator delete(v64[0]);
      }
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
      if ((char)v67 < 0) {
        operator delete(v66[0]);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      if ((char)v69 < 0) {
        operator delete(v68[0]);
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if ((char)v71 < 0) {
        operator delete(v70[0]);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      if ((char)v73 < 0) {
        operator delete(v72[0]);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if ((char)v75 < 0) {
        operator delete(v74[0]);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "\n  Output values: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 344) + 48 * v88);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v45 = &v84;
        }
        else {
          unsigned __int8 v45 = (std::string *)v84.__r_.__value_.__r.__words[0];
        }
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v84.__r_.__value_.__l.__size_;
        }
        std::string::size_type v47 = std::string::append(&v85, (const std::string::value_type *)v45, size);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        int64_t v87 = v47->__r_.__value_.__r.__words[2];
        long long v86 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (v87 >= 0) {
          long long v49 = (const std::string::value_type *)&v86;
        }
        else {
          long long v49 = (const std::string::value_type *)v86;
        }
        if (v87 >= 0) {
          std::string::size_type v50 = HIBYTE(v87);
        }
        else {
          std::string::size_type v50 = *((void *)&v86 + 1);
        }
        std::string::append(&v89, v49, v50);
        if (SHIBYTE(v87) < 0) {
          operator delete((void *)v86);
        }
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
      }
      ++v88;
    }
    while (v88 < *(_DWORD *)(a1 + 80));
  }
  std::string::size_type v51 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v86, "\n");
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v52 = &v89;
  }
  else {
    uint64_t v52 = (std::string *)v89.__r_.__value_.__r.__words[0];
  }
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v53 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v53 = v89.__r_.__value_.__l.__size_;
  }
  uint64_t v54 = std::string::insert(v51, 0, (const std::string::value_type *)v52, v53);
  *a2 = *v54;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v87) < 0) {
    operator delete((void *)v86);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
}

void sub_164C64(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_164E70()
{
}

void sub_164E78()
{
}

void sub_164E80()
{
}

void sub_164E88()
{
}

void sub_164E90()
{
}

void sub_164E98()
{
}

void sub_164EA0()
{
}

void sub_164EA8()
{
}

void sub_164EB0()
{
}

void sub_164EB8()
{
}

void sub_164EC0()
{
}

void sub_164EC8()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoBackPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v75, 0, sizeof(v75));
  int v74 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v64, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v63 & 0x80u) == 0) {
        uint64_t v3 = v62;
      }
      else {
        uint64_t v3 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v4 = v63;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v62[1];
      }
      uint64_t v5 = std::string::append(&v64, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v60, ": ");
      if ((v61 & 0x80u) == 0) {
        uint64_t v7 = v60;
      }
      else {
        uint64_t v7 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v8 = v61;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v60[1];
      }
      uint64_t v9 = std::string::append(&v65, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Gates diff: ");
      if ((v59 & 0x80u) == 0) {
        uint64_t v11 = v58;
      }
      else {
        uint64_t v11 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v12 = v59;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v58[1];
      }
      float v13 = std::string::append(&v66, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 440) + 48 * v74);
      if ((v57 & 0x80u) == 0) {
        uint64_t v15 = v56;
      }
      else {
        uint64_t v15 = (void **)v56[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v16 = v57;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v56[1];
      }
      uint64_t v17 = std::string::append(&v67, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, "\n  Cell diff: ");
      if ((v55 & 0x80u) == 0) {
        uint64_t v19 = v54;
      }
      else {
        uint64_t v19 = (void **)v54[0];
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v20 = v55;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v54[1];
      }
      uint64_t v21 = std::string::append(&v68, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 416) + 48 * v74);
      if ((v53 & 0x80u) == 0) {
        uint64_t v23 = v52;
      }
      else {
        uint64_t v23 = (void **)v52[0];
      }
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v24 = v53;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v52[1];
      }
      std::string::size_type v25 = std::string::append(&v69, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v50, "\n  Cell out gated diff: ");
      if ((v51 & 0x80u) == 0) {
        long long v27 = v50;
      }
      else {
        long long v27 = (void **)v50[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v28 = v51;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v50[1];
      }
      std::string::size_type v29 = std::string::append(&v70, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 392) + 48 * v74);
      if ((v49 & 0x80u) == 0) {
        long long v31 = __p;
      }
      else {
        long long v31 = (void **)__p[0];
      }
      if ((v49 & 0x80u) == 0) {
        std::string::size_type v32 = v49;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)__p[1];
      }
      uint64_t v33 = std::string::append(&v71, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      int64_t v73 = v33->__r_.__value_.__r.__words[2];
      long long v72 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v73 >= 0) {
        uint64_t v35 = (const std::string::value_type *)&v72;
      }
      else {
        uint64_t v35 = (const std::string::value_type *)v72;
      }
      if (v73 >= 0) {
        std::string::size_type v36 = HIBYTE(v73);
      }
      else {
        std::string::size_type v36 = *((void *)&v72 + 1);
      }
      std::string::append(&v75, v35, v36);
      if (SHIBYTE(v73) < 0) {
        operator delete((void *)v72);
      }
      if ((char)v49 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if ((char)v51 < 0) {
        operator delete(v50[0]);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if ((char)v53 < 0) {
        operator delete(v52[0]);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if ((char)v55 < 0) {
        operator delete(v54[0]);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if ((char)v57 < 0) {
        operator delete(v56[0]);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v71, "\n  Output diff: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 368) + 48 * v74);
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v70;
        }
        else {
          uint64_t v37 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v70.__r_.__value_.__l.__size_;
        }
        int v39 = std::string::append(&v71, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        int64_t v73 = v39->__r_.__value_.__r.__words[2];
        long long v72 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v73 >= 0) {
          unsigned __int8 v41 = (const std::string::value_type *)&v72;
        }
        else {
          unsigned __int8 v41 = (const std::string::value_type *)v72;
        }
        if (v73 >= 0) {
          std::string::size_type v42 = HIBYTE(v73);
        }
        else {
          std::string::size_type v42 = *((void *)&v72 + 1);
        }
        std::string::append(&v75, v41, v42);
        if (SHIBYTE(v73) < 0) {
          operator delete((void *)v72);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
      }
      ++v74;
    }
    while (v74 < *(_DWORD *)(a1 + 80));
  }
  uint64_t v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v72, "\n");
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = &v75;
  }
  else {
    std::string::size_type v44 = (std::string *)v75.__r_.__value_.__r.__words[0];
  }
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v45 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v45 = v75.__r_.__value_.__l.__size_;
  }
  int v46 = std::string::insert(v43, 0, (const std::string::value_type *)v44, v45);
  *a2 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)v72);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
}

void sub_165454(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_165620()
{
}

void sub_165628()
{
}

void sub_165630()
{
}

void sub_165638()
{
}

void sub_165640()
{
}

void sub_165648()
{
}

void sub_165650()
{
}

void sub_165658()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoBackPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a2 + 20);
  uint64_t v6 = *(unsigned int *)(a1 + 96);
  int v81 = (int)v5 / (int)v6;
  if ((int)v5 % (int)v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_298.addr + 3, "batch_size % num_utts == 0", a5);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v108, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 701, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v108, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    std::string::size_type v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    float v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v108);
  }
  uint64_t v14 = *(void *)(a3 + 32);
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateForwardBuffers(a1, a4, v5, v14);
  uint64_t v16 = *(void *)(a1 + 104);
  uint64_t v17 = a4;
  uint64_t v83 = a4;
  int v78 = a4;
  if (*(void *)(a1 + 112) == v16)
  {
    int v79 = 0;
  }
  else
  {
    int v18 = *(_DWORD *)(v16 + 32 * a4 + 16);
    if (v18 < 1)
    {
      int v79 = 0;
      uint64_t v17 = a4;
    }
    else
    {
      if (v18 != v5) {
        kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_298.size + 5, "boundary_[batch_index].Dim() == batch_size", v15);
      }
      uint64_t v17 = a4;
      uint64_t v19 = *(void *)(a1 + 128) + 48 * a4;
      *(void *)(v19 + 32) = v14;
      int v79 = 1;
      kaldi::CuMatrix<float>::Resize(v19, v6, *(unsigned int *)(*(void *)(a1 + 8) + 48 * a4 + 16), 1u, 0);
    }
  }
  uint64_t v20 = *(void *)(a1 + 248) + 48 * v17;
  uint64_t v82 = *(void *)(a1 + 344) + 48 * v17;
  uint64_t v21 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  kaldi::CuMatrixBase<float>::AddMatMat<signed char>(v20, a2, 111, v21, &stru_68.sectname[8], 1.0, 0.0);
  uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  kaldi::CuMatrixBase<float>::AddVecToRows(v20, v22, v23, v24, v25, 1.0, 1.0);
  if (v81 >= 1)
  {
    int v28 = v17;
    int v29 = 0;
    int v30 = 0;
    uint64_t v80 = a1 + 12;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v108, v20, v29, v6, 0, *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v105, v20, v29, v6, (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v102, v20, v29, v6, (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      uint64_t v31 = *(void *)(a1 + 272) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v99, v31, v29, v6, 0, *(_DWORD *)(v31 + 16));
      memset(v98, 0, sizeof(v98));
      std::string v97 = off_262D80;
      memset(v96, 0, sizeof(v96));
      std::string v95 = off_262D80;
      if (v30)
      {
        if (v79)
        {
          kaldi::CuMatrixBase<float>::SetZero(*(void *)(a1 + 128) + 48 * (int)v83);
          uint64_t v32 = *(void *)(a1 + 128) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v32, 0, *(_DWORD *)(v32 + 20), 0, *(_DWORD *)(a1 + 176));
          v96[0] = v94[0];
          *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
          v96[3] = v94[3];
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
          uint64_t v33 = *(void *)(a1 + 272) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v33, v29 - v6, v6, 0, *(_DWORD *)(v33 + 16));
          kaldi::CuSubVector<float>::CuSubVector(&v90, *(void *)(a1 + 104) + 32 * v83, v29, v6, v34);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v95, (uint64_t)&v93, (uint64_t)&v90, 1, v35);
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
          uint64_t v36 = *(void *)(a1 + 128) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v36, 0, *(_DWORD *)(v36 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v80 + *(void *)(*(void *)a1 - 24)));
          *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
          v98[0] = v94[0];
          v98[3] = v94[3];
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v82, v29 - v6, v6, 0, *(_DWORD *)(v82 + 16));
          int v28 = v83;
          kaldi::CuSubVector<float>::CuSubVector(&v90, *(void *)(a1 + 104) + 32 * v83, v29, v6, v37);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v97, (uint64_t)&v93, (uint64_t)&v90, 1, v38);
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
        }
        else
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v82, v29 - v6, v6, 0, *(_DWORD *)(v82 + 16));
          *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
          v98[0] = v94[0];
          v98[3] = v94[3];
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
          uint64_t v41 = *(void *)(a1 + 272) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v41, v29 - v6, v6, 0, *(_DWORD *)(v41 + 16));
          v96[0] = v94[0];
          *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
          v96[3] = v94[3];
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
          int v28 = v83;
        }
      }
      else
      {
        int v28 = v83;
        uint64_t v39 = *(void *)(a1 + 8) + 48 * (int)v83;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v39, 0, *(_DWORD *)(v39 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v80 + *(void *)(*(void *)a1 - 24)));
        *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
        v98[0] = v94[0];
        v98[3] = v94[3];
        std::string v93 = off_262D80;
        memset(v94, 0, sizeof(v94));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
        uint64_t v40 = *(void *)(a1 + 8) + 48 * (int)v83;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v40, 0, *(_DWORD *)(v40 + 20), 0, *(_DWORD *)(a1 + 176));
        v96[0] = v94[0];
        *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
        v96[3] = v94[3];
        std::string v93 = off_262D80;
        memset(v94, 0, sizeof(v94));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v20, v29, v6, 0, *(_DWORD *)(v20 + 16));
      std::string::size_type v42 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v93, (uint64_t)&v97, 111, v42, &stru_68.sectname[8], 1.0, 1.0);
      std::string v93 = off_262D80;
      memset(v94, 0, sizeof(v94));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v46 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v46 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v47);
        }
        unsigned int v48 = *(_DWORD *)(v46 + 16);
        uint64_t v49 = *(void *)(v46 + 32);
        v94[0] = *(void *)(v46 + 8);
        std::string v93 = &off_262E20;
        v94[1] = v48;
        v94[2] = v49;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v108, (uint64_t)&v95, 111, (uint64_t)&v93, v47, 1.0, 1.0);
        uint64_t v50 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v50 + 20) <= 1u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v51);
        }
        unsigned int v52 = *(_DWORD *)(v50 + 16);
        uint64_t v53 = *(void *)(v50 + 32);
        v94[0] = *(void *)(v50 + 8) + 4 * *(int *)(v50 + 24);
        std::string v93 = &off_262E20;
        v94[1] = v52;
        v94[2] = v53;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v105, (uint64_t)&v95, 111, (uint64_t)&v93, v51, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid(&v108, &v108, v43, v44, v45);
      kaldi::CuMatrixBase<float>::Sigmoid(&v105, &v105, v54, v55, v56);
      kaldi::CuMatrixBase<float>::ApplyTanh((uint64_t)&v102, v57, v58, v59, v60);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v99, (uint64_t)&v108, 111, (uint64_t)&v102, &stru_68.sectname[7], 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v99, (uint64_t)&v105, 111, (uint64_t)&v95, &stru_68.sectname[7], 1.0, 1.0);
      float v61 = *(float *)(a1 + 476);
      if (v61 > 0.0)
      {
        kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)&v99, v61);
        kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v99, -*(float *)(a1 + 476));
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v20, v29, v6, (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v65 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v65 + 20) <= 2u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v66);
        }
        unsigned int v67 = *(_DWORD *)(v65 + 16);
        uint64_t v68 = *(void *)(v65 + 32);
        *(void *)&long long v91 = *(void *)(v65 + 8) + 8 * *(int *)(v65 + 24);
        uint64_t v90 = &off_262E20;
        *((void *)&v91 + 1) = v67;
        *(void *)&long long v92 = v68;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v93, (uint64_t)&v99, 111, (uint64_t)&v90, v66, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid(&v93, &v93, v62, v63, v64);
      uint64_t v69 = *(void *)(a1 + 296) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v90, v69, v29, v6, 0, *(_DWORD *)(v69 + 16));
      kaldi::CuMatrixBase<float>::Tanh(&v90, &v99, v70, v71, v72);
      uint64_t v73 = *(void *)(a1 + 320) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, v73, v29, v6, 0, *(_DWORD *)(v73 + 16));
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v87, (uint64_t)&v93, 111, (uint64_t)&v90, &stru_68.sectname[7], 1.0, 0.0);
      if (*(unsigned char *)(a1 + 224))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v84, v82, v29, v6, 0, *(_DWORD *)(v82 + 16));
        int v74 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
        kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v84, (uint64_t)&v87, 111, v74, &stru_68.sectname[8], 1.0, 0.0);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v84, v82, v29, v6, 0, *(_DWORD *)(v82 + 16));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v84, (uint64_t)&v87, 111, v75, v76);
      }
      std::string v84 = off_262D80;
      long long v85 = 0u;
      long long v86 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v84);
      int64_t v87 = off_262D80;
      long long v88 = 0u;
      long long v89 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v87);
      uint64_t v90 = off_262D80;
      long long v91 = 0u;
      long long v92 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v90);
      std::string v93 = off_262D80;
      memset(v94, 0, sizeof(v94));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
      std::string v95 = off_262D80;
      memset(v96, 0, sizeof(v96));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v95);
      std::string v97 = off_262D80;
      memset(v98, 0, sizeof(v98));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v97);
      std::string v99 = off_262D80;
      long long v100 = 0u;
      long long v101 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v99);
      long long v102 = off_262D80;
      long long v103 = 0u;
      long long v104 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v102);
      std::string v105 = off_262D80;
      long long v106 = 0u;
      long long v107 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v105);
      long long v108 = off_262D80;
      long long v109 = 0u;
      long long v110 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v108);
      ++v30;
      v29 += v6;
    }
    while (v81 != v30);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, v82, 111, v26, v27);
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SaveLastState(a1, v78);
}

void sub_16640C(_Unwind_Exception *a1)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateForwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateForwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1397, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    std::string::size_type v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 248) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 272) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 296) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 320) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 344) + 48 * a2, a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  *(void *)(*(void *)(a1 + 248) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 272) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 296) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 320) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 344) + 48 * a2 + 32) = a4;
}

void sub_1668DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SaveLastState(uint64_t a1, int a2)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16, "SaveLastState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1700, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Saving last output and cell state for batch ", 44);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16);
  }
  int v4 = *(_DWORD *)(*(void *)(a1 + 272) + 48 * a2 + 20) - *(_DWORD *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 8) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, v5, 0, *(_DWORD *)(v5 + 20), 0, *(_DWORD *)(a1 + 176));
  uint64_t v6 = *(void *)(a1 + 272) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, v6, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(v6 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v7, v8);
  float v13 = off_262D80;
  long long v14 = 0u;
  long long v15 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v13);
  uint64_t v16 = off_262D80;
  long long v17 = 0u;
  long long v18 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v16);
  uint64_t v9 = 3 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, *(void *)(a1 + 8) + 16 * v9, 0, *(_DWORD *)(*(void *)(a1 + 8) + 16 * v9 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, *(void *)(a1 + 344) + 16 * v9, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(*(void *)(a1 + 344) + 16 * v9 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v10, v11);
  float v13 = off_262D80;
  long long v14 = 0u;
  long long v15 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v13);
  uint64_t v16 = off_262D80;
  long long v17 = 0u;
  long long v18 = 0u;
  *(void *)&double result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v16).n128_u64[0];
  return result;
}

void sub_166B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(), long long a10, long long a11, void (**a12)(), long long a13, long long a14)
{
  a9 = off_262D80;
  a10 = 0u;
  a11 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a9);
  a12 = off_262D80;
  a13 = 0u;
  a14 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a12);
  _Unwind_Resume(a1);
}

double virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 128), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (*(_DWORD *)(a1 + 96) == 1)
  {
    uint64_t v6 = *(void *)(a3 + 24);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateForwardBuffers(a1, 0, 1, v6);
    uint64_t v8 = *(void *)(a1 + 104);
    if (*(void *)(a1 + 112) != v8)
    {
      int v9 = *(_DWORD *)(v8 + 16);
      if (v9 >= 1)
      {
        if (v9 != 1) {
          kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_2E8.nreloc + 1, "boundary_[0].Dim() == 1", v7);
        }
        uint64_t v10 = *(void *)(a1 + 128);
        *(void *)(v10 + 32) = v6;
        kaldi::CuMatrix<float>::Resize(v10, 1, *(unsigned int *)(*(void *)(a1 + 8) + 16), 1u, 0);
      }
    }
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
    kaldi::CuVectorBase<float>::AddMatVec<signed char>();
  }
  kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_2E8.reloff, "ropts_.num_sequences == 1", v5);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 876);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

{
  void *v0;
  void v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 881);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc()
{
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc();
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  uint64_t v11 = *(unsigned int *)(a1 + 96);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers((uint64_t *)a1);
  int v13 = (int)v10 / (int)v11;
  if ((int)v10 % (int)v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_338.reserved2, "batch_size % num_utts == 0", v12);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v151, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 898, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v151, (uint64_t)"Running backward propagation for batch std::string::size_type size = ", 46);
    long long v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", which contains ", 17);
    long long v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" frames each from ", 18);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v151);
  }
  if (v13 < 2) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_338.reserved3, "frames_in_batch > 1 && \"LSTM backprop will not work with batches of single frames.\"", v12);
  }
  uint64_t v102 = a5;
  if (a5) {
    uint64_t v17 = a5;
  }
  else {
    uint64_t v17 = a4;
  }
  uint64_t v18 = *(void *)(v17 + 32);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateBackwardBuffers(a1, a6, v10, v18);
  uint64_t v21 = a6;
  uint64_t v22 = *(void *)(a1 + 248);
  uint64_t v23 = 3 * a6;
  uint64_t v24 = *(void *)(a1 + 440) + 16 * v23;
  uint64_t v25 = *(void *)(a1 + 368);
  uint64_t v105 = *(void *)(a1 + 416);
  uint64_t v26 = *(void *)(a1 + 104);
  uint64_t v103 = v24;
  if (*(void *)(a1 + 112) == v26 || (int v27 = *(_DWORD *)(v26 + 32 * v21 + 16), v27 < 1))
  {
    int v106 = 0;
  }
  else
  {
    if (v27 != v10) {
      kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", &stru_388.sectname[8], "boundary_[batch_index].Dim() == batch_size", v20);
    }
    uint64_t v28 = *(void *)(a1 + 128) + 48 * (int)v21;
    *(void *)(v28 + 32) = v18;
    int v106 = 1;
    kaldi::CuMatrix<float>::Resize(v28, v11, *(unsigned int *)(v24 + 16), 1u, 0);
  }
  uint64_t v29 = v22 + 16 * v23;
  uint64_t v30 = v25 + 16 * v23;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)v30, a4, 111, v19, v20);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v151, v29, 0, *(_DWORD *)(v29 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v148, v29, 0, *(_DWORD *)(v29 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v145, v29, 0, *(_DWORD *)(v29 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v142, v29, 0, *(_DWORD *)(v29 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  uint64_t v31 = v103;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v139, v103, 0, *(_DWORD *)(v103 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v136, v31, 0, *(_DWORD *)(v31 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v133, v31, 0, *(_DWORD *)(v31 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, v31, 0, *(_DWORD *)(v31 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v139, (uint64_t)&v151, (uint64_t)&v142, v32, v33);
  int v34 = v10 - v11;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, (uint64_t)&v136, v11, v34, 0, SDWORD2(v137));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, (uint64_t)&v148, v11, v34, 0, SDWORD2(v149));
  uint64_t v35 = *(void *)(a1 + 272) + 48 * (int)v21;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v121, v35, 0, v34, 0, *(_DWORD *)(v35 + 16));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v127, (uint64_t)&v124, (uint64_t)&v121, v36, v37);
  uint64_t v121 = off_262D80;
  long long v122 = 0u;
  long long v123 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v121);
  uint64_t v124 = off_262D80;
  long long v125 = 0u;
  long long v126 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v124);
  v127 = off_262D80;
  long long v128 = 0u;
  long long v129 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v127);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, (uint64_t)&v136, 0, v11, 0, SDWORD2(v137));
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v127);
  v127 = off_262D80;
  long long v128 = 0u;
  long long v129 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v127);
  if (v106)
  {
    uint64_t v40 = *(void *)(a1 + 128) + 48 * (int)v21;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, v40, 0, *(_DWORD *)(v40 + 20), 0, *(_DWORD *)(a1 + 176));
    kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v127);
    int v41 = v13 - 1;
    int v42 = v11;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, (uint64_t)&v136, v42, v11, 0, SDWORD2(v137));
      kaldi::CuSubVector<float>::CuSubVector(&v121, *(void *)(a1 + 104) + 32 * v21, v42, v11, v43);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v124, (uint64_t)&v127, (uint64_t)&v121, 0, v44);
      uint64_t v124 = off_262D80;
      long long v125 = 0u;
      long long v126 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v124);
      v42 += v11;
      --v41;
    }
    while (v41);
    v127 = off_262D80;
    long long v128 = 0u;
    long long v129 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v127);
  }
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v133, (uint64_t)&v145, *(void *)(a1 + 296) + 48 * (int)v21, v38, v39);
  kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)&v130, (uint64_t)&v142, (uint64_t)&v151, v45, v46);
  uint64_t v47 = v105 + 16 * v23;
  kaldi::CuMatrixBase<float>::DiffTanh(v47, *(void *)(a1 + 296) + 48 * (int)v21, (uint64_t)&v145, v48, v49);
  int v50 = v13 - 1;
  int v104 = v13 - 1;
  do
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, v30, v50 * v11, v11, 0, *(_DWORD *)(v30 + 16));
    uint64_t v51 = *(void *)(a1 + 392) + 48 * (int)v21;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, v51, v50 * v11, v11, 0, *(_DWORD *)(v51 + 16));
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v54 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v124, (uint64_t)&v127, 111, v54, &stru_68.sectname[7], 1.0, 0.0);
    }
    else
    {
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v124, (uint64_t)&v127, 111, v52, v53);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v121, (uint64_t)&v133, v50 * v11, v11, 0, SDWORD2(v134));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v121, (uint64_t)&v124, v55, v56, v57);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v118, v47, v50 * v11, v11, 0, *(_DWORD *)(v47 + 16));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v118, (uint64_t)&v124, v58, v59, v60);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v61 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
      if (*(_DWORD *)(v61 + 20) <= 2u) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v62);
      }
      unsigned int v63 = *(_DWORD *)(v61 + 16);
      uint64_t v64 = *(void *)(v61 + 32);
      v117[0] = *(void *)(v61 + 8) + 8 * *(int *)(v61 + 24);
      uint64_t v116 = &off_262E20;
      v117[1] = v63;
      v117[2] = v64;
      kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v121, 111, (uint64_t)&v116, v62, 1.0, 1.0);
    }
    if (v50 < v104)
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, v47, v11 + v11 * v50, v11, 0, *(_DWORD *)(v47 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, (uint64_t)&v148, v11 + v11 * v50, v11, 0, SDWORD2(v149));
      if (v106)
      {
        uint64_t v65 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v112, v65, 0, *(_DWORD *)(v65 + 20), 0, *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v112);
        kaldi::CuSubVector<float>::CuSubVector(&v110, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v66);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v112, (uint64_t)&v116, (uint64_t)&v110, 1, v67);
        *(_OWORD *)&v117[1] = *(_OWORD *)&v113[1];
        v117[0] = v113[0];
        v117[3] = v113[3];
        uint64_t v68 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v110, v68, 0, *(_DWORD *)(v68 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v110);
        kaldi::CuSubVector<float>::CuSubVector(v109, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v69);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v110, (uint64_t)&v114, (uint64_t)v109, 1, v70);
        v115[0] = v111[0];
        *(_OWORD *)&v115[1] = *(_OWORD *)&v111[1];
        v115[3] = v111[3];
        long long v110 = off_262D80;
        memset(v111, 0, sizeof(v111));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v110);
        uint64_t v112 = off_262D80;
        memset(v113, 0, sizeof(v113));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v112);
      }
      if (*(unsigned char *)(a1 + 208))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v112, (uint64_t)&v136, v11 + v11 * v50, v11, 0, SDWORD2(v137));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v110, (uint64_t)&v139, v11 + v11 * v50, v11, 0, SDWORD2(v140));
        if (v106)
        {
          uint64_t v71 = *(void *)(a1 + 128) + 48 * (int)v21;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)v109, v71, 0, *(_DWORD *)(v71 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v109);
          kaldi::CuSubVector<float>::CuSubVector(v108, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v72);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v109, (uint64_t)&v112, (uint64_t)v108, 1, v73);
          *(_OWORD *)&v113[1] = *(_OWORD *)&v109[2];
          v113[0] = v109[1];
          v113[3] = v109[4];
          uint64_t v74 = *(void *)(a1 + 128) + 48 * (int)v21;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)v108, v74, 0, *(_DWORD *)(v74 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v108);
          kaldi::CuSubVector<float>::CuSubVector(v107, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v75);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v108, (uint64_t)&v110, (uint64_t)v107, 1, v76);
          v111[0] = v108[1];
          *(_OWORD *)&v111[1] = *(_OWORD *)&v108[2];
          v111[3] = v108[4];
          v108[0] = off_262D80;
          memset(&v108[1], 0, 32);
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v108);
          v109[0] = off_262D80;
          memset(&v109[1], 0, 32);
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v109);
        }
        uint64_t v77 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v77 + 20) <= 1u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v78);
        }
        unsigned int v79 = *(_DWORD *)(v77 + 16);
        uint64_t v80 = *(void *)(v77 + 32);
        v109[1] = *(void *)(v77 + 8) + 4 * *(int *)(v77 + 24);
        v109[0] = &off_262E20;
        v109[2] = v79;
        v109[3] = v80;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v112, 111, (uint64_t)v109, v78, 1.0, 1.0);
        uint64_t v81 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v81 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v82);
        }
        unsigned int v83 = *(_DWORD *)(v81 + 16);
        uint64_t v84 = *(void *)(v81 + 32);
        v109[1] = *(void *)(v81 + 8);
        v109[0] = &off_262E20;
        v109[2] = v83;
        v109[3] = v84;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v110, 111, (uint64_t)v109, v82, 1.0, 1.0);
        long long v110 = off_262D80;
        memset(v111, 0, sizeof(v111));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v110);
        uint64_t v112 = off_262D80;
        memset(v113, 0, sizeof(v113));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v112);
      }
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v118, (uint64_t)&v116, 111, (uint64_t)&v114, &stru_68.sectname[7], 1.0, 1.0);
      uint64_t v114 = off_262D80;
      memset(v115, 0, sizeof(v115));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v114);
      uint64_t v116 = off_262D80;
      memset(v117, 0, sizeof(v117));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v116);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v139, v50 * v11, v11, 0, SDWORD2(v140));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v85, v86, v87);
    uint64_t v116 = off_262D80;
    memset(v117, 0, sizeof(v117));
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v116);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v130, v50 * v11, v11, 0, SDWORD2(v131));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v88, v89, v90);
    uint64_t v116 = off_262D80;
    memset(v117, 0, sizeof(v117));
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v116);
    if (v50 <= 0)
    {
      int v97 = v50 - 1;
    }
    else
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v136, v50 * v11, v11, 0, SDWORD2(v137));
      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v91, v92, v93);
      uint64_t v116 = off_262D80;
      memset(v117, 0, sizeof(v117));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v116);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, v103, v50 * v11, v11, 0, *(_DWORD *)(v103 + 16));
      if (v106)
      {
        uint64_t v94 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, v94, 0, *(_DWORD *)(v94 + 20), 0, v117[1]);
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v114);
        kaldi::CuSubVector<float>::CuSubVector(&v112, *(void *)(a1 + 104) + 32 * v21, v50 * v11, v11, v95);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v114, (uint64_t)&v116, (uint64_t)&v112, 1, v96);
        *(_OWORD *)&v117[1] = *(_OWORD *)&v115[1];
        v117[0] = v115[0];
        v117[3] = v115[3];
        uint64_t v114 = off_262D80;
        memset(v115, 0, sizeof(v115));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v114);
      }
      int v97 = v50 - 1;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, v30, (v50 - 1) * v11, v11, 0, *(_DWORD *)(v30 + 16));
      std::string v98 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v114, (uint64_t)&v116, 111, v98, &stru_68.sectname[7], 1.0, 1.0);
      uint64_t v114 = off_262D80;
      memset(v115, 0, sizeof(v115));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v114);
      uint64_t v116 = off_262D80;
      memset(v117, 0, sizeof(v117));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v116);
    }
    uint64_t v118 = off_262D80;
    long long v119 = 0u;
    long long v120 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v118);
    uint64_t v121 = off_262D80;
    long long v122 = 0u;
    long long v123 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v121);
    uint64_t v124 = off_262D80;
    long long v125 = 0u;
    long long v126 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v124);
    v127 = off_262D80;
    long long v128 = 0u;
    long long v129 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v127);
    BOOL v99 = v50 <= 0;
    int v50 = v97;
  }
  while (!v99);
  if (v102)
  {
    long long v100 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::AddMatMat<signed char>(v102, v103, 111, v100, &stru_68.sectname[7], 1.0, 0.0);
  }
  v130 = off_262D80;
  long long v131 = 0u;
  long long v132 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v130);
  v133 = off_262D80;
  long long v134 = 0u;
  long long v135 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v133);
  v136 = off_262D80;
  long long v137 = 0u;
  long long v138 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v136);
  v139 = off_262D80;
  long long v140 = 0u;
  long long v141 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v139);
  v142 = off_262D80;
  long long v143 = 0u;
  long long v144 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v142);
  v145 = off_262D80;
  long long v146 = 0u;
  long long v147 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v145);
  v148 = off_262D80;
  long long v149 = 0u;
  long long v150 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v148);
  v151 = off_262D80;
  long long v152 = 0u;
  long long v153 = 0u;
  *(void *)&double result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v151).n128_u64[0];
  return result;
}

void sub_1686AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a71 = off_262D80;
  a72 = 0u;
  *(_OWORD *)&STACK[0x208] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a71);
  STACK[0x218] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x220] = 0u;
  *(_OWORD *)&STACK[0x230] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x218]);
  STACK[0x240] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x248] = 0u;
  *(_OWORD *)&STACK[0x258] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x240]);
  STACK[0x268] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x270] = 0u;
  *(_OWORD *)&STACK[0x280] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x268]);
  STACK[0x290] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x298] = 0u;
  *(_OWORD *)&STACK[0x2A8] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x290]);
  STACK[0x2B8] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x2C0] = 0u;
  *(_OWORD *)&STACK[0x2D0] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x2B8]);
  STACK[0x2E0] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x2E8] = 0u;
  *(_OWORD *)&STACK[0x2F8] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x2E0]);
  STACK[0x308] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x310] = 0u;
  *(_OWORD *)&STACK[0x320] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x308]);
  STACK[0x330] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x338] = 0u;
  *(_OWORD *)&STACK[0x348] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x330]);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateBackwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateBackwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1413, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 368) + 48 * a2, a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 392) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 416) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 440) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  *(void *)(*(void *)(a1 + 368) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 392) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 416) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 440) + 48 * a2 + 32) = a4;
}

void sub_168F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc((uint64_t)a1 + *(void *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 80) <= (int)a5) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_3D8.align + 1, "batch_index < ropts_.num_subbatches", a5);
  }
  int v7 = *(_DWORD *)(a1 + 96);
  int v8 = *(_DWORD *)(a2 + 20);
  if (v8 % v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_3D8.reloff + 1, "batch_size % num_utts == 0", a5);
  }
  int v9 = (int)a5;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1043, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"Accumulating gradients for batch id = ", 38);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    std::string::size_type v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55);
  }
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(a1);
  uint64_t v38 = *(void *)(a1 + 272);
  long long v14 = (_DWORD *)(*(void *)(a1 + 440) + 48 * v9);
  float v15 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 480) + 4 * v9) = v8;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v55, (uint64_t)v14, 0, v14[5], 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v52, (uint64_t)v14, 0, v14[5], (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, (uint64_t)v14, 0, v14[5], (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v9) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v9) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v9) + 24) = a4;
  if (*(unsigned char *)(a1 + 208)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v9) + 32) = a4;
  }
  if (*(unsigned char *)(a1 + 224)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v9) + 32) = a4;
  }
  uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v9);
  kaldi::CuMatrixBase<float>::AddMatMat(v16, (uint64_t)v14, CblasTrans, a2, &stru_68.sectname[7], 1.0, v15);
  uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v9);
  int v18 = v8 - v7;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)v14, v7, v8 - v7, 0, v14[4]);
  uint64_t v19 = *(void *)(a1 + 344) + 48 * v9;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v19, 0, v8 - v7, 0, *(_DWORD *)(v19 + 16));
  kaldi::CuMatrixBase<float>::AddMatMat(v17, (uint64_t)&v46, CblasTrans, (uint64_t)&v43, &stru_68.sectname[7], 1.0, v15);
  uint64_t v43 = off_262D80;
  long long v44 = 0u;
  long long v45 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
  uint64_t v46 = off_262D80;
  long long v47 = 0u;
  long long v48 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
  uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v9);
  kaldi::CuVectorBase<float>::AddRowSumMat(v20, v14, 1.0, v15, v21, v22, v23);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v9);
    if (!*(_DWORD *)(v24 + 20)) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
    }
    unsigned int v26 = *(_DWORD *)(v24 + 16);
    uint64_t v27 = *(void *)(v24 + 32);
    uint64_t v40 = *(void *)(v24 + 8);
    uint64_t v39 = &off_262E20;
    uint64_t v41 = v26;
    uint64_t v42 = v27;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)&v55, v7, v18, 0, SDWORD2(v56));
    uint64_t v28 = v38 + 48 * v9;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v28, 0, v18, 0, *(_DWORD *)(v28 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v39, (uint64_t)&v46, 112, (uint64_t)&v43, 111, 1.0, v15);
    uint64_t v43 = off_262D80;
    long long v44 = 0u;
    long long v45 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
    uint64_t v46 = off_262D80;
    long long v47 = 0u;
    long long v48 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
    uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v29 + 20) <= 1u) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v30);
    }
    unsigned int v31 = *(_DWORD *)(v29 + 16);
    uint64_t v32 = *(void *)(v29 + 32);
    uint64_t v40 = *(void *)(v29 + 8) + 4 * *(int *)(v29 + 24);
    uint64_t v39 = &off_262E20;
    uint64_t v41 = v31;
    uint64_t v42 = v32;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)&v52, v7, v18, 0, SDWORD2(v53));
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v28, 0, v18, 0, *(_DWORD *)(v28 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v39, (uint64_t)&v46, 112, (uint64_t)&v43, 111, 1.0, v15);
    uint64_t v43 = off_262D80;
    long long v44 = 0u;
    long long v45 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
    uint64_t v46 = off_262D80;
    long long v47 = 0u;
    long long v48 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
    uint64_t v33 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v33 + 20) <= 2u) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v34);
    }
    unsigned int v35 = *(_DWORD *)(v33 + 16);
    uint64_t v36 = *(void *)(v33 + 32);
    *(void *)&long long v47 = *(void *)(v33 + 8) + 8 * *(int *)(v33 + 24);
    uint64_t v46 = &off_262E20;
    *((void *)&v47 + 1) = v35;
    *(void *)&long long v48 = v36;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v46, (uint64_t)&v49, 112, v28, 111, 1.0, v15);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v37 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v9);
    kaldi::CuMatrixBase<float>::AddMatMat(v37, *(void *)(a1 + 368) + 48 * v9, CblasTrans, *(void *)(a1 + 320) + 48 * v9, &stru_68.sectname[7], 1.0, v15);
  }
  uint64_t v49 = off_262D80;
  long long v50 = 0u;
  long long v51 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v49);
  uint64_t v52 = off_262D80;
  long long v53 = 0u;
  long long v54 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v52);
  uint64_t v55 = off_262D80;
  long long v56 = 0u;
  long long v57 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v55);
}

void sub_169684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void (**a25)(),long long a26,long long a27,void (**a28)(),long long a29,long long a30,void (**a31)(),long long a32,long long a33)
{
  a25 = off_262D80;
  a26 = 0u;
  a27 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a25);
  a28 = off_262D80;
  a29 = 0u;
  a30 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a28);
  a31 = off_262D80;
  a32 = 0u;
  a33 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a31);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 528)) {
    return;
  }
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  if (*(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1332);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "input_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 568) != *(void *)(a1 + 560))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1333);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "recurrent_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 616) != *(void *)(a1 + 608))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1334);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "bias_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 208) && *(void *)(a1 + 592) != *(void *)(a1 + 584))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1335);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "peephole_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 224) && *(void *)(a1 + 640) != *(void *)(a1 + 632))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1336);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "projection_weights_gradient_.size() == 0");
LABEL_34:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 536), v3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 560), v3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 608), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 656), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 680), v3);
  std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 728), v3);
  if (v3 >= 1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 208))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 584), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 704), v3);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 632), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 752), v3);
  }
  *(unsigned char *)(a1 + 528) = 1;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1391, 2);
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocated memory for the gradients: ", 36);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 272))(__p, a1);
    if ((v8 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      uint64_t v6 = v8;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
}

void sub_16A048()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1116);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v7 = *(void *)(a1 + 104);
  unsigned __int8 v8 = (void *)(a1 + 104);
  if (v7 == *(void *)(a1 + 112))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 104), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 128), *(int *)(a1 + 80));
    uint64_t v7 = *(void *)(a1 + 104);
  }
  kaldi::CuVector<float>::Resize(v7 + 32 * a3, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  int v13 = (_DWORD *)(*v8 + 32 * a3);

  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2, v10, v11, v12);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  *((_WORD *)a1 + 120) = 0;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetTrainOptions(void *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  int v2 = (kaldi::nnet1::RecurrentBaseComponent *)((char *)a1 + *(void *)(*a1 - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 120) = 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::HistoryStateSize(uint64_t a1)
{
  return (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) + *(_DWORD *)(a1 + 176));
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetHistoryState(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", &stru_6A8.sectname[6], "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  uint64_t v8 = *(void *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(v8 + 20), *(unsigned int *)(v8 + 16), 1u, 0);
  uint64_t v11 = *(void *)(a1 + 8) + 48 * a3;

  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, v11, 111, v9, v10);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", &stru_6A8.sectname[13], "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  if ((a3 & 0x80000000) != 0
    || (uint64_t v7 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v7 + 20) <= (signed int)a3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", &stru_6A8.sectname[14], "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", a5);
  }
  unsigned int v9 = a4;
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(v7 + 16), 1u, a4, a5);
  uint64_t v13 = *(void *)(a1 + 8) + 48 * v9;
  if (*(_DWORD *)(v13 + 20) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
  }
  uint64_t v14 = *(void *)(v13 + 8) + 4 * (int)(*(_DWORD *)(v13 + 24) * a3);
  unsigned int v15 = *(_DWORD *)(v13 + 16);
  uint64_t v16 = *(void *)(v13 + 32);
  v18[1] = v14;
  v18[0] = &off_262E20;
  v18[2] = v15;
  v18[3] = v16;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v18, v10, v11, v12);
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.size + 5, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v7);
  }
  uint64_t v8 = (unsigned int *)(*(void *)(a1 + 8) + 48 * a3);
  if (*(_DWORD *)(a2 + 20) != v8[5]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.size + 6, "history.NumRows() == history_state_[batch_index].NumRows()", v7);
  }
  if (*(_DWORD *)(a2 + 16) != v8[4]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.size + 7, "history.NumCols() == history_state_[batch_index].NumCols()", v7);
  }

  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v8, a2, 111, v6, v7);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetHistoryState(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.align + 2, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v10);
  }
  if (a3 < 0 || (uint64_t v11 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v11 + 20) <= a3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.align + 3, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", v10);
  }
  unsigned int v12 = *(_DWORD *)(a2 + 16);
  if (v12 != *(_DWORD *)(v11 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.reloff, "history.Dim() == history_state_[batch_index].NumCols()", v10);
  }
  uint64_t v13 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * a3;
  uint64_t v14 = *(void *)(v11 + 32);
  v16[1] = v13;
  v16[0] = &off_262E20;
  v16[2] = v12;
  v16[3] = v14;
  return kaldi::CuVectorBase<float>::CopyFromVec(v16, a2, v8, v9, v10);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.nreloc + 3, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v8);
  }
  if (a2[1] != *(_DWORD *)(*(void *)(a1 + 8) + 48 * a4 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.flags, "sequence_idx.size() == history_state_[batch_index].NumRows()", v8);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  *(void *)(*(void *)(a1 + 8) + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    unint64_t v10 = 0;
    do
    {
      if ((*(void *)(*a2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10))
      {
        uint64_t v11 = *(void *)(a1 + 8) + 48 * a4;
        if (v10 >= *(unsigned int *)(v11 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v9);
        }
        uint64_t v12 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * (int)v10;
        unsigned int v13 = *(_DWORD *)(v11 + 16);
        uint64_t v14 = *(void *)(v11 + 32);
        v22[1] = v12;
        v22[0] = &off_262E20;
        v22[2] = v13;
        v22[3] = v14;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v22);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          unsigned int v15 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
        }
      }
      ++v10;
    }
    while (a2[1] > v10);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1779, 3);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v21 & 0x80u) == 0) {
      uint64_t v17 = __p;
    }
    else {
      uint64_t v17 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      uint64_t v18 = v21;
    }
    else {
      uint64_t v18 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22);
  }
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_16A9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ResetHistoryState(void *a1)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  for (uint64_t i = a1[1]; i != a1[2]; i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(unsigned char *)(result + 528) = 0;
  return result;
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(void *result, int a2, float a3)
{
  int v3 = (float *)((char *)result + *(void *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((unsigned char *)v3 + 528) = 0;
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(uint64_t a1, unsigned int a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"NormalizeGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_568.offset + 2, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a6);
  }
  float v8 = a3;
  int v9 = *(_DWORD *)(a1 + 156);
  if (v9 == 1)
  {
    if (a3 > 0.0)
    {
      if (*(unsigned char *)(a1 + 84)) {
        float v8 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
      }
      uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v19, v8);
      uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v20, v8);
      uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v21, v8);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v22, v8);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v23, v8);
      }
    }
  }
  else if (v9 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *(void *)(a1 + 656) + 48 * a2, v8);
      uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, *(void *)(a1 + 680) + 48 * a2, v8);
      uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, *(void *)(a1 + 728) + 32 * a2, v8, v13, v14, v15);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v16, *(void *)(a1 + 704) + 48 * a2, v8);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a2);
        uint64_t v18 = *(void *)(a1 + 752) + 48 * a2;
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v17, v18, v8);
      }
    }
  }
  else if (a3 > 0.0 && v9 == 2)
  {
    uint64_t v24 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v8 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
    }
    uint64_t v25 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v25, (unsigned int *)(*(void *)(a1 + 656) + 48 * v24), v8, v26, v27, v28);
    uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v29, (unsigned int *)(*(void *)(a1 + 680) + 48 * v24), v8, v30, v31, v32);
    uint64_t v33 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v33, (_DWORD *)(*(void *)(a1 + 728) + 32 * v24), v34, v35, v36, v8);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v37 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v37, (unsigned int *)(*(void *)(a1 + 704) + 48 * v24), v8, v38, v39, v40);
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v41 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a2);
      long long v45 = (unsigned int *)(*(void *)(a1 + 752) + 48 * v24);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v41, v45, v8, v42, v43, v44);
    }
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
  *a3 = result;
  if (*(void *)(a1 + 544) == *(void *)(a1 + 536) || *(void *)(a1 + 568) == *(void *)(a1 + 560))
  {
    int v31 = 0;
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v7 = 0;
  }
  else {
    int v7 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v7);
  int v13 = kaldi::CuMatrixBase<float>::CountZeros(v8, v9, v10, v11, v12);
  uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v7);
  int v19 = kaldi::CuMatrixBase<float>::CountZeros(v14, v15, v16, v17, v18) + v13;
  uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v7);
  uint64_t result = kaldi::CuVectorBase<float>::CountZeros(v20);
  *a2 = v19 + result;
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v21, v22, v23, v24, v25);
    *a2 += result;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v26 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v26, v27, v28, v29, v30);
    int v31 = *a2 + result;
LABEL_11:
    *a2 = v31;
  }
  return result;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(void *a1, _DWORD *a2, _DWORD *a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr((uint64_t)a1 + *(void *)(*a1 - 56), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1532);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetInternalMemory(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(void *)(a1 + 272) + 48 * a3, 111, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::EnsureBuffers(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 240))
  {
    unint64_t v2 = *(int *)(a1 + 80);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 8), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 272), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 296), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 320), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 344), v2);
    if ((int)v2 >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 8) + v3, *(unsigned int *)(a1 + 96), (*(_DWORD *)(a1 + 12 + *(void *)(*(void *)a1 - 24)) + *(_DWORD *)(a1 + 176)), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 480), v2);
    *(unsigned char *)(a1 + 240) = 1;
  }
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Check(uint64_t a1)
{
  unint64_t v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(v2) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1642);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #rows = ", 22);
    uint64_t v9 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumRows(v9);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; expecting ", 12);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  uint64_t v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v3) != *(_DWORD *)(a1
                                                                                 + *(void *)(*(void *)a1 - 24)
                                                                                 + 8))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1646);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #columns = ", 25);
    uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v12);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, " (same as input dim)");
    goto LABEL_28;
  }
  int v4 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(v4) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1650);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #rows = ", 26);
    uint64_t v15 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumRows(v15);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; expecting ", 12);
    uint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v5) != *(_DWORD *)(a1
                                                                                 + *(void *)(*(void *)a1 - 24)
                                                                                 + 12))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1654);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #columns = ", 29);
    uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v18);
    int v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"; expecting ", 12);
    uint64_t v20 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, " (same as output dim)");
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 208))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1) + 20) != 3)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1659);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #rows = ", 25);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
      uint64_t v23 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; expecting ", 12);
      std::ostream::operator<<();
      goto LABEL_28;
    }
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1) + 16) != *(_DWORD *)(a1 + 176))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1662);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #columns = ", 28);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"; expecting ", 12);
      uint64_t v25 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, " (same as #cells)");
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1) + 16) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1667);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Bias dim = ", 11);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
    uint64_t v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"; expecting ", 12);
    uint64_t v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    if (kaldi::QuantizedMatrixBase<short>::NumRows(v6) == *(_DWORD *)(a1
                                                                                   + *(void *)(*(void *)a1 - 24)
                                                                                   + 12))
    {
      uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      if (kaldi::QuantizedMatrixBase<short>::NumCols(v7) == *(_DWORD *)(a1 + 176)) {
        goto LABEL_12;
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1675);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #columns = ", 30);
      uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrixBase<short>::NumCols(v29);
      uint64_t v30 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"; expecting ", 12);
      int v31 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, " (same as #cells)");
    }
    else
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1671);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #rows = ", 27);
      uint64_t v26 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrixBase<short>::NumRows(v26);
      uint64_t v27 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"; expecting ", 12);
      uint64_t v28 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, " (same as output dim)");
    }
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
LABEL_12:
  if (*(float *)(a1 + 464) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1681);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 468) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1684);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"projection_learn_rate_coeff_ must not be negative; found: ",
      58);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 472) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1688);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 152) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1691);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  float result = *(float *)(a1 + 476);
  if (result < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1694);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_cell_values_ must not be negative; found: ",
      46);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  return result;
}

void sub_16B804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 856) = a2;
  *(_DWORD *)(a1 + 860) = a3;
  *(_WORD *)(a1 + 864) = 0;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 848) = off_266498;
  *(void *)(a1 + 896) = off_26E7B8;
  *(_OWORD *)(a1 + 904) = xmmword_20CEC0;
  *(void *)(a1 + 920) = 0x3BF800000;
  *(_DWORD *)(a1 + 928) = 1;
  *(_WORD *)(a1 + 932) = 0;
  *(unsigned char *)(a1 + 934) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (uint64_t *)off_26D398);
  *(void *)uint64_t v4 = off_26CF88;
  *(void *)(v4 + 848) = off_26D278;
  *(void *)(v4 + 160) = off_26D118;
  *(void *)(v4 + 168) = off_26D140;
  *(_DWORD *)(v4 + 176) = a3;
  *(void *)(v4 + 192) = 0;
  *(void *)(v4 + 200) = 0;
  *(void *)(v4 + 184) = 0;
  *(_WORD *)(v4 + 208) = 1;
  *(void *)(v4 + 216) = 0;
  *(unsigned char *)(v4 + 224) = 0;
  *(void *)(v4 + 232) = 0;
  *(_WORD *)(v4 + 240) = 0;
  *(void *)(v4 + 456) = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(void *)(v4 + 464) = 0x3DCCCCCD3F800000;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_OWORD *)(v4 + 488) = 0u;
  *(_OWORD *)(v4 + 504) = 0u;
  *(_OWORD *)(v4 + 513) = 0u;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_OWORD *)(v4 + 552) = 0u;
  *(_OWORD *)(v4 + 568) = 0u;
  *(_OWORD *)(v4 + 584) = 0u;
  *(_OWORD *)(v4 + 600) = 0u;
  *(_OWORD *)(v4 + 616) = 0u;
  *(_OWORD *)(v4 + 632) = 0u;
  *(_OWORD *)(v4 + 648) = 0u;
  *(_OWORD *)(v4 + 664) = 0u;
  *(_OWORD *)(v4 + 680) = 0u;
  *(_OWORD *)(v4 + 696) = 0u;
  *(_OWORD *)(v4 + 712) = 0u;
  *(_OWORD *)(v4 + 728) = 0u;
  *(_OWORD *)(v4 + 744) = 0u;
  *(_OWORD *)(v4 + 760) = 0u;
  *(_OWORD *)(v4 + 776) = 0u;
  *(_OWORD *)(v4 + 792) = 0u;
  *(_OWORD *)(v4 + 808) = 0u;
  *(_OWORD *)(v4 + 824) = 0u;
  *(void *)(v4 + 840) = 0;
  return result;
}

void sub_16BA18(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 257);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 258);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 262);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 263);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 268);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 269);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 273);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 274);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 279);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 280);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 284);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 285);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 290);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 291);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 292);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 296);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 297);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 298);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 303);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 304);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 305);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 309);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 310);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 311);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = off_264E70;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = off_266498;
  *(void *)(a1 + 896) = off_26E7B8;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)off_26D398, a2);
  *(void *)a1 = off_26CF88;
  *(void *)(a1 + 848) = off_26D278;
  *(void *)(a1 + 160) = off_26D118;
  *(void *)(a1 + 168) = off_26D140;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 151);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  if (*(void *)(a2 + 184)) {
    kaldi::NewCuSubOrMat<short>();
  }
  if (*(void *)(a2 + 192)) {
    kaldi::NewCuSubOrMat<short>();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v10 = *(void *)(a2 + 216);
  if (v10) {
    kaldi::NewCuSubOrMat<float>(v10, 0);
  }
  if (*(void *)(a2 + 232)) {
    kaldi::NewCuSubOrMat<short>();
  }
  uint64_t v11 = *(void *)(a1 + 544);
  uint64_t v12 = *(void *)(a1 + 536);
  uint64_t v13 = (v11 - v12) >> 3;
  if (v13 != (uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    p_flags = (_DWORD *)(&stru_68 + 58);
    goto LABEL_41;
  }
  if (v13 != (uint64_t)(*(void *)(a1 + 616) - *(void *)(a1 + 608)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == bias_gradient_.size()";
    p_flags = (_DWORD *)(&stru_68 + 59);
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 208) && v13 != (uint64_t)(*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    p_flags = (_DWORD *)(&stru_68 + 61);
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 224) && v13 != (uint64_t)(*(void *)(a1 + 640) - *(void *)(a1 + 632)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    p_flags = &stru_68.flags;
LABEL_41:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)p_flags, v20, v9);
  }
  if (v11 != v12)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v15, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v14))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v16, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v14))
      {
        kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a2, v14);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v14))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v17, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v14))
      {
        uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v18, 0);
      }
      ++v14;
    }
    while (v14 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_16C99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,kaldi::nnet1::UpdatableComponent *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t a30)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a11;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  uint64_t v33 = *a14;
  if (*a14)
  {
    *((void *)v30 + 64) = v33;
    operator delete(v33);
  }
  uint64_t v34 = *a15;
  if (*a15)
  {
    *((void *)v30 + 61) = v34;
    operator delete(v34);
  }
  a30 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a22;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a23;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a27, 0);
  uint64_t v35 = *((void *)v30 + 27);
  *((void *)v30 + 27) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 24))(v35);
  }
  uint64_t v36 = *((void *)v30 + 25);
  *((void *)v30 + 25) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a29, 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a19);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a20);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v30, (uint64_t *)off_26D398);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a21);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v4 - 24)) = a2[3];
  *(void *)(a1 + 160) = off_26D118;
  *(void *)(a1 + 168) = off_26D140;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 776));
  uint64_t v9 = (void **)(a1 + 752);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 728);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 704);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 680);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 656);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 632);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 608);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 584);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 560);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 536);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v5 = *(void **)(a1 + 504);
  if (v5)
  {
    *(void *)(a1 + 512) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 480);
  if (v6)
  {
    *(void *)(a1 + 488) = v6;
    operator delete(v6);
  }
  uint64_t v9 = (void **)(a1 + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 320);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 296);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 272);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), 0);
  uint64_t v7 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1 + 168);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1 + 160);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, a2 + 1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v2 + 848));
  return a1;
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 688));
}

{
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 680));
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(a1 - 160);
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(a1 - 168);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(void *a1)
{
  uint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 848);

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent((uint64_t)a1 + *(void *)(*a1 - 24));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));

  operator delete();
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Copy()
{
}

void sub_16D15C()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Copy()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void sub_16D1F8()
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = off_264E70;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = off_266498;
  *(void *)(a1 + 896) = off_26E7B8;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)off_26CF58, a2);
  *(void *)a1 = off_26CB48;
  *(void *)(a1 + 848) = off_26CE38;
  *(void *)(a1 + 160) = off_26CCD8;
  *(void *)(a1 + 168) = off_26CD00;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 248);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v10 = *(void *)(a2 + 216);
  if (v10) {
    kaldi::NewCuSubOrMat<float>(v10, 0);
  }
  if (*(void *)(a2 + 232)) {
    operator new();
  }
  uint64_t v11 = *(void *)(a1 + 544);
  uint64_t v12 = *(void *)(a1 + 536);
  uint64_t v13 = (v11 - v12) >> 3;
  if (v13 != (uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    uint64_t v21 = (unsigned char *)(&stru_B8 + 75);
    goto LABEL_41;
  }
  if (v13 != (uint64_t)(*(void *)(a1 + 616) - *(void *)(a1 + 608)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == bias_gradient_.size()";
    uint64_t v21 = (unsigned char *)(&stru_B8 + 76);
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 208) && v13 != (uint64_t)(*(void *)(a1 + 592) - *(void *)(a1 + 584)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    uint64_t v21 = (unsigned char *)(&stru_B8 + 78);
    goto LABEL_41;
  }
  if (*(unsigned char *)(a1 + 224) && v13 != (uint64_t)(*(void *)(a1 + 640) - *(void *)(a1 + 632)) >> 3)
  {
    uint64_t v20 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    uint64_t v21 = &stru_108.sectname[1];
LABEL_41:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", v21, v20, v9);
  }
  if (v11 != v12)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v15, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v14))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v16, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v14))
      {
        kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a2, v14);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v14))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v17, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v14))
      {
        uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a2, v14);
        kaldi::NewCuSubOrMat<float>(v18, 0);
      }
      ++v14;
    }
    while (v14 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_16DD38()
{
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

void sub_16E0B4()
{
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitData(uint64_t a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  int v72 = -1;
  int v73 = v4;
  int v70 = 0x40000000;
  int v71 = -1073741824;
  int v68 = -1073741824;
  int v69 = 1036831949;
  int v67 = 0x40000000;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)((char *)&def_5A5E8 + 2), &v66);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &v65);
  memset(v64, 0, sizeof(v64));
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_210;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v64, v5, v6);
    if ((SHIBYTE(v64[2]) & 0x80000000) == 0)
    {
      uint64_t v9 = v64;
      switch(HIBYTE(v64[2]))
      {
        case 8:
          goto LABEL_44;
        case 9:
          BOOL v10 = v64[0] == 0x6D726F4E78614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 472);
          if (v10) {
            goto LABEL_202;
          }
          BOOL v12 = v64[0] == 0x6461724778614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 152);
          if (v12) {
            goto LABEL_202;
          }
          BOOL v13 = v64[0] == 0x6C6C654378614D3CLL && LOBYTE(v64[1]) == 62;
          uint64_t v11 = (int *)(a1 + 476);
          if (v13) {
            goto LABEL_202;
          }
          if ((v64[2] & 0x8000000000000000) != 0) {
            goto LABEL_120;
          }
          goto LABEL_43;
        case 0xA:
          if (v64[0] == 0x6C6C65436D754E3CLL && LOWORD(v64[1]) == 15987) {
            goto LABEL_205;
          }
          if (v64[0] != 0x61654D736169423CLL || LOWORD(v64[1]) != 15982) {
            goto LABEL_209;
          }
          goto LABEL_161;
        case 0xB:
          if (v64[0] != 0x6E6152736169423CLL || *(void *)((char *)v64 + 3) != 0x3E65676E61527361) {
            goto LABEL_209;
          }
          goto LABEL_107;
        case 0xC:
          if (v64[0] == 0x536D6F646E61523CLL && LODWORD(v64[1]) == 1046766949) {
            goto LABEL_206;
          }
          if ((v64[2] & 0x8000000000000000) != 0) {
            goto LABEL_126;
          }
LABEL_43:
          if (HIBYTE(v64[2]) != 8) {
            goto LABEL_209;
          }
LABEL_44:
          if (v64[0] == 0x3E706565506F4E3CLL) {
            goto LABEL_151;
          }
          if ((v64[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_129;
        case 0xD:
          if (v64[0] != 0x74536D617261503CLL || *(void *)((char *)v64 + 5) != 0x3E7665646474536DLL) {
            goto LABEL_209;
          }
          goto LABEL_185;
        case 0xF:
          BOOL v33 = v64[0] == 0x61526E7261654C3CLL && *(void *)((char *)v64 + 7) == 0x3E66656F43657461;
          goto LABEL_189;
        case 0x12:
          if (v64[0] == 0x6E6569646172473CLL && v64[1] == 0x7079546D726F4E74 && LOWORD(v64[2]) == 15973) {
            goto LABEL_204;
          }
          if (v64[0] == 0x4374757074754F3CLL && v64[1] == 0x65756C61566C6C65 && LOWORD(v64[2]) == 15987) {
            goto LABEL_208;
          }
          if ((v64[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_138;
        case 0x13:
          goto LABEL_141;
        case 0x14:
          if (v64[0] != 0x47746567726F463CLL || v64[1] != 0x4D73616942657461 || LODWORD(v64[2]) != 1047421285) {
            goto LABEL_209;
          }
          goto LABEL_170;
        case 0x15:
          if (v64[0] != 0x47746567726F463CLL
            || v64[1] != 0x5273616942657461
            || *(void *)((char *)&v64[1] + 5) != 0x3E65676E61527361)
          {
            goto LABEL_209;
          }
          goto LABEL_179;
        case 0x19:
          BOOL v22 = v64[0] == 0x7463656A6F72503CLL
             && v64[1] == 0x6E7261654C6E6F69
             && v64[2] == 0x66656F4365746152
             && v65.__r_.__value_.__s.__data_[0] == 62;
          goto LABEL_200;
        default:
          goto LABEL_209;
      }
    }
    uint64_t v14 = v64[1];
    switch(v64[1])
    {
      case 9:
        BOOL v15 = *(void *)v64[0] == 0x6D726F4E78614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
        uint64_t v11 = (int *)(a1 + 472);
        if (!v15)
        {
          BOOL v16 = *(void *)v64[0] == 0x6461724778614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
          uint64_t v11 = (int *)(a1 + 152);
          if (!v16) {
            goto LABEL_116;
          }
        }
        goto LABEL_202;
      case 0xALL:
        if (*(void *)v64[0] == 0x6C6C65436D754E3CLL && *(_WORD *)(v64[0] + 8) == 15987)
        {
LABEL_205:
          long long v56 = &v73;
LABEL_207:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v56, v7, v8);
          break;
        }
        if (*(void *)v64[0] != 0x61654D736169423CLL || *(_WORD *)(v64[0] + 8) != 15982) {
          goto LABEL_209;
        }
LABEL_161:
        uint64_t v11 = &v71;
LABEL_202:
        kaldi::ReadBasicType<float>(a2, 0, (float *)v11, v7, v8);
        break;
      case 0xBLL:
        if (*(void *)v64[0] != 0x6E6152736169423CLL || *(void *)(v64[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_209;
        }
LABEL_107:
        uint64_t v11 = &v70;
        goto LABEL_202;
      case 0xDLL:
        if (*(void *)v64[0] != 0x74536D617261503CLL || *(void *)(v64[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_209;
        }
LABEL_185:
        uint64_t v11 = &v69;
        goto LABEL_202;
      case 0xFLL:
        BOOL v33 = *(void *)v64[0] == 0x61526E7261654C3CLL && *(void *)(v64[0] + 7) == 0x3E66656F43657461;
LABEL_189:
        uint64_t v11 = (int *)(a1 + 464);
        if (!v33) {
          goto LABEL_209;
        }
        goto LABEL_202;
      case 0x12:
        if (*(void *)v64[0] == 0x6E6569646172473CLL
          && *(void *)(v64[0] + 8) == 0x7079546D726F4E74
          && *(_WORD *)(v64[0] + 16) == 15973)
        {
LABEL_204:
          uint64_t v46 = &v65;
          goto LABEL_150;
        }
        if (v64[1] != 9) {
          goto LABEL_121;
        }
LABEL_116:
        BOOL v37 = *(void *)v64[0] == 0x6C6C654378614D3CLL && *(unsigned char *)(v64[0] + 8) == 62;
        uint64_t v11 = (int *)(a1 + 476);
        if (v37) {
          goto LABEL_202;
        }
LABEL_120:
        uint64_t v14 = v64[1];
LABEL_121:
        if (v14 != 12) {
          goto LABEL_127;
        }
        if (*(void *)v64[0] == 0x536D6F646E61523CLL && *(_DWORD *)(v64[0] + 8) == 1046766949)
        {
LABEL_206:
          long long v56 = &v72;
          goto LABEL_207;
        }
LABEL_126:
        uint64_t v14 = v64[1];
LABEL_127:
        if (v14 == 8)
        {
          if (*(void *)v64[0] == 0x3E706565506F4E3CLL)
          {
LABEL_151:
            *(unsigned char *)(a1 + 208) = 0;
            break;
          }
LABEL_129:
          uint64_t v14 = v64[1];
        }
        if (v14 != 18) {
          goto LABEL_139;
        }
        if (*(void *)v64[0] != 0x4374757074754F3CLL
          || *(void *)(v64[0] + 8) != 0x65756C61566C6C65
          || *(_WORD *)(v64[0] + 16) != 15987)
        {
LABEL_138:
          uint64_t v14 = v64[1];
LABEL_139:
          if (v14 != 19) {
            goto LABEL_209;
          }
          uint64_t v9 = (uint64_t *)v64[0];
LABEL_141:
          uint64_t v41 = *v9;
          uint64_t v42 = v9[1];
          uint64_t v43 = *(uint64_t *)((char *)v9 + 11);
          BOOL v44 = v41 == 0x61725474696E493CLL && v42 == 0x79546D726F66736ELL;
          if (!v44 || v43 != 0x3E657079546D726FLL)
          {
LABEL_209:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v64, "</Component>"))
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v63, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 351);
              long long v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Invalid token ", 14);
              if (v64[2] >= 0) {
                uint64_t v58 = v64;
              }
              else {
                uint64_t v58 = (void *)v64[0];
              }
              if (v64[2] >= 0) {
                uint64_t v59 = HIBYTE(v64[2]);
              }
              else {
                uint64_t v59 = v64[1];
              }
              uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
              uint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)". Allowed tokens: ", 18);
              uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"(NumCells|BiasMean|BiasRange|ForgetGateBiasMean|ForgetGateBiasRange|ParamStddev|LearnRateCoef|ProjectionLearnRateCoef|MaxNorm|", 126);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"MaxGrad|MaxCell|NoPeep|InitTransformType|GradientNormType|RandomSeed)", 69);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v63);
            }
LABEL_210:
            kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateParams(a1, v73);
          }
          uint64_t v46 = &v66;
LABEL_150:
          kaldi::ReadToken(a2, 0, (uint64_t)v46, v7, v8);
          break;
        }
LABEL_208:
        *(unsigned char *)(a1 + 209) = 1;
        break;
      case 0x14:
        if (*(void *)v64[0] != 0x47746567726F463CLL
          || *(void *)(v64[0] + 8) != 0x4D73616942657461
          || *(_DWORD *)(v64[0] + 16) != 1047421285)
        {
          goto LABEL_209;
        }
LABEL_170:
        uint64_t v11 = &v68;
        goto LABEL_202;
      case 0x15:
        if (*(void *)v64[0] != 0x47746567726F463CLL
          || *(void *)(v64[0] + 8) != 0x5273616942657461
          || *(void *)(v64[0] + 13) != 0x3E65676E61527361)
        {
          goto LABEL_209;
        }
LABEL_179:
        uint64_t v11 = &v67;
        goto LABEL_202;
      case 0x19:
        BOOL v22 = *(void *)v64[0] == 0x7463656A6F72503CLL
           && *(void *)(v64[0] + 8) == 0x6E7261654C6E6F69
           && *(void *)(v64[0] + 16) == 0x66656F4365746152
           && *(unsigned char *)(v64[0] + 24) == 62;
LABEL_200:
        uint64_t v11 = (int *)(a1 + 468);
        if (!v22) {
          goto LABEL_209;
        }
        goto LABEL_202;
      default:
        goto LABEL_121;
    }
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
}

void sub_16EDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  if (*(char *)(v14 - 185) < 0) {
    operator delete(*(void **)(v14 - 208));
  }
  if (*(char *)(v14 - 161) < 0) {
    operator delete(*(void **)(v14 - 184));
  }
  if (*(char *)(v14 - 137) < 0) {
    operator delete(*(void **)(v14 - 160));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateParams(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 176) = a2;
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) > a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1249);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"# LSTM cells (", 14);
    uint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") should not be less than output dim (", 38);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, ").");
  }
  else
  {
    if (!*(void *)(a1 + 184)) {
      operator new();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1253);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_ thought to be un-initialized here");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
}

void sub_16F434()
{
}

void sub_16F450(_Unwind_Exception *a1)
{
  operator delete(v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<short>>(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, unsigned int *a4, float a5)
{
  uint64_t v10 = kaldi::QuantizedMatrixBase<short>::NumRows(a4);
  uint64_t v11 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a4);
  kaldi::Matrix<float>::Matrix((uint64_t)&v23, v10, v11, 0, 0);
  unint64_t v12 = 0;
LABEL_2:
  if ((uint64_t)v12 < (int)kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)&v23))
  {
    for (unint64_t i = 0; ; ++i)
    {
      if ((uint64_t)i >= (int)kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)&v23))
      {
        ++v12;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0, v14, v15, v16);
          if (v12 >= v25 || i >= v24) {
            goto LABEL_25;
          }
          uint64_t v18 = v23 + 4 * (int)v12 * v26;
          float v19 = v20 * a5;
        }
        else
        {
          if (a3 != 1) {
            continue;
          }
          float v17 = kaldi::UniformRandomNumber::RandUniform(a1, 0, v14, v15, v16);
          if (v12 >= v25 || i >= v24) {
            goto LABEL_25;
          }
          uint64_t v18 = v23 + 4 * (int)v12 * v26;
          float v19 = (v17 + -0.5) * (float)(a5 + a5);
        }
      }
      else
      {
        if (v12 >= v25 || i >= v24) {
LABEL_25:
        }
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v16);
        uint64_t v18 = v23 + 4 * (int)v12 * v26;
        if (v12 == i) {
          float v19 = 1.0;
        }
        else {
          float v19 = 0.0;
        }
      }
      *(float *)(v18 + 4 * i) = v19;
    }
  }
  kaldi::QuantizedMatrixBase<short>::CopyFromMat((uint64_t)a4, (kaldi::ContextDependency *)&v23);
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v23);
}

void sub_16F650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 214);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 210);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 223);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 219);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 232);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 228);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 241);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 237);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 250);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-lstm.h", 246);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitData(void *a1, uint64_t *a2)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_135:
    int v38 = *(_DWORD *)(a1 + 176);
    int v39 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
    if (v38 < v39)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 430);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# LSTM cells (", 14);
      BOOL v44 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)") should not be less than output dim (", 38);
      long long v45 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v45, ").");
    }
    else
    {
      uint64_t v40 = *(void *)(a1 + 184);
      *(unsigned char *)(a1 + 224) = v38 > v39;
      if (!v40) {
        operator new();
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 436);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_weights_ thougth to be un-initialized here");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    long long v48 = 0uLL;
    uint64_t v49 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v48, v6, v7);
    if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      switch(HIBYTE(v49))
      {
        case 8:
          goto LABEL_97;
        case 9:
          goto LABEL_85;
        case 0xA:
          if ((void)v48 != 0x6C6C65436D754E3CLL || WORD4(v48) != 15987) {
            goto LABEL_138;
          }
          goto LABEL_46;
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x10:
        case 0x11:
          goto LABEL_138;
        case 0xF:
          BOOL v27 = (void)v48 == 0x61526E7261654C3CLL && *(void *)((char *)&v48 + 7) == 0x3E66656F43657461;
          uint64_t v14 = (float *)(a1 + 464);
          if (v27) {
            goto LABEL_127;
          }
          if (HIBYTE(v49) != 8) {
            goto LABEL_84;
          }
          goto LABEL_97;
        case 0x12:
          if ((void)v48 == 0x4374757074754F3CLL
            && *((void *)&v48 + 1) == 0x65756C61566C6C65
            && (unsigned __int16)v49 == 15987)
          {
            goto LABEL_132;
          }
          if (HIBYTE(v49) == 9) {
            goto LABEL_119;
          }
          if (HIBYTE(v49) != 18) {
            goto LABEL_138;
          }
          BOOL v25 = (void)v48 == 0x6E6569646172473CLL && *((void *)&v48 + 1) == 0x7079546D726F4E74;
          if (!v25 || (unsigned __int16)v49 != 15973) {
            goto LABEL_138;
          }
          goto LABEL_133;
        default:
          if (HIBYTE(v49) != 25) {
            goto LABEL_138;
          }
          BOOL v22 = (void)v48 == 0x7463656A6F72503CLL
             && *((void *)&v48 + 1) == 0x6E7261654C6E6F69
             && v49 == 0x66656F4365746152
             && v50 == 62;
          uint64_t v14 = (float *)(a1 + 468);
          if (v22) {
            goto LABEL_127;
          }
LABEL_84:
          if (HIBYTE(v49) != 9) {
            goto LABEL_138;
          }
LABEL_85:
          BOOL v28 = (void)v48 == 0x6D726F4E78614D3CLL && BYTE8(v48) == 62;
          uint64_t v14 = (float *)(a1 + 472);
          if (v28) {
            goto LABEL_127;
          }
          if (HIBYTE(v49) == 8) {
            goto LABEL_97;
          }
          if (HIBYTE(v49) != 9) {
            goto LABEL_138;
          }
          BOOL v29 = (void)v48 == 0x6C6C654378614D3CLL && BYTE8(v48) == 62;
          uint64_t v14 = (float *)(a1 + 476);
          if (!v29) {
            goto LABEL_119;
          }
          goto LABEL_127;
      }
    }
    uint64_t v11 = *((void *)&v48 + 1);
    if (*((void *)&v48 + 1) == 10
      && (*(void *)v48 == 0x6C6C65436D754E3CLL ? (BOOL v12 = *(unsigned __int16 *)(v48 + 8) == 15987) : (BOOL v12 = 0), v12))
    {
LABEL_46:
      kaldi::ReadBasicType<int>(a2, a3, a1 + 176, v8, v9);
    }
    else
    {
      if (*((void *)&v48 + 1) == 15)
      {
        BOOL v13 = *(void *)v48 == 0x61526E7261654C3CLL && *(void *)(v48 + 7) == 0x3E66656F43657461;
        uint64_t v14 = (float *)(a1 + 464);
        if (v13) {
          goto LABEL_127;
        }
        uint64_t v11 = *((void *)&v48 + 1);
      }
      if (v11 == 25)
      {
        BOOL v17 = *(void *)v48 == 0x7463656A6F72503CLL
           && *(void *)(v48 + 8) == 0x6E7261654C6E6F69
           && *(void *)(v48 + 16) == 0x66656F4365746152
           && *(unsigned char *)(v48 + 24) == 62;
        uint64_t v14 = (float *)(a1 + 468);
        if (v17) {
          goto LABEL_127;
        }
        uint64_t v11 = *((void *)&v48 + 1);
      }
      if (v11 != 9) {
        goto LABEL_47;
      }
      BOOL v18 = *(void *)v48 == 0x6D726F4E78614D3CLL && *(unsigned char *)(v48 + 8) == 62;
      uint64_t v14 = (float *)(a1 + 472);
      if (v18) {
        goto LABEL_127;
      }
      uint64_t v11 = *((void *)&v48 + 1);
      if (*((void *)&v48 + 1) != 9) {
        goto LABEL_47;
      }
      BOOL v19 = *(void *)v48 == 0x6C6C654378614D3CLL && *(unsigned char *)(v48 + 8) == 62;
      uint64_t v14 = (float *)(a1 + 476);
      if (v19) {
        goto LABEL_127;
      }
      if ((v49 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v49) == 9) {
          goto LABEL_119;
        }
        if (HIBYTE(v49) != 8) {
          goto LABEL_138;
        }
LABEL_97:
        if ((void)v48 != 0x3E706565506F4E3CLL)
        {
          if ((v49 & 0x8000000000000000) == 0) {
            goto LABEL_138;
          }
LABEL_100:
          uint64_t v11 = *((void *)&v48 + 1);
          if (v11 != 18) {
            goto LABEL_120;
          }
LABEL_101:
          if (*(void *)v48 == 0x4374757074754F3CLL
            && *(void *)(v48 + 8) == 0x65756C61566C6C65
            && *(_WORD *)(v48 + 16) == 15987)
          {
LABEL_132:
            *(unsigned char *)(a1 + 209) = 1;
            goto LABEL_128;
          }
          uint64_t v11 = *((void *)&v48 + 1);
          if (*((void *)&v48 + 1) != 18) {
            goto LABEL_120;
          }
          if (*(void *)v48 == 0x6E6569646172473CLL
            && *(void *)(v48 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v48 + 16) == 15973)
          {
LABEL_133:
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v47 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p, v8, v9);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v47) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_128;
          }
          if ((v49 & 0x8000000000000000) == 0)
          {
            if (HIBYTE(v49) != 9) {
              goto LABEL_138;
            }
LABEL_119:
            uint64_t v34 = &v48;
          }
          else
          {
LABEL_120:
            if (v11 != 9) {
              goto LABEL_138;
            }
            uint64_t v34 = (long long *)v48;
          }
          uint64_t v35 = *(void *)v34;
          int v36 = *((unsigned __int8 *)v34 + 8);
          BOOL v37 = v35 == 0x6461724778614D3CLL && v36 == 62;
          uint64_t v14 = (float *)(a1 + 152);
          if (!v37)
          {
LABEL_138:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 424);
            uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v49 >= 0) {
              uint64_t v42 = &v48;
            }
            else {
              uint64_t v42 = (long long *)v48;
            }
            if (v49 >= 0) {
              uint64_t v43 = HIBYTE(v49);
            }
            else {
              uint64_t v43 = *((void *)&v48 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
LABEL_127:
          kaldi::ReadBasicType<float>(a2, a3, v14, v8, v9);
          goto LABEL_128;
        }
      }
      else
      {
LABEL_47:
        if (v11 != 8) {
          goto LABEL_101;
        }
        if (*(void *)v48 != 0x3E706565506F4E3CLL) {
          goto LABEL_100;
        }
      }
      *(unsigned char *)(a1 + 208) = 0;
    }
LABEL_128:
    if (SHIBYTE(v49) < 0) {
      operator delete((void *)v48);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_135;
    }
  }
}

void sub_170450()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ReadData(void *a1, uint64_t *a2, int a3)
{
}

void *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumCells>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<ProjectionLearnRateCoef>", v10, v11);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v12, v13);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v14, v15);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v16, v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v18, v19);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxCell>", v20, v21);
  uint64_t result = kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  if (!*(unsigned char *)(a1 + 208)) {
    uint64_t result = kaldi::WriteToken(a2, a3, (kaldi *)"<NoPeep>", v23, v24);
  }
  if (*(unsigned char *)(a1 + 209)) {
    return kaldi::WriteToken(a2, a3, (kaldi *)"<OutputCellValues>", v23, v24);
  }
  return result;
}

void sub_170640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteData(unsigned char *a1, void *a2, uint64_t a3, int a4)
{
  (*(void (**)(unsigned char *))(*(void *)a1 + 128))(a1);
  (*(void (**)(unsigned char *, void *, uint64_t))(*(void *)a1 + 192))(a1, a2, a3);
  uint64_t v8 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<short>::Write(v8, a2, a3, a4);
  uint64_t v9 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<short>::Write(v9, a2, a3, a4);
  if (a1[208])
  {
    uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v10, a2, a3, a4);
  }
  uint64_t v11 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::Write(v11, a2, a3, v12, v13);
  if (a1[224])
  {
    uint64_t v14 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    kaldi::QuantizedMatrix<short>::Write(v14, a2, a3, a4);
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteData(void *a1, void *a2, uint64_t a3, int a4)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NumParams(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  int v3 = kaldi::QuantizedMatrixBase<short>::NumRows(v2);
  uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  int v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4) * v3;
  uint64_t v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  int v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  int v9 = v5 + kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
  uint64_t v10 = (v9 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1) + 16));
  if (*(unsigned char *)(a1 + 208))
  {
    int v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 20);
    uint64_t v10 = (v10
                       + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 16)
                       * v11);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v12 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    int v13 = kaldi::QuantizedMatrixBase<short>::NumRows(v12);
    uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    return v10 + kaldi::QuantizedMatrixBase<short>::NumCols(v14) * v13;
  }
  return v10;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NumParams((uint64_t)a1 + *(void *)(*a1 - 192));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetParams(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  int v7 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  int v8 = kaldi::QuantizedMatrixBase<short>::NumRows(v7);
  uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  unsigned int v10 = kaldi::QuantizedMatrixBase<short>::NumCols(v9) * v8;
  int v11 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  int v12 = kaldi::QuantizedMatrixBase<short>::NumRows(v11);
  uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  int v14 = kaldi::QuantizedMatrixBase<short>::NumCols(v13);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v10 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  int v16 = v14 * v12;
  int v38 = *(void **)a2;
  LODWORD(v39) = v10;
  BOOL v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v38, v17);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  unsigned int v18 = v16 + v10;
  if (v16 + v10 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  int v38 = (void *)(*(void *)a2 + 4 * (int)v10);
  LODWORD(v39) = v16;
  BOOL v19 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v38, v19);
  if (a1[208])
  {
    int v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 20);
    int v21 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 16)
        * v20;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    unsigned int v22 = v21 + v18;
    if (v21 + v18 > *(_DWORD *)(a2 + 8)) {
      goto LABEL_11;
    }
    int v38 = (void *)(*(void *)a2 + 4 * (int)v18);
    LODWORD(v39) = v21;
    uint64_t v23 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v38, v23, v24, v25, v26);
    unsigned int v18 = v22;
  }
  int v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v27 + v18 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_11;
  }
  int v38 = (void *)(*(void *)a2 + 4 * (int)v18);
  LODWORD(v39) = v27;
  BOOL v28 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v28, (uint64_t)&v38, v29, v30, v31);
  if (!a1[224]) {
    return;
  }
  unsigned int v32 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16) + v18;
  BOOL v33 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  int v34 = kaldi::QuantizedMatrixBase<short>::NumRows(v33);
  uint64_t v35 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  int v36 = kaldi::QuantizedMatrixBase<short>::NumCols(v35);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v36 * v34 + v32 > *(_DWORD *)(a2 + 8)) {
LABEL_11:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
  int v38 = (void *)(*(void *)a2 + 4 * (int)v32);
  LODWORD(v39) = v36 * v34;
  BOOL v37 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v38, v37);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetParams(void *a1, uint64_t a2)
{
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetParams(unsigned char *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(unsigned char *))(*(void *)a1 + 208))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_1F8.size + 2, "wei_src.Dim() == NumParams()", v5);
  }
  uint64_t v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  int v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  unsigned int v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
  unsigned int v10 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  int v11 = kaldi::QuantizedMatrixBase<short>::NumRows(v10);
  uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  int v13 = kaldi::QuantizedMatrixBase<short>::NumCols(v12);
  int v14 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (v9 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  int v16 = v13 * v11;
  BOOL v33 = *(char **)a2;
  LODWORD(v34) = v9;
  kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v14, &v33);
  BOOL v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  unsigned int v18 = v16 + v9;
  if (v16 + v9 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  BOOL v33 = (char *)(*(void *)a2 + 4 * (int)v9);
  LODWORD(v34) = v16;
  kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v17, &v33);
  if (a1[208])
  {
    int v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 20);
    int v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 16)
        * v19;
    uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    if (v20 + v18 > *(_DWORD *)(a2 + 8)) {
      goto LABEL_12;
    }
    BOOL v33 = (char *)(*(void *)a2 + 4 * (int)v18);
    LODWORD(v34) = v20;
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v21, &v33);
    v18 += v20;
  }
  unsigned int v22 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1);
  int v25 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (v25 + v18 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_12;
  }
  BOOL v33 = (char *)(*(void *)a2 + 4 * (int)v18);
  LODWORD(v34) = v25;
  uint64_t result = kaldi::CuVectorBase<float>::CopyFromVec<float>(v22, (uint64_t)&v33, v23, v24, v15);
  if (!a1[224]) {
    return result;
  }
  unsigned int v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16) + v18;
  BOOL v28 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  int v29 = kaldi::QuantizedMatrixBase<short>::NumRows(v28);
  uint64_t v30 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  int v31 = kaldi::QuantizedMatrixBase<short>::NumCols(v30) * v29;
  unsigned int v32 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (v31 + v27 > *(_DWORD *)(a2 + 8)) {
LABEL_12:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
  BOOL v33 = (char *)(*(void *)a2 + 4 * (int)v27);
  LODWORD(v34) = v31;
  return (_DWORD *)kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v32, &v33);
}

_DWORD *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetParams((unsigned char *)a1 + *(void *)(*a1 - 208), a2);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SumParams(uint64_t a1)
{
  uint64_t v2 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  float v7 = kaldi::QuantizedMatrixBase<short>::Sum(v2, v3, v4, v5, v6);
  uint64_t v8 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  float v13 = v7 + kaldi::QuantizedMatrixBase<short>::Sum(v8, v9, v10, v11, v12);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
    float v13 = v13 + kaldi::CuMatrixBase<float>::Sum(v14, v15, v16, v17, v18);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    int v19 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    float v13 = v13 + kaldi::QuantizedMatrixBase<short>::Sum(v19, v20, v21, v22, v23);
  }
  uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  double v25 = kaldi::CuVectorBase<float>::Sum(v24);
  return v13 + *(float *)&v25;
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SumParams((uint64_t)a1 + *(void *)(*a1 - 224));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  uint64_t v3 = kaldi::QuantizedMatrixBase<short>::NumRows(v2);
  uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  uint64_t v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v6, v3, v5, 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v6);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

void sub_1710C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  uint64_t v5 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v4);
  uint64_t v6 = kaldi::QuantizedMatrixBase<short>::NumRows(v5);
  uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v4);
  uint64_t v8 = kaldi::QuantizedMatrixBase<short>::NumCols(v7);
  kaldi::CuMatrix<float>::Resize((uint64_t)va, v6, v8, 1u, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)va);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v4);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

uint64_t sub_17111C()
{
  if (*(unsigned char *)(v0 + 208))
  {
    uint64_t v2 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0) + 20);
    uint64_t v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0);
    kaldi::CuMatrix<float>::Resize((uint64_t)v20, v2, *(unsigned int *)(v3 + 16), 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
    uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0);
    kaldi::CuMatrixBase<float>::AddMat(v4, (uint64_t)v20, 111, v5, v6, v1, 1.0);
  }
  uint64_t v7 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(v0) + 16);
  memset(&v19[1], 0, 24);
  v19[0] = off_262E60;
  kaldi::CuVector<float>::Resize((uint64_t)v19, v7, 1u, v8, v9);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v19);
  uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(v0);
  kaldi::CuVectorBase<float>::AddVec(v10, (uint64_t)v19, v11, v12, v13, v1, 1.0);
  if (*(unsigned char *)(v0 + 224))
  {
    uint64_t v14 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v0);
    uint64_t v15 = kaldi::QuantizedMatrixBase<short>::NumRows(v14);
    uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v0);
    uint64_t v17 = kaldi::QuantizedMatrixBase<short>::NumCols(v16);
    kaldi::CuMatrix<float>::Resize((uint64_t)v20, v15, v17, 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v0);
    kaldi::QuantizedMatrixBase<short>::AddMat();
  }
  kaldi::CuVector<float>::~CuVector(v19);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v20);
}

void sub_171258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(void *a1)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetGradient(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (const void *)(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 136))(a1);
  if (v8) {
  else
  }
    uint64_t v9 = 0;
  (*(void (**)(void *, uint64_t, uint64_t, void, void))(*(void *)v9 + 336))(v9, a2, a3, 0, 0);
  uint64_t v10 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v10, 0, v11, v12);
  float v13 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  int v14 = kaldi::QuantizedMatrixBase<short>::NumRows(v13);
  uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  unsigned int v16 = kaldi::QuantizedMatrixBase<short>::NumCols(v15) * v14;
  uint64_t v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  int v18 = kaldi::QuantizedMatrixBase<short>::NumRows(v17);
  uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  int v20 = kaldi::QuantizedMatrixBase<short>::NumCols(v19);
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  if (v16 > *(_DWORD *)(a4 + 8)) {
    goto LABEL_14;
  }
  int v22 = v20;
  long long v57 = *(char **)a4;
  LODWORD(v58) = v16;
  uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient((uint64_t)v9, 0);
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v54, v23, 111, v24, v25);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v57, (kaldi::ContextDependency *)&v54);
  int v26 = v22 * v18;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v54);
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unsigned int v27 = v26 + v16;
  if (v26 + v16 > *(_DWORD *)(a4 + 8)) {
    goto LABEL_14;
  }
  uint64_t v54 = *(void *)a4 + 4 * (int)v16;
  LODWORD(v55) = v26;
  BOOL v28 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient((uint64_t)v9, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v28, v29, v30, v31);
  if (a1[208])
  {
    int v32 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 20);
    int v33 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 16)
        * v32;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    unsigned int v34 = v33 + v27;
    if (v33 + v27 > *(_DWORD *)(a4 + 8)) {
      goto LABEL_14;
    }
    uint64_t v54 = *(void *)a4 + 4 * (int)v27;
    LODWORD(v55) = v33;
    uint64_t v35 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v35, v36, v37, v38);
    unsigned int v27 = v34;
  }
  int v39 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16);
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  if (v39 + v27 > *(_DWORD *)(a4 + 8)) {
LABEL_14:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v21);
  uint64_t v54 = *(void *)a4 + 4 * (int)v27;
  LODWORD(v55) = v39;
  uint64_t v40 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient((uint64_t)v9, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v40, (uint64_t)&v54, v41, v42, v43);
  if (a1[224])
  {
    unsigned int v44 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16) + v27;
    long long v45 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    int v46 = kaldi::QuantizedMatrixBase<short>::NumRows(v45);
    uint64_t v47 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    int v48 = kaldi::QuantizedMatrixBase<short>::NumCols(v47);
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    if (v48 * v46 + v44 <= *(_DWORD *)(a4 + 8))
    {
      uint64_t v54 = *(void *)a4 + 4 * (int)v44;
      LODWORD(v55) = v48 * v46;
      uint64_t v49 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient((uint64_t)v9, 0);
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v49, v50, v51, v52);
      return (*(uint64_t (**)(void *))(*(void *)v9 + 8))(v9);
    }
    goto LABEL_14;
  }
  return (*(uint64_t (**)(void *))(*(void *)v9 + 8))(v9);
}

void sub_1715FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetGradient(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetGradient((unsigned char *)a1 + *(void *)(*a1 - 240), a2, a3, a4);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(void *a1, int a2)
{
  uint64_t v2 = (float *)((char *)a1 + *(void *)(*a1 - 24));
  if (!*((unsigned char *)v2 + 84)) {
    return v2[14];
  }
  uint64_t v3 = a1[63];
  unint64_t v4 = a1[64] - v3;
  if (!v4) {
    return NAN;
  }
  unint64_t v5 = v4 >> 2;
  if ((int)v5 <= a2) {
    return NAN;
  }
  int v6 = v5 - 1;
  if (a2 >= 0) {
    int v6 = a2;
  }
  return *(float *)(v3 + 4 * v6);
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(void *a1, int a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate((void *)((char *)a1 + *(void *)(*a1 - 216)), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Info(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v50);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 192))(a1, v50, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Input weights:", 16);
  uint64_t v3 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  kaldi::nnet1::MomentStatistics<short>(v3);
  if ((v49 & 0x80u) == 0) {
    unint64_t v4 = v48;
  }
  else {
    unint64_t v4 = (void **)v48[0];
  }
  if ((v49 & 0x80u) == 0) {
    uint64_t v5 = v49;
  }
  else {
    uint64_t v5 = (uint64_t)v48[1];
  }
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n Recurrent weights:", 20);
  uint64_t v8 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  kaldi::nnet1::MomentStatistics<short>(v8);
  if ((v47 & 0x80u) == 0) {
    uint64_t v9 = v46;
  }
  else {
    uint64_t v9 = (void **)v46[0];
  }
  if ((v47 & 0x80u) == 0) {
    uint64_t v10 = v47;
  }
  else {
    uint64_t v10 = (uint64_t)v46[1];
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n Bias:", 7);
  float v13 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  kaldi::nnet1::MomentStatistics<float>(v13, v14, v15, v16, v17);
  if ((v45 & 0x80u) == 0) {
    int v18 = v44;
  }
  else {
    int v18 = (void **)v44[0];
  }
  if ((v45 & 0x80u) == 0) {
    uint64_t v19 = v45;
  }
  else {
    uint64_t v19 = (uint64_t)v44[1];
  }
  int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v18, v19);
  uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n Forget gate bias:", 19);
  uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  kaldi::CuSubVector<float>::CuSubVector(&v39, v22, *(_DWORD *)(a1 + 176), *(_DWORD *)(a1 + 176), v23);
  kaldi::nnet1::MomentStatistics<float>(&v39, v24, v25, v26, v27);
  if ((v43 & 0x80u) == 0) {
    BOOL v28 = __p;
  }
  else {
    BOOL v28 = (void **)__p[0];
  }
  if ((v43 & 0x80u) == 0) {
    uint64_t v29 = v43;
  }
  else {
    uint64_t v29 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v28, v29);
  if ((char)v43 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v45 < 0) {
    operator delete(v44[0]);
  }
  if ((char)v47 < 0) {
    operator delete(v46[0]);
  }
  if ((char)v49 < 0) {
    operator delete(v48[0]);
  }
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Peephole weights:", 19);
    uint64_t v31 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v31);
    int v32 = (v41 & 0x80u) == 0 ? &v39 : (void **)v39;
    uint64_t v33 = (v41 & 0x80u) == 0 ? v41 : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
    if ((char)v41 < 0) {
      operator delete(v39);
    }
  }
  if (*(unsigned char *)(a1 + 224))
  {
    unsigned int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n Projection weights:", 21);
    uint64_t v35 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    kaldi::nnet1::MomentStatistics<short>(v35);
    uint64_t v36 = (v41 & 0x80u) == 0 ? &v39 : (void **)v39;
    uint64_t v37 = (v41 & 0x80u) == 0 ? v41 : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
    if ((char)v41 < 0) {
      operator delete(v39);
    }
  }
  std::stringbuf::str();
  if (v51 < 0) {
    operator delete((void *)v50[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_171E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Info(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Info((uint64_t)a1 + *(void *)(*a1 - 80));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 528))
  {
    memset(&v105, 0, sizeof(v105));
    int v104 = 0;
    if (*(int *)(a1 + 80) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v92, "\n For batch ");
        kaldi::nnet1::ToString<int>();
        if ((v91 & 0x80u) == 0) {
          uint64_t v3 = v90;
        }
        else {
          uint64_t v3 = (void **)v90[0];
        }
        if ((v91 & 0x80u) == 0) {
          std::string::size_type v4 = v91;
        }
        else {
          std::string::size_type v4 = (std::string::size_type)v90[1];
        }
        uint64_t v5 = std::string::append(&v92, (const std::string::value_type *)v3, v4);
        long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v88, ": ");
        if ((v89 & 0x80u) == 0) {
          uint64_t v7 = v88;
        }
        else {
          uint64_t v7 = (void **)v88[0];
        }
        if ((v89 & 0x80u) == 0) {
          std::string::size_type v8 = v89;
        }
        else {
          std::string::size_type v8 = (std::string::size_type)v88[1];
        }
        uint64_t v9 = std::string::append(&v93, (const std::string::value_type *)v7, v8);
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v86, "\n  Number of cells : ");
        if ((v87 & 0x80u) == 0) {
          uint64_t v11 = v86;
        }
        else {
          uint64_t v11 = (void **)v86[0];
        }
        if ((v87 & 0x80u) == 0) {
          std::string::size_type v12 = v87;
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v86[1];
        }
        float v13 = std::string::append(&v94, (const std::string::value_type *)v11, v12);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::ToString<int>();
        if ((v85 & 0x80u) == 0) {
          uint64_t v15 = v84;
        }
        else {
          uint64_t v15 = (void **)v84[0];
        }
        if ((v85 & 0x80u) == 0) {
          std::string::size_type v16 = v85;
        }
        else {
          std::string::size_type v16 = (std::string::size_type)v84[1];
        }
        uint64_t v17 = std::string::append(&v95, (const std::string::value_type *)v15, v16);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v82, "\n  Input weights gradient: ");
        if ((v83 & 0x80u) == 0) {
          uint64_t v19 = v82;
        }
        else {
          uint64_t v19 = (void **)v82[0];
        }
        if ((v83 & 0x80u) == 0) {
          std::string::size_type v20 = v83;
        }
        else {
          std::string::size_type v20 = (std::string::size_type)v82[1];
        }
        uint64_t v21 = std::string::append(&v96, (const std::string::value_type *)v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v23);
        if ((v81 & 0x80u) == 0) {
          uint64_t v24 = v80;
        }
        else {
          uint64_t v24 = (void **)v80[0];
        }
        if ((v81 & 0x80u) == 0) {
          std::string::size_type v25 = v81;
        }
        else {
          std::string::size_type v25 = (std::string::size_type)v80[1];
        }
        uint64_t v26 = std::string::append(&v97, (const std::string::value_type *)v24, v25);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v78, "\n  Recurrent weights gradient: ");
        if ((v79 & 0x80u) == 0) {
          BOOL v28 = v78;
        }
        else {
          BOOL v28 = (void **)v78[0];
        }
        if ((v79 & 0x80u) == 0) {
          std::string::size_type v29 = v79;
        }
        else {
          std::string::size_type v29 = (std::string::size_type)v78[1];
        }
        uint64_t v30 = std::string::append(&v98, (const std::string::value_type *)v28, v29);
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v99.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        uint64_t v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v32);
        if ((v77 & 0x80u) == 0) {
          uint64_t v33 = v76;
        }
        else {
          uint64_t v33 = (void **)v76[0];
        }
        if ((v77 & 0x80u) == 0) {
          std::string::size_type v34 = v77;
        }
        else {
          std::string::size_type v34 = (std::string::size_type)v76[1];
        }
        uint64_t v35 = std::string::append(&v99, (const std::string::value_type *)v33, v34);
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v74, "\n  Bias gradient: ");
        if ((v75 & 0x80u) == 0) {
          uint64_t v37 = v74;
        }
        else {
          uint64_t v37 = (void **)v74[0];
        }
        if ((v75 & 0x80u) == 0) {
          std::string::size_type v38 = v75;
        }
        else {
          std::string::size_type v38 = (std::string::size_type)v74[1];
        }
        int v39 = std::string::append(&v100, (const std::string::value_type *)v37, v38);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v101.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        unsigned __int8 v41 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v41, v42, v43, v44, v45);
        if ((v73 & 0x80u) == 0) {
          int v46 = __p;
        }
        else {
          int v46 = (void **)__p[0];
        }
        if ((v73 & 0x80u) == 0) {
          std::string::size_type v47 = v73;
        }
        else {
          std::string::size_type v47 = (std::string::size_type)__p[1];
        }
        int v48 = std::string::append(&v101, (const std::string::value_type *)v46, v47);
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        int64_t v103 = v48->__r_.__value_.__r.__words[2];
        long long v102 = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if (v103 >= 0) {
          uint64_t v50 = (const std::string::value_type *)&v102;
        }
        else {
          uint64_t v50 = (const std::string::value_type *)v102;
        }
        if (v103 >= 0) {
          std::string::size_type v51 = HIBYTE(v103);
        }
        else {
          std::string::size_type v51 = *((void *)&v102 + 1);
        }
        std::string::append(&v105, v50, v51);
        if (SHIBYTE(v103) < 0) {
          operator delete((void *)v102);
        }
        if ((char)v73 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        if ((char)v75 < 0) {
          operator delete(v74[0]);
        }
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
        if ((char)v77 < 0) {
          operator delete(v76[0]);
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        if ((char)v79 < 0) {
          operator delete(v78[0]);
        }
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v98.__r_.__value_.__l.__data_);
        }
        if ((char)v81 < 0) {
          operator delete(v80[0]);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((char)v83 < 0) {
          operator delete(v82[0]);
        }
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v96.__r_.__value_.__l.__data_);
        }
        if ((char)v85 < 0) {
          operator delete(v84[0]);
        }
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v95.__r_.__value_.__l.__data_);
        }
        if ((char)v87 < 0) {
          operator delete(v86[0]);
        }
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
        if ((char)v89 < 0) {
          operator delete(v88[0]);
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if ((char)v91 < 0) {
          operator delete(v90[0]);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if (*(unsigned char *)(a1 + 208))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Peephole weights gradient: ");
          uint64_t v52 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v52);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v53 = &v100;
          }
          else {
            long long v53 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v100.__r_.__value_.__l.__size_;
          }
          uint64_t v55 = std::string::append(&v101, (const std::string::value_type *)v53, size);
          long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          int64_t v103 = v55->__r_.__value_.__r.__words[2];
          long long v102 = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0) {
            long long v57 = (const std::string::value_type *)&v102;
          }
          else {
            long long v57 = (const std::string::value_type *)v102;
          }
          if (v103 >= 0) {
            std::string::size_type v58 = HIBYTE(v103);
          }
          else {
            std::string::size_type v58 = *((void *)&v102 + 1);
          }
          std::string::append(&v105, v57, v58);
          if (SHIBYTE(v103) < 0) {
            operator delete((void *)v102);
          }
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v101.__r_.__value_.__l.__data_);
          }
        }
        if (*(unsigned char *)(a1 + 224))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Projection weights gradient: ");
          uint64_t v59 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v59);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v60 = &v100;
          }
          else {
            uint64_t v60 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v61 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v61 = v100.__r_.__value_.__l.__size_;
          }
          uint64_t v62 = std::string::append(&v101, (const std::string::value_type *)v60, v61);
          long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          int64_t v103 = v62->__r_.__value_.__r.__words[2];
          long long v102 = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0) {
            uint64_t v64 = (const std::string::value_type *)&v102;
          }
          else {
            uint64_t v64 = (const std::string::value_type *)v102;
          }
          if (v103 >= 0) {
            std::string::size_type v65 = HIBYTE(v103);
          }
          else {
            std::string::size_type v65 = *((void *)&v102 + 1);
          }
          std::string::append(&v105, v64, v65);
          if (SHIBYTE(v103) < 0) {
            operator delete((void *)v102);
          }
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v101.__r_.__value_.__l.__data_);
          }
        }
        ++v104;
      }
      while (v104 < *(_DWORD *)(a1 + 80));
    }
    std::string v66 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v102, "\n");
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v67 = &v105;
    }
    else {
      int v67 = (std::string *)v105.__r_.__value_.__r.__words[0];
    }
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v68 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v68 = v105.__r_.__value_.__l.__size_;
    }
    int v69 = std::string::insert(v66, 0, (const std::string::value_type *)v67, v68);
    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v69->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v103) < 0) {
      operator delete((void *)v102);
    }
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v105.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_172664(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(void *a1@<X0>, void *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v89, 0, sizeof(v89));
  int v88 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v75 & 0x80u) == 0) {
        uint64_t v3 = v74;
      }
      else {
        uint64_t v3 = (void **)v74[0];
      }
      if ((v75 & 0x80u) == 0) {
        std::string::size_type v4 = v75;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v74[1];
      }
      uint64_t v5 = std::string::append(&v76, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v72, ": ");
      if ((v73 & 0x80u) == 0) {
        uint64_t v7 = v72;
      }
      else {
        uint64_t v7 = (void **)v72[0];
      }
      if ((v73 & 0x80u) == 0) {
        std::string::size_type v8 = v73;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v72[1];
      }
      uint64_t v9 = std::string::append(&v77, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v70, "\n  Gates values: ");
      if ((v71 & 0x80u) == 0) {
        uint64_t v11 = v70;
      }
      else {
        uint64_t v11 = (void **)v70[0];
      }
      if ((v71 & 0x80u) == 0) {
        std::string::size_type v12 = v71;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v70[1];
      }
      float v13 = std::string::append(&v78, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 248) + 48 * v88);
      if ((v69 & 0x80u) == 0) {
        uint64_t v15 = v68;
      }
      else {
        uint64_t v15 = (void **)v68[0];
      }
      if ((v69 & 0x80u) == 0) {
        std::string::size_type v16 = v69;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v68[1];
      }
      uint64_t v17 = std::string::append(&v79, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v66, "\n  Cell values: ");
      if ((v67 & 0x80u) == 0) {
        uint64_t v19 = v66;
      }
      else {
        uint64_t v19 = (void **)v66[0];
      }
      if ((v67 & 0x80u) == 0) {
        std::string::size_type v20 = v67;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v66[1];
      }
      uint64_t v21 = std::string::append(&v80, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 272) + 48 * v88);
      if ((v65 & 0x80u) == 0) {
        uint64_t v23 = v64;
      }
      else {
        uint64_t v23 = (void **)v64[0];
      }
      if ((v65 & 0x80u) == 0) {
        std::string::size_type v24 = v65;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v64[1];
      }
      std::string::size_type v25 = std::string::append(&v81, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v62, "\n  Cell outputs: ");
      if ((v63 & 0x80u) == 0) {
        long long v27 = v62;
      }
      else {
        long long v27 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v28 = v63;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v62[1];
      }
      std::string::size_type v29 = std::string::append(&v82, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 296) + 48 * v88);
      if ((v61 & 0x80u) == 0) {
        long long v31 = v60;
      }
      else {
        long long v31 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v32 = v61;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)v60[1];
      }
      uint64_t v33 = std::string::append(&v83, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Cell outputs gated: ");
      if ((v59 & 0x80u) == 0) {
        uint64_t v35 = v58;
      }
      else {
        uint64_t v35 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v36 = v59;
      }
      else {
        std::string::size_type v36 = (std::string::size_type)v58[1];
      }
      uint64_t v37 = std::string::append(&v84, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 320) + 48 * v88);
      if ((v57 & 0x80u) == 0) {
        int v39 = __p;
      }
      else {
        int v39 = (void **)__p[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v40 = v57;
      }
      else {
        std::string::size_type v40 = (std::string::size_type)__p[1];
      }
      unsigned __int8 v41 = std::string::append(&v85, (const std::string::value_type *)v39, v40);
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      int64_t v87 = v41->__r_.__value_.__r.__words[2];
      long long v86 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (v87 >= 0) {
        uint64_t v43 = (const std::string::value_type *)&v86;
      }
      else {
        uint64_t v43 = (const std::string::value_type *)v86;
      }
      if (v87 >= 0) {
        std::string::size_type v44 = HIBYTE(v87);
      }
      else {
        std::string::size_type v44 = *((void *)&v86 + 1);
      }
      std::string::append(&v89, v43, v44);
      if (SHIBYTE(v87) < 0) {
        operator delete((void *)v86);
      }
      if ((char)v57 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v83.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      if ((char)v65 < 0) {
        operator delete(v64[0]);
      }
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
      if ((char)v67 < 0) {
        operator delete(v66[0]);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      if ((char)v69 < 0) {
        operator delete(v68[0]);
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if ((char)v71 < 0) {
        operator delete(v70[0]);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      if ((char)v73 < 0) {
        operator delete(v72[0]);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if ((char)v75 < 0) {
        operator delete(v74[0]);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "\n  Output values: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 344) + 48 * v88);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v45 = &v84;
        }
        else {
          unsigned __int8 v45 = (std::string *)v84.__r_.__value_.__r.__words[0];
        }
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v84.__r_.__value_.__l.__size_;
        }
        std::string::size_type v47 = std::string::append(&v85, (const std::string::value_type *)v45, size);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        int64_t v87 = v47->__r_.__value_.__r.__words[2];
        long long v86 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (v87 >= 0) {
          long long v49 = (const std::string::value_type *)&v86;
        }
        else {
          long long v49 = (const std::string::value_type *)v86;
        }
        if (v87 >= 0) {
          std::string::size_type v50 = HIBYTE(v87);
        }
        else {
          std::string::size_type v50 = *((void *)&v86 + 1);
        }
        std::string::append(&v89, v49, v50);
        if (SHIBYTE(v87) < 0) {
          operator delete((void *)v86);
        }
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
      }
      ++v88;
    }
    while (v88 < *(_DWORD *)(a1 + 80));
  }
  std::string::size_type v51 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v86, "\n");
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v52 = &v89;
  }
  else {
    uint64_t v52 = (std::string *)v89.__r_.__value_.__r.__words[0];
  }
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v53 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v53 = v89.__r_.__value_.__l.__size_;
  }
  uint64_t v54 = std::string::insert(v51, 0, (const std::string::value_type *)v52, v53);
  *a2 = *v54;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v87) < 0) {
    operator delete((void *)v86);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
}

void sub_172F44(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_173150()
{
}

void sub_173158()
{
}

void sub_173160()
{
}

void sub_173168()
{
}

void sub_173170()
{
}

void sub_173178()
{
}

void sub_173180()
{
}

void sub_173188()
{
}

void sub_173190()
{
}

void sub_173198()
{
}

void sub_1731A0()
{
}

void sub_1731A8()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoBackPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v75, 0, sizeof(v75));
  int v74 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v64, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v63 & 0x80u) == 0) {
        uint64_t v3 = v62;
      }
      else {
        uint64_t v3 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v4 = v63;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v62[1];
      }
      uint64_t v5 = std::string::append(&v64, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v60, ": ");
      if ((v61 & 0x80u) == 0) {
        uint64_t v7 = v60;
      }
      else {
        uint64_t v7 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v8 = v61;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v60[1];
      }
      uint64_t v9 = std::string::append(&v65, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Gates diff: ");
      if ((v59 & 0x80u) == 0) {
        uint64_t v11 = v58;
      }
      else {
        uint64_t v11 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v12 = v59;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v58[1];
      }
      float v13 = std::string::append(&v66, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 440) + 48 * v74);
      if ((v57 & 0x80u) == 0) {
        uint64_t v15 = v56;
      }
      else {
        uint64_t v15 = (void **)v56[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v16 = v57;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v56[1];
      }
      uint64_t v17 = std::string::append(&v67, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, "\n  Cell diff: ");
      if ((v55 & 0x80u) == 0) {
        uint64_t v19 = v54;
      }
      else {
        uint64_t v19 = (void **)v54[0];
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v20 = v55;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v54[1];
      }
      uint64_t v21 = std::string::append(&v68, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 416) + 48 * v74);
      if ((v53 & 0x80u) == 0) {
        uint64_t v23 = v52;
      }
      else {
        uint64_t v23 = (void **)v52[0];
      }
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v24 = v53;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v52[1];
      }
      std::string::size_type v25 = std::string::append(&v69, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v50, "\n  Cell out gated diff: ");
      if ((v51 & 0x80u) == 0) {
        long long v27 = v50;
      }
      else {
        long long v27 = (void **)v50[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v28 = v51;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v50[1];
      }
      std::string::size_type v29 = std::string::append(&v70, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 392) + 48 * v74);
      if ((v49 & 0x80u) == 0) {
        long long v31 = __p;
      }
      else {
        long long v31 = (void **)__p[0];
      }
      if ((v49 & 0x80u) == 0) {
        std::string::size_type v32 = v49;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)__p[1];
      }
      uint64_t v33 = std::string::append(&v71, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      int64_t v73 = v33->__r_.__value_.__r.__words[2];
      long long v72 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v73 >= 0) {
        uint64_t v35 = (const std::string::value_type *)&v72;
      }
      else {
        uint64_t v35 = (const std::string::value_type *)v72;
      }
      if (v73 >= 0) {
        std::string::size_type v36 = HIBYTE(v73);
      }
      else {
        std::string::size_type v36 = *((void *)&v72 + 1);
      }
      std::string::append(&v75, v35, v36);
      if (SHIBYTE(v73) < 0) {
        operator delete((void *)v72);
      }
      if ((char)v49 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if ((char)v51 < 0) {
        operator delete(v50[0]);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if ((char)v53 < 0) {
        operator delete(v52[0]);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if ((char)v55 < 0) {
        operator delete(v54[0]);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if ((char)v57 < 0) {
        operator delete(v56[0]);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v71, "\n  Output diff: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 368) + 48 * v74);
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v70;
        }
        else {
          uint64_t v37 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v70.__r_.__value_.__l.__size_;
        }
        int v39 = std::string::append(&v71, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        int64_t v73 = v39->__r_.__value_.__r.__words[2];
        long long v72 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v73 >= 0) {
          unsigned __int8 v41 = (const std::string::value_type *)&v72;
        }
        else {
          unsigned __int8 v41 = (const std::string::value_type *)v72;
        }
        if (v73 >= 0) {
          std::string::size_type v42 = HIBYTE(v73);
        }
        else {
          std::string::size_type v42 = *((void *)&v72 + 1);
        }
        std::string::append(&v75, v41, v42);
        if (SHIBYTE(v73) < 0) {
          operator delete((void *)v72);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
      }
      ++v74;
    }
    while (v74 < *(_DWORD *)(a1 + 80));
  }
  uint64_t v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v72, "\n");
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = &v75;
  }
  else {
    std::string::size_type v44 = (std::string *)v75.__r_.__value_.__r.__words[0];
  }
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v45 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v45 = v75.__r_.__value_.__l.__size_;
  }
  int v46 = std::string::insert(v43, 0, (const std::string::value_type *)v44, v45);
  *a2 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)v72);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
}

void sub_173734(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_173900()
{
}

void sub_173908()
{
}

void sub_173910()
{
}

void sub_173918()
{
}

void sub_173920()
{
}

void sub_173928()
{
}

void sub_173930()
{
}

void sub_173938()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoBackPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a2 + 20);
  uint64_t v6 = *(unsigned int *)(a1 + 96);
  int v81 = (int)v5 / (int)v6;
  if ((int)v5 % (int)v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_298.addr + 3, "batch_size % num_utts == 0", a5);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v108, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 701, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v108, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    std::string::size_type v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    float v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v108);
  }
  uint64_t v14 = *(void *)(a3 + 32);
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateForwardBuffers(a1, a4, v5, v14);
  uint64_t v16 = *(void *)(a1 + 104);
  uint64_t v17 = a4;
  uint64_t v83 = a4;
  int v78 = a4;
  if (*(void *)(a1 + 112) == v16)
  {
    int v79 = 0;
  }
  else
  {
    int v18 = *(_DWORD *)(v16 + 32 * a4 + 16);
    if (v18 < 1)
    {
      int v79 = 0;
      uint64_t v17 = a4;
    }
    else
    {
      if (v18 != v5) {
        kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_298.size + 5, "boundary_[batch_index].Dim() == batch_size", v15);
      }
      uint64_t v17 = a4;
      uint64_t v19 = *(void *)(a1 + 128) + 48 * a4;
      *(void *)(v19 + 32) = v14;
      int v79 = 1;
      kaldi::CuMatrix<float>::Resize(v19, v6, *(unsigned int *)(*(void *)(a1 + 8) + 48 * a4 + 16), 1u, 0);
    }
  }
  uint64_t v20 = *(void *)(a1 + 248) + 48 * v17;
  uint64_t v82 = *(void *)(a1 + 344) + 48 * v17;
  uint64_t v21 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  kaldi::CuMatrixBase<float>::AddMatMat<short>(v20, a2, 111, v21, &stru_68.sectname[8], 1.0, 0.0);
  uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  kaldi::CuMatrixBase<float>::AddVecToRows(v20, v22, v23, v24, v25, 1.0, 1.0);
  if (v81 >= 1)
  {
    int v28 = v17;
    int v29 = 0;
    int v30 = 0;
    uint64_t v80 = a1 + 12;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v108, v20, v29, v6, 0, *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v105, v20, v29, v6, (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v102, v20, v29, v6, (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      uint64_t v31 = *(void *)(a1 + 272) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v99, v31, v29, v6, 0, *(_DWORD *)(v31 + 16));
      memset(v98, 0, sizeof(v98));
      std::string v97 = off_262D80;
      memset(v96, 0, sizeof(v96));
      std::string v95 = off_262D80;
      if (v30)
      {
        if (v79)
        {
          kaldi::CuMatrixBase<float>::SetZero(*(void *)(a1 + 128) + 48 * (int)v83);
          uint64_t v32 = *(void *)(a1 + 128) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v32, 0, *(_DWORD *)(v32 + 20), 0, *(_DWORD *)(a1 + 176));
          v96[0] = v94[0];
          *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
          v96[3] = v94[3];
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
          uint64_t v33 = *(void *)(a1 + 272) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v33, v29 - v6, v6, 0, *(_DWORD *)(v33 + 16));
          kaldi::CuSubVector<float>::CuSubVector(&v90, *(void *)(a1 + 104) + 32 * v83, v29, v6, v34);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v95, (uint64_t)&v93, (uint64_t)&v90, 1, v35);
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
          uint64_t v36 = *(void *)(a1 + 128) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v36, 0, *(_DWORD *)(v36 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v80 + *(void *)(*(void *)a1 - 24)));
          *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
          v98[0] = v94[0];
          v98[3] = v94[3];
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v82, v29 - v6, v6, 0, *(_DWORD *)(v82 + 16));
          int v28 = v83;
          kaldi::CuSubVector<float>::CuSubVector(&v90, *(void *)(a1 + 104) + 32 * v83, v29, v6, v37);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v97, (uint64_t)&v93, (uint64_t)&v90, 1, v38);
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
        }
        else
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v82, v29 - v6, v6, 0, *(_DWORD *)(v82 + 16));
          *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
          v98[0] = v94[0];
          v98[3] = v94[3];
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
          uint64_t v41 = *(void *)(a1 + 272) + 48 * (int)v83;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v41, v29 - v6, v6, 0, *(_DWORD *)(v41 + 16));
          v96[0] = v94[0];
          *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
          v96[3] = v94[3];
          std::string v93 = off_262D80;
          memset(v94, 0, sizeof(v94));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
          int v28 = v83;
        }
      }
      else
      {
        int v28 = v83;
        uint64_t v39 = *(void *)(a1 + 8) + 48 * (int)v83;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v39, 0, *(_DWORD *)(v39 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v80 + *(void *)(*(void *)a1 - 24)));
        *(_OWORD *)&v98[1] = *(_OWORD *)&v94[1];
        v98[0] = v94[0];
        v98[3] = v94[3];
        std::string v93 = off_262D80;
        memset(v94, 0, sizeof(v94));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
        uint64_t v40 = *(void *)(a1 + 8) + 48 * (int)v83;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v40, 0, *(_DWORD *)(v40 + 20), 0, *(_DWORD *)(a1 + 176));
        v96[0] = v94[0];
        *(_OWORD *)&v96[1] = *(_OWORD *)&v94[1];
        v96[3] = v94[3];
        std::string v93 = off_262D80;
        memset(v94, 0, sizeof(v94));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v20, v29, v6, 0, *(_DWORD *)(v20 + 16));
      std::string::size_type v42 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v93, (uint64_t)&v97, 111, v42, &stru_68.sectname[8], 1.0, 1.0);
      std::string v93 = off_262D80;
      memset(v94, 0, sizeof(v94));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v46 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v46 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v47);
        }
        unsigned int v48 = *(_DWORD *)(v46 + 16);
        uint64_t v49 = *(void *)(v46 + 32);
        v94[0] = *(void *)(v46 + 8);
        std::string v93 = &off_262E20;
        v94[1] = v48;
        v94[2] = v49;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v108, (uint64_t)&v95, 111, (uint64_t)&v93, v47, 1.0, 1.0);
        uint64_t v50 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v50 + 20) <= 1u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v51);
        }
        unsigned int v52 = *(_DWORD *)(v50 + 16);
        uint64_t v53 = *(void *)(v50 + 32);
        v94[0] = *(void *)(v50 + 8) + 4 * *(int *)(v50 + 24);
        std::string v93 = &off_262E20;
        v94[1] = v52;
        v94[2] = v53;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v105, (uint64_t)&v95, 111, (uint64_t)&v93, v51, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid(&v108, &v108, v43, v44, v45);
      kaldi::CuMatrixBase<float>::Sigmoid(&v105, &v105, v54, v55, v56);
      kaldi::CuMatrixBase<float>::ApplyTanh((uint64_t)&v102, v57, v58, v59, v60);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v99, (uint64_t)&v108, 111, (uint64_t)&v102, &stru_68.sectname[7], 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v99, (uint64_t)&v105, 111, (uint64_t)&v95, &stru_68.sectname[7], 1.0, 1.0);
      float v61 = *(float *)(a1 + 476);
      if (v61 > 0.0)
      {
        kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)&v99, v61);
        kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v99, -*(float *)(a1 + 476));
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v20, v29, v6, (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v65 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v65 + 20) <= 2u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v66);
        }
        unsigned int v67 = *(_DWORD *)(v65 + 16);
        uint64_t v68 = *(void *)(v65 + 32);
        *(void *)&long long v91 = *(void *)(v65 + 8) + 8 * *(int *)(v65 + 24);
        uint64_t v90 = &off_262E20;
        *((void *)&v91 + 1) = v67;
        *(void *)&long long v92 = v68;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v93, (uint64_t)&v99, 111, (uint64_t)&v90, v66, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid(&v93, &v93, v62, v63, v64);
      uint64_t v69 = *(void *)(a1 + 296) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v90, v69, v29, v6, 0, *(_DWORD *)(v69 + 16));
      kaldi::CuMatrixBase<float>::Tanh(&v90, &v99, v70, v71, v72);
      uint64_t v73 = *(void *)(a1 + 320) + 48 * v28;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, v73, v29, v6, 0, *(_DWORD *)(v73 + 16));
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v87, (uint64_t)&v93, 111, (uint64_t)&v90, &stru_68.sectname[7], 1.0, 0.0);
      if (*(unsigned char *)(a1 + 224))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v84, v82, v29, v6, 0, *(_DWORD *)(v82 + 16));
        int v74 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
        kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v84, (uint64_t)&v87, 111, v74, &stru_68.sectname[8], 1.0, 0.0);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v84, v82, v29, v6, 0, *(_DWORD *)(v82 + 16));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v84, (uint64_t)&v87, 111, v75, v76);
      }
      std::string v84 = off_262D80;
      long long v85 = 0u;
      long long v86 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v84);
      int64_t v87 = off_262D80;
      long long v88 = 0u;
      long long v89 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v87);
      uint64_t v90 = off_262D80;
      long long v91 = 0u;
      long long v92 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v90);
      std::string v93 = off_262D80;
      memset(v94, 0, sizeof(v94));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v93);
      std::string v95 = off_262D80;
      memset(v96, 0, sizeof(v96));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v95);
      std::string v97 = off_262D80;
      memset(v98, 0, sizeof(v98));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v97);
      std::string v99 = off_262D80;
      long long v100 = 0u;
      long long v101 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v99);
      long long v102 = off_262D80;
      long long v103 = 0u;
      long long v104 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v102);
      std::string v105 = off_262D80;
      long long v106 = 0u;
      long long v107 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v105);
      long long v108 = off_262D80;
      long long v109 = 0u;
      long long v110 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v108);
      ++v30;
      v29 += v6;
    }
    while (v81 != v30);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, v82, 111, v26, v27);
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SaveLastState(a1, v78);
}

void sub_1746EC(_Unwind_Exception *a1)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateForwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateForwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1397, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    std::string::size_type v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 248) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 272) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 296) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 320) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 344) + 48 * a2, a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  *(void *)(*(void *)(a1 + 248) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 272) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 296) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 320) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 344) + 48 * a2 + 32) = a4;
}

void sub_174BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SaveLastState(uint64_t a1, int a2)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16, "SaveLastState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1700, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Saving last output and cell state for batch ", 44);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16);
  }
  int v4 = *(_DWORD *)(*(void *)(a1 + 272) + 48 * a2 + 20) - *(_DWORD *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 8) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, v5, 0, *(_DWORD *)(v5 + 20), 0, *(_DWORD *)(a1 + 176));
  uint64_t v6 = *(void *)(a1 + 272) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, v6, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(v6 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v7, v8);
  float v13 = off_262D80;
  long long v14 = 0u;
  long long v15 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v13);
  uint64_t v16 = off_262D80;
  long long v17 = 0u;
  long long v18 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v16);
  uint64_t v9 = 3 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, *(void *)(a1 + 8) + 16 * v9, 0, *(_DWORD *)(*(void *)(a1 + 8) + 16 * v9 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, *(void *)(a1 + 344) + 16 * v9, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(*(void *)(a1 + 344) + 16 * v9 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v10, v11);
  float v13 = off_262D80;
  long long v14 = 0u;
  long long v15 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v13);
  uint64_t v16 = off_262D80;
  long long v17 = 0u;
  long long v18 = 0u;
  *(void *)&double result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v16).n128_u64[0];
  return result;
}

void sub_174E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(), long long a10, long long a11, void (**a12)(), long long a13, long long a14)
{
  a9 = off_262D80;
  a10 = 0u;
  a11 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a9);
  a12 = off_262D80;
  a13 = 0u;
  a14 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a12);
  _Unwind_Resume(a1);
}

double virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 128), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (*(_DWORD *)(a1 + 96) == 1)
  {
    uint64_t v6 = *(void *)(a3 + 24);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateForwardBuffers(a1, 0, 1, v6);
    uint64_t v8 = *(void *)(a1 + 104);
    if (*(void *)(a1 + 112) != v8)
    {
      int v9 = *(_DWORD *)(v8 + 16);
      if (v9 >= 1)
      {
        if (v9 != 1) {
          kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_2E8.nreloc + 1, "boundary_[0].Dim() == 1", v7);
        }
        uint64_t v10 = *(void *)(a1 + 128);
        *(void *)(v10 + 32) = v6;
        kaldi::CuMatrix<float>::Resize(v10, 1, *(unsigned int *)(*(void *)(a1 + 8) + 16), 1u, 0);
      }
    }
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
    kaldi::CuVectorBase<float>::AddMatVec<short>();
  }
  kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_2E8.reloff, "ropts_.num_sequences == 1", v5);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 876);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

{
  void *v0;
  void v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 881);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc()
{
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc();
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  uint64_t v11 = *(unsigned int *)(a1 + 96);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers((uint64_t *)a1);
  int v13 = (int)v10 / (int)v11;
  if ((int)v10 % (int)v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_338.reserved2, "batch_size % num_utts == 0", v12);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v151, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 898, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v151, (uint64_t)"Running backward propagation for batch std::string::size_type size = ", 46);
    long long v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", which contains ", 17);
    long long v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" frames each from ", 18);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v151);
  }
  if (v13 < 2) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_338.reserved3, "frames_in_batch > 1 && \"LSTM backprop will not work with batches of single frames.\"", v12);
  }
  uint64_t v102 = a5;
  if (a5) {
    uint64_t v17 = a5;
  }
  else {
    uint64_t v17 = a4;
  }
  uint64_t v18 = *(void *)(v17 + 32);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateBackwardBuffers(a1, a6, v10, v18);
  uint64_t v21 = a6;
  uint64_t v22 = *(void *)(a1 + 248);
  uint64_t v23 = 3 * a6;
  uint64_t v24 = *(void *)(a1 + 440) + 16 * v23;
  uint64_t v25 = *(void *)(a1 + 368);
  uint64_t v105 = *(void *)(a1 + 416);
  uint64_t v26 = *(void *)(a1 + 104);
  uint64_t v103 = v24;
  if (*(void *)(a1 + 112) == v26 || (int v27 = *(_DWORD *)(v26 + 32 * v21 + 16), v27 < 1))
  {
    int v106 = 0;
  }
  else
  {
    if (v27 != v10) {
      kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", &stru_388.sectname[8], "boundary_[batch_index].Dim() == batch_size", v20);
    }
    uint64_t v28 = *(void *)(a1 + 128) + 48 * (int)v21;
    *(void *)(v28 + 32) = v18;
    int v106 = 1;
    kaldi::CuMatrix<float>::Resize(v28, v11, *(unsigned int *)(v24 + 16), 1u, 0);
  }
  uint64_t v29 = v22 + 16 * v23;
  uint64_t v30 = v25 + 16 * v23;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)v30, a4, 111, v19, v20);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v151, v29, 0, *(_DWORD *)(v29 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v148, v29, 0, *(_DWORD *)(v29 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v145, v29, 0, *(_DWORD *)(v29 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v142, v29, 0, *(_DWORD *)(v29 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  uint64_t v31 = v103;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v139, v103, 0, *(_DWORD *)(v103 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v136, v31, 0, *(_DWORD *)(v31 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v133, v31, 0, *(_DWORD *)(v31 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, v31, 0, *(_DWORD *)(v31 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v139, (uint64_t)&v151, (uint64_t)&v142, v32, v33);
  int v34 = v10 - v11;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, (uint64_t)&v136, v11, v34, 0, SDWORD2(v137));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, (uint64_t)&v148, v11, v34, 0, SDWORD2(v149));
  uint64_t v35 = *(void *)(a1 + 272) + 48 * (int)v21;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v121, v35, 0, v34, 0, *(_DWORD *)(v35 + 16));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v127, (uint64_t)&v124, (uint64_t)&v121, v36, v37);
  uint64_t v121 = off_262D80;
  long long v122 = 0u;
  long long v123 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v121);
  uint64_t v124 = off_262D80;
  long long v125 = 0u;
  long long v126 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v124);
  v127 = off_262D80;
  long long v128 = 0u;
  long long v129 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v127);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, (uint64_t)&v136, 0, v11, 0, SDWORD2(v137));
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v127);
  v127 = off_262D80;
  long long v128 = 0u;
  long long v129 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v127);
  if (v106)
  {
    uint64_t v40 = *(void *)(a1 + 128) + 48 * (int)v21;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, v40, 0, *(_DWORD *)(v40 + 20), 0, *(_DWORD *)(a1 + 176));
    kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v127);
    int v41 = v13 - 1;
    int v42 = v11;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, (uint64_t)&v136, v42, v11, 0, SDWORD2(v137));
      kaldi::CuSubVector<float>::CuSubVector(&v121, *(void *)(a1 + 104) + 32 * v21, v42, v11, v43);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v124, (uint64_t)&v127, (uint64_t)&v121, 0, v44);
      uint64_t v124 = off_262D80;
      long long v125 = 0u;
      long long v126 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v124);
      v42 += v11;
      --v41;
    }
    while (v41);
    v127 = off_262D80;
    long long v128 = 0u;
    long long v129 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v127);
  }
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v133, (uint64_t)&v145, *(void *)(a1 + 296) + 48 * (int)v21, v38, v39);
  kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)&v130, (uint64_t)&v142, (uint64_t)&v151, v45, v46);
  uint64_t v47 = v105 + 16 * v23;
  kaldi::CuMatrixBase<float>::DiffTanh(v47, *(void *)(a1 + 296) + 48 * (int)v21, (uint64_t)&v145, v48, v49);
  int v50 = v13 - 1;
  int v104 = v13 - 1;
  do
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v127, v30, v50 * v11, v11, 0, *(_DWORD *)(v30 + 16));
    uint64_t v51 = *(void *)(a1 + 392) + 48 * (int)v21;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, v51, v50 * v11, v11, 0, *(_DWORD *)(v51 + 16));
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v54 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v124, (uint64_t)&v127, 111, v54, &stru_68.sectname[7], 1.0, 0.0);
    }
    else
    {
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v124, (uint64_t)&v127, 111, v52, v53);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v121, (uint64_t)&v133, v50 * v11, v11, 0, SDWORD2(v134));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v121, (uint64_t)&v124, v55, v56, v57);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v118, v47, v50 * v11, v11, 0, *(_DWORD *)(v47 + 16));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v118, (uint64_t)&v124, v58, v59, v60);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v61 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
      if (*(_DWORD *)(v61 + 20) <= 2u) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v62);
      }
      unsigned int v63 = *(_DWORD *)(v61 + 16);
      uint64_t v64 = *(void *)(v61 + 32);
      v117[0] = *(void *)(v61 + 8) + 8 * *(int *)(v61 + 24);
      uint64_t v116 = &off_262E20;
      v117[1] = v63;
      v117[2] = v64;
      kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v121, 111, (uint64_t)&v116, v62, 1.0, 1.0);
    }
    if (v50 < v104)
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, v47, v11 + v11 * v50, v11, 0, *(_DWORD *)(v47 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, (uint64_t)&v148, v11 + v11 * v50, v11, 0, SDWORD2(v149));
      if (v106)
      {
        uint64_t v65 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v112, v65, 0, *(_DWORD *)(v65 + 20), 0, *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v112);
        kaldi::CuSubVector<float>::CuSubVector(&v110, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v66);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v112, (uint64_t)&v116, (uint64_t)&v110, 1, v67);
        *(_OWORD *)&v117[1] = *(_OWORD *)&v113[1];
        v117[0] = v113[0];
        v117[3] = v113[3];
        uint64_t v68 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v110, v68, 0, *(_DWORD *)(v68 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v110);
        kaldi::CuSubVector<float>::CuSubVector(v109, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v69);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v110, (uint64_t)&v114, (uint64_t)v109, 1, v70);
        v115[0] = v111[0];
        *(_OWORD *)&v115[1] = *(_OWORD *)&v111[1];
        v115[3] = v111[3];
        long long v110 = off_262D80;
        memset(v111, 0, sizeof(v111));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v110);
        uint64_t v112 = off_262D80;
        memset(v113, 0, sizeof(v113));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v112);
      }
      if (*(unsigned char *)(a1 + 208))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v112, (uint64_t)&v136, v11 + v11 * v50, v11, 0, SDWORD2(v137));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v110, (uint64_t)&v139, v11 + v11 * v50, v11, 0, SDWORD2(v140));
        if (v106)
        {
          uint64_t v71 = *(void *)(a1 + 128) + 48 * (int)v21;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)v109, v71, 0, *(_DWORD *)(v71 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v109);
          kaldi::CuSubVector<float>::CuSubVector(v108, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v72);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v109, (uint64_t)&v112, (uint64_t)v108, 1, v73);
          *(_OWORD *)&v113[1] = *(_OWORD *)&v109[2];
          v113[0] = v109[1];
          v113[3] = v109[4];
          uint64_t v74 = *(void *)(a1 + 128) + 48 * (int)v21;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)v108, v74, 0, *(_DWORD *)(v74 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v108);
          kaldi::CuSubVector<float>::CuSubVector(v107, *(void *)(a1 + 104) + 32 * v21, v11 + v11 * v50, v11, v75);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v108, (uint64_t)&v110, (uint64_t)v107, 1, v76);
          v111[0] = v108[1];
          *(_OWORD *)&v111[1] = *(_OWORD *)&v108[2];
          v111[3] = v108[4];
          v108[0] = off_262D80;
          memset(&v108[1], 0, 32);
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v108);
          v109[0] = off_262D80;
          memset(&v109[1], 0, 32);
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v109);
        }
        uint64_t v77 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v77 + 20) <= 1u) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v78);
        }
        unsigned int v79 = *(_DWORD *)(v77 + 16);
        uint64_t v80 = *(void *)(v77 + 32);
        v109[1] = *(void *)(v77 + 8) + 4 * *(int *)(v77 + 24);
        v109[0] = &off_262E20;
        v109[2] = v79;
        v109[3] = v80;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v112, 111, (uint64_t)v109, v78, 1.0, 1.0);
        uint64_t v81 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v81 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v82);
        }
        unsigned int v83 = *(_DWORD *)(v81 + 16);
        uint64_t v84 = *(void *)(v81 + 32);
        v109[1] = *(void *)(v81 + 8);
        v109[0] = &off_262E20;
        v109[2] = v83;
        v109[3] = v84;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v118, (uint64_t)&v110, 111, (uint64_t)v109, v82, 1.0, 1.0);
        long long v110 = off_262D80;
        memset(v111, 0, sizeof(v111));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v110);
        uint64_t v112 = off_262D80;
        memset(v113, 0, sizeof(v113));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v112);
      }
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v118, (uint64_t)&v116, 111, (uint64_t)&v114, &stru_68.sectname[7], 1.0, 1.0);
      uint64_t v114 = off_262D80;
      memset(v115, 0, sizeof(v115));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v114);
      uint64_t v116 = off_262D80;
      memset(v117, 0, sizeof(v117));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v116);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v139, v50 * v11, v11, 0, SDWORD2(v140));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v85, v86, v87);
    uint64_t v116 = off_262D80;
    memset(v117, 0, sizeof(v117));
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v116);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v130, v50 * v11, v11, 0, SDWORD2(v131));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v88, v89, v90);
    uint64_t v116 = off_262D80;
    memset(v117, 0, sizeof(v117));
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v116);
    if (v50 <= 0)
    {
      int v97 = v50 - 1;
    }
    else
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, (uint64_t)&v136, v50 * v11, v11, 0, SDWORD2(v137));
      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v116, (uint64_t)&v118, v91, v92, v93);
      uint64_t v116 = off_262D80;
      memset(v117, 0, sizeof(v117));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v116);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v116, v103, v50 * v11, v11, 0, *(_DWORD *)(v103 + 16));
      if (v106)
      {
        uint64_t v94 = *(void *)(a1 + 128) + 48 * (int)v21;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, v94, 0, *(_DWORD *)(v94 + 20), 0, v117[1]);
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v114);
        kaldi::CuSubVector<float>::CuSubVector(&v112, *(void *)(a1 + 104) + 32 * v21, v50 * v11, v11, v95);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v114, (uint64_t)&v116, (uint64_t)&v112, 1, v96);
        *(_OWORD *)&v117[1] = *(_OWORD *)&v115[1];
        v117[0] = v115[0];
        v117[3] = v115[3];
        uint64_t v114 = off_262D80;
        memset(v115, 0, sizeof(v115));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v114);
      }
      int v97 = v50 - 1;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v114, v30, (v50 - 1) * v11, v11, 0, *(_DWORD *)(v30 + 16));
      std::string v98 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v114, (uint64_t)&v116, 111, v98, &stru_68.sectname[7], 1.0, 1.0);
      uint64_t v114 = off_262D80;
      memset(v115, 0, sizeof(v115));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v114);
      uint64_t v116 = off_262D80;
      memset(v117, 0, sizeof(v117));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v116);
    }
    uint64_t v118 = off_262D80;
    long long v119 = 0u;
    long long v120 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v118);
    uint64_t v121 = off_262D80;
    long long v122 = 0u;
    long long v123 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v121);
    uint64_t v124 = off_262D80;
    long long v125 = 0u;
    long long v126 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v124);
    v127 = off_262D80;
    long long v128 = 0u;
    long long v129 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v127);
    BOOL v99 = v50 <= 0;
    int v50 = v97;
  }
  while (!v99);
  if (v102)
  {
    long long v100 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::AddMatMat<short>(v102, v103, 111, v100, &stru_68.sectname[7], 1.0, 0.0);
  }
  v130 = off_262D80;
  long long v131 = 0u;
  long long v132 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v130);
  v133 = off_262D80;
  long long v134 = 0u;
  long long v135 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v133);
  v136 = off_262D80;
  long long v137 = 0u;
  long long v138 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v136);
  v139 = off_262D80;
  long long v140 = 0u;
  long long v141 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v139);
  v142 = off_262D80;
  long long v143 = 0u;
  long long v144 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v142);
  v145 = off_262D80;
  long long v146 = 0u;
  long long v147 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v145);
  v148 = off_262D80;
  long long v149 = 0u;
  long long v150 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v148);
  v151 = off_262D80;
  long long v152 = 0u;
  long long v153 = 0u;
  *(void *)&double result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v151).n128_u64[0];
  return result;
}

void sub_17698C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a71 = off_262D80;
  a72 = 0u;
  *(_OWORD *)&STACK[0x208] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a71);
  STACK[0x218] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x220] = 0u;
  *(_OWORD *)&STACK[0x230] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x218]);
  STACK[0x240] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x248] = 0u;
  *(_OWORD *)&STACK[0x258] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x240]);
  STACK[0x268] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x270] = 0u;
  *(_OWORD *)&STACK[0x280] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x268]);
  STACK[0x290] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x298] = 0u;
  *(_OWORD *)&STACK[0x2A8] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x290]);
  STACK[0x2B8] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x2C0] = 0u;
  *(_OWORD *)&STACK[0x2D0] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x2B8]);
  STACK[0x2E0] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x2E8] = 0u;
  *(_OWORD *)&STACK[0x2F8] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x2E0]);
  STACK[0x308] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x310] = 0u;
  *(_OWORD *)&STACK[0x320] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x308]);
  STACK[0x330] = (unint64_t)off_262D80;
  *(_OWORD *)&STACK[0x338] = 0u;
  *(_OWORD *)&STACK[0x348] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&STACK[0x330]);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateBackwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateBackwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1413, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 368) + 48 * a2, a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 392) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 416) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 440) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  *(void *)(*(void *)(a1 + 368) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 392) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 416) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 440) + 48 * a2 + 32) = a4;
}

void sub_1771F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc((uint64_t)a1 + *(void *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 80) <= (int)a5) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_3D8.align + 1, "batch_index < ropts_.num_subbatches", a5);
  }
  int v7 = *(_DWORD *)(a1 + 96);
  int v8 = *(_DWORD *)(a2 + 20);
  if (v8 % v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_3D8.reloff + 1, "batch_size % num_utts == 0", a5);
  }
  int v9 = (int)a5;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1043, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"Accumulating gradients for batch id = ", 38);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    std::string::size_type v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55);
  }
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(a1);
  uint64_t v38 = *(void *)(a1 + 272);
  long long v14 = (_DWORD *)(*(void *)(a1 + 440) + 48 * v9);
  float v15 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 480) + 4 * v9) = v8;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v55, (uint64_t)v14, 0, v14[5], 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v52, (uint64_t)v14, 0, v14[5], (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, (uint64_t)v14, 0, v14[5], (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v9) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v9) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v9) + 24) = a4;
  if (*(unsigned char *)(a1 + 208)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v9) + 32) = a4;
  }
  if (*(unsigned char *)(a1 + 224)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v9) + 32) = a4;
  }
  uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v9);
  kaldi::CuMatrixBase<float>::AddMatMat(v16, (uint64_t)v14, CblasTrans, a2, &stru_68.sectname[7], 1.0, v15);
  uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v9);
  int v18 = v8 - v7;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)v14, v7, v8 - v7, 0, v14[4]);
  uint64_t v19 = *(void *)(a1 + 344) + 48 * v9;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v19, 0, v8 - v7, 0, *(_DWORD *)(v19 + 16));
  kaldi::CuMatrixBase<float>::AddMatMat(v17, (uint64_t)&v46, CblasTrans, (uint64_t)&v43, &stru_68.sectname[7], 1.0, v15);
  uint64_t v43 = off_262D80;
  long long v44 = 0u;
  long long v45 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
  uint64_t v46 = off_262D80;
  long long v47 = 0u;
  long long v48 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
  uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v9);
  kaldi::CuVectorBase<float>::AddRowSumMat(v20, v14, 1.0, v15, v21, v22, v23);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v9);
    if (!*(_DWORD *)(v24 + 20)) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
    }
    unsigned int v26 = *(_DWORD *)(v24 + 16);
    uint64_t v27 = *(void *)(v24 + 32);
    uint64_t v40 = *(void *)(v24 + 8);
    uint64_t v39 = &off_262E20;
    uint64_t v41 = v26;
    uint64_t v42 = v27;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)&v55, v7, v18, 0, SDWORD2(v56));
    uint64_t v28 = v38 + 48 * v9;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v28, 0, v18, 0, *(_DWORD *)(v28 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v39, (uint64_t)&v46, 112, (uint64_t)&v43, 111, 1.0, v15);
    uint64_t v43 = off_262D80;
    long long v44 = 0u;
    long long v45 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
    uint64_t v46 = off_262D80;
    long long v47 = 0u;
    long long v48 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
    uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v29 + 20) <= 1u) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v30);
    }
    unsigned int v31 = *(_DWORD *)(v29 + 16);
    uint64_t v32 = *(void *)(v29 + 32);
    uint64_t v40 = *(void *)(v29 + 8) + 4 * *(int *)(v29 + 24);
    uint64_t v39 = &off_262E20;
    uint64_t v41 = v31;
    uint64_t v42 = v32;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)&v52, v7, v18, 0, SDWORD2(v53));
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v28, 0, v18, 0, *(_DWORD *)(v28 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v39, (uint64_t)&v46, 112, (uint64_t)&v43, 111, 1.0, v15);
    uint64_t v43 = off_262D80;
    long long v44 = 0u;
    long long v45 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
    uint64_t v46 = off_262D80;
    long long v47 = 0u;
    long long v48 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
    uint64_t v33 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v33 + 20) <= 2u) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v34);
    }
    unsigned int v35 = *(_DWORD *)(v33 + 16);
    uint64_t v36 = *(void *)(v33 + 32);
    *(void *)&long long v47 = *(void *)(v33 + 8) + 8 * *(int *)(v33 + 24);
    uint64_t v46 = &off_262E20;
    *((void *)&v47 + 1) = v35;
    *(void *)&long long v48 = v36;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v46, (uint64_t)&v49, 112, v28, 111, 1.0, v15);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v37 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v9);
    kaldi::CuMatrixBase<float>::AddMatMat(v37, *(void *)(a1 + 368) + 48 * v9, CblasTrans, *(void *)(a1 + 320) + 48 * v9, &stru_68.sectname[7], 1.0, v15);
  }
  uint64_t v49 = off_262D80;
  long long v50 = 0u;
  long long v51 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v49);
  uint64_t v52 = off_262D80;
  long long v53 = 0u;
  long long v54 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v52);
  uint64_t v55 = off_262D80;
  long long v56 = 0u;
  long long v57 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v55);
}

void sub_177964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void (**a25)(),long long a26,long long a27,void (**a28)(),long long a29,long long a30,void (**a31)(),long long a32,long long a33)
{
  a25 = off_262D80;
  a26 = 0u;
  a27 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a25);
  a28 = off_262D80;
  a29 = 0u;
  a30 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a28);
  a31 = off_262D80;
  a32 = 0u;
  a33 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a31);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 528)) {
    return;
  }
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  if (*(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1332);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "input_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 568) != *(void *)(a1 + 560))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1333);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "recurrent_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 616) != *(void *)(a1 + 608))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1334);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "bias_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 208) && *(void *)(a1 + 592) != *(void *)(a1 + 584))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1335);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "peephole_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 224) && *(void *)(a1 + 640) != *(void *)(a1 + 632))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1336);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "projection_weights_gradient_.size() == 0");
LABEL_34:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 536), v3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 560), v3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 608), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 656), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 680), v3);
  std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 728), v3);
  if (v3 >= 1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 208))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 584), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 704), v3);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 632), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 752), v3);
  }
  *(unsigned char *)(a1 + 528) = 1;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1391, 2);
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocated memory for the gradients: ", 36);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 272))(__p, a1);
    if ((v8 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      uint64_t v6 = v8;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
}

void sub_178328()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1116);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v7 = *(void *)(a1 + 104);
  unsigned __int8 v8 = (void *)(a1 + 104);
  if (v7 == *(void *)(a1 + 112))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 104), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 128), *(int *)(a1 + 80));
    uint64_t v7 = *(void *)(a1 + 104);
  }
  kaldi::CuVector<float>::Resize(v7 + 32 * a3, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  int v13 = (_DWORD *)(*v8 + 32 * a3);

  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2, v10, v11, v12);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  *((_WORD *)a1 + 120) = 0;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetTrainOptions(void *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  int v2 = (kaldi::nnet1::RecurrentBaseComponent *)((char *)a1 + *(void *)(*a1 - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 120) = 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::HistoryStateSize(uint64_t a1)
{
  return (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) + *(_DWORD *)(a1 + 176));
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetHistoryState(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", &stru_6A8.sectname[6], "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  uint64_t v8 = *(void *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(v8 + 20), *(unsigned int *)(v8 + 16), 1u, 0);
  uint64_t v11 = *(void *)(a1 + 8) + 48 * a3;

  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, v11, 111, v9, v10);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", &stru_6A8.sectname[13], "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  if ((a3 & 0x80000000) != 0
    || (uint64_t v7 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v7 + 20) <= (signed int)a3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", &stru_6A8.sectname[14], "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", a5);
  }
  unsigned int v9 = a4;
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(v7 + 16), 1u, a4, a5);
  uint64_t v13 = *(void *)(a1 + 8) + 48 * v9;
  if (*(_DWORD *)(v13 + 20) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
  }
  uint64_t v14 = *(void *)(v13 + 8) + 4 * (int)(*(_DWORD *)(v13 + 24) * a3);
  unsigned int v15 = *(_DWORD *)(v13 + 16);
  uint64_t v16 = *(void *)(v13 + 32);
  v18[1] = v14;
  v18[0] = &off_262E20;
  v18[2] = v15;
  v18[3] = v16;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v18, v10, v11, v12);
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.size + 5, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v7);
  }
  uint64_t v8 = (unsigned int *)(*(void *)(a1 + 8) + 48 * a3);
  if (*(_DWORD *)(a2 + 20) != v8[5]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.size + 6, "history.NumRows() == history_state_[batch_index].NumRows()", v7);
  }
  if (*(_DWORD *)(a2 + 16) != v8[4]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.size + 7, "history.NumCols() == history_state_[batch_index].NumCols()", v7);
  }

  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v8, a2, 111, v6, v7);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetHistoryState(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.align + 2, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v10);
  }
  if (a3 < 0 || (uint64_t v11 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v11 + 20) <= a3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.align + 3, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", v10);
  }
  unsigned int v12 = *(_DWORD *)(a2 + 16);
  if (v12 != *(_DWORD *)(v11 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.reloff, "history.Dim() == history_state_[batch_index].NumCols()", v10);
  }
  uint64_t v13 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * a3;
  uint64_t v14 = *(void *)(v11 + 32);
  v16[1] = v13;
  v16[0] = &off_262E20;
  v16[2] = v12;
  v16[3] = v14;
  return kaldi::CuVectorBase<float>::CopyFromVec(v16, a2, v8, v9, v10);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.nreloc + 3, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v8);
  }
  if (a2[1] != *(_DWORD *)(*(void *)(a1 + 8) + 48 * a4 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_6A8.flags, "sequence_idx.size() == history_state_[batch_index].NumRows()", v8);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  *(void *)(*(void *)(a1 + 8) + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    unint64_t v10 = 0;
    do
    {
      if ((*(void *)(*a2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10))
      {
        uint64_t v11 = *(void *)(a1 + 8) + 48 * a4;
        if (v10 >= *(unsigned int *)(v11 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v9);
        }
        uint64_t v12 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * (int)v10;
        unsigned int v13 = *(_DWORD *)(v11 + 16);
        uint64_t v14 = *(void *)(v11 + 32);
        v22[1] = v12;
        v22[0] = &off_262E20;
        v22[2] = v13;
        v22[3] = v14;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v22);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          unsigned int v15 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
        }
      }
      ++v10;
    }
    while (a2[1] > v10);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1779, 3);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v21 & 0x80u) == 0) {
      uint64_t v17 = __p;
    }
    else {
      uint64_t v17 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      uint64_t v18 = v21;
    }
    else {
      uint64_t v18 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22);
  }
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_178CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ResetHistoryState(void *a1)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  for (uint64_t i = a1[1]; i != a1[2]; i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(unsigned char *)(result + 528) = 0;
  return result;
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(void *result, int a2, float a3)
{
  int v3 = (float *)((char *)result + *(void *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((unsigned char *)v3 + 528) = 0;
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(uint64_t a1, unsigned int a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"NormalizeGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_568.offset + 2, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a6);
  }
  float v8 = a3;
  int v9 = *(_DWORD *)(a1 + 156);
  if (v9 == 1)
  {
    if (a3 > 0.0)
    {
      if (*(unsigned char *)(a1 + 84)) {
        float v8 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
      }
      uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v19, v8);
      uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v20, v8);
      uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v21, v8);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v22, v8);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v23, v8);
      }
    }
  }
  else if (v9 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *(void *)(a1 + 656) + 48 * a2, v8);
      uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, *(void *)(a1 + 680) + 48 * a2, v8);
      uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, *(void *)(a1 + 728) + 32 * a2, v8, v13, v14, v15);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v16, *(void *)(a1 + 704) + 48 * a2, v8);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a2);
        uint64_t v18 = *(void *)(a1 + 752) + 48 * a2;
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v17, v18, v8);
      }
    }
  }
  else if (a3 > 0.0 && v9 == 2)
  {
    uint64_t v24 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v8 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
    }
    uint64_t v25 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v25, (unsigned int *)(*(void *)(a1 + 656) + 48 * v24), v8, v26, v27, v28);
    uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v29, (unsigned int *)(*(void *)(a1 + 680) + 48 * v24), v8, v30, v31, v32);
    uint64_t v33 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v33, (_DWORD *)(*(void *)(a1 + 728) + 32 * v24), v34, v35, v36, v8);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v37 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v37, (unsigned int *)(*(void *)(a1 + 704) + 48 * v24), v8, v38, v39, v40);
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v41 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a2);
      long long v45 = (unsigned int *)(*(void *)(a1 + 752) + 48 * v24);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v41, v45, v8, v42, v43, v44);
    }
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
  *a3 = result;
  if (*(void *)(a1 + 544) == *(void *)(a1 + 536) || *(void *)(a1 + 568) == *(void *)(a1 + 560))
  {
    int v31 = 0;
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v7 = 0;
  }
  else {
    int v7 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v7);
  int v13 = kaldi::CuMatrixBase<float>::CountZeros(v8, v9, v10, v11, v12);
  uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v7);
  int v19 = kaldi::CuMatrixBase<float>::CountZeros(v14, v15, v16, v17, v18) + v13;
  uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v7);
  uint64_t result = kaldi::CuVectorBase<float>::CountZeros(v20);
  *a2 = v19 + result;
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v21, v22, v23, v24, v25);
    *a2 += result;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v26 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v26, v27, v28, v29, v30);
    int v31 = *a2 + result;
LABEL_11:
    *a2 = v31;
  }
  return result;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(void *a1, _DWORD *a2, _DWORD *a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr((uint64_t)a1 + *(void *)(*a1 - 56), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1532);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetInternalMemory(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(void *)(a1 + 272) + 48 * a3, 111, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::EnsureBuffers(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 240))
  {
    unint64_t v2 = *(int *)(a1 + 80);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 8), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 272), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 296), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 320), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 344), v2);
    if ((int)v2 >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 8) + v3, *(unsigned int *)(a1 + 96), (*(_DWORD *)(a1 + 12 + *(void *)(*(void *)a1 - 24)) + *(_DWORD *)(a1 + 176)), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 480), v2);
    *(unsigned char *)(a1 + 240) = 1;
  }
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Check(uint64_t a1)
{
  unint64_t v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(v2) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1642);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #rows = ", 22);
    uint64_t v9 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumRows(v9);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; expecting ", 12);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  uint64_t v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v3) != *(_DWORD *)(a1
                                                                                 + *(void *)(*(void *)a1 - 24)
                                                                                 + 8))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1646);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #columns = ", 25);
    uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v12);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, " (same as input dim)");
    goto LABEL_28;
  }
  int v4 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(v4) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1650);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #rows = ", 26);
    uint64_t v15 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumRows(v15);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; expecting ", 12);
    uint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v5) != *(_DWORD *)(a1
                                                                                 + *(void *)(*(void *)a1 - 24)
                                                                                 + 12))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1654);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #columns = ", 29);
    uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v18);
    int v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"; expecting ", 12);
    uint64_t v20 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, " (same as output dim)");
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 208))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 20) != 3)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1659);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #rows = ", 25);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
      uint64_t v23 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; expecting ", 12);
      std::ostream::operator<<();
      goto LABEL_28;
    }
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 16) != *(_DWORD *)(a1 + 176))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1662);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #columns = ", 28);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"; expecting ", 12);
      uint64_t v25 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, " (same as #cells)");
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1) + 16) != 4
                                                                                               * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1667);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Bias dim = ", 11);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
    uint64_t v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"; expecting ", 12);
    uint64_t v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    if (kaldi::QuantizedMatrixBase<short>::NumRows(v6) == *(_DWORD *)(a1
                                                                                   + *(void *)(*(void *)a1 - 24)
                                                                                   + 12))
    {
      uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      if (kaldi::QuantizedMatrixBase<short>::NumCols(v7) == *(_DWORD *)(a1 + 176)) {
        goto LABEL_12;
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1675);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #columns = ", 30);
      uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrixBase<short>::NumCols(v29);
      uint64_t v30 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"; expecting ", 12);
      int v31 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, " (same as #cells)");
    }
    else
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1671);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #rows = ", 27);
      uint64_t v26 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrixBase<short>::NumRows(v26);
      uint64_t v27 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"; expecting ", 12);
      uint64_t v28 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, " (same as output dim)");
    }
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
LABEL_12:
  if (*(float *)(a1 + 464) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1681);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 468) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1684);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"projection_learn_rate_coeff_ must not be negative; found: ",
      58);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 472) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1688);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 152) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1691);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  float result = *(float *)(a1 + 476);
  if (result < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1694);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_cell_values_ must not be negative; found: ",
      46);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  return result;
}

void sub_179AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 274;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 274;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::IsUpdatable()
{
  return 1;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::IsUpdatable()
{
  return 1;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::IsUpdatable()
{
  return 0;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::IsUpdatable()
{
  return 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::IsUpdatable()
{
  return 0;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::IsUpdatable()
{
  return 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 275;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 275;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 276;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 276;
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, int a3)
{
  float v6 = *(float *)(a1 + 64);
  float v7 = *(float *)(a1 + 68);
  uint64_t v8 = a1 + *(void *)(*(void *)a1 - 24);
  float v9 = *(float *)(v8 + 72);
  int v10 = *(_DWORD *)(v8 + 76);
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 32) = a2;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 32) = a2;
  if (*(unsigned char *)(a1 + 208)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 32) = a2;
  }
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 24) = a2;
  if (*(unsigned char *)(a1 + 224)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 32) = a2;
  }
  int v12 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  if (a3 >= 0) {
    unsigned int v13 = a3;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  if (v12 == 1) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v13;
  }
  if ((int)v14 > v12) {
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)&stru_428.reserved3 + 2, "batch_index <= opts_.num_subbatches", v11);
  }
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v14) + 32) = a2;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v14) + 32) = a2;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v14) + 24) = a2;
  *(void *)(*(void *)(a1 + 656) + 48 * (int)v14 + 32) = a2;
  *(void *)(*(void *)(a1 + 680) + 48 * (int)v14 + 32) = a2;
  *(void *)(*(void *)(a1 + 728) + 32 * (int)v14 + 24) = a2;
  if (*(unsigned char *)(a1 + 208))
  {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v14) + 32) = a2;
    *(void *)(*(void *)(a1 + 704) + 48 * (int)v14 + 32) = a2;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v14) + 32) = a2;
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v14) + 32) = a2;
  }
  uint64_t v18 = a1 + 80;
  if (v14 == *(_DWORD *)(a1 + 80))
  {
    uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v14);
    kaldi::CuMatrixBase<float>::SetZero(v19);
    uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v14);
    kaldi::CuMatrixBase<float>::SetZero(v20);
    uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v14);
    kaldi::CuVectorBase<float>::SetZero(v21);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v14);
      kaldi::CuMatrixBase<float>::SetZero(v22);
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v14);
      kaldi::CuMatrixBase<float>::SetZero(v23);
    }
    uint64_t v24 = *(void *)a1;
    if (*(int *)(v18 + *(void *)(*(void *)a1 - 24)) >= 1)
    {
      int v25 = 0;
      do
      {
        uint64_t v26 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v14);
        uint64_t v27 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v25);
        kaldi::CuMatrixBase<float>::AddMat(v26, v27, 111, v28, v29, 1.0, 1.0);
        uint64_t v30 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v14);
        uint64_t v31 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v25);
        kaldi::CuMatrixBase<float>::AddMat(v30, v31, 111, v32, v33, 1.0, 1.0);
        uint64_t v34 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v14);
        uint64_t v35 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v25);
        kaldi::CuVectorBase<float>::AddVec(v34, v35, v36, v37, v38, 1.0, 1.0);
        if (*(unsigned char *)(a1 + 208))
        {
          uint64_t v39 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v14);
          uint64_t v40 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v25);
          kaldi::CuMatrixBase<float>::AddMat(v39, v40, 111, v41, v42, 1.0, 1.0);
        }
        if (*(unsigned char *)(a1 + 224))
        {
          uint64_t v43 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v14);
          uint64_t v44 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v25);
          kaldi::CuMatrixBase<float>::AddMat(v43, v44, 111, v45, v46, 1.0, 1.0);
        }
        ++v25;
        uint64_t v24 = *(void *)a1;
      }
      while (v25 < *(_DWORD *)(v18 + *(void *)(*(void *)a1 - 24)));
    }
    long long v47 = *(int **)(a1 + 480);
    v47[(int)v14] = 0;
    if ((int)v14 >= 1)
    {
      int v48 = 0;
      uint64_t v49 = v14;
      long long v50 = v47;
      do
      {
        int v51 = *v50++;
        v48 += v51;
        v47[(int)v14] = v48;
        --v49;
      }
      while (v49);
    }
  }
  else
  {
    uint64_t v24 = *(void *)a1;
  }
  uint64_t v52 = a1 + *(void *)(v24 - 24);
  float v53 = *(float *)(v52 + 56);
  if (*(unsigned char *)(v52 + 84)) {
    float v53 = v53 / (float)*(int *)(*(void *)(a1 + 480) + 4 * (int)v14);
  }
  uint64_t v54 = *(void *)(a1 + 504);
  if ((int)v14 >= (unint64_t)((*(void *)(a1 + 512) - v54) >> 2))
  {
    LODWORD(v107[0]) = 2143289344;
    std::vector<float>::resize(a1 + 504, (int)v14 + 1, v107);
    uint64_t v54 = *(void *)(a1 + 504);
  }
  *(float *)(v54 + 4 * (int)v14) = v53;
  if (*(float *)(a1 + 152) >= 0.0) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 360))(a1, v14);
  }
  if (v6 != 0.0)
  {
    uint64_t v55 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    float v56 = -(float)(v53 * v6);
    float v57 = v56 * (float)*(int *)(*(void *)(a1 + 480) + 4 * (int)v14);
    uint64_t v58 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v55, v58, 111, v59, v60, v57, 1.0);
    uint64_t v61 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    float v62 = v56 * (float)*(int *)(*(void *)(a1 + 480) + 4 * (int)v14);
    uint64_t v63 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v61, v63, 111, v64, v65, v62, 1.0);
    uint64_t v66 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    uint64_t v67 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    kaldi::CuVectorBase<float>::AddVec(v66, v67, v68, v69, v70, v56, 1.0);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v71 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      float v72 = v56 * (float)*(int *)(*(void *)(a1 + 480) + 4 * (int)v14);
      uint64_t v73 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      kaldi::CuMatrixBase<float>::AddMat(v71, v73, 111, v74, v75, v72, 1.0);
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v76 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      float v77 = v56 * (float)*(int *)(*(void *)(a1 + 480) + 4 * (int)v14);
      uint64_t v78 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::AddMat(v76, v78, 111, v79, v80, v77, 1.0);
    }
  }
  if (v7 != 0.0)
  {
    uint64_t v81 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    uint64_t v82 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v14);
    kaldi::cu::RegularizeL1<float>(v81, v82, (float)(v7 * v53) * (float)*(int *)(*(void *)(a1 + 480) + 4 * (int)v14), v53, v83, v84, v85);
    uint64_t v86 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    uint64_t v87 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v14);
    kaldi::cu::RegularizeL1<float>(v86, v87, (float)(v7 * v53) * (float)*(int *)(*(void *)(a1 + 480) + 4 * (int)v14), v53, v88, v89, v90);
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v91 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      uint64_t v92 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v14);
      kaldi::cu::RegularizeL1<float>(v91, v92, (float)(v7 * v53) * (float)*(int *)(*(void *)(a1 + 480) + 4 * (int)v14), v53, v93, v94, v95);
    }
  }
  if (v9 > 0.0)
  {
    if (*(int *)(a1 + *(void *)(*(void *)a1 - 24) + 80) >= 2)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v107, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1208);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v107, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v107);
    }
    if (*(void *)(a1 + 784) == *(void *)(a1 + 776)) {
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
    }
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 776), v10, v9, v15, v16, v17);
  }
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(a1, v14, v53);
  if (*(float *)(a1 + 472) > 0.0)
  {
    uint64_t v96 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::ApplyMaxNorm(v96, 1, *(float *)(a1 + 472));
    uint64_t v97 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    kaldi::CuMatrixBase<float>::ApplyMaxNorm(v97, 1, *(float *)(a1 + 472));
    uint64_t v98 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    kaldi::CuVectorBase<float>::ApplyMaxNorm(v98, *(float *)(a1 + 472), v99, v100, v101, v102);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v103 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      kaldi::CuMatrixBase<float>::ApplyMaxNorm(v103, 1, *(float *)(a1 + 472));
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v104 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::ApplyMaxNorm(v104, 1, *(float *)(a1 + 472));
    }
  }
  uint64_t v105 = *(unsigned char **)(a1 + 480);
  if (v14 == *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80))
  {
    int v106 = *(unsigned char **)(a1 + 488);
    if (v105 != v106) {
      bzero(v105, ((v106 - v105 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v105[4 * (int)v14] = 0;
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(void *a1, uint64_t a2, int a3)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(void *a1)
{
  if (!*((unsigned char *)a1 + *(void *)(*a1 - 24) + 16))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v1, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1545);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Performing  vectorization of lstm component", 43);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v1);
    }
    kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub();
  }
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1542);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "Weights are already vectorized");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void sub_17AE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(void *a1)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs((void *)((char *)a1
                                                                                          + *(void *)(*a1 - 64)));
}

double kaldi::nnet1::MovingAttentionComponent::MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 108) = a2;
  *((_DWORD *)this + 109) = a3;
  *((_WORD *)this + 220) = 0;
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 59) = off_26E7B8;
  *((_OWORD *)this + 30) = xmmword_20CEC0;
  *((void *)this + 62) = 0x3BF800000;
  *((_DWORD *)this + 126) = 1;
  *((_WORD *)this + 254) = 0;
  *((unsigned char *)this + 510) = 0;
  *((void *)this + 1) = -1;
  *(void *)this = off_26E168;
  *((void *)this + 53) = off_26E370;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = off_262DC8;
  *((unsigned char *)this + 64) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 9) = off_262DC8;
  *((unsigned char *)this + 112) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 15) = off_262DC8;
  *((unsigned char *)this + 160) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((void *)this + 21) = off_262DC8;
  *((unsigned char *)this + 208) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((void *)this + 27) = off_262DC8;
  *((unsigned char *)this + 256) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = off_262DC8;
  *((unsigned char *)this + 376) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 48) = 0;
  *(void *)&double result = 257;
  *((_DWORD *)this + 104) = 257;
  *((unsigned char *)this + 420) = 0;
  return result;
}

int *kaldi::CuArray<int>::operator=(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a1 != (int *)a2)
  {
    if (!*((void *)a1 + 2)) {
      *((void *)a1 + 2) = *(void *)(a2 + 16);
    }
    kaldi::CuArray<int>::Resize((uint64_t)a1, *(_DWORD *)a2, 1u, a4, a5);
    uint64_t v7 = *a1;
    if (v7) {
      memcpy(*((void **)a1 + 1), *(const void **)(a2 + 8), 4 * v7);
    }
  }
  return a1;
}

kaldi::nnet1::MovingAttentionComponent *kaldi::nnet1::MovingAttentionComponent::MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this, const kaldi::nnet1::MovingAttentionComponent *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *((void *)this + 54) = *(void *)((char *)a2 + *(void *)(*(void *)a2 - 24) + 8);
  *((_WORD *)this + 220) = 0;
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 59) = off_26E7B8;
  *((_OWORD *)this + 30) = xmmword_20CEC0;
  *((_DWORD *)this + 124) = -1082130432;
  *(void *)((char *)this + 500) = 0x100000003;
  *((_WORD *)this + 254) = 0;
  *((unsigned char *)this + 510) = 0;
  *((void *)this + 1) = -1;
  *(void *)this = off_26E168;
  *((void *)this + 53) = off_26E370;
  float v6 = (char *)this + 24;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 3) = off_262DC8;
  *((unsigned char *)this + 64) = 0;
  uint64_t v7 = (char *)this + 72;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 9) = off_262DC8;
  *((unsigned char *)this + 112) = 0;
  uint64_t v8 = (char *)this + 120;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 15) = off_262DC8;
  *((unsigned char *)this + 160) = 0;
  float v9 = (char *)this + 168;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((void *)this + 21) = off_262DC8;
  *((unsigned char *)this + 208) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((void *)this + 27) = off_262DC8;
  *((unsigned char *)this + 256) = 0;
  int v10 = (char *)this + 264;
  uint64_t v11 = (int *)((char *)this + 312);
  int v12 = (char *)this + 336;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = off_262DC8;
  *((unsigned char *)this + 376) = 0;
  uint64_t v19 = (char *)this + 384;
  uint64_t v20 = (char *)this + 288;
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  uint64_t v13 = *((void *)a2 + 2);
  if (!v13) {
    kaldi::KaldiAssertFailure_((kaldi *)"MovingAttentionComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", &stru_20.segname[11], "src.component_", a5);
  }
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 51) = *((void *)a2 + 51);
  *((void *)this + 2) = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
  kaldi::CuMatrix<float>::operator=((uint64_t)v6, (uint64_t)a2 + 24);
  kaldi::CuMatrix<float>::operator=((uint64_t)v7, (uint64_t)a2 + 72);
  kaldi::CuMatrix<float>::operator=((uint64_t)v8, (uint64_t)a2 + 120);
  kaldi::CuMatrix<float>::operator=((uint64_t)v9, (uint64_t)a2 + 168);
  if (this != a2)
  {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)v10, *((void *)a2 + 33), *((void *)a2 + 34), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 34) - *((void *)a2 + 33)) >> 3));
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)v20, *((void *)a2 + 36), *((void *)a2 + 37), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 37) - *((void *)a2 + 36)) >> 3));
  }
  kaldi::CuArray<int>::operator=(v11, (uint64_t)a2 + 312, v15, v16, v17);
  kaldi::CuMatrix<float>::operator=((uint64_t)v12, (uint64_t)a2 + 336);
  if (this != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v19, *((char **)a2 + 48), *((void *)a2 + 49), (uint64_t)(*((void *)a2 + 49) - *((void *)a2 + 48)) >> 2);
  }
  *((_DWORD *)this + 104) = *((_DWORD *)a2 + 104);
  *((unsigned char *)this + 420) = *((unsigned char *)a2 + 420);
  return this;
}

void sub_17B3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, kaldi::nnet1::UpdatableComponent *a11, void **a12, uint64_t a13, uint64_t a14)
{
  uint64_t v22 = *a12;
  if (*a12)
  {
    *(void *)(v14 + 392) = v22;
    operator delete(v22);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v20);
  uint64_t v23 = *(void **)(v14 + 320);
  if (v23) {
    free(v23);
  }
  void *v19 = 0;
  v19[1] = 0;
  v19[2] = 0;
  a14 = a13;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  kaldi::CuMatrix<float>::~CuMatrix(v18);
  kaldi::CuMatrix<float>::~CuMatrix(v17);
  kaldi::CuMatrix<float>::~CuMatrix(v16);
  kaldi::CuMatrix<float>::~CuMatrix(v15);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v14);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a11);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[3];
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 2) = 0;
  uint64_t v5 = (void *)*((void *)this + 48);
  if (v5)
  {
    *((void *)this + 49) = v5;
    operator delete(v5);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 336);
  float v6 = (void *)*((void *)this + 40);
  if (v6) {
    free(v6);
  }
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  uint64_t v7 = (void **)((char *)this + 288);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)((char *)this + 264);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 216);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 168);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 120);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 72);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 24);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(this);
}

void kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 424));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 424));

  operator delete();
}

void virtual thunk to'kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this)
{
  unint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 424);

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent((kaldi::nnet1::MovingAttentionComponent *)((char *)this + *(void *)(*(void *)this - 24)));
}

void kaldi::nnet1::MovingAttentionComponent::Copy(kaldi::nnet1::MovingAttentionComponent *this)
{
}

void sub_17B724()
{
}

void virtual thunk to'kaldi::nnet1::MovingAttentionComponent::Copy(kaldi::nnet1::MovingAttentionComponent *this)
{
  kaldi::nnet1::MovingAttentionComponent::Copy((kaldi::nnet1::MovingAttentionComponent *)((char *)this
                                                                                        + *(void *)(*(void *)this - 32)));
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetType(kaldi::nnet1::MovingAttentionComponent *this)
{
  return 281;
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::GetType(kaldi::nnet1::MovingAttentionComponent *this)
{
  return 281;
}

void kaldi::nnet1::MovingAttentionComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  memset(v55, 0, 24);
  uint64_t v7 = a2 + 4;
  uint64_t v8 = a1 + 412;
  uint64_t v9 = a1 + 408;
  uint64_t v10 = a1 + 12;
  uint64_t v11 = a1 + 8;
  while (2)
  {
    if ((*((unsigned char *)v7 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_100;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v55, a4, a5);
    if ((SHIBYTE(v55[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v55[2]))
      {
        case 0xC:
          uint64_t v29 = v55;
          goto LABEL_95;
        case 0xD:
          BOOL v12 = v55[0] == (void *)0x6E6F437466654C3CLL && *(void **)((char *)v55 + 5) == (void *)0x3E747865746E6F43;
          goto LABEL_12;
        case 0xE:
          BOOL v22 = v55[0] == (void *)0x6F4374686769523CLL && *(void **)((char *)v55 + 6) == (void *)0x3E747865746E6F43;
          goto LABEL_87;
        case 0xF:
          BOOL v21 = v55[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v55 + 7) == (void *)0x3E736E6F69746E65;
          goto LABEL_82;
        case 0x10:
          if (v55[0] == (void *)0x52656372756F533CLL && v55[1] == (void *)0x3E64657372657665) {
            goto LABEL_61;
          }
          if (v55[0] == (void *)0x65677261546F4E3CLL && v55[1] == (void *)0x3E7461636E6F4374) {
            goto LABEL_91;
          }
          if (v55[0] != (void *)0x636174746165523CLL || v55[1] != (void *)0x3E74656772615468) {
            goto LABEL_115;
          }
          goto LABEL_60;
        case 0x14:
          if (v55[0] != (void *)0x646F7250746F443CLL
            || v55[1] != (void *)0x74616C6552746375
            || LODWORD(v55[2]) != 1047424873)
          {
            goto LABEL_115;
          }
          goto LABEL_78;
        case 0x16:
          BOOL v18 = v55[0] == (void *)0x53656372756F533CLL
             && v55[1] == (void *)0x656D694465746174
             && *(void **)((char *)&v55[1] + 6) == (void *)0x3E6E6F69736E656DLL;
          goto LABEL_68;
        default:
          goto LABEL_115;
      }
    }
    switch((unint64_t)v55[1])
    {
      case 0xCuLL:
        goto LABEL_94;
      case 0xDuLL:
        BOOL v12 = *(void *)v55[0] == 0x6E6F437466654C3CLL && *(void *)((char *)v55[0] + 5) == 0x3E747865746E6F43;
LABEL_12:
        uint64_t v13 = v9;
        if (!v12) {
          goto LABEL_115;
        }
        goto LABEL_89;
      case 0xEuLL:
        BOOL v22 = *(void *)v55[0] == 0x6F4374686769523CLL && *(void *)((char *)v55[0] + 6) == 0x3E747865746E6F43;
LABEL_87:
        uint64_t v13 = v8;
        if (!v22) {
          goto LABEL_115;
        }
        goto LABEL_89;
      case 0xFuLL:
        BOOL v21 = *(void *)v55[0] == 0x6574744178614D3CLL && *(void *)((char *)v55[0] + 7) == 0x3E736E6F69746E65;
LABEL_82:
        uint64_t v13 = v10;
        if (!v21) {
          goto LABEL_115;
        }
        goto LABEL_89;
      case 0x10uLL:
        if (*(void *)v55[0] == 0x52656372756F533CLL && *((void *)v55[0] + 1) == 0x3E64657372657665)
        {
LABEL_61:
          *(unsigned char *)(a1 + 416) = 0;
        }
        else if (*(void *)v55[0] == 0x65677261546F4E3CLL && *((void *)v55[0] + 1) == 0x3E7461636E6F4374)
        {
LABEL_91:
          *(unsigned char *)(a1 + 417) = 0;
        }
        else
        {
          if (*(void *)v55[0] != 0x636174746165523CLL || *((void *)v55[0] + 1) != 0x3E74656772615468) {
            goto LABEL_115;
          }
LABEL_60:
          *(unsigned char *)(a1 + 418) = 1;
        }
        goto LABEL_90;
      case 0x14uLL:
        if (*(void *)v55[0] == 0x646F7250746F443CLL
          && *((void *)v55[0] + 1) == 0x74616C6552746375
          && *((_DWORD *)v55[0] + 4) == 1047424873)
        {
LABEL_78:
          *(unsigned char *)(a1 + 419) = 1;
LABEL_90:
          std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
          continue;
        }
        if (v55[1] != &dword_C) {
          goto LABEL_115;
        }
LABEL_94:
        uint64_t v29 = (void **)v55[0];
LABEL_95:
        uint64_t v30 = *v29;
        int v31 = *((_DWORD *)v29 + 2);
        if (v30 != (void *)0x6E6F706D6F432F3CLL || v31 != 1047817829)
        {
LABEL_115:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v50, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 133);
          uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Unknown token ", 14);
          if (SHIBYTE(v55[2]) >= 0) {
            uint64_t v45 = v55;
          }
          else {
            uint64_t v45 = (void **)v55[0];
          }
          if (SHIBYTE(v55[2]) >= 0) {
            uint64_t v46 = HIBYTE(v55[2]);
          }
          else {
            uint64_t v46 = (uint64_t)v55[1];
          }
          long long v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
          int v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)", a typo in config?", 19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" (SourceStateDimension|MaxAttentions|LeftContext|RightContext)", 62);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v50);
        }
LABEL_100:
        uint64_t v33 = *(void *)(a1 + 16);
        if (v33) {
          (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
        }
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&v52, a4, a5);
        uint64_t v34 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v52);
        uint64_t v51 = 0;
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v50, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 143, 3);
          uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Initializing component of type ", 31);
          if (v54 >= 0) {
            uint64_t v36 = (void **)&v52;
          }
          else {
            uint64_t v36 = v52;
          }
          if (v54 >= 0) {
            uint64_t v37 = HIBYTE(v54);
          }
          else {
            uint64_t v37 = v53;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v50);
        }
        kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v51 + 4, v38, v39);
        kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v51, v40, v41);
        kaldi::nnet1::Component::NewComponentOfType(v34);
        *(void *)(a1 + 16) = v43;
        (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v43 + 96))(v43, a2, a3);
        kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
        if (SHIBYTE(v54) < 0) {
          operator delete(v52);
        }
        if (SHIBYTE(v55[2]) < 0) {
          operator delete(v55[0]);
        }
        return;
      case 0x16uLL:
        BOOL v18 = *(void *)v55[0] == 0x53656372756F533CLL
           && *((void *)v55[0] + 1) == 0x656D694465746174
           && *(void *)((char *)v55[0] + 14) == 0x3E6E6F69736E656DLL;
LABEL_68:
        uint64_t v13 = v11;
        if (!v18) {
          goto LABEL_115;
        }
LABEL_89:
        kaldi::ReadBasicType<int>(a2, 0, v13, a4, a5);
        goto LABEL_90;
      default:
        goto LABEL_115;
    }
  }
}

void sub_17BED8()
{
}

void *kaldi::nnet1::MovingAttentionComponent::Check(void *this)
{
  if (!*((unsigned char *)this + 420))
  {
    uint64_t v1 = (uint64_t)this;
    unint64_t v2 = (_DWORD *)this[2];
    if (v2)
    {
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 594);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "this is a non-recurrent version, cannot have a recurrent internal component");
        goto LABEL_32;
      }
      if (this)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 597);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "no recursive inclusion");
        goto LABEL_32;
      }
    }
    int v3 = *(_DWORD *)(v1 + 12);
    if (v3 < 1 || (int v4 = *(_DWORD *)(v1 + 8), v4 <= 0))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 600);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component is not initialized, max attention is ", 47);
      uint64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", source state dimension is ", 28);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    int v5 = *(_DWORD *)(v1 + 408);
    if (v5 < 1 || (int v6 = *(_DWORD *)(v1 + 412), v6 <= 0))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 605);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component is not initialized, left and right context is ", 56);
      uint64_t v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    if (*(unsigned char *)(v1 + 417))
    {
      if (*(_DWORD *)(v1 + *(void *)(*(void *)v1 - 24) + 8) + v4 * v3 != v2[2])
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 610);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"The target input is concatenated. component has input dim ", 58);
        uint64_t v7 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", attentions ", 13);
        uint64_t v8 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", source state dimension ", 25);
        uint64_t v9 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", however, the internal training component has input dim ", 57);
        std::ostream::operator<<();
        goto LABEL_32;
      }
    }
    else if (v4 * v3 != v2[2])
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 616);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"The target input is not concatenated. component has input dim ", 62);
      uint64_t v19 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", attentions ", 13);
      uint64_t v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", source state dimension ", 25);
      BOOL v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", however, the internal training component has input dim ", 57);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    uint64_t v10 = v1 + *(void *)(*(void *)v1 - 24);
    int v11 = *(_DWORD *)(v10 + 12);
    if (*(unsigned char *)(v1 + 418))
    {
      if (v11 != v2[3] + *(_DWORD *)(v10 + 8))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 624);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component has input dim ", 24);
        BOOL v12 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" , and output dim ", 18);
        uint64_t v13 = (void *)std::ostream::operator<<();
        uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", and you requested to reattch the target, however, ", 52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"the internal component has output dim ", 38);
        std::ostream::operator<<();
        goto LABEL_32;
      }
    }
    else if (v11 != v2[3])
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 629);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component has output dim ", 25);
      BOOL v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" does not match the internal component's output dim ", 52);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    if (v3 == v5 + v6 + 1)
    {
      if (*(unsigned char *)(v1 + 419))
      {
        if (*(_DWORD *)(v1 + *(void *)(*(void *)v1 - 24) + 8) != v4)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 641);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "the source state must have the same dimension as the input dimension of the component if want to take the dot product between them");
          goto LABEL_32;
        }
        goto LABEL_22;
      }
      if (*(unsigned __int8 *)(v1 + 418) | *(unsigned __int8 *)(v1 + 417))
      {
LABEL_22:
        *(unsigned char *)(v1 + 420) = 1;
        return this;
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 646);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "if not taking the dot production relation from the source and target, you must at least concatenate or reattach the target");
    }
    else
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 634);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"the maximum attention is ", 25);
      uint64_t v17 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" , that does not match the left_context + 1 + right_context, you defined left/right context as ", 95);
      BOOL v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
      std::ostream::operator<<();
    }
LABEL_32:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  return this;
}

void virtual thunk to'kaldi::nnet1::MovingAttentionComponent::InitData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::MovingAttentionComponent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  memset(v46, 0, 24);
  uint64_t v7 = a1 + 412;
  uint64_t v8 = a1 + 408;
  uint64_t v9 = a1 + 12;
  uint64_t v10 = a1 + 8;
  while (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)v46, v11, v12);
    if (SHIBYTE(v46[2]) < 0)
    {
      uint64_t v19 = (int *)v46[1];
      if (v46[1] == (char *)&dword_C + 3)
      {
        BOOL v22 = *(void *)v46[0] == 0x6574744178614D3CLL && *(void *)((char *)v46[0] + 7) == 0x3E736E6F69746E65;
        uint64_t v17 = v9;
        if (v22) {
          goto LABEL_69;
        }
        uint64_t v19 = (int *)v46[1];
      }
      else if (v46[1] == (char *)&dword_14 + 2)
      {
        BOOL v20 = *(void *)v46[0] == 0x53656372756F533CLL && *((void *)v46[0] + 1) == 0x656D694465746174;
        BOOL v21 = v20 && *(void *)((char *)v46[0] + 14) == 0x3E6E6F69736E656DLL;
        uint64_t v17 = v10;
        if (v21) {
          goto LABEL_69;
        }
      }
      if (v19 == (int *)((char *)&dword_C + 1))
      {
        BOOL v23 = *(void *)v46[0] == 0x6E6F437466654C3CLL && *(void *)((char *)v46[0] + 5) == 0x3E747865746E6F43;
        uint64_t v17 = v8;
        if (v23) {
          goto LABEL_69;
        }
        uint64_t v19 = (int *)v46[1];
      }
      if (v19 == (int *)((char *)&dword_C + 2))
      {
        BOOL v24 = *(void *)v46[0] == 0x6F4374686769523CLL && *(void *)((char *)v46[0] + 6) == 0x3E747865746E6F43;
        uint64_t v17 = v7;
        if (v24) {
          goto LABEL_69;
        }
        uint64_t v19 = (int *)v46[1];
      }
      if (v19 != &dword_10) {
        goto LABEL_84;
      }
      if (*(void *)v46[0] == 0x52656372756F533CLL && *((void *)v46[0] + 1) == 0x3E64657372657665)
      {
LABEL_95:
        *(unsigned char *)(a1 + 416) = 0;
      }
      else
      {
        uint64_t v19 = (int *)v46[1];
        if (v46[1] != &dword_10) {
          goto LABEL_84;
        }
        if (*(void *)v46[0] == 0x65677261546F4E3CLL && *((void *)v46[0] + 1) == 0x3E7461636E6F4374)
        {
LABEL_96:
          *(unsigned char *)(a1 + 417) = 0;
        }
        else if ((HIBYTE(v46[2]) & 0x80) != 0)
        {
          if (*(void *)v46[0] == 0x636174746165523CLL && *((void *)v46[0] + 1) == 0x3E74656772615468) {
            goto LABEL_102;
          }
          uint64_t v19 = (int *)v46[1];
LABEL_84:
          if (v19 != &dword_14) {
            goto LABEL_103;
          }
          uint64_t v15 = (void **)v46[0];
LABEL_86:
          uint64_t v33 = *v15;
          uint64_t v34 = v15[1];
          int v35 = *((_DWORD *)v15 + 4);
          BOOL v36 = v33 == (void *)0x646F7250746F443CLL && v34 == (void *)0x74616C6552746375;
          if (!v36 || v35 != 1047424873) {
            goto LABEL_103;
          }
          *(unsigned char *)(a1 + 419) = 1;
        }
        else
        {
          if (HIBYTE(v46[2]) != 16) {
            goto LABEL_103;
          }
LABEL_79:
          if (v46[0] != (void *)0x636174746165523CLL || v46[1] != (void *)0x3E74656772615468)
          {
LABEL_103:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v46, "</Component>"))
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 176);
              uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Unrecognized token ", 19);
              if (SHIBYTE(v46[2]) >= 0) {
                uint64_t v42 = v46;
              }
              else {
                uint64_t v42 = (void **)v46[0];
              }
              if (SHIBYTE(v46[2]) >= 0) {
                uint64_t v43 = HIBYTE(v46[2]);
              }
              else {
                uint64_t v43 = (uint64_t)v46[1];
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
            }
            break;
          }
LABEL_102:
          *(unsigned char *)(a1 + 418) = 1;
        }
      }
    }
    else
    {
      uint64_t v15 = v46;
      switch(HIBYTE(v46[2]))
      {
        case 0xD:
          goto LABEL_11;
        case 0xE:
          goto LABEL_56;
        case 0xF:
          BOOL v16 = v46[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v46 + 7) == (void *)0x3E736E6F69746E65;
          uint64_t v17 = v9;
          if (v16) {
            break;
          }
          if (HIBYTE(v46[2]) == 14)
          {
LABEL_56:
            BOOL v27 = v46[0] == (void *)0x6F4374686769523CLL && *(void **)((char *)v46 + 6) == (void *)0x3E747865746E6F43;
            uint64_t v17 = v7;
            if (!v27) {
              goto LABEL_103;
            }
          }
          else
          {
            if (HIBYTE(v46[2]) != 13) {
              goto LABEL_103;
            }
LABEL_11:
            BOOL v18 = v46[0] == (void *)0x6E6F437466654C3CLL && *(void **)((char *)v46 + 5) == (void *)0x3E747865746E6F43;
            uint64_t v17 = v8;
            if (!v18) {
              goto LABEL_103;
            }
          }
          break;
        case 0x10:
          if (v46[0] == (void *)0x52656372756F533CLL && v46[1] == (void *)0x3E64657372657665) {
            goto LABEL_95;
          }
          if (HIBYTE(v46[2]) != 16) {
            goto LABEL_103;
          }
          if (v46[0] != (void *)0x65677261546F4E3CLL || v46[1] != (void *)0x3E7461636E6F4374) {
            goto LABEL_79;
          }
          goto LABEL_96;
        case 0x14:
          goto LABEL_86;
        case 0x16:
          BOOL v29 = v46[0] == (void *)0x53656372756F533CLL
             && v46[1] == (void *)0x656D694465746174
             && *(void **)((char *)&v46[1] + 6) == (void *)0x3E6E6F69736E656DLL;
          uint64_t v17 = v10;
          if (!v29) {
            goto LABEL_103;
          }
          break;
        default:
          goto LABEL_103;
      }
LABEL_69:
      kaldi::ReadBasicType<int>(a2, a3, v17, v13, v14);
    }
  }
  uint64_t v39 = *(void *)(a1 + 16);
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  uint64_t v40 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (v40) {
  *(void *)(a1 + 16) = v40;
  }
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  if (SHIBYTE(v46[2]) < 0) {
    operator delete(v46[0]);
  }
}

void sub_17CB8C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::MovingAttentionComponent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t kaldi::nnet1::MovingAttentionComponent::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<SourceStateDimension>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxAttentions>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LeftContext>", v10, v11);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<RightContext>", v12, v13);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  if (!*(unsigned char *)(a1 + 416)) {
    kaldi::WriteToken(a2, a3, (kaldi *)"<SourceReversed>", v14, v15);
  }
  if (!*(unsigned char *)(a1 + 417)) {
    kaldi::WriteToken(a2, a3, (kaldi *)"<NoTargetConcat>", v14, v15);
  }
  if (*(unsigned char *)(a1 + 418)) {
    kaldi::WriteToken(a2, a3, (kaldi *)"<ReattachTarget>", v14, v15);
  }
  if (*(unsigned char *)(a1 + 419)) {
    kaldi::WriteToken(a2, a3, (kaldi *)"<DotProductRelation>", v14, v15);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v14, v15);
  BOOL v16 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  kaldi::nnet1::Component::TypeToMarker(v16, &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v17, v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteBasicType<int>(a2, (int)a3);
  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

void sub_17CDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::WriteConfig(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::MovingAttentionComponent::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::WriteData(void **a1)
{
  ((void (*)(void **))(*a1)[12])(a1);
  unint64_t v2 = *(uint64_t (**)(void))(*a1[2] + 104);

  return v2();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::WriteData(void *a1)
{
  uint64_t v1 = (void **)((char *)a1 + *(void *)(*a1 - 120));
  ((void (*)(void **))(*v1)[12])(v1);
  unint64_t v2 = *(uint64_t (**)(void))(*v1[2] + 104);

  return v2();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::NumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 176))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::NumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 192) + 16) + 176))();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetParams(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::GetParams(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 200) + 16) + 184))();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetParams(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 192))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SetParams(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 208) + 16) + 192))();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 208))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 224) + 16) + 208))();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::PerturbParams(kaldi::nnet1::MovingAttentionComponent *this, float a2)
{
  return (*(uint64_t (**)(float))(**((void **)this + 2) + 216))(a2);
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::PerturbParams(kaldi::nnet1::MovingAttentionComponent *this, float a2)
{
  return (*(uint64_t (**)(float))(**(void **)((char *)this + *(void *)(*(void *)this - 232) + 16)
                                          + 216))(a2);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::Info(kaldi::nnet1::MovingAttentionComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  (*(void (**)(kaldi::nnet1::MovingAttentionComponent *, void *, void))(*(void *)this + 96))(this, v7, 0);
  (*(void (**)(void **__return_ptr))(**((void **)this + 2) + 64))(__p);
  if ((v6 & 0x80u) == 0) {
    unint64_t v2 = __p;
  }
  else {
    unint64_t v2 = (void **)__p[0];
  }
  if ((v6 & 0x80u) == 0) {
    uint64_t v3 = v6;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v2, v3);
  if ((char)v6 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_17D2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::Info(kaldi::nnet1::MovingAttentionComponent *this)
{
  return kaldi::nnet1::MovingAttentionComponent::Info((kaldi::nnet1::MovingAttentionComponent *)((char *)this
                                                                                               + *(void *)(*(void *)this - 80)));
}

uint64_t kaldi::nnet1::MovingAttentionComponent::InfoGradient(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 72))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::InfoGradient(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 88) + 16) + 72))();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetTrainOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(void *)(*(void *)a1 - 24);
  long long v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v2 + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v2 + 56) = v3;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 264))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SetTrainOptions(void *a1, uint64_t a2)
{
  uint64_t v2 = (char *)a1 + *(void *)(*a1 - 280);
  long long v3 = &v2[*(void *)(*(void *)v2 - 24)];
  long long v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v3 + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v3 + 56) = v4;
  return (*(uint64_t (**)(void))(**((void **)v2 + 2) + 264))();
}

void kaldi::nnet1::MovingAttentionComponent::SetSourceStates(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  float v57 = a3;
  unint64_t v7 = a3[1] - *a3;
  uint64_t v8 = v7 >> 2;
  int v9 = *(_DWORD *)(a2 + 20);
  int v10 = v9 / (int)(v7 >> 2);
  if (v10 * (v7 >> 2) != v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)&stru_B8.align + 1, "seq_size * num_seq == source.NumRows()", v6);
  }
  int v11 = *(_DWORD *)(a2 + 16);
  if (v11 != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)&stru_B8.align + 2, "source.NumCols() == source_vec_dim_", v6);
  }
  kaldi::CuMatrix<float>::Resize(a1 + 24, v8, ((*(_DWORD *)(a1 + 408) + *(_DWORD *)(a1 + 412) + v10) * v11), 0, 0);
  uint64_t v55 = v7;
  uint64_t v56 = (v7 >> 2);
  if ((int)v8 >= 1)
  {
    unint64_t v12 = 0;
    int v13 = *(_DWORD *)(a1 + 8);
    uint64_t v14 = *v57;
    do
    {
      if (*(int *)(v14 + 4 * v12) >= 1)
      {
        int v15 = 0;
        unint64_t v16 = (v13 * *(_DWORD *)(a1 + 408));
        unsigned int v17 = v12;
        do
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, a1 + 24, 0, *(_DWORD *)(a1 + 44), (const char *)v16, v13);
          if (v12 >= HIDWORD(v60)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v20);
          }
          uint64_t v63 = v60 + 4 * (int)v61 * (int)v12;
          float v62 = &off_262E20;
          uint64_t v64 = DWORD2(v60);
          uint64_t v65 = *((void *)&v61 + 1);
          if (*(_DWORD *)(a2 + 20) <= v17) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v20);
          }
          unsigned int v21 = *(_DWORD *)(a2 + 16);
          uint64_t v22 = *(void *)(a2 + 32);
          v58[1] = *(void *)(a2 + 8) + 4 * (int)(*(_DWORD *)(a2 + 24) * v17);
          v58[0] = &off_262E20;
          void v58[2] = v21;
          v58[3] = v22;
          kaldi::CuVectorBase<float>::CopyFromVec(&v62, (uint64_t)v58, v18, v19, v20);
          float v62 = &off_262E20;
          uint64_t v63 = 0;
          LODWORD(v64) = 0;
          uint64_t v65 = 0;
          std::string __p = off_262D80;
          long long v60 = 0u;
          long long v61 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&__p);
          int v13 = *(_DWORD *)(a1 + 8);
          unint64_t v16 = (v13 + v16);
          ++v15;
          uint64_t v14 = *v57;
          v17 += v8;
        }
        while (v15 < *(_DWORD *)(*v57 + 4 * v12));
      }
      ++v12;
    }
    while (v12 != v56);
  }
  unint64_t v23 = (int)(v55 >> 2);
  std::string __p = 0;
  long long v60 = 0uLL;
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 264), v23, (uint64_t)&__p);
  if (__p)
  {
    *(void *)&long long v60 = __p;
    operator delete(__p);
  }
  std::string __p = 0;
  long long v60 = 0uLL;
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 288), v23, (uint64_t)&__p);
  if (__p)
  {
    *(void *)&long long v60 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 416))
  {
    std::vector<int>::resize((std::vector<int> *)(a1 + 384), v23);
    if ((int)v8 >= 1)
    {
      uint64_t v24 = 0;
      do
      {
        *(_DWORD *)(*(void *)(a1 + 384) + 4 * v24) = *(_DWORD *)(*v57 + 4 * v24) + *(_DWORD *)(a1 + 408) - 1;
        uint64_t v25 = *(void *)(a1 + 288) + 24 * v24;
        BOOL v27 = (_DWORD **)(v25 + 8);
        uint64_t v26 = *(_DWORD **)(v25 + 8);
        BOOL v29 = (void *)(v25 + 16);
        unint64_t v28 = *(void *)(v25 + 16);
        if ((unint64_t)v26 >= v28)
        {
          int v31 = *(_DWORD **)v25;
          uint64_t v32 = ((uint64_t)v26 - *(void *)v25) >> 2;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62) {
            goto LABEL_58;
          }
          uint64_t v34 = v28 - (void)v31;
          if (v34 >> 1 > v33) {
            unint64_t v33 = v34 >> 1;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35)
          {
            BOOL v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v29, v35);
            uint64_t v26 = *v27;
            int v31 = *(_DWORD **)v25;
          }
          else
          {
            BOOL v36 = 0;
          }
          uint64_t v37 = &v36[4 * v32];
          *(_DWORD *)uint64_t v37 = *(_DWORD *)(a1 + 408);
          uint64_t v30 = v37 + 4;
          while (v26 != v31)
          {
            int v38 = *--v26;
            *((_DWORD *)v37 - 1) = v38;
            v37 -= 4;
          }
          *(void *)uint64_t v25 = v37;
          void *v27 = v30;
          void *v29 = &v36[4 * v35];
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          *uint64_t v26 = *(_DWORD *)(a1 + 408);
          uint64_t v30 = v26 + 1;
        }
        void *v27 = v30;
        ++v24;
      }
      while (v24 != v56);
    }
  }
  else if ((int)v8 >= 1)
  {
    uint64_t v39 = 0;
    do
    {
      uint64_t v40 = *(void *)(a1 + 288) + 24 * v39;
      int v41 = *(_DWORD *)(*v57 + 4 * v39) + *(_DWORD *)(a1 + 408) - 1;
      uint64_t v43 = (int **)(v40 + 8);
      uint64_t v42 = *(int **)(v40 + 8);
      uint64_t v45 = (void *)(v40 + 16);
      unint64_t v44 = *(void *)(v40 + 16);
      if ((unint64_t)v42 >= v44)
      {
        long long v47 = *(int **)v40;
        uint64_t v48 = ((uint64_t)v42 - *(void *)v40) >> 2;
        unint64_t v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 62) {
LABEL_58:
        }
          std::vector<float>::__throw_length_error[abi:ne180100]();
        uint64_t v50 = v44 - (void)v47;
        if (v50 >> 1 > v49) {
          unint64_t v49 = v50 >> 1;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v49;
        }
        if (v51)
        {
          uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v45, v51);
          uint64_t v42 = *v43;
          long long v47 = *(int **)v40;
        }
        else
        {
          uint64_t v52 = 0;
        }
        uint64_t v53 = (int *)&v52[4 * v48];
        *uint64_t v53 = v41;
        uint64_t v46 = v53 + 1;
        while (v42 != v47)
        {
          int v54 = *--v42;
          *--uint64_t v53 = v54;
        }
        *(void *)uint64_t v40 = v53;
        *uint64_t v43 = v46;
        *uint64_t v45 = &v52[4 * v51];
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        *uint64_t v42 = v41;
        uint64_t v46 = v42 + 1;
      }
      *uint64_t v43 = v46;
      ++v39;
    }
    while (v39 != v56);
  }
}

void sub_17D9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double kaldi::nnet1::MovingAttentionComponent::GetSourceDiffs(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  BOOL v27 = a3;
  unint64_t v9 = a3[1] - *a3;
  unint64_t v10 = v9 >> 2;
  int v11 = *(_DWORD *)(a2 + 20);
  int v12 = v11 / (int)(v9 >> 2);
  if (v12 * (v9 >> 2) != v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", &stru_108.sectname[10], "seq_size * num_seq == source.NumRows()", v8);
  }
  int v13 = *(_DWORD *)(a2 + 16);
  if (v13 != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", &stru_108.sectname[11], "source.NumCols() == source_vec_dim_", v8);
  }
  if (*(_DWORD *)(a1 + 140) != v10) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", &stru_108.sectname[12], "accumed_source_states_diff_.NumRows() == num_seq", v8);
  }
  int v14 = *(_DWORD *)(a1 + 408);
  if (*(_DWORD *)(a1 + 136) != (v14 + *(_DWORD *)(a1 + 412) + v12) * v13) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", &stru_108.sectname[13], "accumed_source_states_diff_.NumCols() == (left_context_ + seq_size + right_context_) * source_vec_dim_", v8);
  }
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v36, a1 + 120, 0, v10, (const char *)(v14 * v13), v13 * v12);
  kaldi::CuMatrix<float>::Resize(a4, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  if ((int)v10 >= 1)
  {
    unint64_t v16 = 0;
    uint64_t v26 = (v9 >> 2);
    do
    {
      if (v16 >= (uint64_t)(v27[1] - *v27) >> 2) {
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      int v17 = *(_DWORD *)(*v27 + 4 * v16);
      if (v17 >= 1)
      {
        int v18 = 0;
        unsigned int v19 = v16;
        do
        {
          if (*(_DWORD *)(a4 + 20) <= v19) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v15);
          }
          unsigned int v20 = *(_DWORD *)(a4 + 16);
          uint64_t v21 = *(void *)(a4 + 32);
          v35[1] = *(void *)(a4 + 8) + 4 * (int)(*(_DWORD *)(a4 + 24) * v19);
          v35[0] = &off_262E20;
          v35[2] = v20;
          v35[3] = v21;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v28, (uint64_t)&v36, 0, SHIDWORD(v37), (const char *)(*(_DWORD *)(a1 + 8) * v18), *(_DWORD *)(a1 + 8));
          if (v16 >= HIDWORD(v29)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v24);
          }
          uint64_t v32 = v29 + 4 * (int)v30 * (int)v16;
          int v31 = &off_262E20;
          uint64_t v33 = DWORD2(v29);
          uint64_t v34 = *((void *)&v30 + 1);
          kaldi::CuVectorBase<float>::CopyFromVec(v35, (uint64_t)&v31, v22, v23, v24);
          int v31 = &off_262E20;
          uint64_t v32 = 0;
          LODWORD(v33) = 0;
          uint64_t v34 = 0;
          unint64_t v28 = off_262D80;
          long long v29 = 0u;
          long long v30 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v28);
          ++v18;
          v19 += v10;
        }
        while (v17 != v18);
      }
      ++v16;
    }
    while (v16 != v26);
  }
  BOOL v36 = off_262D80;
  long long v37 = 0u;
  long long v38 = 0u;
  *(void *)&double result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v36).n128_u64[0];
  return result;
}

void sub_17DD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void (**a25)(),long long a26,long long a27)
{
  a25 = off_262D80;
  a26 = 0u;
  a27 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a25);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetCurrentAlignment(uint64_t a1, std::vector<int> *this)
{
  int v4 = -1431655765 * ((uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 3);
  std::vector<int>::resize(this, v4);
  if (v4 >= 1)
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v6 = v4;
    unint64_t v7 = (uint64_t *)(*(void *)(a1 + 264) + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 3;
      *begin++ = *(_DWORD *)(v8 - 4) - *(_DWORD *)(a1 + 408);
      --v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetOverallAlignment(uint64_t a1, uint64_t *a2)
{
  int v4 = -1431655765 * ((uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 3);
  std::vector<std::vector<int>>::resize(a2, v4);
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v25 = v4;
    uint64_t v6 = *(void *)(a1 + 264);
    do
    {
      unint64_t v7 = (_DWORD **)(v6 + 24 * v5);
      for (uint64_t i = *v7; i != v7[1]; ++i)
      {
        uint64_t v9 = *a2 + 24 * v5;
        int v10 = *i - *(_DWORD *)(a1 + 408);
        int v12 = (int **)(v9 + 8);
        int v11 = *(int **)(v9 + 8);
        int v14 = (void *)(v9 + 16);
        unint64_t v13 = *(void *)(v9 + 16);
        if ((unint64_t)v11 >= v13)
        {
          unint64_t v16 = *(int **)v9;
          uint64_t v17 = ((uint64_t)v11 - *(void *)v9) >> 2;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v13 - (void)v16;
          if (v19 >> 1 > v18) {
            unint64_t v18 = v19 >> 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v14, v20);
            int v11 = *v12;
            unint64_t v16 = *(int **)v9;
          }
          else
          {
            uint64_t v21 = 0;
          }
          uint64_t v22 = (int *)&v21[4 * v17];
          *uint64_t v22 = v10;
          int v15 = v22 + 1;
          while (v11 != v16)
          {
            int v23 = *--v11;
            *--uint64_t v22 = v23;
          }
          *(void *)uint64_t v9 = v22;
          *int v12 = v15;
          *int v14 = &v21[4 * v20];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          int *v11 = v10;
          int v15 = v11 + 1;
        }
        *int v12 = v15;
        uint64_t v6 = *(void *)(a1 + 264);
        unint64_t v7 = (_DWORD **)(v6 + 24 * v5);
      }
      ++v5;
    }
    while (v5 != v25);
  }
  return 1;
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(unsigned char *)(this + 420) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(unsigned char *)(this + 420) = 0;
  }
  return this;
}

double kaldi::nnet1::MovingAttentionComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  uint64_t v40 = a2;
  uint64_t v8 = *(void *)a1;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)&stru_108.flags + 2, "in.NumCols() == input_dim_", v7);
  }
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)&stru_108.reserved1, "batch_idx == 0", v7);
  }
  unsigned int v9 = *(_DWORD *)(a1 + 44);
  int v10 = *(_DWORD *)(a2 + 20);
  uint64_t v42 = v9;
  int v38 = v10 / (int)v9;
  if (v10 / (int)v9 * v9 != v10) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)&stru_108.reserved1 + 3, "num_seq * seq_size == in.NumRows()", v7);
  }
  int v11 = (const char *)(*(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 12));
  *(void *)(a1 + 104) = *(void *)(a3 + 32);
  if (*(unsigned char *)(a1 + 417)) {
    int v12 = *(_DWORD *)(a1 + *(void *)(v8 - 24) + 8);
  }
  else {
    int v12 = 0;
  }
  kaldi::CuMatrix<float>::Resize(a1 + 72, v9, (v12 + v11), 1u, 0);
  if (v38 >= 1)
  {
    int v14 = 0;
    long long v13 = 0uLL;
    do
    {
      v51[0] = v13;
      v51[1] = v13;
      uint64_t v50 = off_262D80;
      int v41 = v14;
      if (*(unsigned char *)(a1 + 417))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, a1 + 72, 0, *(_DWORD *)(a1 + 92), v11, *(_DWORD *)(a1 + 8 + *(void *)(*(void *)a1 - 24)));
        *(void *)&v51[0] = v49[0];
        *(_OWORD *)((char *)v51 + 8) = *(_OWORD *)&v49[1];
        *((void *)&v51[1] + 1) = v49[3];
        uint64_t v48 = off_262D80;
        memset(v49, 0, sizeof(v49));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v48);
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, v40, v14 * v42, v42, 0, *(_DWORD *)(v40 + 16));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v50, (uint64_t)&v48, 111, v15, v16);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, v40, v14 * v42, v42, 0, *(_DWORD *)(v40 + 16));
        *(void *)&v51[0] = v49[0];
        *(_OWORD *)((char *)v51 + 8) = *(_OWORD *)&v49[1];
        *((void *)&v51[1] + 1) = v49[3];
      }
      uint64_t v48 = off_262D80;
      memset(v49, 0, sizeof(v49));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v48);
      if ((int)v42 >= 1)
      {
        unint64_t v18 = 0;
        uint64_t v19 = 8;
        do
        {
          int v20 = *(_DWORD *)(*(void *)(*(void *)(a1 + 288) + v19) - 4) - *(_DWORD *)(a1 + 408);
          if (v20 < 0) {
            kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", &stru_158.sectname[9], "begin >= 0", v17);
          }
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, a1 + 72, 0, *(_DWORD *)(a1 + 92), 0, (int)v11);
          if (v18 >= HIDWORD(v49[1])) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v21);
          }
          *(void *)&long long v44 = v49[0] + 4 * LODWORD(v49[2]) * (int)v18;
          uint64_t v43 = &off_262E20;
          *((void *)&v44 + 1) = LODWORD(v49[1]);
          *(void *)&long long v45 = v49[3];
          if (v18 >= *(unsigned int *)(a1 + 44)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v21);
          }
          unsigned int v22 = *(_DWORD *)(a1 + 40);
          uint64_t v23 = *(void *)(a1 + 56);
          v46[1] = *(void *)(a1 + 32) + 4 * *(_DWORD *)(a1 + 48) * (int)v18;
          v46[0] = &off_262E20;
          v46[2] = v22;
          v46[3] = v23;
          kaldi::CuSubVector<float>::CuSubVector(v47, (uint64_t)v46, *(_DWORD *)(a1 + 8) * v20, (int)v11, v21);
          kaldi::CuVectorBase<float>::CopyFromVec(&v43, (uint64_t)v47, v24, v25, v26);
          uint64_t v43 = &off_262E20;
          *(void *)&long long v44 = 0;
          DWORD2(v44) = 0;
          *(void *)&long long v45 = 0;
          uint64_t v48 = off_262D80;
          memset(v49, 0, sizeof(v49));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v48);
          ++v18;
          v19 += 24;
        }
        while (v42 != v18);
      }
      if (*(unsigned char *)(a1 + 419) && *(int *)(a1 + 12) >= 1)
      {
        int v27 = 0;
        do
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, a1 + 72, 0, *(_DWORD *)(a1 + 92), (const char *)(*(_DWORD *)(a1 + 8) * v27), *(_DWORD *)(a1 + 8));
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v48, (uint64_t)&v50, v28, v29, v30);
          uint64_t v48 = off_262D80;
          memset(v49, 0, sizeof(v49));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v48);
          ++v27;
        }
        while (v27 < *(_DWORD *)(a1 + 12));
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, a3, v41 * v42, v42, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, (uint64_t)&v43, 0, SHIDWORD(v44), 0, *(_DWORD *)(*(void *)(a1 + 16) + 12));
      uint64_t v43 = off_262D80;
      long long v44 = 0u;
      long long v45 = 0u;
      __n128 v31 = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
      (*(void (**)(void, uint64_t, void (***)(), void, __n128))(**(void **)(a1 + 16)
                                                                                                  + 112))(*(void *)(a1 + 16), a1 + 72, &v48, 0, v31);
      kaldi::nnet1::MovingAttentionComponent::ComputeAlignments(a1, a1 + 72, (uint64_t)&v48, v32, v33);
      uint64_t v48 = off_262D80;
      memset(v49, 0, sizeof(v49));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v48);
      uint64_t v50 = off_262D80;
      memset(v51, 0, sizeof(v51));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v50);
      long long v13 = 0uLL;
      int v14 = v41 + 1;
    }
    while (v41 + 1 != v38);
  }
  if (*(unsigned char *)(a1 + 418))
  {
    uint64_t v34 = (unsigned int *)kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v50, a3, 0, *(_DWORD *)(a3 + 20), (const char *)*(unsigned int *)(*(void *)(a1 + 16) + 12), *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 8));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(v34, v40, 111, v35, v36);
    uint64_t v50 = off_262D80;
    memset(v51, 0, sizeof(v51));
    *(void *)&long long v13 = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v50).n128_u64[0];
  }
  return *(double *)&v13;
}

void sub_17E764(_Unwind_Exception *a1)
{
  *(void *)(v2 - 128) = off_262D80;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2 - 128);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MovingAttentionComponent::ComputeAlignments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 3);
  if (v5 != *(_DWORD *)(a2 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ComputeAlignments", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", &stru_158.segname[15], "alignments_.size() == num_seq", a5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 3) != v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"ComputeAlignments", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)&stru_158.addr, "current_focal_points_.size() == num_seq", a5);
  }
  uint64_t v7 = *(unsigned int *)(a2 + 20);
  uint64_t v8 = *(unsigned int **)(a1 + 16);
  uint64_t v130 = v7;
  if (!v8)
  {
LABEL_13:
    if ((int)v7 < 1) {
      return;
    }
    uint64_t v21 = 0;
    while (1)
    {
      int v22 = *(_DWORD *)(*(void *)(*(void *)(a1 + 288) + 24 * v21 + 8) - 4);
      uint64_t v23 = *(void *)(a1 + 264) + 24 * v21;
      uint64_t v25 = (_DWORD **)(v23 + 8);
      uint64_t v24 = *(_DWORD **)(v23 + 8);
      int v27 = (void *)(v23 + 16);
      unint64_t v26 = *(void *)(v23 + 16);
      if ((unint64_t)v24 >= v26)
      {
        uint64_t v29 = *(_DWORD **)v23;
        uint64_t v30 = ((uint64_t)v24 - *(void *)v23) >> 2;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62) {
          goto LABEL_163;
        }
        uint64_t v32 = v26 - (void)v29;
        if (v32 >> 1 > v31) {
          unint64_t v31 = v32 >> 1;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v27, v33);
          uint64_t v24 = *v25;
          uint64_t v29 = *(_DWORD **)v23;
        }
        else
        {
          uint64_t v34 = 0;
        }
        uint64_t v35 = &v34[4 * v30];
        *(_DWORD *)uint64_t v35 = v22;
        uint64_t v28 = v35 + 4;
        while (v24 != v29)
        {
          int v36 = *--v24;
          *((_DWORD *)v35 - 1) = v36;
          v35 -= 4;
        }
        *(void *)uint64_t v23 = v35;
        void *v25 = v28;
        void *v27 = &v34[4 * v33];
        if (v29) {
          operator delete(v29);
        }
        uint64_t v7 = v130;
      }
      else
      {
        *uint64_t v24 = v22;
        uint64_t v28 = v24 + 1;
      }
      void *v25 = v28;
      uint64_t v37 = *(void *)(a1 + 288);
      int v38 = (void **)(v37 + 24 * v21);
      if (*(unsigned char *)(a1 + 416))
      {
        int v39 = v22 + 1;
        uint64_t v40 = *(void *)(a1 + 384);
        int v41 = *(_DWORD *)(v40 + 4 * v21);
        uint64_t v42 = v37 + 24 * v21;
        long long v45 = *(char **)(v42 + 8);
        uint64_t v44 = v42 + 8;
        uint64_t v43 = v45;
        long long v47 = (void *)(v44 + 8);
        unint64_t v46 = *(void *)(v44 + 8);
        if ((unint64_t)v45 >= v46)
        {
          uint64_t v55 = (char *)*v38;
          uint64_t v56 = (v43 - (unsigned char *)*v38) >> 2;
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 62) {
            goto LABEL_163;
          }
          uint64_t v58 = v46 - (void)v55;
          if (v58 >> 1 > v57) {
            unint64_t v57 = v58 >> 1;
          }
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v57;
          }
          if (v59)
          {
            long long v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v44 + 8, v59);
            uint64_t v43 = *(char **)v44;
            uint64_t v55 = (char *)*v38;
          }
          else
          {
            long long v60 = 0;
          }
          if (v41 <= v22) {
            int v39 = *(_DWORD *)(v40 + 4 * v21);
          }
          uint64_t v64 = &v60[4 * v56];
          *(_DWORD *)uint64_t v64 = v39;
          int v54 = v64 + 4;
          while (v43 != v55)
          {
            int v65 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *((_DWORD *)v64 - 1) = v65;
            v64 -= 4;
          }
LABEL_70:
          const char *v38 = v64;
          *(void *)uint64_t v44 = v54;
          *long long v47 = &v60[4 * v59];
          if (v55) {
            operator delete(v55);
          }
          uint64_t v7 = v130;
          goto LABEL_73;
        }
        if (v41 <= v22) {
          int v48 = *(_DWORD *)(v40 + 4 * v21);
        }
        else {
          int v48 = v22 + 1;
        }
      }
      else
      {
        int v49 = v22 - 1;
        int v50 = *(_DWORD *)(a1 + 408);
        uint64_t v51 = v37 + 24 * v21;
        uint64_t v52 = *(char **)(v51 + 8);
        uint64_t v44 = v51 + 8;
        uint64_t v43 = v52;
        long long v47 = (void *)(v44 + 8);
        unint64_t v53 = *(void *)(v44 + 8);
        if ((unint64_t)v52 >= v53)
        {
          uint64_t v55 = (char *)*v38;
          uint64_t v61 = (v43 - (unsigned char *)*v38) >> 2;
          unint64_t v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 62) {
LABEL_163:
          }
            std::vector<float>::__throw_length_error[abi:ne180100]();
          uint64_t v63 = v53 - (void)v55;
          if (v63 >> 1 > v62) {
            unint64_t v62 = v63 >> 1;
          }
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v62;
          }
          if (v59)
          {
            long long v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v44 + 8, v59);
            uint64_t v43 = *(char **)v44;
            uint64_t v55 = (char *)*v38;
          }
          else
          {
            long long v60 = 0;
          }
          if (v22 <= v50) {
            int v49 = *(_DWORD *)(a1 + 408);
          }
          uint64_t v64 = &v60[4 * v61];
          *(_DWORD *)uint64_t v64 = v49;
          int v54 = v64 + 4;
          while (v43 != v55)
          {
            int v66 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *((_DWORD *)v64 - 1) = v66;
            v64 -= 4;
          }
          goto LABEL_70;
        }
        if (v22 <= v50) {
          int v48 = *(_DWORD *)(a1 + 408);
        }
        else {
          int v48 = v22 - 1;
        }
      }
      *(_DWORD *)uint64_t v43 = v48;
      int v54 = v43 + 4;
LABEL_73:
      *(void *)uint64_t v44 = v54;
      if (++v21 == v7) {
        return;
      }
    }
  }
  if (!v11)
  {
    uint64_t v7 = v130;
    if (v14)
    {
      uint64_t v13 = v14[14];
      if (!v13) {
        kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[9], "linearity_", v15);
      }
      goto LABEL_9;
    }
    goto LABEL_13;
  }
  uint64_t v13 = v11[13];
  LODWORD(v7) = v130;
  if (!v13) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v12);
  }
LABEL_9:
  uint64_t v129 = a1 + 216;
  kaldi::CuMatrix<float>::Resize(a1 + 216, (v7 + v7 * *(_DWORD *)(a1 + 12)), v8[3], 1u, 0);
  uint64_t v16 = *(unsigned int *)(a1 + 12);
  if ((int)v16 < 1)
  {
    uint64_t v19 = v130;
  }
  else
  {
    int v17 = 0;
    int v18 = 0;
    LODWORD(v19) = v130;
    do
    {
      int v20 = (const char *)(*(_DWORD *)(a1 + 8) * v18);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, v129, v17, v19, 0, *(_DWORD *)(a1 + 232));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v134, a2, 0, *(_DWORD *)(a2 + 20), v20, *(_DWORD *)(a1 + 8));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v131, v13, 0, *(_DWORD *)(v13 + 20), v20, *(_DWORD *)(a1 + 8));
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&__p, (uint64_t)&v134, CblasNoTrans, (uint64_t)&v131, &stru_68.sectname[8], 1.0, 0.0);
      long long v131 = off_262D80;
      long long v132 = 0u;
      long long v133 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v131);
      long long v134 = off_262D80;
      long long v135 = 0u;
      long long v136 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v134);
      __p.__begin_ = (std::vector<int>::pointer)off_262D80;
      *(_OWORD *)&__p.__end_ = 0u;
      long long v138 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&__p);
      ++v18;
      uint64_t v16 = *(unsigned int *)(a1 + 12);
      uint64_t v19 = v130;
      v17 += v130;
    }
    while (v18 < (int)v16);
  }
  kaldi::CuMatrix<float>::Resize(a1 + 336, v19, v16, 1u, 0);
  int v70 = v130;
  if ((int)v130 >= 1)
  {
    unsigned int v71 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, v129, v71, *(_DWORD *)(a1 + 12) * v70, 0, *(_DWORD *)(a1 + 232));
      if (v130 != 1) {
        kaldi::CuMatrixBase<float>::SetStride((uint64_t)&__p, *(_DWORD *)(a1 + 240) * v130);
      }
      if (*(_DWORD *)(a1 + 356) <= v71) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v72);
      }
      unsigned int v73 = *(_DWORD *)(a1 + 352);
      uint64_t v74 = *(void *)(a1 + 368);
      *(void *)&long long v135 = *(void *)(a1 + 344) + 4 * (int)(*(_DWORD *)(a1 + 360) * v71);
      long long v134 = &off_262E20;
      *((void *)&v135 + 1) = v73;
      *(void *)&long long v136 = v74;
      if (*(_DWORD *)(a3 + 20) <= v71) {
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v72);
      }
      unsigned int v75 = *(_DWORD *)(a3 + 16);
      uint64_t v76 = *(void *)(a3 + 32);
      *(void *)&long long v132 = *(void *)(a3 + 8) + 4 * (int)(*(_DWORD *)(a3 + 24) * v71);
      long long v131 = &off_262E20;
      *((void *)&v132 + 1) = v75;
      *(void *)&long long v133 = v76;
      kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v134, &__p, CblasNoTrans, (uint64_t)&v131, v72, 1.0, 0.0);
      __p.__begin_ = (std::vector<int>::pointer)off_262D80;
      *(_OWORD *)&__p.__end_ = 0u;
      long long v138 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&__p);
      ++v71;
      int v70 = v130;
    }
    while (v130 != v71);
  }
  kaldi::CuMatrixBase<float>::FindRowMaxId(a1 + 336, (int *)(a1 + 312), v67, v68, v69);
  memset(&__p, 0, sizeof(__p));
  kaldi::CuArray<int>::CopyToVec((int *)(a1 + 312), &__p);
  if ((int)v130 >= 1)
  {
    for (uint64_t i = 0; i != v130; ++i)
    {
      int v78 = *(_DWORD *)(*(void *)(*(void *)(a1 + 288) + 24 * i + 8) - 4);
      uint64_t v79 = *(void *)(a1 + 264) + 24 * i;
      int v80 = __p.__begin_[i] + v78 - *(_DWORD *)(a1 + 408);
      uint64_t v82 = (int **)(v79 + 8);
      uint64_t v81 = *(int **)(v79 + 8);
      uint64_t v84 = (void *)(v79 + 16);
      unint64_t v83 = *(void *)(v79 + 16);
      if ((unint64_t)v81 >= v83)
      {
        uint64_t v86 = *(int **)v79;
        uint64_t v87 = ((uint64_t)v81 - *(void *)v79) >> 2;
        unint64_t v88 = v87 + 1;
        if ((unint64_t)(v87 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v89 = v83 - (void)v86;
        if (v89 >> 1 > v88) {
          unint64_t v88 = v89 >> 1;
        }
        if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v88;
        }
        if (v90)
        {
          uint64_t v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v84, v90);
          uint64_t v81 = *v82;
          uint64_t v86 = *(int **)v79;
        }
        else
        {
          uint64_t v91 = 0;
        }
        uint64_t v92 = (int *)&v91[4 * v87];
        *uint64_t v92 = v80;
        uint64_t v85 = v92 + 1;
        while (v81 != v86)
        {
          int v93 = *--v81;
          *--uint64_t v92 = v93;
        }
        *(void *)uint64_t v79 = v92;
        const char *v82 = v85;
        *uint64_t v84 = &v91[4 * v90];
        if (v86) {
          operator delete(v86);
        }
      }
      else
      {
        int *v81 = v80;
        uint64_t v85 = v81 + 1;
      }
      const char *v82 = v85;
      if (*(unsigned char *)(a1 + 416))
      {
        int v94 = *(_DWORD *)(*(void *)(*(void *)(a1 + 264) + 24 * i + 8) - 4);
        LODWORD(v134) = v94;
        uint64_t v95 = *(void *)(a1 + 288);
        if (v94 == v78)
        {
          uint64_t v96 = *(_DWORD **)(v95 + 24 * i + 8);
          if ((unint64_t)v96 - *(void *)(v95 + 24 * i) >= 5 && *(v96 - 2) == v78) {
            LODWORD(v134) = ++v78;
          }
        }
        else
        {
          uint64_t v96 = *(_DWORD **)(v95 + 24 * i + 8);
          int v78 = v94;
        }
        uint64_t v99 = v95 + 24 * i;
        if (*(_DWORD *)(*(void *)(a1 + 384) + 4 * i) >= v78) {
          uint64_t v102 = &v134;
        }
        else {
          uint64_t v102 = (void (***)())(*(void *)(a1 + 384) + 4 * i);
        }
        int v103 = *(_DWORD *)v102;
        int v104 = *(_DWORD *)(a1 + 408);
        if (*(_DWORD *)v102 <= v104) {
          int v105 = *(_DWORD *)(a1 + 408);
        }
        else {
          int v105 = *(_DWORD *)v102;
        }
        int v106 = (_DWORD **)(v99 + 8);
        long long v108 = (void *)(v99 + 16);
        unint64_t v107 = *(void *)(v99 + 16);
        if ((unint64_t)v96 >= v107)
        {
          uint64_t v100 = *(_DWORD **)v99;
          uint64_t v109 = ((uint64_t)v96 - *(void *)v99) >> 2;
          unint64_t v110 = v109 + 1;
          if ((unint64_t)(v109 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v111 = v107 - (void)v100;
          if (v111 >> 1 > v110) {
            unint64_t v110 = v111 >> 1;
          }
          if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v112 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v112 = v110;
          }
          if (v112)
          {
            uint64_t v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v99 + 16, v112);
            uint64_t v96 = *v106;
            uint64_t v100 = *(_DWORD **)v99;
            uint64_t v114 = (void (***)())(a1 + 408);
            if (v103 >= v104) {
              uint64_t v114 = v102;
            }
            int v105 = *(_DWORD *)v114;
          }
          else
          {
            uint64_t v113 = 0;
          }
          long long v126 = &v113[4 * v109];
          *(_DWORD *)long long v126 = v105;
          uint64_t v121 = v126 + 4;
          while (v96 != v100)
          {
            int v127 = *--v96;
            *((_DWORD *)v126 - 1) = v127;
            v126 -= 4;
          }
LABEL_155:
          *(void *)uint64_t v99 = v126;
          *int v106 = v121;
          *long long v108 = &v113[4 * v112];
          if (v100) {
            operator delete(v100);
          }
          goto LABEL_157;
        }
      }
      else
      {
        int v97 = *(_DWORD *)(*(void *)(*(void *)(a1 + 264) + 24 * i + 8) - 4);
        LODWORD(v134) = v97;
        uint64_t v98 = *(void *)(a1 + 288);
        uint64_t v99 = v98 + 24 * i;
        if (v97 == v78)
        {
          uint64_t v96 = *(_DWORD **)(v98 + 24 * i + 8);
          uint64_t v100 = *(_DWORD **)v99;
          unint64_t v101 = (unint64_t)v96 - *(void *)v99;
          if (v101 >= 5 && *(_DWORD *)((char *)v100 + v101 - 8) == v78) {
            LODWORD(v134) = --v78;
          }
        }
        else
        {
          uint64_t v100 = *(_DWORD **)v99;
          uint64_t v96 = *(_DWORD **)(v98 + 24 * i + 8);
          int v78 = v97;
        }
        if (*v100 >= v78) {
          uint64_t v115 = &v134;
        }
        else {
          uint64_t v115 = (void (***)())v100;
        }
        int v116 = *(_DWORD *)v115;
        int v117 = *(_DWORD *)(a1 + 408);
        if (*(_DWORD *)v115 <= v117) {
          int v105 = *(_DWORD *)(a1 + 408);
        }
        else {
          int v105 = *(_DWORD *)v115;
        }
        uint64_t v118 = v98 + 24 * i;
        unint64_t v120 = *(void *)(v118 + 16);
        long long v108 = (void *)(v118 + 16);
        unint64_t v119 = v120;
        int v106 = (_DWORD **)(v108 - 1);
        if ((unint64_t)v96 >= v120)
        {
          uint64_t v122 = v96 - v100;
          unint64_t v123 = v122 + 1;
          if ((unint64_t)(v122 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v124 = v119 - (void)v100;
          if (v124 >> 1 > v123) {
            unint64_t v123 = v124 >> 1;
          }
          if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v112 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v112 = v123;
          }
          if (v112)
          {
            uint64_t v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v108, v112);
            uint64_t v96 = *v106;
            uint64_t v100 = *(_DWORD **)v99;
            long long v125 = (void (***)())(a1 + 408);
            if (v116 >= v117) {
              long long v125 = v115;
            }
            int v105 = *(_DWORD *)v125;
          }
          else
          {
            uint64_t v113 = 0;
          }
          long long v126 = &v113[4 * v122];
          *(_DWORD *)long long v126 = v105;
          uint64_t v121 = v126 + 4;
          while (v96 != v100)
          {
            int v128 = *--v96;
            *((_DWORD *)v126 - 1) = v128;
            v126 -= 4;
          }
          goto LABEL_155;
        }
      }
      _DWORD *v96 = v105;
      uint64_t v121 = v96 + 1;
LABEL_157:
      *int v106 = v121;
    }
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_17F3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double virtual thunk to'kaldi::nnet1::MovingAttentionComponent::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  return kaldi::nnet1::MovingAttentionComponent::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 128), a2, a3, a4);
}

double kaldi::nnet1::MovingAttentionComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  uint64_t v52 = a2;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)&stru_1A8.addr + 3, "in.NumCols() == input_dim_", v9);
  }
  if (a6) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)&stru_1A8.addr + 4, "batch_idx == 0", v9);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 44);
  int v11 = *(_DWORD *)(a2 + 20);
  uint64_t v12 = (v11 / (int)v10);
  if (v12 * v10 != v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)&stru_1A8.addr + 7, "num_seq * seq_size == in.NumRows()", v9);
  }
  int v13 = *(_DWORD *)(a1 + 8);
  int v14 = *(_DWORD *)(a1 + 12);
  uint64_t v15 = *(void *)(a5 + 32);
  *(void *)(a1 + 152) = v15;
  *(void *)(a1 + 200) = v15;
  kaldi::CuMatrix<float>::Resize(a1 + 120, v10, *(unsigned int *)(a1 + 40), 0, 0);
  uint64_t v54 = a1 + 168;
  kaldi::CuMatrix<float>::Resize(a1 + 168, v10, *(unsigned int *)(*(void *)(a1 + 16) + 8), 0, 0);
  if ((int)v12 >= 1)
  {
    uint64_t v17 = 0;
    unsigned int v55 = v13 * v14;
    uint64_t v49 = v12;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v76, v52, v10 * v17, v10, 0, *(_DWORD *)(v52 + 16));
      uint64_t v18 = *(void *)(a1 + 16);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v70, a3, v10 * v17, v10, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v73, (uint64_t)&v70, 0, SHIDWORD(v71), 0, *(_DWORD *)(*(void *)(a1 + 16) + 12));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v64, a4, v10 * v17, v10, 0, *(_DWORD *)(a4 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v67, (uint64_t)&v64, 0, SHIDWORD(v65), 0, *(_DWORD *)(*(void *)(a1 + 16) + 12));
      (*(void (**)(uint64_t, void (***)(), void (***)(), void (***)(), uint64_t, void))(*(void *)v18 + 128))(v18, &v76, &v73, &v67, v54, 0);
      uint64_t v67 = off_262D80;
      long long v68 = 0u;
      long long v69 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v67);
      uint64_t v64 = off_262D80;
      long long v65 = 0u;
      long long v66 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v64);
      unsigned int v73 = off_262D80;
      long long v74 = 0u;
      long long v75 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v73);
      int v70 = off_262D80;
      long long v71 = 0u;
      long long v72 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v70);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v73, a5, v10 * v17, v10, 0, *(_DWORD *)(a5 + 16));
      if (*(unsigned char *)(a1 + 419) && (int)v10 >= 1)
      {
        for (unint64_t i = 0; i != v10; ++i)
        {
          int v21 = (*(_DWORD *)(*(void *)(*(void *)(a1 + 288) + 24 * i) + 4 * v17) - *(_DWORD *)(a1 + 408))
              * *(_DWORD *)(a1 + 8);
          if (v21 < 0) {
            kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)&stru_1A8.flags + 1, "begin >= 0", v19);
          }
          if (*(int *)(a1 + 12) >= 1)
          {
            int v22 = 0;
            do
            {
              if (i >= HIDWORD(v74)) {
                kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v19);
              }
              *(void *)&long long v71 = v74 + 4 * (int)v75 * (int)i;
              int v70 = &off_262E20;
              *((void *)&v71 + 1) = DWORD2(v74);
              *(void *)&long long v72 = *((void *)&v75 + 1);
              if (i >= *(unsigned int *)(a1 + 44)) {
                kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v19);
              }
              unsigned int v23 = *(_DWORD *)(a1 + 40);
              uint64_t v24 = *(void *)(a1 + 56);
              *(void *)&long long v65 = *(void *)(a1 + 32) + 4 * *(_DWORD *)(a1 + 48) * (int)i;
              uint64_t v64 = &off_262E20;
              *((void *)&v65 + 1) = v23;
              *(void *)&long long v66 = v24;
              kaldi::CuSubVector<float>::CuSubVector(&v67, (uint64_t)&v64, v21 + *(_DWORD *)(a1 + 8) * v22, *(_DWORD *)(a1 + 8), v19);
              if (i >= *(unsigned int *)(a1 + 188)) {
                kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
              }
              unsigned int v26 = *(_DWORD *)(a1 + 184);
              uint64_t v27 = *(void *)(a1 + 200);
              uint64_t v57 = *(void *)(a1 + 176) + 4 * *(_DWORD *)(a1 + 192) * (int)i;
              uint64_t v56 = &off_262E20;
              uint64_t v58 = v26;
              uint64_t v59 = v27;
              kaldi::CuSubVector<float>::CuSubVector(&v60, (uint64_t)&v56, *(_DWORD *)(a1 + 8) * v22, *(_DWORD *)(a1 + 8), v25);
              kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v70, (uint64_t)&v67, (uint64_t)&v60, v28, v29, 1.0, 1.0);
              ++v22;
            }
            while (v22 < *(_DWORD *)(a1 + 12));
          }
        }
      }
      if (*(unsigned char *)(a1 + 417))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v70, v54, 0, *(_DWORD *)(a1 + 188), (const char *)v55, *(_DWORD *)(a1 + 8 + *(void *)(*(void *)a1 - 24)));
        kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v73, (uint64_t)&v70, 111, v30, v31, 1.0, 1.0);
        int v70 = off_262D80;
        long long v71 = 0u;
        long long v72 = 0u;
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v70);
      }
      if ((int)v10 >= 1)
      {
        for (unint64_t j = 0; j != v10; ++j)
        {
          int v33 = *(_DWORD *)(a1 + 8);
          int v34 = (*(_DWORD *)(*(void *)(*(void *)(a1 + 288) + 24 * j) + 4 * v17) - *(_DWORD *)(a1 + 408)) * v33;
          if (*(unsigned char *)(a1 + 419))
          {
            if (*(int *)(a1 + 12) >= 1)
            {
              int v35 = 0;
              do
              {
                if (j >= *(unsigned int *)(a1 + 140)) {
                  kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v19);
                }
                unsigned int v36 = *(_DWORD *)(a1 + 136);
                uint64_t v37 = *(void *)(a1 + 152);
                *(void *)&long long v68 = *(void *)(a1 + 128) + 4 * *(_DWORD *)(a1 + 144) * (int)j;
                uint64_t v67 = &off_262E20;
                *((void *)&v68 + 1) = v36;
                *(void *)&long long v69 = v37;
                kaldi::CuSubVector<float>::CuSubVector(&v70, (uint64_t)&v67, v34 + *(_DWORD *)(a1 + 8) * v35, *(_DWORD *)(a1 + 8), v19);
                if (j >= HIDWORD(v77)) {
                  kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v38);
                }
                *(void *)&long long v65 = v77 + 4 * (int)v78 * (int)j;
                uint64_t v64 = &off_262E20;
                *((void *)&v65 + 1) = DWORD2(v77);
                *(void *)&long long v66 = *((void *)&v78 + 1);
                if (j >= *(unsigned int *)(a1 + 188)) {
                  kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v38);
                }
                unsigned int v39 = *(_DWORD *)(a1 + 184);
                uint64_t v40 = *(void *)(a1 + 200);
                uint64_t v57 = *(void *)(a1 + 176) + 4 * *(_DWORD *)(a1 + 192) * (int)j;
                uint64_t v56 = &off_262E20;
                uint64_t v58 = v39;
                uint64_t v59 = v40;
                kaldi::CuSubVector<float>::CuSubVector(&v60, (uint64_t)&v56, *(_DWORD *)(a1 + 8) * v35, *(_DWORD *)(a1 + 8), v38);
                kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v70, (uint64_t)&v64, (uint64_t)&v60, v41, v42, 1.0, 1.0);
                ++v35;
              }
              while (v35 < *(_DWORD *)(a1 + 12));
            }
          }
          else
          {
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v70, a1 + 120, 0, *(_DWORD *)(a1 + 140), (const char *)((*(_DWORD *)(*(void *)(*(void *)(a1 + 288) + 24 * j) + 4 * v17)- *(_DWORD *)(a1 + 408))* v33), v55);
            if (j >= HIDWORD(v71)) {
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v43);
            }
            *(void *)&long long v65 = v71 + 4 * (int)v72 * (int)j;
            uint64_t v64 = &off_262E20;
            *((void *)&v65 + 1) = DWORD2(v71);
            *(void *)&long long v66 = *((void *)&v72 + 1);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v67, v54, 0, *(_DWORD *)(a1 + 188), 0, v55);
            if (j >= HIDWORD(v68)) {
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v46);
            }
            uint64_t v61 = v68 + 4 * (int)v69 * (int)j;
            long long v60 = &off_262E20;
            uint64_t v62 = DWORD2(v68);
            uint64_t v63 = *((void *)&v69 + 1);
            kaldi::CuVectorBase<float>::AddVec((uint64_t)&v64, (uint64_t)&v60, v44, v45, v46, 1.0, 1.0);
            long long v60 = &off_262E20;
            uint64_t v61 = 0;
            LODWORD(v62) = 0;
            uint64_t v63 = 0;
            uint64_t v67 = off_262D80;
            long long v68 = 0u;
            long long v69 = 0u;
            fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v67);
            uint64_t v64 = &off_262E20;
            *(void *)&long long v65 = 0;
            DWORD2(v65) = 0;
            *(void *)&long long v66 = 0;
            int v70 = off_262D80;
            long long v71 = 0u;
            long long v72 = 0u;
            fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v70);
          }
        }
      }
      unsigned int v73 = off_262D80;
      long long v74 = 0u;
      long long v75 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v73);
      uint64_t v76 = off_262D80;
      long long v77 = 0u;
      long long v78 = 0u;
      *(void *)&double result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v76).n128_u64[0];
      ++v17;
    }
    while (v17 != v49);
  }
  if (*(unsigned char *)(a1 + 418))
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v76, a4, 0, *(_DWORD *)(a4 + 20), (const char *)*(unsigned int *)(*(void *)(a1 + 16) + 12), *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 8));
    kaldi::CuMatrixBase<float>::AddMat(a5, (uint64_t)&v76, 111, v47, v48, 1.0, 1.0);
    uint64_t v76 = off_262D80;
    long long v77 = 0u;
    long long v78 = 0u;
    *(void *)&double result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v76).n128_u64[0];
  }
  return result;
}

void sub_17FFA0(_Unwind_Exception *a1)
{
  *(void *)(v2 - 128) = off_262D80;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2 - 128);
  _Unwind_Resume(a1);
}

double virtual thunk to'kaldi::nnet1::MovingAttentionComponent::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return kaldi::nnet1::MovingAttentionComponent::BackpropagateFnc((uint64_t)a1 + *(void *)(*a1 - 144), a2, a3, a4, a5, a6);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetGradientNormalization(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 240))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SetGradientNormalization(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 256) + 16) + 240))();
}

void kaldi::nnet1::MovingAttentionComponent::AccumGradients(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::MovingAttentionComponent::Check(a1);
  uint64_t v40 = a2;
  uint64_t v10 = *a1;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)&stru_1F8.addr, "input.NumCols() == input_dim_", v9);
  }
  if (a5) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)&stru_1F8.addr + 1, "batch_idx == 0", v9);
  }
  uint64_t v11 = *((unsigned int *)a1 + 11);
  int v12 = *(_DWORD *)(a2 + 20);
  uint64_t v13 = (v12 / (int)v11);
  if (v13 * v11 != v12) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)&stru_1F8.addr + 4, "num_seq * seq_size == input.NumRows()", v9);
  }
  int v14 = (const char *)(*((_DWORD *)a1 + 2) * *((_DWORD *)a1 + 3));
  a1[13] = a4;
  if (*((unsigned char *)a1 + 417)) {
    int v15 = *(_DWORD *)((char *)a1 + *(void *)(v10 - 24) + 8);
  }
  else {
    int v15 = 0;
  }
  kaldi::CuMatrix<float>::Resize((uint64_t)(a1 + 9), v11, (v15 + v14), 1u, 0);
  uint64_t v16 = (*(uint64_t (**)(void))(*(void *)a1[2] + 272))();
  int v50 = off_26E7B8;
  long long v17 = *(_OWORD *)(v16 + 23);
  *(_OWORD *)uint64_t v51 = *(_OWORD *)(v16 + 8);
  *(_OWORD *)((char *)&v51[3] + 3) = v17;
  float v18 = v51[0];
  v51[0] = v51[0] / (float)(int)v13;
  (*(void (**)(void))(*(void *)a1[2] + 264))();
  uint64_t v38 = v13;
  if ((int)v13 >= 1)
  {
    uint64_t v19 = 0;
    uint64_t v37 = a4;
    do
    {
      memset(v49, 0, sizeof(v49));
      int v48 = off_262D80;
      if (*((unsigned char *)a1 + 417))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)(a1 + 9), 0, *((_DWORD *)a1 + 23), v14, *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8));
        v49[0] = v47[0];
        *(_OWORD *)&v49[1] = *(_OWORD *)&v47[1];
        v49[3] = v47[3];
        unint64_t v46 = off_262D80;
        memset(v47, 0, sizeof(v47));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v40, v11 * v19, v11, 0, *(_DWORD *)(v40 + 16));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v48, (uint64_t)&v46, 111, v20, v21);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v40, v11 * v19, v11, 0, *(_DWORD *)(v40 + 16));
        v49[0] = v47[0];
        *(_OWORD *)&v49[1] = *(_OWORD *)&v47[1];
        v49[3] = v47[3];
      }
      unint64_t v46 = off_262D80;
      memset(v47, 0, sizeof(v47));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
      if ((int)v11 >= 1)
      {
        for (unint64_t i = 0; i != v11; ++i)
        {
          int v24 = *(_DWORD *)(*(void *)(a1[36] + 24 * i) + 4 * v19) - *((_DWORD *)a1 + 102);
          if (v24 < 0) {
            kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)&stru_1F8.reloff + 1, "begin >= 0", v22);
          }
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)(a1 + 9), 0, *((_DWORD *)a1 + 23), 0, (int)v14);
          if (i >= HIDWORD(v47[1])) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
          }
          *(void *)&long long v42 = v47[0] + 4 * LODWORD(v47[2]) * (int)i;
          uint64_t v41 = &off_262E20;
          *((void *)&v42 + 1) = LODWORD(v47[1]);
          *(void *)&long long v43 = v47[3];
          if (i >= *((unsigned int *)a1 + 11)) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
          }
          unsigned int v26 = *((_DWORD *)a1 + 10);
          uint64_t v27 = a1[7];
          v44[1] = a1[4] + 4 * *((_DWORD *)a1 + 12) * (int)i;
          v44[0] = &off_262E20;
          v44[2] = v26;
          v44[3] = v27;
          kaldi::CuSubVector<float>::CuSubVector(v45, (uint64_t)v44, *((_DWORD *)a1 + 2) * v24, (int)v14, v25);
          kaldi::CuVectorBase<float>::CopyFromVec(&v41, (uint64_t)v45, v28, v29, v30);
          uint64_t v41 = &off_262E20;
          *(void *)&long long v42 = 0;
          DWORD2(v42) = 0;
          *(void *)&long long v43 = 0;
          unint64_t v46 = off_262D80;
          memset(v47, 0, sizeof(v47));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
        }
      }
      if (*((unsigned char *)a1 + 419) && *((int *)a1 + 3) >= 1)
      {
        int v31 = 0;
        do
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)(a1 + 9), 0, *((_DWORD *)a1 + 23), (const char *)(*((_DWORD *)a1 + 2) * v31), *((_DWORD *)a1 + 2));
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v46, (uint64_t)&v48, v32, v33, v34);
          unint64_t v46 = off_262D80;
          memset(v47, 0, sizeof(v47));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
          ++v31;
        }
        while (v31 < *((_DWORD *)a1 + 3));
      }
      uint64_t v35 = a1[2];
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v41, a3, v11 * v19, v11, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)&v41, 0, SHIDWORD(v42), 0, *(_DWORD *)(a1[2] + 12));
      (*(void (**)(uint64_t, uint64_t *, void (***)(), uint64_t, void))(*(void *)v35 + 232))(v35, a1 + 9, &v46, v37, 0);
      unint64_t v46 = off_262D80;
      memset(v47, 0, sizeof(v47));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
      uint64_t v41 = off_262D80;
      long long v42 = 0u;
      long long v43 = 0u;
      __n128 v36 = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v41);
      (*(void (**)(__n128))(*(void *)a1[2] + 256))(v36);
      int v48 = off_262D80;
      memset(v49, 0, sizeof(v49));
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v48);
      ++v19;
    }
    while (v19 != v38);
  }
  v51[0] = v18;
  (*(void (**)(uint64_t, void (***)(kaldi::nnet1::NnetTrainOptions *__hidden)))(*(void *)a1[2] + 264))(a1[2], &v50);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&v50);
}

void sub_180A38(_Unwind_Exception *a1)
{
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)(v1 - 144));
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::MovingAttentionComponent::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetGradient(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 224))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::GetGradient(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 240) + 16) + 224))();
}

void std::vector<int>::__throw_out_of_range[abi:ne180100]()
{
}

uint64_t *kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable8BitComponentItf>(const void ***this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  for (unint64_t i = *this; i != this[1]; ++i)
  {
    if (*i)
    {
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v7);
        if (v9)
        {
          uint64_t v10 = (const void *)v9;
          kaldi::nnet1::Component::Delete(v11, (kaldi::nnet1::Component *)((char *)&def_5A5E8 + 1));
          *unint64_t i = v10;
        }
      }
    }
  }

  return kaldi::nnet1::Nnet::CheckDimensions((uint64_t *)this, a2, a3, a4, a5);
}

uint64_t *kaldi::nnet1::Nnet::CheckDimensions(uint64_t *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *this;
  uint64_t v5 = this[1];
  if ((unint64_t)(v5 - *this) >= 9)
  {
    uint64_t v7 = this;
    uint64_t v8 = 0;
    while (1)
    {
      this = *(uint64_t **)(v6 + 8 * v8);
      if (!this) {
        kaldi::KaldiAssertFailure_((kaldi *)"CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", &stru_568.segname[2], "components_[i] != NULL", a5);
      }
      if (*((_DWORD *)this + 3) != *(_DWORD *)(*(void *)(v6 + 8 * v8 + 8) + 8)) {
        break;
      }
      if (v8)
      {
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 24))(this);
        switch(this)
        {
          case 0x10C:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1414);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The word vec component can only be the first component");
            goto LABEL_33;
          case 0x10E:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1416);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The word multivec component can only be the first component");
            goto LABEL_33;
          case 0x10F:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1418);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The compressed word vec component can only be the first component");
            goto LABEL_33;
        }
        uint64_t v6 = *v7;
        uint64_t v5 = v7[1];
      }
      unint64_t v9 = v8 + 2;
      ++v8;
      if (v9 >= (v5 - v6) >> 3)
      {
        if ((unint64_t)(v5 - v6) <= 8) {
          return this;
        }
        this = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(v5 - 8) + 24))(*(void *)(v5 - 8));
        switch(this)
        {
          case 0x10F:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1429);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The compressed word vec component can only be the first component");
            break;
          case 0x10E:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1427);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The word multivec component can only be the first component");
            break;
          case 0x10C:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1425);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The word vec component can only be the first component");
            break;
          default:
            return this;
        }
LABEL_33:
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
      }
    }
    uint64_t v22 = v8;
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1406);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Dimension mismatch between output/input of components ", 54);
    uint64_t v11 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(*v7 + 8 * v22) + 24))(*(void *)(*v7 + 8 * v22));
    kaldi::nnet1::Component::TypeToMarker(v11, &v24);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v12 = &v24;
    }
    else {
      int v12 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v24.__r_.__value_.__l.__size_;
    }
    int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, size);
    int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" and ", 5);
    uint64_t v16 = *(void *)(*v7 + 8 * v22 + 8);
    long long v17 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 24))(v16);
    kaldi::nnet1::Component::TypeToMarker(v17, &v23);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v18 = &v23;
    }
    else {
      float v18 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v19 = v23.__r_.__value_.__l.__size_;
    }
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", ", 2);
    int v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" <--> ", 6);
    std::ostream::operator<<();
    std::string::~string(&v23);
    std::string::~string(&v24);
    goto LABEL_33;
  }
  return this;
}

void sub_1810AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a23);
}

uint64_t *kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable16BitComponentItf>(const void ***this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  for (unint64_t i = *this; i != this[1]; ++i)
  {
    if (*i)
    {
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = kaldi::nnet1::Quantizable16BitComponentItf::CopyQuantized(v7);
        if (v9)
        {
          uint64_t v10 = (const void *)v9;
          kaldi::nnet1::Component::Delete(v11, (kaldi::nnet1::Component *)((char *)&def_5A5E8 + 1));
          *unint64_t i = v10;
        }
      }
    }
  }

  return kaldi::nnet1::Nnet::CheckDimensions((uint64_t *)this, a2, a3, a4, a5);
}

void kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions(kaldi::nnet1::NnetTrainOptions *this)
{
}

void kaldi::nnet1::HistoryOptions::~HistoryOptions(kaldi::nnet1::HistoryOptions *this)
{
}

void kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions(kaldi::nnet1::RecurrentNnetTrainOptions *this)
{
}

void non-virtual thunk to'kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions(kaldi::nnet1::RecurrentNnetTrainOptions *this)
{
}

double kaldi::nnet1::NnetCorrPacker::NnetCorrPacker(kaldi::nnet1::NnetCorrPacker *this)
{
  *(_DWORD *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = -1082130432;
  return result;
}

uint64_t kaldi::nnet1::Nnet::GetComponent(kaldi::nnet1::Nnet *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a2 >= (unint64_t)((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_338.reserved3, "static_cast<size_t>(component) < components_.size()", a5);
  }
  return *(void *)(*(void *)this + 8 * a2);
}

{
  if (a2 >= (unint64_t)((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_338.reserved1 + 3, "static_cast<size_t>(component) < components_.size()", a5);
  }
  return *(void *)(*(void *)this + 8 * a2);
}

void kaldi::nnet1::Nnet::Nnet(kaldi::nnet1::Nnet *this, const kaldi::nnet1::Nnet *a2)
{
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  operator new();
}

void sub_181568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)(v12 + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = (void **)(v12 + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  int v14 = *(void **)(v12 + 48);
  if (v14)
  {
    *(void *)(v12 + 56) = v14;
    operator delete(v14);
  }
  int v15 = *(void **)(v12 + 24);
  if (v15)
  {
    *(void *)(v12 + 32) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *(void **)v12;
  if (*(void *)v12)
  {
    *(void *)(v12 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::SetTrainOptions(kaldi::nnet1::Nnet *this, const kaldi::nnet1::NnetTrainOptions *lpsrc, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = a3;
  if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
  {
    int v8 = 0;
    do
    {
      uint64_t Component = kaldi::nnet1::Nnet::GetComponent(this, v8, a3, a4, a5);
      if ((*(unsigned int (**)(uint64_t))(*(void *)Component + 32))(Component))
      {
        uint64_t v10 = kaldi::nnet1::Nnet::GetComponent(this, v8, a3, a4, a5);
        (*(void (**)(uint64_t, const kaldi::nnet1::NnetTrainOptions *))(*(void *)v10 + 264))(v10, lpsrc);
      }
      ++v8;
    }
    while (v8 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
  }
  uint64_t v16 = *((void *)this + 18);
  if (v15)
  {
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    operator new();
  }
  long long v17 = *(_OWORD *)((char *)lpsrc + 8);
  *(_OWORD *)(v16 + 23) = *(_OWORD *)((char *)lpsrc + 23);
  *(_OWORD *)(v16 + 8) = v17;
  if (v5 && kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v19, "SetTrainOptions", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1536, 2);
    float v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"a regular trainer option. ", 26);
    kaldi::nnet1::operator<<(v18, *((void *)this + 18));
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v19);
  }
  if (v5)
  {
    kaldi::nnet1::Nnet::ResetInternalBuffers(this, v11, v12, v13, v14);
    kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
  }
}

void sub_18197C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::ResetBuffersAndStates(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::Nnet::ResetInternalBuffers(this, a2, a3, a4, a5);

  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
}

void kaldi::nnet1::Nnet::Read(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v14 = 0;
  int v4 = (kaldi::Input *)kaldi::Input::Input(v13, a2, &v14);
  int v5 = (uint64_t *)kaldi::Input::Stream(v4);
  kaldi::nnet1::Nnet::Read((uint64_t **)a1, v5, v14, 0);
  kaldi::Input::Close((kaldi::Input *)v13);
  if (((*(void *)(a1 + 8) - *(void *)a1) & 0x7FFFFFFF8) == 0 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1241);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"The network '", 13);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"' is empty.", 11);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
  }
  kaldi::Input::~Input((kaldi::Input *)v13);
}

void sub_181AC4(_Unwind_Exception *a1)
{
  kaldi::Input::~Input((kaldi::Input *)(v1 - 48));
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Nnet::SetGradientNormalization(void *result, uint64_t a2, int a3, int a4, float a5)
{
  uint64_t v7 = result;
  if (a3)
  {
    int v8 = (const void **)result[3];
    if (v8 != (const void **)result[4])
    {
      do
      {
        uint64_t v9 = (char *)*v8;
        uint64_t v10 = *(void *)*v8;
        if (v11) {
          double result = (void *)kaldi::nnet1::ParallelComponent::SetGradientNormalization((uint64_t)v11, a2, 1, a5);
        }
        else {
          double result = (void *)(*(uint64_t (**)(char *, uint64_t, float))(*(void *)&v9[*(void *)(v10 - 24)]
        }
                                                                               + 240))(&v9[*(void *)(v10 - 24)], a2, a5);
        ++v8;
      }
      while (v8 != (const void **)v7[4]);
    }
  }
  else
  {
    if (a4) {
      int v12 = -2;
    }
    else {
      int v12 = -1;
    }
    int v13 = v12 + ((result[1] - *result) >> 3);
    if (v13 >= 0)
    {
      uint64_t v14 = 0;
      uint64_t v15 = (v13 + 1);
      do
      {
        double result = *(void **)(*v7 + 8 * v14);
        if (result)
        {
          if (result) {
            double result = (void *)(*(uint64_t (**)(void *, uint64_t, float))(*result + 240))(result, a2, a5);
          }
        }
        ++v14;
      }
      while (v15 != v14);
    }
  }
  return result;
}

uint64_t kaldi::nnet1::Nnet::Destroy(kaldi::nnet1::Nnet *this)
{
  uint64_t v2 = *(void *)this;
  if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      kaldi::nnet1::Component::Delete(*(void **)(v2 + 8 * v3++), (kaldi::nnet1::Component *)((char *)&def_5A5E8 + 1));
      uint64_t v2 = *(void *)this;
    }
    while (v3 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
  }
  for (unint64_t i = (kaldi::CuWorkspace **)*((void *)this + 44); i != *((kaldi::CuWorkspace ***)this + 45); ++i)
  {
    if (*i)
    {
      kaldi::CuWorkspace::~CuWorkspace(*i);
      operator delete();
    }
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)this, 0);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 9, 0);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 15, 0);
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)this + 352, 0);
  uint64_t result = *((void *)this + 20);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    *((void *)this + 20) = 0;
  }
  return result;
}

void kaldi::nnet1::Nnet::~Nnet(kaldi::nnet1::Nnet *this)
{
  kaldi::nnet1::Nnet::Destroy(this);
  uint64_t v2 = *((void *)this + 18);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 44);
  if (v3)
  {
    *((void *)this + 45) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 40);
  if (v4) {
    free(v4);
  }
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  int v5 = (void *)*((void *)this + 35);
  if (v5)
  {
    *((void *)this + 36) = v5;
    operator delete(v5);
  }
  uint64_t v10 = (void **)((char *)this + 256);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  kaldi::CuVector<float>::~CuVector((void *)this + 28);
  kaldi::CuVector<float>::~CuVector((void *)this + 24);
  uint64_t v6 = (void *)*((void *)this + 21);
  if (v6) {
    operator delete(v6);
  }
  uint64_t v10 = (void **)((char *)this + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v10 = (void **)((char *)this + 96);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v10 = (void **)((char *)this + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v7 = (void *)*((void *)this + 6);
  if (v7)
  {
    *((void *)this + 7) = v7;
    operator delete(v7);
  }
  int v8 = (void *)*((void *)this + 3);
  if (v8)
  {
    *((void *)this + 4) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v9;
    operator delete(v9);
  }
}

void *kaldi::nnet1::Nnet::ResetHistoryStateIfExists(void *result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if ((a4 & 0x80000000) != 0 || (uint64_t v6 = result, *(_DWORD *)(result[18] + 32) <= (int)a4)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryStateIfExists", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_158.flags + 3, "batch_idx >= 0 && batch_idx < opts_->num_subbatches", a5);
  }
  uint64_t v7 = (uint64_t *)result[6];
  if (v7 != (uint64_t *)result[7])
  {
    do
    {
      uint64_t v10 = *v7++;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 24))(v10, a2, a3, a4);
    }
    while (v7 != (uint64_t *)v6[7]);
  }
  return result;
}

uint64_t kaldi::nnet1::Nnet::ResetHistoryStateIfExists(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 48);
  if (v1 != *(uint64_t **)(this + 56))
  {
    uint64_t v2 = this;
    do
    {
      uint64_t v3 = *v1++;
      this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
    }
    while (v1 != *(uint64_t **)(v2 + 56));
  }
  return this;
}

uint64_t kaldi::nnet1::Nnet::HistoryStateSize(kaldi::nnet1::Nnet *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 6);
  if (v1 == *((uint64_t **)this + 7)) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v4 = *v1++;
    uint64_t v3 = (*(unsigned int (**)(uint64_t))(*(void *)v4 + 16))(v4) + v3;
  }
  while (v1 != *((uint64_t **)this + 7));
  return v3;
}

uint64_t kaldi::nnet1::Nnet::GetHistoryState(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t **)(result + 48);
  uint64_t v3 = *(uint64_t **)(result + 56);
  if (v4 != v3)
  {
    if ((char *)v3 - (char *)v4 == 8)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)*v4 + 40);
      return v7();
    }
    else
    {
      uint64_t v8 = result;
      LODWORD(v9) = 0;
      do
      {
        uint64_t v11 = *v4++;
        uint64_t v9 = (*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11) + v9;
      }
      while (v4 != *(uint64_t **)(v8 + 56));
      kaldi::CuMatrix<float>::Resize(a2, v10, v9, 1u, 0);
      long long v23 = 0u;
      long long v22 = 0u;
      int v21 = off_262DC8;
      char v24 = 0;
      int v13 = *(void **)(v8 + 48);
      if (v13 == *(void **)(v8 + 56))
      {
        LODWORD(v14) = 0;
      }
      else
      {
        uint64_t v14 = 0;
        do
        {
          (*(void (**)(void, uint64_t (***)(), uint64_t))(*(void *)*v13 + 40))(*v13, &v21, a3);
          if (HIDWORD(v22) != v10) {
            kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", &stru_1A8.segname[13], "comp_history.NumRows() == num_seq", v15);
          }
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v18, a2, 0, *(_DWORD *)(a2 + 20), v14, SDWORD2(v22));
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v18, (uint64_t)&v21, 111, v16, v17);
          float v18 = off_262D80;
          long long v19 = 0u;
          long long v20 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v18);
          uint64_t v14 = (const char *)(DWORD2(v22) + v14);
          ++v13;
        }
        while (v13 != *(void **)(v8 + 56));
      }
      if (v14 != v9) {
        kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_1A8.addr + 1, "count == history_size", v12);
      }
      return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v21);
    }
  }
  return result;
}

void sub_182320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Nnet::GetHistoryState(void *result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = (uint64_t *)result[6];
  int v5 = (uint64_t *)result[7];
  uint64_t v7 = v5 - v6;
  if (v7)
  {
    if (v7 == 1)
    {
      uint64_t v11 = *(uint64_t (**)(void))(*(void *)*v6 + 48);
      return (void *)v11();
    }
    else
    {
      int v12 = result;
      if (v6 == v5)
      {
        uint64_t v13 = 0;
      }
      else
      {
        LODWORD(v13) = 0;
        do
        {
          uint64_t v14 = *v6++;
          uint64_t v13 = (*(unsigned int (**)(uint64_t))(*(void *)v14 + 16))(v14) + v13;
        }
        while (v6 != (uint64_t *)v12[7]);
      }
      kaldi::CuVector<float>::Resize(a2, v13, 1u, a4, a5);
      v23[1] = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      v23[0] = off_262E60;
      uint64_t v16 = (void *)v12[6];
      if (v16 == (void *)v12[7])
      {
        int v17 = 0;
      }
      else
      {
        int v17 = 0;
        do
        {
          (*(void (**)(void, void *, uint64_t, uint64_t))(*(void *)*v16 + 48))(*v16, v23, a3, a4);
          kaldi::CuSubVector<float>::CuSubVector(v22, a2, v17, v24, v18);
          kaldi::CuVectorBase<float>::CopyFromVec(v22, (uint64_t)v23, v19, v20, v21);
          v17 += v24;
          ++v16;
        }
        while (v16 != (void *)v12[7]);
      }
      if (v17 != v13) {
        kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_1A8.align + 2, "count == history_size", v15);
      }
      return kaldi::CuVector<float>::~CuVector(v23);
    }
  }
  return result;
}

void sub_182574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet::SetHistoryState(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(uint64_t **)(result + 48);
  int v5 = *(uint64_t **)(result + 56);
  uint64_t v7 = v5 - v6;
  if (v7)
  {
    if (v7 == 1)
    {
      uint64_t v10 = *(uint64_t (**)(void))(*(void *)*v6 + 56);
      return v10();
    }
    else
    {
      uint64_t v11 = result;
      if (v6 == v5)
      {
        int v12 = 0;
        uint64_t v6 = *(uint64_t **)(result + 56);
      }
      else
      {
        int v12 = 0;
        do
        {
          uint64_t v13 = *v6++;
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
          v12 += result;
        }
        while (v6 != *(uint64_t **)(v11 + 56));
      }
      if (*(_DWORD *)(a2 + 16) != v12)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v19, "SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 490);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"the network has history size ", 29);
        float v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" , but the input history data has dimension ", 44);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v19);
      }
      uint64_t v14 = *(uint64_t **)(v11 + 48);
      if (v14 == v6)
      {
        LODWORD(v15) = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          int v16 = (*(uint64_t (**)(void))(*(void *)*v14 + 16))();
          uint64_t v17 = *v14;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v19, a2, 0, *(_DWORD *)(a2 + 20), v15, v16);
          (*(void (**)(uint64_t, void (***)(), uint64_t))(*(void *)v17 + 56))(v17, &v19, a3);
          uint64_t v19 = off_262D80;
          long long v20 = 0u;
          long long v21 = 0u;
          uint64_t result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v19);
          uint64_t v15 = (const char *)(v16 + v15);
          ++v14;
        }
        while (v14 != *(uint64_t **)(v11 + 56));
      }
      if (v15 != v12) {
        kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_1A8.reserved3 + 2, "count == history_size", a5);
      }
    }
  }
  return result;
}

{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v11)(void);
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  int v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  void v21[34];
  uint64_t vars8;

  uint64_t v6 = *(uint64_t **)(result + 48);
  int v5 = *(uint64_t **)(result + 56);
  uint64_t v7 = v5 - v6;
  if (v7)
  {
    if (v7 == 1)
    {
      uint64_t v11 = *(uint64_t (**)(void))(*(void *)*v6 + 64);
      return v11();
    }
    else
    {
      int v12 = result;
      if (v6 == v5)
      {
        uint64_t v13 = 0;
        uint64_t v6 = *(uint64_t **)(result + 56);
      }
      else
      {
        uint64_t v13 = 0;
        do
        {
          uint64_t v14 = *v6++;
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
          v13 += result;
        }
        while (v6 != *(uint64_t **)(v12 + 56));
      }
      if (*(_DWORD *)(a2 + 16) != v13)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21, "SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 514);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"the network has history size ", 29);
        long long v20 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" , but the input history data has dimension ", 44);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
      }
      uint64_t v15 = *(uint64_t **)(v12 + 48);
      if (v15 == v6)
      {
        int v16 = 0;
      }
      else
      {
        int v16 = 0;
        do
        {
          uint64_t v17 = (*(uint64_t (**)(void))(*(void *)*v15 + 16))();
          float v18 = *v15++;
          kaldi::CuSubVector<float>::CuSubVector(v21, a2, v16, v17, v19);
          uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v18 + 64))(v18, v21, a3, a4);
          v16 += v17;
        }
        while (v15 != *(uint64_t **)(v12 + 56));
      }
      if (v16 != v13) {
        kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", &stru_1F8.segname[6], "count == history_size", a5);
      }
    }
  }
  return result;
}

void sub_182810(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void sub_182820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)())
{
  a10 = off_262D80;
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a10);
  _Unwind_Resume(a1);
}

void sub_182AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::Nnet::SetInternalBoundary(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t **)(result + 24);
  if (v3 != *(uint64_t **)(result + 32))
  {
    uint64_t v6 = result;
    do
    {
      uint64_t v7 = *v3++;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, a3);
    }
    while (v3 != *(uint64_t **)(v6 + 32));
  }
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::SetGradientNormalization(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = *(void *)(result + 184);
  if (v4 != *(void *)(result + 192))
  {
    uint64_t v8 = result;
    do
    {
      uint64_t result = kaldi::nnet1::Nnet::SetGradientNormalization(v4, a2, a3, 0, a4);
      v4 += 376;
    }
    while (v4 != *(void *)(v8 + 192));
  }
  return result;
}

void ***kaldi::nnet1::Nnet::Backpropagate(void ***result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if ((a4 & 0x80000000) != 0 || (uint64_t v6 = result, *((_DWORD *)result[18] + 8) <= (int)a4)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Backpropagate", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_1F8.reloff + 3, "batch_idx >= 0 && batch_idx < opts_->num_subbatches", a5);
  }
  uint64_t v10 = *result;
  uint64_t v9 = result[1];
  unint64_t v11 = (char *)v9 - (char *)*result;
  unint64_t v12 = v11 >> 3;
  if ((v11 >> 3))
  {
    if (a3) {
      uint64_t v13 = a3;
    }
    else {
      uint64_t v13 = a2;
    }
    uint64_t v14 = *(void *)(v13 + 32);
    unsigned int v15 = a4;
    int v16 = (uint64_t *)&result[9][3 * a4];
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    if (*v16 != v18)
    {
      uint64_t v19 = *v16;
      do
      {
        *(void *)(v19 + 32) = v14;
        v19 += 48;
      }
      while (v19 != v18);
    }
    long long v20 = &result[15][3 * a4];
    long long v21 = *v20;
    long long v22 = v20[1];
    if (v21 != v22)
    {
      long long v23 = v21;
      do
      {
        void v23[4] = v14;
        v23 += 6;
      }
      while (v23 != (void *)v22);
    }
    if ((int)v12 >= (int)(-1431655765 * ((unint64_t)(v18 - v17) >> 4))) {
      kaldi::KaldiAssertFailure_((kaldi *)"Backpropagate", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", &stru_248.sectname[7], "(int32)propagate_buf_[batch_idx].size() >= NumComponents() + 1", a5);
    }
    if ((int)v12 - 1 > (int)(-1431655765 * ((unint64_t)(v22 - v21) >> 4))) {
      kaldi::KaldiAssertFailure_((kaldi *)"Backpropagate", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", &stru_248.sectname[9], "(int32)backpropagate_buf_[batch_idx].size() >= NumComponents() - 1", a5);
    }
    if (v12 == 1)
    {
      kaldi::nnet1::Component::Backpropagate(*v10, v17, v17 + 48, a2, a3, a4);
      uint64_t result = (void ***)(*(uint64_t (**)(void *))(*(void *)**v6 + 32))(**v6);
      if (!result) {
        return result;
      }
      uint64_t v24 = **v6;
      if (v24) {
      uint64_t v25 = *(uint64_t (**)(void))(*(void *)v24 + 232);
      }
      goto LABEL_39;
    }
    uint64_t v26 = (v11 << 29) - 0x100000000;
    kaldi::nnet1::Component::Backpropagate(*(v9 - 1), v17 + 48 * SHIDWORD(v26), v17 + 48 * (int)v12, a2, (uint64_t)&v21[48 * (((v11 << 29) - 0x200000000) >> 32)], a4);
    if ((*(unsigned int (**)(void))(**(void **)((char *)*v6 + (v26 >> 29)) + 32))(*(void **)((char *)*v6 + (v26 >> 29))))
    {
      uint64_t v27 = (*v6)[v26 >> 32];
      if (v27) {
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v27 + 232))(v27, (uint64_t)v6[9][3 * v15] + 48 * SHIDWORD(v26), a2, v14, a4);
      }
    }
    uint64_t v28 = (v12 - 2);
    if ((int)v28 >= 1)
    {
      uint64_t v29 = 48 * (v12 - 2);
      do
      {
        uint64_t v30 = (uint64_t)v6[9][3 * a4] + v29;
        int v31 = v6[15][3 * a4];
        uint64_t v32 = v28 - 1;
        kaldi::nnet1::Component::Backpropagate((*v6)[v28], v30, v30 + 48, (uint64_t)v31 + v29, (uint64_t)v31 + 48 * (v28 - 1), a4);
        if ((*(unsigned int (**)(void *))(*(void *)(*v6)[v28] + 32))((*v6)[v28]))
        {
          uint64_t v33 = (*v6)[v28];
          if (v33) {
          (*(void (**)(void *, char *, char *, uint64_t, uint64_t))(*(void *)v33 + 232))(v33, (char *)v6[9][3 * a4] + v29, (char *)v6[15][3 * a4] + v29, v14, a4);
          }
        }
        v29 -= 48;
        --v28;
      }
      while ((unint64_t)(v32 + 1) > 1);
    }
    uint64_t v34 = (uint64_t)v6[9][3 * a4];
    kaldi::nnet1::Component::Backpropagate(**v6, v34, v34 + 48, (uint64_t)v6[15][3 * a4], a3, a4);
    uint64_t result = (void ***)(*(uint64_t (**)(void *))(*(void *)**v6 + 32))(**v6);
    if (result)
    {
      uint64_t v35 = **v6;
      if (v35) {
      uint64_t v25 = *(uint64_t (**)(void))(*(void *)v35 + 232);
      }
LABEL_39:
      return (void ***)v25();
    }
  }
  else if (a3)
  {
    return (void ***)kaldi::CuMatrix<float>::operator=(a3, a2);
  }
  return result;
}

void kaldi::nnet1::Nnet::Update(kaldi::nnet1::Nnet *this, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)this;
  uint64_t v3 = *((void *)this + 1);
  if (*(void *)this != v3)
  {
    unint64_t v8 = 0;
    do
    {
      if (*((void *)this + 22) == (v3 - *(void *)this) >> 3
        && ((*(void *)(*((void *)this + 21) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
      {
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11, "Update", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 652, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"freezing component ", 19);
          uint64_t v9 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (1-based) in this Update", 25);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11);
        }
      }
      else if ((*(unsigned int (**)(void))(**(void **)v4 + 32))())
      {
        uint64_t v10 = *(void **)v4;
        if (*(void *)v4) {
        (*(void (**)(void *, void *, uint64_t))(*(void *)v10 + 256))(v10, a2, a3);
        }
      }
      v4 += 8;
      ++v8;
      uint64_t v3 = *((void *)this + 1);
    }
    while (v4 != v3);
  }
}

void sub_183318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::Nnet::Feedforward(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  if (!a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_2E8.nreloc + 2, "NULL != out", a5);
  }
  if (*(_DWORD *)(a1[18] + 32) != 1) {
    kaldi::KaldiAssertFailure_((kaldi *)"Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_2E8.nreloc + 3, "opts_->num_subbatches == 1", a5);
  }
  int v6 = (int)a5;
  unint64_t v7 = (unint64_t)(a1[1] - *a1) >> 3;
  if (a4 == -1) {
    int v8 = (unint64_t)(a1[1] - *a1) >> 3;
  }
  else {
    int v8 = a4;
  }
  int v9 = v8 + a5;
  if (v8 + (int)a5 > (int)v7)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 812);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Components to propagate (startCompIdx=", 38);
    uint64_t v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)", num_comps=", 12);
    uint64_t v28 = (void *)std::ostream::operator<<();
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)") must not be greater than ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"#components in the network (", 28);
    uint64_t v30 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v30, ").");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
  }
  if (v8) {
    BOOL v12 = v7 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    kaldi::CuMatrix<float>::Resize(a3, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 1u, 0);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, a2, 111, v13, v14);
  }
  else if (v8 == 1)
  {
    unsigned int v15 = *(_DWORD **)(*a1 + 8 * (int)a5);
    kaldi::nnet1::Component::Propagate(v15, a2, a3, 0);
  }
  else
  {
    std::vector<kaldi::CuMatrix<float>>::vector(v31, 2uLL);
    uint64_t v16 = *(void *)(a3 + 32);
    uint64_t v17 = v31[0];
    *(void *)(v31[0] + 32) = v16;
    *(void *)(v17 + 80) = v16;
    kaldi::nnet1::Component::Propagate(*(_DWORD **)(*a1 + 8 * v6), a2, v17, 0);
    BOOL v18 = 0;
    uint64_t v19 = v6;
    int v20 = v9 - 2;
    if (v6 > v9 - 2) {
      int v20 = v6;
    }
    uint64_t v21 = v20;
    for (uint64_t i = ((uint64_t)v6 << 32) + 0x100000000; ; i += 0x100000000)
    {
      uint64_t v23 = *a1;
      uint64_t v24 = v31[0] + 48 * v18;
      if (v21 == v19) {
        break;
      }
      BOOL v25 = ~v18;
      BOOL v18 = !v18;
      uint64_t v26 = *(_DWORD **)(v23 + 8 * v19++ + 8);
      kaldi::nnet1::Component::Propagate(v26, v24, v31[0] + 48 * v25, 0);
    }
    kaldi::nnet1::Component::Propagate(*(_DWORD **)(v23 + (i >> 29)), v24, a3, 0);
    uint64_t v32 = (void **)v31;
    std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v32);
  }
}

uint64_t kaldi::nnet1::Nnet::OutputDim(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *((void *)this + 1);
  if (*(void *)this == v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"OutputDim", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_338.reloff + 1, "!components_.empty()", a5);
  }
  return *(unsigned int *)(*(void *)(v5 - 8) + 12);
}

uint64_t kaldi::nnet1::Nnet::InputDim(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(void *)this == *((void *)this + 1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"InputDim", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_338.nreloc + 2, "!components_.empty()", a5);
  }
  return *(unsigned int *)(**(void **)this + 8);
}

void *kaldi::nnet1::Nnet::GetHistoricalComponents@<X0>(kaldi::nnet1::Nnet *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(a2, *((const void **)this + 6), *((void *)this + 7), (uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 3);
}

void kaldi::nnet1::Nnet::AppendComponent(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = a2;
  unint64_t v7 = (uint64_t *)*((void *)this + 1);
  if (*((void *)this + 22) == ((uint64_t)v7 - *(void *)this) >> 3)
  {
    char v19 = 0;
    std::vector<BOOL>::push_back((uint64_t)this + 168, &v19);
    unint64_t v7 = (uint64_t *)*((void *)this + 1);
  }
  unint64_t v8 = *((void *)this + 2);
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = ((uint64_t)v7 - *(void *)this) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v8 - *(void *)this;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      a2 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      a2 = v12;
    }
    if (a2) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 16, a2);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (uint64_t *)&v13[8 * v10];
    unsigned int v15 = &v13[8 * a2];
    *uint64_t v14 = v5;
    int v9 = v14 + 1;
    uint64_t v17 = *(char **)this;
    uint64_t v16 = (char *)*((void *)this + 1);
    if (v16 != *(char **)this)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *--uint64_t v14 = v18;
      }
      while (v16 != v17);
      uint64_t v16 = *(char **)this;
    }
    *(void *)this = v14;
    *((void *)this + 1) = v9;
    *((void *)this + 2) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v7 = v5;
    int v9 = v7 + 1;
  }
  *((void *)this + 1) = v9;
  kaldi::nnet1::Nnet::ResetInternalBuffers(this, a2, a3, a4, a5);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
}

uint64_t kaldi::nnet1::Nnet::GetParams(kaldi::nnet1::Nnet *a1, uint64_t a2)
{
  uint64_t v4 = kaldi::nnet1::Nnet::NumParams(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  uint64_t v7 = *(void *)a1;
  if (*((void *)a1 + 1) == *(void *)a1)
  {
    int v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    int v9 = 0;
    do
    {
      if ((*(unsigned int (**)(void))(**(void **)(v7 + 8 * v8) + 32))(*(void *)(v7 + 8 * v8)))
      {
        if (!v10) {
          __cxa_bad_cast();
        }
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        (*(void (**)(void *, uint64_t *))(*(void *)v10 + 184))(v10, &v20);
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v17 = 0;
        if ((v21 + v9) > *(_DWORD *)(a2 + 8)) {
          kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v13);
        }
        uint64_t v17 = *(void *)a2 + 4 * v9;
        LODWORD(v18) = v21;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v17, (uint64_t)&v20, v11, v12, v13);
        int v14 = v21;
        kaldi::Vector<float>::Destroy((uint64_t)&v20);
        v9 += v14;
      }
      ++v8;
      uint64_t v7 = *(void *)a1;
    }
    while (v8 < (uint64_t)(*((void *)a1 + 1) - *(void *)a1) >> 3);
  }
  uint64_t result = kaldi::nnet1::Nnet::NumParams(a1);
  if (v9 != result) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_3D8.offset + 3, "pos == NumParams()", v16);
  }
  return result;
}

void sub_1839B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet::NumParams(kaldi::nnet1::Nnet *this)
{
  uint64_t v1 = *(void *)this;
  if (*((void *)this + 1) == *(void *)this) {
    return 0;
  }
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  do
  {
    if ((*(unsigned int (**)(void))(**(void **)(v1 + 8 * v3) + 32))(*(void *)(v1 + 8 * v3)))
    {
      uint64_t v5 = *(void **)(*(void *)this + 8 * v3);
      if (v5) {
      uint64_t v4 = (*(unsigned int (**)(void *))(*(void *)v5 + 176))(v5) + v4;
      }
    }
    ++v3;
    uint64_t v1 = *(void *)this;
  }
  while (v3 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  return v4;
}

uint64_t kaldi::nnet1::Nnet::SetParams(kaldi::nnet1::Nnet *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != kaldi::nnet1::Nnet::NumParams(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_3D8.align + 3, "wei_src.Dim() == NumParams()", v5);
  }
  uint64_t v6 = *(void *)a1;
  if (*((void *)a1 + 1) == *(void *)a1)
  {
    int v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    int v8 = 0;
    do
    {
      if ((*(unsigned int (**)(void))(**(void **)(v6 + 8 * v7) + 32))(*(void *)(v6 + 8 * v7)))
      {
        if (!v9) {
          __cxa_bad_cast();
        }
        uint64_t v10 = v9;
        int v11 = (*(uint64_t (**)(void *))(*(void *)v9 + 176))(v9);
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        int v13 = v11 + v8;
        if ((v11 + v8) > *(_DWORD *)(a2 + 8)) {
          kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v12);
        }
        uint64_t v16 = *(void *)a2 + 4 * v8;
        LODWORD(v17) = v11;
        (*(void (**)(void *, uint64_t *))(*(void *)v10 + 192))(v10, &v16);
        int v8 = v13;
      }
      ++v7;
      uint64_t v6 = *(void *)a1;
    }
    while (v7 < (uint64_t)(*((void *)a1 + 1) - *(void *)a1) >> 3);
  }
  uint64_t result = kaldi::nnet1::Nnet::NumParams(a1);
  if (v8 != result) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_3D8.flags + 1, "pos == NumParams()", v15);
  }
  return result;
}

float kaldi::nnet1::Nnet::SumParams(kaldi::nnet1::Nnet *this)
{
  uint64_t v1 = *(void *)this;
  if (*((void *)this + 1) == *(void *)this) {
    return 0.0;
  }
  unint64_t v3 = 0;
  float v4 = 0.0;
  do
  {
    if ((*(unsigned int (**)(void))(**(void **)(v1 + 8 * v3) + 32))(*(void *)(v1 + 8 * v3)))
    {
      if (!v5) {
        __cxa_bad_cast();
      }
      float v4 = v4 + (*(float (**)(void *))(*(void *)v5 + 208))(v5);
    }
    ++v3;
    uint64_t v1 = *(void *)this;
  }
  while (v3 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  return v4;
}

void kaldi::nnet1::Nnet::ResetInternalBuffers(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5 = *(unsigned int *)(*((void *)this + 18) + 32);
  if ((int)v5 <= 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", &stru_428.sectname[12], "opts_->num_subbatches > 0", a5);
  }
  unint64_t v7 = (void *)((char *)this + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 9, v5);
  int v8 = (void *)((char *)this + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 15, *(int *)(*((void *)this + 18) + 32));
  unint64_t v9 = *((void *)this + 1) - *(void *)this;
  int v10 = *(_DWORD *)(*((void *)this + 18) + 32);
  if ((int)(v9 >> 3) <= 0)
  {
    if (v10 >= 1)
    {
      uint64_t v31 = 0;
      do
      {
        uint64_t v32 = *v7 + 24 * v31;
        uint64_t v35 = *(void **)(v32 + 8);
        uint64_t v34 = (void *)(v32 + 8);
        uint64_t v33 = v35;
        __n128 v36 = *(void **)(*v7 + 24 * v31);
        if (v35 != v36)
        {
          uint64_t v37 = v33 - 6;
          uint64_t v38 = v33 - 6;
          unsigned int v39 = v33 - 6;
          do
          {
            uint64_t v40 = *v39;
            v39 -= 6;
            (*(void (**)(void *))(v40 + 16))(v38);
            v37 -= 6;
            BOOL v21 = v38 == v36;
            uint64_t v38 = v39;
          }
          while (!v21);
        }
        *uint64_t v34 = v36;
        uint64_t v41 = *v8 + 24 * v31;
        uint64_t v44 = *(void **)(v41 + 8);
        long long v43 = (void *)(v41 + 8);
        long long v42 = v44;
        uint64_t v45 = *(void **)(*v8 + 24 * v31);
        if (v44 != v45)
        {
          unint64_t v46 = v42 - 6;
          uint64_t v47 = v42 - 6;
          int v48 = v42 - 6;
          do
          {
            uint64_t v49 = *v48;
            v48 -= 6;
            (*(void (**)(void *))(v49 + 16))(v47);
            v46 -= 6;
            BOOL v21 = v47 == v45;
            uint64_t v47 = v48;
          }
          while (!v21);
        }
        *long long v43 = v45;
        ++v31;
      }
      while (v31 < *(int *)(*((void *)this + 18) + 32));
    }
    uint64_t v51 = (void *)*((void *)this + 12);
    int v50 = (void *)*((void *)this + 13);
    if (v50 != v51)
    {
      uint64_t v52 = v50 - 4;
      unint64_t v53 = v50 - 4;
      uint64_t v54 = v50 - 4;
      do
      {
        uint64_t v55 = *v54;
        v54 -= 4;
        (*(void (**)(void *))(v55 + 8))(v53);
        v52 -= 4;
        BOOL v21 = v53 == v51;
        unint64_t v53 = v54;
      }
      while (!v21);
    }
    *((void *)this + 13) = v51;
  }
  else
  {
    if (v10 >= 1)
    {
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = *v7 + 24 * v11;
        unsigned int v15 = *(void **)(v12 + 8);
        int v14 = (void *)(v12 + 8);
        int v13 = v15;
        uint64_t v16 = *(void **)(*v7 + 24 * v11);
        if (v15 != v16)
        {
          uint64_t v17 = v13 - 6;
          uint64_t v18 = v13 - 6;
          uint64_t v19 = v13 - 6;
          do
          {
            uint64_t v20 = *v19;
            v19 -= 6;
            (*(void (**)(void *))(v20 + 16))(v18);
            v17 -= 6;
            BOOL v21 = v18 == v16;
            uint64_t v18 = v19;
          }
          while (!v21);
        }
        *int v14 = v16;
        uint64_t v22 = *v8 + 24 * v11;
        BOOL v25 = *(void **)(v22 + 8);
        uint64_t v24 = (void *)(v22 + 8);
        uint64_t v23 = v25;
        uint64_t v26 = *(void **)(*v8 + 24 * v11);
        if (v25 != v26)
        {
          uint64_t v27 = v23 - 6;
          uint64_t v28 = v23 - 6;
          uint64_t v29 = v23 - 6;
          do
          {
            uint64_t v30 = *v29;
            v29 -= 6;
            (*(void (**)(void *))(v30 + 16))(v28);
            v27 -= 6;
            BOOL v21 = v28 == v26;
            uint64_t v28 = v29;
          }
          while (!v21);
        }
        *uint64_t v24 = v26;
        std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*((void *)this + 9) + 24 * v11), (((*((void *)this + 1) - *(void *)this) << 29) + 0x100000000) >> 32);
        std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*((void *)this + 15) + 24 * v11++), (((*((void *)this + 1) - *(void *)this) << 29) - 0x100000000) >> 32);
      }
      while (v11 < *(int *)(*((void *)this + 18) + 32));
      unint64_t v9 = *((void *)this + 1) - *(void *)this;
    }
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 12, (uint64_t)((v9 << 29) + 0x100000000) >> 32);
  }
}

void *kaldi::nnet1::Nnet::CheckInternalBuffers(void *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(this[18] + 32);
  if ((int)v5 <= 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_428.addr + 4, "opts_->num_subbatches > 0", a5);
  }
  uint64_t v6 = this[9];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((this[10] - v6) >> 3);
  if (v7 != v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_428.addr + 5, "propagate_buf_.size() == opts_->num_subbatches", a5);
  }
  uint64_t v8 = this[15];
  if (0xAAAAAAAAAAAAAAABLL * ((this[16] - v8) >> 3) != v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_428.addr + 6, "backpropagate_buf_.size() == opts_->num_subbatches", a5);
  }
  unint64_t v9 = this[1] - *this;
  if ((int)(v9 >> 3) <= 0)
  {
    int v14 = (void *)(v6 + 8);
    unsigned int v15 = (void *)(v8 + 8);
    do
    {
      if (*v14 != *(v14 - 1)) {
        kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_428.size + 7, "propagate_buf_[i].size() == 0", a5);
      }
      if (*v15 != *(v15 - 1)) {
        kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_428.offset, "backpropagate_buf_[i].size() == 0", a5);
      }
      v14 += 3;
      v15 += 3;
      --v7;
    }
    while (v7);
    if (this[13] != this[12]) {
      kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_428.offset + 2, "propagate_vec_buf_.size() == 0", a5);
    }
  }
  else
  {
    uint64_t v10 = (v9 << 29) - 0x100000000;
    uint64_t v11 = (uint64_t)((v9 << 29) + 0x100000000) >> 32;
    uint64_t v12 = (void *)(v6 + 8);
    int v13 = (void *)(v8 + 8);
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v12 - *(v12 - 1)) >> 4) != v11) {
        kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_428.size + 1, "propagate_buf_[i].size() == NumComponents() + 1", a5);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v13 - *(v13 - 1)) >> 4) != v10 >> 32) {
        kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_428.size + 2, "backpropagate_buf_[i].size() == NumComponents() - 1", a5);
      }
      v12 += 3;
      v13 += 3;
      --v7;
    }
    while (v7);
    if (v11 != (uint64_t)(this[13] - this[12]) >> 5) {
      kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_428.size + 4, "propagate_vec_buf_.size() == NumComponents() + 1", a5);
    }
  }
  return this;
}

uint64_t kaldi::nnet1::Nnet::IsComponentFrozen(kaldi::nnet1::Nnet *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if ((int)((*((void *)this + 1) - *(void *)this) >> 3) <= a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"IsComponentFrozen", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", &stru_478.sectname[1], "index < NumComponents()", a5);
  }
  if (*((void *)this + 22) <= (unint64_t)a2) {
    return 0;
  }
  else {
    return (*(void *)(*((void *)this + 21) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1;
  }
}

void kaldi::nnet1::Nnet::SetDropoutRetention(kaldi::nnet1::Nnet *this, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
  {
    int v8 = 0;
    BOOL v9 = a2 > 1.0 || a2 <= 0.0;
    do
    {
      uint64_t Component = kaldi::nnet1::Nnet::GetComponent(this, v8, a4, a5, a6);
      if ((*(unsigned int (**)(uint64_t))(*(void *)Component + 24))(Component) == 518)
      {
        uint64_t v11 = (const void *)kaldi::nnet1::Nnet::GetComponent(this, v8, a4, a5, a6);
        if (!v12) {
          __cxa_bad_cast();
        }
        unsigned char v12[48] = a2;
        if (v9) {
          kaldi::KaldiAssertFailure_((kaldi *)"SetDropoutRetention", "../subproject/libquasar/libkaldi/src/nnet/nnet-activation.h", (const char *)&stru_158.nreloc + 2, "dropout_retention_ > 0.0 && dropout_retention_ <= 1.0", a6);
        }
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v15, "SetDropoutRetention", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1203);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Setting dropout-retention in component ", 39);
          int v13 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" from ", 6);
          int v14 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" to ", 4);
          std::ostream::operator<<();
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v15);
        }
      }
      ++v8;
    }
    while (v8 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
  }
}

void sub_1845F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::Init(kaldi::nnet1::Nnet *a1, uint64_t a2, uint64_t a3)
{
  kaldi::Input::Input(v6, a2, 0);
  uint64_t v5 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v6);
  kaldi::nnet1::Nnet::Init(a1, v5, a3);
  kaldi::Input::Close((kaldi::Input *)v6);
  kaldi::Input::~Input((kaldi::Input *)v6);
}

void sub_18466C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Input::~Input((kaldi::Input *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::Init(kaldi::nnet1::Nnet *a1, uint64_t *a2, uint64_t a3)
{
  kaldi::ExpectToken(a2, 0, (kaldi *)"<NnetProto>");
  uint64_t v24 = 0;
  size_t v25 = 0;
  uint64_t v26 = 0;
  int v7 = *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32);
  if ((v7 & 2) != 0)
  {
LABEL_26:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1221);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Missing </NnetProto> at the end.", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    if (v7) {
      kaldi::KaldiAssertFailure_((kaldi *)"Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)&stru_478.reserved3 + 2, "is.good()", v6);
    }
    if (kaldi::PeekToken(a2, 0) == 47) {
      break;
    }
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    int v8 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
    unsigned __int8 v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale((std::locale *)__p);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v24, v9);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1228, 1);
      if (v26 >= 0) {
        uint64_t v10 = (void **)&v24;
      }
      else {
        uint64_t v10 = v24;
      }
      if (v26 >= 0) {
        uint64_t v11 = HIBYTE(v26);
      }
      else {
        uint64_t v11 = v25;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v10, v11);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    if (v26 >= 0) {
      size_t v12 = HIBYTE(v26);
    }
    else {
      size_t v12 = v25;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v12 + 1);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v13 = __p;
    }
    else {
      int v13 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    if (v12)
    {
      if (v26 >= 0) {
        int v14 = (void **)&v24;
      }
      else {
        int v14 = v24;
      }
      memmove(v13, v14, v12);
    }
    *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 10;
    uint64_t v15 = kaldi::nnet1::Component::Init(__p, a3);
    kaldi::nnet1::Nnet::AppendComponent(a1, v15, v16, v17, v18);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    int v7 = *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32);
    if ((v7 & 2) != 0) {
      goto LABEL_26;
    }
  }
  kaldi::ExpectToken(a2, 0, (kaldi *)"</NnetProto>");
  kaldi::nnet1::Nnet::ResetInternalBuffers(a1, v19, v20, v21, v22);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(a1);
  if (SHIBYTE(v26) < 0) {
    operator delete(v24);
  }
}

void sub_184944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 97) < 0) {
    operator delete(*(void **)(v14 - 120));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Nnet::Read(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = kaldi::nnet1::Component::Read(a2, a3, a4);
  if (v8)
  {
    uint64_t v13 = v8;
    uint64_t v14 = a1 + 2;
    while (1)
    {
      uint64_t v15 = a1[1];
      uint64_t v16 = (char *)v15 - (char *)*a1;
      if ((int)((unint64_t)v16 >> 3) >= 1 && *(_DWORD *)(*(v15 - 1) + 12) != *(_DWORD *)(v13 + 8)) {
        break;
      }
      if ((unint64_t)v15 >= *v14)
      {
        uint64_t v18 = v16 >> 3;
        unint64_t v19 = (v16 >> 3) + 1;
        if (v19 >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = *v14 - (void)*a1;
        if (v20 >> 2 > v19) {
          unint64_t v19 = v20 >> 2;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21) {
          uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), v21);
        }
        else {
          uint64_t v22 = 0;
        }
        uint64_t v23 = (uint64_t *)&v22[8 * v18];
        uint64_t *v23 = v13;
        uint64_t v17 = v23 + 1;
        size_t v25 = (char *)*a1;
        uint64_t v24 = (char *)a1[1];
        if (v24 != (char *)*a1)
        {
          do
          {
            uint64_t v26 = *((void *)v24 - 1);
            v24 -= 8;
            *--uint64_t v23 = v26;
          }
          while (v24 != v25);
          uint64_t v24 = (char *)*a1;
        }
        *a1 = v23;
        a1[1] = v17;
        a1[2] = (uint64_t *)&v22[8 * v21];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        uint64_t *v15 = v13;
        uint64_t v17 = v15 + 1;
      }
      a1[1] = v17;
      uint64_t v13 = kaldi::nnet1::Component::Read(a2, a3, a4);
      if (!v13) {
        goto LABEL_22;
      }
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1260);
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Dimensionality mismatch!", 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" Previous layer output:", 23);
    uint64_t v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" Current layer input:", 21);
    std::ostream::operator<<();
LABEL_29:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
LABEL_22:
  if ((int)((unint64_t)((char *)a1[1] - (char *)*a1) >> 3) <= 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1267);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, "Could not read any components");
    goto LABEL_29;
  }
  *((_DWORD *)a1[18] + 2) = 0;
  kaldi::nnet1::Nnet::ResetInternalBuffers((kaldi::nnet1::Nnet *)a1, v9, v10, v11, v12);

  kaldi::nnet1::Nnet::ResetRecurrentFlag((kaldi::nnet1::Nnet *)a1);
}

void *kaldi::nnet1::Nnet::Write(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::Nnet::CheckDimensions(a1, (uint64_t)a2, a3, a4, a5);
  kaldi::WriteToken(a2, (const char *)a3, (kaldi *)"<Nnet>", v9, v10);
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    uint64_t v13 = std::locale::use_facet(&v18, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v18);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v14 = *a1;
  if ((int)((unint64_t)(a1[1] - *a1) >> 3) >= 1)
  {
    uint64_t v15 = 0;
    do
    {
      kaldi::nnet1::Component::Write(*(void *)(v14 + 8 * v15++), a2, a3, a4);
      uint64_t v14 = *a1;
    }
    while (v15 < (int)((unint64_t)(a1[1] - *a1) >> 3));
  }
  uint64_t result = kaldi::WriteToken(a2, (const char *)a3, (kaldi *)"</Nnet>", v11, v12);
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    uint64_t v17 = std::locale::use_facet(&v18, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v18);
    std::ostream::put();
    return (void *)std::ostream::flush();
  }
  return result;
}

void sub_184D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t kaldi::nnet1::Nnet::Info(kaldi::nnet1::Nnet *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"num-components ", 15);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  unint64_t v3 = std::locale::use_facet((const std::locale *)&v32, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale((std::locale *)&v32);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"input-dim ", 10);
  if (*(void *)this == *((void *)this + 1))
  {
    uint64_t v28 = (unsigned char *)(&stru_338 + 62);
    uint64_t v29 = "InputDim";
    goto LABEL_27;
  }
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  uint64_t v6 = std::locale::use_facet((const std::locale *)&v32, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale((std::locale *)&v32);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"output-dim ", 11);
  if (*(void *)this == *((void *)this + 1))
  {
    uint64_t v28 = (char *)&stru_338.reloff + 1;
    uint64_t v29 = "OutputDim";
LABEL_27:
    kaldi::KaldiAssertFailure_((kaldi *)v29, "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", v28, "!components_.empty()", v4);
  }
  int v7 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  uint64_t v8 = std::locale::use_facet((const std::locale *)&v32, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)&v32);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"number-of-parameters ", 21);
  kaldi::nnet1::Nnet::NumParams(this);
  uint64_t v9 = (void *)std::ostream::operator<<();
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" millions", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  uint64_t v11 = std::locale::use_facet((const std::locale *)&v32, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale((std::locale *)&v32);
  std::ostream::put();
  std::ostream::flush();
  if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
  {
    uint64_t v12 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"component ", 10);
      uint64_t v13 = v12 + 1;
      uint64_t v14 = (void *)std::ostream::operator<<();
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" : ", 3);
      uint64_t v16 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(*(void *)this + 8 * v12)
                                                                         + 24))(*(void *)(*(void *)this + 8 * v12));
      kaldi::nnet1::Component::TypeToMarker(v16, &v32);
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v17 = &v32;
      }
      else {
        uint64_t v17 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v32.__r_.__value_.__l.__size_;
      }
      unint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", input-dim ", 12);
      uint64_t v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", output-dim ", 13);
      unint64_t v21 = (void *)std::ostream::operator<<();
      uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", ", 2);
      (*(void (**)(void **__return_ptr))(**(void **)(*(void *)this + 8 * v12) + 64))(__p);
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = __p;
      }
      else {
        uint64_t v23 = (void **)__p[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v24 = v31;
      }
      else {
        uint64_t v24 = (uint64_t)__p[1];
      }
      size_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
      std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
      uint64_t v26 = std::locale::use_facet(&v35, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
      std::locale::~locale(&v35);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v31 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      ++v12;
    }
    while (v13 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
  }
  std::stringbuf::str();
  if (v34 < 0) {
    operator delete((void *)v33[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1853EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

void *kaldi::nnet1::Nnet::InfoGradient@<X0>(kaldi::nnet1::Nnet *this@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (uint64_t *)*((void *)this + 15);
  if (*((uint64_t **)this + 16) == v3
    || (uint64_t v4 = *v3, *(void *)(*((void *)this + 15) + 8) == v4)
    || !(4 * *(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 24)))
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "### No gradient info");
  }
  else
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"### Gradient stats :\n", 21);
    if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Component ", 10);
        uint64_t v7 = v6 + 1;
        uint64_t v8 = (void *)std::ostream::operator<<();
        uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" : ", 3);
        uint64_t v10 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(*(void *)this + 8 * v6)
                                                                           + 24))(*(void *)(*(void *)this + 8 * v6));
        kaldi::nnet1::Component::TypeToMarker(v10, &v22);
        if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v11 = &v22;
        }
        else {
          uint64_t v11 = (std::string *)v22.__r_.__value_.__r.__words[0];
        }
        if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v22.__r_.__value_.__l.__size_;
        }
        uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, size);
        uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
        (*(void (**)(void **__return_ptr))(**(void **)(*(void *)this + 8 * v6) + 72))(__p);
        if ((v21 & 0x80u) == 0) {
          uint64_t v15 = __p;
        }
        else {
          uint64_t v15 = (void **)__p[0];
        }
        if ((v21 & 0x80u) == 0) {
          uint64_t v16 = v21;
        }
        else {
          uint64_t v16 = (uint64_t)__p[1];
        }
        uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
        std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
        std::locale v18 = std::locale::use_facet(&v25, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
        std::locale::~locale(&v25);
        std::ostream::put();
        std::ostream::flush();
        if ((char)v21 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        ++v6;
      }
      while (v7 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
    }
    std::stringbuf::str();
    if (v24 < 0) {
      operator delete((void *)v23[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)std::ios::~ios();
  }
}

void sub_1857F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

void *kaldi::nnet1::Nnet::InfoPropagate@<X0>(kaldi::nnet1::Nnet *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 9);
  if (*((uint64_t **)this + 10) == v2
    || (uint64_t v3 = *v2, *(void *)(*((void *)this + 9) + 8) == v3)
    || !(4 * *(_DWORD *)(v3 + 20) * *(_DWORD *)(v3 + 24)))
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "### Forward propagation buffers not initialized");
  }
  else
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"### Forward propagation buffer content, note in the parallel GPU training, this only includes the first subbatch content :\n", 123);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"[0] output of <Input> ", 22);
    kaldi::nnet1::MomentStatistics<float>(**((void **)this + 9));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
    uint64_t v9 = std::locale::use_facet(&v31, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(&v31);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 48;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"[", 1);
        uint64_t v12 = v10 + 1;
        uint64_t v13 = (void *)std::ostream::operator<<();
        uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"] output of ", 12);
        uint64_t v15 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(*(void *)this + 8 * v10)
                                                                           + 24))(*(void *)(*(void *)this + 8 * v10));
        kaldi::nnet1::Component::TypeToMarker(v15, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v16 = &__p;
        }
        else {
          uint64_t v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
        }
        std::locale v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
        kaldi::nnet1::MomentStatistics<float>(**((void **)this + 9) + v11);
        if ((v33 & 0x80u) == 0) {
          locale = &v31;
        }
        else {
          locale = v31.__locale_;
        }
        if ((v33 & 0x80u) == 0) {
          uint64_t v20 = v33;
        }
        else {
          uint64_t v20 = v32;
        }
        unsigned __int8 v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)locale, v20);
        std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
        std::string v22 = std::locale::use_facet(&v37, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(&v37);
        std::ostream::put();
        std::ostream::flush();
        if ((char)v33 < 0) {
          operator delete(v31.__locale_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((*(unsigned int (**)(void))(**(void **)(*(void *)this + 8 * v10) + 24))(*(void *)(*(void *)this + 8 * v10)) == 2055)
        {
          uint64_t v23 = *(void **)(*(void *)this + 8 * v10);
          if (v23) {
          (*(void (**)(std::string *__return_ptr))(*(void *)v23 + 248))(&__p);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v24 = &__p;
          }
          else {
            char v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v24, v25);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if ((*(unsigned int (**)(void))(**(void **)(*(void *)this + 8 * v10) + 24))(*(void *)(*(void *)this + 8 * v10)) == 274)
        {
          uint64_t v26 = *(void **)(*(void *)this + 8 * v10);
          if (v26) {
          (*(void (**)(std::string *__return_ptr))(*(void *)v26 + 280))(&__p);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v27 = &__p;
          }
          else {
            uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v27, v28);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        v11 += 48;
        ++v10;
      }
      while (v12 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
    }
    std::stringbuf::str();
    if (v36 < 0) {
      operator delete((void *)v35[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)std::ios::~ios();
  }
}

void sub_185E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

void *kaldi::nnet1::Nnet::InfoBackPropagate@<X0>(kaldi::nnet1::Nnet *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 15);
  if (*((uint64_t **)this + 16) == v2
    || (uint64_t v3 = *v2, *(void *)(*((void *)this + 15) + 8) == v3)
    || !(4 * *(_DWORD *)(v3 + 20) * *(_DWORD *)(v3 + 24)))
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "### Backward propagation buffers not initialized");
  }
  else
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"### Backward propagation buffer content, Note in multi subbatch case, only the first subbatch is reported :\n", 108);
    if (*(void *)(*((void *)this + 15) + 8) != **((void **)this + 15))
    {
      uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"[0] diff of <Input> ", 20);
      kaldi::nnet1::MomentStatistics<float>(**((void **)this + 15));
      uint64_t v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      uint64_t v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(__p.__r_.__value_.__r.__words[2])
         : __p.__r_.__value_.__l.__size_;
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
      uint64_t v9 = std::locale::use_facet(&v32, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale(&v32);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if ((int)((*((void *)this + 1) - *(void *)this) >> 3) >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"[", 1);
        uint64_t v12 = v11 + 1;
        uint64_t v13 = (void *)std::ostream::operator<<();
        uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"] diff-output of ", 17);
        uint64_t v15 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(*(void *)this + 8 * v11)
                                                                           + 24))(*(void *)(*(void *)this + 8 * v11));
        kaldi::nnet1::Component::TypeToMarker(v15, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v11 < (((*((void *)this + 1) - *(void *)this) << 29) - 0x100000000) >> 32)
        {
          kaldi::nnet1::MomentStatistics<float>(**((void **)this + 15) + v10);
          std::locale v18 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          uint64_t v19 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? HIBYTE(__p.__r_.__value_.__r.__words[2])
              : __p.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v18, v19);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(v30[0] - 24)));
        uint64_t v20 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
        if ((*(unsigned int (**)(void))(**(void **)(*(void *)this + 8 * v11) + 24))(*(void *)(*(void *)this + 8 * v11)) == 2055)
        {
          unsigned __int8 v21 = *(void **)(*(void *)this + 8 * v11);
          if (v21) {
          (*(void (**)(std::string *__return_ptr))(*(void *)v21 + 256))(&__p);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v22 = &__p;
          }
          else {
            std::string v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v22, v23);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if ((*(unsigned int (**)(void))(**(void **)(*(void *)this + 8 * v11) + 24))(*(void *)(*(void *)this + 8 * v11)) == 274)
        {
          char v24 = *(void **)(*(void *)this + 8 * v11);
          if (v24) {
          (*(void (**)(std::string *__return_ptr))(*(void *)v24 + 288))(&__p);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v25 = &__p;
          }
          else {
            std::string::size_type v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v26 = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v25, v26);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        v10 += 48;
        ++v11;
      }
      while (v12 < (int)((*((void *)this + 1) - *(void *)this) >> 3));
    }
    std::stringbuf::str();
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)std::ios::~ios();
  }
}

void sub_1864DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

uint64_t kaldi::nnet1::Nnet::IsRnn(kaldi::nnet1::Nnet *this)
{
  return *((unsigned __int8 *)this + 152);
}

void kaldi::nnet1::Nnet::CheckWeights(kaldi::nnet1::Nnet *this)
{
  uint64_t v1 = *(void *)this;
  if (*((void *)this + 1) - *(void *)this >= 9uLL)
  {
    uint64_t v3 = 0;
    do
    {
      if ((*(unsigned int (**)(void))(**(void **)(v1 + 8 * v3) + 32))(*(void *)(v1 + 8 * v3))) {
        kaldi::nnet1::UpdatableComponent::CheckParams(*(kaldi::nnet1::UpdatableComponent **)(*(void *)this + 8 * v3));
      }
      uint64_t v1 = *(void *)this;
      unint64_t v4 = v3 + 2;
      ++v3;
    }
    while (v4 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  }
}

float kaldi::nnet1::UpdatableComponent::CheckParams(kaldi::nnet1::UpdatableComponent *this)
{
  float result = (*(float (**)(kaldi::nnet1::UpdatableComponent *))(*(void *)this + 208))(this);
  if (fabsf(result) == INFINITY)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "CheckParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-component.h", 427);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "'inf' in component parameters (weight explosion, try lower learning rate?)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void kaldi::nnet1::Nnet::ResetRecurrentFlag(kaldi::nnet1::Nnet *this)
{
  uint64_t v1 = (char **)((char *)this + 24);
  uint64_t v3 = (char **)((char *)this + 48);
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 4) = *((void *)this + 3);
  *((void *)this + 7) = v2;
  *((_WORD *)this + 76) = 0;
  uint64_t v4 = *(void *)this;
  if (*((void *)this + 1) != *(void *)this)
  {
    unint64_t v6 = 0;
    long long v42 = (char *)this + 64;
    long long v43 = (char *)this + 40;
    while (1)
    {
      uint64_t v7 = *(const void **)(v4 + 8 * v6);
      if (!v7) {
        goto LABEL_38;
      }
      if (!v8) {
        break;
      }
      uint64_t v9 = v8;
      kaldi::nnet1::ParallelComponent::GetHistoricalComponents(v8, &v46);
      std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)v3, *((void *)this + 7), (char *)v46, v47, (v47 - (unsigned char *)v46) >> 3);
      if (*((unsigned char *)this + 153))
      {
        BOOL v10 = 1;
      }
      else
      {
        uint64_t v16 = *((void *)v9 + 23);
        uint64_t v17 = *((void *)v9 + 24);
        if (v16 == v17)
        {
          BOOL v10 = 0;
        }
        else
        {
          BOOL v10 = 0;
          do
          {
            BOOL v10 = v10 || *(unsigned char *)(v16 + 153) != 0;
            v16 += 376;
          }
          while (v16 != v17);
        }
      }
      *((unsigned char *)this + 153) = v10;
      kaldi::nnet1::ParallelComponent::GetRecurrentComponents(v9, &__p);
      std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)v1, *((void *)this + 4), (char *)__p, v45, (v45 - (unsigned char *)__p) >> 3);
      if (__p)
      {
        uint64_t v45 = (char *)__p;
        operator delete(__p);
      }
      if (v46)
      {
        uint64_t v47 = (char *)v46;
        operator delete(v46);
      }
LABEL_59:
      ++v6;
      uint64_t v4 = *(void *)this;
      if (v6 >= (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3)
      {
        if (*((void *)this + 3) != *((void *)this + 4)) {
          *((unsigned char *)this + 152) = 1;
        }
        return;
      }
    }
    if (v11)
    {
      uint64_t v12 = v11;
      if ((*(int (**)(void *))(*(void *)v11 + 16))(v11) >= 1)
      {
        uint64_t v14 = (void *)*((void *)this + 7);
        unint64_t v13 = *((void *)this + 8);
        if ((unint64_t)v14 >= v13)
        {
          uint64_t v18 = ((char *)v14 - *v3) >> 3;
          if ((unint64_t)(v18 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v13 - (void)*v3;
          uint64_t v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
            uint64_t v20 = v18 + 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21) {
            std::string v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v42, v21);
          }
          else {
            std::string v22 = 0;
          }
          std::string::size_type v23 = &v22[8 * v18];
          *(void *)std::string::size_type v23 = v12;
          uint64_t v15 = v23 + 8;
          std::string::size_type v25 = (char *)*((void *)this + 6);
          char v24 = (char *)*((void *)this + 7);
          if (v24 != v25)
          {
            do
            {
              uint64_t v26 = *((void *)v24 - 1);
              v24 -= 8;
              *((void *)v23 - 1) = v26;
              v23 -= 8;
            }
            while (v24 != v25);
            char v24 = *v3;
          }
          *((void *)this + 6) = v23;
          *((void *)this + 7) = v15;
          *((void *)this + 8) = &v22[8 * v21];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *uint64_t v14 = v12;
          uint64_t v15 = v14 + 1;
        }
        *((void *)this + 7) = v15;
      }
    }
LABEL_38:
    uint64_t v27 = *(const void **)(*(void *)this + 8 * v6);
    if (v27)
    {
      if (v28)
      {
        uint64_t v29 = v28;
        if ((*(int (**)(void *))(*(void *)v28 + 16))(v28) >= 1)
        {
          char v31 = (void *)*((void *)this + 4);
          unint64_t v30 = *((void *)this + 5);
          if ((unint64_t)v31 >= v30)
          {
            uint64_t v33 = ((char *)v31 - *v1) >> 3;
            if ((unint64_t)(v33 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v34 = v30 - (void)*v1;
            uint64_t v35 = v34 >> 2;
            if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
              uint64_t v35 = v33 + 1;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v35;
            }
            if (v36) {
              std::locale v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v43, v36);
            }
            else {
              std::locale v37 = 0;
            }
            uint64_t v38 = &v37[8 * v33];
            *(void *)uint64_t v38 = v29;
            std::locale v32 = v38 + 8;
            uint64_t v40 = (char *)*((void *)this + 3);
            unsigned int v39 = (char *)*((void *)this + 4);
            if (v39 != v40)
            {
              do
              {
                uint64_t v41 = *((void *)v39 - 1);
                v39 -= 8;
                *((void *)v38 - 1) = v41;
                v38 -= 8;
              }
              while (v39 != v40);
              unsigned int v39 = *v1;
            }
            *((void *)this + 3) = v38;
            *((void *)this + 4) = v32;
            *((void *)this + 5) = &v37[8 * v36];
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            void *v31 = v29;
            std::locale v32 = v31 + 1;
          }
          *((void *)this + 4) = v32;
          {
            *((unsigned char *)this + 153) = 1;
          }
        }
      }
    }
    goto LABEL_59;
  }
}

void sub_186AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ParallelComponent::GetHistoricalComponents(kaldi::nnet1::ParallelComponent *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *((void *)this + 23);
  for (uint64_t i = *((void *)this + 24); v2 != i; v2 += 376)
  {
    std::string __p = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&__p, *(const void **)(v2 + 48), *(void *)(v2 + 56), (uint64_t)(*(void *)(v2 + 56) - *(void *)(v2 + 48)) >> 3);
    std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)a2, a2[1], (char *)__p, v6, (v6 - (unsigned char *)__p) >> 3);
    if (__p)
    {
      unint64_t v6 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_186BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ParallelComponent::GetRecurrentComponents(kaldi::nnet1::ParallelComponent *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *((void *)this + 23);
  for (uint64_t i = *((void *)this + 24); v2 != i; v2 += 376)
  {
    std::string __p = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&__p, *(const void **)(v2 + 24), *(void *)(v2 + 32), (uint64_t)(*(void *)(v2 + 32) - *(void *)(v2 + 24)) >> 3);
    std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)a2, a2[1], (char *)__p, v6, (v6 - (unsigned char *)__p) >> 3);
    if (__p)
    {
      unint64_t v6 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_186C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::nnet1::Nnet::ValidateNnet(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::Nnet::CheckDimensions((uint64_t *)this, a2, a3, a4, a5);
  kaldi::nnet1::Nnet::CheckWeights(this);

  return kaldi::nnet1::Nnet::CheckInternalBuffers(this, v6, v7, v8, v9);
}

void kaldi::nnet1::Nnet::SetHistoryOptions(kaldi::nnet1::Nnet *this, const kaldi::nnet1::HistoryOptions *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)*((void *)this + 6);
  uint64_t v7 = (uint64_t *)*((void *)this + 7);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, const kaldi::nnet1::HistoryOptions *))(*(void *)v8 + 80))(v8, a2);
  }
  if (v9)
  {
    long long v12 = *(_OWORD *)(v9 + 8);
    *(_OWORD *)&v15[15] = *(_OWORD *)(v9 + 23);
    *(_OWORD *)uint64_t v15 = v12;
    uint64_t v14 = off_26E7F8;
    uint64_t v16 = off_26E818;
    int v13 = *((_DWORD *)v9 + 13);
    int v17 = *((_DWORD *)a2 + 2);
    int v18 = v13;
    kaldi::nnet1::Nnet::SetTrainOptions(this, (const kaldi::nnet1::NnetTrainOptions *)&v14, a3, v10, v11);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14, "SetHistoryOptions", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1509);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Inconsistent return type: RecurrentBaseComponent::GetTrainOptions() can not be cast to RecurrentNnetTrainOptions", 112);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
  }
}

void sub_186E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *kaldi::nnet1::operator<<(void *a1, uint64_t a2)
{
  uint64_t v3 = kaldi::nnet1::operator<<(a1, a2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", and Recurrent style components have additional configurations ", 64);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"num_sequences ", 14);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"bptt_steps ", 11);
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  return a1;
}

{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;

  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"NnetTrainOptions : ", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"learn_rate ", 11);
  uint64_t v5 = (void *)std::ostream::operator<<();
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"momentum ", 9);
  uint64_t v7 = (void *)std::ostream::operator<<();
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"l2_penalty ", 11);
  uint64_t v9 = (void *)std::ostream::operator<<();
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"l1_penalty ", 11);
  uint64_t v11 = (void *)std::ostream::operator<<();
  long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"qtype_compact_grad ", 19);
  int v13 = (void *)std::ostream::operator<<();
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"step_compact_grad ", 18);
  uint64_t v15 = (void *)std::ostream::operator<<();
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"num_subbatches ", 15);
  int v17 = (void *)std::ostream::operator<<();
  int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"average_gradients ", 18);
  if (*(unsigned char *)(a2 + 36)) {
    uint64_t v20 = "true";
  }
  else {
    uint64_t v20 = "false";
  }
  if (*(unsigned char *)(a2 + 36)) {
    unint64_t v21 = 4;
  }
  else {
    unint64_t v21 = 5;
  }
  std::string v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  std::string::size_type v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
  char v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"vectorize_weights ", 18);
  if (*(unsigned char *)(a2 + 37)) {
    std::string::size_type v25 = "true";
  }
  else {
    std::string::size_type v25 = "false";
  }
  if (*(unsigned char *)(a2 + 37)) {
    uint64_t v26 = 4;
  }
  else {
    uint64_t v26 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
  return a1;
}

char *std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    int v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v9, v17);
    }
    else {
      int v18 = 0;
    }
    std::string::size_type v28 = &v18[8 * v15];
    std::string __p = v18;
    uint64_t v34 = v28;
    unint64_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    unint64_t v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)std::string::size_type v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    uint64_t v35 = v30;
    uint64_t v5 = std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    unint64_t v21 = &__src[8 * a5];
    std::string::size_type v23 = *(char **)(v9 - 8);
LABEL_17:
    char v24 = &v5[8 * a5];
    std::string::size_type v25 = &v23[-8 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)uint64_t v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  unint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  std::string::size_type v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1872B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  int v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *std::vector<kaldi::CuMatrix<float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuMatrix<float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 48 * a2;
    uint64_t v6 = 48 * a2;
    uint64_t v7 = v4;
    do
    {
      *(_OWORD *)(v7 + 24) = 0uLL;
      *(_OWORD *)(v7 + 8) = 0uLL;
      *(void *)uint64_t v7 = off_262DC8;
      *(unsigned char *)(v7 + 40) = 0;
      v7 += 48;
      v4 += 48;
      v6 -= 48;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_187450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Vector<float>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<std::pair<int,int>>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_187568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<int,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::PdfPrior::PdfPrior(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 24);
  unint64_t v4 = (_DWORD *)(a1 + 8);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = off_262E60;
  *(void *)(a1 + 16) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8)) {
      return a1;
    }
  }
  else if (!*(unsigned char *)(a2 + 23))
  {
    return a1;
  }
  int v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v49, "PdfPrior", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-pdf-prior.cc", 53);
    unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Computing pdf-priors from : ", 28);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v49);
  }
  v49[0] = 0;
  kaldi::Input::OpenInternal(v49, a2, 0, 0);
  unint64_t v9 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v49);
  kaldi::Vector<double>::Read((uint64_t)&v50, v9, 0, 0, v10);
  kaldi::Input::Close((kaldi::Input *)v49);
  kaldi::Input::~Input((kaldi::Input *)v49);
  uint64_t v11 = v51;
  unint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  kaldi::Vector<float>::Resize((void **)&v46, v51, 0, v12, v13);
  if ((int)v11 >= 1)
  {
    unint64_t v15 = 0;
    int v16 = 0;
    uint64_t v17 = v51;
    int v18 = v50;
    unint64_t v19 = v47;
    uint64_t v20 = v46;
    do
    {
      if (v17 == v15) {
LABEL_30:
      }
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", stru_68.sectname, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v14);
      double v21 = *(float *)(a2 + 28);
      if (v18[v15] < v21)
      {
        v18[v15] = v21;
        if (v15 >= v19) {
          goto LABEL_30;
        }
        v20[v15] = 2130706431;
        ++v16;
      }
      ++v15;
    }
    while (v11 != v15);
    if (v16 >= 1 && kaldi::g_kaldi_verbose_level > -2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49, "PdfPrior", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-pdf-prior.cc", 73);
      int64_t v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" out of ", 8);
      std::string::size_type v23 = (void *)std::ostream::operator<<();
      char v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" classes have counts", 20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" lower than ", 12);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    }
  }
  double v25 = kaldi::VectorBase<double>::Sum((uint64_t)&v50);
  kaldi::VectorBase<double>::Scale((uint64_t)&v50, 1.0 / v25);
  kaldi::VectorBase<double>::ApplyLog((uint64_t)&v50);
  if ((int)v11 >= 1)
  {
    uint64_t v26 = "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)";
    std::string::size_type v28 = "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h";
    uint64_t v29 = "operator()";
    unint64_t v30 = v50;
    uint64_t v31 = v11;
    uint64_t v32 = v51;
    while (v32)
    {
      if (*v30 == -INFINITY)
      {
        uint64_t v45 = (char *)&stru_20.filesize + 1;
        uint64_t v29 = "PdfPrior";
        std::string::size_type v28 = "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src"
              "/nnet/nnet-pdf-prior.cc";
        uint64_t v26 = "tmp_priors(i) != kLogZeroDouble";
LABEL_33:
        kaldi::KaldiAssertFailure_((kaldi *)v29, v28, v45, v26, v27);
      }
      --v32;
      ++v30;
      if (!--v31) {
        goto LABEL_28;
      }
    }
    uint64_t v45 = (unsigned char *)&stru_68;
    goto LABEL_33;
  }
LABEL_28:
  memset(v49, 0, 24);
  kaldi::Vector<float>::Resize(v49, v51, 1, (uint64_t)v26, v27);
  kaldi::VectorBase<float>::CopyFromVec<double>((uint64_t)v49, (uint64_t)&v50, v33, v34, v35);
  kaldi::VectorBase<float>::AddVec<float>((uint64_t)v49, (uint64_t)&v46, 1.0, v36, v37, v38);
  kaldi::CuVector<float>::Resize((uint64_t)v4, v11, 1u, v39, v40);
  kaldi::CuVectorBase<float>::CopyFromVec<float>(v4, (uint64_t)v49, v41, v42, v43);
  kaldi::Vector<float>::Destroy((uint64_t)v49);
  kaldi::Vector<float>::Destroy((uint64_t)&v46);
  kaldi::Vector<float>::Destroy((uint64_t)&v50);
  return a1;
}

void sub_1878F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Vector<float>::Destroy((uint64_t)&a9);
  kaldi::Vector<float>::Destroy(v10 - 88);
  kaldi::CuVector<float>::~CuVector(v9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::PdfPrior::SubtractOnLogpost(uint64_t a1, kaldi::ContextDependency *this)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if (!v2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16, "SubtractOnLogpost", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-pdf-prior.cc", 111);
    int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"--class-frame-counts is empty: Cannot initialize priors ", 56);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "without the counts.");
    goto LABEL_5;
  }
  if (v2 != kaldi::ContextDependency::ContextWidth(this))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16, "SubtractOnLogpost", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-pdf-prior.cc", 115);
    unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Dimensionality mismatch,", 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" class_frame_counts ", 20);
    unint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" pdf_output_llk ", 16);
    kaldi::ContextDependency::ContextWidth(this);
    std::ostream::operator<<();
LABEL_5:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  memset(v16, 0, 24);
  kaldi::Vector<float>::Resize(v16, *(unsigned int *)(a1 + 24), 1, v5, v6);
  kaldi::CuVectorBase<float>::CopyToVec<float>((_DWORD *)(a1 + 8), (uint64_t)v16, v7, v8, v9);
  kaldi::MatrixBase<float>::AddVecToRows<float>((uint64_t *)this, (uint64_t *)v16, -*(float *)a1, v10, v11, v12);
  kaldi::Vector<float>::Destroy((uint64_t)v16);
}

void sub_187AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_187AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  int v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  float result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_187C2C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *kaldi::nnet1::NormalizeComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, a2, 111, a4, a5);
  uint64_t v7 = *(unsigned int *)(a2 + 20);
  v15[2] = 0;
  uint64_t v16 = 0;
  v15[0] = off_262E60;
  v15[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v15, v7, 0, v8, v9);
  uint64_t v16 = *(void *)(a3 + 32);
  float v10 = 1.0 / (double)*(int *)(a2 + 16);
  kaldi::CuVectorBase<float>::AddDiagMat2((uint64_t)v15, a2, 111, v10, 0.0);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v15, 1.3553e-20);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v15, -0.5);
  kaldi::CuMatrixBase<float>::MulRowsVec(a3, (uint64_t)v15, v11, v12, v13);
  return kaldi::CuVector<float>::~CuVector(v15);
}

void sub_187D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *kaldi::nnet1::NormalizeComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(unsigned int *)(a2 + 20);
  void v23[2] = 0;
  uint64_t v24 = 0;
  v23[0] = off_262E60;
  v23[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v23, v8, 0, a4, (const char *)a5);
  uint64_t v24 = *(void *)(a5 + 32);
  uint64_t v9 = v24;
  float v10 = 1.0 / (double)*(int *)(a2 + 16);
  kaldi::CuVectorBase<float>::AddDiagMat2((uint64_t)v23, a2, 111, v10, 0.0);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v23, 1.3553e-20);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v23, -0.5);
  kaldi::CuMatrixBase<float>::AddDiagVecMat(a5, (uint64_t)v23, a4, 111, v11, 1.0, 0.0);
  kaldi::CuVectorBase<float>::ReplaceValue((uint64_t)v23, 8589900000.0, 0.0);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v23, 3.0);
  uint64_t v12 = *(unsigned int *)(a5 + 20);
  v21[2] = 0;
  uint64_t v22 = 0;
  v21[0] = off_262E60;
  v21[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v21, v12, 0, v13, v14);
  uint64_t v22 = v9;
  kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)v21, a4, 111, a2, 112, 1.0, 0.0);
  kaldi::CuVectorBase<float>::MulElements((uint64_t)v21, (uint64_t)v23, v15, v16, v17);
  float v18 = -1.0 / (double)*(int *)(a2 + 16);
  kaldi::CuMatrixBase<float>::AddDiagVecMat(a5, (uint64_t)v21, a2, 111, v19, v18, 1.0);
  kaldi::CuVector<float>::~CuVector(v21);
  return kaldi::CuVector<float>::~CuVector(v23);
}

void sub_187F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::NormalizeComponent::~NormalizeComponent(kaldi::nnet1::NormalizeComponent *this)
{
  kaldi::nnet1::Component::~Component(this);

  operator delete();
}

void kaldi::nnet1::NormalizeComponent::Copy(kaldi::nnet1::NormalizeComponent *this)
{
}

uint64_t kaldi::nnet1::NormalizeComponent::GetType(kaldi::nnet1::NormalizeComponent *this)
{
  return 1034;
}

double kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WordMultiVecComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = off_26E7B8;
  *(_OWORD *)(a1 + 56) = xmmword_20CEC0;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_26E910;
  *(void *)(a1 + 88) = off_26EA40;
  *(_DWORD *)(a1 + 96) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = off_262DC8;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 400) = off_262DC8;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(unsigned char *)(a1 + 460) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 529) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WordMultiVecComponent(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = off_26E7B8;
  *(_OWORD *)(a1 + 56) = xmmword_20CEC0;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_26E910;
  *(void *)(a1 + 88) = off_26EA40;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 152), *(const void **)(a2 + 152), *(void *)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  int v4 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 200) = v4;
  uint64_t v5 = (char **)(a1 + 256);
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = off_262DC8;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 400) = off_262DC8;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  int v6 = *(unsigned __int8 *)(a2 + 460);
  *(unsigned char *)(a1 + 460) = v6;
  if (v6 && *(int *)(a1 + 96) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a2 + 256) + 8 * v7);
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
      uint64_t v10 = v9;
      uint64_t v12 = *(uint64_t **)(a1 + 264);
      unint64_t v11 = *(void *)(a1 + 272);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v5) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v5;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          float v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 272, v17);
        }
        else {
          float v18 = 0;
        }
        unint64_t v19 = (uint64_t *)&v18[8 * v14];
        uint64_t *v19 = v10;
        uint64_t v13 = v19 + 1;
        double v21 = *(char **)(a1 + 256);
        uint64_t v20 = *(char **)(a1 + 264);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--unint64_t v19 = v22;
          }
          while (v20 != v21);
          uint64_t v20 = *v5;
        }
        *(void *)(a1 + 256) = v19;
        *(void *)(a1 + 264) = v13;
        *(void *)(a1 + 272) = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v12 = v9;
        uint64_t v13 = v12 + 1;
      }
      *(void *)(a1 + 264) = v13;
      ++v7;
    }
    while (v7 < *(int *)(a1 + 96));
  }
  if (a1 != a2)
  {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 280, *(void *)(a2 + 280), *(void *)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 304, *(void *)(a2 + 304), *(void *)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 328, *(void *)(a2 + 328), *(void *)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 4));
  }
  kaldi::CuMatrix<float>::operator=(a1 + 352, a2 + 352);
  kaldi::CuMatrix<float>::operator=(a1 + 400, a2 + 400);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 208), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3);
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>();
  }
  if (*(void *)(a2 + 480) != *(void *)(a2 + 472)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
  }
  *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
  return a1;
}

void sub_1885F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, kaldi::nnet1::QuantizerResidualAggregator *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *a10;
  if (*a10)
  {
    *((void *)v20 + 20) = v22;
    operator delete(v22);
  }
  std::string::size_type v23 = *a11;
  if (*a11)
  {
    *((void *)v20 + 17) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *a12;
  if (*a12)
  {
    *((void *)v20 + 14) = v24;
    operator delete(v24);
  }
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a13);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v20);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>()
{
}

void sub_188754()
{
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((void *)a1);
  if (*(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "InitResidualAggregator", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 939);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208))
  {
    unint64_t v4 = 0;
    do
      kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(void *)(*(void *)(a1 + 232) + 8 * v4++));
    while (v4 < (uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3);
  }
}

void *kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>(void *result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (!result) {
    kaldi::KaldiAssertFailure_((kaldi *)"DeletePointers", "../subproject/libquasar/libkaldi/src/util/stl-utils.h", stru_B8.sectname, "v != NULL", a5);
  }
  uint64_t v5 = (void **)*result;
  int v6 = (void **)result[1];
  while (v5 != v6)
  {
    double result = *v5;
    if (*v5)
    {
      double result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      *uint64_t v5 = 0;
    }
    ++v5;
  }
  return result;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(void *)a1 = off_26E910;
  uint64_t v6 = a1 + 88;
  *(void *)(a1 + 88) = off_26EA40;
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256), a2, a3, a4, a5);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 472));
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 400);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 352);
  uint64_t v12 = (void **)(a1 + 328);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 304);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 280);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v7 = *(void **)(a1 + 256);
  if (v7)
  {
    *(void *)(a1 + 264) = v7;
    operator delete(v7);
  }
  uint64_t v12 = (void **)(a1 + 232);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 208);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v8 = *(void **)(a1 + 176);
  if (v8)
  {
    *(void *)(a1 + 184) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 152);
  if (v9)
  {
    *(void *)(a1 + 160) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 128);
  if (v10)
  {
    *(void *)(a1 + 136) = v10;
    operator delete(v10);
  }
  unint64_t v11 = *(void **)(a1 + 104);
  if (v11)
  {
    *(void *)(a1 + 112) = v11;
    operator delete(v11);
  }
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v6);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(a1, a2, a3, a4, a5);

  operator delete();
}

void non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(a1 - 88, a2, a3, a4, a5);

  operator delete();
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Copy()
{
}

void sub_188AB4()
{
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::CopyCompressed()
{
}

void sub_188B20()
{
}

void non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::CopyCompressed()
{
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v150 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)((char *)&def_5A5E8 + 2), &v149);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &v148);
  char v128 = 0;
  int v147 = -1;
  *(unsigned char *)(a1 + 460) = 1;
  memset(v146, 0, sizeof(v146));
  uint64_t v129 = (std::vector<int> *)(a1 + 176);
  uint64_t v130 = (std::vector<int> *)(a1 + 104);
  long long v131 = (std::vector<int> *)(a1 + 152);
  long long v132 = (int *)(a1 + 96);
  long long v133 = (int *)(a1 + 200);
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_193;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v146, v8, v9);
    if ((SHIBYTE(v146[2]) & 0x80000000) == 0) {
      break;
    }
    unint64_t v11 = (int *)v146[1];
    switch((unint64_t)v146[1])
    {
      case 9uLL:
        BOOL v10 = *(void *)v146[0] == 0x6461724778614D3CLL && *((unsigned char *)v146[0] + 8) == 62;
LABEL_12:
        uint64_t v7 = (float *)(a1 + 452);
        if (!v10) {
          goto LABEL_284;
        }
        goto LABEL_164;
      case 0xAuLL:
        if (*(void *)v146[0] != 0x6D65744978614D3CLL || *((_WORD *)v146[0] + 4) != 15987) {
          goto LABEL_284;
        }
LABEL_109:
        std::string __p = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p, v8, v9);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, (std::vector<int> *)(a1 + 128), v34);
        goto LABEL_179;
      case 0xBuLL:
        BOOL v31 = *(void *)v146[0] == 0x756F72476D754E3CLL && *(void *)((char *)v146[0] + 3) == 0x3E7370756F72476DLL;
        uint64_t v20 = (int *)(a1 + 96);
        if (!v31)
        {
          BOOL v21 = *(void *)v146[0] == 0x6C6261546D754E3CLL && *(void *)((char *)v146[0] + 3) == 0x3E73656C6261546DLL;
LABEL_96:
          uint64_t v20 = (int *)(a1 + 200);
          if (!v21) {
            goto LABEL_284;
          }
        }
        goto LABEL_177;
      case 0xCuLL:
        if (*(void *)v146[0] == 0x536D6F646E61523CLL && *((_DWORD *)v146[0] + 2) == 1046766949)
        {
LABEL_176:
          uint64_t v20 = &v147;
LABEL_177:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v20, v8, v9);
          goto LABEL_181;
        }
        if (*(void *)v146[0] != 0x69536261636F563CLL || *((_DWORD *)v146[0] + 2) != 1047750010) {
          goto LABEL_187;
        }
LABEL_157:
        std::string __p = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p, v8, v9);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v130, v46);
        goto LABEL_179;
      case 0xDuLL:
        if (*(void *)v146[0] != 0x74536D617261503CLL || *(void *)((char *)v146[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_284;
        }
LABEL_163:
        uint64_t v7 = (float *)&v150;
LABEL_164:
        kaldi::ReadBasicType<float>(a2, 0, v7, v8, v9);
        goto LABEL_181;
      case 0xFuLL:
        BOOL v32 = *(void *)v146[0] == 0x61526E7261654C3CLL && *(void *)((char *)v146[0] + 7) == 0x3E66656F43657461;
        uint64_t v7 = (float *)(a1 + 456);
        if (!v32) {
          goto LABEL_118;
        }
        goto LABEL_164;
      case 0x11uLL:
        if (*(void *)v146[0] == 0x69446465626D453CLL
          && *((void *)v146[0] + 1) == 0x736E6F69736E656DLL
          && *((unsigned char *)v146[0] + 16) == 62)
        {
LABEL_59:
          std::string __p = 0;
          uint64_t v142 = 0;
          uint64_t v143 = 0;
          kaldi::ReadToken(a2, 0, (uint64_t)&__p, v8, v9);
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v131, v24);
          goto LABEL_179;
        }
        if (v146[1] == (char *)&dword_C + 3)
        {
LABEL_118:
          if (*(void *)v146[0] == 0x656E67697373413CLL && *(void *)((char *)v146[0] + 7) == 0x3E656C6261546465)
          {
LABEL_178:
            std::string __p = 0;
            uint64_t v142 = 0;
            uint64_t v143 = 0;
            kaldi::ReadToken(a2, 0, (uint64_t)&__p, v8, v9);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v129, v50);
LABEL_179:
            if (SHIBYTE(v143) < 0) {
              operator delete(__p);
            }
            goto LABEL_181;
          }
LABEL_122:
          unint64_t v11 = (int *)v146[1];
        }
LABEL_123:
        if (v11 == &dword_14)
        {
          if (*(void *)v146[0] == 0x6C616974696E493CLL
            && *((void *)v146[0] + 1) == 0x6E6F436F54657A69
            && *((_DWORD *)v146[0] + 4) == 1047814499)
          {
LABEL_175:
            char v128 = 1;
            goto LABEL_181;
          }
          unint64_t v11 = (int *)v146[1];
        }
        if (v11 != (int *)((char *)&dword_C + 2)) {
          goto LABEL_186;
        }
        if (*(void *)v146[0] != 0x6E6172546573553CLL || *(void *)((char *)v146[0] + 6) != 0x3E6D726F66736E61)
        {
LABEL_185:
          unint64_t v11 = (int *)v146[1];
LABEL_186:
          if (v11 == &dword_C)
          {
LABEL_187:
            uint64_t v51 = (void **)v146[0];
            goto LABEL_188;
          }
LABEL_284:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 271);
          uint64_t v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
          if (SHIBYTE(v146[2]) >= 0) {
            unint64_t v123 = v146;
          }
          else {
            unint64_t v123 = (void **)v146[0];
          }
          if (SHIBYTE(v146[2]) >= 0) {
            uint64_t v124 = HIBYTE(v146[2]);
          }
          else {
            uint64_t v124 = (uint64_t)v146[1];
          }
          long long v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)v123, v124);
          long long v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)", a typo in config? ", 20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"(NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef|ParamStddev|RandomSeed|InitTransformType|GradientNormType|MaxGrad)", 132);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
LABEL_138:
        kaldi::ReadBasicType<BOOL>(a2, 0, (char *)(a1 + 460), v8, v9);
LABEL_181:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        break;
      case 0x12uLL:
        if (*(void *)v146[0] != 0x6E6569646172473CLL
          || *((void *)v146[0] + 1) != 0x7079546D726F4E74
          || *((_WORD *)v146[0] + 8) != 15973)
        {
          goto LABEL_284;
        }
LABEL_147:
        long long v43 = &v148;
        goto LABEL_174;
      case 0x13uLL:
        if (*(void *)v146[0] != 0x61725474696E493CLL
          || *((void *)v146[0] + 1) != 0x79546D726F66736ELL
          || *(void *)((char *)v146[0] + 11) != 0x3E657079546D726FLL)
        {
          goto LABEL_284;
        }
LABEL_173:
        long long v43 = &v149;
LABEL_174:
        kaldi::ReadToken(a2, 0, (uint64_t)v43, v8, v9);
        goto LABEL_181;
      default:
        goto LABEL_123;
    }
  }
  switch(HIBYTE(v146[2]))
  {
    case 9:
      BOOL v10 = v146[0] == (void *)0x6461724778614D3CLL && LOBYTE(v146[1]) == 62;
      goto LABEL_12;
    case 0xA:
      if (v146[0] != (void *)0x6D65744978614D3CLL || LOWORD(v146[1]) != 15987) {
        goto LABEL_284;
      }
      goto LABEL_109;
    case 0xB:
      BOOL v19 = v146[0] == (void *)0x756F72476D754E3CLL && *(void **)((char *)v146 + 3) == (void *)0x3E7370756F72476DLL;
      uint64_t v20 = (int *)(a1 + 96);
      if (v19) {
        goto LABEL_177;
      }
      BOOL v21 = v146[0] == (void *)0x6C6261546D754E3CLL && *(void **)((char *)v146 + 3) == (void *)0x3E73656C6261546DLL;
      goto LABEL_96;
    case 0xC:
      if (v146[0] == (void *)0x536D6F646E61523CLL && LODWORD(v146[1]) == 1046766949) {
        goto LABEL_176;
      }
      if (v146[0] != (void *)0x69536261636F563CLL || LODWORD(v146[1]) != 1047750010) {
        goto LABEL_184;
      }
      goto LABEL_157;
    case 0xD:
      if (v146[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v146 + 5) != (void *)0x3E7665646474536DLL) {
        goto LABEL_284;
      }
      goto LABEL_163;
    case 0xE:
      goto LABEL_84;
    case 0xF:
      BOOL v28 = v146[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v146 + 7) == (void *)0x3E66656F43657461;
      uint64_t v7 = (float *)(a1 + 456);
      if (v28) {
        goto LABEL_164;
      }
      if (v146[0] == (void *)0x656E67697373413CLL && *(void **)((char *)v146 + 7) == (void *)0x3E656C6261546465) {
        goto LABEL_178;
      }
      if ((HIBYTE(v146[2]) & 0x80) != 0) {
        goto LABEL_122;
      }
LABEL_83:
      if (HIBYTE(v146[2]) != 14) {
        goto LABEL_183;
      }
LABEL_84:
      if (v146[0] == (void *)0x6E6172546573553CLL && *(void **)((char *)v146 + 6) == (void *)0x3E6D726F66736E61) {
        goto LABEL_138;
      }
      if ((HIBYTE(v146[2]) & 0x80) != 0) {
        goto LABEL_185;
      }
LABEL_183:
      if (HIBYTE(v146[2]) != 12) {
        goto LABEL_284;
      }
LABEL_184:
      uint64_t v51 = v146;
      break;
    case 0x11:
      if (v146[0] != (void *)0x69446465626D453CLL || v146[1] != (void *)0x736E6F69736E656DLL || LOBYTE(v146[2]) != 62) {
        goto LABEL_284;
      }
      goto LABEL_59;
    case 0x12:
      if (v146[0] != (void *)0x6E6569646172473CLL
        || v146[1] != (void *)0x7079546D726F4E74
        || LOWORD(v146[2]) != 15973)
      {
        goto LABEL_284;
      }
      goto LABEL_147;
    case 0x13:
      if (v146[0] != (void *)0x61725474696E493CLL
        || v146[1] != (void *)0x79546D726F66736ELL
        || *(void **)((char *)&v146[1] + 3) != (void *)0x3E657079546D726FLL)
      {
        goto LABEL_284;
      }
      goto LABEL_173;
    case 0x14:
      if (v146[0] != (void *)0x6C616974696E493CLL
        || v146[1] != (void *)0x6E6F436F54657A69
        || LODWORD(v146[2]) != 1047814499)
      {
        goto LABEL_83;
      }
      goto LABEL_175;
    default:
      goto LABEL_284;
  }
LABEL_188:
  uint64_t v52 = *v51;
  uint64_t v53 = *((unsigned int *)v51 + 2);
  if (v52 != (void *)0x6E6F706D6F432F3CLL || v53 != 1047817829) {
    goto LABEL_284;
  }
LABEL_193:
  uint64_t v55 = (char **)(a1 + 256);
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256), v6, (uint64_t)v7, v8, v9);
  if (*(unsigned char *)(a1 + 460))
  {
    if (*v132 >= 1)
    {
      int v56 = 0;
      do
      {
        long long v134 = 0;
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        LODWORD(v138) = 0;
        LODWORD(v151[0]) = 0;
        kaldi::ExpectToken(a2, 0, (kaldi *)"<FeatureTransform>");
        kaldi::ReadToken(a2, 0, (uint64_t)&v134, v57, v58);
        uint64_t v59 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v134);
        kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v138, v60, v61);
        kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v151, v62, v63);
        kaldi::nnet1::Component::NewComponentOfType(v59);
        if (!v64
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 293);
          unint64_t v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"require an updatable component, you used ", 41);
          if (v136 >= 0) {
            unint64_t v120 = &v134;
          }
          else {
            unint64_t v120 = v134;
          }
          if (v136 >= 0) {
            uint64_t v121 = HIBYTE(v136);
          }
          else {
            uint64_t v121 = v135;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)v120, v121);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        long long v66 = v65;
        (*(void (**)(void *, uint64_t *, kaldi::UniformRandomNumber *))(*(void *)v65 + 96))(v65, a2, a3);
        long long v68 = *(void **)(a1 + 264);
        unint64_t v67 = *(void *)(a1 + 272);
        if ((unint64_t)v68 >= v67)
        {
          uint64_t v70 = ((char *)v68 - *v55) >> 3;
          if ((unint64_t)(v70 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v71 = v67 - (void)*v55;
          uint64_t v72 = v71 >> 2;
          if (v71 >> 2 <= (unint64_t)(v70 + 1)) {
            uint64_t v72 = v70 + 1;
          }
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v73 = v72;
          }
          if (v73) {
            long long v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 272, v73);
          }
          else {
            long long v74 = 0;
          }
          long long v75 = &v74[8 * v70];
          *(void *)long long v75 = v66;
          long long v69 = v75 + 8;
          long long v77 = *(char **)(a1 + 256);
          uint64_t v76 = *(char **)(a1 + 264);
          if (v76 != v77)
          {
            do
            {
              uint64_t v78 = *((void *)v76 - 1);
              v76 -= 8;
              *((void *)v75 - 1) = v78;
              v75 -= 8;
            }
            while (v76 != v77);
            uint64_t v76 = *v55;
          }
          *(void *)(a1 + 256) = v75;
          *(void *)(a1 + 264) = v69;
          *(void *)(a1 + 272) = &v74[8 * v73];
          if (v76) {
            operator delete(v76);
          }
        }
        else
        {
          *long long v68 = v66;
          long long v69 = v68 + 1;
        }
        *(void *)(a1 + 264) = v69;
        if (SHIBYTE(v136) < 0) {
          operator delete(v134);
        }
        ++v56;
      }
      while (v56 < *v132);
    }
    if (v128)
    {
      uint64_t v79 = *(uint64_t **)(a1 + 256);
      int v80 = *(uint64_t **)(a1 + 264);
      if (v79 == v80)
      {
        if (!*(_DWORD *)(*v79 + 12))
        {
LABEL_232:
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 332);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"initialized the transform for concatenation", 43);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
          }
          goto LABEL_234;
        }
      }
      else
      {
        int v81 = 0;
        uint64_t v82 = *(uint64_t **)(a1 + 256);
        do
        {
          uint64_t v83 = *v82++;
          v81 += *(_DWORD *)(v83 + 8);
        }
        while (v82 != v80);
        if (v81 == *(_DWORD *)(*v79 + 12))
        {
          uint64_t v84 = 0;
          do
          {
            uint64_t v85 = (const void *)*v79;
            if (!*v79)
            {
LABEL_291:
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 326);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"cannot initialize to concatenation for this transform", 53);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
            }
            if (v86)
            {
              uint64_t v87 = v86;
              kaldi::Matrix<float>::Matrix((uint64_t)&__p, v86[3], v86[2], 0, 0);
              uint64_t v88 = v87[3];
              long long v138 = 0;
              v139 = 0;
              unint64_t v140 = 0;
              kaldi::Vector<float>::Resize((void **)&v138, v88, 0, v89, v90);
              kaldi::SubMatrix<float>::SubMatrix(&v134, &__p, v84, v87[2], 0, v142);
              kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v134, 1.0);
              fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v134);
              kaldi::nnet1::AffineTransform::SetLinearity((kaldi::nnet1::AffineTransform *)v87, (kaldi::ContextDependency *)&__p);
              kaldi::nnet1::AffineTransform::SetBias((kaldi::nnet1::AffineTransform *)v87, (uint64_t)&v138);
              unsigned int v91 = v87[2];
              kaldi::Vector<float>::Destroy((uint64_t)&v138);
            }
            else
            {
              if (!v92) {
                goto LABEL_291;
              }
              uint64_t v93 = (uint64_t)v92;
              kaldi::Matrix<float>::Matrix((uint64_t)&__p, v92[3], v92[2], 0, 0);
              kaldi::SubMatrix<float>::SubMatrix(&v134, &__p, v84, *(unsigned int *)(v93 + 8), 0, v142);
              kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v134, 1.0);
              fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v134);
              kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetLinearity(v93, (kaldi::ContextDependency *)&__p);
              unsigned int v91 = *(_DWORD *)(v93 + 8);
            }
            kaldi::Matrix<float>::~Matrix((uint64_t)&__p);
            uint64_t v84 = v91 + v84;
            ++v79;
          }
          while (v79 != v80);
          if (v84 != v81) {
            kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)&stru_108.flags + 3, "shift == total_dim", v94);
          }
          goto LABEL_232;
        }
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 304);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"dimension mismatch, cannot initialize to concatenation, expected dim is ", 72);
      int v127 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)" actual dim is ", 15);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
  }
LABEL_234:
  int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v149);
  *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v148);
  if (!inited)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 339);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"it doesn't make sense to initialize the embedding table as an identify matrix", 77);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  v139 = 0;
  unint64_t v140 = 0;
  long long v138 = &v139;
  if (*v132 < 1)
  {
    unint64_t v102 = 0;
  }
  else
  {
    uint64_t v97 = 0;
    do
    {
      LODWORD(v134) = 0;
      int v98 = v129->__begin_[v97];
      LODWORD(v134) = v98;
      if (v98 < 0 || v98 >= *v133) {
        kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", &stru_158.sectname[1], "table_idx >= 0 && table_idx < num_tables_", v96);
      }
      int v99 = v130->__begin_[v97];
      int v100 = v131->__begin_[v97];
      std::string __p = &v134;
      unint64_t v101 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v138, (int *)&v134, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
      *((_DWORD *)v101 + 8) = v99;
      *((_DWORD *)v101 + 9) = v100;
      ++v97;
    }
    while (v97 < *v132);
    unint64_t v102 = v140;
  }
  if (v102 != *v133) {
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", &stru_158.sectname[4], "table_dims.size() == num_tables_", v96);
  }
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 208), v102);
  if (v147 >= 1) {
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v147);
  }
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)&__p, a3);
  int v137 = 0;
  if (*v133 >= 1)
  {
    v151[0] = &v137;
    int v103 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v138, &v137, (uint64_t)&std::piecewise_construct, v151);
    uint64_t v104 = *((unsigned int *)v103 + 8);
    uint64_t v105 = *((unsigned int *)v103 + 9);
    kaldi::Matrix<float>::Matrix((uint64_t)&v134, v104, v105, 0, 0);
    if ((int)v104 < 1) {
LABEL_265:
    }
      kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::Matrix<float>>();
    unsigned int v109 = 0;
    while ((int)v105 < 1)
    {
LABEL_264:
      if (++v109 == v104) {
        goto LABEL_265;
      }
    }
    unint64_t v110 = 0;
    while (inited != 2)
    {
      if (inited == 1)
      {
        float v111 = *(float *)&v150;
        float v112 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v106, v107, v108);
        if (HIDWORD(v135) <= v109 || v110 >= v135) {
          goto LABEL_275;
        }
        uint64_t v114 = (char *)v134 + 4 * (int)(v109 * v136);
        float v115 = (v112 + -0.5) * (float)(v111 + v111);
LABEL_262:
        *(float *)&v114[4 * v110] = v115;
      }
      if (v105 == ++v110) {
        goto LABEL_264;
      }
    }
    float v116 = *(float *)&v150;
    kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)&__p, 0, v106, v107, v108);
    if (HIDWORD(v135) <= v109 || v110 >= v135) {
LABEL_275:
    }
      kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v108);
    uint64_t v114 = (char *)v134 + 4 * (int)(v109 * v136);
    float v115 = v116 * v117;
    goto LABEL_262;
  }
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  long long v134 = &v143;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::destroy((uint64_t)&v138, v139);
  if (SHIBYTE(v146[2]) < 0) {
    operator delete(v146[0]);
  }
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v148.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
}

void sub_189F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  a17 = &a28;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::destroy((uint64_t)&a23, a24);
  if (*(char *)(v32 - 177) < 0) {
    operator delete(*(void **)(v32 - 200));
  }
  if (*(char *)(v32 - 145) < 0) {
    operator delete(*(void **)(v32 - 168));
  }
  if (*(char *)(v32 - 121) < 0) {
    operator delete(*(void **)(v32 - 144));
  }
  _Unwind_Resume(a1);
}

void sub_189F40()
{
}

void sub_189F48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x189FA8);
}

void sub_189F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  JUMPOUT(0x189F78);
}

unsigned int *kaldi::nnet1::AffineTransform::SetLinearity(kaldi::nnet1::AffineTransform *a1, kaldi::ContextDependency *this)
{
  int v4 = kaldi::ContextDependency::CentralPosition(this);
  if (v4 != *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(a1) + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)&stru_248.addr + 2, "linearity.NumRows() == Linearity().NumRows()", v5);
  }
  int v6 = kaldi::ContextDependency::ContextWidth(this);
  if (v6 != *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(a1) + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)&stru_248.addr + 3, "linearity.NumCols() == Linearity().NumCols()", v7);
  }
  uint64_t v8 = kaldi::nnet1::AffineTransform::Linearity(a1);

  return kaldi::CuMatrixBase<float>::CopyFromMat(v8, (uint64_t)this, 111, v9, v10);
}

_DWORD *kaldi::nnet1::AffineTransform::SetBias(kaldi::nnet1::AffineTransform *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != *(_DWORD *)(kaldi::nnet1::AffineTransform::Bias(a1) + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetBias", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.segname[7], "bias.Dim() == Bias().Dim()", v5);
  }
  int v6 = (_DWORD *)kaldi::nnet1::AffineTransform::Bias(a1);

  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v6, a2, v7, v8, v9);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::Matrix<float>>()
{
}

void sub_18A1E0()
{
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(uint64_t result)
{
  if (!*(unsigned char *)(result + 544))
  {
    uint64_t v1 = *(unsigned int *)(result + 96);
    if ((int)v1 <= 0)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 503);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one group, you used ", 39);
      std::ostream::operator<<();
    }
    else
    {
      uint64_t v2 = *(unsigned int *)(result + 200);
      if ((int)v2 <= 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 506);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one embedding table, you used ", 49);
        std::ostream::operator<<();
      }
      else if (v1 < v2)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 509);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are only ", 15);
        BOOL v31 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" groups, but you set ", 21);
        uint64_t v32 = (void *)std::ostream::operator<<();
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v32, " embedding tables");
      }
      else
      {
        uint64_t v3 = *(void *)(result + 104);
        uint64_t v4 = (*(void *)(result + 112) - v3) >> 2;
        if (v4 == v1)
        {
          uint64_t v5 = *(void *)(result + 128);
          if (v4 == (*(void *)(result + 136) - v5) >> 2)
          {
            uint64_t v6 = *(void *)(result + 152);
            if (v4 == (*(void *)(result + 160) - v6) >> 2)
            {
              uint64_t v7 = *(void *)(result + 176);
              if (v4 == (*(void *)(result + 184) - v7) >> 2)
              {
                uint64_t v8 = *(void *)(result + 208);
                if (v2 == (*(void *)(result + 216) - v8) >> 3)
                {
                  if (*(unsigned char *)(result + 460)
                    && v4 != (uint64_t)(*(void *)(result + 264) - *(void *)(result + 256)) >> 3)
                  {
                    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 528);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                    uint64_t v40 = (void *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" groups, but the number of feature transforms is ", 49);
                    std::ostream::operator<<();
                  }
                  else
                  {
                    uint64_t v9 = 0;
                    int v10 = 0;
                    int v11 = 0;
                    do
                    {
                      uint64_t v12 = *(unsigned int *)(v7 + 4 * v9);
                      if ((v12 & 0x80000000) != 0 || (int)v12 >= (int)v2)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 537);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v22 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"-th group has assigned table index ", 35);
                        std::string::size_type v23 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" , the number of tables is ", 27);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      int v13 = *(_DWORD *)(v3 + 4 * v9);
                      if (v13 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 542);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        double v25 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"-th group has invalid vocab size ", 33);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      int v14 = *(_DWORD *)(v5 + 4 * v9);
                      if (v14 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 545);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v26 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"-th group has invalid max item value ", 37);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      int v15 = *(_DWORD *)(v6 + 4 * v9);
                      if (v15 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 548);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v24 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"-th group has invalid embedding dimension value ", 48);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      uint64_t v16 = *(void *)(v8 + 8 * v12);
                      if (*(_DWORD *)(v16 + 20) != v13)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 553);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v20 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"-th group has mismatched embedding table and vocab size ", 56);
                        BOOL v21 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      if (*(_DWORD *)(v16 + 16) != v15)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 557);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        float v18 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"-th group has mismatched embedding table and embedding dim ", 59);
                        BOOL v19 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      if (*(unsigned char *)(result + 460))
                      {
                        uint64_t v17 = *(void *)(*(void *)(result + 256) + 8 * v9);
                        if (v15 != *(_DWORD *)(v17 + 8))
                        {
                          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 561);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          uint64_t v29 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"-th group has mismatched embedding table and feature transform ", 63);
                          unint64_t v30 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" vs ", 4);
                          std::ostream::operator<<();
                          goto LABEL_35;
                        }
                        if (*(_DWORD *)(result + 12) != *(_DWORD *)(v17 + 12))
                        {
                          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 565);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          uint64_t v27 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"-th group has feature transform output dim ", 43);
                          BOOL v28 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" does not match component output dim ", 37);
                          std::ostream::operator<<();
                          goto LABEL_35;
                        }
                      }
                      v10 += v15;
                      v11 += v14;
                      ++v9;
                    }
                    while (v4 != v9);
                    if (*(_DWORD *)(result + 8) == v11)
                    {
                      if (*(unsigned char *)(result + 460) || v10 == *(_DWORD *)(result + 12))
                      {
                        *(unsigned char *)(result + 544) = 1;
                        return result;
                      }
                      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 575);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Total embedding size of ", 24);
                      uint64_t v41 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" doesn't match the component output size of ", 44);
                      uint64_t v42 = (void *)std::ostream::operator<<();
                      std::operator<<[abi:ne180100]<std::char_traits<char>>(v42, " when transforms are not used");
                    }
                    else
                    {
                      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 571);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"input dim of the component is ", 30);
                      uint64_t v39 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" , while the input dim defined in max items is ", 47);
                      std::ostream::operator<<();
                    }
                  }
                }
                else
                {
                  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 524);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the actual number of embedding tables is ", 41);
                  uint64_t v38 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" and different than ", 20);
                  std::ostream::operator<<();
                }
              }
              else
              {
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 521);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                uint64_t v36 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" groups, but ", 13);
                uint64_t v37 = (void *)std::ostream::operator<<();
                std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, " groups have assigned tables");
              }
            }
            else
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 518);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
              uint64_t v35 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" groups, but the embedding dim list size is ", 44);
              std::ostream::operator<<();
            }
          }
          else
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 515);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
            uint64_t v34 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" groups, but the max item list size is ", 39);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 512);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
          uint64_t v33 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" groups, but the number vocab list size is ", 43);
          std::ostream::operator<<();
        }
      }
    }
LABEL_35:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43);
  }
  return result;
}

void sub_18AB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  long long v82 = 0uLL;
  uint64_t v83 = 0;
  uint64_t v8 = (char *)(a1 + 460);
  *(unsigned char *)(a1 + 460) = 1;
  uint64_t v9 = (float *)(a1 + 452);
  long long v75 = (std::vector<int> *)(a1 + 176);
  uint64_t v76 = (float *)(a1 + 456);
  long long v74 = (std::vector<int> *)(a1 + 152);
  long long v77 = (std::vector<int> *)(a1 + 104);
  uint64_t v78 = (std::vector<int> *)(a1 + 128);
  int v10 = (int *)(a1 + 200);
  int v11 = (int *)(a1 + 96);
  while (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)&v82, v12, v13);
    if (SHIBYTE(v83) < 0)
    {
      uint64_t v20 = *((void *)&v82 + 1);
      if (*((void *)&v82 + 1) != 11) {
        goto LABEL_25;
      }
      BOOL v21 = *(void *)v82 == 0x756F72476D754E3CLL && *(void *)(v82 + 3) == 0x3E7370756F72476DLL;
      uint64_t v18 = (uint64_t)v11;
      if (v21
        || (*(void *)v82 == 0x6C6261546D754E3CLL ? (BOOL v22 = *(void *)(v82 + 3) == 0x3E73656C6261546DLL) : (BOOL v22 = 0),
            uint64_t v18 = (uint64_t)v10,
            v22))
      {
LABEL_75:
        kaldi::ReadBasicType<int>(a2, a3, v18, v14, v15);
      }
      else
      {
        uint64_t v20 = *((void *)&v82 + 1);
LABEL_25:
        if (v20 == 12)
        {
          if (*(void *)v82 == 0x69536261636F563CLL && *(_DWORD *)(v82 + 8) == 1047750010)
          {
LABEL_94:
            std::string __p = 0;
            uint64_t v80 = 0;
            uint64_t v81 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v77, v37);
            goto LABEL_137;
          }
          uint64_t v20 = *((void *)&v82 + 1);
        }
        if (v20 != 10) {
          goto LABEL_37;
        }
        if (*(void *)v82 == 0x6D65744978614D3CLL && *(_WORD *)(v82 + 8) == 15987)
        {
LABEL_93:
          std::string __p = 0;
          uint64_t v80 = 0;
          uint64_t v81 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v78, v36);
LABEL_137:
          if (SHIBYTE(v81) < 0) {
            operator delete(__p);
          }
        }
        else
        {
          uint64_t v20 = *((void *)&v82 + 1);
LABEL_37:
          if (v20 == 17)
          {
            if (*(void *)v82 == 0x69446465626D453CLL
              && *(void *)(v82 + 8) == 0x736E6F69736E656DLL
              && *(unsigned char *)(v82 + 16) == 62)
            {
LABEL_135:
              std::string __p = 0;
              uint64_t v80 = 0;
              uint64_t v81 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
              kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v74, v48);
              goto LABEL_137;
            }
            uint64_t v20 = *((void *)&v82 + 1);
          }
          if (v20 != 15) {
            goto LABEL_52;
          }
          if (*(void *)v82 == 0x656E67697373413CLL && *(void *)(v82 + 7) == 0x3E656C6261546465)
          {
LABEL_134:
            std::string __p = 0;
            uint64_t v80 = 0;
            uint64_t v81 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v75, v47);
            goto LABEL_137;
          }
          uint64_t v20 = *((void *)&v82 + 1);
LABEL_52:
          if (v20 != 18) {
            goto LABEL_61;
          }
          if (*(void *)v82 == 0x6E6569646172473CLL
            && *(void *)(v82 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v82 + 16) == 15973)
          {
LABEL_136:
            std::string __p = 0;
            uint64_t v80 = 0;
            uint64_t v81 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&__p);
            goto LABEL_137;
          }
          uint64_t v20 = *((void *)&v82 + 1);
LABEL_61:
          if (v20 == 9)
          {
            BOOL v30 = *(void *)v82 == 0x6461724778614D3CLL && *(unsigned char *)(v82 + 8) == 62;
            BOOL v31 = v9;
            if (v30) {
              goto LABEL_92;
            }
            uint64_t v20 = *((void *)&v82 + 1);
          }
          if (v20 == 15)
          {
            BOOL v32 = *(void *)v82 == 0x61526E7261654C3CLL && *(void *)(v82 + 7) == 0x3E66656F43657461;
            BOOL v31 = v76;
            if (v32) {
              goto LABEL_92;
            }
            uint64_t v20 = *((void *)&v82 + 1);
          }
          if (v20 != 14) {
            goto LABEL_167;
          }
          uint64_t v16 = (uint64_t *)v82;
LABEL_128:
          uint64_t v44 = *v16;
          uint64_t v45 = *(uint64_t *)((char *)v16 + 6);
          if (v44 != 0x6E6172546573553CLL || v45 != 0x3E6D726F66736E61) {
            goto LABEL_167;
          }
          kaldi::ReadBasicType<BOOL>(a2, a3, v8, v14, v15);
        }
      }
    }
    else
    {
      uint64_t v16 = (uint64_t *)&v82;
      switch(HIBYTE(v83))
      {
        case 9:
          goto LABEL_87;
        case 0xA:
          goto LABEL_82;
        case 0xB:
          BOOL v17 = (void)v82 == 0x756F72476D754E3CLL && *(void *)((char *)&v82 + 3) == 0x3E7370756F72476DLL;
          uint64_t v18 = (uint64_t)v11;
          if (!v17)
          {
            BOOL v19 = (void)v82 == 0x6C6261546D754E3CLL && *(void *)((char *)&v82 + 3) == 0x3E73656C6261546DLL;
            uint64_t v18 = (uint64_t)v10;
            if (!v19) {
              goto LABEL_80;
            }
          }
          goto LABEL_75;
        case 0xC:
          if ((void)v82 == 0x69536261636F563CLL && DWORD2(v82) == 1047750010) {
            goto LABEL_94;
          }
LABEL_80:
          if (HIBYTE(v83) == 9) {
            goto LABEL_87;
          }
          if (HIBYTE(v83) != 10) {
            goto LABEL_167;
          }
LABEL_82:
          if ((void)v82 == 0x6D65744978614D3CLL && WORD4(v82) == 15987) {
            goto LABEL_93;
          }
LABEL_86:
          if (HIBYTE(v83) == 9) {
            goto LABEL_87;
          }
          goto LABEL_167;
        case 0xE:
          goto LABEL_128;
        case 0xF:
          goto LABEL_115;
        case 0x11:
          if ((void)v82 == 0x69446465626D453CLL
            && *((void *)&v82 + 1) == 0x736E6F69736E656DLL
            && v83 == 62)
          {
            goto LABEL_135;
          }
          if (HIBYTE(v83) == 9) {
            goto LABEL_87;
          }
          if (HIBYTE(v83) == 14) {
            goto LABEL_127;
          }
          if (HIBYTE(v83) != 15) {
            goto LABEL_167;
          }
LABEL_115:
          if ((void)v82 == 0x656E67697373413CLL && *(void *)((char *)&v82 + 7) == 0x3E656C6261546465) {
            goto LABEL_134;
          }
          switch(HIBYTE(v83))
          {
            case 9u:
LABEL_87:
              BOOL v35 = (void)v82 == 0x6461724778614D3CLL && BYTE8(v82) == 62;
              BOOL v31 = v9;
              if (!v35) {
                goto LABEL_167;
              }
              break;
            case 0xEu:
LABEL_127:
              uint64_t v16 = (uint64_t *)&v82;
              goto LABEL_128;
            case 0xFu:
LABEL_122:
              BOOL v43 = (void)v82 == 0x61526E7261654C3CLL && *(void *)((char *)&v82 + 7) == 0x3E66656F43657461;
              BOOL v31 = v76;
              if (!v43)
              {
LABEL_167:
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 408);
                uint64_t v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
                if (v83 >= 0) {
                  uint64_t v71 = &v82;
                }
                else {
                  uint64_t v71 = (long long *)v82;
                }
                if (v83 >= 0) {
                  uint64_t v72 = HIBYTE(v83);
                }
                else {
                  uint64_t v72 = *((void *)&v82 + 1);
                }
                unint64_t v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)", a typo in config? (NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef)", 86);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
              }
              break;
            default:
              goto LABEL_167;
          }
          return;
        case 0x12:
          if ((void)v82 == 0x6E6569646172473CLL
            && *((void *)&v82 + 1) == 0x7079546D726F4E74
            && (unsigned __int16)v83 == 15973)
          {
            goto LABEL_136;
          }
          if (HIBYTE(v83) == 15) {
            goto LABEL_122;
          }
          if (HIBYTE(v83) == 14) {
            goto LABEL_127;
          }
          goto LABEL_86;
        default:
          goto LABEL_167;
      }
LABEL_92:
      kaldi::ReadBasicType<float>(a2, a3, v31, v14, v15);
    }
  }
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 208), *(int *)(a1 + 200));
  if (*v10 >= 1) {
    operator new();
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  uint64_t v49 = (char **)(a1 + 256);
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256), v50, v51, v52, v53);
  if (*v8 && *v11 >= 1)
  {
    int v54 = 0;
    do
    {
      kaldi::ExpectToken(a2, a3, (kaldi *)"<FeatureTransform>");
      uint64_t v55 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
      if (!v55
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 425);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"failed to read feature transform", 32);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      uint64_t v57 = v56;
      kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
      uint64_t v59 = *(void **)(a1 + 264);
      unint64_t v58 = *(void *)(a1 + 272);
      if ((unint64_t)v59 >= v58)
      {
        uint64_t v61 = ((char *)v59 - *v49) >> 3;
        if ((unint64_t)(v61 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v62 = v58 - (void)*v49;
        uint64_t v63 = v62 >> 2;
        if (v62 >> 2 <= (unint64_t)(v61 + 1)) {
          uint64_t v63 = v61 + 1;
        }
        if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64) {
          long long v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 272, v64);
        }
        else {
          long long v65 = 0;
        }
        long long v66 = &v65[8 * v61];
        *(void *)long long v66 = v57;
        uint64_t v60 = v66 + 8;
        long long v68 = *(char **)(a1 + 256);
        unint64_t v67 = *(char **)(a1 + 264);
        if (v67 != v68)
        {
          do
          {
            uint64_t v69 = *((void *)v67 - 1);
            v67 -= 8;
            *((void *)v66 - 1) = v69;
            v66 -= 8;
          }
          while (v67 != v68);
          unint64_t v67 = *v49;
        }
        *(void *)(a1 + 256) = v66;
        *(void *)(a1 + 264) = v60;
        *(void *)(a1 + 272) = &v65[8 * v64];
        if (v67) {
          operator delete(v67);
        }
      }
      else
      {
        *uint64_t v59 = v57;
        uint64_t v60 = v59 + 1;
      }
      *(void *)(a1 + 264) = v60;
      ++v54;
    }
    while (v54 < *(_DWORD *)(a1 + 96));
  }
  *(unsigned char *)(a1 + 16) = 0;
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  if (SHIBYTE(v83) < 0) {
    operator delete((void *)v82);
  }
}

void sub_18B680(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  v37[0] = 0;
  v37[1] = 0;
  uint64_t v38 = 0;
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumGroups>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumTables>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<VocabSizes>", v10, v11);
  kaldi::JoinVectorToString<int>((void *)(a1 + 104), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v12, v13);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxItems>", v14, v15);
  kaldi::JoinVectorToString<int>((void *)(a1 + 128), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v16, v17);
  kaldi::WriteToken(a2, a3, (kaldi *)"<EmbedDimensions>", v18, v19);
  kaldi::JoinVectorToString<int>((void *)(a1 + 152), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v20, v21);
  kaldi::WriteToken(a2, a3, (kaldi *)"<AssignedTable>", v22, v23);
  kaldi::JoinVectorToString<int>((void *)(a1 + 176), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v24, v25);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v26, v27);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v28, v29);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v30, v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v32, v33);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<UseTransform>", v34, v35);
  kaldi::WriteBasicType<BOOL>(a2, (char)a3, *(unsigned __int8 *)(a1 + 460));
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
}

void sub_18B8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::JoinVectorToString<int>(void *a1, const char *a2, uint64_t a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
  if (a1[1] != *a1)
  {
    unint64_t v6 = 0;
    do
    {
      std::ostream::operator<<();
      ++v6;
      uint64_t v7 = a1[1] - *a1;
      if (v6 < v7 >> 2)
      {
        size_t v8 = strlen(a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)a2, v8);
        uint64_t v7 = a1[1] - *a1;
      }
    }
    while (v6 < v7 >> 2);
  }
  std::stringbuf::str();
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(_OWORD *)a3 = v11;
  *(void *)(a3 + 16) = v12;
  *(void *)((char *)v13
  v14[0] = v9;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_18BB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  (*(void (**)(uint64_t, void *, const char *))(*(void *)a1 + 168))(a1, a2, a3);
  uint64_t v10 = *(uint64_t **)(a1 + 208);
  long long v11 = *(uint64_t **)(a1 + 216);
  while (v10 != v11)
  {
    uint64_t v12 = *v10++;
    kaldi::CuMatrixBase<float>::Write(v12, a2, (int)a3, a4);
  }
  double result = kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v8, v9);
  if (*(unsigned char *)(a1 + 460))
  {
    uint64_t v16 = *(uint64_t **)(a1 + 256);
    for (uint64_t i = *(uint64_t **)(a1 + 264); v16 != i; result = kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v19, v20))
    {
      kaldi::WriteToken(a2, a3, (kaldi *)"<FeatureTransform>", v14, v15);
      uint64_t v18 = *v16++;
      kaldi::nnet1::Component::Write(v18, a2, (uint64_t)a3, a4);
    }
  }
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::NumParams(void *a1)
{
  uint64_t v1 = (uint64_t *)a1[26];
  uint64_t v2 = (uint64_t *)a1[27];
  if (v1 == v2)
  {
    uint64_t v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    do
    {
      uint64_t v4 = *v1++;
      uint64_t v3 = (v3 + *(_DWORD *)(v4 + 16) * *(_DWORD *)(v4 + 20));
    }
    while (v1 != v2);
  }
  uint64_t v5 = (uint64_t *)a1[32];
  unint64_t v6 = (uint64_t *)a1[33];
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    uint64_t v3 = (*(unsigned int (**)(uint64_t))(*(void *)v7 + 176))(v7) + v3;
  }
  return v3;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetParams(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 1, v5, v6);
  uint64_t v10 = a1[26];
  uint64_t v11 = a1[27];
  if (v10 == v11)
  {
    int v15 = 0;
  }
  else
  {
    int v12 = 0;
    do
    {
      int v13 = *(_DWORD **)v10;
      int v14 = *(_DWORD *)(*(void *)v10 + 16) * *(_DWORD *)(*(void *)v10 + 20);
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      int v15 = v14 + v12;
      if ((v14 + v12) > *(_DWORD *)(a2 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
      }
      uint64_t v24 = *(void *)a2 + 4 * v12;
      LODWORD(v25) = v14;
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v24, v13, v7, v8, v9);
      v10 += 8;
      int v12 = v15;
    }
    while (v10 != v11);
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  BOOL v17 = (void *)a1[32];
  uint64_t v16 = (void *)a1[33];
  while (v17 != v16)
  {
    (*(void (**)(void, uint64_t *))(*(void *)*v17 + 184))(*v17, &v24);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v21 = 0;
    if ((v25 + v15) > *(_DWORD *)(a2 + 8)) {
      kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v20);
    }
    uint64_t v21 = *(void *)a2 + 4 * v15;
    LODWORD(v22) = v25;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v21, (uint64_t)&v24, v18, v19, v20);
    v15 += v25;
    ++v17;
  }
  if (v15 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)&stru_248.align + 2, "shift == wei_copy->Dim()", v9);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v24);
}

void sub_18BEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

int *kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SetParams(void *a1, uint64_t a2)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check((uint64_t)a1);
  int v4 = *(_DWORD *)(a2 + 8);
  double result = (int *)(*(uint64_t (**)(void *))(*a1 + 176))(a1);
  if (v4 != result) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)&stru_248.nreloc, "wei_src.Dim() == NumParams()", v6);
  }
  uint64_t v7 = (uint64_t *)a1[26];
  uint64_t v8 = (uint64_t *)a1[27];
  if (v7 != v8)
  {
    int v9 = 0;
    while (1)
    {
      uint64_t v10 = *v7;
      int v11 = *(_DWORD *)(*v7 + 16) * *(_DWORD *)(*v7 + 20);
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v12 = v11 + v9;
      if ((v11 + v9) > *(_DWORD *)(a2 + 8)) {
        break;
      }
      uint64_t v18 = (char *)(*(void *)a2 + 4 * v9);
      LODWORD(v19) = v11;
      double result = kaldi::CuMatrixBase<float>::CopyRowsFromVec(v10, &v18);
      ++v7;
      int v9 = v12;
      if (v7 == v8) {
        goto LABEL_8;
      }
    }
LABEL_15:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v6);
  }
  int v12 = 0;
LABEL_8:
  int v14 = (uint64_t *)a1[32];
  int v13 = (uint64_t *)a1[33];
  if (v14 != v13)
  {
    while (1)
    {
      int v15 = (*(uint64_t (**)(void))(*(void *)*v14 + 176))();
      uint64_t v16 = *v14;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v17 = v15 + v12;
      if ((v15 + v12) > *(_DWORD *)(a2 + 8)) {
        goto LABEL_15;
      }
      uint64_t v18 = (char *)(*(void *)a2 + 4 * v12);
      LODWORD(v19) = v15;
      double result = (int *)(*(uint64_t (**)(uint64_t, char **))(*(void *)v16 + 192))(v16, &v18);
      ++v14;
      int v12 = v17;
      if (v14 == v13) {
        goto LABEL_13;
      }
    }
  }
  int v17 = v12;
LABEL_13:
  if (v17 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)&stru_248.reserved2, "shift == wei_src.Dim()", v6);
  }
  return result;
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SumParams(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6 = (uint64_t *)a1[26];
  uint64_t v7 = (uint64_t *)a1[27];
  float v8 = 0.0;
  while (v6 != v7)
  {
    uint64_t v9 = *v6++;
    float v8 = v8 + kaldi::CuMatrixBase<float>::Sum(v9, a2, a3, a4, a5);
  }
  int v11 = (uint64_t *)a1[32];
  uint64_t v10 = (uint64_t *)a1[33];
  while (v11 != v10)
  {
    uint64_t v12 = *v11++;
    float v8 = v8 + (*(float (**)(uint64_t))(*(void *)v12 + 208))(v12);
  }
  return v8;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Info(void *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  (*(void (**)(void *, void *, void))(*a1 + 168))(a1, v18, 0);
  uint64_t v2 = (uint64_t *)a1[26];
  for (uint64_t i = (uint64_t *)a1[27]; v2 != i; ++v2)
  {
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n## Embedding Table: ", 21);
    kaldi::nnet1::MomentStatistics<float>(*v2);
    if ((v17 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v17 & 0x80u) == 0) {
      uint64_t v6 = v17;
    }
    else {
      uint64_t v6 = v16;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v6);
    if ((char)v17 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v7 = a1[32];
  for (uint64_t j = a1[33]; v7 != j; v7 += 8)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n## Feature Transform: input-dim ", 33);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", output-dim ", 13);
    uint64_t v10 = (void *)std::ostream::operator<<();
    int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
    (*(void (**)(void **__return_ptr))(**(void **)v7 + 64))(&__p);
    if ((v17 & 0x80u) == 0) {
      uint64_t v12 = &__p;
    }
    else {
      uint64_t v12 = __p;
    }
    if ((v17 & 0x80u) == 0) {
      uint64_t v13 = v17;
    }
    else {
      uint64_t v13 = v16;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    if ((char)v17 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_18C404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"No intermediate gradients for embedding tables, here is the gradient info for the transforms: ", 94);
  uint64_t v2 = *(void *)(a1 + 256);
  for (uint64_t i = *(void *)(a1 + 264); v2 != i; v2 += 8)
  {
    (*(void (**)(void **__return_ptr))(**(void **)v2 + 72))(__p);
    if ((v9 & 0x80u) == 0) {
      int v4 = __p;
    }
    else {
      int v4 = (void **)__p[0];
    }
    if ((v9 & 0x80u) == 0) {
      uint64_t v5 = v9;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n", 1);
    if ((char)v9 < 0) {
      operator delete(__p[0]);
    }
  }
  std::stringbuf::str();
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_18C614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SetTrainOptions(uint64_t result, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(result + 56) = v2;
  uint64_t v3 = *(uint64_t **)(result + 256);
  for (uint64_t i = *(uint64_t **)(result + 264);
        v3 != i;
        double result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 264))(v6, a2))
  {
    uint64_t v6 = *v3++;
  }
  return result;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", &stru_298.segname[4], "in.NumCols() == input_dim_", v8);
  }
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", &stru_298.segname[6], "batch_idx == 0", v8);
  }
  uint64_t v9 = *(void *)(a3 + 32);
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  kaldi::CuMatrixBase<float>::SetZero(a3);
  uint64_t v34 = a3;
  if (*(unsigned char *)(a1 + 460))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 280), *(int *)(a1 + 96));
    LODWORD(v12) = *(_DWORD *)(a1 + 96);
    if ((int)v12 < 1)
    {
      LODWORD(v15) = 0;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      int v15 = 0;
      do
      {
        uint64_t v16 = *(void *)(a1 + 280) + v13;
        *(void *)(v16 + 32) = v9;
        kaldi::CuMatrix<float>::Resize(v16, v10, *(unsigned int *)(*(void *)(a1 + 152) + 4 * v14), 0, 0);
        uint64_t v17 = *(void *)(a1 + 280) + v13;
        uint64_t v18 = *(void *)(*(void *)(a1 + 208) + 8 * *(int *)(*(void *)(a1 + 176) + 4 * v14));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, a2, 0, *(_DWORD *)(a2 + 20), v15, *(_DWORD *)(*(void *)(a1 + 128) + 4 * v14));
        kaldi::CuMatrixBase<float>::SummarizeVec(v17, v18, (uint64_t)&v38, v19, v20);
        uint64_t v38 = off_262D80;
        long long v39 = 0u;
        long long v40 = 0u;
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v38);
        int v15 = (const char *)(*(_DWORD *)(*(void *)(a1 + 128) + 4 * v14++) + v15);
        uint64_t v12 = *(int *)(a1 + 96);
        v13 += 48;
      }
      while (v14 < v12);
    }
    if (v15 != *(_DWORD *)(a1 + 8)) {
      kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)&stru_298.addr + 4, "shift == input_dim_", v11);
    }
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 304), (int)v12);
    if (*(int *)(a1 + 96) >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      do
      {
        uint64_t v31 = *(void *)(a1 + 304) + v29;
        *(void *)(v31 + 32) = v9;
        kaldi::nnet1::Component::Propagate(*(_DWORD **)(*(void *)(a1 + 256) + 8 * v30), *(void *)(a1 + 280) + v29, v31, 0);
        kaldi::CuMatrixBase<float>::AddMat(v34, *(void *)(a1 + 304) + v29, 111, v32, v33, 1.0, 1.0);
        ++v30;
        v29 += 48;
      }
      while (v30 < *(int *)(a1 + 96));
    }
  }
  else if (*(int *)(a1 + 96) >= 1)
  {
    uint64_t v21 = a3;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(a1 + 152);
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, v21, 0, *(_DWORD *)(v21 + 20), v23, *(_DWORD *)(v25 + 4 * v22));
      uint64_t v26 = *(void *)(*(void *)(a1 + 208) + 8 * *(int *)(*(void *)(a1 + 176) + 4 * v22));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v35, a2, 0, *(_DWORD *)(a2 + 20), v24, *(_DWORD *)(*(void *)(a1 + 128) + 4 * v22));
      kaldi::CuMatrixBase<float>::SummarizeVec((uint64_t)&v38, v26, (uint64_t)&v35, v27, v28);
      BOOL v35 = off_262D80;
      long long v36 = 0u;
      long long v37 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v35);
      uint64_t v38 = off_262D80;
      long long v39 = 0u;
      long long v40 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v38);
      uint64_t v25 = *(void *)(a1 + 152);
      uint64_t v23 = (const char *)(*(_DWORD *)(v25 + 4 * v22) + v23);
      uint64_t v24 = (const char *)(*(_DWORD *)(*(void *)(a1 + 128) + 4 * v22++) + v24);
      uint64_t v21 = a3;
    }
    while (v22 < *(int *)(a1 + 96));
  }
}

void sub_18CA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void (**a16)())
{
  a11 = off_262D80;
  _OWORD *v17 = 0u;
  v17[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a11);
  a16 = off_262D80;
  *uint64_t v16 = 0u;
  v16[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t a1, uint64_t a2, float a3)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  uint64_t v6 = *(uint64_t **)(a1 + 256);
  uint64_t v7 = *(uint64_t **)(a1 + 264);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, uint64_t, float))(*(void *)v8 + 240))(v8, a2, a3);
  }
  if (a2 == 3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9, "SetGradientNormalization", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 735);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"RMSPROP is not implemented in word multi embedding yet", 54);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    }
  }
  else
  {
    *(float *)(a1 + 452) = a3;
    *(_DWORD *)(a1 + 448) = a2;
  }
}

void sub_18CBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  int v1 = *(_DWORD *)(a1 + 464);
  if (v1 < 1) {
    return NAN;
  }
  else {
    return *(float *)(a1 + 56) / (float)v1;
  }
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v8, 1, v9, v10);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  long long v37 = 0u;
  long long v36 = 0u;
  BOOL v35 = off_262DC8;
  char v38 = 0;
  kaldi::nnet1::Component::Propagate((_DWORD *)v11, a2, (uint64_t)&v35, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v11 + 232))(v11, a2, a3, 0, 0);
  int v15 = *(_DWORD ***)(v11 + 232);
  uint64_t v16 = *(_DWORD ***)(v11 + 240);
  if (v15 == v16)
  {
    int v19 = 0;
  }
  else
  {
    int v17 = 0;
    do
    {
      int v18 = (*v15)[4] * (*v15)[5];
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      int v19 = v18 + v17;
      if ((v18 + v17) > *(_DWORD *)(a4 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
      }
      uint64_t v32 = *(void *)a4 + 4 * v17;
      LODWORD(v33) = v18;
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v32, *v15++, v12, v13, v14);
      int v17 = v19;
    }
    while (v15 != v16);
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  if (*(unsigned char *)(a1 + 460))
  {
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    kaldi::nnet1::Component::Propagate((_DWORD *)v21, a2, (uint64_t)&v35, 0);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    if (*(int *)(a1 + 96) < 1)
    {
      if (!v21)
      {
LABEL_15:
        kaldi::Vector<float>::Destroy((uint64_t)&v32);
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      do
      {
        uint64_t v24 = *(void *)(*(void *)(v21 + 256) + 8 * v23);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v24 + 224))(v24, *(void *)(v21 + 280) + v22, a3, &v32);
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v29 = 0;
        if ((v33 + v19) > *(_DWORD *)(a4 + 8)) {
          kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v27);
        }
        uint64_t v29 = *(void *)a4 + 4 * v19;
        LODWORD(v30) = v33;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v29, (uint64_t)&v32, v25, v26, v27);
        v19 += v33;
        ++v23;
        v22 += 48;
      }
      while (v23 < *(int *)(a1 + 96));
    }
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    goto LABEL_15;
  }
LABEL_16:
  if (v19 != *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", &stru_388.sectname[10], "shift == gradient_out->Dim()", v20);
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v35);
}

void sub_18CF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((void *)a1);
  if (*(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 920);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  *a3 = 0;
  uint64_t v10 = *(char **)(a1 + 208);
  uint64_t v11 = *(char **)(a1 + 216);
  uint64_t v12 = v11 - v10;
  if (v11 != v10)
  {
    int v13 = 0;
    unint64_t v14 = v12 >> 3;
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    do
    {
      uint64_t v15 = *(void *)v10;
      v10 += 8;
      v13 += *(_DWORD *)(v15 + 16) * *(_DWORD *)(v15 + 20);
      *a3 = v13;
      --v14;
    }
    while (v14);
  }
  uint64_t v16 = *(void *)(a1 + 232);
  uint64_t v17 = *(void *)(a1 + 240);
  *a2 = 0;
  if (v17 != v16)
  {
    unint64_t v18 = 0;
    do
    {
      *a3 += kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v16 + 8 * v18++), v6, v7, v8, v9);
      uint64_t v16 = *(void *)(a1 + 232);
    }
    while (v18 < (*(void *)(a1 + 240) - v16) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(void *a1)
{
  unint64_t v1 = (uint64_t)(a1[27] - a1[26]) >> 3;
  if (v1 != (uint64_t)(a1[30] - a1[29]) >> 3)
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 29, v1);
    if (a1[27] != a1[26]) {
      operator new();
    }
  }
}

void sub_18D19C()
{
}

double kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = off_26E7B8;
  *(_OWORD *)(a1 + 56) = xmmword_20CEC0;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_26EA68;
  *(void *)(a1 + 88) = off_26EB98;
  *(_DWORD *)(a1 + 96) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = off_262DC8;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 400) = off_262DC8;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(unsigned char *)(a1 + 460) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 529) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = off_26E7B8;
  *(_OWORD *)(a1 + 56) = xmmword_20CEC0;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_26EA68;
  *(void *)(a1 + 88) = off_26EB98;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 152), *(const void **)(a2 + 152), *(void *)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  int v4 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 200) = v4;
  uint64_t v5 = (char **)(a1 + 256);
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = off_262DC8;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 400) = off_262DC8;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  int v6 = *(unsigned __int8 *)(a2 + 460);
  *(unsigned char *)(a1 + 460) = v6;
  if (v6 && *(int *)(a1 + 96) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a2 + 256) + 8 * v7);
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
      uint64_t v10 = v9;
      uint64_t v12 = *(uint64_t **)(a1 + 264);
      unint64_t v11 = *(void *)(a1 + 272);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v5) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v5;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 272, v17);
        }
        else {
          unint64_t v18 = 0;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        uint64_t *v19 = v10;
        int v13 = v19 + 1;
        uint64_t v21 = *(char **)(a1 + 256);
        uint64_t v20 = *(char **)(a1 + 264);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }
          while (v20 != v21);
          uint64_t v20 = *v5;
        }
        *(void *)(a1 + 256) = v19;
        *(void *)(a1 + 264) = v13;
        *(void *)(a1 + 272) = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v12 = v9;
        int v13 = v12 + 1;
      }
      *(void *)(a1 + 264) = v13;
      ++v7;
    }
    while (v7 < *(int *)(a1 + 96));
  }
  if (a1 != a2)
  {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 280, *(void *)(a2 + 280), *(void *)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 304, *(void *)(a2 + 304), *(void *)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 328, *(void *)(a2 + 328), *(void *)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 4));
  }
  kaldi::CuMatrix<float>::operator=(a1 + 352, a2 + 352);
  kaldi::CuMatrix<float>::operator=(a1 + 400, a2 + 400);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3);
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CompressedMatrix>();
  }
  if (*(void *)(a2 + 480) != *(void *)(a2 + 472)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
  }
  *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
  return a1;
}

void sub_18D798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, kaldi::nnet1::QuantizerResidualAggregator *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *a10;
  if (*a10)
  {
    *((void *)v20 + 20) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *a11;
  if (*a11)
  {
    *((void *)v20 + 17) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *a12;
  if (*a12)
  {
    *((void *)v20 + 14) = v24;
    operator delete(v24);
  }
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a13);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v20);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = (a1[1] - *a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (kaldi::CompressedMatrix **)(*a1 + 8 * a2));
    }
  }
  else
  {
    std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__append(a1, a2 - v2);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CompressedMatrix>()
{
}

void sub_18D928()
{
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::EnsureCorrs((void *)a1);
  if (*(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "InitResidualAggregator", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 939);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208))
  {
    unint64_t v4 = 0;
    do
      kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(void *)(*(void *)(a1 + 232) + 8 * v4++));
    while (v4 < (uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(void *)a1 = off_26EA68;
  uint64_t v6 = a1 + 88;
  *(void *)(a1 + 88) = off_26EB98;
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256), a2, a3, a4, a5);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 472));
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 400);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 352);
  uint64_t v12 = (void **)(a1 + 328);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 304);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 280);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v7 = *(void **)(a1 + 256);
  if (v7)
  {
    *(void *)(a1 + 264) = v7;
    operator delete(v7);
  }
  uint64_t v12 = (void **)(a1 + 232);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 208);
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v8 = *(void **)(a1 + 176);
  if (v8)
  {
    *(void *)(a1 + 184) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 152);
  if (v9)
  {
    *(void *)(a1 + 160) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 128);
  if (v10)
  {
    *(void *)(a1 + 136) = v10;
    operator delete(v10);
  }
  unint64_t v11 = *(void **)(a1 + 104);
  if (v11)
  {
    *(void *)(a1 + 112) = v11;
    operator delete(v11);
  }
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v6);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(a1, a2, a3, a4, a5);

  operator delete();
}

void non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(a1 - 88, a2, a3, a4, a5);

  operator delete();
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Copy()
{
}

void sub_18DC04()
{
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::CopyCompressed()
{
}

void sub_18DC70()
{
}

void non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::CopyCompressed()
{
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v150 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)((char *)&def_5A5E8 + 2), &v149);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &v148);
  char v128 = 0;
  int v147 = -1;
  *(unsigned char *)(a1 + 460) = 1;
  memset(v146, 0, sizeof(v146));
  uint64_t v129 = (std::vector<int> *)(a1 + 176);
  uint64_t v130 = (std::vector<int> *)(a1 + 104);
  long long v131 = (std::vector<int> *)(a1 + 152);
  long long v132 = (int *)(a1 + 96);
  long long v133 = (int *)(a1 + 200);
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_193;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v146, v8, v9);
    if ((SHIBYTE(v146[2]) & 0x80000000) == 0) {
      break;
    }
    unint64_t v11 = (int *)v146[1];
    switch((unint64_t)v146[1])
    {
      case 9uLL:
        BOOL v10 = *(void *)v146[0] == 0x6461724778614D3CLL && *((unsigned char *)v146[0] + 8) == 62;
LABEL_12:
        uint64_t v7 = (float *)(a1 + 452);
        if (!v10) {
          goto LABEL_284;
        }
        goto LABEL_164;
      case 0xAuLL:
        if (*(void *)v146[0] != 0x6D65744978614D3CLL || *((_WORD *)v146[0] + 4) != 15987) {
          goto LABEL_284;
        }
LABEL_109:
        std::string __p = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p, v8, v9);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, (std::vector<int> *)(a1 + 128), v34);
        goto LABEL_179;
      case 0xBuLL:
        BOOL v31 = *(void *)v146[0] == 0x756F72476D754E3CLL && *(void *)((char *)v146[0] + 3) == 0x3E7370756F72476DLL;
        uint64_t v20 = (int *)(a1 + 96);
        if (!v31)
        {
          BOOL v21 = *(void *)v146[0] == 0x6C6261546D754E3CLL && *(void *)((char *)v146[0] + 3) == 0x3E73656C6261546DLL;
LABEL_96:
          uint64_t v20 = (int *)(a1 + 200);
          if (!v21) {
            goto LABEL_284;
          }
        }
        goto LABEL_177;
      case 0xCuLL:
        if (*(void *)v146[0] == 0x536D6F646E61523CLL && *((_DWORD *)v146[0] + 2) == 1046766949)
        {
LABEL_176:
          uint64_t v20 = &v147;
LABEL_177:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v20, v8, v9);
          goto LABEL_181;
        }
        if (*(void *)v146[0] != 0x69536261636F563CLL || *((_DWORD *)v146[0] + 2) != 1047750010) {
          goto LABEL_187;
        }
LABEL_157:
        std::string __p = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p, v8, v9);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v130, v46);
        goto LABEL_179;
      case 0xDuLL:
        if (*(void *)v146[0] != 0x74536D617261503CLL || *(void *)((char *)v146[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_284;
        }
LABEL_163:
        uint64_t v7 = (float *)&v150;
LABEL_164:
        kaldi::ReadBasicType<float>(a2, 0, v7, v8, v9);
        goto LABEL_181;
      case 0xFuLL:
        BOOL v32 = *(void *)v146[0] == 0x61526E7261654C3CLL && *(void *)((char *)v146[0] + 7) == 0x3E66656F43657461;
        uint64_t v7 = (float *)(a1 + 456);
        if (!v32) {
          goto LABEL_118;
        }
        goto LABEL_164;
      case 0x11uLL:
        if (*(void *)v146[0] == 0x69446465626D453CLL
          && *((void *)v146[0] + 1) == 0x736E6F69736E656DLL
          && *((unsigned char *)v146[0] + 16) == 62)
        {
LABEL_59:
          std::string __p = 0;
          uint64_t v142 = 0;
          uint64_t v143 = 0;
          kaldi::ReadToken(a2, 0, (uint64_t)&__p, v8, v9);
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v131, v24);
          goto LABEL_179;
        }
        if (v146[1] == (char *)&dword_C + 3)
        {
LABEL_118:
          if (*(void *)v146[0] == 0x656E67697373413CLL && *(void *)((char *)v146[0] + 7) == 0x3E656C6261546465)
          {
LABEL_178:
            std::string __p = 0;
            uint64_t v142 = 0;
            uint64_t v143 = 0;
            kaldi::ReadToken(a2, 0, (uint64_t)&__p, v8, v9);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v129, v50);
LABEL_179:
            if (SHIBYTE(v143) < 0) {
              operator delete(__p);
            }
            goto LABEL_181;
          }
LABEL_122:
          unint64_t v11 = (int *)v146[1];
        }
LABEL_123:
        if (v11 == &dword_14)
        {
          if (*(void *)v146[0] == 0x6C616974696E493CLL
            && *((void *)v146[0] + 1) == 0x6E6F436F54657A69
            && *((_DWORD *)v146[0] + 4) == 1047814499)
          {
LABEL_175:
            char v128 = 1;
            goto LABEL_181;
          }
          unint64_t v11 = (int *)v146[1];
        }
        if (v11 != (int *)((char *)&dword_C + 2)) {
          goto LABEL_186;
        }
        if (*(void *)v146[0] != 0x6E6172546573553CLL || *(void *)((char *)v146[0] + 6) != 0x3E6D726F66736E61)
        {
LABEL_185:
          unint64_t v11 = (int *)v146[1];
LABEL_186:
          if (v11 == &dword_C)
          {
LABEL_187:
            uint64_t v51 = (void **)v146[0];
            goto LABEL_188;
          }
LABEL_284:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 271);
          uint64_t v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
          if (SHIBYTE(v146[2]) >= 0) {
            unint64_t v123 = v146;
          }
          else {
            unint64_t v123 = (void **)v146[0];
          }
          if (SHIBYTE(v146[2]) >= 0) {
            uint64_t v124 = HIBYTE(v146[2]);
          }
          else {
            uint64_t v124 = (uint64_t)v146[1];
          }
          long long v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)v123, v124);
          long long v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)", a typo in config? ", 20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"(NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef|ParamStddev|RandomSeed|InitTransformType|GradientNormType|MaxGrad)", 132);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
LABEL_138:
        kaldi::ReadBasicType<BOOL>(a2, 0, (char *)(a1 + 460), v8, v9);
LABEL_181:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        break;
      case 0x12uLL:
        if (*(void *)v146[0] != 0x6E6569646172473CLL
          || *((void *)v146[0] + 1) != 0x7079546D726F4E74
          || *((_WORD *)v146[0] + 8) != 15973)
        {
          goto LABEL_284;
        }
LABEL_147:
        BOOL v43 = &v148;
        goto LABEL_174;
      case 0x13uLL:
        if (*(void *)v146[0] != 0x61725474696E493CLL
          || *((void *)v146[0] + 1) != 0x79546D726F66736ELL
          || *(void *)((char *)v146[0] + 11) != 0x3E657079546D726FLL)
        {
          goto LABEL_284;
        }
LABEL_173:
        BOOL v43 = &v149;
LABEL_174:
        kaldi::ReadToken(a2, 0, (uint64_t)v43, v8, v9);
        goto LABEL_181;
      default:
        goto LABEL_123;
    }
  }
  switch(HIBYTE(v146[2]))
  {
    case 9:
      BOOL v10 = v146[0] == (void *)0x6461724778614D3CLL && LOBYTE(v146[1]) == 62;
      goto LABEL_12;
    case 0xA:
      if (v146[0] != (void *)0x6D65744978614D3CLL || LOWORD(v146[1]) != 15987) {
        goto LABEL_284;
      }
      goto LABEL_109;
    case 0xB:
      BOOL v19 = v146[0] == (void *)0x756F72476D754E3CLL && *(void **)((char *)v146 + 3) == (void *)0x3E7370756F72476DLL;
      uint64_t v20 = (int *)(a1 + 96);
      if (v19) {
        goto LABEL_177;
      }
      BOOL v21 = v146[0] == (void *)0x6C6261546D754E3CLL && *(void **)((char *)v146 + 3) == (void *)0x3E73656C6261546DLL;
      goto LABEL_96;
    case 0xC:
      if (v146[0] == (void *)0x536D6F646E61523CLL && LODWORD(v146[1]) == 1046766949) {
        goto LABEL_176;
      }
      if (v146[0] != (void *)0x69536261636F563CLL || LODWORD(v146[1]) != 1047750010) {
        goto LABEL_184;
      }
      goto LABEL_157;
    case 0xD:
      if (v146[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v146 + 5) != (void *)0x3E7665646474536DLL) {
        goto LABEL_284;
      }
      goto LABEL_163;
    case 0xE:
      goto LABEL_84;
    case 0xF:
      BOOL v28 = v146[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v146 + 7) == (void *)0x3E66656F43657461;
      uint64_t v7 = (float *)(a1 + 456);
      if (v28) {
        goto LABEL_164;
      }
      if (v146[0] == (void *)0x656E67697373413CLL && *(void **)((char *)v146 + 7) == (void *)0x3E656C6261546465) {
        goto LABEL_178;
      }
      if ((HIBYTE(v146[2]) & 0x80) != 0) {
        goto LABEL_122;
      }
LABEL_83:
      if (HIBYTE(v146[2]) != 14) {
        goto LABEL_183;
      }
LABEL_84:
      if (v146[0] == (void *)0x6E6172546573553CLL && *(void **)((char *)v146 + 6) == (void *)0x3E6D726F66736E61) {
        goto LABEL_138;
      }
      if ((HIBYTE(v146[2]) & 0x80) != 0) {
        goto LABEL_185;
      }
LABEL_183:
      if (HIBYTE(v146[2]) != 12) {
        goto LABEL_284;
      }
LABEL_184:
      uint64_t v51 = v146;
      break;
    case 0x11:
      if (v146[0] != (void *)0x69446465626D453CLL || v146[1] != (void *)0x736E6F69736E656DLL || LOBYTE(v146[2]) != 62) {
        goto LABEL_284;
      }
      goto LABEL_59;
    case 0x12:
      if (v146[0] != (void *)0x6E6569646172473CLL
        || v146[1] != (void *)0x7079546D726F4E74
        || LOWORD(v146[2]) != 15973)
      {
        goto LABEL_284;
      }
      goto LABEL_147;
    case 0x13:
      if (v146[0] != (void *)0x61725474696E493CLL
        || v146[1] != (void *)0x79546D726F66736ELL
        || *(void **)((char *)&v146[1] + 3) != (void *)0x3E657079546D726FLL)
      {
        goto LABEL_284;
      }
      goto LABEL_173;
    case 0x14:
      if (v146[0] != (void *)0x6C616974696E493CLL
        || v146[1] != (void *)0x6E6F436F54657A69
        || LODWORD(v146[2]) != 1047814499)
      {
        goto LABEL_83;
      }
      goto LABEL_175;
    default:
      goto LABEL_284;
  }
LABEL_188:
  uint64_t v52 = *v51;
  uint64_t v53 = *((unsigned int *)v51 + 2);
  if (v52 != (void *)0x6E6F706D6F432F3CLL || v53 != 1047817829) {
    goto LABEL_284;
  }
LABEL_193:
  uint64_t v55 = (char **)(a1 + 256);
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256), v6, (uint64_t)v7, v8, v9);
  if (*(unsigned char *)(a1 + 460))
  {
    if (*v132 >= 1)
    {
      int v56 = 0;
      do
      {
        long long v134 = 0;
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        LODWORD(v138) = 0;
        LODWORD(v151[0]) = 0;
        kaldi::ExpectToken(a2, 0, (kaldi *)"<FeatureTransform>");
        kaldi::ReadToken(a2, 0, (uint64_t)&v134, v57, v58);
        uint64_t v59 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v134);
        kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v138, v60, v61);
        kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v151, v62, v63);
        kaldi::nnet1::Component::NewComponentOfType(v59);
        if (!v64
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 293);
          unint64_t v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"require an updatable component, you used ", 41);
          if (v136 >= 0) {
            unint64_t v120 = &v134;
          }
          else {
            unint64_t v120 = v134;
          }
          if (v136 >= 0) {
            uint64_t v121 = HIBYTE(v136);
          }
          else {
            uint64_t v121 = v135;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)v120, v121);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        long long v66 = v65;
        (*(void (**)(void *, uint64_t *, kaldi::UniformRandomNumber *))(*(void *)v65 + 96))(v65, a2, a3);
        long long v68 = *(void **)(a1 + 264);
        unint64_t v67 = *(void *)(a1 + 272);
        if ((unint64_t)v68 >= v67)
        {
          uint64_t v70 = ((char *)v68 - *v55) >> 3;
          if ((unint64_t)(v70 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v71 = v67 - (void)*v55;
          uint64_t v72 = v71 >> 2;
          if (v71 >> 2 <= (unint64_t)(v70 + 1)) {
            uint64_t v72 = v70 + 1;
          }
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v73 = v72;
          }
          if (v73) {
            long long v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 272, v73);
          }
          else {
            long long v74 = 0;
          }
          long long v75 = &v74[8 * v70];
          *(void *)long long v75 = v66;
          uint64_t v69 = v75 + 8;
          long long v77 = *(char **)(a1 + 256);
          uint64_t v76 = *(char **)(a1 + 264);
          if (v76 != v77)
          {
            do
            {
              uint64_t v78 = *((void *)v76 - 1);
              v76 -= 8;
              *((void *)v75 - 1) = v78;
              v75 -= 8;
            }
            while (v76 != v77);
            uint64_t v76 = *v55;
          }
          *(void *)(a1 + 256) = v75;
          *(void *)(a1 + 264) = v69;
          *(void *)(a1 + 272) = &v74[8 * v73];
          if (v76) {
            operator delete(v76);
          }
        }
        else
        {
          *long long v68 = v66;
          uint64_t v69 = v68 + 1;
        }
        *(void *)(a1 + 264) = v69;
        if (SHIBYTE(v136) < 0) {
          operator delete(v134);
        }
        ++v56;
      }
      while (v56 < *v132);
    }
    if (v128)
    {
      uint64_t v79 = *(uint64_t **)(a1 + 256);
      uint64_t v80 = *(uint64_t **)(a1 + 264);
      if (v79 == v80)
      {
        if (!*(_DWORD *)(*v79 + 12))
        {
LABEL_232:
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 332);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"initialized the transform for concatenation", 43);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
          }
          goto LABEL_234;
        }
      }
      else
      {
        int v81 = 0;
        long long v82 = *(uint64_t **)(a1 + 256);
        do
        {
          uint64_t v83 = *v82++;
          v81 += *(_DWORD *)(v83 + 8);
        }
        while (v82 != v80);
        if (v81 == *(_DWORD *)(*v79 + 12))
        {
          uint64_t v84 = 0;
          do
          {
            uint64_t v85 = (const void *)*v79;
            if (!*v79)
            {
LABEL_291:
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 326);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"cannot initialize to concatenation for this transform", 53);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
            }
            if (v86)
            {
              uint64_t v87 = v86;
              kaldi::Matrix<float>::Matrix((uint64_t)&__p, v86[3], v86[2], 0, 0);
              uint64_t v88 = v87[3];
              long long v138 = 0;
              v139 = 0;
              unint64_t v140 = 0;
              kaldi::Vector<float>::Resize((void **)&v138, v88, 0, v89, v90);
              kaldi::SubMatrix<float>::SubMatrix(&v134, &__p, v84, v87[2], 0, v142);
              kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v134, 1.0);
              fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v134);
              kaldi::nnet1::AffineTransform::SetLinearity((kaldi::nnet1::AffineTransform *)v87, (kaldi::ContextDependency *)&__p);
              kaldi::nnet1::AffineTransform::SetBias((kaldi::nnet1::AffineTransform *)v87, (uint64_t)&v138);
              unsigned int v91 = v87[2];
              kaldi::Vector<float>::Destroy((uint64_t)&v138);
            }
            else
            {
              if (!v92) {
                goto LABEL_291;
              }
              uint64_t v93 = (uint64_t)v92;
              kaldi::Matrix<float>::Matrix((uint64_t)&__p, v92[3], v92[2], 0, 0);
              kaldi::SubMatrix<float>::SubMatrix(&v134, &__p, v84, *(unsigned int *)(v93 + 8), 0, v142);
              kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v134, 1.0);
              fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v134);
              kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetLinearity(v93, (kaldi::ContextDependency *)&__p);
              unsigned int v91 = *(_DWORD *)(v93 + 8);
            }
            kaldi::Matrix<float>::~Matrix((uint64_t)&__p);
            uint64_t v84 = v91 + v84;
            ++v79;
          }
          while (v79 != v80);
          if (v84 != v81) {
            kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)&stru_108.flags + 3, "shift == total_dim", v94);
          }
          goto LABEL_232;
        }
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 304);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"dimension mismatch, cannot initialize to concatenation, expected dim is ", 72);
      int v127 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)" actual dim is ", 15);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
  }
LABEL_234:
  int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v149);
  *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v148);
  if (!inited)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 339);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"it doesn't make sense to initialize the embedding table as an identify matrix", 77);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  v139 = 0;
  unint64_t v140 = 0;
  long long v138 = &v139;
  if (*v132 < 1)
  {
    unint64_t v102 = 0;
  }
  else
  {
    uint64_t v97 = 0;
    do
    {
      LODWORD(v134) = 0;
      int v98 = v129->__begin_[v97];
      LODWORD(v134) = v98;
      if (v98 < 0 || v98 >= *v133) {
        kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", &stru_158.sectname[1], "table_idx >= 0 && table_idx < num_tables_", v96);
      }
      int v99 = v130->__begin_[v97];
      int v100 = v131->__begin_[v97];
      std::string __p = &v134;
      unint64_t v101 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v138, (int *)&v134, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
      *((_DWORD *)v101 + 8) = v99;
      *((_DWORD *)v101 + 9) = v100;
      ++v97;
    }
    while (v97 < *v132);
    unint64_t v102 = v140;
  }
  if (v102 != *v133) {
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", &stru_158.sectname[4], "table_dims.size() == num_tables_", v96);
  }
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), v102);
  if (v147 >= 1) {
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v147);
  }
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)&__p, a3);
  int v137 = 0;
  if (*v133 >= 1)
  {
    v151[0] = &v137;
    int v103 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v138, &v137, (uint64_t)&std::piecewise_construct, v151);
    uint64_t v104 = *((unsigned int *)v103 + 8);
    uint64_t v105 = *((unsigned int *)v103 + 9);
    kaldi::Matrix<float>::Matrix((uint64_t)&v134, v104, v105, 0, 0);
    if ((int)v104 < 1) {
LABEL_265:
    }
      kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::Matrix<float>>();
    unsigned int v109 = 0;
    while ((int)v105 < 1)
    {
LABEL_264:
      if (++v109 == v104) {
        goto LABEL_265;
      }
    }
    unint64_t v110 = 0;
    while (inited != 2)
    {
      if (inited == 1)
      {
        float v111 = *(float *)&v150;
        float v112 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v106, v107, v108);
        if (HIDWORD(v135) <= v109 || v110 >= v135) {
          goto LABEL_275;
        }
        uint64_t v114 = (char *)v134 + 4 * (int)(v109 * v136);
        float v115 = (v112 + -0.5) * (float)(v111 + v111);
LABEL_262:
        *(float *)&v114[4 * v110] = v115;
      }
      if (v105 == ++v110) {
        goto LABEL_264;
      }
    }
    float v116 = *(float *)&v150;
    kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)&__p, 0, v106, v107, v108);
    if (HIDWORD(v135) <= v109 || v110 >= v135) {
LABEL_275:
    }
      kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v108);
    uint64_t v114 = (char *)v134 + 4 * (int)(v109 * v136);
    float v115 = v116 * v117;
    goto LABEL_262;
  }
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  long long v134 = &v143;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::destroy((uint64_t)&v138, v139);
  if (SHIBYTE(v146[2]) < 0) {
    operator delete(v146[0]);
  }
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v148.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
}

void sub_18F040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  a17 = &a28;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::destroy((uint64_t)&a23, a24);
  if (*(char *)(v32 - 177) < 0) {
    operator delete(*(void **)(v32 - 200));
  }
  if (*(char *)(v32 - 145) < 0) {
    operator delete(*(void **)(v32 - 168));
  }
  if (*(char *)(v32 - 121) < 0) {
    operator delete(*(void **)(v32 - 144));
  }
  _Unwind_Resume(a1);
}

void sub_18F058()
{
}

void sub_18F060(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x18F0C0);
}

void sub_18F084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  JUMPOUT(0x18F090);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::Matrix<float>>()
{
}

void sub_18F1B0()
{
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(uint64_t result)
{
  if (!*(unsigned char *)(result + 544))
  {
    uint64_t v1 = *(unsigned int *)(result + 96);
    if ((int)v1 <= 0)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 503);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one group, you used ", 39);
      std::ostream::operator<<();
    }
    else
    {
      uint64_t v2 = *(unsigned int *)(result + 200);
      if ((int)v2 <= 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 506);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one embedding table, you used ", 49);
        std::ostream::operator<<();
      }
      else if (v1 < v2)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 509);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are only ", 15);
        BOOL v31 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" groups, but you set ", 21);
        uint64_t v32 = (void *)std::ostream::operator<<();
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v32, " embedding tables");
      }
      else
      {
        uint64_t v3 = *(void *)(result + 104);
        uint64_t v4 = (*(void *)(result + 112) - v3) >> 2;
        if (v4 == v1)
        {
          uint64_t v5 = *(void *)(result + 128);
          if (v4 == (*(void *)(result + 136) - v5) >> 2)
          {
            uint64_t v6 = *(void *)(result + 152);
            if (v4 == (*(void *)(result + 160) - v6) >> 2)
            {
              uint64_t v7 = *(void *)(result + 176);
              if (v4 == (*(void *)(result + 184) - v7) >> 2)
              {
                uint64_t v8 = *(void *)(result + 208);
                if (v2 == (*(void *)(result + 216) - v8) >> 3)
                {
                  if (*(unsigned char *)(result + 460)
                    && v4 != (uint64_t)(*(void *)(result + 264) - *(void *)(result + 256)) >> 3)
                  {
                    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 528);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                    long long v40 = (void *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" groups, but the number of feature transforms is ", 49);
                    std::ostream::operator<<();
                  }
                  else
                  {
                    uint64_t v9 = 0;
                    int v10 = 0;
                    int v11 = 0;
                    do
                    {
                      uint64_t v12 = *(unsigned int *)(v7 + 4 * v9);
                      if ((v12 & 0x80000000) != 0 || (int)v12 >= (int)v2)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 537);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v23 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"-th group has assigned table index ", 35);
                        uint64_t v24 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" , the number of tables is ", 27);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      int v13 = *(_DWORD *)(v3 + 4 * v9);
                      if (v13 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 542);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v20 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"-th group has invalid vocab size ", 33);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      int v14 = *(_DWORD *)(v5 + 4 * v9);
                      if (v14 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 545);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        BOOL v21 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"-th group has invalid max item value ", 37);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      int v15 = *(_DWORD *)(v6 + 4 * v9);
                      if (v15 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 548);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        BOOL v19 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"-th group has invalid embedding dimension value ", 48);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      uint64_t v16 = **(void **)(v8 + 8 * v12);
                      if (!v16 || *(_DWORD *)(v16 + 8) != v13)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 553);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        unint64_t v18 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"-th group has mismatched embedding table and vocab size ", 56);
                        uint64_t v29 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      if (*(_DWORD *)(v16 + 12) != v15)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 557);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        uint64_t v22 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"-th group has mismatched embedding table and embedding dim ", 59);
                        uint64_t v30 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      if (*(unsigned char *)(result + 460))
                      {
                        uint64_t v17 = *(void *)(*(void *)(result + 256) + 8 * v9);
                        if (v15 != *(_DWORD *)(v17 + 8))
                        {
                          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 561);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          uint64_t v25 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"-th group has mismatched embedding table and feature transform ", 63);
                          uint64_t v26 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" vs ", 4);
                          std::ostream::operator<<();
                          goto LABEL_40;
                        }
                        if (*(_DWORD *)(result + 12) != *(_DWORD *)(v17 + 12))
                        {
                          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 565);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          uint64_t v27 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"-th group has feature transform output dim ", 43);
                          BOOL v28 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" does not match component output dim ", 37);
                          std::ostream::operator<<();
                          goto LABEL_40;
                        }
                      }
                      v10 += v15;
                      v11 += v14;
                      ++v9;
                    }
                    while (v4 != v9);
                    if (*(_DWORD *)(result + 8) == v11)
                    {
                      if (*(unsigned char *)(result + 460) || v10 == *(_DWORD *)(result + 12))
                      {
                        *(unsigned char *)(result + 544) = 1;
                        return result;
                      }
                      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 575);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Total embedding size of ", 24);
                      uint64_t v41 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" doesn't match the component output size of ", 44);
                      uint64_t v42 = (void *)std::ostream::operator<<();
                      std::operator<<[abi:ne180100]<std::char_traits<char>>(v42, " when transforms are not used");
                    }
                    else
                    {
                      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 571);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"input dim of the component is ", 30);
                      long long v39 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" , while the input dim defined in max items is ", 47);
                      std::ostream::operator<<();
                    }
                  }
                }
                else
                {
                  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 524);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the actual number of embedding tables is ", 41);
                  char v38 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" and different than ", 20);
                  std::ostream::operator<<();
                }
              }
              else
              {
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 521);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                long long v36 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" groups, but ", 13);
                long long v37 = (void *)std::ostream::operator<<();
                std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, " groups have assigned tables");
              }
            }
            else
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 518);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
              BOOL v35 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" groups, but the embedding dim list size is ", 44);
              std::ostream::operator<<();
            }
          }
          else
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 515);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
            uint64_t v34 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" groups, but the max item list size is ", 39);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 512);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
          uint64_t v33 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" groups, but the number vocab list size is ", 43);
          std::ostream::operator<<();
        }
      }
    }
LABEL_40:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43);
  }
  return result;
}

void sub_18FB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  long long v82 = 0uLL;
  uint64_t v83 = 0;
  uint64_t v8 = (char *)(a1 + 460);
  *(unsigned char *)(a1 + 460) = 1;
  uint64_t v9 = (float *)(a1 + 452);
  long long v75 = (std::vector<int> *)(a1 + 176);
  uint64_t v76 = (float *)(a1 + 456);
  long long v74 = (std::vector<int> *)(a1 + 152);
  long long v77 = (std::vector<int> *)(a1 + 104);
  uint64_t v78 = (std::vector<int> *)(a1 + 128);
  int v10 = (int *)(a1 + 200);
  int v11 = (int *)(a1 + 96);
  while (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)&v82, v12, v13);
    if (SHIBYTE(v83) < 0)
    {
      uint64_t v20 = *((void *)&v82 + 1);
      if (*((void *)&v82 + 1) != 11) {
        goto LABEL_25;
      }
      BOOL v21 = *(void *)v82 == 0x756F72476D754E3CLL && *(void *)(v82 + 3) == 0x3E7370756F72476DLL;
      uint64_t v18 = (uint64_t)v11;
      if (v21
        || (*(void *)v82 == 0x6C6261546D754E3CLL ? (BOOL v22 = *(void *)(v82 + 3) == 0x3E73656C6261546DLL) : (BOOL v22 = 0),
            uint64_t v18 = (uint64_t)v10,
            v22))
      {
LABEL_75:
        kaldi::ReadBasicType<int>(a2, a3, v18, v14, v15);
      }
      else
      {
        uint64_t v20 = *((void *)&v82 + 1);
LABEL_25:
        if (v20 == 12)
        {
          if (*(void *)v82 == 0x69536261636F563CLL && *(_DWORD *)(v82 + 8) == 1047750010)
          {
LABEL_94:
            std::string __p = 0;
            uint64_t v80 = 0;
            uint64_t v81 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v77, v37);
            goto LABEL_137;
          }
          uint64_t v20 = *((void *)&v82 + 1);
        }
        if (v20 != 10) {
          goto LABEL_37;
        }
        if (*(void *)v82 == 0x6D65744978614D3CLL && *(_WORD *)(v82 + 8) == 15987)
        {
LABEL_93:
          std::string __p = 0;
          uint64_t v80 = 0;
          uint64_t v81 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v78, v36);
LABEL_137:
          if (SHIBYTE(v81) < 0) {
            operator delete(__p);
          }
        }
        else
        {
          uint64_t v20 = *((void *)&v82 + 1);
LABEL_37:
          if (v20 == 17)
          {
            if (*(void *)v82 == 0x69446465626D453CLL
              && *(void *)(v82 + 8) == 0x736E6F69736E656DLL
              && *(unsigned char *)(v82 + 16) == 62)
            {
LABEL_135:
              std::string __p = 0;
              uint64_t v80 = 0;
              uint64_t v81 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
              kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v74, v48);
              goto LABEL_137;
            }
            uint64_t v20 = *((void *)&v82 + 1);
          }
          if (v20 != 15) {
            goto LABEL_52;
          }
          if (*(void *)v82 == 0x656E67697373413CLL && *(void *)(v82 + 7) == 0x3E656C6261546465)
          {
LABEL_134:
            std::string __p = 0;
            uint64_t v80 = 0;
            uint64_t v81 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v75, v47);
            goto LABEL_137;
          }
          uint64_t v20 = *((void *)&v82 + 1);
LABEL_52:
          if (v20 != 18) {
            goto LABEL_61;
          }
          if (*(void *)v82 == 0x6E6569646172473CLL
            && *(void *)(v82 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v82 + 16) == 15973)
          {
LABEL_136:
            std::string __p = 0;
            uint64_t v80 = 0;
            uint64_t v81 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&__p);
            goto LABEL_137;
          }
          uint64_t v20 = *((void *)&v82 + 1);
LABEL_61:
          if (v20 == 9)
          {
            BOOL v30 = *(void *)v82 == 0x6461724778614D3CLL && *(unsigned char *)(v82 + 8) == 62;
            BOOL v31 = v9;
            if (v30) {
              goto LABEL_92;
            }
            uint64_t v20 = *((void *)&v82 + 1);
          }
          if (v20 == 15)
          {
            BOOL v32 = *(void *)v82 == 0x61526E7261654C3CLL && *(void *)(v82 + 7) == 0x3E66656F43657461;
            BOOL v31 = v76;
            if (v32) {
              goto LABEL_92;
            }
            uint64_t v20 = *((void *)&v82 + 1);
          }
          if (v20 != 14) {
            goto LABEL_167;
          }
          uint64_t v16 = (uint64_t *)v82;
LABEL_128:
          uint64_t v44 = *v16;
          uint64_t v45 = *(uint64_t *)((char *)v16 + 6);
          if (v44 != 0x6E6172546573553CLL || v45 != 0x3E6D726F66736E61) {
            goto LABEL_167;
          }
          kaldi::ReadBasicType<BOOL>(a2, a3, v8, v14, v15);
        }
      }
    }
    else
    {
      uint64_t v16 = (uint64_t *)&v82;
      switch(HIBYTE(v83))
      {
        case 9:
          goto LABEL_87;
        case 0xA:
          goto LABEL_82;
        case 0xB:
          BOOL v17 = (void)v82 == 0x756F72476D754E3CLL && *(void *)((char *)&v82 + 3) == 0x3E7370756F72476DLL;
          uint64_t v18 = (uint64_t)v11;
          if (!v17)
          {
            BOOL v19 = (void)v82 == 0x6C6261546D754E3CLL && *(void *)((char *)&v82 + 3) == 0x3E73656C6261546DLL;
            uint64_t v18 = (uint64_t)v10;
            if (!v19) {
              goto LABEL_80;
            }
          }
          goto LABEL_75;
        case 0xC:
          if ((void)v82 == 0x69536261636F563CLL && DWORD2(v82) == 1047750010) {
            goto LABEL_94;
          }
LABEL_80:
          if (HIBYTE(v83) == 9) {
            goto LABEL_87;
          }
          if (HIBYTE(v83) != 10) {
            goto LABEL_167;
          }
LABEL_82:
          if ((void)v82 == 0x6D65744978614D3CLL && WORD4(v82) == 15987) {
            goto LABEL_93;
          }
LABEL_86:
          if (HIBYTE(v83) == 9) {
            goto LABEL_87;
          }
          goto LABEL_167;
        case 0xE:
          goto LABEL_128;
        case 0xF:
          goto LABEL_115;
        case 0x11:
          if ((void)v82 == 0x69446465626D453CLL
            && *((void *)&v82 + 1) == 0x736E6F69736E656DLL
            && v83 == 62)
          {
            goto LABEL_135;
          }
          if (HIBYTE(v83) == 9) {
            goto LABEL_87;
          }
          if (HIBYTE(v83) == 14) {
            goto LABEL_127;
          }
          if (HIBYTE(v83) != 15) {
            goto LABEL_167;
          }
LABEL_115:
          if ((void)v82 == 0x656E67697373413CLL && *(void *)((char *)&v82 + 7) == 0x3E656C6261546465) {
            goto LABEL_134;
          }
          switch(HIBYTE(v83))
          {
            case 9u:
LABEL_87:
              BOOL v35 = (void)v82 == 0x6461724778614D3CLL && BYTE8(v82) == 62;
              BOOL v31 = v9;
              if (!v35) {
                goto LABEL_167;
              }
              break;
            case 0xEu:
LABEL_127:
              uint64_t v16 = (uint64_t *)&v82;
              goto LABEL_128;
            case 0xFu:
LABEL_122:
              BOOL v43 = (void)v82 == 0x61526E7261654C3CLL && *(void *)((char *)&v82 + 7) == 0x3E66656F43657461;
              BOOL v31 = v76;
              if (!v43)
              {
LABEL_167:
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 408);
                uint64_t v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
                if (v83 >= 0) {
                  uint64_t v71 = &v82;
                }
                else {
                  uint64_t v71 = (long long *)v82;
                }
                if (v83 >= 0) {
                  uint64_t v72 = HIBYTE(v83);
                }
                else {
                  uint64_t v72 = *((void *)&v82 + 1);
                }
                unint64_t v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)", a typo in config? (NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef)", 86);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
              }
              break;
            default:
              goto LABEL_167;
          }
          return;
        case 0x12:
          if ((void)v82 == 0x6E6569646172473CLL
            && *((void *)&v82 + 1) == 0x7079546D726F4E74
            && (unsigned __int16)v83 == 15973)
          {
            goto LABEL_136;
          }
          if (HIBYTE(v83) == 15) {
            goto LABEL_122;
          }
          if (HIBYTE(v83) == 14) {
            goto LABEL_127;
          }
          goto LABEL_86;
        default:
          goto LABEL_167;
      }
LABEL_92:
      kaldi::ReadBasicType<float>(a2, a3, v31, v14, v15);
    }
  }
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), *(int *)(a1 + 200));
  if (*v10 >= 1) {
    operator new();
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  uint64_t v49 = (char **)(a1 + 256);
  kaldi::DeletePointers<kaldi::nnet1::UpdatableComponent>((void *)(a1 + 256), v50, v51, v52, v53);
  if (*v8 && *v11 >= 1)
  {
    int v54 = 0;
    do
    {
      kaldi::ExpectToken(a2, a3, (kaldi *)"<FeatureTransform>");
      uint64_t v55 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
      if (!v55
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 425);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"failed to read feature transform", 32);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      uint64_t v57 = v56;
      kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
      uint64_t v59 = *(void **)(a1 + 264);
      unint64_t v58 = *(void *)(a1 + 272);
      if ((unint64_t)v59 >= v58)
      {
        uint64_t v61 = ((char *)v59 - *v49) >> 3;
        if ((unint64_t)(v61 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v62 = v58 - (void)*v49;
        uint64_t v63 = v62 >> 2;
        if (v62 >> 2 <= (unint64_t)(v61 + 1)) {
          uint64_t v63 = v61 + 1;
        }
        if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64) {
          long long v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 272, v64);
        }
        else {
          long long v65 = 0;
        }
        long long v66 = &v65[8 * v61];
        *(void *)long long v66 = v57;
        uint64_t v60 = v66 + 8;
        long long v68 = *(char **)(a1 + 256);
        unint64_t v67 = *(char **)(a1 + 264);
        if (v67 != v68)
        {
          do
          {
            uint64_t v69 = *((void *)v67 - 1);
            v67 -= 8;
            *((void *)v66 - 1) = v69;
            v66 -= 8;
          }
          while (v67 != v68);
          unint64_t v67 = *v49;
        }
        *(void *)(a1 + 256) = v66;
        *(void *)(a1 + 264) = v60;
        *(void *)(a1 + 272) = &v65[8 * v64];
        if (v67) {
          operator delete(v67);
        }
      }
      else
      {
        *uint64_t v59 = v57;
        uint64_t v60 = v59 + 1;
      }
      *(void *)(a1 + 264) = v60;
      ++v54;
    }
    while (v54 < *(_DWORD *)(a1 + 96));
  }
  *(unsigned char *)(a1 + 16) = 0;
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  if (SHIBYTE(v83) < 0) {
    operator delete((void *)v82);
  }
}

void sub_190638(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  v37[0] = 0;
  v37[1] = 0;
  uint64_t v38 = 0;
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumGroups>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumTables>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<VocabSizes>", v10, v11);
  kaldi::JoinVectorToString<int>((void *)(a1 + 104), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v12, v13);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxItems>", v14, v15);
  kaldi::JoinVectorToString<int>((void *)(a1 + 128), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v16, v17);
  kaldi::WriteToken(a2, a3, (kaldi *)"<EmbedDimensions>", v18, v19);
  kaldi::JoinVectorToString<int>((void *)(a1 + 152), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v20, v21);
  kaldi::WriteToken(a2, a3, (kaldi *)"<AssignedTable>", v22, v23);
  kaldi::JoinVectorToString<int>((void *)(a1 + 176), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v24, v25);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v26, v27);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v28, v29);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v30, v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v32, v33);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<UseTransform>", v34, v35);
  kaldi::WriteBasicType<BOOL>(a2, (char)a3, *(unsigned __int8 *)(a1 + 460));
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
}

void sub_1908A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  (*(void (**)(uint64_t, void *, const char *))(*(void *)a1 + 168))(a1, a2, a3);
  uint64_t v10 = *(uint64_t ***)(a1 + 208);
  int v11 = *(uint64_t ***)(a1 + 216);
  while (v10 != v11)
  {
    uint64_t v12 = *v10++;
    kaldi::CompressedMatrix::Write(v12, a2, (int)a3, a4, v9);
  }
  double result = kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v8, v9);
  if (*(unsigned char *)(a1 + 460))
  {
    uint64_t v16 = *(uint64_t **)(a1 + 256);
    for (uint64_t i = *(uint64_t **)(a1 + 264); v16 != i; result = kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v19, v20))
    {
      kaldi::WriteToken(a2, a3, (kaldi *)"<FeatureTransform>", v14, v15);
      uint64_t v18 = *v16++;
      kaldi::nnet1::Component::Write(v18, a2, (uint64_t)a3, a4);
    }
  }
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::NumParams(void *a1)
{
  uint64_t v1 = (uint64_t **)a1[26];
  uint64_t v2 = (uint64_t **)a1[27];
  if (v1 == v2)
  {
    uint64_t v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    do
    {
      uint64_t v4 = **v1;
      if (v4) {
        LODWORD(v4) = *(_DWORD *)(v4 + 12) * *(_DWORD *)(v4 + 8);
      }
      uint64_t v3 = (v4 + v3);
      ++v1;
    }
    while (v1 != v2);
  }
  uint64_t v5 = (uint64_t *)a1[32];
  uint64_t v6 = (uint64_t *)a1[33];
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    uint64_t v3 = (*(unsigned int (**)(uint64_t))(*(void *)v7 + 176))(v7) + v3;
  }
  return v3;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetParams(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 1, v5, v6);
  int v11 = (uint64_t **)a1[26];
  uint64_t v12 = (uint64_t **)a1[27];
  if (v11 == v12)
  {
    int v16 = 0;
  }
  else
  {
    int v13 = 0;
    do
    {
      uint64_t v14 = *v11;
      uint64_t v15 = **v11;
      if (v15) {
        LODWORD(v15) = *(_DWORD *)(v15 + 12) * *(_DWORD *)(v15 + 8);
      }
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      int v16 = v15 + v13;
      if ((v15 + v13) > *(_DWORD *)(a2 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
      }
      uint64_t v25 = *(void *)a2 + 4 * v13;
      LODWORD(v26) = v15;
      v10.n128_f64[0] = kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v25, v14, v7, v8, v9);
      ++v11;
      int v13 = v16;
    }
    while (v11 != v12);
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v18 = (void *)a1[32];
  BOOL v17 = (void *)a1[33];
  while (v18 != v17)
  {
    (*(void (**)(void, uint64_t *, __n128))(*(void *)*v18 + 184))(*v18, &v25, v10);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v22 = 0;
    if ((v26 + v16) > *(_DWORD *)(a2 + 8)) {
      kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v21);
    }
    uint64_t v22 = *(void *)a2 + 4 * v16;
    LODWORD(v23) = v26;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v22, (uint64_t)&v25, v19, v20, v21);
    v16 += v26;
    ++v18;
  }
  if (v16 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)&stru_248.align + 2, "shift == wei_copy->Dim()", v9);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v25);
}

void sub_190C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SetParams(void *a1, uint64_t a2)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check((uint64_t)a1);
  int v4 = *(_DWORD *)(a2 + 8);
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  if (v4 != result) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)&stru_248.nreloc, "wei_src.Dim() == NumParams()", v6);
  }
  uint64_t v7 = (uint64_t **)a1[26];
  uint64_t v8 = (uint64_t **)a1[27];
  if (v7 != v8)
  {
    int v9 = 0;
    while (1)
    {
      __n128 v10 = *v7;
      uint64_t v11 = **v7;
      if (v11) {
        LODWORD(v11) = *(_DWORD *)(v11 + 12) * *(_DWORD *)(v11 + 8);
      }
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v12 = v11 + v9;
      if ((v11 + v9) > *(_DWORD *)(a2 + 8)) {
        break;
      }
      uint64_t v18 = (char *)(*(void *)a2 + 4 * v9);
      LODWORD(v19) = v11;
      uint64_t result = kaldi::CompressedMatrix::CopyRowsFromVec<float>(v10, &v18);
      ++v7;
      int v9 = v12;
      if (v7 == v8) {
        goto LABEL_10;
      }
    }
LABEL_17:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v6);
  }
  int v12 = 0;
LABEL_10:
  uint64_t v14 = (uint64_t *)a1[32];
  int v13 = (uint64_t *)a1[33];
  if (v14 != v13)
  {
    while (1)
    {
      int v15 = (*(uint64_t (**)(void))(*(void *)*v14 + 176))();
      uint64_t v16 = *v14;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v17 = v15 + v12;
      if ((v15 + v12) > *(_DWORD *)(a2 + 8)) {
        goto LABEL_17;
      }
      uint64_t v18 = (char *)(*(void *)a2 + 4 * v12);
      LODWORD(v19) = v15;
      uint64_t result = (*(uint64_t (**)(uint64_t, char **))(*(void *)v16 + 192))(v16, &v18);
      ++v14;
      int v12 = v17;
      if (v14 == v13) {
        goto LABEL_15;
      }
    }
  }
  int v17 = v12;
LABEL_15:
  if (v17 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)&stru_248.reserved2, "shift == wei_src.Dim()", v6);
  }
  return result;
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SumParams(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = (kaldi::CompressedMatrix **)a1[26];
  uint64_t v7 = (kaldi::CompressedMatrix **)a1[27];
  float v8 = 0.0;
  while (v6 != v7)
  {
    int v9 = *v6++;
    float v8 = v8 + kaldi::CompressedMatrix::Sum(v9, a2, a3, a4, a5);
  }
  uint64_t v11 = (uint64_t *)a1[32];
  __n128 v10 = (uint64_t *)a1[33];
  while (v11 != v10)
  {
    uint64_t v12 = *v11++;
    float v8 = v8 + (*(float (**)(uint64_t))(*(void *)v12 + 208))(v12);
  }
  return v8;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::PerturbParams()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "PerturbParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 661);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Info(void *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  (*(void (**)(void *, void *, void))(*a1 + 168))(a1, v19, 0);
  uint64_t v2 = (kaldi::nnet1 **)a1[26];
  for (uint64_t i = (kaldi::nnet1 **)a1[27]; v2 != i; ++v2)
  {
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n## Embedding Table: ", 21);
    kaldi::nnet1::MomentStatistics((uint64_t *)&__p, *v2, v5);
    if ((v18 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v18 & 0x80u) == 0) {
      uint64_t v7 = v18;
    }
    else {
      uint64_t v7 = v17;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v7);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v8 = a1[32];
  for (uint64_t j = a1[33]; v8 != j; v8 += 8)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n## Feature Transform: input-dim ", 33);
    __n128 v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", output-dim ", 13);
    uint64_t v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
    (*(void (**)(void **__return_ptr))(**(void **)v8 + 64))(&__p);
    if ((v18 & 0x80u) == 0) {
      int v13 = &__p;
    }
    else {
      int v13 = __p;
    }
    if ((v18 & 0x80u) == 0) {
      uint64_t v14 = v18;
    }
    else {
      uint64_t v14 = v17;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_19122C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t kaldi::nnet1::MomentStatistics(kaldi::nnet1 *this, const kaldi::CompressedMatrix *a2)
{
  kaldi::Matrix<float>::Matrix(v12, this);
  int v2 = kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)v12);
  int v3 = kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)v12);
  memset(v11, 0, sizeof(v11));
  kaldi::Vector<float>::Resize((void **)v11, (v3 * v2), 0, v4, v5);
  kaldi::VectorBase<float>::CopyRowsFromMat(v11, (kaldi::ContextDependency *)v12);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v11, v6, v7, v8, v9);
  kaldi::Vector<float>::Destroy((uint64_t)v11);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v12);
}

void sub_1912F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InfoGradient(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"No intermediate gradients for embedding tables, here is the gradient info for the transforms: ", 94);
  uint64_t v2 = *(void *)(a1 + 256);
  for (uint64_t i = *(void *)(a1 + 264); v2 != i; v2 += 8)
  {
    (*(void (**)(void **__return_ptr))(**(void **)v2 + 72))(__p);
    if ((v9 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v9 & 0x80u) == 0) {
      uint64_t v5 = v9;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n", 1);
    if ((char)v9 < 0) {
      operator delete(__p[0]);
    }
  }
  std::stringbuf::str();
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1914F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SetTrainOptions(uint64_t result, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(result + 56) = v2;
  int v3 = *(uint64_t **)(result + 256);
  for (uint64_t i = *(uint64_t **)(result + 264);
        v3 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 264))(v6, a2))
  {
    uint64_t v6 = *v3++;
  }
  return result;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", &stru_298.segname[4], "in.NumCols() == input_dim_", v8);
  }
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", &stru_298.segname[6], "batch_idx == 0", v8);
  }
  uint64_t v9 = *(void *)(a3 + 32);
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  kaldi::CuMatrixBase<float>::SetZero(a3);
  uint64_t v34 = a3;
  if (*(unsigned char *)(a1 + 460))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 280), *(int *)(a1 + 96));
    LODWORD(v12) = *(_DWORD *)(a1 + 96);
    if ((int)v12 < 1)
    {
      LODWORD(v15) = 0;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      int v15 = 0;
      do
      {
        uint64_t v16 = *(void *)(a1 + 280) + v13;
        *(void *)(v16 + 32) = v9;
        kaldi::CuMatrix<float>::Resize(v16, v10, *(unsigned int *)(*(void *)(a1 + 152) + 4 * v14), 0, 0);
        uint64_t v17 = *(void *)(a1 + 280) + v13;
        unsigned __int8 v18 = *(uint64_t **)(*(void *)(a1 + 208) + 8 * *(int *)(*(void *)(a1 + 176) + 4 * v14));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, a2, 0, *(_DWORD *)(a2 + 20), v15, *(_DWORD *)(*(void *)(a1 + 128) + 4 * v14));
        kaldi::CuMatrixBase<float>::SummarizeVec(v17, v18, (uint64_t)&v38, v19, v20);
        uint64_t v38 = off_262D80;
        long long v39 = 0u;
        long long v40 = 0u;
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v38);
        int v15 = (const char *)(*(_DWORD *)(*(void *)(a1 + 128) + 4 * v14++) + v15);
        uint64_t v12 = *(int *)(a1 + 96);
        v13 += 48;
      }
      while (v14 < v12);
    }
    if (v15 != *(_DWORD *)(a1 + 8)) {
      kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)&stru_298.addr + 4, "shift == input_dim_", v11);
    }
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 304), (int)v12);
    if (*(int *)(a1 + 96) >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      do
      {
        uint64_t v31 = *(void *)(a1 + 304) + v29;
        *(void *)(v31 + 32) = v9;
        kaldi::nnet1::Component::Propagate(*(_DWORD **)(*(void *)(a1 + 256) + 8 * v30), *(void *)(a1 + 280) + v29, v31, 0);
        kaldi::CuMatrixBase<float>::AddMat(v34, *(void *)(a1 + 304) + v29, 111, v32, v33, 1.0, 1.0);
        ++v30;
        v29 += 48;
      }
      while (v30 < *(int *)(a1 + 96));
    }
  }
  else if (*(int *)(a1 + 96) >= 1)
  {
    uint64_t v21 = a3;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(a1 + 152);
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, v21, 0, *(_DWORD *)(v21 + 20), v23, *(_DWORD *)(v25 + 4 * v22));
      uint64_t v26 = *(uint64_t **)(*(void *)(a1 + 208) + 8 * *(int *)(*(void *)(a1 + 176) + 4 * v22));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v35, a2, 0, *(_DWORD *)(a2 + 20), v24, *(_DWORD *)(*(void *)(a1 + 128) + 4 * v22));
      kaldi::CuMatrixBase<float>::SummarizeVec((uint64_t)&v38, v26, (uint64_t)&v35, v27, v28);
      BOOL v35 = off_262D80;
      long long v36 = 0u;
      long long v37 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v35);
      uint64_t v38 = off_262D80;
      long long v39 = 0u;
      long long v40 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v38);
      uint64_t v25 = *(void *)(a1 + 152);
      uint64_t v23 = (const char *)(*(_DWORD *)(v25 + 4 * v22) + v23);
      uint64_t v24 = (const char *)(*(_DWORD *)(*(void *)(a1 + 128) + 4 * v22++) + v24);
      uint64_t v21 = a3;
    }
    while (v22 < *(int *)(a1 + 96));
  }
}

void sub_19190C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void (**a16)())
{
  a11 = off_262D80;
  _OWORD *v17 = 0u;
  v17[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a11);
  a16 = off_262D80;
  *uint64_t v16 = 0u;
  v16[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SetGradientNormalization(uint64_t a1, uint64_t a2, float a3)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  uint64_t v6 = *(uint64_t **)(a1 + 256);
  uint64_t v7 = *(uint64_t **)(a1 + 264);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, uint64_t, float))(*(void *)v8 + 240))(v8, a2, a3);
  }
  if (a2 == 3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9, "SetGradientNormalization", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 735);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"RMSPROP is not implemented in word multi embedding yet", 54);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    }
  }
  else
  {
    *(float *)(a1 + 452) = a3;
    *(_DWORD *)(a1 + 448) = a2;
  }
}

void sub_191AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetNormalizedLearningRate(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  int v1 = *(_DWORD *)(a1 + 464);
  if (v1 < 1) {
    return NAN;
  }
  else {
    return *(float *)(a1 + 56) / (float)v1;
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::AccumGradients()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 762);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::UpdateWeights()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 846);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v8, 1, v9, v10);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  long long v37 = 0u;
  long long v36 = 0u;
  BOOL v35 = off_262DC8;
  char v38 = 0;
  kaldi::nnet1::Component::Propagate((_DWORD *)v11, a2, (uint64_t)&v35, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v11 + 232))(v11, a2, a3, 0, 0);
  int v15 = *(_DWORD ***)(v11 + 232);
  uint64_t v16 = *(_DWORD ***)(v11 + 240);
  if (v15 == v16)
  {
    int v19 = 0;
  }
  else
  {
    int v17 = 0;
    do
    {
      int v18 = (*v15)[4] * (*v15)[5];
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      int v19 = v18 + v17;
      if ((v18 + v17) > *(_DWORD *)(a4 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
      }
      uint64_t v32 = *(void *)a4 + 4 * v17;
      LODWORD(v33) = v18;
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v32, *v15++, v12, v13, v14);
      int v17 = v19;
    }
    while (v15 != v16);
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  if (*(unsigned char *)(a1 + 460))
  {
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    kaldi::nnet1::Component::Propagate((_DWORD *)v21, a2, (uint64_t)&v35, 0);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    if (*(int *)(a1 + 96) < 1)
    {
      if (!v21)
      {
LABEL_15:
        kaldi::Vector<float>::Destroy((uint64_t)&v32);
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      do
      {
        uint64_t v24 = *(void *)(*(void *)(v21 + 256) + 8 * v23);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v24 + 224))(v24, *(void *)(v21 + 280) + v22, a3, &v32);
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v29 = 0;
        if ((v33 + v19) > *(_DWORD *)(a4 + 8)) {
          kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v27);
        }
        uint64_t v29 = *(void *)a4 + 4 * v19;
        LODWORD(v30) = v33;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v29, (uint64_t)&v32, v25, v26, v27);
        v19 += v33;
        ++v23;
        v22 += 48;
      }
      while (v23 < *(int *)(a1 + 96));
    }
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    goto LABEL_15;
  }
LABEL_16:
  if (v19 != *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", &stru_388.sectname[10], "shift == gradient_out->Dim()", v20);
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v35);
}

void sub_191F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::EnsureCorrs((void *)a1);
  if (*(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 920);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  *a3 = 0;
  uint64_t v10 = *(char **)(a1 + 208);
  uint64_t v11 = *(char **)(a1 + 216);
  uint64_t v12 = v11 - v10;
  if (v11 != v10)
  {
    int v13 = 0;
    unint64_t v14 = v12 >> 3;
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    do
    {
      uint64_t v15 = **(void **)v10;
      if (v15) {
        LODWORD(v15) = *(_DWORD *)(v15 + 12) * *(_DWORD *)(v15 + 8);
      }
      v13 += v15;
      *a3 = v13;
      v10 += 8;
      --v14;
    }
    while (v14);
  }
  uint64_t v16 = *(void *)(a1 + 232);
  uint64_t v17 = *(void *)(a1 + 240);
  *a2 = 0;
  if (v17 != v16)
  {
    unint64_t v18 = 0;
    do
    {
      *a3 += kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v16 + 8 * v18++), v6, v7, v8, v9);
      uint64_t v16 = *(void *)(a1 + 232);
    }
    while (v18 < (*(void *)(a1 + 240) - v16) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::EnsureCorrs(void *a1)
{
  unint64_t v1 = (uint64_t)(a1[27] - a1[26]) >> 3;
  if (v1 != (uint64_t)(a1[30] - a1[29]) >> 3)
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 29, v1);
    if (a1[27] != a1[26]) {
      operator new();
    }
  }
}

void sub_192150()
{
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::VectorizeWeightsCorrs()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 949);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::IsUpdatable()
{
  return 0;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetType()
{
  return 272;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 270;
}

void *kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::PerturbParams(void *a1, float a2)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check((uint64_t)a1);
  memset(&v25[1], 0, 24);
  v25[0] = off_262E60;
  int v21 = 1729;
  unsigned int v6 = 5489;
  char v22 = 0;
  int v23 = 5489;
  uint64_t v7 = 1;
  for (uint64_t i = 3; i != 626; ++i)
  {
    int v9 = 1812433253 * (v6 ^ (v6 >> 30));
    unsigned int v6 = v9 + v7;
    *(&v21 + i) = i + v9 - 2;
    ++v7;
  }
  uint64_t v24 = 0;
  uint64_t v10 = (uint64_t *)a1[26];
  for (uint64_t j = (uint64_t *)a1[27]; v10 != j; ++v10)
  {
    kaldi::CuVector<float>::Resize((uint64_t)v25, (*(_DWORD *)(*v10 + 16) * *(_DWORD *)(*v10 + 20)), 1u, v4, v5);
    kaldi::CuRandom::RandGauss<float>(&v21, (uint64_t)v25, 0.0, 1.0);
    uint64_t v12 = *v10;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v18, (uint64_t)v25, *(_DWORD *)(*v10 + 20));
    kaldi::CuMatrixBase<float>::AddMat(v12, (uint64_t)&v18, 111, v13, v14, a2, 1.0);
    unint64_t v18 = off_262D80;
    long long v19 = 0u;
    long long v20 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v18);
  }
  uint64_t v16 = a1[32];
  uint64_t v15 = a1[33];
  while (v16 != v15)
  {
    (*(void (**)(float))(**(void **)v16 + 216))(a2);
    v16 += 8;
  }
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v21);
  return kaldi::CuVector<float>::~CuVector(v25);
}

void sub_1923A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(va);
  kaldi::CuVector<float>::~CuVector((void *)(v7 - 112));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((void *)a1);
  int v11 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 464) = v11;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", &stru_2E8.segname[14], "input.NumCols() == input_dim_", v10);
  }
  if (*(_DWORD *)(a3 + 20) != v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", &stru_2E8.segname[15], "diff.NumRows() == batch_size", v10);
  }
  if (*(_DWORD *)(a3 + 16) != *(_DWORD *)(a1 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)&stru_2E8.addr, "diff.NumCols() == output_dim_", v10);
  }
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 328), *(int *)(a1 + 96));
  if (*(unsigned char *)(a1 + 460) && *(int *)(a1 + 96) >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = *(void *)(a1 + 328) + v13;
      *(void *)(v15 + 32) = a4;
      kaldi::nnet1::Component::Backpropagate(*(_DWORD **)(*(void *)(a1 + 256) + 8 * v14), *(void *)(a1 + 280) + v13, *(void *)(a1 + 304) + v13, a3, v15, a5);
      uint64_t v16 = *(void *)(*(void *)(a1 + 256) + 8 * v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 232))(v16, *(void *)(a1 + 280) + v13, a3, a4, a5);
      ++v14;
      v13 += 48;
    }
    while (v14 < *(int *)(a1 + 96));
  }
  if (*(int *)(a1 + 80) > 1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v43, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 787);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v43, "WordMultiVecComponent doesn't support multi-batches yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v43);
  }
  memset(v44, 0, sizeof(v44));
  BOOL v43 = off_262D80;
  uint64_t v17 = *(void *)(a1 + 232);
  if (*(void *)(a1 + 240) != v17)
  {
    unint64_t v18 = 0;
    do
    {
      kaldi::CuMatrixBase<float>::SetZero(*(void *)(v17 + 8 * v18++));
      uint64_t v17 = *(void *)(a1 + 232);
    }
    while (v18 < (*(void *)(a1 + 240) - v17) >> 3);
  }
  if (*(int *)(a1 + 96) < 1)
  {
    int v20 = 0;
  }
  else
  {
    uint64_t v37 = a3;
    uint64_t v40 = a4;
    uint64_t v19 = 0;
    unsigned int v38 = 0;
    int v20 = 0;
    uint64_t v39 = a1 + 352;
    long long v36 = (unsigned int *)(a1 + 400);
    float v21 = (float)v11;
    do
    {
      if (*(unsigned char *)(a1 + 460))
      {
        char v22 = (void (***)())(*(void *)(a1 + 328) + 48 * v19);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v41, v37, 0, *(_DWORD *)(v37 + 20), (const char *)v38, *(_DWORD *)(*(void *)(a1 + 152) + 4 * v19));
        *(void *)&v44[0] = v42[0];
        *(_OWORD *)((char *)v44 + 8) = *(_OWORD *)&v42[1];
        *((void *)&v44[1] + 1) = v42[3];
        uint64_t v41 = off_262D80;
        memset(v42, 0, sizeof(v42));
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v41);
        v38 += *(_DWORD *)(*(void *)(a1 + 152) + 4 * v19);
        char v22 = &v43;
      }
      float v23 = *(float *)(a1 + 452);
      if (v23 > 0.0)
      {
        *(void *)(a1 + 384) = v40;
        kaldi::CuMatrix<float>::operator=(v39, (uint64_t)v22);
        int v24 = *(_DWORD *)(a1 + 448);
        if (v24 == 2)
        {
          int v26 = *(unsigned __int8 *)(a1 + 84);
          *(void *)(a1 + 432) = v40;
          kaldi::CuMatrix<float>::Resize((uint64_t)v36, *(unsigned int *)(a1 + 372), *(unsigned int *)(a1 + 368), 1u, 0);
          if (v26) {
            float v30 = v21;
          }
          else {
            float v30 = 1.0;
          }
          char v22 = (void (***)())(a1 + 352);
          kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v39, v36, v23 * v30, v27, v28, v29);
        }
        else
        {
          char v22 = (void (***)())(a1 + 352);
          if (v24 == 1)
          {
            if (*(unsigned char *)(a1 + 84)) {
              float v25 = v21;
            }
            else {
              float v25 = 1.0;
            }
            char v22 = (void (***)())(a1 + 352);
            kaldi::nnet1::UpdatableComponent::ClipGradient(v39, v23 * v25);
          }
        }
      }
      uint64_t v31 = *(int *)(*(void *)(a1 + 176) + 4 * v19);
      *(void *)(*(void *)(*(void *)(a1 + 232) + 8 * v31) + 32) = v40;
      if (*(int *)(*(void *)(a1 + 128) + 4 * v19) >= 1)
      {
        int v32 = 0;
        do
        {
          uint64_t v33 = *(void *)(*(void *)(a1 + 232) + 8 * v31);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v41, a2, 0, *(_DWORD *)(a2 + 20), (const char *)(v20 + v32), 1);
          kaldi::CuMatrixBase<float>::AddIndexedRows(v33, (uint64_t)&v41, (uint64_t)v22, v34, v35, 1.0);
          uint64_t v41 = off_262D80;
          memset(v42, 0, sizeof(v42));
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v41);
          ++v32;
        }
        while (v32 < *(_DWORD *)(*(void *)(a1 + 128) + 4 * v19));
        v20 += v32;
      }
      ++v19;
    }
    while (v19 < *(int *)(a1 + 96));
  }
  if (v20 != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", &stru_338.sectname[6], "shift == input_dim_", v12);
  }
  BOOL v43 = off_262D80;
  memset(v44, 0, sizeof(v44));
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
}

void sub_1928C8()
{
}

void sub_1928DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  a22 = a9;
  *a10 = 0u;
  a10[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((void *)a1);
  float v9 = *(float *)(a1 + 72);
  int v10 = *(_DWORD *)(a1 + 76);
  if (v9 > 0.0 && *(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 857);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Using transform with gradient compression is not supported yet");
    goto LABEL_19;
  }
  int v11 = *(uint64_t **)(a1 + 256);
  uint64_t v12 = *(uint64_t **)(a1 + 264);
  while (v11 != v12)
  {
    uint64_t v13 = *v11++;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 256))(v13, a2, a3);
  }
  float v14 = *(float *)(a1 + 56);
  if (*(unsigned char *)(a1 + 84)) {
    float v14 = v14 / (float)*(int *)(a1 + 464);
  }
  if (v9 > 0.0)
  {
    if (*(int *)(a1 + 80) < 2)
    {
      if (*(void *)(a1 + 480) == *(void *)(a1 + 472)) {
        kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
      }
      kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 472), v10, v9, v6, v7, v8);
      goto LABEL_13;
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 868);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "the multi batch gradient quantization does not work yet");
LABEL_19:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
LABEL_13:
  uint64_t v15 = *(void *)(a1 + 208);
  if (*(void *)(a1 + 216) != v15)
  {
    unint64_t v16 = 0;
    do
    {
      kaldi::CuMatrixBase<float>::AddMat(*(void *)(v15 + 8 * v16), *(void *)(*(void *)(a1 + 232) + 8 * v16), 111, v7, v8, *(float *)(a1 + 456) * (float)-v14, 1.0);
      ++v16;
      uint64_t v15 = *(void *)(a1 + 208);
    }
    while (v16 < (*(void *)(a1 + 216) - v15) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(unsigned char *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 957);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Not implemented yet when transforms are used");
    goto LABEL_16;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 960);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Weights are already vectorized");
    goto LABEL_16;
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v10, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 963);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Performing vectorization of WordMultiVecComponent", 49);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v10);
  }
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208)) {
    kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub();
  }
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::CuSubVector<float>::CuSubVector(v10, a3, 0, v7, v8);
  kaldi::CuVectorBase<float>::Set((uint64_t)v10, *(float *)(a1 + 456));
  int v9 = *(_DWORD *)(a3 + 16) - v7;
  *(void *)(a3 + 8) += 4 * v7;
  *(_DWORD *)(a3 + 16) = v9;
  *(void *)(a3 + 24) = 0;
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((void *)a1);
  if (a4[1] - *a4 != 32)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 983);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "veccorrs->size() == 1");
LABEL_16:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208)) {
    kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub();
  }
  *(unsigned char *)(a1 + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v10, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 994);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Done  vectorization of WordMultiVecComponent", 44);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v10);
  }
}

void sub_192E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::IsUpdatable()
{
  return 1;
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<kaldi::CuMatrix<float>>::__vdeallocate((void **)a1);
    if (a4 > 0x555555555555555) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<kaldi::CuMatrix<float>>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    uint64_t v13 = a2 + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,0>(a2, v13, (uint64_t)v9);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  unint64_t v16 = *(void **)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = v16 - 6;
    unint64_t v18 = v16 - 6;
    uint64_t v19 = v16 - 6;
    do
    {
      uint64_t v20 = *v19;
      v19 -= 6;
      uint64_t result = (*(uint64_t (**)(void *))(v20 + 16))(v18);
      v17 -= 6;
      BOOL v21 = v18 == v15;
      unint64_t v18 = v19;
    }
    while (!v21);
  }
  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_193034(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_19303C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<kaldi::CuMatrix<float>>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 48;
      uint64_t v6 = v3 - 48;
      int v7 = v3 - 48;
      do
      {
        uint64_t v8 = *(void *)v7;
        v7 -= 48;
        (*(void (**)(char *))(v8 + 16))(v6);
        v5 -= 48;
        BOOL v9 = v6 == v1;
        uint64_t v6 = v7;
      }
      while (!v9);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      kaldi::CuMatrix<float>::operator=(a3, v4);
      v4 += 48;
      a3 += 48;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = off_26E7B8;
  *(_OWORD *)(a1 + 56) = xmmword_20CEC0;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_26EA68;
  *(void *)(a1 + 88) = off_26EB98;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 152), *(const void **)(a2 + 152), *(void *)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  int v4 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 200) = v4;
  uint64_t v5 = (char **)(a1 + 256);
  uint64_t v25 = a1 + 304;
  uint64_t v26 = a1 + 280;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  uint64_t v24 = a1 + 328;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = off_262DC8;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 400) = off_262DC8;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  int v6 = *(unsigned __int8 *)(a2 + 460);
  *(unsigned char *)(a1 + 460) = v6;
  if (v6 && *(int *)(a1 + 96) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a2 + 256) + 8 * v7);
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
      uint64_t v10 = v9;
      uint64_t v12 = *(uint64_t **)(a1 + 264);
      unint64_t v11 = *(void *)(a1 + 272);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v5) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v5;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 272, v17);
        }
        else {
          unint64_t v18 = 0;
        }
        uint64_t v19 = (uint64_t *)&v18[8 * v14];
        uint64_t *v19 = v10;
        uint64_t v13 = v19 + 1;
        BOOL v21 = *(char **)(a1 + 256);
        uint64_t v20 = *(char **)(a1 + 264);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--uint64_t v19 = v22;
          }
          while (v20 != v21);
          uint64_t v20 = *v5;
        }
        *(void *)(a1 + 256) = v19;
        *(void *)(a1 + 264) = v13;
        *(void *)(a1 + 272) = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v12 = v9;
        uint64_t v13 = v12 + 1;
      }
      *(void *)(a1 + 264) = v13;
      ++v7;
    }
    while (v7 < *(int *)(a1 + 96));
  }
  if (v26 != a2 + 280) {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v26, *(void *)(a2 + 280), *(void *)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 4));
  }
  if (v25 != a2 + 304) {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v25, *(void *)(a2 + 304), *(void *)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 4));
  }
  if (v24 != a2 + 328) {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v24, *(void *)(a2 + 328), *(void *)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 4));
  }
  kaldi::CuMatrix<float>::operator=(a1 + 352, a2 + 352);
  kaldi::CuMatrix<float>::operator=(a1 + 400, a2 + 400);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3);
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>();
  }
  if (*(void *)(a2 + 480) != *(void *)(a2 + 472)) {
    kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
  }
  *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
  return a1;
}

void sub_1935EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, kaldi::nnet1::QuantizerResidualAggregator *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *a10;
  if (*a10)
  {
    *((void *)v20 + 20) = v22;
    operator delete(v22);
  }
  float v23 = *a11;
  if (*a11)
  {
    *((void *)v20 + 17) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *a12;
  if (*a12)
  {
    *((void *)v20 + 14) = v24;
    operator delete(v24);
  }
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a13);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v20);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>()
{
}

void sub_19374C()
{
}

uint64_t kaldi::CompressedMatrix::CompressedMatrix<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  kaldi::Matrix<float>::Matrix<float>((uint64_t)v7, a2, 111, a4, a5);
  kaldi::CompressedMatrix::CopyFromMat<float>(a1, (kaldi::ContextDependency *)v7);
  kaldi::Matrix<float>::~Matrix((uint64_t)v7);
  return a1;
}

void sub_1937C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((void *)v11 + 4) = 0;
    std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (kaldi::CompressedMatrix ***)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, kaldi::CompressedMatrix **a2)
{
  int v4 = *(kaldi::CompressedMatrix ***)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 1;
    do
    {
      int v6 = *v5;
      *uint64_t v5 = 0;
      if (v6) {
        std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v5, v6);
      }
    }
    while (v5-- != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v13;
    uint64_t v15 = &v13[8 * v10];
    unint64_t v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    uint64_t v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_193A44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(kaldi::CompressedMatrix ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(kaldi::CompressedMatrix ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    int v3 = *v1;
    *uint64_t v1 = 0;
    if (v3) {
      std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v1, v3);
    }
    ++v1;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(kaldi::CompressedMatrix **)(i - 8);
    *(void *)(i - 8) = 0;
    if (v5) {
      std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100](i - 8, v5);
    }
  }
}

void std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100](int a1, kaldi::CompressedMatrix *this)
{
  if (this)
  {
    kaldi::CompressedMatrix::Destroy(this);
    operator delete();
  }
}

void DSP::LP(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v6 = *(const double **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  std::vector<double>::vector(&__p, a2 + 1);
  if (v13 != __p)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = (unint64_t)(v5 - (void)v6) >> 3;
    do
    {
      double v10 = cblas_ddot(v9, *(const double **)a1, 1, (const double *)(*(void *)a1 + v7), 1);
      uint64_t v11 = __p;
      *(double *)((char *)__p + v7) = v10;
      ++v8;
      v7 += 8;
      LODWORD(v9) = v9 - 1;
    }
    while (v8 < (v13 - v11) >> 3);
  }
  DSP::levinson_durbin((double **)&__p, a3);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
}

void sub_193D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DSP::levinson_durbin(double **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)a1[1] - (char *)*a1;
  if (**a1 == 0.0)
  {
    __p[0] = 0;
    std::vector<double>::vector(a2, v3 >> 3, __p);
    *(void *)*a2 = 0x3FF0000000000000;
  }
  else
  {
    std::vector<double>::vector(a2, (int)(v3 >> 3));
    std::vector<double>::vector(__p, (int)(v3 >> 3));
    uint64_t v5 = (void *)*a2;
    *(void *)*a2 = 0x3FF0000000000000;
    uint64_t v6 = (double *)__p[0];
    *(void *)__p[0] = 0x3FF0000000000000;
    if ((int)(((unint64_t)v3 >> 3) - 1) >= 1)
    {
      uint64_t v7 = 0;
      unint64_t v8 = *a1;
      double v9 = **a1;
      uint64_t v10 = ((unint64_t)v3 >> 3);
      unint64_t v11 = 1;
      do
      {
        if (v11 < 2)
        {
          double v16 = v8[v11] / v9;
          *(double *)&v5[v11] = v16;
          double v17 = -v16;
        }
        else
        {
          double v12 = 0.0;
          uint64_t v13 = v6 + 1;
          uint64_t v14 = v7;
          do
          {
            double v15 = *v13++;
            double v12 = v12 + v15 * v8[v14--];
          }
          while (v14);
          double v16 = (v8[v11] - v12) / v9;
          *(double *)&v5[v11] = v16;
          double v17 = -v16;
          uint64_t v18 = 1;
          uint64_t v19 = v7;
          do
          {
            *(double *)&v5[v18] = v6[v18] + v17 * v6[v19];
            ++v18;
            --v19;
          }
          while (v19);
        }
        double v9 = v9 * (v17 * v16 + 1.0);
        uint64_t v20 = ((unint64_t)v3 >> 3);
        BOOL v21 = v6;
        uint64_t v22 = v5;
        do
        {
          uint64_t v23 = *v22++;
          *(void *)v21++ = v23;
          --v20;
        }
        while (v20);
        ++v11;
        ++v7;
      }
      while (v11 != v10);
      uint64_t v24 = (double *)(v5 + 1);
      uint64_t v25 = v10 - 1;
      do
      {
        *uint64_t v24 = -*v24;
        ++v24;
        --v25;
      }
      while (v25);
    }
    *uint64_t v5 = 0x3FF0000000000000;
    __p[1] = v6;
    operator delete(v6);
  }
}

void sub_193F5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::insert(uint64_t a1, char *__src, float *a3)
{
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    uint64_t v14 = *(unsigned char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 2) + 1;
    if (v15 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = (__src - v14) >> 2;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 1 > v15) {
      unint64_t v15 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v7, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    std::string __p = v19;
    uint64_t v22 = &v19[4 * v16];
    uint64_t v23 = v22;
    uint64_t v24 = &v19[4 * v18];
    std::__split_buffer<float>::push_back(&__p, a3);
    uint64_t v4 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(float *)__src = *a3;
    *(void *)(a1 + 8) = __src + 4;
  }
  else
  {
    uint64_t v10 = __src + 4;
    unint64_t v11 = v6 - 4;
    double v12 = v6;
    while (v11 < v6)
    {
      int v13 = *(_DWORD *)v11;
      v11 += 4;
      *(_DWORD *)double v12 = v13;
      v12 += 4;
    }
    *(void *)(a1 + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-4 * ((v6 - v10) >> 2)], __src, v6 - v10);
    }
    *(float *)uint64_t v4 = *a3;
  }
  return v4;
}

void sub_1940E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DSP::firfilter(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(const void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (v6 - *(void *)a1) >> 3;
  std::string __p = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&__p, v5, v6, v7);
  unint64_t v8 = v22 - 8;
  if (__p != v22 && v8 > __p)
  {
    uint64_t v10 = (char *)__p + 8;
    do
    {
      uint64_t v11 = *((void *)v10 - 1);
      *((void *)v10 - 1) = *(void *)v8;
      *(void *)unint64_t v8 = v11;
      v8 -= 8;
      BOOL v12 = v10 >= v8;
      v10 += 8;
    }
    while (!v12);
  }
  unint64_t v13 = (a2[1] - *a2) >> 3;
  uint64_t v20 = 0;
  std::vector<double>::vector(a3, v13, &v20);
  uint64_t v14 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    do
    {
      unint64_t v17 = v15 + 1;
      if (v16 >= (int)v7) {
        int v18 = v7;
      }
      else {
        int v18 = v16;
      }
      if ((int)v17 >= (int)v7) {
        int v19 = v7;
      }
      else {
        int v19 = v15 + 1;
      }
      *(double *)(*a3 + 8 * v15) = cblas_ddot(v19, (const double *)(v14 + 8 * ((int)v15 - v18 + 1)), 1, (const double *)__p + (int)v7 - v19, 1);
      uint64_t v14 = *a2;
      ++v16;
      ++v15;
    }
    while (v17 < (a2[1] - *a2) >> 3);
  }
  if (__p)
  {
    uint64_t v22 = (char *)__p;
    operator delete(__p);
  }
}

void sub_194248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DSP::fft(DSP *this, unint64_t a2, int a3)
{
  unint64_t v3 = 2 * a2;
  if (2 * a2)
  {
    unint64_t v5 = 1;
    unint64_t v6 = 1;
    do
    {
      if (v6 > v5)
      {
        unint64_t v7 = (int *)((char *)this + 4 * v6);
        int v8 = *v7;
        unint64_t v9 = (int *)((char *)this + 4 * v5);
        *unint64_t v7 = *v9;
        int *v9 = v8;
        int v10 = v7[1];
        v7[1] = v9[1];
        v9[1] = v10;
      }
      if (a2 < 2 || v6 <= a2)
      {
        unint64_t v11 = a2;
      }
      else
      {
        unint64_t v11 = a2;
        do
        {
          unint64_t v12 = v11;
          v6 -= v11;
          v11 >>= 1;
        }
        while (v12 >= 4 && v6 > v11);
      }
      v6 += v11;
      v5 += 2;
    }
    while (v5 < v3);
    if (v3 >= 3)
    {
      double v13 = (double)a3;
      unint64_t v14 = 2;
      do
      {
        unint64_t v15 = 2 * v14;
        double v16 = sin(6.28318531 / (double)v14 * v13 * 0.5);
        double v17 = sin(6.28318531 / (double)v14 * v13);
        if (v14)
        {
          double v18 = v16 * (v16 * -2.0);
          uint64_t v19 = 4 * v14;
          double v20 = 1.0;
          double v21 = 0.0;
          uint64_t v22 = this;
          uint64_t v23 = 2;
          unint64_t v24 = 1;
          do
          {
            double v25 = -v21;
            if (v24 <= v3)
            {
              uint64_t v26 = v22;
              uint64_t v27 = v23;
              do
              {
                uint64_t v28 = (float *)((char *)v26 + v19);
                double v29 = *(float *)((char *)v26 + v19 + 4);
                double v30 = *(float *)((char *)v26 + v19 + 8);
                float v31 = v25 * v30 + v20 * v29;
                *(float *)&double v29 = v21 * v29 + v20 * v30;
                v28[1] = *((float *)v26 + 1) - v31;
                LODWORD(v30) = *((_DWORD *)v26 + 2);
                v28[2] = *(float *)&v30 - *(float *)&v29;
                *((float *)v26 + 1) = *((float *)v26 + 1) + v31;
                *((float *)v26 + 2) = *(float *)&v30 + *(float *)&v29;
                v27 += v15;
                uint64_t v26 = (DSP *)((char *)v26 + 8 * v14);
              }
              while (v27 - 1 <= v3);
            }
            double v32 = v17 * v20;
            double v20 = v20 + v17 * v25 + v20 * v18;
            v24 += 2;
            double v21 = v21 + v32 + v21 * v18;
            v23 += 2;
            uint64_t v22 = (DSP *)((char *)v22 + 8);
          }
          while (v24 < v14);
        }
        v14 *= 2;
      }
      while (v3 > v15);
    }
  }
}

void *std::endl[abi:ne180100]<char,std::char_traits<char>>(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_194504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void DSP::high_pass_filter(unint64_t *a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  std::vector<double>::resize((uint64_t)a2, ((unint64_t)((uint64_t)(a1[1] - *a1) >> 3) >> 1) + ((a2[1] - *a2) >> 3), (void *)(a2[1] - 8));
  std::vector<double>::vector(&__p, (uint64_t)(a1[1] - *a1) >> 3, (void *)*a2);
  std::vector<double>::__insert_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((uint64_t)a2, *a2, (char *)__p, v27, (v27 - (unsigned char *)__p) >> 3);
  std::vector<double>::vector(a3, (a2[1] - *a2) >> 3);
  unint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = v6 - *a1;
  if (v6 != *a1)
  {
    unint64_t v9 = (void *)(v6 - 8);
    if ((unint64_t)v9 > v7)
    {
      unint64_t v10 = v7 + 8;
      do
      {
        uint64_t v11 = *(void *)(v10 - 8);
        *(void *)(v10 - 8) = *v9;
        *v9-- = v11;
        BOOL v12 = v10 >= (unint64_t)v9;
        v10 += 8;
      }
      while (!v12);
    }
  }
  uint64_t v13 = *a2;
  if (a2[1] == *a2)
  {
    double v21 = *a3;
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v15 = (unint64_t)v8 >> 3;
    int v16 = 1;
    do
    {
      unint64_t v17 = v14 + 1;
      if (v16 >= (int)v15) {
        int v18 = v15;
      }
      else {
        int v18 = v16;
      }
      if ((int)v17 >= (int)v15) {
        int v19 = v15;
      }
      else {
        int v19 = v14 + 1;
      }
      double v20 = cblas_ddot(v19, (const double *)(v13 + 8 * ((int)v14 - v18 + 1)), 1, (const double *)(*a1 + 8 * ((int)v15 - v19)), 1);
      double v21 = *a3;
      *(double *)&(*a3)[8 * v14] = v20;
      uint64_t v13 = *a2;
      ++v16;
      ++v14;
    }
    while (v17 < (a2[1] - *a2) >> 3);
    uint64_t v8 = a1[1] - *a1;
  }
  uint64_t v22 = (uint64_t)((double)(unint64_t)(v8 >> 3) * 1.5);
  if (v22)
  {
    uint64_t v23 = &v21[8 * v22];
    unint64_t v24 = a3[1];
    uint64_t v25 = v24 - v23;
    if (v24 != v23) {
      memmove(v21, v23, v24 - v23);
    }
    a3[1] = &v21[v25];
  }
  if (__p)
  {
    uint64_t v27 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1946D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DSP::high_pass_filter(unint64_t *a1@<X0>, char **a2@<X1>, char **a3@<X8>)
{
  std::vector<short>::resize((uint64_t)a2, ((unint64_t)((uint64_t)(a1[1] - *a1) >> 3) >> 1) + ((a2[1] - *a2) >> 1), (_WORD *)a2[1] - 1);
  unint64_t v6 = (uint64_t)(a1[1] - *a1) >> 3;
  *(double *)&std::string __p = (double)*(__int16 *)*a2;
  std::vector<double>::vector(&v37, v6, &__p);
  std::vector<short>::__insert_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((uint64_t)a2, *a2, (double *)v37, v38, ((char *)v38 - (unsigned char *)v37) >> 3);
  unint64_t v7 = *a2;
  uint64_t v8 = (__int16 *)a2[1];
  unint64_t v9 = ((char *)v8 - *a2) >> 1;
  BOOL v35 = 0;
  uint64_t v36 = 0;
  *(double *)&std::string __p = 0.0;
  std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>((char *)&__p, (__int16 *)v7, v8, v9);
  std::vector<short>::vector(a3, (a2[1] - *a2) >> 1);
  unint64_t v12 = *a1;
  unint64_t v11 = a1[1];
  uint64_t v13 = v11 - *a1;
  if (v11 != *a1)
  {
    uint64_t v14 = (void *)(v11 - 8);
    if ((unint64_t)v14 > v12)
    {
      unint64_t v15 = v12 + 8;
      do
      {
        v10.i64[0] = *(void *)(v15 - 8);
        *(void *)(v15 - 8) = *v14;
        *v14-- = v10.i64[0];
        BOOL v16 = v15 >= (unint64_t)v14;
        v15 += 8;
      }
      while (!v16);
    }
  }
  unint64_t v17 = (double *)__p;
  if (v35 == __p)
  {
    uint64_t v28 = *a3;
    unint64_t v17 = v35;
  }
  else
  {
    uint64_t v18 = 0;
    unint64_t v19 = (unint64_t)v13 >> 3;
    int v20 = 1;
    v10.i32[0] = 1191181824;
    int8x16_t v33 = v10;
    do
    {
      unint64_t v21 = v18 + 1;
      if (v20 >= (int)v19) {
        int v22 = v19;
      }
      else {
        int v22 = v20;
      }
      if ((int)v21 >= (int)v19) {
        int v23 = v19;
      }
      else {
        int v23 = v18 + 1;
      }
      double v24 = cblas_ddot(v23, &v17[(int)v18 - v22 + 1], 1, (const double *)(*a1 + 8 * ((int)v19 - v23)), 1);
      *(float *)v25.i32 = v24;
      v26.i64[0] = 0x8000000080000000;
      v26.i64[1] = 0x8000000080000000;
      double v27 = *(float *)vbslq_s8(v26, v33, v25).i32;
      if (fabs(v24) > 32767.0) {
        double v24 = v27;
      }
      uint64_t v28 = *a3;
      *(_WORD *)&(*a3)[2 * v18] = (int)v24;
      unint64_t v17 = (double *)__p;
      ++v20;
      ++v18;
    }
    while (v21 < ((char *)v35 - (unsigned char *)__p) >> 3);
    uint64_t v13 = a1[1] - *a1;
  }
  uint64_t v29 = (uint64_t)((double)(unint64_t)(v13 >> 3) * 1.5);
  if (v29)
  {
    double v30 = &v28[2 * v29];
    float v31 = a3[1];
    uint64_t v32 = v31 - v30;
    if (v31 != v30)
    {
      memmove(v28, v30, v31 - v30);
      unint64_t v17 = (double *)__p;
    }
    a3[1] = &v28[v32];
  }
  if (v17)
  {
    BOOL v35 = v17;
    operator delete(v17);
  }
  if (v37)
  {
    unsigned int v38 = (double *)v37;
    operator delete(v37);
  }
}

void sub_19494C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<short>::resize(uint64_t a1, unint64_t a2, _WORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    std::vector<short>::__append((void **)a1, a2 - v3, a3);
  }
}

void DSP::resample(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2 == a3)
  {
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *(void *)(a4 + 16) = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
  }
  else
  {
    std::string v148 = 0;
    std::string v149 = 0;
    uint64_t v150 = 0;
    v145 = 0;
    long long v146 = 0;
    uint64_t v147 = 0;
    DSP::get_resampling_highpass_iir_filter_coefficients(a2, a3, (char *)&v148, (char *)&v145);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    if (a2 <= a3)
    {
      uint64_t v37 = *(void *)a1;
      unsigned int v38 = "INS_17DefaultCacheStoreINS_6ArcTplINS_17TropicalWeightTplIfEEEEEENS_21SequenceComposeFilterINS_14ContextMatcherIS5_iEES9_EENS_24GenericComposeStateTableIS5_NS_18IntegerFilterStateIaEENS_24DefaultComposeStateTupleIiSD_EENS_21CompactHashStateTableISF_NS_11ComposeHashISF_EEEEEEEE";
      if (*(void *)(a1 + 8) - *(void *)a1 < 3uLL)
      {
        unint64_t v58 = 0;
        uint64_t v39 = 0;
      }
      else
      {
        uint64_t v39 = 0;
        *(double *)v8.i64 = (double)a2;
        double v40 = (double)a2 / (double)a3;
        uint64_t v41 = (void *)(a4 + 16);
        double v42 = 0.0;
        v8.i32[0] = 1191181824;
        int8x16_t v137 = v8;
        do
        {
          int v43 = vcvtmd_s64_f64(v42);
          uint64_t v44 = (__int16 *)(v37 + 2 * v43);
          *(double *)v9.i64 = (double)*v44;
          double v45 = (v42 - (double)v43) * (double)v44[1] + (1.0 - (v42 - (double)v43)) * *(double *)v9.i64;
          *(float *)v9.i32 = v45;
          v46.i64[0] = 0x8000000080000000;
          v46.i64[1] = 0x8000000080000000;
          int8x16_t v9 = vbslq_s8(v46, v137, v9);
          *(double *)v9.i64 = *(float *)v9.i32;
          if (fabs(v45) > 32767.0) {
            double v45 = *(double *)v9.i64;
          }
          int v47 = (int)v45;
          if ((unint64_t)v39 >= *v41)
          {
            uint64_t v48 = *(_WORD **)a4;
            uint64_t v49 = (uint64_t)v39 - *(void *)a4;
            if (v49 <= -3) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v50 = v49 >> 1;
            unint64_t v51 = *v41 - (void)v48;
            if (v51 <= (v49 >> 1) + 1) {
              uint64_t v52 = v50 + 1;
            }
            else {
              uint64_t v52 = *v41 - (void)v48;
            }
            if (v51 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v53 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v53 = v52;
            }
            if (v53)
            {
              int v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(a4 + 16, v53);
              uint64_t v48 = *(_WORD **)a4;
              uint64_t v39 = *(_WORD **)(a4 + 8);
            }
            else
            {
              int v54 = 0;
            }
            uint64_t v55 = &v54[2 * v50];
            *(_WORD *)uint64_t v55 = v47;
            int v56 = v55 + 2;
            while (v39 != v48)
            {
              __int16 v57 = *--v39;
              *((_WORD *)v55 - 1) = v57;
              v55 -= 2;
            }
            *(void *)a4 = v55;
            *(void *)(a4 + 8) = v56;
            *(void *)(a4 + 16) = &v54[2 * v53];
            if (v48) {
              operator delete(v48);
            }
            uint64_t v39 = v56;
          }
          else
          {
            *v39++ = v47;
          }
          *(void *)(a4 + 8) = v39;
          double v42 = v40 + v42;
          uint64_t v37 = *(void *)a1;
        }
        while (v42 + 1.0 < (double)(unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1));
        unint64_t v58 = *(_WORD **)a4;
      }
      int64_t v64 = v149 - (unsigned char *)v148;
      uint64_t v65 = ((v149 - (unsigned char *)v148) << 28) + 0x100000000;
      LOWORD(__dst) = 0;
      std::vector<short>::resize(a4, v39 - v58 + (v65 >> 32), &__dst);
      unint64_t v66 = (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 1;
      std::string __p = 0;
      std::vector<double>::vector(&__dst, v66, &__p);
      std::string __p = 0;
      long long v141 = 0;
      uint64_t v142 = 0;
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&__p, v145, (uint64_t)v146, (v146 - (unsigned char *)v145) >> 3);
      if (__p != v141)
      {
        unint64_t v67 = v141 - 8;
        if (v141 - 8 > __p)
        {
          long long v68 = (char *)__p + 8;
          do
          {
            uint64_t v69 = *((void *)v68 - 1);
            *((void *)v68 - 1) = *(void *)v67;
            *(void *)unint64_t v67 = v69;
            v67 -= 8;
            BOOL v21 = v68 >= v67;
            v68 += 8;
          }
          while (!v21);
        }
      }
      uint64_t v71 = (double *)__dst;
      uint64_t v70 = v144;
      if (v144 == __dst)
      {
        uint64_t v71 = v144;
      }
      else
      {
        uint64_t v72 = 0;
        uint64_t v73 = 0;
        unint64_t v74 = (unint64_t)(v146 - (unsigned char *)v145) >> 3;
        unint64_t v75 = (unint64_t)(v149 - (unsigned char *)v148) >> 3;
        do
        {
          unint64_t v76 = v73 + 1;
          if ((int)v75 < 1)
          {
            double v80 = 0.0;
          }
          else
          {
            uint64_t v77 = 0;
            if ((int)v76 >= (int)v75) {
              int v78 = v75;
            }
            else {
              int v78 = v73 + 1;
            }
            uint64_t v79 = (__int16 *)(*(void *)a4 + v72);
            double v80 = 0.0;
            do
            {
              int v81 = *v79--;
              double v80 = v80 + (double)v81 * *((double *)v148 + v77++);
            }
            while (v77 < v78);
          }
          if ((int)v76 >= (int)v74) {
            int v82 = v74;
          }
          else {
            int v82 = v73 + 1;
          }
          double v83 = cblas_ddot(v82 - 1, &v71[v73 - (v82 - 1)], 1, (const double *)__p + (int)v74 - v82, 1);
          uint64_t v71 = (double *)__dst;
          *((double *)__dst + v73) = v80 - v83;
          uint64_t v70 = v144;
          v72 += 2;
          ++v73;
        }
        while (v76 < v144 - v71);
        unsigned int v38 = "N3fst17ComposeFstMatcherINS_17DefaultCacheStoreINS_6ArcTplINS_17TropicalWeightTplIfEEEEEENS_21SequenceComp"
              "oseFilterINS_14ContextMatcherIS5_iEES9_EENS_24GenericComposeStateTableIS5_NS_18IntegerFilterStateIaEENS_24"
              "DefaultComposeStateTupleIiSD_EENS_21CompactHashStateTableISF_NS_11ComposeHashISF_EEEEEEEE"
            + 24;
      }
      uint64_t v84 = v65 >> 32;
      if ((unint64_t)(v64 << 28) <= 0xFFFFFFFEFFFFFFFFLL)
      {
        uint64_t v85 = &v71[v84];
        uint64_t v86 = (char *)v70 - (char *)v85;
        if (v70 != v85) {
          memmove(v71, v85, (char *)v70 - (char *)v85);
        }
        long long v144 = (double *)((char *)v71 + v86);
      }
      std::vector<short>::resize(a4, ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 1) - v84);
      uint64_t v89 = (double *)__dst;
      if (v144 != __dst)
      {
        unint64_t v90 = ((char *)v144 - (unsigned char *)__dst) >> 3;
        unsigned int v91 = *(_WORD **)a4;
        if (v90 <= 1) {
          unint64_t v90 = 1;
        }
        v87.i32[0] = *((_DWORD *)v38 + 629);
        v92.i64[0] = 0x8000000080000000;
        v92.i64[1] = 0x8000000080000000;
        uint64_t v93 = (double *)__dst;
        do
        {
          double v94 = *v93++;
          double v95 = v94;
          *(float *)v88.i32 = v94;
          int8x16_t v88 = vbslq_s8(v92, v87, v88);
          *(double *)v88.i64 = *(float *)v88.i32;
          if (fabs(v94) > 32767.0) {
            double v95 = *(double *)v88.i64;
          }
          *v91++ = (int)v95;
          --v90;
        }
        while (v90);
      }
      if (__p)
      {
        long long v141 = (char *)__p;
        operator delete(__p);
        uint64_t v89 = (double *)__dst;
      }
    }
    else
    {
      unint64_t v10 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
      std::string __p = 0;
      std::vector<double>::vector(&__dst, v10, &__p);
      if (v148 == v149 || v145 == v146)
      {
        uint64_t v59 = *(__int16 **)a1;
        uint64_t v60 = *(void *)(a1 + 8) - *(void *)a1;
        if (v60)
        {
          unint64_t v61 = v60 >> 1;
          uint64_t v62 = (double *)__dst;
          if (v61 <= 1) {
            unint64_t v61 = 1;
          }
          do
          {
            int v63 = *v59++;
            *v62++ = (double)v63;
            --v61;
          }
          while (v61);
        }
      }
      else
      {
        int64_t v14 = v149 - (unsigned char *)v148;
        uint64_t v15 = ((v149 - (unsigned char *)v148) << 28) + 0x100000000;
        unint64_t v16 = ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1) + (v15 >> 32);
        LOWORD(__p) = 0;
        std::vector<short>::resize(a1, v16, &__p);
        uint64_t v17 = v15 >> 32;
        std::string __p = 0;
        std::vector<double>::resize((uint64_t)&__dst, (v15 >> 32) + (((char *)v144 - (unsigned char *)__dst) >> 3), &__p);
        std::string __p = 0;
        long long v141 = 0;
        uint64_t v142 = 0;
        std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&__p, v145, (uint64_t)v146, (v146 - (unsigned char *)v145) >> 3);
        if (__p != v141)
        {
          uint64_t v18 = v141 - 8;
          if (v141 - 8 > __p)
          {
            unint64_t v19 = (char *)__p + 8;
            do
            {
              uint64_t v20 = *((void *)v19 - 1);
              *((void *)v19 - 1) = *(void *)v18;
              *(void *)uint64_t v18 = v20;
              v18 -= 8;
              BOOL v21 = v19 >= v18;
              v19 += 8;
            }
            while (!v21);
          }
        }
        uint64_t v22 = *(void *)(a1 + 8);
        if (v22 == *(void *)a1)
        {
          BOOL v35 = (char *)__dst;
          uint64_t v36 = *(void *)(a1 + 8);
        }
        else
        {
          int64_t v135 = v14;
          uint64_t v136 = v15 >> 32;
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          unint64_t v25 = (unint64_t)(v146 - (unsigned char *)v145) >> 3;
          unint64_t v26 = (unint64_t)(v149 - (unsigned char *)v148) >> 3;
          uint64_t v22 = *(void *)a1;
          do
          {
            unint64_t v27 = v24 + 1;
            if ((int)v26 < 1)
            {
              double v31 = 0.0;
            }
            else
            {
              uint64_t v28 = 0;
              if ((int)v27 >= (int)v26) {
                int v29 = v26;
              }
              else {
                int v29 = v24 + 1;
              }
              double v30 = (__int16 *)(v22 + v23);
              double v31 = 0.0;
              do
              {
                int v32 = *v30--;
                double v31 = v31 + (double)v32 * *((double *)v148 + v28++);
              }
              while (v28 < v29);
            }
            if ((int)v27 >= (int)v25) {
              int v33 = v25;
            }
            else {
              int v33 = v24 + 1;
            }
            double v34 = cblas_ddot(v33 - 1, (const double *)__dst + v24 - (v33 - 1), 1, (const double *)__p + (int)v25 - v33, 1);
            BOOL v35 = (char *)__dst;
            *((double *)__dst + v24) = v31 - v34;
            uint64_t v22 = *(void *)a1;
            uint64_t v36 = *(void *)(a1 + 8);
            v23 += 2;
            ++v24;
          }
          while (v27 < (v36 - *(void *)a1) >> 1);
          int64_t v14 = v135;
          uint64_t v17 = v136;
        }
        if ((unint64_t)(v14 << 28) <= 0xFFFFFFFEFFFFFFFFLL)
        {
          uint64_t v96 = &v35[8 * v17];
          int64_t v97 = (char *)v144 - v96;
          if (v144 != (double *)v96)
          {
            memmove(v35, v96, (char *)v144 - v96);
            uint64_t v22 = *(void *)a1;
            uint64_t v36 = *(void *)(a1 + 8);
          }
          long long v144 = (double *)&v35[v97];
        }
        std::vector<short>::resize(a1, ((v36 - v22) >> 1) - v17);
        if (__p)
        {
          long long v141 = (char *)__p;
          operator delete(__p);
        }
      }
      *(double *)v12.i64 = (double)a3;
      double v98 = (double)a2 / (double)a3;
      *(double *)v11.i64 = (double)(int)v98;
      uint64_t v89 = (double *)__dst;
      if (v98 == *(double *)v11.i64)
      {
        if (v144 == __dst)
        {
          uint64_t v89 = v144;
        }
        else
        {
          int v99 = (void *)(a4 + 16);
          int v100 = *(_WORD **)(a4 + 8);
          double v101 = 0.0;
          v12.i32[0] = 1191181824;
          int8x16_t v138 = v12;
          double v102 = 0.0;
          do
          {
            double v103 = v89[(unint64_t)v101];
            *(float *)v13.i32 = v103;
            v104.i64[0] = 0x8000000080000000;
            v104.i64[1] = 0x8000000080000000;
            int8x16_t v13 = vbslq_s8(v104, v138, v13);
            *(double *)v13.i64 = *(float *)v13.i32;
            if (fabs(v103) > 32767.0) {
              double v103 = *(double *)v13.i64;
            }
            int v105 = (int)v103;
            if ((unint64_t)v100 >= *v99)
            {
              uint64_t v107 = *(_WORD **)a4;
              uint64_t v108 = (uint64_t)v100 - *(void *)a4;
              if (v108 <= -3) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v109 = v108 >> 1;
              unint64_t v110 = *v99 - (void)v107;
              if (v110 <= (v108 >> 1) + 1) {
                uint64_t v111 = v109 + 1;
              }
              else {
                uint64_t v111 = *v99 - (void)v107;
              }
              if (v110 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v112 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v112 = v111;
              }
              if (v112)
              {
                uint64_t v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(a4 + 16, v112);
                uint64_t v107 = *(_WORD **)a4;
                int v100 = *(_WORD **)(a4 + 8);
              }
              else
              {
                uint64_t v113 = 0;
              }
              uint64_t v114 = &v113[2 * v109];
              *(_WORD *)uint64_t v114 = v105;
              uint64_t v106 = v114 + 2;
              while (v100 != v107)
              {
                __int16 v115 = *--v100;
                *((_WORD *)v114 - 1) = v115;
                v114 -= 2;
              }
              *(void *)a4 = v114;
              *(void *)(a4 + 8) = v106;
              *(void *)(a4 + 16) = &v113[2 * v112];
              if (v107) {
                operator delete(v107);
              }
            }
            else
            {
              _WORD *v100 = v105;
              uint64_t v106 = v100 + 1;
            }
            *(void *)(a4 + 8) = v106;
            double v102 = v98 + v102;
            double v101 = round(v102);
            uint64_t v89 = (double *)__dst;
            int v100 = v106;
          }
          while (v101 < (double)(unint64_t)(((char *)v144 - (unsigned char *)__dst) >> 3));
        }
      }
      else if ((unint64_t)((char *)v144 - (unsigned char *)__dst) >= 9)
      {
        float v116 = (void *)(a4 + 16);
        float v117 = *(_WORD **)(a4 + 8);
        double v118 = 0.0;
        v11.i32[0] = 1191181824;
        int8x16_t v139 = v11;
        do
        {
          int v119 = vcvtmd_s64_f64(v118);
          double v120 = v118 - (double)v119;
          uint64_t v121 = &v89[v119];
          v13.i64[0] = *(uint64_t *)v121;
          double v122 = v120 * v121[1] + (1.0 - v120) * *v121;
          *(float *)v13.i32 = v122;
          v123.i64[0] = 0x8000000080000000;
          v123.i64[1] = 0x8000000080000000;
          int8x16_t v13 = vbslq_s8(v123, v139, v13);
          *(double *)v13.i64 = *(float *)v13.i32;
          if (fabs(v122) > 32767.0) {
            double v122 = *(double *)v13.i64;
          }
          int v124 = (int)v122;
          if ((unint64_t)v117 >= *v116)
          {
            long long v126 = *(_WORD **)a4;
            uint64_t v127 = (uint64_t)v117 - *(void *)a4;
            if (v127 <= -3) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v128 = v127 >> 1;
            unint64_t v129 = *v116 - (void)v126;
            if (v129 <= (v127 >> 1) + 1) {
              uint64_t v130 = v128 + 1;
            }
            else {
              uint64_t v130 = *v116 - (void)v126;
            }
            if (v129 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v131 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v131 = v130;
            }
            if (v131)
            {
              long long v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(a4 + 16, v131);
              long long v126 = *(_WORD **)a4;
              float v117 = *(_WORD **)(a4 + 8);
            }
            else
            {
              long long v132 = 0;
            }
            long long v133 = &v132[2 * v128];
            *(_WORD *)long long v133 = v124;
            long long v125 = v133 + 2;
            while (v117 != v126)
            {
              __int16 v134 = *--v117;
              *((_WORD *)v133 - 1) = v134;
              v133 -= 2;
            }
            *(void *)a4 = v133;
            *(void *)(a4 + 8) = v125;
            *(void *)(a4 + 16) = &v132[2 * v131];
            if (v126) {
              operator delete(v126);
            }
          }
          else
          {
            *float v117 = v124;
            long long v125 = v117 + 1;
          }
          *(void *)(a4 + 8) = v125;
          double v118 = v98 + v118;
          uint64_t v89 = (double *)__dst;
          float v117 = v125;
        }
        while (v118 + 1.0 < (double)(unint64_t)(((char *)v144 - (unsigned char *)__dst) >> 3));
      }
    }
    if (v89)
    {
      long long v144 = v89;
      operator delete(v89);
    }
    if (v145)
    {
      long long v146 = v145;
      operator delete(v145);
    }
    if (v148)
    {
      std::string v149 = v148;
      operator delete(v148);
    }
  }
}

void sub_195348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  unint64_t v26 = *(void **)v24;
  if (*(void *)v24)
  {
    *(void *)(v24 + 8) = v26;
    operator delete(v26);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

char *DSP::get_resampling_highpass_iir_filter_coefficients(int a1, int a2, char *a3, char *a4)
{
  BOOL v5 = a1 == 192000 && a2 == 48000;
  if (v5 || a1 == 48000 && a2 == 192000)
  {
    long long v22 = xmmword_212028;
    long long v23 = *(_OWORD *)"ǤKqc^R?P";
    long long v24 = xmmword_212048;
    uint64_t v25 = 0x3ED6646F7914977ALL;
    long long v20 = xmmword_212008;
    long long v21 = unk_212018;
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a3, (char *)&v20, (uint64_t)&v26, 0xBuLL);
    long long v22 = xmmword_212080;
    long long v23 = unk_212090;
    long long v24 = xmmword_2120A0;
    uint64_t v25 = 0x3F81F0BBCE8AD716;
    long long v20 = xmmword_212060;
    long long v21 = unk_212070;
    return std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a4, (char *)&v20, (uint64_t)&v26, 0xBuLL);
  }
  else if (a1 == 48000 && a2 == 24000 || a1 == 24000 && a2 == 48000)
  {
    long long v22 = xmmword_2120D8;
    long long v23 = unk_2120E8;
    long long v24 = xmmword_2120F8;
    uint64_t v25 = 0x3F60FC4BECDC6AB6;
    long long v20 = xmmword_2120B8;
    long long v21 = unk_2120C8;
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a3, (char *)&v20, (uint64_t)&v26, 0xBuLL);
    long long v22 = xmmword_212130;
    long long v23 = unk_212140;
    long long v24 = xmmword_212150;
    uint64_t v25 = 0x3EF536CAFD28F0DELL;
    long long v20 = xmmword_212110;
    long long v21 = unk_212120;
    return std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a4, (char *)&v20, (uint64_t)&v26, 0xBuLL);
  }
  else if (a1 == 48000 && a2 == 22050 || a1 == 22050 && a2 == 48000)
  {
    long long v22 = xmmword_212188;
    long long v23 = unk_212198;
    long long v24 = xmmword_2121A8;
    uint64_t v25 = 0x3F57F43AF3997A24;
    long long v20 = xmmword_212168;
    long long v21 = unk_212178;
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a3, (char *)&v20, (uint64_t)&v26, 0xBuLL);
    long long v22 = xmmword_2121E0;
    long long v23 = unk_2121F0;
    long long v24 = xmmword_212200;
    uint64_t v25 = 0x3F0099635CC000B7;
    long long v20 = xmmword_2121C0;
    long long v21 = unk_2121D0;
    return std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a4, (char *)&v20, (uint64_t)&v26, 0xBuLL);
  }
  else if (a1 == 48000 && a2 == 16000 || a1 == 16000 && a2 == 48000)
  {
    long long v22 = xmmword_212238;
    long long v23 = unk_212248;
    long long v24 = xmmword_212258;
    uint64_t v25 = 0x3F121FC3C3426C68;
    long long v20 = xmmword_212218;
    long long v21 = unk_212228;
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a3, (char *)&v20, (uint64_t)&v26, 0xBuLL);
    long long v22 = xmmword_212290;
    long long v23 = unk_2122A0;
    long long v24 = xmmword_2122B0;
    uint64_t v25 = 0x3F559CF8CCB10BC7;
    long long v20 = xmmword_212270;
    long long v21 = unk_212280;
    return std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a4, (char *)&v20, (uint64_t)&v26, 0xBuLL);
  }
  else
  {
    BOOL v8 = a1 == 22050 && a2 == 24000;
    BOOL v9 = a2 == 22050 && a1 == 24000;
    if (v9 || v8)
    {
      long long v22 = xmmword_2122E8;
      long long v23 = unk_2122F8;
      long long v24 = xmmword_212308;
      uint64_t v25 = 0x3FDC38EDB811BB02;
      long long v20 = xmmword_2122C8;
      long long v21 = unk_2122D8;
      std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a3, (char *)&v20, (uint64_t)&v26, 0xBuLL);
      long long v22 = xmmword_212340;
      long long v23 = unk_212350;
      long long v24 = xmmword_212360;
      uint64_t v25 = 0x3FC8E405490937EDLL;
      long long v20 = xmmword_212320;
      long long v21 = unk_212330;
      return std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a4, (char *)&v20, (uint64_t)&v26, 0xBuLL);
    }
    else
    {
      BOOL v11 = a1 == 16000 && a2 == 24000;
      BOOL v12 = a2 == 16000 && a1 == 24000;
      if (v12 || v11)
      {
        long long v22 = xmmword_212398;
        long long v23 = unk_2123A8;
        long long v24 = xmmword_2123B8;
        uint64_t v25 = 0x3F95500E95DE96B5;
        long long v20 = xmmword_212378;
        long long v21 = unk_212388;
        std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a3, (char *)&v20, (uint64_t)&v26, 0xBuLL);
        long long v22 = xmmword_2123F0;
        long long v23 = unk_212400;
        long long v24 = xmmword_212410;
        uint64_t v25 = 0x3F3C6470E276F150;
        long long v20 = xmmword_2123D0;
        long long v21 = unk_2123E0;
        return std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a4, (char *)&v20, (uint64_t)&v26, 0xBuLL);
      }
      else
      {
        BOOL v14 = a1 == 16000 && a2 == 22050;
        BOOL v15 = a2 == 16000 && a1 == 22050;
        if (v15 || v14)
        {
          long long v22 = xmmword_212448;
          long long v23 = unk_212458;
          long long v24 = xmmword_212468;
          uint64_t v25 = 0x3FA110EF889EA268;
          long long v20 = xmmword_212428;
          long long v21 = unk_212438;
          std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a3, (char *)&v20, (uint64_t)&v26, 0xBuLL);
          long long v22 = xmmword_2124A0;
          long long v23 = unk_2124B0;
          long long v24 = xmmword_2124C0;
          uint64_t v25 = 0x3F5234165E744109;
          long long v20 = xmmword_212480;
          long long v21 = unk_212490;
          return std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a4, (char *)&v20, (uint64_t)&v26, 0xBuLL);
        }
        else
        {
          BOOL v17 = a1 == 8000 && a2 == 16000;
          BOOL v18 = a2 == 8000 && a1 == 16000;
          if (v18 || v17)
          {
            long long v22 = xmmword_2124F8;
            long long v23 = unk_212508;
            long long v24 = xmmword_212518;
            uint64_t v25 = 0x3F509BFBA50105AELL;
            long long v20 = xmmword_2124D8;
            long long v21 = unk_2124E8;
            std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a3, (char *)&v20, (uint64_t)&v26, 0xBuLL);
            long long v22 = xmmword_212550;
            long long v23 = unk_212560;
            long long v24 = xmmword_212570;
            uint64_t v25 = 0x3F0C9754C76B5B04;
            long long v20 = xmmword_212530;
            long long v21 = unk_212540;
            return std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a4, (char *)&v20, (uint64_t)&v26, 0xBuLL);
          }
          else
          {
            unint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Warning: Anti-alias filter for resampling not supported: output may be distorted.", 81);
            return (char *)std::endl[abi:ne180100]<char,std::char_traits<char>>(v19);
          }
        }
      }
    }
  }
}

void DSP::get_highpass_70hz_coefficients(DSP *this)
{
  unsigned int v1 = off_25CE20(this);
  unint64_t v3 = v2;
  BOOL v18 = 0;
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  BOOL v15 = 0;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  BOOL v12 = 0;
  int8x16_t v13 = 0;
  uint64_t v14 = 0;
  __p[0] = 0;
  __p[1] = 0;
  BOOL v11 = 0;
  memcpy(__dst, &unk_20DDA8, sizeof(__dst));
  std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)&v18, (char *)__dst, (uint64_t)&v22, 0x213uLL);
  memcpy(__dst, &unk_20EE40, sizeof(__dst));
  std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)&v15, (char *)__dst, (uint64_t)&v22, 0x213uLL);
  memcpy(__dst, &unk_20FED8, sizeof(__dst));
  std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)&v12, (char *)__dst, (uint64_t)&v22, 0x213uLL);
  memcpy(__dst, &unk_210F70, sizeof(__dst));
  std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)__p, (char *)__dst, (uint64_t)&v22, 0x213uLL);
  if ((int)v1 <= 3999)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Error: Sampling rate not supported: ", 36);
    std::locale v4 = (void *)std::ostream::operator<<();
    BOOL v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" Hz", 3);
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
    unint64_t v6 = std::locale::use_facet(__dst, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_8;
  }
  if (v1 >> 5 < 0x271)
  {
    unint64_t v7 = &v15;
LABEL_7:
    *(_OWORD *)unint64_t v3 = *(_OWORD *)v7;
    v3[2] = v7[2];
    unint64_t v3 = v7;
LABEL_8:
    *unint64_t v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    goto LABEL_10;
  }
  if (v1 >> 4 < 0x753)
  {
    unint64_t v7 = &v12;
    goto LABEL_7;
  }
  if (v1 > 0x1116F)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Error: Sampling rate not supported: ", 36);
    BOOL v8 = (void *)std::ostream::operator<<();
    BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" Hz", 3);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v9);
    exit(1);
  }
  *(_OWORD *)unint64_t v3 = *(_OWORD *)__p;
  v3[2] = v11;
LABEL_10:
  if (v12)
  {
    int8x16_t v13 = v12;
    operator delete(v12);
  }
  if (v15)
  {
    unint64_t v16 = v15;
    operator delete(v15);
  }
  if (v18)
  {
    unint64_t v19 = v18;
    operator delete(v18);
  }
}

void sub_195CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,std::locale a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void DSP::smooth_voiced_pitch_contour(double **a1@<X0>, DSP *a2@<X1>, void *a3@<X8>)
{
  if ((int)a2 > 2)
  {
    DSP::make_pitch_contour_continuous((uint64_t)a1, v31);
    DSP::window_hann_norm_double(a2, (double **)__p);
    unint64_t v9 = a1[1] - *a1;
    uint64_t v29 = 0;
    std::vector<double>::vector(a3, v9, &v29);
    unsigned int v10 = (a2 - 1) >> 1;
    BOOL v11 = *a1;
    BOOL v12 = a1[1];
    unint64_t v13 = v12 - *a1;
    if (v12 != *a1)
    {
      uint64_t v14 = 0;
      uint64_t v15 = -v10;
      if (v13 <= 1) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = v12 - *a1;
      }
      do
      {
        uint64_t v17 = (double *)v31[0];
        BOOL v18 = (double *)__p[0];
        int v19 = 2 * v10 + 1;
        uint64_t v20 = v15;
        long long v21 = (void *)*a3;
        do
        {
          if ((v20 & 0x8000000000000000) == 0 && v13 > v20) {
            *(double *)&v21[v14] = *(double *)&v21[v14] + v17[v20] * *v18;
          }
          ++v18;
          ++v20;
          --v19;
        }
        while (v19);
        ++v14;
        ++v15;
      }
      while (v14 != v16);
    }
    unint64_t v22 = 0;
    long long v23 = (char *)v31[0];
    long long v24 = (void *)*a3;
    if (v10 <= 1) {
      unsigned int v25 = 1;
    }
    else {
      unsigned int v25 = (a2 - 1) >> 1;
    }
    uint64_t v26 = 8 * v13 - 8;
    uint64_t v27 = 8 * v25;
    do
    {
      v24[v22 / 8] = *(void *)&v23[v22];
      *(void *)((char *)v24 + v26) = *(void *)&v23[v26];
      v26 -= 8;
      v22 += 8;
    }
    while (v27 != v22);
    if (v12 != v11)
    {
      uint64_t v28 = (void *)*a3;
      if (v13 <= 1) {
        unint64_t v13 = 1;
      }
      do
      {
        if (*v11 == 0.0) {
          *uint64_t v28 = 0;
        }
        ++v28;
        ++v11;
        --v13;
      }
      while (v13);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v31[0])
    {
      v31[1] = v31[0];
      operator delete(v31[0]);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    BOOL v5 = *a1;
    uint64_t v6 = (uint64_t)a1[1];
    unint64_t v7 = (v6 - (uint64_t)*a1) >> 3;
    std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(a3, v5, v6, v7);
  }
}

void sub_195F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

double DSP::make_pitch_contour_continuous@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(a2, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v5 = *(double **)a1;
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)a1;
  unint64_t v7 = (unint64_t)v6 >> 3;
  if ((int)((unint64_t)v6 >> 3) < 1) {
    return result;
  }
  unint64_t v8 = 0;
  unint64_t v9 = (void *)*a2;
  uint64_t v10 = (int)(v6 >> 3);
  double result = 1.0;
  while (v5[(int)v8] != 0.0)
  {
    unint64_t v13 = (v8 + 1);
LABEL_24:
    unint64_t v8 = v13;
    if ((int)v13 >= (int)v7) {
      return result;
    }
  }
  LODWORD(v11) = v7 - v8;
  if ((int)v7 <= (int)v8)
  {
    LODWORD(v11) = 0;
    unint64_t v13 = v8;
    if (v8) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v12 = 0;
    while (v5[(int)v8 + v12] == 0.0)
    {
      if (v10 - (int)v8 == ++v12)
      {
        unint64_t v13 = v7;
        if (!v8) {
          goto LABEL_14;
        }
        goto LABEL_15;
      }
    }
    unint64_t v13 = (v8 + v12);
    LODWORD(v11) = v12;
    if (v8) {
      goto LABEL_15;
    }
  }
LABEL_14:
  if (v11 == v7) {
    return result;
  }
LABEL_15:
  if (!v8)
  {
    if (v11)
    {
      uint64_t v16 = v9;
      uint64_t v11 = v11;
      do
      {
        *v16++ = *(void *)&v5[(int)v13];
        --v11;
      }
      while (v11);
    }
    goto LABEL_24;
  }
  if (v13 != v7)
  {
    if (v11)
    {
      double v14 = (double)((int)v11 + 1);
      uint64_t v11 = v11;
      uint64_t v15 = (double *)&v9[(int)v8];
      do
      {
        *v15++ = (1.0 - (double)(int)v11 / v14) * v5[(int)v13] + v5[(int)v8 - 1] * ((double)(int)v11 / v14);
        --v11;
      }
      while (v11);
    }
    goto LABEL_24;
  }
  if (v11)
  {
    uint64_t v17 = v11;
    BOOL v18 = (double *)&v9[(int)v8];
    do
    {
      double result = v5[(int)v8 - 1];
      *v18++ = result;
      --v17;
    }
    while (v17);
  }
  return result;
}

void DSP::window_hann_norm_double(DSP *this@<X0>, double **a2@<X8>)
{
  LODWORD(v2) = this;
  std::vector<double>::vector(a2, (int)this);
  if ((int)v2 >= 1)
  {
    uint64_t v4 = 0;
    BOOL v5 = *a2;
    uint64_t v2 = v2;
    double v6 = 0.0;
    do
    {
      long double v7 = (1.0 - cos((double)(int)v4 * 6.28318531 / ((double)(int)v2 + -1.0))) * 0.5;
      v5[v4] = v7;
      double v6 = v6 + v7;
      ++v4;
    }
    while (v2 != v4);
    unint64_t v8 = *a2;
    do
    {
      *unint64_t v8 = *v8 / v6;
      ++v8;
      --v2;
    }
    while (v2);
  }
}

double DSP::gradient_index(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1] - *a1;
  double result = 0.0;
  if ((unint64_t)v2 >= 0x11)
  {
    unint64_t v4 = v2 >> 3;
    if (v4 <= 3) {
      unint64_t v4 = 3;
    }
    double v5 = *(double *)(v1 + 8);
    double v6 = (double *)(v1 + 16);
    unint64_t v7 = v4 - 2;
    do
    {
      double v8 = *v6;
      double v9 = *v6 - v5;
      BOOL v10 = v9 > 0.0;
      BOOL v11 = v9 < 0.0;
      double v12 = v5 - *(v6 - 2);
      int v13 = v10 - v11 - (v12 > 0.0);
      if (v12 < 0.0) {
        ++v13;
      }
      if (v13 < 0) {
        int v13 = -v13;
      }
      double result = result + (double)v13 * vabdd_f64(v8, v5);
      ++v6;
      double v5 = v8;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t DSP::zero_crossing_rate_plus_zero(uint64_t a1)
{
  uint64_t v1 = *(double **)a1;
  uint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  uint64_t result = 0;
  uint64_t v4 = v2 - 1;
  if (v4)
  {
    double v6 = *v1;
    double v5 = v1 + 1;
    double v7 = v6;
    do
    {
      BOOL v8 = v7 == 0.0;
      double v9 = v7;
      double v10 = *v5++;
      double v7 = v10;
      uint64_t v11 = (*(void *)&v10 ^ *(void *)&v9) >> 63;
      int v12 = v8;
      if (v7 != 0.0) {
        int v12 = 0;
      }
      uint64_t result = (result + v11 + v12);
      --v4;
    }
    while (v4);
  }
  return result;
}

void DSP::IAIF(double **a1@<X0>, uint64_t *a2@<X1>, double **a3@<X2>, int a4@<W3>, double **a5@<X8>, double a6@<D0>)
{
  unint64_t v12 = (char *)a1[1] - (char *)*a1;
  std::vector<double>::vector(v83, (int)((uint64_t)v12 >> 3));
  std::vector<double>::vector(a5, (int)((uint64_t)v12 >> 3));
  unint64_t v13 = v12 >> 3;
  std::vector<double>::vector(__p, (int)((v12 >> 3) + a4));
  uint64_t v14 = (v12 >> 3);
  if ((int)(v12 >> 3) >= 1)
  {
    uint64_t v15 = *a1;
    uint64_t v16 = *a3;
    uint64_t v17 = (v12 >> 3);
    BOOL v18 = (double *)v83[0];
    do
    {
      double v19 = *v15++;
      double v20 = v19;
      double v21 = *v16++;
      *v18++ = v20 * v21;
      --v17;
    }
    while (v17);
  }
  DSP::LP((uint64_t)v83, 1, &v79);
  unint64_t v22 = (void *)v79;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  unint64_t v76 = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v76, (const void *)v79, *((uint64_t *)&v79 + 1), (uint64_t)(*((void *)&v79 + 1) - v79) >> 3);
  DSP::firfilter((uint64_t)&v76, a2, &v79);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v79;
  uint64_t v82 = v80;
  uint64_t v80 = 0;
  long long v79 = 0uLL;
  if (v76)
  {
    uint64_t v77 = v76;
    operator delete(v76);
  }
  if ((int)v13 >= 1)
  {
    long long v23 = *a5;
    long long v24 = (uint64_t *)((char *)__p[0] + 8 * a4);
    uint64_t v25 = (v12 >> 3);
    do
    {
      uint64_t v26 = *v24++;
      *(void *)v23++ = v26;
      --v25;
    }
    while (v25);
    uint64_t v27 = *a5;
    uint64_t v28 = *a3;
    uint64_t v29 = (v12 >> 3);
    do
    {
      double v30 = *v28++;
      double *v27 = *v27 * v30;
      ++v27;
      --v29;
    }
    while (v29);
  }
  DSP::LP((uint64_t)a5, a4, &v79);
  if (v22) {
    operator delete(v22);
  }
  double v31 = (void *)v79;
  unint64_t v74 = 0;
  uint64_t v75 = 0;
  uint64_t v73 = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v73, (const void *)v79, *((uint64_t *)&v79 + 1), (uint64_t)(*((void *)&v79 + 1) - v79) >> 3);
  DSP::firfilter((uint64_t)&v73, a2, &v79);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v79;
  uint64_t v82 = v80;
  uint64_t v80 = 0;
  long long v79 = 0uLL;
  if (v73)
  {
    unint64_t v74 = v73;
    operator delete(v73);
  }
  int v32 = *a5;
  if ((int)v13 >= 1)
  {
    int v33 = (uint64_t *)((char *)__p[0] + 8 * a4);
    uint64_t v34 = (v12 >> 3);
    BOOL v35 = *a5;
    do
    {
      uint64_t v36 = *v33++;
      *(void *)v35++ = v36;
      --v34;
    }
    while (v34);
  }
  uint64_t v37 = (char *)a5[1] - (char *)v32;
  if ((unint64_t)v37 >= 9)
  {
    unint64_t v38 = v37 >> 3;
    uint64_t v39 = 2;
    if (v38 > 2) {
      uint64_t v39 = v38;
    }
    double v40 = v32 + 1;
    double v41 = *v32;
    uint64_t v42 = v39 - 1;
    do
    {
      double v41 = *v40 + a6 * v41;
      *v40++ = v41;
      --v42;
    }
    while (v42);
  }
  if ((int)v13 >= 1)
  {
    int v43 = *a3;
    uint64_t v44 = (v12 >> 3);
    do
    {
      double v45 = *v43++;
      *int v32 = *v32 * v45;
      ++v32;
      --v44;
    }
    while (v44);
  }
  DSP::LP((uint64_t)a5, 8, &v79);
  if (v31) {
    operator delete(v31);
  }
  int8x16_t v46 = (void *)v79;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v70 = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v70, (const void *)v79, *((uint64_t *)&v79 + 1), (uint64_t)(*((void *)&v79 + 1) - v79) >> 3);
  DSP::firfilter((uint64_t)&v70, a2, &v79);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v79;
  uint64_t v82 = v80;
  uint64_t v80 = 0;
  long long v79 = 0uLL;
  if (v70)
  {
    uint64_t v71 = v70;
    operator delete(v70);
  }
  int v47 = *a5;
  if ((int)v13 >= 1)
  {
    uint64_t v48 = (uint64_t *)((char *)__p[0] + 8 * a4);
    uint64_t v49 = (v12 >> 3);
    uint64_t v50 = *a5;
    do
    {
      uint64_t v51 = *v48++;
      *(void *)v50++ = v51;
      --v49;
    }
    while (v49);
  }
  uint64_t v52 = (char *)a5[1] - (char *)v47;
  if ((unint64_t)v52 >= 9)
  {
    unint64_t v53 = v52 >> 3;
    uint64_t v54 = 2;
    if (v53 > 2) {
      uint64_t v54 = v53;
    }
    uint64_t v55 = v47 + 1;
    double v56 = *v47;
    uint64_t v57 = v54 - 1;
    do
    {
      double v56 = *v55 + a6 * v56;
      *v55++ = v56;
      --v57;
    }
    while (v57);
  }
  if ((int)v13 >= 1)
  {
    unint64_t v58 = *a3;
    uint64_t v59 = (v12 >> 3);
    do
    {
      double v60 = *v58++;
      *int v47 = *v47 * v60;
      ++v47;
      --v59;
    }
    while (v59);
  }
  DSP::LP((uint64_t)a5, a4, &v79);
  if (v46) {
    operator delete(v46);
  }
  unint64_t v61 = (void *)v79;
  long long v68 = 0;
  uint64_t v69 = 0;
  unint64_t v67 = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v67, (const void *)v79, *((uint64_t *)&v79 + 1), (uint64_t)(*((void *)&v79 + 1) - v79) >> 3);
  DSP::firfilter((uint64_t)&v67, a2, &v79);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v62 = (char *)v79;
  *(_OWORD *)std::string __p = v79;
  uint64_t v82 = v80;
  uint64_t v80 = 0;
  long long v79 = 0uLL;
  if (v67)
  {
    long long v68 = v67;
    operator delete(v67);
    int v63 = (char *)__p[0];
  }
  else
  {
    int v63 = v62;
  }
  if ((int)v13 < 1)
  {
    if (!v63) {
      goto LABEL_60;
    }
  }
  else
  {
    int64_t v64 = *a5;
    uint64_t v65 = &v63[8 * a4];
    do
    {
      uint64_t v66 = *(void *)v65;
      v65 += 8;
      *(void *)v64++ = v66;
      --v14;
    }
    while (v14);
  }
  __p[1] = v63;
  operator delete(v63);
LABEL_60:
  if (v83[0])
  {
    v83[1] = v83[0];
    operator delete(v83[0]);
  }
  if (v61) {
    operator delete(v61);
  }
}

void sub_196728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  double v30 = *(void **)v26;
  if (*(void *)v26)
  {
    *(void *)(v26 + 8) = v30;
    operator delete(v30);
  }
  double v31 = *(void **)(v28 - 120);
  if (v31)
  {
    *(void *)(v28 - 112) = v31;
    operator delete(v31);
  }
  if (v27) {
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void sub_1967DC()
{
}

void sub_1967E8()
{
}

void sub_1967F4()
{
}

void DSP::medfilt(char **a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  double v5 = *a1;
  uint64_t v6 = (uint64_t)a1[1];
  unint64_t v7 = (v6 - (uint64_t)*a1) >> 3;
  if (v7 > (int)a2)
  {
    uint64_t v8 = a2 | 1;
    if ((int)v8 > 2)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(a3, v5, v6, v7);
      std::vector<double>::vector(__p, a2 | 1);
      double v10 = *a1;
      if (1 - v8 + ((a1[1] - *a1) >> 3))
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        uint64_t v11 = __p[0];
        do
        {
          if ((a2 & 0x80000000) == 0)
          {
            uint64_t v14 = &v10[v12];
            uint64_t v15 = a2 | 1;
            uint64_t v16 = v11;
            do
            {
              uint64_t v17 = *(void *)v14;
              v14 += 8;
              *v16++ = v17;
              --v15;
            }
            while (v15);
          }
          std::__sort<std::__less<double,double> &,double *>();
          uint64_t v11 = __p[0];
          *(void *)(*a3 + 8 * (v13 + (a2 >> 1))) = *((void *)__p[0] + (a2 >> 1));
          ++v13;
          double v10 = *a1;
          v12 += 8;
        }
        while (1 - v8 + ((a1[1] - *a1) >> 3) > v13);
      }
      else
      {
        uint64_t v11 = __p[0];
        if (!__p[0]) {
          return;
        }
      }
      __p[1] = v11;
      operator delete(v11);
      return;
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;

  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(a3, v5, v6, v7);
}

void sub_196954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void DSP::window_blackman(DSP *this@<X0>, void *a2@<X8>)
{
  int v2 = (int)this;
  unint64_t v3 = std::vector<double>::vector(a2, (int)this);
  int v4 = v2 - 1;
  if (v2 >= 1)
  {
    *(double *)&uint64_t v5 = (double)v2 + -1.0;
    uint64_t v6 = v2;
    uint64_t v7 = (v2 + 1) & 0x1FFFFFFFELL;
    float64x2_t v27 = (float64x2_t)vdupq_lane_s64(v5, 0);
    uint64x2_t v28 = (uint64x2_t)vdupq_n_s64(v6 - 1);
    float64x2_t v26 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v4), 0);
    int32x2_t v8 = (int32x2_t)0x100000000;
    uint64x2_t v9 = (uint64x2_t)xmmword_204A30;
    float64x2_t v24 = (float64x2_t)vdupq_n_s64(0x3FDAE147AE147AE1uLL);
    float64x2_t v25 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
    uint64_t v10 = (void *)(*v3 + 8);
    __asm { FMOV            V2.2D, #-0.5 }
    float64x2_t v22 = (float64x2_t)vdupq_n_s64(0x402921FB54442D18uLL);
    float64x2_t v23 = _Q2;
    int64x2_t v20 = vdupq_n_s64(2uLL);
    float64x2_t v21 = (float64x2_t)vdupq_n_s64(0x3FB47AE147AE147BuLL);
    do
    {
      int32x2_t v34 = vmovn_s64((int64x2_t)vcgeq_u64(v28, v9));
      int64x2_t v35 = (int64x2_t)v9;
      v16.i64[0] = v8.i32[0];
      v16.i64[1] = v8.i32[1];
      float64x2_t v33 = vcvtq_f64_s64(v16);
      float64x2_t v29 = vdivq_f64(vmulq_f64(v33, v25), v26);
      long double v31 = cos(v29.f64[1]);
      v17.f64[0] = cos(v29.f64[0]);
      v17.f64[1] = v31;
      float64x2_t v32 = vmlaq_f64(v24, v23, v17);
      float64x2_t v30 = vdivq_f64(vmulq_f64(v33, v22), v27);
      v33.f64[0] = cos(v30.f64[1]);
      v18.f64[0] = cos(v30.f64[0]);
      v18.f64[1] = v33.f64[0];
      float64x2_t v19 = vmlaq_f64(v32, v21, v18);
      if (v34.i8[0]) {
        *(v10 - 1) = *(void *)&v19.f64[0];
      }
      if (v34.i8[4]) {
        *uint64_t v10 = *(void *)&v19.f64[1];
      }
      uint64x2_t v9 = (uint64x2_t)vaddq_s64(v35, v20);
      int32x2_t v8 = vadd_s32(v8, (int32x2_t)0x200000002);
      v10 += 2;
      v7 -= 2;
    }
    while (v7);
  }
}

uint64_t DSP::remove_mean(uint64_t result)
{
  uint64_t v1 = *(double **)result;
  uint64_t v2 = *(void *)(result + 8) - *(void *)result;
  if (v2)
  {
    uint64_t v3 = v2 >> 3;
    if ((unint64_t)(v2 >> 3) <= 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = v2 >> 3;
    }
    double v5 = 0.0;
    uint64_t v6 = v4;
    uint64_t v7 = *(double **)result;
    do
    {
      double v8 = *v7++;
      double v5 = v5 + v8;
      --v6;
    }
    while (v6);
    double v9 = v5 / (double)(unint64_t)v3;
    do
    {
      *uint64_t v1 = *v1 - v9;
      ++v1;
      --v4;
    }
    while (v4);
  }
  return result;
}

void DSP::smooth(uint64_t a1@<X0>, int a2@<W1>, char **a3@<X8>)
{
  DSP::window_hann_norm_double((DSP *)((2 * a2) | 1u), &v11);
  double v8 = 0;
  double v9 = 0;
  uint64_t v10 = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v8, v11, (uint64_t)v12, v12 - v11);
  std::string __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&__p, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  DSP::high_pass_filter((unint64_t *)&v8, (uint64_t *)&__p, a3);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    double v9 = v8;
    operator delete(v8);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
}

void sub_196C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  int64x2_t v16 = *(void **)(v14 - 40);
  if (v16)
  {
    *(void *)(v14 - 32) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>(char *result, double *a2, double *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (float *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      double v8 = *a2++;
      float v9 = v8;
      *v7++ = v9;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_196D0C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float std::__split_buffer<float>::push_back(void *a1, float *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    double v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 1;
      }
      float64x2_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1[4], v16);
      float64x2_t v19 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
      int64x2_t v20 = (int *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v22 = 4 * (v21 >> 2);
        float64x2_t v23 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
          int v24 = *v20++;
          *(_DWORD *)float64x2_t v23 = v24;
          v23 += 4;
          v22 -= 4;
        }
        while (v22);
      }
      float64x2_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[4 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 2;
      BOOL v8 = v6 >> 2 < -1;
      uint64_t v9 = (v6 >> 2) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      unint64_t v13 = &v5[-4 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-4 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[4 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  float result = *a2;
  *(float *)uint64_t v4 = *a2;
  a1[2] = v4 + 4;
  return result;
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_196EA0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__insert_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  double v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    unint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64x2_t v28 = &v18[8 * v15];
    std::string __p = v18;
    int32x2_t v34 = v28;
    uint64_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    float64x2_t v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)uint64x2_t v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    int64x2_t v35 = v30;
    double v5 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[8 * a5];
    float64x2_t v23 = *(char **)(v9 - 8);
LABEL_17:
    int v24 = &v5[8 * a5];
    float64x2_t v25 = &v23[-8 * a5];
    float64x2_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      float64x2_t v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)float64x2_t v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  float64x2_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_197094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  double v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void std::vector<short>::__append(void **a1, unint64_t a2, _WORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(_WORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 1)
  {
    if (a2)
    {
      uint64_t v16 = 2 * a2;
      unint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 2;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    uint64_t v11 = a2 + (v10 >> 1);
    if (v11 < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 1;
    unint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 > v11) {
      uint64_t v11 = v13;
    }
    if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v18 = &v15[2 * v12];
    uint64_t v19 = &v18[2 * a2];
    uint64_t v20 = 2 * a2;
    uint64_t v21 = v18;
    do
    {
      *(_WORD *)uint64_t v21 = *a3;
      v21 += 2;
      v20 -= 2;
    }
    while (v20);
    int64_t v22 = &v15[2 * v14];
    float64x2_t v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 2)
    {
      __int16 v25 = *((_WORD *)i - 1);
      *((_WORD *)v18 - 1) = v25;
      v18 -= 2;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

char *std::vector<short>::__insert_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>(uint64_t a1, char *__src, double *a3, double *a4, uint64_t a5)
{
  double v5 = __src;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = a3;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 1)
  {
    unint64_t v13 = *(unsigned char **)a1;
    uint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 1);
    if (v14 < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__src - v13) >> 1;
    unint64_t v16 = v10 - (void)v13;
    if (v16 > v14) {
      uint64_t v14 = v16;
    }
    if (v16 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v17 = v14;
    }
    uint64_t v40 = v9;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v31 = &v18[2 * v15];
    std::string __p = v18;
    uint64_t v37 = v31;
    uint64_t v39 = &v18[2 * v17];
    uint64_t v32 = 2 * a5;
    float64x2_t v33 = &v31[2 * a5];
    do
    {
      double v34 = *v7++;
      *(_WORD *)uint64_t v31 = (int)v34;
      v31 += 2;
      v32 -= 2;
    }
    while (v32);
    unint64_t v38 = v33;
    double v5 = std::vector<short>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v38 != v37) {
      v38 += (v37 - v38 + 1) & 0xFFFFFFFFFFFFFFFELL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = (uint64_t)(v12 - (void)__src) >> 1;
  if (v19 >= a5)
  {
    uint64_t v20 = &a3[a5];
    uint64_t v21 = *(char **)(v9 - 8);
LABEL_18:
    __int16 v25 = &__src[2 * a5];
    float64x2_t v26 = &v21[-2 * a5];
    uint64_t v27 = v21;
    if ((unint64_t)v26 < v12)
    {
      uint64_t v27 = v21;
      do
      {
        __int16 v28 = *(_WORD *)v26;
        v26 += 2;
        *(_WORD *)uint64_t v27 = v28;
        v27 += 2;
      }
      while ((unint64_t)v26 < v12);
    }
    *(void *)(a1 + 8) = v27;
    if (v21 != v25) {
      memmove(&v21[-2 * ((v21 - v25) >> 1)], __src, v21 - v25);
    }
    if (v20 != v7)
    {
      uint64_t v29 = v5;
      do
      {
        double v30 = *v7++;
        *(_WORD *)uint64_t v29 = (int)v30;
        v29 += 2;
      }
      while (v7 != v20);
    }
    return v5;
  }
  uint64_t v20 = &a3[v19];
  uint64_t v21 = *(char **)(v9 - 8);
  if (v20 != a4)
  {
    int64_t v22 = v20;
    float64x2_t v23 = *(_WORD **)(v9 - 8);
    do
    {
      double v24 = *v22++;
      *v23++ = (int)v24;
      v21 += 2;
    }
    while (v22 != a4);
  }
  *(void *)(a1 + 8) = v21;
  if ((uint64_t)(v12 - (void)__src) >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_197498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<short>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  double v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      __int16 v9 = *((_WORD *)v8 - 1);
      v8 -= 2;
      *((_WORD *)v7 - 1) = v9;
      v7 -= 2;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  uint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

char *std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>(char *result, __int16 *a2, __int16 *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    float result = std::vector<std::pair<int,float>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (double *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      int v8 = *a2++;
      *v7++ = (double)v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1975F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    float result = std::vector<short>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_197670(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<float>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    size_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      void *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_197728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void estimate_and_vote_pitch(uint64_t a1@<X0>, DSP *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, void *a5@<X8>)
{
  int v7 = (int)a2;
  if (a3)
  {
    uint64_t v10 = (DSP *)&loc_3E80;
    if (a2 != 16000)
    {
      uint64_t v77 = 0;
      uint64_t v78 = 0;
      unint64_t v76 = 0;
      std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v76, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1);
      DSP::resample((uint64_t)&v76, v7, 16000, (uint64_t)&v59);
      uint64_t v11 = *(void **)a1;
      if (*(void *)a1)
      {
        *(void *)(a1 + 8) = v11;
        operator delete(v11);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
      }
      *(_OWORD *)a1 = v59;
      *(void *)(a1 + 16) = v60;
      uint64_t v60 = 0;
      long long v59 = 0uLL;
      if (v76)
      {
        uint64_t v77 = v76;
        operator delete(v76);
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v73 = 0;
  unint64_t v74 = 0;
  unint64_t v75 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "acf0");
  AutocF0::AutocF0(&v59, __p);
  if (v58 < 0) {
    operator delete(__p[0]);
  }
  unsigned int v61 = a3;
  unsigned int v62 = a4;
  AutocF0::estimate_pitch((unsigned int *)&v59, a1, v10, v50);
  int64_t v12 = v74;
  if ((unint64_t)v74 >= v75)
  {
    unint64_t v13 = (void *)std::vector<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>::__push_back_slow_path<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>> const&>(&v73, (uint64_t)v50);
  }
  else
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>::__tuple_impl(v74, (uint64_t)v50);
    unint64_t v13 = v12 + 12;
  }
  unint64_t v74 = v13;
  std::string::basic_string[abi:ne180100]<0>(v37, "iaif0");
  AutocF0::AutocF0(v39, v37);
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  v39[6] = a3;
  v39[7] = a4;
  AutocF0::estimate_pitch(v39, a1, v10, v25);
  std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>,std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>,std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>,0ul,1ul,2ul,3ul>((uint64_t)v50, (uint64_t)v25);
  if (v32)
  {
    float64x2_t v33 = v32;
    operator delete(v32);
  }
  if (v29)
  {
    double v30 = v29;
    operator delete(v29);
  }
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  uint64_t v14 = v74;
  if ((unint64_t)v74 >= v75)
  {
    uint64_t v15 = (void *)std::vector<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>::__push_back_slow_path<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>> const&>(&v73, (uint64_t)v50);
  }
  else
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>::__tuple_impl(v74, (uint64_t)v50);
    uint64_t v15 = v14 + 12;
  }
  unint64_t v74 = v15;
  SRH::SRH((SRH *)v25);
  float64x2_t v26 = (void *)__PAIR64__(a4, a3);
  SRH::estimate_pitch((unsigned int *)v25, a1, v10, v18);
  std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>,std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>,std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>,0ul,1ul,2ul,3ul>((uint64_t)v50, (uint64_t)v18);
  if (v23)
  {
    double v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    int64_t v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  unint64_t v16 = v74;
  if ((unint64_t)v74 >= v75)
  {
    uint64_t v17 = (void *)std::vector<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>::__push_back_slow_path<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>> const&>(&v73, (uint64_t)v50);
  }
  else
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>::__tuple_impl(v74, (uint64_t)v50);
    uint64_t v17 = v16 + 12;
  }
  unint64_t v74 = v17;
  vote_f0_external(&v73, a4, a5);
  if (v35)
  {
    uint64_t v36 = v35;
    operator delete(v35);
  }
  if (v33)
  {
    double v34 = v33;
    operator delete(v33);
  }
  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }
  if (v27)
  {
    __int16 v28 = v27;
    operator delete(v27);
  }
  if (v49 < 0) {
    operator delete(v48);
  }
  if (v46)
  {
    int v47 = v46;
    operator delete(v46);
  }
  if (v44)
  {
    double v45 = v44;
    operator delete(v44);
  }
  if (v42)
  {
    int v43 = v42;
    operator delete(v42);
  }
  if (v40)
  {
    double v41 = v40;
    operator delete(v40);
  }
  if (v55)
  {
    double v56 = v55;
    operator delete(v55);
  }
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
  if (v51)
  {
    uint64_t v52 = v51;
    operator delete(v51);
  }
  if (v50[0])
  {
    v50[1] = v50[0];
    operator delete(v50[0]);
  }
  if (v72 < 0) {
    operator delete(v71);
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  if (v67)
  {
    long long v68 = v67;
    operator delete(v67);
  }
  if (v65)
  {
    uint64_t v66 = v65;
    operator delete(v65);
  }
  if (v63)
  {
    int64_t v64 = v63;
    operator delete(v63);
  }
  *(void *)&long long v59 = &v73;
  std::vector<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
}

void sub_197B44(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 88);
  if (v3)
  {
    *(void *)(v1 - 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>::~tuple(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  double v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

void vote_f0_external(uint64_t *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  unint64_t v4 = 0;
  char v72 = 0;
  uint64_t v73 = 0;
  unint64_t v74 = 0;
  uint64_t v5 = *a1;
  do
  {
    long long v70 = 0uLL;
    uint64_t v71 = 0;
    long long v68 = 0uLL;
    uint64_t v69 = 0;
    v66[0] = 0;
    v66[1] = 0;
    uint64_t v67 = 0;
    int v63 = 0;
    int64_t v64 = 0;
    uint64_t v65 = 0;
    long long v59 = &v70;
    uint64_t v60 = (double *)&v68;
    unsigned int v61 = v66;
    unsigned int v62 = &v63;
    std::__memberwise_copy_assign[abi:ne180100]<std::tuple<std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &>,std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>,0ul,1ul,2ul,3ul>((char **)&v59, v5 + 96 * v4);
    long long v59 = 0;
    uint64_t v60 = 0;
    unsigned int v61 = 0;
    uint64_t v6 = v70;
    if (*((void *)&v70 + 1) != (void)v70)
    {
      unint64_t v7 = 0;
      do
      {
        std::string __p = 0;
        uint64_t v57 = 0;
        char v58 = 0;
        float v8 = *(float *)(v6 + 4 * v7);
        uint64_t v10 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v58, 1uLL);
        uint64_t v11 = (char *)__p;
        int64_t v12 = v57;
        *uint64_t v10 = v8;
        unint64_t v13 = v10 + 1;
        uint64_t v14 = v10;
        while (v12 != v11)
        {
          uint64_t v15 = *((void *)v12 - 1);
          v12 -= 8;
          *((void *)v14-- - 1) = v15;
        }
        unint64_t v16 = &v10[v9];
        std::string __p = v14;
        uint64_t v57 = (char *)(v10 + 1);
        char v58 = v16;
        if (v11)
        {
          operator delete(v11);
          unint64_t v16 = v58;
        }
        uint64_t v57 = (char *)(v10 + 1);
        double v17 = *(float *)(v68 + 4 * v7);
        if (v13 >= v16)
        {
          uint64_t v19 = (double *)__p;
          uint64_t v20 = ((char *)v13 - (unsigned char *)__p) >> 3;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = (char *)v16 - (unsigned char *)__p;
          if (v22 >> 2 > v21) {
            unint64_t v21 = v22 >> 2;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            double v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v58, v23);
            uint64_t v19 = (double *)__p;
            unint64_t v13 = (double *)v57;
          }
          else
          {
            double v24 = 0;
          }
          __int16 v25 = (double *)&v24[8 * v20];
          double *v25 = v17;
          uint64_t v18 = v25 + 1;
          while (v13 != v19)
          {
            uint64_t v26 = *((void *)v13-- - 1);
            *((void *)v25-- - 1) = v26;
          }
          unint64_t v16 = (double *)&v24[8 * v23];
          std::string __p = v25;
          uint64_t v57 = (char *)v18;
          char v58 = v16;
          if (v19)
          {
            operator delete(v19);
            unint64_t v16 = v58;
          }
        }
        else
        {
          v10[1] = v17;
          uint64_t v18 = v10 + 2;
        }
        uint64_t v57 = (char *)v18;
        double v27 = *((float *)v66[0] + v7);
        if (v18 >= v16)
        {
          uint64_t v29 = (double *)__p;
          uint64_t v30 = ((char *)v18 - (unsigned char *)__p) >> 3;
          unint64_t v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v32 = (char *)v16 - (unsigned char *)__p;
          if (v32 >> 2 > v31) {
            unint64_t v31 = v32 >> 2;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33)
          {
            double v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v58, v33);
            uint64_t v29 = (double *)__p;
            uint64_t v18 = (double *)v57;
          }
          else
          {
            double v34 = 0;
          }
          int64x2_t v35 = (double *)&v34[8 * v30];
          double *v35 = v27;
          __int16 v28 = v35 + 1;
          while (v18 != v29)
          {
            uint64_t v36 = *((void *)v18-- - 1);
            *((void *)v35-- - 1) = v36;
          }
          unint64_t v16 = (double *)&v34[8 * v33];
          std::string __p = v35;
          uint64_t v57 = (char *)v28;
          char v58 = v16;
          if (v29)
          {
            operator delete(v29);
            unint64_t v16 = v58;
          }
        }
        else
        {
          *uint64_t v18 = v27;
          __int16 v28 = v18 + 1;
        }
        uint64_t v57 = (char *)v28;
        double v37 = *((float *)v63 + v7);
        if (v28 >= v16)
        {
          uint64_t v39 = (double *)__p;
          uint64_t v40 = ((char *)v28 - (unsigned char *)__p) >> 3;
          unint64_t v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v42 = (char *)v16 - (unsigned char *)__p;
          if (v42 >> 2 > v41) {
            unint64_t v41 = v42 >> 2;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v41;
          }
          if (v43)
          {
            uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v58, v43);
            uint64_t v39 = (double *)__p;
            __int16 v28 = (double *)v57;
          }
          else
          {
            uint64_t v44 = 0;
          }
          double v45 = (double *)&v44[8 * v40];
          *double v45 = v37;
          char v38 = (char *)(v45 + 1);
          while (v28 != v39)
          {
            uint64_t v46 = *((void *)v28-- - 1);
            *((void *)v45-- - 1) = v46;
          }
          std::string __p = v45;
          uint64_t v57 = v38;
          char v58 = (double *)&v44[8 * v43];
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *__int16 v28 = v37;
          char v38 = (char *)(v28 + 1);
        }
        uint64_t v57 = v38;
        int v47 = v60;
        if (v60 >= (double *)v61)
        {
          uint64_t v48 = (double *)std::vector<std::vector<double>>::__push_back_slow_path<std::vector<double> const&>((uint64_t *)&v59, (uint64_t)&__p);
        }
        else
        {
          *uint64_t v60 = 0.0;
          v47[1] = 0.0;
          v47[2] = 0.0;
          std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(v47, __p, (uint64_t)v57, (v57 - (unsigned char *)__p) >> 3);
          uint64_t v48 = v47 + 3;
        }
        uint64_t v60 = v48;
        if (__p)
        {
          uint64_t v57 = (char *)__p;
          operator delete(__p);
        }
        ++v7;
        uint64_t v6 = v70;
      }
      while (v7 < (uint64_t)(*((void *)&v70 + 1) - v70) >> 2);
    }
    char v49 = v73;
    if ((unint64_t)v73 >= v74)
    {
      uint64_t v50 = std::vector<std::vector<std::vector<double>>>::__push_back_slow_path<std::vector<std::vector<double>> const&>((uint64_t *)&v72, (uint64_t *)&v59);
    }
    else
    {
      *uint64_t v73 = 0;
      v49[1] = 0;
      v49[2] = 0;
      std::vector<std::vector<double>>::__init_with_size[abi:ne180100]<std::vector<double>*,std::vector<double>*>(v49, (uint64_t)v59, (uint64_t)v60, 0xAAAAAAAAAAAAAAABLL * (((char *)v60 - (unsigned char *)v59) >> 3));
      uint64_t v50 = (uint64_t)(v49 + 3);
    }
    uint64_t v73 = (void *)v50;
    std::string __p = &v59;
    std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v63)
    {
      int64_t v64 = v63;
      operator delete(v63);
    }
    if (v66[0])
    {
      v66[1] = v66[0];
      operator delete(v66[0]);
    }
    if ((void)v68)
    {
      *((void *)&v68 + 1) = v68;
      operator delete((void *)v68);
    }
    if ((void)v70)
    {
      *((void *)&v70 + 1) = v70;
      operator delete((void *)v70);
    }
    ++v4;
    uint64_t v5 = *a1;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5) > v4);
  std::vector<double>::vector(&v59, 0xAAAAAAAAAAAAAAABLL * (v72[1] - *v72));
  std::vector<double>::vector(&v70, 0xAAAAAAAAAAAAAAABLL * (v72[1] - *v72));
  std::vector<double>::vector(&v68, 0xAAAAAAAAAAAAAAABLL * (v72[1] - *v72));
  vote_f0_files(&v72, &v59, (uint64_t *)&v70, (uint64_t)&v68);
  DSP::smooth_voiced_pitch_contour((double **)&v70, (DSP *)a2, v66);
  if ((void)v70)
  {
    *((void *)&v70 + 1) = v70;
    operator delete((void *)v70);
  }
  long long v70 = *(_OWORD *)v66;
  uint64_t v71 = v67;
  DSP::smooth_voiced_pitch_contour((double **)&v68, (DSP *)a2, v66);
  if ((void)v68)
  {
    *((void *)&v68 + 1) = v68;
    operator delete((void *)v68);
  }
  long long v68 = *(_OWORD *)v66;
  uint64_t v69 = v67;
  v66[1] = 0;
  uint64_t v67 = 0;
  v66[0] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((char *)v66, (double *)v59, v60, ((char *)v60 - (unsigned char *)v59) >> 3);
  int64_t v64 = 0;
  uint64_t v65 = 0;
  int v63 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((char *)&v63, (double *)v70, *((double **)&v70 + 1), (uint64_t)(*((void *)&v70 + 1) - v70) >> 3);
  uint64_t v57 = 0;
  char v58 = 0;
  std::string __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((char *)&__p, (double *)v68, *((double **)&v68 + 1), (uint64_t)(*((void *)&v68 + 1) - v68) >> 3);
  unint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_6vectorIfNS_9allocatorIfEEEES6_S6_S6_EEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS6_S6_S6_S6_EJEJEJRS6_S9_S9_S6_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(a3, (uint64_t)v66, (uint64_t)&v63, (uint64_t)&__p, (uint64_t)&v53);
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
  if (__p)
  {
    uint64_t v57 = (char *)__p;
    operator delete(__p);
  }
  if (v63)
  {
    int64_t v64 = v63;
    operator delete(v63);
  }
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
  if ((void)v68)
  {
    *((void *)&v68 + 1) = v68;
    operator delete((void *)v68);
  }
  if ((void)v70)
  {
    *((void *)&v70 + 1) = v70;
    operator delete((void *)v70);
  }
  if (v59)
  {
    uint64_t v60 = (double *)v59;
    operator delete(v59);
  }
  long long v59 = &v72;
  std::vector<std::vector<std::vector<double>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
}

void sub_1982CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  uint64_t v32 = *(void **)(v30 - 160);
  if (v32)
  {
    *(void *)(v30 - 152) = v32;
    operator delete(v32);
  }
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  a18 = (void *)(v30 - 136);
  std::vector<std::vector<std::vector<double>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

void SRH::~SRH(SRH *this)
{
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 8) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }
}

void AutocF0::~AutocF0(void **this)
{
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  uint64_t v2 = this[13];
  if (v2)
  {
    this[14] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this[10];
  if (v3)
  {
    this[11] = v3;
    operator delete(v3);
  }
  unint64_t v4 = this[7];
  if (v4)
  {
    this[8] = v4;
    operator delete(v4);
  }
  uint64_t v5 = this[4];
  if (v5)
  {
    this[5] = v5;
    operator delete(v5);
  }
}

void vote_f0_files(double ****a1, void *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v197 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  if ((int)v197 > 1)
  {
    uint64_t v5 = 1;
    while (1)
    {
      unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((*a1)[1] - **a1);
      std::vector<double>::vector(&__p, (*a1)[3 * v5][1] - *(*a1)[3 * v5]);
      std::vector<std::vector<double>>::vector(&v208, v6, (uint64_t)&__p);
      if (__p)
      {
        v207 = __p;
        operator delete(__p);
      }
      unint64_t v7 = *a1;
      float v8 = **a1;
      if ((*a1)[1] != v8) {
        break;
      }
LABEL_54:
      std::string __p = &v208;
      std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (++v5 == v197) {
        goto LABEL_55;
      }
    }
    uint64_t v9 = 0;
    int v10 = 0;
    while (1)
    {
      uint64_t v11 = (int)v9;
      double v12 = *v8[3 * v9];
      unint64_t v13 = v7[3 * v5];
      uint64_t v14 = v7[3 * v5 + 1] - v13;
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * v14;
      int v16 = -1431655765 * v14 - 1;
      int v17 = v16 >= (int)v9 ? v9 : -1431655765 * (int)v14 - 1;
      double v18 = *v13[3 * v17];
      if (v12 < v18) {
        break;
      }
      if (v12 > v18)
      {
        unint64_t v23 = v15 - 1;
        unint64_t v24 = v17 + 1;
        if (v15 - 1 <= v24)
        {
          LODWORD(v21) = -1;
        }
        else if (*v13[3 * v24] >= v12)
        {
          LODWORD(v21) = -1;
        }
        else
        {
          uint64_t v25 = v16;
          if ((int)v9 < (uint64_t)v16) {
            uint64_t v25 = (int)v9;
          }
          uint64_t v26 = &v13[3 * v25 + 6];
          uint64_t v27 = 2;
          do
          {
            uint64_t v28 = v27;
            if (v23 <= v25 + v27) {
              break;
            }
            uint64_t v29 = *v26;
            v26 += 3;
            ++v27;
          }
          while (*v29 < v12);
          uint64_t v21 = -v28;
          if ((int)v9 >= (uint64_t)v16) {
            uint64_t v11 = v16;
          }
          unint64_t v24 = v11 + v28;
        }
        if (v23 < v24 || vabdd_f64(v12, *v13[3 * v24]) > vabdd_f64(v12, *v13[3 * (int)v24 - 3])) {
          LODWORD(v21) = v21 + 1;
        }
        goto LABEL_43;
      }
      LODWORD(v21) = 0;
LABEL_44:
      int v30 = v17 - v21;
      unint64_t v31 = (char **)&v13[3 * (v17 - (int)v21)];
      uint64_t v32 = (char *)&v208[3 * v9];
      if (v32 != (char *)v31)
      {
        uint64_t v33 = (uint64_t)v13[3 * v30 + 1];
        std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v32, *v31, v33, (v33 - (uint64_t)*v31) >> 3);
        unint64_t v7 = *a1;
        float v8 = **a1;
      }
      if (0xAAAAAAAAAAAAAAABLL * (v7[1] - v8) <= ++v9)
      {
        if (v10 == 1)
        {
          double v34 = (void **)&v7[3 * v5];
          int64x2_t v35 = v208;
          if (v34 != (void **)&v208)
          {
            std::vector<std::vector<double>>::__assign_with_size[abi:ne180100]<std::vector<double>*,std::vector<double>*>((uint64_t)v34, (uint64_t)v208, (uint64_t)v209, 0xAAAAAAAAAAAAAAABLL * (v209 - v208));
            int64x2_t v35 = v208;
          }
          if (v209 != v35)
          {
            unint64_t v36 = ((char *)v209 - (char *)v35) / 24;
            double v37 = **a1;
            char v38 = (*a1)[3 * v5];
            if (v36 <= 1) {
              unint64_t v36 = 1;
            }
            do
            {
              uint64_t v39 = *v37;
              v37 += 3;
              uint64_t v40 = *(void *)v39;
              unint64_t v41 = *v38;
              v38 += 3;
              *(void *)unint64_t v41 = v40;
              --v36;
            }
            while (v36);
          }
        }
        goto LABEL_54;
      }
    }
    if (v17 < 2)
    {
      unsigned int v22 = v17 - 1;
      LODWORD(v21) = 1;
      if (v17 - 1 < 0) {
        goto LABEL_37;
      }
    }
    else
    {
      if ((int)v9 >= v16) {
        uint64_t v19 = v16;
      }
      else {
        uint64_t v19 = v9;
      }
      uint64_t v20 = &v13[3 * (v19 - 1)];
      uint64_t v21 = 1;
      while (**v20 > v12)
      {
        ++v21;
        v20 -= 3;
        if (v19 == v21)
        {
          unsigned int v22 = 0;
          LODWORD(v21) = v17;
          goto LABEL_36;
        }
      }
      if ((int)v9 >= (uint64_t)v16) {
        LODWORD(v11) = v16;
      }
      unsigned int v22 = v11 - v21;
    }
LABEL_36:
    if (vabdd_f64(v12, *v13[3 * v22]) <= vabdd_f64(v12, *v13[3 * v22 + 3]))
    {
LABEL_43:
      int v10 = 1;
      goto LABEL_44;
    }
LABEL_37:
    LODWORD(v21) = v21 - 1;
    goto LABEL_43;
  }
LABEL_55:
  v208 = 0;
  v209 = 0;
  unint64_t v210 = 0;
  if ((int)v197 < 1) {
    goto LABEL_81;
  }
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = *a1;
  do
  {
    double v45 = v44[3 * v43];
    if (v44[3 * v43 + 1] != v45)
    {
      unint64_t v46 = 0;
      do
      {
        int v47 = v45[3 * v46];
        double v48 = v47[1];
        if (v48 > 0.0)
        {
          if ((unint64_t)v42 >= v210)
          {
            uint64_t v50 = v208;
            uint64_t v51 = v42 - v208;
            unint64_t v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v53 = v210 - (void)v208;
            if ((uint64_t)(v210 - (void)v208) >> 2 > v52) {
              unint64_t v52 = v53 >> 2;
            }
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v54 = v52;
            }
            if (v54)
            {
              unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v210, v54);
              uint64_t v56 = v55;
              uint64_t v50 = v208;
              uint64_t v42 = v209;
              double v48 = v47[1];
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v57 = (double *)(v54 + 8 * v51);
            *uint64_t v57 = v48;
            char v49 = v57 + 1;
            while (v42 != v50)
            {
              uint64_t v58 = *((void *)v42-- - 1);
              *((void *)v57-- - 1) = v58;
            }
            v208 = v57;
            v209 = v49;
            unint64_t v210 = v54 + 8 * v56;
            if (v50) {
              operator delete(v50);
            }
          }
          else
          {
            *uint64_t v42 = v48;
            char v49 = v42 + 1;
          }
          v209 = v49;
          uint64_t v44 = *a1;
          uint64_t v42 = v49;
        }
        ++v46;
        double v45 = v44[3 * v43];
      }
      while (0xAAAAAAAAAAAAAAABLL * (v44[3 * v43 + 1] - v45) > v46);
    }
    ++v43;
  }
  while (v43 != v197);
  if (v42 == v208)
  {
LABEL_81:
    uint64_t v59 = 0x4059000000000000;
  }
  else
  {
    std::__sort<std::__less<double,double> &,double *>();
    uint64_t v59 = *(void *)&v208[(int)((unint64_t)((char *)v209 - (char *)v208) >> 3) / 2];
  }
  uint64_t v60 = **a1;
  double v61 = *v60[3];
  double v62 = **v60;
  unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((*a1)[1] - v60);
  v205[0] = 0;
  std::vector<double>::vector(&__p, v63, v205);
  if ((*a1)[1] == **a1) {
    goto LABEL_275;
  }
  unint64_t v64 = 0;
  int v65 = llround(0.05 / (v61 - v62));
  int v198 = -v65;
  int v66 = v65;
  if (v65 >= 0) {
    int v67 = v65;
  }
  else {
    int v67 = -v65;
  }
  int v68 = v197;
  do
  {
    memset(v205, 0, 24);
    if (v68 <= 0)
    {
      *((void *)__p + v64) = v59;
      goto LABEL_117;
    }
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    do
    {
      int v71 = v198;
      if ((v66 & 0x80000000) == 0)
      {
        do
        {
          unsigned int v72 = v71 + v64;
          if (v71 + (int)v64 >= 0)
          {
            uint64_t v73 = (*a1)[3 * v70];
            if (0xAAAAAAAAAAAAAAABLL * ((*a1)[3 * v70 + 1] - v73) > v72)
            {
              unint64_t v74 = v73[3 * v72];
              double v75 = v74[1];
              if (v75 > 0.0)
              {
                if (v69 >= v205[2])
                {
                  uint64_t v77 = (double *)v205[0];
                  uint64_t v78 = ((char *)v69 - (char *)v205[0]) >> 3;
                  unint64_t v79 = v78 + 1;
                  if ((unint64_t)(v78 + 1) >> 61) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  int64_t v80 = (char *)v205[2] - (char *)v205[0];
                  if (((char *)v205[2] - (char *)v205[0]) >> 2 > v79) {
                    unint64_t v79 = v80 >> 2;
                  }
                  BOOL v81 = (unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8;
                  unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
                  if (!v81) {
                    unint64_t v82 = v79;
                  }
                  if (v82)
                  {
                    unint64_t v82 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v205[2], v82);
                    uint64_t v84 = v83;
                    uint64_t v77 = (double *)v205[0];
                    uint64_t v69 = (double *)v205[1];
                    double v75 = v74[1];
                  }
                  else
                  {
                    uint64_t v84 = 0;
                  }
                  uint64_t v85 = (double *)(v82 + 8 * v78);
                  *uint64_t v85 = v75;
                  unint64_t v76 = v85 + 1;
                  while (v69 != v77)
                  {
                    uint64_t v86 = *((void *)v69-- - 1);
                    *((void *)v85-- - 1) = v86;
                  }
                  v205[0] = v85;
                  v205[1] = v76;
                  v205[2] = (void *)(v82 + 8 * v84);
                  if (v77) {
                    operator delete(v77);
                  }
                }
                else
                {
                  double *v69 = v75;
                  unint64_t v76 = v69 + 1;
                }
                v205[1] = v76;
                uint64_t v69 = (double *)v76;
              }
            }
          }
        }
        while (v71++ != v67);
      }
      ++v70;
    }
    while (v70 != v197);
    int8x16_t v88 = v205[0];
    if (v69 == v205[0])
    {
      *((void *)__p + v64) = v59;
      int v68 = v197;
      if (!v88) {
        goto LABEL_117;
      }
    }
    else
    {
      std::__sort<std::__less<double,double> &,double *>();
      int8x16_t v88 = v205[0];
      *((void *)__p + v64) = *((void *)v205[0]
                               + (int)((unint64_t)((char *)v205[1] - (char *)v205[0]) >> 3) / 2);
      int v68 = v197;
    }
    v205[1] = v88;
    operator delete(v88);
LABEL_117:
    ++v64;
    unint64_t v90 = **a1;
    uint64_t v89 = (*a1)[1];
  }
  while (0xAAAAAAAAAAAAAAABLL * (v89 - v90) > v64);
  if (v89 != v90)
  {
    uint64_t v91 = 0;
    double v92 = floor((double)(int)v197 * 0.5);
    while (1)
    {
      memset(v205, 0, 24);
      v202 = 0;
      v203 = 0;
      v204 = 0;
      v199 = 0;
      v200 = 0;
      v201 = 0;
      if ((int)v197 >= 1)
      {
        uint64_t v93 = 0;
        uint64_t v94 = 0;
        int v95 = 0;
        do
        {
          uint64_t v96 = (*a1)[3 * v94][3 * v91];
          double v97 = v96[1];
          if (v97 > 0.0)
          {
            if (v93 >= v205[2])
            {
              int v99 = (double *)v205[0];
              uint64_t v100 = ((char *)v93 - (char *)v205[0]) >> 3;
              unint64_t v101 = v100 + 1;
              if ((unint64_t)(v100 + 1) >> 61) {
LABEL_300:
              }
                std::vector<float>::__throw_length_error[abi:ne180100]();
              int64_t v102 = (char *)v205[2] - (char *)v205[0];
              if (((char *)v205[2] - (char *)v205[0]) >> 2 > v101) {
                unint64_t v101 = v102 >> 2;
              }
              if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v103 = v101;
              }
              if (v103)
              {
                int8x16_t v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v205[2], v103);
                int v99 = (double *)v205[0];
                uint64_t v93 = (double *)v205[1];
                double v97 = v96[1];
              }
              else
              {
                int8x16_t v104 = 0;
              }
              int v105 = (double *)&v104[8 * v100];
              *int v105 = v97;
              double v98 = v105 + 1;
              while (v93 != v99)
              {
                uint64_t v106 = *((void *)v93-- - 1);
                *((void *)v105-- - 1) = v106;
              }
              v205[0] = v105;
              v205[1] = v98;
              v205[2] = &v104[8 * v103];
              if (v99) {
                operator delete(v99);
              }
            }
            else
            {
              *uint64_t v93 = v97;
              double v98 = v93 + 1;
            }
            v205[1] = v98;
            ++v95;
            uint64_t v93 = (double *)v98;
          }
          ++v94;
        }
        while (v94 != v197);
        uint64_t v107 = 0;
        while (1)
        {
          uint64_t v108 = &(*a1)[3 * v107][3 * v91];
          uint64_t v109 = *v108;
          if ((char *)v108[1] - (char *)*v108 == 32)
          {
            unint64_t v110 = v203;
            if (v203 >= v204)
            {
              __int16 v115 = (char *)v202;
              uint64_t v116 = (v203 - (unsigned char *)v202) >> 3;
              unint64_t v117 = v116 + 1;
              if ((unint64_t)(v116 + 1) >> 61) {
                goto LABEL_300;
              }
              uint64_t v118 = v204 - (unsigned char *)v202;
              if ((v204 - (unsigned char *)v202) >> 2 > v117) {
                unint64_t v117 = v118 >> 2;
              }
              if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v119 = v117;
              }
              if (v119)
              {
                double v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v204, v119);
                __int16 v115 = (char *)v202;
                unint64_t v110 = v203;
              }
              else
              {
                double v120 = 0;
              }
              uint64_t v136 = &v120[8 * v116];
              *(double *)uint64_t v136 = v109[2];
              uint64_t v111 = v136 + 8;
              while (v110 != v115)
              {
                uint64_t v137 = *((void *)v110 - 1);
                v110 -= 8;
                *((void *)v136 - 1) = v137;
                v136 -= 8;
              }
              v202 = v136;
              v203 = v111;
              v204 = &v120[8 * v119];
              if (v115) {
                operator delete(v115);
              }
            }
            else
            {
              *(double *)v203 = v109[2];
              uint64_t v111 = v110 + 8;
            }
            v203 = v111;
            int8x16_t v138 = (*a1)[3 * v107][3 * v91];
            int8x16_t v139 = v200;
            if (v200 >= v201)
            {
              long long v141 = v199;
              uint64_t v142 = (v200 - v199) >> 3;
              unint64_t v143 = v142 + 1;
              if ((unint64_t)(v142 + 1) >> 61) {
                goto LABEL_300;
              }
              uint64_t v144 = v201 - v199;
              if ((v201 - v199) >> 2 > v143) {
                unint64_t v143 = v144 >> 2;
              }
              if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v145 = v143;
              }
              if (v145)
              {
                long long v146 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v201, v145);
                long long v141 = v199;
                int8x16_t v139 = v200;
              }
              else
              {
                long long v146 = 0;
              }
              uint64_t v147 = &v146[8 * v142];
              *(double *)uint64_t v147 = v138[3];
              std::string v148 = v147 + 8;
              while (v139 != v141)
              {
                uint64_t v149 = *((void *)v139 - 1);
                v139 -= 8;
                *((void *)v147 - 1) = v149;
                v147 -= 8;
              }
              goto LABEL_235;
            }
            *(double *)v200 = v138[3];
            unint64_t v140 = v200 + 8;
          }
          else
          {
            double v112 = v109[1];
            if (v112 <= 0.0)
            {
              uint64_t v121 = __p;
              double v122 = v203;
              if (v203 >= v204)
              {
                uint64_t v130 = (char *)v202;
                uint64_t v131 = (v203 - (unsigned char *)v202) >> 3;
                unint64_t v132 = v131 + 1;
                if ((unint64_t)(v131 + 1) >> 61) {
                  goto LABEL_300;
                }
                uint64_t v133 = v204 - (unsigned char *)v202;
                if ((v204 - (unsigned char *)v202) >> 2 > v132) {
                  unint64_t v132 = v133 >> 2;
                }
                if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v134 = v132;
                }
                if (v134)
                {
                  int64_t v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v204, v134);
                  uint64_t v130 = (char *)v202;
                  double v122 = v203;
                }
                else
                {
                  int64_t v135 = 0;
                }
                v156 = &v135[8 * v131];
                *(void *)v156 = v121[v91];
                int8x16_t v123 = v156 + 8;
                while (v122 != v130)
                {
                  uint64_t v157 = *((void *)v122 - 1);
                  v122 -= 8;
                  *((void *)v156 - 1) = v157;
                  v156 -= 8;
                }
                v202 = v156;
                v203 = v123;
                v204 = &v135[8 * v134];
                if (v130) {
                  operator delete(v130);
                }
              }
              else
              {
                *(void *)v203 = *((void *)__p + v91);
                int8x16_t v123 = v122 + 8;
              }
              v203 = v123;
              v158 = v200;
              if (v200 >= v201)
              {
                long long v141 = v199;
                uint64_t v159 = (v200 - v199) >> 3;
                unint64_t v160 = v159 + 1;
                if ((unint64_t)(v159 + 1) >> 61) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v161 = v201 - v199;
                if ((v201 - v199) >> 2 > v160) {
                  unint64_t v160 = v161 >> 2;
                }
                if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v145 = v160;
                }
                if (v145)
                {
                  long long v146 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v201, v145);
                  long long v141 = v199;
                  v158 = v200;
                }
                else
                {
                  long long v146 = 0;
                }
                uint64_t v147 = &v146[8 * v159];
                *(void *)uint64_t v147 = 0;
                std::string v148 = v147 + 8;
                while (v158 != v141)
                {
                  uint64_t v163 = *((void *)v158 - 1);
                  v158 -= 8;
                  *((void *)v147 - 1) = v163;
                  v147 -= 8;
                }
                goto LABEL_235;
              }
              *(void *)v200 = 0;
              unint64_t v140 = v200 + 8;
            }
            else
            {
              uint64_t v113 = v203;
              if (v203 >= v204)
              {
                int v124 = (char *)v202;
                uint64_t v125 = (v203 - (unsigned char *)v202) >> 3;
                unint64_t v126 = v125 + 1;
                if ((unint64_t)(v125 + 1) >> 61) {
                  goto LABEL_300;
                }
                uint64_t v127 = v204 - (unsigned char *)v202;
                if ((v204 - (unsigned char *)v202) >> 2 > v126) {
                  unint64_t v126 = v127 >> 2;
                }
                if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v128 = v126;
                }
                if (v128)
                {
                  unint64_t v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v204, v128);
                  int v124 = (char *)v202;
                  uint64_t v113 = v203;
                  double v112 = v109[1];
                }
                else
                {
                  unint64_t v129 = 0;
                }
                uint64_t v150 = (double *)&v129[8 * v125];
                *uint64_t v150 = v112;
                uint64_t v114 = v150 + 1;
                while (v113 != v124)
                {
                  uint64_t v151 = *((void *)v113 - 1);
                  v113 -= 8;
                  *((void *)v150-- - 1) = v151;
                }
                v202 = v150;
                v203 = (char *)v114;
                v204 = &v129[8 * v128];
                if (v124) {
                  operator delete(v124);
                }
              }
              else
              {
                *(double *)v203 = v112;
                uint64_t v114 = (double *)(v113 + 8);
              }
              v203 = (char *)v114;
              long long v152 = v200;
              if (v200 >= v201)
              {
                long long v141 = v199;
                uint64_t v153 = (v200 - v199) >> 3;
                unint64_t v154 = v153 + 1;
                if ((unint64_t)(v153 + 1) >> 61) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v155 = v201 - v199;
                if ((v201 - v199) >> 2 > v154) {
                  unint64_t v154 = v155 >> 2;
                }
                if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v145 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v145 = v154;
                }
                if (v145)
                {
                  long long v146 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v201, v145);
                  long long v141 = v199;
                  long long v152 = v200;
                }
                else
                {
                  long long v146 = 0;
                }
                uint64_t v147 = &v146[8 * v153];
                *(void *)uint64_t v147 = 0x3FE0000000000000;
                std::string v148 = v147 + 8;
                while (v152 != v141)
                {
                  uint64_t v162 = *((void *)v152 - 1);
                  v152 -= 8;
                  *((void *)v147 - 1) = v162;
                  v147 -= 8;
                }
LABEL_235:
                v199 = v147;
                v201 = &v146[8 * v145];
                if (v141) {
                  operator delete(v141);
                }
                goto LABEL_237;
              }
              *(void *)v200 = 0x3FE0000000000000;
              unint64_t v140 = v200 + 8;
            }
          }
          std::string v148 = v140;
LABEL_237:
          v200 = v148;
          if (++v107 == v197) {
            goto LABEL_240;
          }
        }
      }
      int v95 = 0;
LABEL_240:
      if (v92 > (double)v95) {
        break;
      }
      int64_t v175 = ((char *)v205[1] - (char *)v205[0]) >> 3;
      if (v175 == 2)
      {
        double v178 = *((double *)__p + v91);
        double v176 = *(double *)v205[0];
        double v179 = *((double *)v205[0] + 1);
      }
      else
      {
        if (v175 == 1)
        {
          double v176 = *(double *)v205[0];
          goto LABEL_263;
        }
        std::__sort<std::__less<double,double> &,double *>();
        unint64_t v181 = (unint64_t)((char *)v205[1] - (char *)v205[0]) >> 3;
        if ((v181 & 0x80000001) == 1)
        {
          double v176 = *((double *)v205[0] + ((v181 - 1) >> 1));
          goto LABEL_263;
        }
        v182 = (double *)((char *)v205[0] + 8 * ((int)v181 / 2));
        double v176 = *(v182 - 1);
        double v179 = *v182;
        if (vabdd_f64(v176, *v182) < 10.0)
        {
          double v176 = (v176 + v179) * 0.5;
LABEL_263:
          v177 = a3;
LABEL_264:
          uint64_t v180 = *v177;
LABEL_265:
          *(double *)(v180 + 8 * v91) = v176;
          goto LABEL_266;
        }
        double v178 = *((double *)__p + v91);
      }
      uint64_t v180 = *a3;
      if (vabdd_f64(v176, v178) < vabdd_f64(v179, v178)) {
        goto LABEL_265;
      }
      *(double *)(v180 + 8 * v91) = v179;
LABEL_266:
      *(double *)(*a2 + 8 * v91) = *(**a1)[3 * v91];
      if (v199) {
        operator delete(v199);
      }
      if (v202)
      {
        v203 = (char *)v202;
        operator delete(v202);
      }
      if (v205[0])
      {
        v205[1] = v205[0];
        operator delete(v205[0]);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((*a1)[1] - **a1) <= ++v91) {
        goto LABEL_275;
      }
    }
    *(void *)(*a3 + 8 * v91) = 0;
    v164 = (double *)v202;
    v165 = (double *)v203;
    if (v203 == v202) {
      goto LABEL_254;
    }
    uint64_t v166 = 0;
    unint64_t v167 = (v203 - (unsigned char *)v202) >> 3;
    v168 = (double *)__p;
    if (v167 <= 1) {
      unint64_t v167 = 1;
    }
    do
    {
      v164[v166] = v164[v166] - v168[v91];
      ++v166;
    }
    while (v167 != v166);
    v169 = v164 + 1;
    if (v164 + 1 == v165)
    {
LABEL_254:
      v171 = v164;
    }
    else
    {
      double v170 = *v164;
      v171 = v164;
      v172 = v164 + 1;
      do
      {
        double v173 = *v172++;
        double v174 = v173;
        if (v173 < v170)
        {
          double v170 = v174;
          v171 = v169;
        }
        v169 = v172;
      }
      while (v172 != v165);
    }
    double v176 = *(double *)((char *)v164 + (((char *)v171 - (char *)v164) << 29 >> 29)) + *((double *)__p + v91);
    v177 = (uint64_t *)a4;
    goto LABEL_264;
  }
LABEL_275:
  v183 = *(char **)a4;
  uint64_t v184 = *(void *)(a4 + 8) - *(void *)a4;
  if (v184)
  {
    unint64_t v185 = v184 >> 3;
    v186 = (void *)*a3;
    if (v185 <= 1) {
      unint64_t v185 = 1;
    }
    do
    {
      if (*(double *)v183 == 0.0) {
        *(void *)v183 = *v186;
      }
      ++v186;
      v183 += 8;
      --v185;
    }
    while (v185);
  }
  DSP::medfilt((char **)a4, 9u, v205);
  v187 = *(char **)a4;
  if (*(void *)a4)
  {
    *(void *)(a4 + 8) = v187;
    operator delete(v187);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  *(_OWORD *)a4 = *(_OWORD *)v205;
  *(void **)(a4 + 16) = v205[2];
  DSP::smooth(a4, 7, (char **)v205);
  v188 = *(char **)a4;
  if (*(void *)a4)
  {
    *(void *)(a4 + 8) = v188;
    operator delete(v188);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  v189 = v205[0];
  *(void **)a4 = v205[0];
  v190 = v205[1];
  *(_OWORD *)(a4 + 8) = *(_OWORD *)&v205[1];
  if (v190 != (unsigned char *)v189)
  {
    unint64_t v191 = (v190 - (unsigned char *)v189) >> 3;
    v192 = (void *)*a3;
    if (v191 <= 1) {
      unint64_t v191 = 1;
    }
    do
    {
      if (*(double *)v192 > 0.0) {
        void *v189 = *v192;
      }
      ++v189;
      ++v192;
      --v191;
    }
    while (v191);
  }
  DSP::medfilt((char **)a4, 3u, v205);
  v193 = *(char **)a4;
  if (*(void *)a4)
  {
    *(void *)(a4 + 8) = v193;
    operator delete(v193);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  *(_OWORD *)a4 = *(_OWORD *)v205;
  *(void **)(a4 + 16) = v205[2];
  if (__p)
  {
    v207 = __p;
    operator delete(__p);
  }
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
}

void sub_199568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  int v30 = *(void **)(v28 - 152);
  if (v30)
  {
    *(void *)(v28 - 144) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_6vectorIfNS_9allocatorIfEEEES6_S6_S6_EEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS6_S6_S6_S6_EJEJEJRS6_S9_S9_S6_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 3, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 6, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)a5;
  a1[11] = *(void *)(a5 + 16);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  return a1;
}

void sub_1996FC(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 72);
  if (v3)
  {
    *(void *)(a2 + 80) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a2 + 48);
  if (v4)
  {
    *(void *)(a2 + 56) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a2 + 24);
  if (v5)
  {
    *(void *)(a2 + 32) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v6;
    operator delete(v6);
  }
}

uint64_t std::vector<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>::__push_back_slow_path<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  unint64_t v13 = v10;
  uint64_t v14 = &v10[96 * v4];
  int v16 = &v10[96 * v9];
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>::__tuple_impl(v14, a2);
  unint64_t v15 = v14 + 96;
  std::vector<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>::~__split_buffer(&v13);
  return v11;
}

void sub_199934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>::__tuple_impl(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 3, *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 6, *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 9, *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
  return a1;
}

void sub_1999F0(_Unwind_Exception *exception_object)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>,std::reverse_iterator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>*>,std::reverse_iterator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>*>,std::reverse_iterator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>,std::reverse_iterator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>*>,std::reverse_iterator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>*>,std::reverse_iterator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 96;
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>::__tuple_impl((void *)(v7 - 96), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 96;
      *((void *)&v15 + 1) -= 96;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>,std::reverse_iterator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

__n128 std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>::__tuple_impl(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 9) = result;
  a1[11] = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>,std::reverse_iterator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>,std::reverse_iterator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>,std::reverse_iterator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>::destroy[abi:ne180100](v3, v1);
      v1 += 96;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>>::destroy[abi:ne180100](v4, i - 96);
  }
}

double std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>,std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>,std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>,0ul,1ul,2ul,3ul>(uint64_t a1, uint64_t a2)
{
  std::vector<float>::__move_assign(a1, (__n128 *)a2);
  std::vector<float>::__move_assign(a1 + 24, (__n128 *)(a2 + 24));
  std::vector<float>::__move_assign(a1 + 48, (__n128 *)(a2 + 48));

  *(void *)&double result = std::vector<float>::__move_assign(a1 + 72, (__n128 *)(a2 + 72)).n128_u64[0];
  return result;
}

__n128 std::vector<float>::__move_assign(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void std::vector<std::vector<std::vector<double>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::__memberwise_copy_assign[abi:ne180100]<std::tuple<std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &>,std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>,0ul,1ul,2ul,3ul>(char **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (v4 != (char *)a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  uint64_t v5 = a1[1];
  if (v5 != (char *)(a2 + 24)) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v5, *(char **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  }
  uint64_t v6 = a1[2];
  if (v6 != (char *)(a2 + 48)) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v6, *(char **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2);
  }
  __n128 result = a1[3];
  if (result != (char *)(a2 + 72))
  {
    uint64_t v8 = *(char **)(a2 + 72);
    uint64_t v9 = *(void *)(a2 + 80);
    return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(result, v8, v9, (v9 - (uint64_t)v8) >> 2);
  }
  return result;
}

uint64_t std::vector<std::vector<double>>::__push_back_slow_path<std::vector<double> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Vector<float>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  int v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<double>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<std::pair<int,int>>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_19A00C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<int,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<double>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,int>>>,std::reverse_iterator<std::vector<std::pair<int,int>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::vector<std::vector<double>>>::__push_back_slow_path<std::vector<std::vector<double>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Vector<float>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  int v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<std::vector<double>>::__init_with_size[abi:ne180100]<std::vector<double>*,std::vector<double>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<std::vector<double>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer(v14);
  return v12;
}

void sub_19A284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<double>>::__init_with_size[abi:ne180100]<std::vector<double>*,std::vector<double>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double>*,std::vector<double>*,std::vector<double>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_19A300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double>*,std::vector<double>*,std::vector<double>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      unint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::vector<double>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_19A3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::vector<double>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::vector<std::vector<double>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<double>>>,std::reverse_iterator<std::vector<std::vector<double>>*>,std::reverse_iterator<std::vector<std::vector<double>>*>,std::reverse_iterator<std::vector<std::vector<double>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<double>>>,std::reverse_iterator<std::vector<std::vector<double>>*>,std::reverse_iterator<std::vector<std::vector<double>>*>,std::reverse_iterator<std::vector<std::vector<double>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<double>>>,std::reverse_iterator<std::vector<std::vector<double>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<double>>>,std::reverse_iterator<std::vector<std::vector<double>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<std::vector<double>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    long long v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      void *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_19A5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::vector<double>>::__assign_with_size[abi:ne180100]<std::vector<double>*,std::vector<double>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<int>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::vector<int>>::__vallocate[abi:ne180100]((void *)a1, v11);
    char v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double>*,std::vector<double>*,std::vector<double>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<double> *,std::vector<double> *,std::vector<double> *>((int)&v20, a2, v13, v9);
    char v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double>*,std::vector<double>*,std::vector<double>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<double> *,std::vector<double> *,std::vector<double> *>((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      uint64_t v19 = *(void **)(v17 - 24);
      v17 -= 24;
      double v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_19A798(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_19A7A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<double> *,std::vector<double> *,std::vector<double> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a4, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void SiriTTS::ForcedAlignment::Lexicon::Lexicon(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  _ZNSt3__115allocate_sharedB8ne180100IN3fst11SymbolTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
}

void sub_19B048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  double v18 = (std::__shared_weak_count *)v16[6];
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  uint64_t v19 = (std::__shared_weak_count *)v16[4];
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::string __p = v16;
  std::vector<SiriTTS::ForcedAlignment::Lexeme>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void SiriTTS::ForcedAlignment::Lexicon::add_lexeme(SiriTTS::ForcedAlignment::Lexicon *this, const std::string *a2)
{
  if (a2[1].__r_.__value_.__l.__size_ == a2[1].__r_.__value_.__r.__words[0]) {
    return;
  }
  long long v66 = 0u;
  memset(v65, 0, sizeof(v65));
  std::string::operator=((std::string *)v65, a2);
  std::string::pointer data = a2[1].__r_.__value_.__l.__data_;
  if (a2[1].__r_.__value_.__l.__size_ - (void)data != 24)
  {
    if (data[23] >= 0) {
      size_t v11 = data[23];
    }
    else {
      size_t v11 = *((void *)data + 1);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v11 + 2);
    if (v64 >= 0) {
      char v12 = __p;
    }
    else {
      char v12 = (void **)__p[0];
    }
    if (v11)
    {
      if (data[23] >= 0) {
        std::string::pointer v13 = data;
      }
      else {
        std::string::pointer v13 = *(std::string::pointer *)data;
      }
      memmove(v12, v13, v11);
    }
    strcpy((char *)v12 + v11, "_B");
    uint64_t v14 = (_OWORD *)v66;
    if ((unint64_t)v66 >= *((void *)&v66 + 1))
    {
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - *(void *)&v65[24]) >> 3);
      unint64_t v21 = v20 + 1;
      if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(*((void *)&v66 + 1) - *(void *)&v65[24]) >> 3) > v21) {
        unint64_t v21 = 0x5555555555555556 * ((uint64_t)(*((void *)&v66 + 1) - *(void *)&v65[24]) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v66 + 1) - *(void *)&v65[24]) >> 3) >= 0x555555555555555) {
        unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v22 = v21;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)&v66 + 8);
      if (v22) {
        unint64_t v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Vector<float>>>((uint64_t)&v66 + 8, v22);
      }
      else {
        unint64_t v23 = 0;
      }
      uint64_t v26 = v23 + v20;
      __v.__first_ = v23;
      __v.__begin_ = v26;
      __v.__end_cap_.__value_ = &v23[v22];
      long long v27 = *(_OWORD *)__p;
      v26->__r_.__value_.__r.__words[2] = v64;
      *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
      __p[1] = 0;
      int64_t v64 = 0;
      __p[0] = 0;
      __v.__end_ = v26 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v65[24], &__v);
      uint64_t v28 = v66;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      *(void *)&long long v66 = v28;
      if (SHIBYTE(v64) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v15 = *(_OWORD *)__p;
      *(void *)(v66 + 16) = v64;
      *uint64_t v14 = v15;
      *(void *)&long long v66 = (char *)v14 + 24;
    }
    std::string::pointer v29 = a2[1].__r_.__value_.__l.__data_;
    std::string::size_type size = a2[1].__r_.__value_.__l.__size_;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(size - (void)v29) >> 3) - 3 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v31 = 0;
      unint64_t v32 = 1;
      do
      {
        uint64_t v33 = &v29[v31];
        size_t v34 = v29[v31 + 47];
        if ((v34 & 0x80u) == 0) {
          size_t v35 = v34;
        }
        else {
          size_t v35 = *((void *)v33 + 4);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v35 + 2);
        if (v64 >= 0) {
          unint64_t v36 = __p;
        }
        else {
          unint64_t v36 = (void **)__p[0];
        }
        if (v35)
        {
          if (v33[47] >= 0) {
            double v37 = v33 + 24;
          }
          else {
            double v37 = (const void *)*((void *)v33 + 3);
          }
          memmove(v36, v37, v35);
        }
        strcpy((char *)v36 + v35, "_I");
        char v38 = (_OWORD *)v66;
        if ((unint64_t)v66 >= *((void *)&v66 + 1))
        {
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - *(void *)&v65[24]) >> 3);
          unint64_t v41 = v40 + 1;
          if (v40 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(*((void *)&v66 + 1) - *(void *)&v65[24]) >> 3) > v41) {
            unint64_t v41 = 0x5555555555555556 * ((uint64_t)(*((void *)&v66 + 1) - *(void *)&v65[24]) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v66 + 1) - *(void *)&v65[24]) >> 3) >= 0x555555555555555) {
            unint64_t v42 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v42 = v41;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)&v66 + 8);
          if (v42) {
            uint64_t v43 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Vector<float>>>((uint64_t)&v66 + 8, v42);
          }
          else {
            uint64_t v43 = 0;
          }
          uint64_t v44 = v43 + v40;
          __v.__first_ = v43;
          __v.__begin_ = v44;
          __v.__end_cap_.__value_ = &v43[v42];
          long long v45 = *(_OWORD *)__p;
          v44->__r_.__value_.__r.__words[2] = v64;
          *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
          __p[1] = 0;
          int64_t v64 = 0;
          __p[0] = 0;
          __v.__end_ = v44 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v65[24], &__v);
          uint64_t v46 = v66;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          *(void *)&long long v66 = v46;
          if (SHIBYTE(v64) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v39 = *(_OWORD *)__p;
          *(void *)(v66 + 16) = v64;
          _OWORD *v38 = v39;
          *(void *)&long long v66 = (char *)v38 + 24;
        }
        ++v32;
        std::string::pointer v29 = a2[1].__r_.__value_.__l.__data_;
        std::string::size_type size = a2[1].__r_.__value_.__l.__size_;
        v31 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(size - (void)v29) >> 3) - 1 > v32);
    }
    if (*(char *)(size - 1) >= 0) {
      size_t v47 = *(unsigned __int8 *)(size - 1);
    }
    else {
      size_t v47 = *(void *)(size - 16);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v47 + 2);
    if (v64 >= 0) {
      double v48 = __p;
    }
    else {
      double v48 = (void **)__p[0];
    }
    if (v47)
    {
      if (*(char *)(size - 1) >= 0) {
        char v49 = (const void *)(size - 24);
      }
      else {
        char v49 = *(const void **)(size - 24);
      }
      memmove(v48, v49, v47);
    }
    strcpy((char *)v48 + v47, "_E");
    uint64_t v50 = (_OWORD *)v66;
    if ((unint64_t)v66 < *((void *)&v66 + 1))
    {
      long long v51 = *(_OWORD *)__p;
      *(void *)(v66 + 16) = v64;
      *uint64_t v50 = v51;
      unint64_t v10 = (char *)v50 + 24;
      goto LABEL_89;
    }
    unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - *(void *)&v65[24]) >> 3);
    unint64_t v53 = v52 + 1;
    if (v52 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * ((uint64_t)(*((void *)&v66 + 1) - *(void *)&v65[24]) >> 3) > v53) {
      unint64_t v53 = 0x5555555555555556 * ((uint64_t)(*((void *)&v66 + 1) - *(void *)&v65[24]) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v66 + 1) - *(void *)&v65[24]) >> 3) >= 0x555555555555555) {
      unint64_t v54 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v54 = v53;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)&v66 + 8);
    if (v54) {
      uint64_t v55 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Vector<float>>>((uint64_t)&v66 + 8, v54);
    }
    else {
      uint64_t v55 = 0;
    }
    uint64_t v56 = v55 + v52;
    __v.__first_ = v55;
    __v.__begin_ = v56;
    __v.__end_cap_.__value_ = &v55[v54];
    long long v57 = *(_OWORD *)__p;
    v56->__r_.__value_.__r.__words[2] = v64;
    *(_OWORD *)&v56->__r_.__value_.__l.__data_ = v57;
    __p[1] = 0;
    int64_t v64 = 0;
    __p[0] = 0;
    __v.__end_ = v56 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v65[24], &__v);
LABEL_100:
    uint64_t v58 = v66;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    *(void *)&long long v66 = v58;
    if (SHIBYTE(v64) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_102;
  }
  if (data[23] >= 0) {
    size_t v5 = data[23];
  }
  else {
    size_t v5 = *((void *)data + 1);
  }
  uint64_t v6 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 2);
  if (v64 < 0) {
    uint64_t v6 = (void **)__p[0];
  }
  if (v5)
  {
    if (data[23] >= 0) {
      std::string::pointer v7 = data;
    }
    else {
      std::string::pointer v7 = *(std::string::pointer *)data;
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "_S");
  uint64_t v8 = (_OWORD *)v66;
  if ((unint64_t)v66 >= *((void *)&v66 + 1))
  {
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - *(void *)&v65[24]) >> 3);
    unint64_t v17 = v16 + 1;
    if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * ((uint64_t)(*((void *)&v66 + 1) - *(void *)&v65[24]) >> 3) > v17) {
      unint64_t v17 = 0x5555555555555556 * ((uint64_t)(*((void *)&v66 + 1) - *(void *)&v65[24]) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v66 + 1) - *(void *)&v65[24]) >> 3) >= 0x555555555555555) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v17;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)&v66 + 8);
    if (v18) {
      uint64_t v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Vector<float>>>((uint64_t)&v66 + 8, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    unint64_t v24 = v19 + v16;
    __v.__first_ = v19;
    __v.__begin_ = v24;
    __v.__end_cap_.__value_ = &v19[v18];
    long long v25 = *(_OWORD *)__p;
    v24->__r_.__value_.__r.__words[2] = v64;
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
    __p[1] = 0;
    int64_t v64 = 0;
    __p[0] = 0;
    __v.__end_ = v24 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v65[24], &__v);
    goto LABEL_100;
  }
  long long v9 = *(_OWORD *)__p;
  *(void *)(v66 + 16) = v64;
  *uint64_t v8 = v9;
  unint64_t v10 = (char *)v8 + 24;
LABEL_89:
  *(void *)&long long v66 = v10;
LABEL_102:
  unint64_t v59 = *((void *)this + 1);
  if (v59 >= *((void *)this + 2))
  {
    uint64_t v60 = std::vector<SiriTTS::ForcedAlignment::Lexeme>::__push_back_slow_path<SiriTTS::ForcedAlignment::Lexeme const&>((uint64_t *)this, (long long *)v65);
  }
  else
  {
    std::allocator<SiriTTS::ForcedAlignment::Lexeme>::construct[abi:ne180100]<SiriTTS::ForcedAlignment::Lexeme,SiriTTS::ForcedAlignment::Lexeme const&>(this + 16, *((std::string **)this + 1), (long long *)v65);
    uint64_t v60 = v59 + 48;
    *((void *)this + 1) = v59 + 48;
  }
  *((void *)this + 1) = v60;
  (*(void (**)(void, unsigned char *))(**((void **)this + 5) + 32))(*((void *)this + 5), v65);
  uint64_t v61 = *(void *)&v65[24];
  uint64_t v62 = v66;
  while (v61 != v62)
  {
    (*(void (**)(void, uint64_t))(**((void **)this + 3) + 32))(*((void *)this + 3), v61);
    v61 += 24;
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v65[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if ((v65[23] & 0x80000000) != 0) {
    operator delete(*(void **)v65);
  }
}

void sub_19B83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, char a10, uint64_t a11, uint64_t a12, void *__pa, uint64_t a14, uint64_t a15, void *a16, std::__split_buffer<std::string> *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (SHIBYTE(a15) < 0) {
    operator delete(__pa);
  }
  SiriTTS::ForcedAlignment::Lexeme::~Lexeme(&a16);
  _Unwind_Resume(a1);
}

void SiriTTS::ForcedAlignment::Lexeme::~Lexeme(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void SiriTTS::ForcedAlignment::Lexicon::int_to_phone(SiriTTS::ForcedAlignment::Lexicon *this@<X0>, const BOOL *a2@<X2>, std::string *a3@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 3) + 88))(&__str);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if (*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
      goto LABEL_3;
    }
LABEL_11:
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    goto LABEL_20;
  }
  std::string::size_type size = __str.__r_.__value_.__l.__size_;
  if (!__str.__r_.__value_.__l.__size_) {
    goto LABEL_11;
  }
LABEL_3:
  if (!*a2)
  {
    *a3 = __str;
    memset(&__str, 0, sizeof(__str));
    goto LABEL_20;
  }
  std::string::basic_string(&v9, &__str, size - 2, 2uLL, (std::allocator<char> *)&v11);
  char v6 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) != 2) {
      goto LABEL_18;
    }
    if (LOWORD(v9.__r_.__value_.__l.__data_) == 21343
      || LOWORD(v9.__r_.__value_.__l.__data_) == 16991
      || LOWORD(v9.__r_.__value_.__l.__data_) == 18783)
    {
      goto LABEL_23;
    }
    std::string::pointer v7 = &v9;
    goto LABEL_17;
  }
  if (v9.__r_.__value_.__l.__size_ != 2) {
    goto LABEL_18;
  }
  std::string::pointer v7 = (std::string *)v9.__r_.__value_.__r.__words[0];
  if (*(_WORD *)v9.__r_.__value_.__l.__data_ != 21343
    && *(_WORD *)v9.__r_.__value_.__l.__data_ != 16991
    && *(_WORD *)v9.__r_.__value_.__l.__data_ != 18783)
  {
LABEL_17:
    if (LOWORD(v7->__r_.__value_.__l.__data_) != 17759)
    {
LABEL_18:
      *a3 = __str;
      memset(&__str, 0, sizeof(__str));
      if ((v6 & 0x80) == 0) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
  }
LABEL_23:
  std::string::size_type v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v8 = __str.__r_.__value_.__l.__size_;
  }
  std::string::basic_string(a3, &__str, 0, v8 - 2, (std::allocator<char> *)&v11);
  if ((*((unsigned char *)&v9.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_19:
  }
    operator delete(v9.__r_.__value_.__l.__data_);
LABEL_20:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_19BAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SiriTTS::ForcedAlignment::Lexicon::word_to_int(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 96))(*(void *)(a1 + 40));
}

void *SiriTTS::ForcedAlignment::Lexicon::write_text_fst(long long **a1, void *a2)
{
  *(void *)((char *)a2 + *(void *)(*a2 - 24) + 16) = 15;
  uint64_t v3 = (void *)std::ostream::operator<<();
  v86.__r_.__value_.__s.__data_[0] = 9;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v86, 1);
  unint64_t v4 = (void *)std::ostream::operator<<();
  v86.__r_.__value_.__s.__data_[0] = 9;
  size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v86, 1);
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"<eps>", 5);
  v86.__r_.__value_.__s.__data_[0] = 9;
  std::string::pointer v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v86, 1);
  std::string::size_type v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"<eps>", 5);
  v86.__r_.__value_.__s.__data_[0] = 9;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v86, 1);
  std::string v9 = (void *)std::ostream::operator<<();
  v86.__r_.__value_.__s.__data_[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v86, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  v86.__r_.__value_.__s.__data_[0] = 9;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v86, 1);
  char v11 = (void *)std::ostream::operator<<();
  v86.__r_.__value_.__s.__data_[0] = 9;
  char v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v86, 1);
  std::string::pointer v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"sil", 3);
  v86.__r_.__value_.__s.__data_[0] = 9;
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v86, 1);
  long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"<eps>", 5);
  v86.__r_.__value_.__s.__data_[0] = 9;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v86, 1);
  unint64_t v16 = (void *)std::ostream::operator<<();
  v86.__r_.__value_.__s.__data_[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v86, 1);
  unint64_t v17 = (void *)std::ostream::operator<<();
  v86.__r_.__value_.__s.__data_[0] = 9;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v86, 1);
  unint64_t v18 = (void *)std::ostream::operator<<();
  v86.__r_.__value_.__s.__data_[0] = 9;
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v86, 1);
  unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"sil", 3);
  v86.__r_.__value_.__s.__data_[0] = 9;
  unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v86, 1);
  unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"<eps>", 5);
  v86.__r_.__value_.__s.__data_[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)&v86, 1);
  unint64_t v23 = *a1;
  uint64_t v84 = a1[1];
  if (*a1 != v84)
  {
    int v85 = 3;
    do
    {
      uint64_t v24 = *((void *)v23 + 3);
      uint64_t v25 = *((void *)v23 + 4);
      uint64_t v26 = v25 - v24;
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v24) >> 3);
      if (v27 >= 2)
      {
        uint64_t v28 = (void *)std::ostream::operator<<();
        v86.__r_.__value_.__s.__data_[0] = 9;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)&v86, 1);
        std::string::pointer v29 = (void *)std::ostream::operator<<();
        v86.__r_.__value_.__s.__data_[0] = 9;
        int v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)&v86, 1);
        int v31 = *(char *)(v24 + 23);
        if (v31 >= 0) {
          uint64_t v32 = v24;
        }
        else {
          uint64_t v32 = *(void *)v24;
        }
        if (v31 >= 0) {
          uint64_t v33 = *(unsigned __int8 *)(v24 + 23);
        }
        else {
          uint64_t v33 = *(void *)(v24 + 8);
        }
        size_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
        v86.__r_.__value_.__s.__data_[0] = 9;
        size_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)&v86, 1);
        int v36 = *((char *)v23 + 23);
        if (v36 >= 0) {
          double v37 = (const std::string::value_type *)v23;
        }
        else {
          double v37 = *(const std::string::value_type **)v23;
        }
        if (v36 >= 0) {
          uint64_t v38 = *((unsigned __int8 *)v23 + 23);
        }
        else {
          uint64_t v38 = *((void *)v23 + 1);
        }
        long long v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v37, v38);
        v86.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)&v86, 1);
        uint64_t v25 = *((void *)v23 + 4);
        uint64_t v26 = v25 - *((void *)v23 + 3);
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (v26 >> 3);
        ++v85;
      }
      if (v27 - 3 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        do
        {
          uint64_t v42 = v40;
          uint64_t v43 = (void *)std::ostream::operator<<();
          v86.__r_.__value_.__s.__data_[0] = 9;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v86, 1);
          uint64_t v44 = (void *)std::ostream::operator<<();
          v86.__r_.__value_.__s.__data_[0] = 9;
          long long v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)&v86, 1);
          uint64_t v46 = *((void *)v23 + 3) + v41;
          uint64_t v49 = *(void *)(v46 + 24);
          uint64_t v47 = v46 + 24;
          uint64_t v48 = v49;
          int v50 = *(char *)(v47 + 23);
          if (v50 >= 0) {
            uint64_t v51 = v47;
          }
          else {
            uint64_t v51 = v48;
          }
          if (v50 >= 0) {
            uint64_t v52 = *(unsigned __int8 *)(v47 + 23);
          }
          else {
            uint64_t v52 = *(void *)(v47 + 8);
          }
          unint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v51, v52);
          v86.__r_.__value_.__s.__data_[0] = 9;
          unint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&v86, 1);
          uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"<eps>", 5);
          v86.__r_.__value_.__s.__data_[0] = 10;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)&v86, 1);
          uint64_t v25 = *((void *)v23 + 4);
          uint64_t v26 = v25 - *((void *)v23 + 3);
          v41 += 24;
          uint64_t v40 = v42 + 1;
        }
        while (-1 - 0x5555555555555555 * (v26 >> 3) > (unint64_t)(v42 + 2));
        v85 += v40;
      }
      if (v26 == 24)
      {
        if (*((char *)v23 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)v23, *((void *)v23 + 1));
        }
        else
        {
          long long v56 = *v23;
          v86.__r_.__value_.__r.__words[2] = *((void *)v23 + 2);
          *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v56;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v86, "<eps>");
      }
      long long v57 = (void *)std::ostream::operator<<();
      char v87 = 9;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)&v87, 1);
      uint64_t v58 = (void *)std::ostream::operator<<();
      char v87 = 9;
      unint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)&v87, 1);
      int v60 = *(char *)(v25 - 1);
      if (v60 >= 0) {
        uint64_t v61 = v25 - 24;
      }
      else {
        uint64_t v61 = *(void *)(v25 - 24);
      }
      if (v60 >= 0) {
        uint64_t v62 = *(unsigned __int8 *)(v25 - 1);
      }
      else {
        uint64_t v62 = *(void *)(v25 - 16);
      }
      unint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v61, v62);
      char v87 = 9;
      int64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)&v87, 1);
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v65 = &v86;
      }
      else {
        int v65 = (std::string *)v86.__r_.__value_.__r.__words[0];
      }
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v86.__r_.__value_.__l.__size_;
      }
      int v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, size);
      char v87 = 9;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)&v87, 1);
      int v68 = (void *)std::ostream::operator<<();
      char v87 = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)&v87, 1);
      uint64_t v69 = (void *)std::ostream::operator<<();
      char v87 = 9;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)&v87, 1);
      uint64_t v70 = (void *)std::ostream::operator<<();
      char v87 = 9;
      int v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)&v87, 1);
      int v72 = *(char *)(v25 - 1);
      if (v72 >= 0) {
        uint64_t v73 = v25 - 24;
      }
      else {
        uint64_t v73 = *(void *)(v25 - 24);
      }
      if (v72 >= 0) {
        uint64_t v74 = *(unsigned __int8 *)(v25 - 1);
      }
      else {
        uint64_t v74 = *(void *)(v25 - 16);
      }
      double v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
      char v87 = 9;
      unint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)&v87, 1);
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v77 = &v86;
      }
      else {
        uint64_t v77 = (std::string *)v86.__r_.__value_.__r.__words[0];
      }
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v78 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v78 = v86.__r_.__value_.__l.__size_;
      }
      unint64_t v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v77, v78);
      char v87 = 9;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)&v87, 1);
      int64_t v80 = (void *)std::ostream::operator<<();
      char v87 = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)&v87, 1);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      v23 += 3;
    }
    while (v23 != v84);
  }
  BOOL v81 = (void *)std::ostream::operator<<();
  v86.__r_.__value_.__s.__data_[0] = 9;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)&v86, 1);
  unint64_t v82 = (void *)std::ostream::operator<<();
  v86.__r_.__value_.__s.__data_[0] = 10;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)&v86, 1);
}

void sub_19C130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SiriTTS::ForcedAlignment::Lexicon::generate_fst(long long **this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v3);
  SiriTTS::ForcedAlignment::Lexicon::write_text_fst(this, &v4);
  std::string::basic_string[abi:ne180100]<0>(&__p, "LexiconService");
  fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FstCompiler();
}

void sub_19C370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void *fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstCompiler(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::__unordered_map_hasher<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*,std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::hash<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>,std::equal_to<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>,true>,std::__unordered_map_equal<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*,std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::equal_to<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>,std::hash<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>,true>,std::allocator<std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~__hash_table(a1 + 72);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  return fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ImplToFst((void *)a1);
}

void std::vector<SiriTTS::ForcedAlignment::Lexeme>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    size_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<SiriTTS::ForcedAlignment::Lexeme>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<SiriTTS::ForcedAlignment::Lexeme>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__115allocate_sharedB8ne180100IN3fst11SymbolTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_()
{
  uint64_t v0 = operator new(0x28uLL);
  _ZNSt3__120__shared_ptr_emplaceIN3fst11SymbolTableENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v0);
}

void sub_19C518(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__120__shared_ptr_emplaceIN3fst11SymbolTableENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26EC30;
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)(a1 + 3));
}

void sub_19C574(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::SymbolTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26EC30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::SymbolTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26EC30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t std::__shared_ptr_emplace<fst::SymbolTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void fst::SymbolTable::SymbolTable(fst::SymbolTable *this)
{
  *(void *)this = off_263150;
  operator new();
}

void sub_19C6B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t std::vector<SiriTTS::ForcedAlignment::Lexeme>::__push_back_slow_path<SiriTTS::ForcedAlignment::Lexeme const&>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    std::string::pointer v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>((uint64_t)(a1 + 2), v6);
  }
  else {
    std::string::pointer v7 = 0;
  }
  unint64_t v10 = v7;
  char v11 = (std::string *)&v7[48 * v3];
  std::string::pointer v13 = &v7[48 * v6];
  std::allocator<SiriTTS::ForcedAlignment::Lexeme>::construct[abi:ne180100]<SiriTTS::ForcedAlignment::Lexeme,SiriTTS::ForcedAlignment::Lexeme const&>(a1 + 16, v11, a2);
  char v12 = v11 + 2;
  std::vector<SiriTTS::ForcedAlignment::Lexeme>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<SiriTTS::ForcedAlignment::Lexeme>::~__split_buffer(&v10);
  return v8;
}

void sub_19C7F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<SiriTTS::ForcedAlignment::Lexeme>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::allocator<SiriTTS::ForcedAlignment::Lexeme>::construct[abi:ne180100]<SiriTTS::ForcedAlignment::Lexeme,SiriTTS::ForcedAlignment::Lexeme const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *((long long **)a3 + 3), *((long long **)a3 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 4) - *((void *)a3 + 3)) >> 3));
}

void sub_19C878(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_19C8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  unint64_t v4 = this;
  char v11 = this;
  char v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        unint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      unint64_t v6 = (long long *)((char *)v6 + 24);
      char v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_19C9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

uint64_t std::vector<SiriTTS::ForcedAlignment::Lexeme>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SiriTTS::ForcedAlignment::Lexeme>,std::reverse_iterator<SiriTTS::ForcedAlignment::Lexeme*>,std::reverse_iterator<SiriTTS::ForcedAlignment::Lexeme*>,std::reverse_iterator<SiriTTS::ForcedAlignment::Lexeme*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SiriTTS::ForcedAlignment::Lexeme>,std::reverse_iterator<SiriTTS::ForcedAlignment::Lexeme*>,std::reverse_iterator<SiriTTS::ForcedAlignment::Lexeme*>,std::reverse_iterator<SiriTTS::ForcedAlignment::Lexeme*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 48;
      *((void *)&v14 + 1) -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::ForcedAlignment::Lexeme>,std::reverse_iterator<SiriTTS::ForcedAlignment::Lexeme*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::ForcedAlignment::Lexeme>,std::reverse_iterator<SiriTTS::ForcedAlignment::Lexeme*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::ForcedAlignment::Lexeme>,std::reverse_iterator<SiriTTS::ForcedAlignment::Lexeme*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::ForcedAlignment::Lexeme>,std::reverse_iterator<SiriTTS::ForcedAlignment::Lexeme*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<SiriTTS::ForcedAlignment::Lexeme>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<SiriTTS::ForcedAlignment::Lexeme>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<SiriTTS::ForcedAlignment::Lexeme>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<SiriTTS::ForcedAlignment::Lexeme>::destroy[abi:ne180100](v4, i - 48);
  }
}

void fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FstCompiler()
{
}

void sub_19CD60(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::__unordered_map_hasher<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*,std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::hash<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>,std::equal_to<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>,true>,std::__unordered_map_equal<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*,std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::equal_to<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>,std::hash<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*>,true>,std::allocator<std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~__hash_table(v2);
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v3);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ImplToFst((void *)v1);
  _Unwind_Resume(a1);
}

void fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, char a11, char a12)
{
  char v12 = (std::string *)off_25CE28();
  int v51 = v13;
  int v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  unint64_t v23 = v22;
  uint64_t v24 = (uint64_t)v12;
  v12->__r_.__value_.__r.__words[2] = 0;
  uint64_t v52 = v12 + 1;
  std::string::operator=(v12 + 1, v25);
  *(void *)(v24 + 48) = v21;
  *(void *)(v24 + 56) = v19;
  *(void *)(v24 + 64) = v17;
  *(_DWORD *)(v24 + 112) = 0;
  *(unsigned char *)(v24 + 116) = a10;
  *(unsigned char *)(v24 + 117) = a11;
  *(unsigned char *)(v24 + 118) = a12;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
    uint64_t v26 = std::locale::use_facet(&v62, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
    std::locale::~locale(&v62);
    unint64_t v27 = (void *)std::istream::getline();
    if ((*((unsigned char *)v27 + *(void *)(*v27 - 24) + 32) & 5) != 0) {
      break;
    }
    ++*(void *)(v24 + 16);
    v62.__locale_ = 0;
    locale = 0;
    uint64_t v64 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v59, FLAGS_fst_field_separator);
    uint64_t v28 = std::string::append(&v59, "\n");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    int64_t v61 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)int v60 = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (v61 >= 0) {
      int v30 = (char *)v60;
    }
    else {
      int v30 = (char *)v60[0];
    }
    fst::SplitToVector(__s1, v30, (void **)&v62.__locale_, 1);
    unint64_t v31 = locale - v62.__locale_;
    if (locale != v62.__locale_ && **(unsigned char **)v62.__locale_)
    {
      if (v31 > 0x20) {
        int v32 = v15;
      }
      else {
        int v32 = 0;
      }
      if (v31 > 0x28) {
        int v32 = 1;
      }
      if (v31 == 24) {
        int v33 = v15;
      }
      else {
        int v33 = 1;
      }
      if (v32 != v33)
      {
        int v34 = fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::StrToStateId(v24, *(char **)v62.__locale_);
        while (v34 >= (int)((*(void *)(*(void *)(v24 + 8) + 72) - *(void *)(*(void *)(v24 + 8) + 64)) >> 3))
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddState(v24);
        if (*(void *)(v24 + 16) == 1) {
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetStart(v24, v34);
        }
        switch((locale - v62.__locale_) >> 3)
        {
          case 1:
            float v39 = 0.0;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(v24);
            goto LABEL_44;
          case 2:
            float v39 = fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::StrToWeight(v24, *((char **)v62.__locale_ + 1), 1);
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(v24);
LABEL_44:
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFinal(*(void **)(v24 + 8), v34, v39);
            break;
          case 3:
            int v46 = fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::StrToStateId(v24, *((char **)v62.__locale_ + 1));
            HIDWORD(v59.__r_.__value_.__r.__words[1]) = v46;
            LODWORD(v59.__r_.__value_.__l.__data_) = fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::StrToId(v24, *((char **)v62.__locale_ + 2), *(void *)(v24 + 48), "arc ilabel", *(unsigned char *)(v24 + 117));
            *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = LODWORD(v59.__r_.__value_.__l.__data_);
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(v24);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(*(void **)(v24 + 8), v34, (float *)&v59);
            int v34 = v46;
            break;
          case 4:
            int v47 = fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::StrToStateId(v24, *((char **)v62.__locale_ + 1));
            HIDWORD(v59.__r_.__value_.__r.__words[1]) = v47;
            int v48 = fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::StrToId(v24, *((char **)v62.__locale_ + 2), *(void *)(v24 + 48), "arc ilabel", *(unsigned char *)(v24 + 117));
            LODWORD(v59.__r_.__value_.__l.__data_) = v48;
            if (v15)
            {
              HIDWORD(v59.__r_.__value_.__r.__words[0]) = v48;
              float v49 = fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::StrToWeight(v24, *((char **)v62.__locale_ + 3), 1);
            }
            else
            {
              HIDWORD(v59.__r_.__value_.__r.__words[0]) = fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::StrToId(v24, *((char **)v62.__locale_ + 3), *(void *)(v24 + 56), "arc olabel", *(unsigned char *)(v24 + 117));
              float v49 = 0.0;
            }
            *(float *)&v59.__r_.__value_.__r.__words[1] = v49;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(v24);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(*(void **)(v24 + 8), v34, (float *)&v59);
            int v34 = v47;
            break;
          case 5:
            int v50 = fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::StrToStateId(v24, *((char **)v62.__locale_ + 1));
            HIDWORD(v59.__r_.__value_.__r.__words[1]) = v50;
            LODWORD(v59.__r_.__value_.__l.__data_) = fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::StrToId(v24, *((char **)v62.__locale_ + 2), *(void *)(v24 + 48), "arc ilabel", *(unsigned char *)(v24 + 117));
            HIDWORD(v59.__r_.__value_.__r.__words[0]) = fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::StrToId(v24, *((char **)v62.__locale_ + 3), *(void *)(v24 + 56), "arc olabel", *(unsigned char *)(v24 + 117));
            LODWORD(v59.__r_.__value_.__r.__words[1]) = fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::StrToWeight(v24, *((char **)v62.__locale_ + 4), 1);
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(v24);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(*(void **)(v24 + 8), v34, (float *)&v59);
            int v34 = v50;
            break;
          default:
            break;
        }
        while (v34 >= (int)((*(void *)(*(void *)(v24 + 8) + 72) - *(void *)(*(void *)(v24 + 8) + 64)) >> 3))
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddState(v24);
        int v35 = 0;
        goto LABEL_54;
      }
      int v36 = FLAGS_fst_error_fatal;
      if (FLAGS_fst_error_fatal)
      {
        std::string::basic_string[abi:ne180100]<0>(v56, "FATAL");
        double v37 = fst::LogMessage::LogMessage((fst *)&v58, (uint64_t)v56);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        double v37 = fst::LogMessage::LogMessage((fst *)&v55, (uint64_t)__p);
      }
      uint64_t v38 = fst::cerr(v37);
      uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"FstCompiler: Bad number of columns, source = ", 45);
      char v41 = *(unsigned char *)(v24 + 47);
      if (v41 >= 0) {
        uint64_t v42 = (uint64_t)v52;
      }
      else {
        uint64_t v42 = *(void *)(v24 + 24);
      }
      if (v41 >= 0) {
        uint64_t v43 = *(unsigned __int8 *)(v24 + 47);
      }
      else {
        uint64_t v43 = *(void *)(v24 + 32);
      }
      uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", line = ", 9);
      std::ostream::operator<<();
      if (v36)
      {
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v58);
        if (v57 < 0)
        {
          long long v45 = (void *)v56[0];
          goto LABEL_41;
        }
      }
      else
      {
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v55);
        if (v54 < 0)
        {
          long long v45 = __p[0];
LABEL_41:
          operator delete(v45);
        }
      }
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetProperties(v24, 4, 4);
      int v35 = 1;
      goto LABEL_54;
    }
    int v35 = 2;
LABEL_54:
    if (SHIBYTE(v61) < 0) {
      operator delete(v60[0]);
    }
    if (v62.__locale_)
    {
      locale = v62.__locale_;
      operator delete(v62.__locale_);
    }
    if ((v35 | 2) != 2) {
      return;
    }
  }
  if (v51)
  {
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(v24);
    fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(*(void *)(v24 + 8), v21);
  }
  if (a9)
  {
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(v24);
    fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(*(void *)(v24 + 8), v19);
  }
}

void sub_19D3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,std::locale a46,uint64_t a47)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  if (a46.__locale_) {
    operator delete(a46.__locale_);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::StrToStateId(uint64_t a1, char *a2)
{
  uint64_t result = fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::StrToId(a1, a2, *(void *)(a1 + 64), "state ID", 0);
  int v6 = result;
  if (!*(unsigned char *)(a1 + 116))
  {
    uint64_t v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 72), &v6);
    if (v4)
    {
      return *((unsigned int *)v4 + 5);
    }
    else
    {
      int v5 = *(_DWORD *)(a1 + 112);
      uint64_t v7 = &v6;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 72, &v6, (uint64_t)&std::piecewise_construct, &v7)+ 5) = v5;
      uint64_t result = *(unsigned int *)(a1 + 112);
      *(_DWORD *)(a1 + 112) = result + 1;
    }
  }
  return result;
}

float fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::StrToWeight(uint64_t a1, char *a2, char a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  std::istringstream::basic_istringstream[abi:ne180100](v18, &__p, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  fst::operator>><float,(fst::FloatWeightTplAlignmentType)1>((uint64_t *)v18, (int *)&v20);
  if ((*((unsigned char *)&v18[4] + (unint64_t)*(v18[0] - 3)) & 5) != 0
    || (a3 & 1) == 0 && (*(float *)&__p.__r_.__value_.__l.__data_ = v20, int v21 = 2139095040, v20 == INFINITY))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    }
    int v6 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)&__p);
    uint64_t v7 = fst::cerr(v6);
    long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"FstCompiler: Bad weight = \"", 27);
    size_t v9 = strlen(a2);
    char v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a2, v9);
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\", source = ", 12);
    int v12 = *(char *)(a1 + 47);
    if (v12 >= 0) {
      uint64_t v13 = a1 + 24;
    }
    else {
      uint64_t v13 = *(void *)(a1 + 24);
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      uint64_t v14 = *(void *)(a1 + 32);
    }
    int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", line = ", 9);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetProperties(a1, 4, 4);
    float v20 = NAN;
  }
  if (v19 < 0) {
    operator delete(v18[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  return v20;
}

void sub_19D7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v15 - 52));
  if (a14 < 0) {
    operator delete(__p);
  }
  std::istringstream::~istringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::FstCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::StrToId(uint64_t a1, char *__s, uint64_t a3, const char *a4, char a5)
{
  if (!a3)
  {
    __endptr = 0;
    uint64_t v10 = strtoll(__s, &__endptr, 10);
    char v11 = &__s[strlen(__s)];
    if (v10 >= 0) {
      char v12 = 1;
    }
    else {
      char v12 = a5;
    }
    if (__endptr >= v11 && (v12 & 1) != 0) {
      return v10;
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v13 = fst::LogMessage::LogMessage((fst *)&v48, (uint64_t)__p);
    uint64_t v14 = fst::cerr(v13);
    int v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"FstCompiler: Bad ", 17);
    size_t v37 = strlen(a4);
    uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)a4, v37);
    float v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" integer = \"", 12);
    size_t v40 = strlen(__s);
    char v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)__s, v40);
    uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"\", source = ", 12);
    int v43 = *(char *)(a1 + 47);
    if (v43 >= 0) {
      uint64_t v44 = a1 + 24;
    }
    else {
      uint64_t v44 = *(void *)(a1 + 24);
    }
    if (v43 >= 0) {
      uint64_t v45 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      uint64_t v45 = *(void *)(a1 + 32);
    }
    int v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)", line = ", 9);
    std::ostream::operator<<();
    p_endptr = (char **)&v48;
    goto LABEL_42;
  }
  if (*(unsigned char *)(a1 + 118))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a3 + 32))(a3, __p);
    if (v51 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, char *))(*(void *)a3 + 104))(a3, __s);
  }
  if (v10 >= 0) {
    char v15 = 1;
  }
  else {
    char v15 = a5;
  }
  if (v10 == -1 || (v15 & 1) == 0)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v16 = fst::LogMessage::LogMessage((fst *)&__endptr, (uint64_t)__p);
    uint64_t v17 = fst::cerr(v16);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"FstCompiler: Symbol \"", 21);
    size_t v19 = strlen(__s);
    float v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)__s, v19);
    int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\" is not mapped to any integer ", 31);
    size_t v22 = strlen(a4);
    unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)a4, v22);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", symbol table = ", 17);
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3);
    int v26 = *(char *)(v25 + 23);
    if (v26 >= 0) {
      uint64_t v27 = v25;
    }
    else {
      uint64_t v27 = *(void *)v25;
    }
    if (v26 >= 0) {
      uint64_t v28 = *(unsigned __int8 *)(v25 + 23);
    }
    else {
      uint64_t v28 = *(void *)(v25 + 8);
    }
    long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v27, v28);
    int v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", source = ", 11);
    int v31 = *(char *)(a1 + 47);
    if (v31 >= 0) {
      uint64_t v32 = a1 + 24;
    }
    else {
      uint64_t v32 = *(void *)(a1 + 24);
    }
    if (v31 >= 0) {
      uint64_t v33 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      uint64_t v33 = *(void *)(a1 + 32);
    }
    int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", line = ", 9);
    std::ostream::operator<<();
    p_endptr = &__endptr;
LABEL_42:
    fst::LogMessage::~LogMessage((fst::LogMessage *)p_endptr);
    if (v51 < 0) {
      operator delete(__p[0]);
    }
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetProperties(a1, 4, 4);
  }
  return v10;
}

void sub_19DC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      char v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          char v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  char v11 = operator new(0x18uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  float v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *v11 = *v20;
LABEL_38:
    *float v20 = v11;
    goto LABEL_39;
  }
  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    float v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_19DE74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *fst::operator>><float,(fst::FloatWeightTplAlignmentType)1>(uint64_t *a1, int *a2)
{
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)&v16);
  char v4 = HIBYTE(v18);
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if (HIBYTE(v18) != 8)
    {
      if (HIBYTE(v18) != 9) {
        goto LABEL_20;
      }
      if (v16 != (char *)0x74696E69666E492DLL || v17 != 121) {
        goto LABEL_20;
      }
      goto LABEL_31;
    }
    if (v16 != (char *)0x7974696E69666E49)
    {
LABEL_20:
      BOOL v15 = 0;
      int v6 = (const char *)&v16;
      goto LABEL_22;
    }
LABEL_19:
    int v8 = 2139095040;
    goto LABEL_32;
  }
  if (v17 == 8 && *(void *)v16 == 0x7974696E69666E49) {
    goto LABEL_19;
  }
  if (v17 == 9)
  {
    int v6 = v16;
    if (*(void *)v16 != 0x74696E69666E492DLL || v16[8] != 121)
    {
      BOOL v15 = 0;
      goto LABEL_22;
    }
LABEL_31:
    int v8 = -8388608;
LABEL_32:
    *a2 = v8;
    if ((v4 & 0x80) == 0) {
      return a1;
    }
    goto LABEL_29;
  }
  BOOL v15 = 0;
  int v6 = v16;
LABEL_22:
  double v9 = strtod(v6, &v15);
  uint64_t v10 = v16;
  uint64_t v11 = HIBYTE(v18);
  char v12 = HIBYTE(v18);
  if (v18 < 0) {
    uint64_t v11 = v17;
  }
  else {
    uint64_t v10 = (char *)&v16;
  }
  if (v15 >= &v10[v11])
  {
    float v13 = v9;
    *(float *)a2 = v13;
    if (v12 < 0) {
LABEL_29:
    }
      operator delete(v16);
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), 1u);
    if (v18 < 0) {
      goto LABEL_29;
    }
  }
  return a1;
}

void sub_19E034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *SiriTTS::ForcedAlignment::AlignmentDecoder::AlignmentDecoder(void *result, void *a2)
{
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v2 = a2[1];
  result[2] = *a2;
  result[3] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void SiriTTS::ForcedAlignment::AlignmentDecoder::decodePhoneAlignment(uint64_t a1@<X0>, uint64_t *a2@<X1>, float *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a2;
  double v9 = (std::__shared_weak_count *)a2[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a4[1] != *a4 && (*(unsigned int (**)(uint64_t))(*(void *)v10 + 24))(v10) != -1)
  {
    float v13 = *(kaldi **)(a1 + 16);
    std::string __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    kaldi::AddTransitionProbs(v13, &__p, v10, a3[3], a3[4], v11, v12);
    if (__p)
    {
      uint64_t v18 = __p;
      operator delete(__p);
    }
    uint64_t v21 = 0x147FFFFFFFLL;
    uint64_t v22 = 0x400000003F000000;
    float v20 = *a3;
    kaldi::FasterDecoder::FasterDecoder(&__p, v10, &v20);
    memset(v15, 0, sizeof(v15));
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v15, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
    SiriTTS::ForcedAlignment::kaldi_matrix_from_matrix(v15, (uint64_t)v16);
    float v14 = v15;
    std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    operator new();
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_19E450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  *(void *)(v32 - 96) = &a9;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 96));
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a16)
  {
    a17 = (uint64_t)a16;
    operator delete(a16);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>::~ImplToFst(&a19);
  (*(void (**)(uint64_t))(*(void *)v31 + 72))(v31);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a24);
  kaldi::FasterDecoder::~FasterDecoder((kaldi::FasterDecoder *)&a29, v34, v35, v36, v37);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::GetLinearSymbolSequence<fst::ArcTpl<fst::LatticeWeightTpl<float>>,int>(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4, int a5)
{
  std::string __p = 0;
  char v51 = 0;
  unint64_t v52 = 0;
  int v47 = 0;
  char v48 = 0;
  unint64_t v49 = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v10 == -1)
  {
    if (a2) {
      *(void *)(a2 + 8) = *(void *)a2;
    }
    if (a3) {
      *(void *)(a3 + 8) = *(void *)a3;
    }
    if (a4) {
      *a4 = vdup_n_s32(0x7F800000u);
    }
    uint64_t v38 = 1;
  }
  else
  {
    for (float32x2_t i = 0; ; float32x2_t i = vadd_f32(i, v14))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v46, a1, v10);
      float v55 = *((float *)&v46 + 1);
      LODWORD(v43[0]) = v46;
      int v54 = 2139095040;
      float v53 = INFINITY;
      v12.n128_u32[0] = v46;
      if (*(float *)&v46 != INFINITY) {
        break;
      }
      v12.n128_f32[0] = v55;
      if (v55 != v53) {
        break;
      }
      if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 40))(a1, v10, v55) != 1) {
        goto LABEL_55;
      }
      uint64_t v45 = 0;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 128))(a1, v10, v43);
      if (v43[0]) {
        uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v43[0] + 32))(v43[0]);
      }
      else {
        uint64_t v13 = v43[1] + 20 * v45;
      }
      float32x2_t v14 = *(float32x2_t *)(v13 + 8);
      int v15 = *(_DWORD *)v13;
      if (*(_DWORD *)v13) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = a5 == 0;
      }
      if (!v16)
      {
        uint64_t v17 = v51;
        if ((unint64_t)v51 >= v52)
        {
          uint64_t v19 = __p;
          uint64_t v20 = ((char *)v51 - (unsigned char *)__p) >> 2;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62) {
            goto LABEL_77;
          }
          uint64_t v22 = v52 - (void)__p;
          if ((uint64_t)(v52 - (void)__p) >> 1 > v21) {
            unint64_t v21 = v22 >> 1;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v52, v23);
            uint64_t v19 = __p;
            uint64_t v17 = v51;
            int v15 = *(_DWORD *)v13;
          }
          else
          {
            uint64_t v24 = 0;
          }
          uint64_t v25 = &v24[4 * v20];
          *(_DWORD *)uint64_t v25 = v15;
          uint64_t v18 = v25 + 4;
          while (v17 != v19)
          {
            int v26 = *--v17;
            *((_DWORD *)v25 - 1) = v26;
            v25 -= 4;
          }
          std::string __p = v25;
          char v51 = v18;
          unint64_t v52 = (unint64_t)&v24[4 * v23];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *char v51 = v15;
          uint64_t v18 = v17 + 1;
        }
        char v51 = v18;
      }
      int v27 = *(_DWORD *)(v13 + 4);
      if (v27 || a5)
      {
        uint64_t v28 = v48;
        if ((unint64_t)v48 >= v49)
        {
          int v30 = v47;
          uint64_t v31 = ((char *)v48 - (unsigned char *)v47) >> 2;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 62) {
LABEL_77:
          }
            std::vector<float>::__throw_length_error[abi:ne180100]();
          uint64_t v33 = v49 - (void)v47;
          if ((uint64_t)(v49 - (void)v47) >> 1 > v32) {
            unint64_t v32 = v33 >> 1;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v32;
          }
          if (v34)
          {
            uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v49, v34);
            int v30 = v47;
            uint64_t v28 = v48;
            int v27 = *(_DWORD *)(v13 + 4);
          }
          else
          {
            uint64_t v35 = 0;
          }
          uint64_t v36 = &v35[4 * v31];
          *(_DWORD *)uint64_t v36 = v27;
          long long v29 = v36 + 4;
          while (v28 != v30)
          {
            int v37 = *--v28;
            *((_DWORD *)v36 - 1) = v37;
            v36 -= 4;
          }
          int v47 = v36;
          char v48 = v29;
          unint64_t v49 = (unint64_t)&v35[4 * v34];
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          *char v48 = v27;
          long long v29 = v28 + 1;
        }
        char v48 = v29;
      }
      uint64_t v10 = *(unsigned int *)(v13 + 16);
      if (v43[0])
      {
        (*(void (**)(void))(*(void *)v43[0] + 8))(v43[0]);
      }
      else if (v44)
      {
        --*v44;
      }
    }
    __int32 v41 = HIDWORD(v46);
    __int32 v42 = v46;
    if ((*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)a1 + 40))(a1, v10, v12))
    {
LABEL_55:
      uint64_t v38 = 0;
    }
    else
    {
      if (a2 && &__p != (void **)a2) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a2, (char *)__p, (uint64_t)v51, ((char *)v51 - (unsigned char *)__p) >> 2);
      }
      if (a3 && &v47 != (void **)a3) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a3, (char *)v47, (uint64_t)v48, ((char *)v48 - (unsigned char *)v47) >> 2);
      }
      v39.i32[0] = v42;
      if (a4)
      {
        v39.i32[1] = v41;
        *a4 = (int32x2_t)vadd_f32(i, v39);
      }
      uint64_t v38 = 1;
    }
    if (v47)
    {
      char v48 = v47;
      operator delete(v47);
    }
  }
  if (__p)
  {
    char v51 = __p;
    operator delete(__p);
  }
  return v38;
}

void sub_19EA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::FasterDecoder::~FasterDecoder(kaldi::FasterDecoder *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *((void *)this + 1);
  if (v6 != -1)
  {
    uint64_t v7 = *((void *)this + 3);
    do
    {
      int v8 = (uint64_t *)(v7 + 16 * v6);
      v8[1] = 0;
      uint64_t v6 = *v8;
    }
    while (v6 != -1);
  }
  uint64_t v9 = *(void *)this;
  *(void *)this = 0;
  *((void *)this + 1) = -1;
  kaldi::FasterDecoder::ClearToks((uint64_t)this, v9, a3, a4, a5);
  uint64_t v10 = (void *)*((void *)this + 17);
  if (v10)
  {
    *((void *)this + 18) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 14);
  if (v11)
  {
    *((void *)this + 15) = v11;
    operator delete(v11);
  }

  kaldi::HashList<int,kaldi::FasterDecoder::Token *>::~HashList(this);
}

void *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_19EBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *char v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      char v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_19EC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void sub_19EE50(_Unwind_Exception *a1)
{
}

void (__cdecl ***std::ifstream::basic_ifstream(void (__cdecl ***a1)(std::ifstream *__hidden this)))(std::ifstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  a1[1] = 0;
  char v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 2);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_19F020(_Unwind_Exception *a1)
{
}

uint64_t utils::update_progress_bar(uint64_t result, int a2, int a3, int a4, uint64_t a5)
{
  if (!((int)result % (a2 / a3 + 1)))
  {
    float v7 = (float)(int)result / (float)a2;
    int v8 = (int)(float)(v7 * (float)a4);
    int v9 = *(char *)(a5 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a5;
    }
    else {
      uint64_t v10 = *(void *)a5;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a5 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cout, v10, v11);
    printf(" %3d%% [", (int)(float)(v7 * 100.0));
    if (v8 >= 1)
    {
      int v12 = v8;
      do
      {
        putchar(61);
        --v12;
      }
      while (v12);
    }
    BOOL v13 = __OFSUB__(a4, v8);
    int v14 = a4 - v8;
    if (!((v14 < 0) ^ v13 | (v14 == 0)))
    {
      do
      {
        putchar(32);
        --v14;
      }
      while (v14);
    }
    return printf("]\n\x1B[F\x1B[J");
  }
  return result;
}

char *std::__memberwise_copy_assign[abi:ne180100]<std::tuple<std::vector<float> &,std::vector<float> &>,std::tuple<std::vector<float>,std::vector<float>>,0ul,1ul>(char **a1, uint64_t a2)
{
  char v4 = *a1;
  if (v4 != (char *)a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  uint64_t result = a1[1];
  if (result != (char *)(a2 + 24))
  {
    uint64_t v6 = *(char **)(a2 + 24);
    uint64_t v7 = *(void *)(a2 + 32);
    return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(result, v6, v7, (v7 - (uint64_t)v6) >> 2);
  }
  return result;
}

void SiriTTS::ForcedAlignment::FeatureExtractorWav::compute(uint64_t a1@<X1>, void *a2@<X8>)
{
  char v4 = *(const void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  BOOL v16 = 0;
  uint64_t v17 = 0;
  int v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, v4, v5, (v5 - (uint64_t)v4) >> 2);
  uint64_t v6 = (*(void *)(a1 + 8) - *(void *)a1) >> 2;
  void v14[2] = 0;
  v14[0] = v15;
  v14[1] = v6;
  kaldi::Matrix<float>::Matrix((uint64_t)v13);
  kaldi::FbankOptions::FbankOptions((kaldi::FbankOptions *)v9);
  int v12 = 80;
  kaldi::Fbank::Fbank((kaldi::Fbank *)v8, (const kaldi::FbankOptions *)v9);
  kaldi::Fbank::Compute((kaldi::Fbank *)v8, (uint64_t)v14, (uint64_t)v13, 0, 1.0, 0, 0);
  kaldi::Matrix<float>::Matrix(v7, v13);
  SiriTTS::ForcedAlignment::matrix_from_kaldi_matrix(v7, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)v7);
  kaldi::Fbank::~Fbank((kaldi::Fbank *)v8);
  if (v11 < 0) {
    operator delete(__p);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v13);
  if (v15)
  {
    BOOL v16 = v15;
    operator delete(v15);
  }
}

void sub_19F2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  kaldi::Fbank::~Fbank((kaldi::Fbank *)&a14);
  if (a44 < 0) {
    operator delete(__p);
  }
  kaldi::Matrix<float>::~Matrix(v44 - 120);
  uint64_t v46 = *(void **)(v44 - 56);
  if (v46)
  {
    *(void *)(v44 - 48) = v46;
    operator delete(v46);
  }
  _Unwind_Resume(a1);
}

kaldi::FbankOptions *kaldi::FbankOptions::FbankOptions(kaldi::FbankOptions *this)
{
  *(_OWORD *)this = xmmword_2125F0;
  *((_DWORD *)this + 4) = 1064849900;
  *((unsigned char *)this + 20) = 1;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 3, "povey");
  *((_WORD *)this + 24) = 257;
  *(void *)((char *)this + 52) = 0x17BF800000;
  *(_OWORD *)((char *)this + 60) = xmmword_212600;
  *((_WORD *)this + 38) = 0;
  *((unsigned char *)this + 80) = 0;
  *((_DWORD *)this + 21) = 0;
  *((_DWORD *)this + 22) = 16842753;
  return this;
}

uint64_t AutocF0::AutocF0(uint64_t a1, long long *a2)
{
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v3 = (_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 80) = 0u;
  char v4 = (std::string *)(a1 + 128);
  v3[4] = 0u;
  v3[5] = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_OWORD *)(a1 + 192) = xmmword_212620;
  *(_OWORD *)(a1 + 208) = xmmword_212630;
  *(_OWORD *)(a1 + 168) = xmmword_212640;
  *(_OWORD *)(a1 + 152) = xmmword_212650;
  *(void *)(a1 + 272) = 16000;
  *(void *)(a1 + 316) = 0x1F400001388;
  *(_OWORD *)(a1 + 224) = xmmword_212660;
  *(_OWORD *)(a1 + 240) = xmmword_212680;
  *(_OWORD *)(a1 + 256) = xmmword_212690;
  *(_DWORD *)(a1 + 4) = 0;
  *(_OWORD *)((char *)v3 + 252) = xmmword_212670;
  *(_OWORD *)((char *)v3 + 268) = xmmword_2126A0;
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_19F4C4(_Unwind_Exception *a1)
{
  uint64_t v6 = (void *)v1[13];
  if (v6)
  {
    v1[14] = v6;
    operator delete(v6);
  }
  AutocF0::AutocF0(v3, v4, v2, v1);
  _Unwind_Resume(a1);
}

void AutocF0::estimate_pitch(unsigned int *a1@<X0>, uint64_t a2@<X1>, DSP *a3@<X2>, void *a4@<X8>)
{
  clock();
  *a1 = a3;
  a1[69] = a3;
  long long v468 = 0uLL;
  uint64_t v469 = 0;
  if (a1[6] && a1[68] != a3)
  {
    v464 = 0;
    uint64_t v465 = 0;
    v463 = 0;
    std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v463, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
    DSP::resample((uint64_t)&v463, *a1, a1[68], (uint64_t)&v466);
    if ((void)v468)
    {
      *((void *)&v468 + 1) = v468;
      operator delete((void *)v468);
    }
    long long v468 = v466;
    uint64_t v469 = v467;
    uint64_t v467 = 0;
    long long v466 = 0uLL;
    if (v463)
    {
      v464 = v463;
      operator delete(v463);
    }
    a3 = (DSP *)a1[68];
    *a1 = a3;
  }
  else if (&v468 != (long long *)a2)
  {
    std::vector<short>::__assign_with_size[abi:ne180100]<short *,short *>((char *)&v468, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
    a3 = (DSP *)*a1;
  }
  DSP::get_highpass_70hz_coefficients(a3);
  uint64_t v460 = 0;
  v458 = 0;
  v459 = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v458, (const void *)v466, *((uint64_t *)&v466 + 1), (uint64_t)(*((void *)&v466 + 1) - v466) >> 3);
  v456 = 0;
  std::string __p = 0;
  uint64_t v457 = 0;
  std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&__p, (const void *)v468, *((uint64_t *)&v468 + 1), (uint64_t)(*((void *)&v468 + 1) - v468) >> 1);
  DSP::high_pass_filter((unint64_t *)&v458, (char **)&__p, (char **)&__dst);
  if (__p)
  {
    v456 = __p;
    operator delete(__p);
  }
  if (v458)
  {
    v459 = v458;
    operator delete(v458);
  }
  double v7 = (double)(int)*a1;
  int v8 = llround(*((double *)a1 + 19) / 1000.0 * v7);
  if (v8 >= 0) {
    int v9 = v8;
  }
  else {
    int v9 = v8 + 1;
  }
  uint64_t v10 = (char *)__dst;
  unint64_t v11 = ((unsigned char *)v462 - (unsigned char *)__dst) >> 1;
  if (v11 < v8)
  {
    v378 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Error: Signal is not long enough to be processed.", 49);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v378);
    exit(1);
  }
  double v12 = *((double *)a1 + 20);
  unint64_t v402 = v8;
  if (v462 != __dst)
  {
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    double v13 = 0.0;
    int v14 = (__int16 *)__dst;
    unint64_t v15 = v11;
    do
    {
      int v17 = *v14++;
      int v16 = v17;
      if (v17 < 0) {
        int v16 = -v16;
      }
      if (v13 < (double)(unsigned __int16)v16) {
        double v13 = (double)(unsigned __int16)v16;
      }
      --v15;
    }
    while (v15);
    double v18 = 32767.0 / v13 * *((double *)a1 + 31);
    uint64_t v19 = (__int16 *)__dst;
    do
    {
      __int16 *v19 = (int)(v18 * (double)*v19);
      ++v19;
      --v11;
    }
    while (v11);
  }
  if (a1[6] && (int v20 = a1[69], v20 < (int)a1[68]))
  {
    float v21 = (double)v20 / 1000.0;
    *((double *)a1 + 26) = *((double *)a1 + 26) / (powf(v21, 0.71429) * 0.0625);
    *((double *)a1 + 27) = *((double *)a1 + 27) / (powf(v21, 0.2) * 0.46);
    double v22 = v7 / 1000.0;
  }
  else
  {
    double v22 = v7 / 1000.0;
    float v23 = v7 / 1000.0;
    *((double *)a1 + 26) = *((double *)a1 + 26) / (powf(v23, 0.71429) * 0.0625);
    *((double *)a1 + 27) = *((double *)a1 + 27) / (powf(v23, 0.2) * 0.46);
  }
  signed int v24 = llround(v7 / *((double *)a1 + 22));
  double v25 = 1.0;
  if (*((double *)a1 + 21) >= 1.0) {
    double v25 = *((double *)a1 + 21);
  }
  signed int v26 = llround(v7 / v25);
  signed int v27 = 2 * v402 - 1;
  if (v27 < v24) {
    signed int v24 = 2 * v402 - 1;
  }
  int v411 = v24;
  if (v27 >= v26) {
    signed int v28 = v26;
  }
  else {
    signed int v28 = 2 * v402 - 1;
  }
  int v413 = v28;
  int v29 = (int)(v22 + 4.0);
  if ((v29 & 0x80000001) == 1) {
    ++v29;
  }
  a1[70] = v29;
  unint64_t v30 = (int)llround((double)(int)v402 * 0.5);
  LOWORD(v454[0]) = 0;
  std::vector<short>::insert((uint64_t)&__dst, v10, v30, (char *)v454);
  LOWORD(v454[0]) = 0;
  std::vector<short>::insert((uint64_t)&__dst, (char *)v462, v30, (char *)v454);
  signed int v407 = llround(v12 / 1000.0 * v7);
  unint64_t v398 = ((unsigned char *)v462 - (unsigned char *)__dst) >> 1;
  uint64_t v31 = (int)a1[70];
  unint64_t v32 = (unint64_t)(a1 + 14);
  unint64_t v33 = (int)(v398 / v407 - (int)v402 / v407 + 1);
  std::vector<double>::resize((uint64_t)(a1 + 14), v33);
  std::vector<double>::resize((uint64_t)(a1 + 8), v33);
  std::vector<double>::vector(v454, v33);
  v452[0] = 0;
  std::vector<double>::vector(v453, v33, v452);
  v451[0] = 0;
  std::vector<double>::vector(v452, v33, v451);
  std::vector<double>::vector(v451, v33);
  std::vector<double>::vector(&__b, v413 + 1);
  std::vector<double>::vector(v448, v402);
  int __N = v9 >> 1;
  std::vector<double>::vector(__Y, v9 >> 1);
  int v34 = v402;
  std::vector<double>::vector(&__X, v402);
  unint64_t v35 = (int)v31 + (int)v402;
  std::vector<double>::vector(v444, v35);
  std::vector<double>::vector(&v442, v35);
  v404 = (unsigned int **)(a1 + 32);
  if (*((char *)a1 + 151) < 0)
  {
    uint64_t v38 = *((void *)a1 + 17);
    double v36 = 0.0;
    if (v38 != 4)
    {
      if (v38 != 5) {
        goto LABEL_60;
      }
      int v37 = *v404;
      goto LABEL_49;
    }
    int v43 = *v404;
LABEL_57:
    if (*v43 != 812016481) {
      goto LABEL_60;
    }
    *((void *)a1 + 23) = *((void *)a1 + 24);
    __int32 v42 = (double *)(a1 + 64);
    goto LABEL_59;
  }
  double v36 = 0.0;
  if (*((unsigned char *)a1 + 151) == 4)
  {
    int v43 = a1 + 32;
    goto LABEL_57;
  }
  int v37 = a1 + 32;
  if (*((unsigned char *)a1 + 151) != 5) {
    goto LABEL_60;
  }
LABEL_49:
  unsigned int v39 = *v37;
  int v40 = *((unsigned __int8 *)v37 + 4);
  if (v39 == 1718182249 && v40 == 48)
  {
    *((void *)a1 + 23) = *((void *)a1 + 25);
    __int32 v42 = (double *)(a1 + 66);
LABEL_59:
    double v36 = *v42;
  }
LABEL_60:
  DSP::window_blackman((DSP *)v402, v441);
  if (a1[76])
  {
    uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Stage 1: Start frame-wise processing", 36);
    std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(*v44 - 24)));
    uint64_t v45 = std::locale::use_facet(v438, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
    std::locale::~locale(v438);
    std::ostream::put();
    std::ostream::flush();
  }
  double v380 = v36;
  uint64_t v382 = (uint64_t)(a1 + 8);
  uint64_t v403 = v31;
  uint64_t v384 = (uint64_t)(a1 + 14);
  if (v398 > v402)
  {
    int v389 = v398 / v407 - (int)v402 / v407 + 1;
    LODWORD(v32) = 0;
    uint64_t v46 = 0;
    locale = 0;
    double v47 = (double)__N;
    uint64_t v48 = v411;
    uint64_t v49 = v413;
    uint64_t v385 = 8 * (v31 - ((v31 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8;
    int v393 = v31 + v402;
    uint64_t v390 = (v31 + v402);
    uint64_t v50 = 2 * v402;
    uint64_t v386 = 8 * v31;
    int v408 = -(int)v31;
    uint64_t v394 = 8 * v411 + 8;
    int v409 = (int)v402 / 4;
    int v51 = __N + (int)v402 / 4;
    while (1)
    {
      if (a1[76] == 1 && a1[77] == 1 && (int)a1[79] < v389)
      {
        int v52 = a1[80];
        int v53 = a1[78];
        std::string::basic_string[abi:ne180100]<0>(v439, "Progress of stage 1/2: ");
        utils::update_progress_bar(v46, v389, v52, v53, (uint64_t)v439);
        if (v440 < 0) {
          operator delete(v439[0]);
        }
      }
      *(double *)(*((void *)a1 + 4) + 8 * v46) = (double)(int)v32 / (double)(int)*a1;
      if (v34)
      {
        uint64_t v54 = 2 * v51 - 2 * v409;
        uint64_t v55 = v50 - 2 * (int)v32;
        long long v56 = (char *)__dst;
        char v57 = (double *)v448[0];
        char v58 = (__int16 *)((char *)__dst + 2 * (int)v32);
        do
        {
          int v59 = *v58++;
          *v57++ = (double)v59;
          v55 -= 2;
        }
        while (v55);
        int v60 = __Y[0];
        if ((v402 + 1) >= 3)
        {
          int64_t v61 = &v56[2 * (int)v32 + 2 * ((int)v402 / 4)];
          std::locale v62 = __Y[0];
          do
          {
            int v63 = *(__int16 *)v61;
            v61 += 2;
            *v62++ = (double)v63;
            v54 -= 2;
          }
          while (v54);
        }
      }
      else
      {
        int v60 = __Y[0];
      }
      double v64 = cblas_ddot(__N, v60, 1, v60, 1);
      double v65 = sqrt(v64 / v47);
      *((double *)v451[0] + v46) = v65;
      double v66 = DSP::gradient_index((uint64_t *)__Y);
      int v67 = (double *)v452[0];
      *((double *)v452[0] + v46) = v66 * 0.5 / v65;
      if (v64 == 0.0) {
        v67[v46] = *((double *)a1 + 27) + *((double *)a1 + 27);
      }
      uint64_t v68 = DSP::zero_crossing_rate_plus_zero((uint64_t)__Y);
      *((double *)v453[0] + v46) = (double)(int)v68 / v47;
      if ((int)v32 - (int)v403 < 1)
      {
        uint64_t v73 = (char *)v444[0];
        if ((int)v403 >= 1) {
          bzero(v444[0], v385);
        }
        if (v34 >= 1)
        {
          uint64_t v74 = (uint64_t *)v448[0];
          double v75 = &v73[v386];
          uint64_t v76 = v402;
          do
          {
            uint64_t v77 = *v74++;
            *(void *)double v75 = v77;
            v75 += 8;
            --v76;
          }
          while (v76);
        }
      }
      else if (v393 >= 1)
      {
        uint64_t v69 = (__int16 *)__dst;
        uint64_t v70 = (double *)v444[0];
        uint64_t v71 = v390;
        int v72 = v408;
        do
        {
          *v70++ = (double)v69[v72++];
          --v71;
        }
        while (v71);
      }
      if (*((char *)a1 + 151) < 0)
      {
        uint64_t v79 = *((void *)a1 + 17);
        if (v79 == 4)
        {
          uint64_t v83 = *v404;
LABEL_106:
          if (*v83 == 812016481)
          {
            if (v34 >= 1)
            {
              uint64_t v84 = (double *)v448[0];
              int v85 = (double *)v441[0];
              uint64_t v86 = v402;
              do
              {
                double v87 = *v85++;
                *uint64_t v84 = *v84 * v87;
                ++v84;
                --v86;
              }
              while (v86);
            }
            DSP::LP((uint64_t)v448, a1[70], v438);
            if (locale) {
              operator delete(locale);
            }
            v436 = 0;
            uint64_t v437 = 0;
            v435 = 0;
            locale = v438[0].__locale_;
            std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v435, v438[0].__locale_, (uint64_t)v438[1].__locale_, (v438[1].__locale_ - v438[0].__locale_) >> 3);
            DSP::firfilter((uint64_t)&v435, (uint64_t *)v444, v438);
            if ((void)v442)
            {
              *((void *)&v442 + 1) = v442;
              operator delete((void *)v442);
            }
            long long v442 = *(_OWORD *)&v438[0].__locale_;
            v443 = v438[2].__locale_;
            memset(v438, 0, sizeof(v438));
            if (v435)
            {
              v436 = v435;
              operator delete(v435);
            }
            if (v34 >= 1)
            {
              int8x16_t v88 = (void *)__X;
              uint64_t v89 = (uint64_t *)(v442 + v386);
              uint64_t v90 = v402;
              do
              {
                uint64_t v91 = *v89++;
                *v88++ = v91;
                --v90;
              }
              while (v90);
            }
            DSP::remove_mean((uint64_t)&__X);
            if (v34 >= 2)
            {
              double v92 = (double *)(__X + 8);
              double v93 = *(double *)__X;
              uint64_t v94 = v402 - 1;
              do
              {
                double v93 = *v92 + v93 * 0.95;
                *v92++ = v93;
                --v94;
              }
              while (v94);
            }
            uint64_t v68 = DSP::remove_mean((uint64_t)&__X);
          }
          goto LABEL_123;
        }
        if (v79 == 5)
        {
          std::string::size_type v78 = *v404;
LABEL_96:
          unsigned int v80 = *v78;
          int v81 = *((unsigned __int8 *)v78 + 4);
          if (v80 == 1718182249 && v81 == 48)
          {
            DSP::IAIF((double **)v448, (uint64_t *)v444, (double **)v441, a1[70], (double **)v438, *((double *)a1 + 30));
            uint64_t v68 = __X;
            if ((void)__X)
            {
              *((void *)&__X + 1) = __X;
              operator delete((void *)__X);
            }
            long long __X = *(_OWORD *)&v438[0].__locale_;
            v446 = v438[2].__locale_;
          }
        }
      }
      else
      {
        if (*((unsigned char *)a1 + 151) == 4)
        {
          uint64_t v83 = (unsigned int *)v404;
          goto LABEL_106;
        }
        std::string::size_type v78 = (unsigned int *)v404;
        if (*((unsigned char *)a1 + 151) == 5) {
          goto LABEL_96;
        }
      }
LABEL_123:
      int v405 = v32;
      int v95 = v51;
      uint64_t v96 = v50;
      uint64_t v97 = v49;
      uint64_t v98 = v48;
      int v99 = a1;
      uint64_t v100 = __b;
      if (v450 - (unsigned char *)__b >= 1) {
        memset_pattern16(__b, &unk_2126B0, 8 * (((unint64_t)(v450 - (unsigned char *)__b) >> 3) - ((unint64_t)(v450 - (unsigned char *)__b) > 7)) + 8);
      }
      int v101 = v413 - v411 + 1;
      uint64_t v102 = 8 * v411;
      int v103 = v402 - v411;
      if (v411 <= v413)
      {
        do
        {
          double v104 = cblas_ddot(v103, (const double *)__X, 1, (const double *)(__X + v102), 1);
          uint64_t v100 = __b;
          *(double *)((char *)__b + v102) = v104;
          --v103;
          v102 += 8;
          --v101;
        }
        while (v101);
      }
      uint64_t v48 = v98;
      int v105 = (double *)&v100[8 * v98];
      uint64_t v49 = v97;
      if (v105 == (double *)&v100[8 * v97 + 8] || v411 == v413)
      {
        a1 = v99;
        uint64_t v111 = v96;
      }
      else
      {
        double v107 = *v105;
        uint64_t v108 = (double *)&v100[v394];
        uint64_t v109 = 8 * v413 - 8 * v411;
        unint64_t v110 = (double *)&v100[v394];
        a1 = v99;
        uint64_t v111 = v96;
        do
        {
          double v112 = *v110++;
          double v113 = v112;
          if (v107 < v112)
          {
            double v107 = v113;
            int v105 = v108;
          }
          uint64_t v108 = v110;
          v109 -= 8;
        }
        while (v109);
      }
      AutocF0::remove_false_flanks(v68, (uint64_t *)&__b, (unint64_t)((char *)v105 - v100) >> 3, v411, v413);
      uint64_t v114 = (double *)((char *)__b + 8 * v48);
      BOOL v115 = v114 == (double *)((char *)__b + 8 * v49 + 8) || v411 == v413;
      int v34 = v402;
      int v116 = v95;
      if (v115)
      {
        int v121 = v405;
      }
      else
      {
        double v117 = *v114;
        uint64_t v118 = (double *)((char *)__b + v394);
        uint64_t v119 = 8 * v413 - 8 * v411;
        double v120 = (double *)((char *)__b + v394);
        int v121 = v405;
        do
        {
          double v122 = *v120++;
          double v123 = v122;
          if (v117 < v122)
          {
            double v117 = v123;
            uint64_t v114 = v118;
          }
          uint64_t v118 = v120;
          v119 -= 8;
        }
        while (v119);
      }
      double v124 = (double)(((char *)v114 - (unsigned char *)__b) >> 3);
      if (v124 == (double)v411 || (char *)v114 - (unsigned char *)__b == -8 || v124 == (double)v413) {
        double v124 = INFINITY;
      }
      *(double *)(*((void *)a1 + 7) + 8 * v46++) = (double)(int)*a1 / v124;
      unint64_t v32 = (v121 + v407);
      uint64_t v50 = v111 + 2 * v407;
      int v51 = v116 + v407;
      v409 += v407;
      v408 += v407;
      if (v398 <= v402 + v46 * v407) {
        goto LABEL_157;
      }
    }
  }
  locale = 0;
LABEL_157:
  DSP::medfilt((char **)v384, 5u, v438);
  uint64_t v127 = *(char **)v384;
  int v128 = v403;
  if (*(void *)v384)
  {
    *((void *)a1 + 8) = v127;
    operator delete(v127);
    *(void *)uint64_t v384 = 0;
    *(void *)(v384 + 8) = 0;
    *(void *)(v384 + 16) = 0;
  }
  unint64_t v129 = v438[0].__locale_;
  *((std::locale *)a1 + 7) = v438[0];
  uint64_t v130 = v438[1].__locale_;
  *((_OWORD *)a1 + 4) = *(_OWORD *)&v438[1].__locale_;
  if (v130 != v129)
  {
    unint64_t v131 = (v130 - v129) >> 3;
    unint64_t v132 = (double *)v451[0];
    uint64_t v133 = (double *)v453[0];
    unint64_t v134 = (double *)v452[0];
    if (v131 <= 1) {
      unint64_t v131 = 1;
    }
    do
    {
      if (*v132 < *((double *)a1 + 23)) {
        *(void *)unint64_t v129 = 0;
      }
      if (*v133 > *((double *)a1 + 26)) {
        *(void *)unint64_t v129 = 0;
      }
      if (*v134 > *((double *)a1 + 27)) {
        *(void *)unint64_t v129 = 0;
      }
      unint64_t v129 = (std::locale::__imp *)((char *)v129 + 8);
      ++v134;
      ++v133;
      ++v132;
      --v131;
    }
    while (v131);
  }
  DSP::medfilt((char **)v384, 5u, v438);
  int64_t v135 = *(char **)v384;
  if (*(void *)v384)
  {
    *((void *)a1 + 8) = v135;
    operator delete(v135);
    *(void *)uint64_t v384 = 0;
    *(void *)(v384 + 8) = 0;
    *(void *)(v384 + 16) = 0;
  }
  uint64_t v136 = v438[0].__locale_;
  *((std::locale *)a1 + 7) = v438[0];
  uint64_t v137 = v438[1].__locale_;
  *((_OWORD *)a1 + 4) = *(_OWORD *)&v438[1].__locale_;
  memset(v438, 0, sizeof(v438));
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(v438, v136, (uint64_t)v137, (v137 - v136) >> 3);
  std::__sort<std::__less<double,double> &,double *>();
  unint64_t v138 = (v438[1].__locale_ - v438[0].__locale_) >> 3;
  if (v438[1].__locale_ == v438[0].__locale_)
  {
    LODWORD(v139) = 0;
    int64_t v144 = 0;
    BOOL v143 = 1;
  }
  else
  {
    if (v138 <= 1) {
      int64_t v139 = 1;
    }
    else {
      int64_t v139 = (v438[1].__locale_ - v438[0].__locale_) >> 3;
    }
    if (*(double *)v438[0].__locale_ == 0.0)
    {
      uint64_t v140 = 1;
      while (1)
      {
        unint64_t v141 = v140;
        if (v139 == v140) {
          break;
        }
        double v142 = *((double *)v438[0].__locale_ + v140++);
        if (v142 != 0.0)
        {
          int64_t v139 = v141;
          break;
        }
      }
      BOOL v143 = v138 <= v141;
    }
    else
    {
      int64_t v139 = 0;
      BOOL v143 = 0;
    }
    int64_t v144 = v139;
  }
  signed int v145 = llround((double)(v138 - v144) * 0.5 + (double)(int)v139);
  signed int v146 = ((unint64_t)(v438[1].__locale_ - v438[0].__locale_) >> 3) - 1;
  if (v146 >= v145) {
    signed int v146 = v145;
  }
  double v147 = *((double *)v438[0].__locale_ + v146);
  double v148 = 500.0;
  double v149 = 50.0;
  if (!v143 && v147 > 0.0)
  {
    double v148 = v380 * v147;
    float v150 = v147;
    double v149 = powf(v150, 1.1) / 5.0;
  }
  *((double *)a1 + 21) = v149;
  *((double *)a1 + 22) = v148;
  double v151 = (double)(int)*a1;
  int v152 = llround(v151 / v149);
  LODWORD(v153) = 2 * v402;
  if (2 * (int)v402 >= v152) {
    LODWORD(v153) = v152;
  }
  if ((int)v153 <= __N) {
    LODWORD(v153) = __N;
  }
  if ((int)v153 <= v152 + 1) {
    unint64_t v153 = (v152 + 1);
  }
  else {
    unint64_t v153 = v153;
  }
  if ((v153 & 0x80000000) == 0) {
    int v154 = v153;
  }
  else {
    int v154 = v153 + 1;
  }
  v414 = (DSP *)v153;
  LODWORD(v32) = llround((double)((int)v153 - v34) * 0.5);
  if ((int)v32 < 1)
  {
    uint64_t v155 = (char *)v462;
    if ((v32 & 0x80000000) != 0)
    {
      v156 = a1;
      uint64_t v157 = __dst;
      uint64_t v158 = (int)v32;
      uint64_t v159 = -(uint64_t)(int)v32;
      unint64_t v160 = (char *)__dst - 2 * (int)v32;
      uint64_t v161 = (char *)((unsigned char *)v462 - v160);
      if (v462 != v160) {
        memmove(__dst, v160, (unsigned char *)v462 - v160);
      }
      uint64_t v162 = &v161[(void)v157];
      v462 = v162;
      uint64_t v163 = &v161[2 * v158 + (void)v157];
      v164 = &v163[2 * v159];
      int64_t v165 = v162 - v164;
      if (v162 != v164) {
        memmove(v163, v164, v162 - v164);
      }
      uint64_t v155 = &v163[v165];
      v462 = &v163[v165];
      a1 = v156;
    }
  }
  else
  {
    LOWORD(v433) = 0;
    std::vector<short>::insert((uint64_t)&__dst, (char *)__dst, v32, (char *)&v433);
    LOWORD(v433) = 0;
    std::vector<short>::insert((uint64_t)&__dst, (char *)v462, v32, (char *)&v433);
    uint64_t v155 = (char *)v462;
  }
  uint64_t v166 = __dst;
  if (a1[76] == 1)
  {
    unint64_t v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Re-estimating f0 limits and frame size:", 39);
    std::ios_base::getloc((const std::ios_base *)((char *)v167 + *(void *)(*v167 - 24)));
    v168 = std::locale::use_facet((const std::locale *)&v433, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v168->__vftable[2].~facet_0)(v168, 10);
    std::locale::~locale((std::locale *)&v433);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"    new f0min: ", 15);
    v169 = (void *)std::ostream::operator<<();
    double v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)" Hz", 3);
    std::ios_base::getloc((const std::ios_base *)((char *)v170 + *(void *)(*v170 - 24)));
    v171 = std::locale::use_facet((const std::locale *)&v433, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v171->__vftable[2].~facet_0)(v171, 10);
    std::locale::~locale((std::locale *)&v433);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"    new f0max: ", 15);
    v172 = (void *)std::ostream::operator<<();
    double v173 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, (uint64_t)" Hz", 3);
    std::ios_base::getloc((const std::ios_base *)((char *)v173 + *(void *)(*v173 - 24)));
    double v174 = std::locale::use_facet((const std::locale *)&v433, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v174->__vftable[2].~facet_0)(v174, 10);
    std::locale::~locale((std::locale *)&v433);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"    new frame size: ", 20);
    int64_t v175 = (void *)std::ostream::operator<<();
    double v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)" ms", 3);
    std::ios_base::getloc((const std::ios_base *)((char *)v176 + *(void *)(*v176 - 24)));
    v177 = std::locale::use_facet((const std::locale *)&v433, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v177->__vftable[2].~facet_0)(v177, 10);
    std::locale::~locale((std::locale *)&v433);
    std::ostream::put();
    std::ostream::flush();
  }
  unint64_t __Na = (v155 - v166) >> 1;
  unsigned int v383 = __Na / v407 - (int)v414 / v407;
  unint64_t v178 = (int)(v383 + 1);
  std::vector<double>::resize(v384, v178);
  std::vector<double>::resize((uint64_t)v454, v178);
  std::vector<double>::resize(v382, v178);
  std::vector<double>::resize((uint64_t)v453, v178);
  std::vector<double>::resize((uint64_t)v451, v178);
  std::vector<double>::resize((uint64_t)v452, v178);
  v399 = (char **)(a1 + 20);
  std::vector<double>::resize((uint64_t)(a1 + 20), v178);
  std::vector<double>::resize((uint64_t)(a1 + 26), v178);
  signed int v179 = llround(v151 / v148);
  signed int v180 = 2 * v414 - 1;
  if (v180 < v179) {
    signed int v179 = 2 * v414 - 1;
  }
  int v410 = v179;
  if (v180 >= v152) {
    int v181 = v152;
  }
  else {
    int v181 = 2 * v414 - 1;
  }
  int v406 = v181;
  int v182 = v181 + 1;
  std::vector<double>::resize((uint64_t)&__b, v181 + 1);
  std::vector<double>::resize((uint64_t)v448, (int)v414);
  int v396 = v154 >> 1;
  std::vector<double>::resize((uint64_t)__Y, v154 >> 1);
  std::vector<double>::resize((uint64_t)&__X, (int)v414);
  unint64_t v395 = (int)v414 + (int)v403;
  std::vector<double>::resize((uint64_t)v444, v395);
  std::vector<double>::resize((uint64_t)&v442, v395);
  DSP::window_blackman(v414, &v433);
  v183 = v441[0];
  if (v441[0])
  {
    v441[1] = v441[0];
    operator delete(v441[0]);
  }
  *(_OWORD *)v441 = v433;
  v441[2] = v434;
  if ((int)v414 > (unint64_t)(((unsigned char *)v462 - (unsigned char *)__dst) >> 1))
  {
    v379 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Error: Signal is not long enough to be processed.", 49);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v379);
    exit(1);
  }
  if (a1[76])
  {
    uint64_t v184 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Stage 2: Re-estimate f0 from resized frames with new limits", 59);
    std::ios_base::getloc((const std::ios_base *)((char *)v184 + *(void *)(*v184 - 24)));
    unint64_t v185 = std::locale::use_facet((const std::locale *)&v433, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v185->__vftable[2].~facet_0)(v185, 10);
    std::locale::~locale((std::locale *)&v433);
    std::ostream::put();
    v183 = (void *)std::ostream::flush();
  }
  v397 = (char **)(a1 + 26);
  if (__Na > (int)v414)
  {
    double v186 = v147;
    int v187 = 0;
    uint64_t v188 = 0;
    double v189 = (double)v396;
    double v190 = (double)v410;
    double v191 = (double)v406;
    double v387 = (double)v182;
    uint64_t v192 = 2 * (int)v414;
    int v193 = v396 + (int)v414 / 4;
    uint64_t v388 = 8 * v403;
    int v412 = -(int)v403;
    uint64_t v391 = 8 * v410 + 8;
    int v194 = (int)v414 / 4;
    do
    {
      if (a1[76] == 1 && a1[77] == 1 && (int)a1[79] < (int)v178)
      {
        int v195 = a1[80];
        int v196 = a1[78];
        std::string::basic_string[abi:ne180100]<0>(v431, "Progress of stage 2/2: ");
        utils::update_progress_bar(v188, v178, v195, v196, (uint64_t)v431);
        if (v432 < 0) {
          operator delete(v431[0]);
        }
      }
      *(double *)(*((void *)a1 + 4) + 8 * v188) = (float)((float)v187 / (float)(int)*a1);
      if (v414)
      {
        uint64_t v197 = 2 * v193 - 2 * v194;
        uint64_t v198 = v192 - 2 * v187;
        v199 = (char *)__dst;
        v200 = (double *)v448[0];
        v201 = (__int16 *)((char *)__dst + 2 * v187);
        do
        {
          int v202 = *v201++;
          *v200++ = (double)v202;
          v198 -= 2;
        }
        while (v198);
        v203 = __Y[0];
        if ((v414 + 1) >= 3)
        {
          v204 = &v199[2 * v187 + 2 * ((int)v414 / 4)];
          v205 = __Y[0];
          do
          {
            int v206 = *(__int16 *)v204;
            v204 += 2;
            *v205++ = (double)v206;
            v197 -= 2;
          }
          while (v197);
        }
      }
      else
      {
        v203 = __Y[0];
      }
      double v207 = cblas_ddot(v396, v203, 1, v203, 1);
      *((double *)v451[0] + v188) = sqrt(v207 / (float)v396);
      double v208 = DSP::gradient_index((uint64_t *)__Y);
      v209 = (double *)v452[0];
      *((double *)v452[0] + v188) = v208 * 0.5 / sqrt(v207 / v189);
      if (v207 == 0.0) {
        v209[v188] = *((double *)a1 + 27) + *((double *)a1 + 27);
      }
      int v210 = DSP::zero_crossing_rate_plus_zero((uint64_t)__Y);
      *((double *)v453[0] + v188) = (double)v210 / v189;
      if (v187 - v128 < 1)
      {
        v215 = (char *)v444[0];
        if (v128 >= 1) {
          bzero(v444[0], 8 * (v403 - ((v403 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
        }
        if ((int)v414 >= 1)
        {
          v216 = (uint64_t *)v448[0];
          v217 = &v215[v388];
          v218 = v414;
          do
          {
            uint64_t v219 = *v216++;
            *(void *)v217 = v219;
            v217 += 8;
            v218 = (DSP *)((char *)v218 - 1);
          }
          while (v218);
        }
      }
      else if ((int)v395 >= 1)
      {
        v211 = (__int16 *)__dst;
        v212 = (double *)v444[0];
        uint64_t v213 = v395;
        int v214 = v412;
        do
        {
          *v212++ = (double)v211[v214++];
          --v213;
        }
        while (v213);
      }
      if (*((char *)a1 + 151) < 0)
      {
        uint64_t v221 = *((void *)a1 + 17);
        if (v221 == 4)
        {
          v225 = *v404;
LABEL_263:
          if (*v225 == 812016481)
          {
            if ((int)v414 >= 1)
            {
              v226 = (double *)v448[0];
              v227 = (double *)v441[0];
              v228 = v414;
              do
              {
                double v229 = *v227++;
                double *v226 = *v226 * v229;
                ++v226;
                v228 = (DSP *)((char *)v228 - 1);
              }
              while (v228);
            }
            DSP::LP((uint64_t)v448, a1[70], &v433);
            if (locale) {
              operator delete(locale);
            }
            v429 = 0;
            uint64_t v430 = 0;
            v428 = 0;
            locale = (std::locale::__imp *)v433;
            std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v428, (const void *)v433, *((uint64_t *)&v433 + 1), (uint64_t)(*((void *)&v433 + 1) - v433) >> 3);
            DSP::firfilter((uint64_t)&v428, (uint64_t *)v444, &v433);
            if ((void)v442)
            {
              *((void *)&v442 + 1) = v442;
              operator delete((void *)v442);
            }
            long long v442 = v433;
            v443 = (std::locale::__imp *)v434;
            v434 = 0;
            long long v433 = 0uLL;
            if (v428)
            {
              v429 = v428;
              operator delete(v428);
            }
            if ((int)v414 >= 1)
            {
              v230 = (void *)__X;
              v231 = (uint64_t *)(v442 + v388);
              v232 = v414;
              do
              {
                uint64_t v233 = *v231++;
                *v230++ = v233;
                v232 = (DSP *)((char *)v232 - 1);
              }
              while (v232);
            }
            DSP::remove_mean((uint64_t)&__X);
            if ((int)v414 >= 2)
            {
              v234 = (double *)(__X + 8);
              double v235 = *(double *)__X;
              v236 = (char *)v414 - 1;
              do
              {
                double v235 = *v234 + v235 * 0.95;
                *v234++ = v235;
                --v236;
              }
              while (v236);
            }
            DSP::remove_mean((uint64_t)&__X);
          }
          goto LABEL_280;
        }
        if (v221 == 5)
        {
          v220 = *v404;
LABEL_253:
          unsigned int v222 = *v220;
          int v223 = *((unsigned __int8 *)v220 + 4);
          if (v222 == 1718182249 && v223 == 48)
          {
            DSP::IAIF((double **)v448, (uint64_t *)v444, (double **)v441, a1[70], (double **)&v433, *((double *)a1 + 30));
            if ((void)__X)
            {
              *((void *)&__X + 1) = __X;
              operator delete((void *)__X);
            }
            long long __X = v433;
            v446 = (std::locale::__imp *)v434;
          }
        }
      }
      else
      {
        if (*((unsigned char *)a1 + 151) == 4)
        {
          v225 = (unsigned int *)v404;
          goto LABEL_263;
        }
        v220 = (unsigned int *)v404;
        if (*((unsigned char *)a1 + 151) == 5) {
          goto LABEL_253;
        }
      }
LABEL_280:
      uint64_t v237 = (uint64_t)v450;
      if (v450 == __b)
      {
        unint64_t v243 = (v450 - (unsigned char *)__b) >> 3;
        v242 = v450;
      }
      else
      {
        uint64_t v238 = 0;
        unint64_t v239 = 0;
        int v240 = (int)v414;
        do
        {
          double v241 = cblas_ddot(v240, (const double *)__X, 1, (const double *)(__X + v238), 1);
          v242 = __b;
          *(double *)((char *)__b + v238) = v241;
          ++v239;
          uint64_t v237 = (uint64_t)v450;
          unint64_t v243 = (v450 - v242) >> 3;
          --v240;
          v238 += 8;
        }
        while (v243 > v239);
        int v128 = v403;
      }
      long long v433 = 0uLL;
      v434 = 0;
      v244 = std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v433, v242, v237, v243);
      v245 = __b;
      if (8 * v410 - 8 >= 1) {
        memset_pattern16(__b, &unk_2126B0, 8 * (v410 - (unint64_t)(((v410 - 1) & 0x1FFFFFFFFFFFFFFFLL) != 0)));
      }
      uint64_t v246 = (uint64_t)&v245[8 * v406 + 8];
      if ((uint64_t)&v450[-v246] >= 1) {
        memset_pattern16(&v245[8 * v406 + 8], &unk_2126B0, 8 * (((unint64_t)&v450[-v246] >> 3) - ((unint64_t)&v450[-v246] > 7)) + 8);
      }
      v247 = (double *)&v245[8 * v410];
      if (v247 != (double *)v246 && v410 != v406)
      {
        double v248 = *v247;
        v249 = (double *)&v245[v391];
        uint64_t v250 = 8 * v406 - 8 * v410;
        v251 = (double *)&v245[v391];
        do
        {
          double v252 = *v251++;
          double v253 = v252;
          if (v248 < v252)
          {
            double v248 = v253;
            v247 = v249;
          }
          v249 = v251;
          v250 -= 8;
        }
        while (v250);
      }
      AutocF0::remove_false_flanks((uint64_t)v244, (uint64_t *)&__b, (unint64_t)((char *)v247 - v245) >> 3, v410, v406);
      v254 = (double *)__b;
      v255 = (double *)((char *)__b + 8 * v410);
      v256 = v255 + 1;
      BOOL v257 = v255 == (double *)((char *)__b + 8 * v406 + 8) || v410 == v406;
      char v258 = v257;
      v259 = (double *)((char *)__b + 8 * v410);
      if (!v257)
      {
        double v260 = *v255;
        uint64_t v261 = 8 * v406 - 8 * v410;
        v262 = v255 + 1;
        v259 = (double *)((char *)__b + 8 * v410);
        v263 = v255 + 1;
        do
        {
          double v264 = *v263++;
          double v265 = v264;
          if (v260 < v264)
          {
            double v260 = v265;
            v259 = v262;
          }
          v262 = v263;
          v261 -= 8;
        }
        while (v261);
      }
      uint64_t v266 = (char *)v259 - (unsigned char *)__b;
      double v267 = (double)(v266 >> 3);
      if (v267 == v190)
      {
        double v268 = INFINITY;
      }
      else
      {
        double v268 = INFINITY;
        if (v266 != -8 && v267 != v191)
        {
          double v269 = *((double *)__b + (unint64_t)(v267 + -1.0));
          if (fabs(v269) == INFINITY
            || (double v270 = *((double *)__b + (unint64_t)(v267 + 1.0)), fabs(v270) == INFINITY)
            || (double v271 = (*((double *)__b + (unint64_t)v267)
                      - v269
                      - (*((double *)__b + (unint64_t)v267)
                       - v270))
                     / (*((double *)__b + (unint64_t)v267)
                      - v269
                      + *((double *)__b + (unint64_t)v267)
                      - v270),
                fabs(v271 / v267) >= 1.0))
          {
            double v268 = (double)(v266 >> 3);
          }
          else
          {
            double v272 = v267 + v271 * 0.5;
            if (v272 >= v191 || v272 <= v190) {
              double v268 = (double)(v266 >> 3);
            }
            else {
              double v268 = v272;
            }
          }
        }
      }
      double v274 = fabs(v268);
      BOOL v275 = v274 == INFINITY;
      if (v274 != INFINITY)
      {
        signed int v276 = llround(v268);
        unint64_t v277 = (v450 - (unsigned char *)__b) >> 3;
        if (v277 > v276 + 1)
        {
          uint64_t v278 = v276;
          v279 = (double *)((char *)__b + 8 * v276);
          unint64_t v280 = ~v278 + v277;
          do
          {
            if (*v279 <= v279[1]) {
              break;
            }
            *v279++ = -INFINITY;
            --v280;
          }
          while (v280);
        }
        signed int v281 = llround(v268 + -1.0);
        if (v410 < v281)
        {
          uint64_t v282 = v281;
          double v283 = v254[v281];
          do
          {
            double v284 = v283;
            double v283 = v254[v282 - 1];
            if (v284 <= v283) {
              break;
            }
            v254[v282--] = -INFINITY;
          }
          while (v282 > v410);
        }
      }
      if ((v258 & 1) == 0)
      {
        double v285 = *v255;
        uint64_t v286 = 8 * v406 - 8 * v410;
        v287 = v255 + 1;
        do
        {
          double v288 = *v287++;
          double v289 = v288;
          if (v285 < v288)
          {
            double v285 = v289;
            v255 = v256;
          }
          v256 = v287;
          v286 -= 8;
        }
        while (v286);
      }
      uint64_t v290 = (char *)v255 - (char *)v254;
      double v291 = (double)(v290 >> 3);
      if (v291 == v190)
      {
        double v292 = INFINITY;
      }
      else
      {
        double v292 = INFINITY;
        if (v290 != -8 && v291 != v191)
        {
          double v293 = v254[(unint64_t)(v291 + -1.0)];
          if (fabs(v293) == INFINITY
            || (double v294 = v254[(unint64_t)(v291 + 1.0)], fabs(v294) == INFINITY)
            || (double v295 = (v254[(unint64_t)v291] - v293 - (v254[(unint64_t)v291] - v294))
                     / (v254[(unint64_t)v291] - v293 + v254[(unint64_t)v291] - v294),
                fabs(v295 / v291) >= 1.0))
          {
            double v292 = (double)(v290 >> 3);
          }
          else
          {
            double v292 = v291 + v295 * 0.5;
            if (v292 >= v191 || v292 <= v190) {
              double v292 = (double)(v290 >> 3);
            }
          }
        }
      }
      double v297 = (double)(int)*a1;
      *(double *)(*((void *)a1 + 7) + 8 * v188) = v297 / v268;
      *((double *)v454[0] + v188) = v297 / v292;
      *(double *)(*((void *)a1 + 10) + 8 * v188) = v297 / v268;
      v425 = 0;
      v426 = 0;
      uint64_t v427 = 0;
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v425, (const void *)v433, *((uint64_t *)&v433 + 1), (uint64_t)(*((void *)&v433 + 1) - v433) >> 3);
      if (v275 && (int)a1[74] >= 1)
      {
        memset(__src, 0, sizeof(__src));
        std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(__src, v425, (uint64_t)v426, (v426 - (unsigned char *)v425) >> 3);
        v298 = (double *)v425;
        uint64_t v299 = (int)a1[75];
        unint64_t v300 = (v426 - (unsigned char *)v425) >> 3;
        if (v426 != v425)
        {
          uint64_t v301 = 0;
          int v302 = -(int)v299;
          if ((int)v299 >= 0) {
            int v303 = a1[75];
          }
          else {
            int v303 = -(int)v299;
          }
          if (v300 <= 1) {
            uint64_t v304 = 1;
          }
          else {
            uint64_t v304 = (v426 - (unsigned char *)v425) >> 3;
          }
          int v305 = v299 + v303 + 1;
          do
          {
            if ((v299 & 0x80000000) != 0)
            {
              double v310 = NAN;
            }
            else
            {
              double v306 = 0.0;
              unsigned int v307 = v302;
              int v308 = v305;
              double v309 = 0.0;
              do
              {
                if ((v307 & 0x80000000) == 0 && v300 > v307)
                {
                  double v309 = v309 + *((double *)__src[0] + v307);
                  double v306 = v306 + 1.0;
                }
                ++v307;
                --v308;
              }
              while (v308);
              double v310 = v309 / v306;
            }
            v298[v301] = v298[v301] - v310;
            ++v301;
            ++v302;
          }
          while (v301 != v304);
        }
        uint64_t v311 = (uint64_t)fmax(v190, (double)(int)v299);
        v312 = &v298[v311];
        uint64_t v313 = (uint64_t)fmin(v387, (double)(v300 - v299));
        v314 = v312 + 1;
        if (v311 != v313 && v314 != &v298[v313])
        {
          double v316 = *v312;
          uint64_t v317 = 8 * v313 - 8 * v311 - 8;
          v318 = v312 + 1;
          do
          {
            double v319 = *v318++;
            double v320 = v319;
            if (v316 < v319)
            {
              double v316 = v320;
              v312 = v314;
            }
            v314 = v318;
            v317 -= 8;
          }
          while (v317);
        }
        if (__src[0])
        {
          __src[1] = __src[0];
          operator delete(__src[0]);
        }
        double v268 = (double)(v312 - v298);
      }
      uint64_t v321 = (int)a1[75];
      v322 = v425;
      if (v268 == fmax(v190, (double)(int)v321)
        || ((double v323 = fmin(v191, (double)(unint64_t)(((v426 - (unsigned char *)v425) >> 3) - v321)), v268 != -1.0)
          ? (BOOL v324 = v268 == v323)
          : (BOOL v324 = 1),
            v324))
      {
        double v326 = (double)(int)*a1;
        double v268 = v326 / v186;
      }
      else
      {
        double v326 = (double)(int)*a1;
      }
      *(double *)&(*v399)[8 * v188] = v326 / v268;
      v325 = (void *)v433;
      *(double *)&(*v397)[8 * v188] = fmax(*(double *)(v433 + 8 * (unint64_t)v268) / *(double *)v433, 0.0);
      if (!v322 || (v426 = v322, operator delete(v322), (v325 = (void *)v433) != 0))
      {
        *((void *)&v433 + 1) = v325;
        operator delete(v325);
      }
      ++v188;
      v187 += v407;
      v192 += 2 * v407;
      v193 += v407;
      v194 += v407;
      v412 += v407;
    }
    while (__Na > (int)v414 + v188 * v407);
  }
  AutocF0::voiced_unvoiced_decision(*((double *)a1 + 23), *((double *)a1 + 26), *((double *)a1 + 27), (uint64_t)v183, v384, (double **)v451, (double **)v453, (double **)v452, 0);
  DSP::medfilt((char **)v384, 5u, &v433);
  v327 = *(char **)v384;
  if (*(void *)v384)
  {
    *((void *)a1 + 8) = v327;
    operator delete(v327);
    *(void *)uint64_t v384 = 0;
    *(void *)(v384 + 8) = 0;
    *(void *)(v384 + 16) = 0;
  }
  *(_OWORD *)(a1 + 14) = v433;
  *((void *)a1 + 9) = v434;
  DSP::medfilt(v399, 5u, &v433);
  v328 = *v399;
  if (*v399)
  {
    *((void *)a1 + 11) = v328;
    operator delete(v328);
    *v399 = 0;
    *((void *)a1 + 11) = 0;
    *((void *)a1 + 12) = 0;
  }
  *((_OWORD *)a1 + 5) = v433;
  *((void *)a1 + 12) = v434;
  DSP::medfilt(v397, 5u, &v433);
  v329 = *v397;
  if (*v397)
  {
    *((void *)a1 + 14) = v329;
    operator delete(v329);
    *v397 = 0;
    *((void *)a1 + 14) = 0;
    *((void *)a1 + 15) = 0;
  }
  *(_OWORD *)(a1 + 26) = v433;
  *((void *)a1 + 15) = v434;
  uint64_t v330 = (int)a1[73];
  std::vector<double>::vector(&v433, 2 * v330);
  double v331 = *((double *)a1 + 28);
  v425 = 0;
  v426 = 0;
  uint64_t v427 = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v425, *((const void **)a1 + 7), *((void *)a1 + 8), (uint64_t)(*((void *)a1 + 8) - *((void *)a1 + 7)) >> 3);
  if (v383 <= 0x7FFFFFFE)
  {
    uint64_t v332 = 0;
    int v333 = -(int)v330;
    do
    {
      v334 = *(char **)v384;
      if (*(double *)(*(void *)v384 + 8 * v332) == 0.0 && *((double *)v454[0] + v332) > 0.0)
      {
        v335 = (void *)v433;
        if ((uint64_t)(*((void *)&v433 + 1) - v433) >= 1) {
          bzero((void *)v433, 8 * (((*((void *)&v433 + 1) - (void)v433) >> 3) - (*((void *)&v433 + 1) - (void)v433 > 7uLL)) + 8);
        }
        signed int v336 = v330 + v332;
        if ((int)v330 + (int)v332 >= (int)((*((void *)a1 + 8) - (void)v334) >> 3)) {
          signed int v336 = (*((void *)a1 + 8) - (void)v334) >> 3;
        }
        if (((v332 - v330) & ~(((int)v332 - (int)v330) >> 31)) < v336)
        {
          v337 = v335;
          uint64_t v338 = v333 & ~(v333 >> 31);
          do
            *v337++ = *(void *)&v334[8 * v338++];
          while (v338 < v336);
        }
        std::__sort<std::__less<double,double> &,double *>();
        uint64_t v339 = (uint64_t)(*((void *)&v433 + 1) - v433) >> 3;
        if (*(double *)v433 == 0.0)
        {
          uint64_t v340 = 0;
          int v341 = ((*((void *)&v433 + 1) - (void)v433) >> 3) - 1;
          while (v339 - 1 != v340)
          {
            uint64_t v342 = v340 + 1;
            double v343 = *(double *)(v433 + 8 + 8 * v340++);
            if (v343 != 0.0)
            {
              int v341 = v342;
              goto LABEL_413;
            }
          }
          uint64_t v342 = v339 - 1;
        }
        else
        {
          int v341 = 0;
          uint64_t v342 = 0;
        }
LABEL_413:
        double v344 = *(double *)(v433
                         + 8
                         * (unint64_t)(floor((double)(unint64_t)(v339 - v342) * 0.5 + (double)v341) + -1.0));
        double v345 = *((double *)v454[0] + v332);
        if (vabdd_f64(v345, v344) / v344 < v331) {
          *((double *)v425 + v332) = v345;
        }
      }
      ++v332;
      ++v333;
    }
    while (v332 != v383 + 1);
  }
  if ((void **)v384 != &v425) {
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)v384, (char *)v425, (uint64_t)v426, (v426 - (unsigned char *)v425) >> 3);
  }
  DSP::medfilt((char **)v384, 5u, __src);
  v346 = *(char **)v384;
  if (*(void *)v384)
  {
    *((void *)a1 + 8) = v346;
    operator delete(v346);
    *(void *)uint64_t v384 = 0;
    *(void *)(v384 + 8) = 0;
    *(void *)(v384 + 16) = 0;
  }
  v347 = (char *)__src[0];
  *((void **)a1 + 7) = __src[0];
  v348 = __src[1];
  *((_OWORD *)a1 + 4) = *(_OWORD *)&__src[1];
  if ((void **)v384 != &v425) {
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)&v425, v347, (uint64_t)v348, (v348 - v347) >> 3);
  }
  if (v383 <= 0x7FFFFFFE)
  {
    uint64_t v349 = 0;
    double v350 = *((double *)a1 + 29);
    int v351 = -(int)v330;
    v352 = *(char **)v384;
    do
    {
      if (*(double *)&v352[8 * v349] > 0.0 && *((double *)v454[0] + v349) > 0.0)
      {
        v353 = (void *)v433;
        if ((uint64_t)(*((void *)&v433 + 1) - v433) >= 1) {
          bzero((void *)v433, 8 * (((*((void *)&v433 + 1) - (void)v433) >> 3) - (*((void *)&v433 + 1) - (void)v433 > 7uLL)) + 8);
        }
        signed int v354 = v330 + v349;
        if ((int)v330 + (int)v349 >= (int)((*((void *)a1 + 8) - (void)v352) >> 3)) {
          signed int v354 = (*((void *)a1 + 8) - (void)v352) >> 3;
        }
        if (((v349 - v330) & ~(((int)v349 - (int)v330) >> 31)) < v354)
        {
          v355 = v353;
          uint64_t v356 = v351 & ~(v351 >> 31);
          do
            *v355++ = *(void *)&v352[8 * v356++];
          while (v356 < v354);
        }
        std::__sort<std::__less<double,double> &,double *>();
        uint64_t v357 = (uint64_t)(*((void *)&v433 + 1) - v433) >> 3;
        if (*(double *)v433 == 0.0)
        {
          uint64_t v358 = 0;
          int v359 = ((*((void *)&v433 + 1) - (void)v433) >> 3) - 1;
          while (v357 - 1 != v358)
          {
            uint64_t v360 = v358 + 1;
            double v361 = *(double *)(v433 + 8 + 8 * v358++);
            if (v361 != 0.0)
            {
              int v359 = v360;
              goto LABEL_440;
            }
          }
          uint64_t v360 = v357 - 1;
        }
        else
        {
          int v359 = 0;
          uint64_t v360 = 0;
        }
LABEL_440:
        double v362 = *(double *)(v433
                         + 8
                         * (unint64_t)(floor((double)(unint64_t)(v357 - v360) * 0.5 + (double)v359) + -1.0));
        v352 = *(char **)v384;
        if (vabdd_f64(*(double *)(*(void *)v384 + 8 * v349), v362) / v362 > v350) {
          *((void *)v425 + v349) = *((void *)v454[0] + v349);
        }
      }
      ++v349;
      ++v351;
    }
    while (v349 != v383 + 1);
  }
  if ((void **)v384 != &v425) {
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)v384, (char *)v425, (uint64_t)v426, (v426 - (unsigned char *)v425) >> 3);
  }
  DSP::medfilt((char **)v384, 3u, __src);
  v363 = *(char **)v384;
  if (*(void *)v384)
  {
    *((void *)a1 + 8) = v363;
    operator delete(v363);
    *(void *)uint64_t v384 = 0;
    *(void *)(v384 + 8) = 0;
    *(void *)(v384 + 16) = 0;
  }
  *(_OWORD *)(a1 + 14) = *(_OWORD *)__src;
  *((void **)a1 + 9) = __src[2];
  AutocF0::voiced_unvoiced_decision(*((double *)a1 + 23), *((double *)a1 + 26), *((double *)a1 + 27), (uint64_t)v363, v384, (double **)v451, (double **)v453, (double **)v452, 1);
  uint64_t v364 = *((void *)a1 + 5);
  if ((unint64_t)(v364 - *((void *)a1 + 4)) >= 9 && *(double *)(v364 - 8) == 0.0)
  {
    *((void *)a1 + 5) = v364 - 8;
    *((void *)a1 + 8) -= 8;
    *((void *)a1 + 11) -= 8;
    *((void *)a1 + 14) -= 8;
  }
  DSP::smooth_voiced_pitch_contour((double **)v384, (DSP *)a1[7], __src);
  v365 = *(char **)v384;
  if (*(void *)v384)
  {
    *((void *)a1 + 8) = v365;
    operator delete(v365);
    *(void *)uint64_t v384 = 0;
    *(void *)(v384 + 8) = 0;
    *(void *)(v384 + 16) = 0;
  }
  *(_OWORD *)(a1 + 14) = *(_OWORD *)__src;
  *((void **)a1 + 9) = __src[2];
  DSP::smooth_voiced_pitch_contour((double **)v399, (DSP *)a1[7], __src);
  v366 = *v399;
  if (*v399)
  {
    *((void *)a1 + 11) = v366;
    operator delete(v366);
    *v399 = 0;
    *((void *)a1 + 11) = 0;
    *((void *)a1 + 12) = 0;
  }
  *((_OWORD *)a1 + 5) = *(_OWORD *)__src;
  *((void **)a1 + 12) = __src[2];
  v367 = (double *)*((void *)a1 + 4);
  v368 = (double *)*((void *)a1 + 5);
  memset(__src, 0, sizeof(__src));
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((char *)__src, v367, v368, v368 - v367);
  v369 = (double *)*((void *)a1 + 7);
  v370 = (double *)*((void *)a1 + 8);
  v422 = 0;
  uint64_t v423 = 0;
  v421 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((char *)&v421, v369, v370, v370 - v369);
  v371 = (double *)*((void *)a1 + 10);
  v372 = (double *)*((void *)a1 + 11);
  v419 = 0;
  uint64_t v420 = 0;
  v418 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((char *)&v418, v371, v372, v372 - v371);
  v373 = (double *)*((void *)a1 + 13);
  v374 = (double *)*((void *)a1 + 14);
  v416 = 0;
  uint64_t v417 = 0;
  v415 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((char *)&v415, v373, v374, v374 - v373);
  if (a1[76])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Elapsed time: ", 14);
    clock();
    v375 = (void *)std::ostream::operator<<();
    v376 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v375, (uint64_t)" s", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v376 + *(void *)(*v376 - 24)));
    v377 = std::locale::use_facet(&v470, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v377->__vftable[2].~facet_0)(v377, 10);
    std::locale::~locale(&v470);
    std::ostream::put();
    std::ostream::flush();
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_6vectorIfNS_9allocatorIfEEEES6_S6_S6_EEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS6_S6_S6_S6_EJEJEJRS6_S9_S9_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(a4, (uint64_t)__src, (uint64_t)&v421, (uint64_t)&v418, (uint64_t)&v415);
  if (v415)
  {
    v416 = v415;
    operator delete(v415);
  }
  if (v418)
  {
    v419 = v418;
    operator delete(v418);
  }
  if (v421)
  {
    v422 = v421;
    operator delete(v421);
  }
  if (__src[0])
  {
    __src[1] = __src[0];
    operator delete(__src[0]);
  }
  if (v425)
  {
    v426 = v425;
    operator delete(v425);
  }
  if ((void)v433)
  {
    *((void *)&v433 + 1) = v433;
    operator delete((void *)v433);
  }
  if (v438[0].__locale_)
  {
    v438[1] = v438[0];
    operator delete(v438[0].__locale_);
  }
  if (v441[0])
  {
    v441[1] = v441[0];
    operator delete(v441[0]);
  }
  if (locale) {
    operator delete(locale);
  }
  if ((void)v442)
  {
    *((void *)&v442 + 1) = v442;
    operator delete((void *)v442);
  }
  if (v444[0])
  {
    v444[1] = v444[0];
    operator delete(v444[0]);
  }
  if ((void)__X)
  {
    *((void *)&__X + 1) = __X;
    operator delete((void *)__X);
  }
  if (__Y[0])
  {
    __Y[1] = __Y[0];
    operator delete(__Y[0]);
  }
  if (v448[0])
  {
    v448[1] = v448[0];
    operator delete(v448[0]);
  }
  if (__b)
  {
    v450 = __b;
    operator delete(__b);
  }
  if (v451[0])
  {
    v451[1] = v451[0];
    operator delete(v451[0]);
  }
  if (v452[0])
  {
    v452[1] = v452[0];
    operator delete(v452[0]);
  }
  if (v453[0])
  {
    v453[1] = v453[0];
    operator delete(v453[0]);
  }
  if (v454[0])
  {
    v454[1] = v454[0];
    operator delete(v454[0]);
  }
  if (__dst)
  {
    v462 = __dst;
    operator delete(__dst);
  }
  if ((void)v466)
  {
    *((void *)&v466 + 1) = v466;
    operator delete((void *)v466);
  }
  if ((void)v468)
  {
    *((void *)&v468 + 1) = v468;
    operator delete((void *)v468);
  }
}

void sub_1A1E38(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 248);
  if (v3)
  {
    *(void *)(v1 - 240) = v3;
    operator delete(v3);
  }
  char v4 = *(void **)(v1 - 192);
  if (v4)
  {
    *(void *)(v1 - 184) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

char *std::vector<short>::insert(uint64_t a1, char *__src, unint64_t a3, char *a4)
{
  char v4 = __src;
  if (a3)
  {
    long long v5 = a4;
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v8 = a1 + 16;
    uint64_t v9 = v10;
    unint64_t v11 = *(char **)(v8 - 8);
    if (a3 <= (v10 - (uint64_t)v11) >> 1)
    {
      uint64_t v18 = v11 - __src;
      if (a3 <= (v11 - __src) >> 1)
      {
        float v21 = *(char **)(v8 - 8);
        uint64_t v20 = a3;
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = v18 >> 1;
        float v21 = &v11[2 * (a3 - (v18 >> 1))];
        do
        {
          *(_WORD *)&v11[v19] = *(_WORD *)a4;
          v19 += 2;
        }
        while (2 * a3 - 2 * v20 != v19);
        *(void *)(a1 + 8) = v21;
        if (v11 == __src) {
          return v4;
        }
      }
      double v22 = &__src[2 * a3];
      float v23 = &v21[-2 * a3];
      signed int v24 = v21;
      if (v23 < v11)
      {
        signed int v24 = v21;
        do
        {
          __int16 v25 = *(_WORD *)v23;
          v23 += 2;
          *(_WORD *)signed int v24 = v25;
          v24 += 2;
        }
        while (v23 < v11);
      }
      *(void *)(a1 + 8) = v24;
      if (v21 != v22) {
        memmove(&v21[-2 * ((v21 - v22) >> 1)], __src, v21 - v22);
      }
      if (v4 <= v5)
      {
        if (*(void *)(a1 + 8) <= (unint64_t)v5) {
          unint64_t v26 = 0;
        }
        else {
          unint64_t v26 = a3;
        }
        v5 += 2 * v26;
      }
      signed int v27 = v4;
      do
      {
        *(_WORD *)signed int v27 = *(_WORD *)v5;
        v27 += 2;
        --v20;
      }
      while (v20);
    }
    else
    {
      double v12 = *(unsigned char **)a1;
      uint64_t v13 = a3 + ((uint64_t)&v11[-*(void *)a1] >> 1);
      if (v13 < 0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = (__src - v12) >> 1;
      unint64_t v15 = v9 - (void)v12;
      if (v15 > v13) {
        uint64_t v13 = v15;
      }
      if (v15 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v16 = v13;
      }
      uint64_t v36 = v8;
      if (v16) {
        int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(v8, v16);
      }
      else {
        int v17 = 0;
      }
      signed int v28 = &v17[2 * v14];
      std::string __p = v17;
      unint64_t v33 = v28;
      unint64_t v35 = &v17[2 * v16];
      uint64_t v29 = 2 * a3;
      unint64_t v30 = &v28[2 * a3];
      do
      {
        *(_WORD *)signed int v28 = *(_WORD *)v5;
        v28 += 2;
        v29 -= 2;
      }
      while (v29);
      int v34 = v30;
      char v4 = std::vector<short>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
      if (v34 != v33) {
        v34 += (v33 - v34 + 1) & 0xFFFFFFFFFFFFFFFELL;
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v4;
}

void sub_1A239C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AutocF0::remove_false_flanks(uint64_t a1, uint64_t *a2, int a3, int a4, int a5)
{
  if (a3 == a4 || a3 == a5)
  {
    uint64_t v5 = *a2;
    unint64_t v6 = (a2[1] - *a2) >> 3;
    LODWORD(v7) = a4 + 1;
    if (v6 > a4 + 1)
    {
      unint64_t v7 = (int)v7;
      int v8 = a4;
      do
      {
        if (*(double *)(v5 + 8 * v8) <= *(double *)(v5 + 8 * v7)) {
          break;
        }
        *(void *)(v5 + 8 * v8) = 0xFFF0000000000000;
        ++v7;
        ++v8;
      }
      while (v6 > v7);
    }
    if (a5 > a4)
    {
      uint64_t v9 = a5;
      double v10 = *(double *)(v5 + 8 * a5);
      do
      {
        double v11 = v10;
        double v10 = *(double *)(v5 + 8 * v9 - 8);
        if (v11 <= v10) {
          break;
        }
        *(void *)(v5 + 8 * v9--) = 0xFFF0000000000000;
      }
      while (v9 > a4);
    }
  }
}

void AutocF0::voiced_unvoiced_decision(double a1, double a2, double a3, uint64_t a4, uint64_t a5, double **a6, double **a7, double **a8, int a9)
{
  if (a9)
  {
    a2 = a2 * 1.5;
    a3 = a3 * 1.5;
    a1 = a1 * 0.666;
  }
  uint64_t v9 = *(void **)a5;
  uint64_t v10 = *(void *)(a5 + 8) - *(void *)a5;
  if (v10)
  {
    unint64_t v11 = v10 >> 3;
    double v12 = *a6;
    uint64_t v13 = *a7;
    uint64_t v14 = *a8;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    do
    {
      if (*v12 < a1) {
        void *v9 = 0;
      }
      if (*v13 > a2) {
        void *v9 = 0;
      }
      if (*v14 > a3) {
        void *v9 = 0;
      }
      ++v9;
      ++v14;
      ++v13;
      ++v12;
      --v11;
    }
    while (v11);
  }
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_6vectorIfNS_9allocatorIfEEEES6_S6_S6_EEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS6_S6_S6_S6_EJEJEJRS6_S9_S9_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 3, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 6, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 9, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  return a1;
}

void sub_1A25C4(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  unint64_t v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

void AutocF0::AutocF0(void **a1, void **a2, void **a3, void *a4)
{
  unint64_t v7 = *a1;
  if (v7)
  {
    a4[11] = v7;
    operator delete(v7);
  }
  int v8 = *a2;
  if (*a2)
  {
    a4[8] = v8;
    operator delete(v8);
  }
  uint64_t v9 = *a3;
  if (*a3)
  {
    a4[5] = v9;
    operator delete(v9);
  }
}

void *SiriTTS::SpeechFeature::SpeechFeatureExtractor::SpeechFeatureExtractor(void *a1, const void **a2)
{
  *a1 = 0;
  a1[1] = 0;
  if (*((char *)a2 + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  uint64_t v5 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v4 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v5 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = *a2;
    }
    memmove(v5, v6, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 47;
  unint64_t v7 = std::string::append(&v15, "lexiconp.txt");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  std::string::size_type v14 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  std::ifstream::basic_ifstream((void (__cdecl ***)(std::ifstream *__hidden))&v15);
  if (*(_DWORD *)((char *)&v15 + *(void *)(v15.__r_.__value_.__r.__words[0] - 24) + 32)) {
    std::allocate_shared[abi:ne180100]<SiriTTS::ForcedAlignment::ForcedAlignment,std::allocator<SiriTTS::ForcedAlignment::ForcedAlignment>,std::string const&,BOOL const&,void>(&v12);
  }
  else {
    std::allocate_shared[abi:ne180100]<SiriTTS::ForcedAlignment::ForcedAlignment,std::allocator<SiriTTS::ForcedAlignment::ForcedAlignment>,std::string const&,BOOL const&,std::string&,void>(&v12);
  }
  long long v9 = v12;
  long long v12 = 0uLL;
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v9;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (*((void *)&v12 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1A28DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::ifstream::~ifstream(&a19);
  if (a16 < 0) {
    operator delete(__p);
  }
  unint64_t v26 = *(std::__shared_weak_count **)(v24 + 8);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void SiriTTS::SpeechFeature::SpeechFeatureExtractor::resample(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  std::string __p = 0;
  long long v8 = 0;
  uint64_t v9 = 0;
  std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&__p, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1);
  DSP::resample((uint64_t)&__p, a2, a3, a4);
  if (__p)
  {
    long long v8 = __p;
    operator delete(__p);
  }
}

void sub_1A29B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SiriTTS::SpeechFeature::SpeechFeatureExtractor::extract_speech_feature(SiriTTS::ForcedAlignment::AcousticModel ***a1, uint64_t a2, uint64_t *a3, int a4, unsigned char *a5, uint64_t a6)
{
  long long v58 = 0uLL;
  std::string::size_type v59 = 0;
  std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v58, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  unint64_t v11 = (__int16 *)v58;
  if (a4 != 16000)
  {
    long long v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0;
    std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v55, (const void *)v58, *((uint64_t *)&v58 + 1), (uint64_t)(*((void *)&v58 + 1) - v58) >> 1);
    DSP::resample((uint64_t)&v55, a4, 16000, (uint64_t)&v48);
    if ((void)v58)
    {
      *((void *)&v58 + 1) = v58;
      operator delete((void *)v58);
    }
    long long v12 = (__int16 *)v48;
    long long v58 = v48;
    std::string::size_type v59 = v49.__r_.__value_.__r.__words[0];
    v49.__r_.__value_.__r.__words[0] = 0;
    long long v48 = 0uLL;
    if (v55)
    {
      long long v56 = v55;
      operator delete(v55);
      unint64_t v11 = (__int16 *)v58;
    }
    else
    {
      unint64_t v11 = v12;
    }
  }
  uint64_t v44 = a5;
  memset(v54, 0, sizeof(v54));
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>((char *)v54, v11, *((__int16 **)&v58 + 1), (uint64_t)(*((void *)&v58 + 1) - (void)v11) >> 1);
  uint64_t v51 = 0;
  unint64_t v52 = 0;
  unint64_t v53 = 0;
  uint64_t v13 = *a3;
  if (a3[1] == *a3)
  {
LABEL_49:
    long long v61 = 0uLL;
    std::locale v62 = 0;
    if (a6)
    {
      long long v48 = 0u;
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = 0u;
      LODWORD(v49.__r_.__value_.__r.__words[2]) = 1065353216;
      for (float32x2_t i = *(uint64_t **)(a6 + 16); i; float32x2_t i = (uint64_t *)*i)
      {
        memset(&v47, 0, sizeof(v47));
        uint64_t v41 = i[5];
        uint64_t v42 = i[6];
        while (v41 != v42)
        {
          memset(&v45, 0, sizeof(v45));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v45, *(long long **)(v41 + 24), *(long long **)(v41 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v41 + 32) - *(void *)(v41 + 24)) >> 3));
          memset(&v46, 0, sizeof(v46));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v46, (long long *)v45.__r_.__value_.__l.__data_, (long long *)v45.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45.__r_.__value_.__l.__size_ - v45.__r_.__value_.__r.__words[0]) >> 3));
          std::vector<SiriTTS::ForcedAlignment::Phoneme>::push_back[abi:ne180100]((uint64_t *)&v47, (uint64_t)&v46);
          int v60 = &v46;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
          int v60 = &v45;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
          v41 += 48;
        }
        int v60 = (std::string *)(i + 2);
        int v43 = (std::string *)(std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v48, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, (long long **)&v60)+ 40);
        if (v43 != &v47) {
          std::vector<SiriTTS::ForcedAlignment::Phoneme>::__assign_with_size[abi:ne180100]<SiriTTS::ForcedAlignment::Phoneme*,SiriTTS::ForcedAlignment::Phoneme*>((uint64_t)v43, (long long **)v47.__r_.__value_.__l.__data_, (long long **)v47.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47.__r_.__value_.__l.__size_ - v47.__r_.__value_.__r.__words[0]) >> 3));
        }
        v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        std::vector<SiriTTS::ForcedAlignment::Phoneme>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
      }
      SiriTTS::ForcedAlignment::ForcedAlignment::align_phones_with_frame(*a1, (uint64_t)v54, &v51, v44, (uint64_t)&v48);
    }
    SiriTTS::ForcedAlignment::ForcedAlignment::align_phones_with_frame(*a1, (uint64_t)v54, &v51, a5, 0);
  }
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  while (1)
  {
    uint64_t v16 = v13 + v14;
    if (*(void *)(v13 + v14 + 32) == *(void *)(v13 + v14 + 24))
    {
      if (*(char *)(v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v48, *(const std::string::value_type **)(v13 + v14), *(void *)(v13 + v14 + 8));
      }
      else
      {
        long long v21 = *(_OWORD *)v16;
        v49.__r_.__value_.__r.__words[0] = *(void *)(v16 + 16);
        long long v48 = v21;
      }
      v49.__r_.__value_.__l.__size_ = 0;
      v49.__r_.__value_.__r.__words[2] = 0;
      uint64_t v50 = 0;
      unint64_t v17 = v52;
      if (v52 < v53) {
        goto LABEL_26;
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - v51) >> 4);
      unint64_t v27 = v18 + 1;
      if (v18 + 1 > 0x555555555555555) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v53 - v51) >> 4) > v27) {
        unint64_t v27 = 0x5555555555555556 * ((uint64_t)(v53 - v51) >> 4);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - v51) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v20 = 0x555555555555555;
      }
      else {
        unint64_t v20 = v27;
      }
    }
    else
    {
      if (*(char *)(v16 + 23) < 0)
      {
        if (!*(void *)(v13 + v14 + 8))
        {
LABEL_22:
          std::to_string(&v47, v15);
          SiriTTS::ForcedAlignment::Lexeme::Lexeme((std::string *)&v48, (long long *)&v47, (long long **)(*a3 + v14 + 24));
          unint64_t v22 = v52;
          if (v52 >= v53)
          {
            unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - v51) >> 4);
            unint64_t v34 = v33 + 1;
            if (v33 + 1 > 0x555555555555555) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((uint64_t)(v53 - v51) >> 4) > v34) {
              unint64_t v34 = 0x5555555555555556 * ((uint64_t)(v53 - v51) >> 4);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - v51) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v35 = 0x555555555555555;
            }
            else {
              unint64_t v35 = v34;
            }
            double v64 = &v53;
            uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>((uint64_t)&v53, v35);
            int v37 = &v36[48 * v33];
            *(void *)&long long v61 = v36;
            *((void *)&v61 + 1) = v37;
            int v63 = &v36[48 * v38];
            long long v39 = v48;
            *((void *)v37 + 2) = v49.__r_.__value_.__r.__words[0];
            *(_OWORD *)int v37 = v39;
            v49.__r_.__value_.__r.__words[0] = 0;
            long long v48 = 0uLL;
            *((void *)v37 + 3) = 0;
            *((void *)v37 + 4) = 0;
            *((void *)v37 + 5) = 0;
            *(_OWORD *)(v37 + 24) = *(_OWORD *)&v49.__r_.__value_.__r.__words[1];
            *((void *)v37 + 5) = v50;
            v49.__r_.__value_.__l.__size_ = 0;
            v49.__r_.__value_.__r.__words[2] = 0;
            uint64_t v50 = 0;
            std::locale v62 = v37 + 48;
            std::vector<SiriTTS::ForcedAlignment::Lexeme>::__swap_out_circular_buffer(&v51, &v61);
            unint64_t v24 = v52;
            std::__split_buffer<SiriTTS::ForcedAlignment::Lexeme>::~__split_buffer((void **)&v61);
          }
          else
          {
            long long v23 = v48;
            *(void *)(v52 + 16) = v49.__r_.__value_.__r.__words[0];
            *(void *)(v22 + 24) = 0;
            *(_OWORD *)unint64_t v22 = v23;
            v49.__r_.__value_.__r.__words[0] = 0;
            long long v48 = 0uLL;
            *(void *)(v22 + 32) = 0;
            *(void *)(v22 + 40) = 0;
            *(_OWORD *)(v22 + 24) = *(_OWORD *)&v49.__r_.__value_.__r.__words[1];
            *(void *)(v22 + 40) = v50;
            v49.__r_.__value_.__l.__size_ = 0;
            v49.__r_.__value_.__r.__words[2] = 0;
            uint64_t v50 = 0;
            unint64_t v24 = v22 + 48;
          }
          unint64_t v52 = v24;
          *(void *)&long long v61 = &v49.__r_.__value_.__l.__size_;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
          if (v49.__r_.__value_.__s.__data_[7] < 0) {
            operator delete((void *)v48);
          }
          if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_48;
          }
          unint64_t v32 = (void *)v47.__r_.__value_.__r.__words[0];
          goto LABEL_47;
        }
      }
      else if (!*(unsigned char *)(v16 + 23))
      {
        goto LABEL_22;
      }
      SiriTTS::ForcedAlignment::Lexeme::Lexeme((std::string *)&v48, (long long *)v16, (long long **)(v13 + v14 + 24));
      unint64_t v17 = v52;
      if (v52 < v53)
      {
LABEL_26:
        long long v25 = v48;
        *(void *)(v17 + 16) = v49.__r_.__value_.__r.__words[0];
        *(void *)(v17 + 24) = 0;
        *(_OWORD *)unint64_t v17 = v25;
        v49.__r_.__value_.__r.__words[0] = 0;
        long long v48 = 0uLL;
        *(void *)(v17 + 32) = 0;
        *(void *)(v17 + 40) = 0;
        *(_OWORD *)(v17 + 24) = *(_OWORD *)&v49.__r_.__value_.__r.__words[1];
        *(void *)(v17 + 40) = v50;
        v49.__r_.__value_.__l.__size_ = 0;
        v49.__r_.__value_.__r.__words[2] = 0;
        uint64_t v50 = 0;
        unint64_t v26 = v17 + 48;
        goto LABEL_34;
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - v51) >> 4);
      unint64_t v19 = v18 + 1;
      if (v18 + 1 > 0x555555555555555) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v53 - v51) >> 4) > v19) {
        unint64_t v19 = 0x5555555555555556 * ((uint64_t)(v53 - v51) >> 4);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - v51) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v20 = 0x555555555555555;
      }
      else {
        unint64_t v20 = v19;
      }
    }
    double v64 = &v53;
    signed int v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>((uint64_t)&v53, v20);
    uint64_t v29 = &v28[48 * v18];
    *(void *)&long long v61 = v28;
    *((void *)&v61 + 1) = v29;
    int v63 = &v28[48 * v30];
    long long v31 = v48;
    *((void *)v29 + 2) = v49.__r_.__value_.__r.__words[0];
    *(_OWORD *)uint64_t v29 = v31;
    v49.__r_.__value_.__r.__words[0] = 0;
    long long v48 = 0uLL;
    *((void *)v29 + 3) = 0;
    *((void *)v29 + 4) = 0;
    *((void *)v29 + 5) = 0;
    *(_OWORD *)(v29 + 24) = *(_OWORD *)&v49.__r_.__value_.__r.__words[1];
    *((void *)v29 + 5) = v50;
    v49.__r_.__value_.__l.__size_ = 0;
    v49.__r_.__value_.__r.__words[2] = 0;
    uint64_t v50 = 0;
    std::locale v62 = v29 + 48;
    std::vector<SiriTTS::ForcedAlignment::Lexeme>::__swap_out_circular_buffer(&v51, &v61);
    unint64_t v26 = v52;
    std::__split_buffer<SiriTTS::ForcedAlignment::Lexeme>::~__split_buffer((void **)&v61);
LABEL_34:
    unint64_t v52 = v26;
    *(void *)&long long v61 = &v49.__r_.__value_.__l.__size_;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    if (v49.__r_.__value_.__s.__data_[7] < 0)
    {
      unint64_t v32 = (void *)v48;
LABEL_47:
      operator delete(v32);
    }
LABEL_48:
    ++v15;
    uint64_t v13 = *a3;
    v14 += 48;
    if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4) <= v15) {
      goto LABEL_49;
    }
  }
}

void sub_1A3188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  a32 = (char *)(v43 - 144);
  std::vector<std::pair<std::string,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  a32 = &a39;
  std::vector<SiriTTS::ForcedAlignment::Lexeme>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  if (__p)
  {
    a43 = (uint64_t)__p;
    operator delete(__p);
  }
  std::string v45 = *(void **)(v43 - 192);
  if (v45)
  {
    *(void *)(v43 - 184) = v45;
    operator delete(v45);
  }
  _Unwind_Resume(a1);
}

void **std::vector<SiriTTS::ForcedAlignment::Phoneme>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v15[4] = result;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Vector<float>>>((uint64_t)result, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[24 * v9];
    v15[0] = v13;
    v15[1] = v14;
    void v15[3] = &v13[24 * v12];
    *(void *)uint64_t v14 = 0;
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v15[2] = v14 + 24;
    std::vector<SiriTTS::ForcedAlignment::Phoneme>::__swap_out_circular_buffer(a1, v15);
    long long v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<SiriTTS::ForcedAlignment::Phoneme>::~__split_buffer(v15);
  }
  else
  {
    *unint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    long long v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1A3434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<SiriTTS::ForcedAlignment::Phoneme>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void SiriTTS::SpeechFeature::SpeechFeatureExtractor::extract_dur_energy_pitch(uint64_t a1@<X1>, uint64_t *a2@<X2>, unsigned char *a3@<X3>, uint64_t *a4@<X8>)
{
  int v63 = 0;
  double v64 = 0;
  double v65 = 0;
  if (*a3)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    if (*a2 != v6)
    {
      int v7 = 0;
      do
      {
        if (*(char *)(v5 + 23) < 0) {
          uint64_t v8 = *(void *)(v5 + 8);
        }
        else {
          uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
        }
        std::string::basic_string(&v44, (const std::string *)v5, v8 - 2, 2uLL, (std::allocator<char> *)&v57);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v44.__r_.__value_.__l.__size_ != 2) {
            goto LABEL_24;
          }
          unint64_t v9 = (std::string *)v44.__r_.__value_.__r.__words[0];
          if (*(_WORD *)v44.__r_.__value_.__l.__data_ != 21343
            && *(_WORD *)v44.__r_.__value_.__l.__data_ != 16991
            && *(_WORD *)v44.__r_.__value_.__l.__data_ != 18783)
          {
            goto LABEL_17;
          }
        }
        else
        {
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) != 2) {
            goto LABEL_24;
          }
          if (LOWORD(v44.__r_.__value_.__l.__data_) != 21343
            && LOWORD(v44.__r_.__value_.__l.__data_) != 16991
            && LOWORD(v44.__r_.__value_.__l.__data_) != 18783)
          {
            unint64_t v9 = &v44;
LABEL_17:
            if (LOWORD(v9->__r_.__value_.__l.__data_) != 17759) {
              goto LABEL_24;
            }
          }
        }
        if (*(char *)(v5 + 23) < 0) {
          uint64_t v10 = *(void *)(v5 + 8);
        }
        else {
          uint64_t v10 = *(unsigned __int8 *)(v5 + 23);
        }
        std::string::basic_string(&v57, (const std::string *)v5, 0, v10 - 2, (std::allocator<char> *)v31);
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        long long v11 = *(_OWORD *)&v57.__r_.__value_.__l.__data_;
        *(void *)(v5 + 16) = *((void *)&v57.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v5 = v11;
LABEL_24:
        unint64_t v12 = v64;
        if (v64 >= v65)
        {
          uint64_t v14 = v63;
          uint64_t v15 = (v64 - v63) >> 2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v65 - v63;
          if ((v65 - v63) >> 1 > v16) {
            unint64_t v16 = v17 >> 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v65, v18);
            uint64_t v14 = v63;
            unint64_t v12 = v64;
          }
          else
          {
            unint64_t v19 = 0;
          }
          unint64_t v20 = &v19[4 * v15];
          *(_DWORD *)unint64_t v20 = v7;
          uint64_t v13 = v20 + 4;
          while (v12 != v14)
          {
            int v21 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          int v63 = v20;
          double v64 = v13;
          double v65 = &v19[4 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(_DWORD *)double v64 = v7;
          uint64_t v13 = v12 + 4;
        }
        double v64 = v13;
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        {
          unint64_t v22 = (std::string *)v44.__r_.__value_.__r.__words[0];
          if (v44.__r_.__value_.__l.__size_ != 2) {
            goto LABEL_51;
          }
          if (*(_WORD *)v44.__r_.__value_.__l.__data_ == 17759) {
            goto LABEL_49;
          }
        }
        else
        {
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) != 2) {
            goto LABEL_52;
          }
          if (LOWORD(v44.__r_.__value_.__l.__data_) == 17759) {
            goto LABEL_49;
          }
          unint64_t v22 = &v44;
        }
        if (LOWORD(v22->__r_.__value_.__l.__data_) != 21343)
        {
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_50;
          }
          goto LABEL_52;
        }
LABEL_49:
        ++v7;
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_50:
          unint64_t v22 = (std::string *)v44.__r_.__value_.__r.__words[0];
LABEL_51:
          operator delete(v22);
        }
LABEL_52:
        v5 += 32;
      }
      while (v5 != v6);
    }
  }
  SiriTTS::SpeechFeature::SpeechFeatureExtractor::extract_phone_duration(a2, v62);
  _ZNSt3__115allocate_sharedB8ne180100I12SpeechEnergyNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v60);
  SpeechEnergy::estimate_speech_energy(v60, a1, (DSP *)&loc_3E80, &v57);
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v51 = 0;
  unint64_t v52 = 0;
  uint64_t v53 = 0;
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  v44.__r_.__value_.__l.__size_ = (std::string::size_type)&v51;
  std::__memberwise_copy_assign[abi:ne180100]<std::tuple<std::vector<float> &,std::vector<float> &>,std::tuple<std::vector<float>,std::vector<float>>,0ul,1ul>(&v44.__r_.__value_.__l.__data_, (uint64_t)&v57);
  estimate_and_vote_pitch(a1, (DSP *)&loc_3E80, 1u, 5u, &v44);
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v38 = 0;
  long long v39 = 0;
  uint64_t v40 = 0;
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  std::string __p = 0;
  unint64_t v33 = 0;
  uint64_t v34 = 0;
  v31[0] = (char *)&v41;
  v31[1] = (char *)&v38;
  v31[2] = (char *)&v35;
  v31[3] = (char *)&__p;
  std::__memberwise_copy_assign[abi:ne180100]<std::tuple<std::vector<float> &,std::vector<float> &,std::vector<float> &,std::vector<float> &>,std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>,0ul,1ul,2ul,3ul>(v31, (uint64_t)&v44);
  SiriTTS::SpeechFeature::SpeechFeatureExtractor::extract_phone_energy(&v51, v62, (uint64_t *)v31);
  SiriTTS::SpeechFeature::SpeechFeatureExtractor::extract_phone_pitch(&v35, (uint64_t *)v31, a4);
  if (*a3)
  {
    uint64_t v23 = a4[1] - *a4;
    if (v23)
    {
      unint64_t v24 = v23 / 48;
      long long v25 = (int *)v63;
      if (v24 <= 1) {
        unint64_t v24 = 1;
      }
      unint64_t v26 = (_DWORD *)(*a4 + 24);
      do
      {
        int v27 = *v25++;
        *unint64_t v26 = v27;
        v26 += 12;
        --v24;
      }
      while (v24);
    }
  }
  double v66 = v31;
  std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  if (__p)
  {
    unint64_t v33 = __p;
    operator delete(__p);
  }
  if (v35)
  {
    uint64_t v36 = v35;
    operator delete(v35);
  }
  if (v38)
  {
    long long v39 = v38;
    operator delete(v38);
  }
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
  if (v49)
  {
    uint64_t v50 = v49;
    operator delete(v49);
  }
  if (v47)
  {
    long long v48 = v47;
    operator delete(v47);
  }
  if (v45)
  {
    std::string v46 = v45;
    operator delete(v45);
  }
  if (v44.__r_.__value_.__r.__words[0])
  {
    v44.__r_.__value_.__l.__size_ = v44.__r_.__value_.__r.__words[0];
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (v51)
  {
    unint64_t v52 = v51;
    operator delete(v51);
  }
  if (v54)
  {
    uint64_t v55 = v54;
    operator delete(v54);
  }
  if (v58)
  {
    std::string::size_type v59 = v58;
    operator delete(v58);
  }
  if (v57.__r_.__value_.__r.__words[0])
  {
    v57.__r_.__value_.__l.__size_ = v57.__r_.__value_.__r.__words[0];
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
  std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  if (v63)
  {
    double v64 = v63;
    operator delete(v63);
  }
}

void sub_1A3910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  *(void *)(v46 - 96) = v45;
  std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 96));
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  std::tuple<std::vector<float>,std::vector<float>,std::vector<float>,std::vector<float>>::~tuple((uint64_t)&a29);
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  long long v48 = *(void **)(v46 - 232);
  if (v48)
  {
    *(void *)(v46 - 224) = v48;
    operator delete(v48);
  }
  std::tuple<std::vector<float>,std::vector<float>>::~tuple(v46 - 208);
  std::string v49 = *(std::__shared_weak_count **)(v46 - 152);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  a29 = (void *)(v46 - 144);
  std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  uint64_t v50 = *(void **)(v46 - 120);
  if (v50)
  {
    *(void *)(v46 - 112) = v50;
    operator delete(v50);
  }
  _Unwind_Resume(a1);
}

void SiriTTS::SpeechFeature::SpeechFeatureExtractor::extract_phone_duration(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    __int32 v5 = 0;
    __asm { FMOV            V9.2S, #10.0 }
    do
    {
      memset(&__p, 0, sizeof(__p));
      std::string::operator=(&__p, (const std::string *)v2);
      int v11 = *(_DWORD *)(v2 + 24);
      float v18 = (float)v11 * 10.0;
      v12.i32[0] = v5;
      v12.i32[1] = v11 + v5;
      float32x2_t v17 = vmul_f32(vcvt_f32_s32(v12), _D9);
      unint64_t v13 = a2[1];
      if (v13 >= a2[2])
      {
        uint64_t v14 = std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__push_back_slow_path<SiriTTS::SpeechFeature::SpeechFeatureData const&>(a2, (long long *)&__p);
      }
      else
      {
        std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__construct_one_at_end[abi:ne180100]<SiriTTS::SpeechFeature::SpeechFeatureData const&>((uint64_t)a2, (long long *)&__p);
        uint64_t v14 = v13 + 48;
      }
      a2[1] = v14;
      int v15 = *(_DWORD *)(v2 + 24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v5 += v15;
      v2 += 32;
    }
    while (v2 != v3);
  }
}

void sub_1A3B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void SiriTTS::SpeechFeature::SpeechFeatureExtractor::extract_phone_energy(void *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    __asm { FMOV            V8.2S, #5.0 }
    do
    {
      int32x2_t v12 = vcvt_s32_f32(vdiv_f32(*(float32x2_t *)(v3 + 28), _D8));
      float v13 = 0.0;
      __int32 v14 = v12.i32[1] - v12.i32[0];
      if (v12.i32[1] >= v12.i32[0])
      {
        int v15 = (float *)(*a1 + 4 * v12.i32[0]);
        __int32 v16 = v14 + 1;
        do
        {
          float v17 = *v15++;
          float v13 = v13 + v17;
          --v16;
        }
        while (v16);
      }
      memset(&__p, 0, sizeof(__p));
      std::string::operator=(&__p, (const std::string *)v3);
      long long v21 = *(_OWORD *)(v3 + 28);
      float v22 = v13 / (float)(v14 + 1);
      unint64_t v18 = a3[1];
      if (v18 >= a3[2])
      {
        uint64_t v19 = std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__push_back_slow_path<SiriTTS::SpeechFeature::SpeechFeatureData const&>(a3, (long long *)&__p);
      }
      else
      {
        std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__construct_one_at_end[abi:ne180100]<SiriTTS::SpeechFeature::SpeechFeatureData const&>((uint64_t)a3, (long long *)&__p);
        uint64_t v19 = v18 + 48;
      }
      a3[1] = v19;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v3 += 48;
    }
    while (v3 != v4);
  }
}

void sub_1A3C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void SiriTTS::SpeechFeature::SpeechFeatureExtractor::extract_phone_pitch(void *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    __asm { FMOV            V8.2S, #5.0 }
    do
    {
      int32x2_t v12 = vcvt_s32_f32(vdiv_f32(*(float32x2_t *)(v3 + 28), _D8));
      float v13 = 0.0;
      __int32 v14 = v12.i32[1] - v12.i32[0];
      if (v12.i32[1] >= v12.i32[0])
      {
        int v15 = (float *)(*a1 + 4 * v12.i32[0]);
        __int32 v16 = v14 + 1;
        do
        {
          float v17 = *v15++;
          float v13 = v13 + v17;
          --v16;
        }
        while (v16);
      }
      memset(&__p, 0, sizeof(__p));
      std::string::operator=(&__p, (const std::string *)v3);
      int v23 = *(_DWORD *)(v3 + 36);
      uint64_t v22 = *(void *)(v3 + 28);
      int v18 = *(_DWORD *)(v3 + 44);
      float v24 = v13 / (float)(v14 + 1);
      int v25 = v18;
      unint64_t v19 = a3[1];
      if (v19 >= a3[2])
      {
        uint64_t v20 = std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__push_back_slow_path<SiriTTS::SpeechFeature::SpeechFeatureData const&>(a3, (long long *)&__p);
      }
      else
      {
        std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__construct_one_at_end[abi:ne180100]<SiriTTS::SpeechFeature::SpeechFeatureData const&>((uint64_t)a3, (long long *)&__p);
        uint64_t v20 = v19 + 48;
      }
      a3[1] = v20;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v3 += 48;
    }
    while (v3 != v4);
  }
}

void sub_1A3D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::vector<float>,std::vector<float>>::~tuple(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

std::string *SiriTTS::ForcedAlignment::Lexeme::Lexeme(std::string *this, long long *a2, long long **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return this;
}

void sub_1A3E6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<SiriTTS::ForcedAlignment::ForcedAlignment,std::allocator<SiriTTS::ForcedAlignment::ForcedAlignment>,std::string const&,BOOL const&,std::string&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::ForcedAlignment>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL const&,std::string&,std::allocator<SiriTTS::ForcedAlignment::ForcedAlignment>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1A3EE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::ForcedAlignment>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL const&,std::string&,std::allocator<SiriTTS::ForcedAlignment::ForcedAlignment>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26EC80;
  SiriTTS::ForcedAlignment::ForcedAlignment::ForcedAlignment((uint64_t)(a1 + 3));
  return a1;
}

void sub_1A3F44(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::ForcedAlignment>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26EC80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::ForcedAlignment>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26EC80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::ForcedAlignment>::__on_zero_shared_impl[abi:ne180100]<std::allocator<SiriTTS::ForcedAlignment::ForcedAlignment>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::~__hash_table(a1 + 48);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void *std::allocate_shared[abi:ne180100]<SiriTTS::ForcedAlignment::ForcedAlignment,std::allocator<SiriTTS::ForcedAlignment::ForcedAlignment>,std::string const&,BOOL const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::ForcedAlignment>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL const&,std::allocator<SiriTTS::ForcedAlignment::ForcedAlignment>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1A4070(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::ForcedAlignment>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL const&,std::allocator<SiriTTS::ForcedAlignment::ForcedAlignment>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26EC80;
  SiriTTS::ForcedAlignment::ForcedAlignment::ForcedAlignment(a1 + 3);
  return a1;
}

void sub_1A40CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 25) < 0) {
      operator delete(*(void **)(i - 48));
    }
  }
  a1[1] = v2;
}

char *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>(char *result, __int16 *a2, __int16 *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    int v7 = (float *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      int v8 = *a2++;
      *v7++ = (float)v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1A41E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::string,int>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<std::string,int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<SiriTTS::ForcedAlignment::Phoneme>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::vector<SiriTTS::ForcedAlignment::Phoneme>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<SiriTTS::ForcedAlignment::Phoneme>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SiriTTS::ForcedAlignment::Phoneme>,std::reverse_iterator<SiriTTS::ForcedAlignment::Phoneme*>,std::reverse_iterator<SiriTTS::ForcedAlignment::Phoneme*>,std::reverse_iterator<SiriTTS::ForcedAlignment::Phoneme*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SiriTTS::ForcedAlignment::Phoneme>,std::reverse_iterator<SiriTTS::ForcedAlignment::Phoneme*>,std::reverse_iterator<SiriTTS::ForcedAlignment::Phoneme*>,std::reverse_iterator<SiriTTS::ForcedAlignment::Phoneme*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::ForcedAlignment::Phoneme>,std::reverse_iterator<SiriTTS::ForcedAlignment::Phoneme*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::ForcedAlignment::Phoneme>,std::reverse_iterator<SiriTTS::ForcedAlignment::Phoneme*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::ForcedAlignment::Phoneme>,std::reverse_iterator<SiriTTS::ForcedAlignment::Phoneme*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::ForcedAlignment::Phoneme>,std::reverse_iterator<SiriTTS::ForcedAlignment::Phoneme*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<SiriTTS::ForcedAlignment::Phoneme>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<SiriTTS::ForcedAlignment::Phoneme>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  long long v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  int v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1A4888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  long long v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *long long v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1A492C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::vector<SiriTTS::ForcedAlignment::Phoneme>::__assign_with_size[abi:ne180100]<SiriTTS::ForcedAlignment::Phoneme*,SiriTTS::ForcedAlignment::Phoneme*>(uint64_t a1, long long **a2, long long **a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(std::vector<std::string> **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<SiriTTS::ForcedAlignment::Phoneme>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::vector<int>>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint8x8_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SiriTTS::ForcedAlignment::Phoneme>,SiriTTS::ForcedAlignment::Phoneme*,SiriTTS::ForcedAlignment::Phoneme*,SiriTTS::ForcedAlignment::Phoneme*>(v8, a2, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    unint64_t v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SiriTTS::ForcedAlignment::Phoneme *,SiriTTS::ForcedAlignment::Phoneme *,SiriTTS::ForcedAlignment::Phoneme *>((int)&v17, (uint64_t)a2, (uint64_t)v13, v9);
    uint8x8_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SiriTTS::ForcedAlignment::Phoneme>,SiriTTS::ForcedAlignment::Phoneme*,SiriTTS::ForcedAlignment::Phoneme*,SiriTTS::ForcedAlignment::Phoneme*>(v8, v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SiriTTS::ForcedAlignment::Phoneme *,SiriTTS::ForcedAlignment::Phoneme *,SiriTTS::ForcedAlignment::Phoneme *>((int)&v18, (uint64_t)a2, (uint64_t)a3, v9);
  int v15 = v14;
  unint64_t v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      BOOL v19 = v16;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1A4B10(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1A4B18(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<SiriTTS::ForcedAlignment::Phoneme>::__vdeallocate(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    unint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        uint64_t v5 = v3;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SiriTTS::ForcedAlignment::Phoneme>,SiriTTS::ForcedAlignment::Phoneme*,SiriTTS::ForcedAlignment::Phoneme*,SiriTTS::ForcedAlignment::Phoneme*>(uint64_t a1, long long **a2, long long **a3, std::string *a4)
{
  unint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
      unint64_t v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::ForcedAlignment::Phoneme>,SiriTTS::ForcedAlignment::Phoneme*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1A4C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::ForcedAlignment::Phoneme>,SiriTTS::ForcedAlignment::Phoneme*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::ForcedAlignment::Phoneme>,SiriTTS::ForcedAlignment::Phoneme*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::ForcedAlignment::Phoneme>,SiriTTS::ForcedAlignment::Phoneme*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SiriTTS::ForcedAlignment::Phoneme *,SiriTTS::ForcedAlignment::Phoneme *,SiriTTS::ForcedAlignment::Phoneme *>(int a1, uint64_t a2, uint64_t a3, std::vector<std::string> *this)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((std::vector<std::string> *)v5 != this) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, *(std::string **)v5, *(long long **)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3));
      }
      v5 += 24;
      ++this;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  std::vector<int>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](this, v11);
    uint8x8_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    unint64_t v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    uint8x8_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  int v15 = v14;
  std::vector<std::string>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1A4EBC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1A4EC4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  unint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void std::vector<std::pair<std::string,int>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::pair<std::string,int>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::vector<std::pair<std::string,int>>::__init_with_size[abi:ne180100]<std::pair<std::string,int>*,std::pair<std::string,int>*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<kaldi::HmmTopology::HmmState>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,int>>,std::pair<std::string,int>*,std::pair<std::string,int>*,std::pair<std::string,int>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1A500C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<std::string,int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,int>>,std::pair<std::string,int>*,std::pair<std::string,int>*,std::pair<std::string,int>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  unint64_t v4 = this;
  uint8x8_t v12 = this;
  unint64_t v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        uint64_t v8 = v4;
      }
      LODWORD(v4[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 6);
      v6 += 2;
      unint64_t v4 = (std::string *)((char *)v8 + 32);
      unint64_t v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,int>>,std::pair<std::string,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1A50E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,int>>,std::pair<std::string,int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,int>>,std::pair<std::string,int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,int>>,std::pair<std::string,int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0) {
      operator delete(*(void **)(v1 - 32));
    }
    v1 -= 32;
  }
}

void *_ZNSt3__115allocate_sharedB8ne180100I12SpeechEnergyNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x98uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceI12SpeechEnergyNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1A51B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceI12SpeechEnergyNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26ECD0;
  SpeechEnergy::SpeechEnergy((SpeechEnergy *)(a1 + 3));
  return a1;
}

void sub_1A520C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SpeechEnergy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26ECD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SpeechEnergy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26ECD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<SpeechEnergy>::__on_zero_shared(uint64_t a1)
{
  std::allocator<SpeechEnergy>::destroy[abi:ne180100]((uint64_t)&v1, (void *)(a1 + 24));
}

void std::allocator<SpeechEnergy>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[6];
  if (v3)
  {
    a2[7] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a2[3];
  if (v4)
  {
    a2[4] = v4;
    operator delete(v4);
  }
}

__n128 std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__construct_one_at_end[abi:ne180100]<SiriTTS::SpeechFeature::SpeechFeatureData const&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  __n128 result = *(__n128 *)((char *)a2 + 24);
  *(void *)(v4 + 40) = *((void *)a2 + 5);
  *(__n128 *)(v4 + 24) = result;
  *(void *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1A5388(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__push_back_slow_path<SiriTTS::SpeechFeature::SpeechFeatureData const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v20 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v11 = (std::string *)&v10[48 * v4];
  v17[0] = v10;
  v17[1] = v11;
  char v18 = v11;
  BOOL v19 = &v10[48 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    char v11 = v18;
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  unint64_t v13 = &v10[48 * v4];
  long long v14 = *(long long *)((char *)a2 + 24);
  *((void *)v13 + 5) = *((void *)a2 + 5);
  *(_OWORD *)(v13 + 24) = v14;
  char v18 = v11 + 2;
  std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<SiriTTS::SpeechFeature::SpeechFeatureData>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1A54B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<SiriTTS::SpeechFeature::SpeechFeatureData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SiriTTS::SpeechFeature::SpeechFeatureData>,std::reverse_iterator<SiriTTS::SpeechFeature::SpeechFeatureData*>,std::reverse_iterator<SiriTTS::SpeechFeature::SpeechFeatureData*>,std::reverse_iterator<SiriTTS::SpeechFeature::SpeechFeatureData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SiriTTS::SpeechFeature::SpeechFeatureData>,std::reverse_iterator<SiriTTS::SpeechFeature::SpeechFeatureData*>,std::reverse_iterator<SiriTTS::SpeechFeature::SpeechFeatureData*>,std::reverse_iterator<SiriTTS::SpeechFeature::SpeechFeatureData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::SpeechFeature::SpeechFeatureData>,std::reverse_iterator<SiriTTS::SpeechFeature::SpeechFeatureData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::SpeechFeature::SpeechFeatureData>,std::reverse_iterator<SiriTTS::SpeechFeature::SpeechFeatureData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::SpeechFeature::SpeechFeatureData>,std::reverse_iterator<SiriTTS::SpeechFeature::SpeechFeatureData*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<SiriTTS::SpeechFeature::SpeechFeatureData>,std::reverse_iterator<SiriTTS::SpeechFeature::SpeechFeatureData*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 48;
  }
}

uint64_t std::__split_buffer<SiriTTS::SpeechFeature::SpeechFeatureData>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<SiriTTS::SpeechFeature::SpeechFeatureData>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 6;
      *(void *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t SiriTTS::ForcedAlignment::ForcedAlignment::ForcedAlignment(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(unsigned char *)(a1 + 16) = 0;
  std::allocate_shared[abi:ne180100]<SiriTTS::ForcedAlignment::AcousticModel,std::allocator<SiriTTS::ForcedAlignment::AcousticModel>,std::string const&,BOOL &,void>(&v5);
  long long v2 = v5;
  long long v5 = 0uLL;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (*((void *)&v5 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
    }
  }
  return a1;
}

{
  std::logic_error *exception;
  std::string *v4;
  long long v5;
  std::string v6[2];
  std::string v7;
  void (__cdecl **v8[72])(std::ifstream *__hidden);

  SiriTTS::ForcedAlignment::ForcedAlignment::ForcedAlignment(a1);
  std::ifstream::basic_ifstream(v8);
  if ((*((unsigned char *)&v8[4] + (unint64_t)*(v8[0] - 3)) & 5) != 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    unint64_t v4 = std::string::append(&v7, "does not exist.");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v6[0].__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v6[0].__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, v6);
  }
  SiriTTS::ForcedAlignment::ForcedAlignment::build_lexicon((uint64_t)v6);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__move_assign(a1 + 24, (uint64_t *)v6);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::~__hash_table((uint64_t)v6);
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  return a1;
}

void sub_1A578C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::~__hash_table(v2);
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void SiriTTS::ForcedAlignment::ForcedAlignment::build_lexicon(uint64_t a1@<X8>)
{
  std::string __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  std::ifstream::basic_ifstream(v16);
  memset(v11, 0, sizeof(v11));
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + (unint64_t)*(v16[0] - 3)));
  uint64_t v2 = std::locale::use_facet(&v7, &std::ctype<char>::id);
  unsigned __int8 v3 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v7);
  unint64_t v4 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, (uint64_t)&__p, v3);
  if ((*((unsigned char *)v4 + *(void *)(*v4 - 24) + 32) & 5) == 0)
  {
    uint64_t v5 = HIBYTE(v14);
    if (v14 < 0) {
      uint64_t v5 = v13;
    }
    if (v5)
    {
      memset(&v10, 0, sizeof(v10));
      v7.__locale_ = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      memset(&v6[3], 0, 48);
      v6[0] = " ";
      v6[1] = "";
      boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(__dst, (uint64_t)v6);
      boost::algorithm::split<std::vector<std::string>,std::string&,boost::algorithm::detail::is_any_ofF<char>>((uint64_t)v11, (uint64_t)&__p, __dst, 0);
    }
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v16 + (unint64_t)*(v16[0] - 3)), *(_DWORD *)((char *)&v16[4] + (unint64_t)*(v16[0] - 3)) | 4);
  }
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
}

void sub_1A5CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void boost::algorithm::split<std::vector<std::string>,std::string&,boost::algorithm::detail::is_any_ofF<char>>(uint64_t a1, uint64_t a2, void *__src, int a4)
{
  size_t v7 = __src[2];
  size_t __n = v7;
  __srca[0] = 0;
  if (v7 < 0x11)
  {
    memcpy(__srca, __src, v7);
    size_t v13 = __n;
    v12[0] = 0;
    if (__n < 0x11)
    {
      memcpy(v12, __srca, __n);
      void __dst[2] = v13;
      __dst[0] = 0;
      if (v13 <= 0x10)
      {
        memcpy(__dst, v12, v13);
        int v11 = a4;
        boost::algorithm::iter_split<std::vector<std::string>,std::string&,boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, a2, (uint64_t)__dst);
      }
      operator new[]();
    }
    operator new[]();
  }
  operator new[]();
}

void sub_1A5FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    operator delete[]();
  }
  if (v17 >= 0x11)
  {
    if (a10) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1A6264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v26 & 1) == 0)
    {
LABEL_8:
      std::ifstream::~ifstream(&a24);
      SiriTTS::ForcedAlignment::ForcedAlignment::~ForcedAlignment(v24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

void SiriTTS::ForcedAlignment::ForcedAlignment::~ForcedAlignment(SiriTTS::ForcedAlignment::ForcedAlignment *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::~__hash_table((uint64_t)this + 24);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t SiriTTS::ForcedAlignment::ForcedAlignment::process_lexeme@<X0>(uint64_t a1@<X0>, SiriTTS::ForcedAlignment::Lexicon *a2@<X1>, uint64_t *a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X4>, char **a6@<X8>)
{
  std::locale v62 = a6;
  memset(v74, 0, sizeof(v74));
  int v75 = 1065353216;
  if (a5)
  {
    if (v74 == (_OWORD *)a5) {
      goto LABEL_7;
    }
    int v75 = *(_DWORD *)(a5 + 32);
    size_t v7 = (uint64_t **)(a5 + 16);
  }
  else
  {
    if (v74 == (_OWORD *)(a1 + 24)) {
      goto LABEL_7;
    }
    int v75 = *(_DWORD *)(a1 + 56);
    size_t v7 = (uint64_t **)(a1 + 40);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,void *> *>>(v74, *v7, 0);
  a6 = v62;
LABEL_7:
  uint64_t v8 = *a3;
  if (a3[1] == *a3)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
  else
  {
    unint64_t v9 = 0;
    do
    {
      std::string v10 = (long long *)(v8 + 48 * v9);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)v10, *((void *)v10 + 1));
        uint64_t v8 = *a3;
      }
      else
      {
        long long v11 = *v10;
        v73.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v11;
      }
      memset(&v72, 0, sizeof(v72));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v72, *(long long **)(v8 + 48 * v9 + 24), *(long long **)(v8 + 48 * v9 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 48 * v9 + 32) - *(void *)(v8 + 48 * v9 + 24)) >> 3));
      std::locale::locale((std::locale *)&v76);
      LODWORD(__p.__r_.__value_.__l.__data_) = 0x4000;
      std::locale::locale((std::locale *)&__p.__r_.__value_.__r.__words[1], (const std::locale *)&v76);
      boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(&v73, (std::locale *)&__p);
      std::locale::~locale((std::locale *)&__p.__r_.__value_.__r.__words[1]);
      std::locale::~locale((std::locale *)&v76);
      uint64_t v69 = 0;
      unint64_t v70 = 0;
      unint64_t v71 = 0;
      if (v72.__r_.__value_.__l.__size_ == v72.__r_.__value_.__r.__words[0]
        || (unint64_t v70 = std::vector<SiriTTS::ForcedAlignment::Lexeme>::__push_back_slow_path<SiriTTS::ForcedAlignment::Lexeme const&>(&v69, (long long *)(*a3 + 48 * v9)), v72.__r_.__value_.__l.__size_ == v72.__r_.__value_.__r.__words[0])|| *a4)
      {
        if (std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v74, (unsigned __int8 *)&v73))
        {
          v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
          long long v12 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v74, (unsigned __int8 *)&v73, (uint64_t)&std::piecewise_construct, (long long **)&v76);
          uint64_t v14 = (long long **)*((void *)v12 + 5);
          for (uint64_t i = (long long **)*((void *)v12 + 6); v14 != i; v14 += 3)
          {
            SiriTTS::ForcedAlignment::Lexeme::Lexeme(&__p, (long long *)&v73, v14);
            unint64_t v15 = v70;
            if (v70 >= v71)
            {
              unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - v69) >> 4);
              unint64_t v19 = v18 + 1;
              if (v18 + 1 > 0x555555555555555) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((uint64_t)(v71 - v69) >> 4) > v19) {
                unint64_t v19 = 0x5555555555555556 * ((uint64_t)(v71 - v69) >> 4);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v69) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
                unint64_t v20 = 0x555555555555555;
              }
              else {
                unint64_t v20 = v19;
              }
              std::string::size_type v78 = &v71;
              unint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>((uint64_t)&v71, v20);
              std::string::size_type v22 = (std::string::size_type)&v21[48 * v18];
              v76.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
              v76.__r_.__value_.__l.__size_ = v22;
              uint64_t v77 = &v21[48 * v23];
              long long v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(void *)(v22 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)std::string::size_type v22 = v24;
              memset(&__p, 0, sizeof(__p));
              *(void *)(v22 + 24) = 0;
              *(void *)(v22 + 32) = 0;
              *(void *)(v22 + 40) = 0;
              *(_OWORD *)(v22 + 24) = v67;
              *(void *)(v22 + 40) = v68;
              long long v67 = 0uLL;
              uint64_t v68 = 0;
              v76.__r_.__value_.__r.__words[2] = v22 + 48;
              std::vector<SiriTTS::ForcedAlignment::Lexeme>::__swap_out_circular_buffer(&v69, &v76);
              unint64_t v17 = v70;
              std::__split_buffer<SiriTTS::ForcedAlignment::Lexeme>::~__split_buffer((void **)&v76.__r_.__value_.__l.__data_);
            }
            else
            {
              long long v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(void *)(v70 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
              *(void *)(v15 + 24) = 0;
              *(_OWORD *)unint64_t v15 = v16;
              memset(&__p, 0, sizeof(__p));
              *(void *)(v15 + 32) = 0;
              *(void *)(v15 + 40) = 0;
              *(_OWORD *)(v15 + 24) = v67;
              *(void *)(v15 + 40) = v68;
              long long v67 = 0uLL;
              uint64_t v68 = 0;
              unint64_t v17 = v15 + 48;
            }
            unint64_t v70 = v17;
            v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
        else
        {
          std::locale::locale((std::locale *)&__p);
          LODWORD(v64.__locale_) = 0x2000;
          std::locale::locale(&v65, (const std::locale *)&__p);
          boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(&v73, &v64);
          std::locale::~locale(&v65);
          std::locale::~locale((std::locale *)&__p);
          if (std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(v74, (unsigned __int8 *)&v73))
          {
            v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            int v25 = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v74, (unsigned __int8 *)&v73, (uint64_t)&std::piecewise_construct, (long long **)&v76);
            int v27 = (long long **)*((void *)v25 + 5);
            for (uint64_t j = (long long **)*((void *)v25 + 6); v27 != j; v27 += 3)
            {
              SiriTTS::ForcedAlignment::Lexeme::Lexeme(&__p, (long long *)&v73, v27);
              unint64_t v28 = v70;
              if (v70 >= v71)
              {
                unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - v69) >> 4);
                unint64_t v32 = v31 + 1;
                if (v31 + 1 > 0x555555555555555) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * ((uint64_t)(v71 - v69) >> 4) > v32) {
                  unint64_t v32 = 0x5555555555555556 * ((uint64_t)(v71 - v69) >> 4);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v69) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v33 = 0x555555555555555;
                }
                else {
                  unint64_t v33 = v32;
                }
                std::string::size_type v78 = &v71;
                uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>((uint64_t)&v71, v33);
                std::string::size_type v35 = (std::string::size_type)&v34[48 * v31];
                v76.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
                v76.__r_.__value_.__l.__size_ = v35;
                uint64_t v77 = &v34[48 * v36];
                long long v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(void *)(v35 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
                *(_OWORD *)std::string::size_type v35 = v37;
                memset(&__p, 0, sizeof(__p));
                *(void *)(v35 + 24) = 0;
                *(void *)(v35 + 32) = 0;
                *(void *)(v35 + 40) = 0;
                *(_OWORD *)(v35 + 24) = v67;
                *(void *)(v35 + 40) = v68;
                long long v67 = 0uLL;
                uint64_t v68 = 0;
                v76.__r_.__value_.__r.__words[2] = v35 + 48;
                std::vector<SiriTTS::ForcedAlignment::Lexeme>::__swap_out_circular_buffer(&v69, &v76);
                unint64_t v30 = v70;
                std::__split_buffer<SiriTTS::ForcedAlignment::Lexeme>::~__split_buffer((void **)&v76.__r_.__value_.__l.__data_);
              }
              else
              {
                long long v29 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(void *)(v70 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
                *(void *)(v28 + 24) = 0;
                *(_OWORD *)unint64_t v28 = v29;
                memset(&__p, 0, sizeof(__p));
                *(void *)(v28 + 32) = 0;
                *(void *)(v28 + 40) = 0;
                *(_OWORD *)(v28 + 24) = v67;
                *(void *)(v28 + 40) = v68;
                long long v67 = 0uLL;
                uint64_t v68 = 0;
                unint64_t v30 = v28 + 48;
              }
              unint64_t v70 = v30;
              v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
          }
        }
      }
      uint64_t v38 = v69;
      if (v70 == v69)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::string::size_type v59 = std::string::append(&v76, "does not exist in the lexicon and the phonemes are not provided.");
        long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v60;
        v59->__r_.__value_.__l.__size_ = 0;
        v59->__r_.__value_.__r.__words[2] = 0;
        v59->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__p);
      }
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      do
      {
        SiriTTS::ForcedAlignment::Lexicon::add_lexeme(a2, (const std::string *)(v38 + v39));
        ++v40;
        uint64_t v38 = v69;
        v39 += 48;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - v69) >> 4) > v40);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
      std::vector<SiriTTS::ForcedAlignment::Lexeme>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      ++v9;
      uint64_t v8 = *a3;
      uint64_t v41 = a3[1];
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v41 - *a3) >> 4) > v9);
    *std::locale v62 = 0;
    v62[1] = 0;
    void v62[2] = 0;
    if (v41 != v8)
    {
      unint64_t v42 = 0;
      do
      {
        int v43 = SiriTTS::ForcedAlignment::Lexicon::word_to_int((uint64_t)a2);
        int v44 = v43;
        uint64_t v45 = v62;
        std::string v47 = v62[1];
        unint64_t v46 = (unint64_t)v62[2];
        if ((unint64_t)v47 >= v46)
        {
          std::string v49 = *v62;
          uint64_t v50 = (v47 - *v62) >> 2;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v52 = v46 - (void)v49;
          if (v52 >> 1 > v51) {
            unint64_t v51 = v52 >> 1;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v51;
          }
          if (v53)
          {
            uint64_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(v62 + 2), v53);
            std::string v49 = *v62;
            std::string v47 = v62[1];
          }
          else
          {
            uint64_t v54 = 0;
          }
          uint64_t v55 = &v54[4 * v50];
          *(_DWORD *)uint64_t v55 = v44;
          long long v48 = v55 + 4;
          while (v47 != v49)
          {
            int v56 = *((_DWORD *)v47 - 1);
            v47 -= 4;
            *((_DWORD *)v55 - 1) = v56;
            v55 -= 4;
          }
          uint64_t v45 = v62;
          *std::locale v62 = v55;
          v62[1] = v48;
          void v62[2] = &v54[4 * v53];
          if (v49)
          {
            operator delete(v49);
            uint64_t v45 = v62;
          }
        }
        else
        {
          *(_DWORD *)std::string v47 = v43;
          long long v48 = v47 + 4;
        }
        v45[1] = v48;
        ++v42;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4) > v42);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::~__hash_table((uint64_t)v74);
}

void sub_1A6AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
}

void SiriTTS::ForcedAlignment::ForcedAlignment::decode(void **a1, long long **a2, uint64_t *a3)
{
  SiriTTS::ForcedAlignment::AcousticModel::forward((uint64_t)*a1, a3, (unsigned char *)a1 + 16, &v7);
  std::vector<std::vector<int>>::__vdeallocate(a3);
  *(_OWORD *)a3 = v7;
  a3[2] = v8;
  uint64_t v8 = 0;
  long long v7 = 0uLL;
  unint64_t v9 = (void **)&v7;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  SiriTTS::ForcedAlignment::AcousticModel::context(*a1, &v9);
  SiriTTS::ForcedAlignment::AcousticModel::transition_model((uint64_t)*a1, &v6);
  SiriTTS::ForcedAlignment::Lexicon::generate_fst(a2);
}

void sub_1A6F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,char a34)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  SiriTTS::ForcedAlignment::AlignmentDecoder::~AlignmentDecoder((SiriTTS::ForcedAlignment::AlignmentDecoder *)&a28);
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  SiriTTS::ForcedAlignment::AlignmentGraph::~AlignmentGraph((SiriTTS::ForcedAlignment::AlignmentGraph *)&a34);
  _Unwind_Resume(a1);
}

void SiriTTS::ForcedAlignment::Lexicon::~Lexicon(SiriTTS::ForcedAlignment::Lexicon *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unsigned __int8 v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (void **)this;
  std::vector<SiriTTS::ForcedAlignment::Lexeme>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void SiriTTS::ForcedAlignment::ForcedAlignment::align_phones_with_frame(SiriTTS::ForcedAlignment::AcousticModel **a1, uint64_t a2, uint64_t *a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v10 = SiriTTS::ForcedAlignment::AcousticModel::silence_phones(*a1);
  uint64_t v11 = SiriTTS::ForcedAlignment::AcousticModel::nonsilence_phones(*a1);
  SiriTTS::ForcedAlignment::Lexicon::Lexicon(v14, v10, v11);
  SiriTTS::ForcedAlignment::ForcedAlignment::process_lexeme((uint64_t)a1, (SiriTTS::ForcedAlignment::Lexicon *)v14, a3, a4, a5, (char **)&__p);
  SiriTTS::ForcedAlignment::FeatureExtractorWav::compute(a2, v12);
  LOBYTE(v15) = *a4 ^ 1;
  SiriTTS::ForcedAlignment::ForcedAlignment::decode((void **)a1, v14, v12);
}

void sub_1A719C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  *(void *)(v18 - 72) = v17;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 72));
  if (__p) {
    operator delete(__p);
  }
  SiriTTS::ForcedAlignment::Lexicon::~Lexicon((SiriTTS::ForcedAlignment::Lexicon *)&a17);
  _Unwind_Resume(a1);
}

void boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(std::string *a1, std::locale *a2)
{
  unint64_t v4 = a2 + 1;
  LODWORD(v15.__locale_) = a2->__locale_;
  std::locale::locale(&v16, a2 + 1);
  boost::algorithm::trim_right_if<std::string,boost::algorithm::detail::is_classifiedF>(a1, &v15);
  std::locale::~locale(&v16);
  int locale = (int)a2->__locale_;
  std::locale::locale(&v14, v4);
  int v5 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v5 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if (v5 >= 0) {
    std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  int v17 = locale;
  std::locale::locale(&v18, &v14);
  if (size)
  {
    uint64_t v8 = (unsigned __int8 *)v6 + size;
    unint64_t v9 = v6;
    while (1)
    {
      uint64_t v10 = v9->__r_.__value_.__s.__data_[0];
      uint64_t v11 = std::locale::use_facet(&v18, &std::ctype<char>::id);
      if ((v10 & 0x80) != 0 || (*((_DWORD *)&v11[1].~facet + v10) & v17) == 0) {
        break;
      }
      unint64_t v9 = (std::string *)((char *)v9 + 1);
      if (!--size)
      {
        unint64_t v9 = (std::string *)v8;
        break;
      }
    }
  }
  else
  {
    unint64_t v9 = v6;
  }
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v12 = (std::string::size_type)a1;
  }
  else {
    std::string::size_type v12 = a1->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a1, (std::string::size_type)v6 - v12, (char *)v9 - (char *)v6);
  std::locale::~locale(&v18);
  std::locale::~locale(&v14);
}

void sub_1A7330(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void SiriTTS::ForcedAlignment::AlignmentDecoder::~AlignmentDecoder(SiriTTS::ForcedAlignment::AlignmentDecoder *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unsigned __int8 v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void SiriTTS::ForcedAlignment::AlignmentGraph::~AlignmentGraph(SiriTTS::ForcedAlignment::AlignmentGraph *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unsigned __int8 v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *std::allocate_shared[abi:ne180100]<SiriTTS::ForcedAlignment::AcousticModel,std::allocator<SiriTTS::ForcedAlignment::AcousticModel>,std::string const&,BOOL &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x98uLL);
  uint64_t result = std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::AcousticModel>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,std::allocator<SiriTTS::ForcedAlignment::AcousticModel>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1A742C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::AcousticModel>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,std::allocator<SiriTTS::ForcedAlignment::AcousticModel>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26ED20;
  SiriTTS::ForcedAlignment::AcousticModel::AcousticModel(a1 + 3);
  return a1;
}

void sub_1A7488(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::AcousticModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26ED20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::AcousticModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26ED20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::AcousticModel>::__on_zero_shared(uint64_t a1)
{
  std::allocator<SiriTTS::ForcedAlignment::AcousticModel>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<SiriTTS::ForcedAlignment::AcousticModel>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (void **)(a2 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a2 + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  unsigned __int8 v3 = *(std::__shared_weak_count **)(a2 + 72);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a2 + 56);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int v5 = *(std::__shared_weak_count **)(a2 + 40);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 24);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  long long v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void *boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(void *__dst, uint64_t a2)
{
  void *__dst = 0;
  unint64_t v4 = *(unsigned char **)a2;
  int v5 = *(unsigned char **)(a2 + 8);
  void __dst[2] = v5 - v4;
  if ((unint64_t)(v5 - v4) >= 0x11) {
    operator new[]();
  }
  if (v5 != v4) {
    memmove(__dst, v4, v5 - v4);
  }
  std::__sort<std::__less<char,char> &,char *>();
  return __dst;
}

void boost::algorithm::iter_split<std::vector<std::string>,std::string&,boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(char *)(a2 + 23);
  BOOL v5 = v4 < 0;
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if (v5) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  uint64_t v8 = v6 + v7;
  size_t v9 = *(void *)(a3 + 16);
  v11[2] = v9;
  v11[0] = 0;
  if (v9 < 0x11)
  {
    memcpy(v11, (const void *)a3, v9);
    int v12 = *(_DWORD *)(a3 + 24);
    boost::algorithm::split_iterator<std::__wrap_iter<char *>>::split_iterator<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(v10, v6, v8, (uint64_t)v11);
  }
  operator new[]();
}

void sub_1A7828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2(&a9);
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2(&a19);
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2(&a42);
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2((uint64_t *)(v42 - 176));
  _Unwind_Resume(a1);
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char *>>::split_iterator(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  uint64_t v4 = *a2;
  if (*a2)
  {
    *(void *)a1 = v4;
    if (v4)
    {
      long long v5 = *(_OWORD *)(a2 + 1);
      *(void *)(a1 + 24) = a2[3];
      *(_OWORD *)(a1 + 8) = v5;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, void))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 8, 0);
    }
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = a2[7];
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
  return a1;
}

void boost::algorithm::split_iterator<std::__wrap_iter<char *>>::split_iterator<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v6 = *(void *)(a4 + 16);
  v7[2] = v6;
  v7[0] = 0;
  if (v6 < 0x11)
  {
    memcpy(v7, (const void *)a4, v6);
    int v8 = *(_DWORD *)(a4 + 24);
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, (uint64_t)v7);
  }
  operator new[]();
}

void sub_1A7A50(_Unwind_Exception *a1)
{
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2(v1);
  _Unwind_Resume(a1);
}

void boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(void *a1, uint64_t a2)
{
  size_t v4 = *(void *)(a2 + 16);
  v5[2] = v4;
  v5[0] = 0;
  if (v4 < 0x11)
  {
    memcpy(v5, (const void *)a2, v4);
    int v6 = *(_DWORD *)(a2 + 24);
    boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::function2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, (uint64_t)v5);
  }
  operator new[]();
}

void sub_1A7B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11) {
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char *>>::increment(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (*(void *)a1)
  {
    uint64_t result = boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::operator()((void *)a1);
    uint64_t v2 = *(void *)(a1 + 56);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t result = v4;
  }
  BOOL v5 = result == v2 && v4 == v2;
  if (v5 && *(void *)(a1 + 40) == v2) {
    *(unsigned char *)(a1 + 64) = 1;
  }
  *(void *)(a1 + 32) = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = result;
  *(void *)(a1 + 48) = v4;
  return result;
}

void boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::function2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(void *a1, uint64_t a2)
{
  *a1 = 0;
  size_t v4 = *(void *)(a2 + 16);
  v5[2] = v4;
  v5[0] = 0;
  if (v4 < 0x11)
  {
    memcpy(v5, (const void *)a2, v4);
    int v6 = *(_DWORD *)(a2 + 24);
    boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>((uint64_t)a1, (uint64_t)v5);
  }
  operator new[]();
}

void sub_1A7D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11) {
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  }
  _Unwind_Resume(exception_object);
}

void boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void *)(a2 + 16);
  v4[2] = v3;
  v4[0] = 0;
  if (v3 < 0x11)
  {
    memcpy(v4, (const void *)a2, v3);
    int v5 = *(_DWORD *)(a2 + 24);
    boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>((uint64_t)boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>)::stored_vtable, (uint64_t)v4);
  }
  operator new[]();
}

void sub_1A7E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11) {
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4) {
    return boost::detail::function::functor_manager<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>::manager(result, a2, a3);
  }
  a2[4] = 0;
  return result;
}

char *boost::detail::function::function_obj_invoker2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>,boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::invoke(uint64_t *a1, char *a2, char *a3)
{
  return boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>::operator()<std::__wrap_iter<char *>>(*a1, a2, a3);
}

void boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t a1, uint64_t a2)
{
  size_t v4 = *(void *)(a2 + 16);
  v5[2] = v4;
  v5[0] = 0;
  if (v4 < 0x11)
  {
    memcpy(v5, (const void *)a2, v4);
    int v6 = *(_DWORD *)(a2 + 24);
    boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, (uint64_t)v5);
  }
  operator new[]();
}

{
  size_t v3;
  void v4[3];
  int v5;

  size_t v3 = *(void *)(a2 + 16);
  v4[2] = v3;
  v4[0] = 0;
  if (v3 < 0x11)
  {
    memcpy(v4, (const void *)a2, v3);
    int v5 = *(_DWORD *)(a2 + 24);
    boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_functor<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>();
  }
  operator new[]();
}

void sub_1A7F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11) {
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  size_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      return result;
    case 2:
      int v5 = *(void **)a2;
      if (*(void *)a2)
      {
        if (v5[2] >= 0x11uLL)
        {
          if (*v5) {
            operator delete[]();
          }
        }
        operator delete();
      }
      goto LABEL_10;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000000021280ELL & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x800000000021280ELL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
LABEL_10:
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_1A811C()
{
}

char *boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>::operator()<std::__wrap_iter<char *>>(uint64_t a1, char *a2, char *a3)
{
  size_t v6 = *(void *)(a1 + 16);
  unint64_t v10 = v6;
  v9[0] = 0;
  if (v6 >= 0x11) {
    operator new[]();
  }
  memcpy(v9, (const void *)a1, v6);
  while (a2 != a3)
  {
    if (boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v9, *a2)) {
      goto LABEL_8;
    }
    ++a2;
  }
  a2 = a3;
LABEL_8:
  if (v10 >= 0x11 && v9[0]) {
    operator delete[]();
  }
  if (a2 == a3) {
    return a3;
  }
  if (!*(_DWORD *)(a1 + 24))
  {
    uint64_t v7 = a2;
    do
    {
      if (!boost::algorithm::detail::is_any_ofF<char>::operator()<char>((void *)a1, *v7)) {
        break;
      }
      ++v7;
    }
    while (v7 != a3);
  }
  return a2;
}

void sub_1A8294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  if (a11 >= 0x11) {
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a9);
  }
  _Unwind_Resume(exception_object);
}

BOOL boost::algorithm::detail::is_any_ofF<char>::operator()<char>(void *a1, int a2)
{
  unint64_t v2 = a1[2];
  if (v2 >= 0x11)
  {
    a1 = (void *)*a1;
    size_t v3 = (void *)((char *)a1 + v2);
  }
  else
  {
    size_t v3 = (void *)((char *)a1 + v2);
    if (!v2) {
      return a1 != v3 && *(char *)a1 <= a2;
    }
  }
  do
  {
    size_t v4 = (char *)a1 + (v2 >> 1);
    int v6 = *v4;
    int v5 = v4 + 1;
    unint64_t v7 = v2 >> 1;
    v2 += ~(v2 >> 1);
    if (v6 < a2) {
      a1 = v5;
    }
    else {
      unint64_t v2 = v7;
    }
  }
  while (v2);
  return a1 != v3 && *(char *)a1 <= a2;
}

void sub_1A8414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11) {
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  }
  _Unwind_Resume(exception_object);
}

void boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_functor<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>()
{
}

void sub_1A84D8()
{
}

uint64_t boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::operator()(void *a1)
{
  if (!*a1)
  {
    std::runtime_error::runtime_error(&v4, "call to empty boost::function");
    v4.__vftable = (std::runtime_error_vtbl *)off_26EEB8;
    boost::throw_exception<boost::bad_function_call>(&v4);
  }
  char v1 = *(uint64_t (**)(void *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8);
  unint64_t v2 = a1 + 1;

  return v1(v2);
}

void sub_1A8580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1A85DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &off_26EE88;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &off_26EE10;
  *(void *)(a1 + 8) = off_26EE40;
  *(void *)(a1 + 24) = off_26EE68;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_26EEE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void boost::wrapexcept<boost::bad_function_call>::clone()
{
}

void sub_1A88C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1A8980(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_26EEE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));

  operator delete();
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_26EEE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));

  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &off_26EEE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);

  operator delete();
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(void *a1)
{
  *a1 = &off_26EEE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);

  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

{
  uint64_t vars8;

  *a1 = &off_26EEE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);

  operator delete();
}

void boost::bad_function_call::~bad_function_call(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  operator delete();
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_26EE88;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = off_26EEB8;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &off_26EEE0;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &off_26EE10;
  *(void *)(a1 + 8) = off_26EE40;
  *(void *)(a1 + 24) = off_26EE68;
  return a1;
}

void sub_1A8D64(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

uint64_t *boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      size_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

std::vector<std::string> *std::vector<std::string>::vector<boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char *>>,boost::algorithm::split_iterator<std::__wrap_iter<char *>>,boost::use_default,boost::use_default>,0>(std::vector<std::string> *a1, uint64_t *a2, uint64_t *a3)
{
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  boost::algorithm::split_iterator<std::__wrap_iter<char *>>::split_iterator((uint64_t)v7, a2);
  boost::algorithm::split_iterator<std::__wrap_iter<char *>>::split_iterator((uint64_t)v6, a3);
  std::vector<std::string>::__init_with_sentinel[abi:ne180100]<boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char *>>,boost::algorithm::split_iterator<std::__wrap_iter<char *>>,boost::use_default,boost::use_default>,boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char *>>,boost::algorithm::split_iterator<std::__wrap_iter<char *>>,boost::use_default,boost::use_default>>(a1, (uint64_t)v7, (uint64_t)v6);
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2(v6);
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2(v7);
  return a1;
}

void sub_1A8ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
}

BOOL std::vector<std::string>::__init_with_sentinel[abi:ne180100]<boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char *>>,boost::algorithm::split_iterator<std::__wrap_iter<char *>>,boost::use_default,boost::use_default>,boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char *>>,boost::algorithm::split_iterator<std::__wrap_iter<char *>>,boost::use_default,boost::use_default>>(std::vector<std::string> *a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type v22 = a1;
  char v23 = 0;
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  while (1)
  {
    BOOL result = boost::algorithm::split_iterator<std::__wrap_iter<char *>>::equal(a2, a3);
    if (result) {
      break;
    }
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, *(char **)(a2 + 32), *(char **)(a2 + 40), *(void *)(a2 + 40) - *(void *)(a2 + 32));
    std::vector<std::string>::pointer end = a1->__end_;
    value = a1->__end_cap_.__value_;
    if (end >= value)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a1->__begin_) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a1->__begin_) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      __v.__end_cap_.__value_ = p_end_cap;
      if (v14) {
        std::locale v15 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Vector<float>>>((uint64_t)p_end_cap, v14);
      }
      else {
        std::locale v15 = 0;
      }
      std::locale v16 = v15 + v11;
      __v.__first_ = v15;
      __v.__begin_ = v16;
      __v.__end_cap_.__value_ = &v15[v14];
      long long v17 = *(_OWORD *)__p;
      v16->__r_.__value_.__r.__words[2] = v21;
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      __p[1] = 0;
      std::string::size_type v21 = 0;
      __p[0] = 0;
      __v.__end_ = v16 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
      std::locale v18 = a1->__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      int v19 = SHIBYTE(v21);
      a1->__end_ = v18;
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v10 = *(_OWORD *)__p;
      end->__r_.__value_.__r.__words[2] = v21;
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
      a1->__end_ = end + 1;
    }
    boost::algorithm::split_iterator<std::__wrap_iter<char *>>::increment(a2);
  }
  return result;
}

void sub_1A9078(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, char a7, uint64_t a8, std::__split_buffer<std::string> *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, void **a15)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(__p);
}

BOOL boost::algorithm::split_iterator<std::__wrap_iter<char *>>::equal(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    BOOL v4 = *(unsigned char *)(a1 + 64) != 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!*(void *)a2)
  {
    BOOL v5 = 1;
    return v4 ^ v5 ^ 1;
  }
  BOOL v5 = *(unsigned char *)(a2 + 64) != 0;
  if (*(unsigned char *)(a2 + 64)) {
    int v6 = 1;
  }
  else {
    int v6 = v4;
  }
  if (v6 == 1) {
    return v4 ^ v5 ^ 1;
  }
  unint64_t v7 = *(const void **)(a1 + 32);
  int v8 = *(const void **)(a2 + 32);
  size_t v9 = *(void *)(a1 + 40) - (void)v7;
  return v9 == *(void *)(a2 + 40) - (void)v8
      && !memcmp(v7, v8, v9)
      && *(void *)(a1 + 48) == *(void *)(a2 + 48)
      && *(void *)(a1 + 56) == *(void *)(a2 + 56);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  long long v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  int8x8_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint8x8_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint8x8_t v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::vector<std::string>::pointer end = this->__end_;
  uint8x8_t v7 = (char *)__from_s + (char *)end - (char *)__to;
  std::vector<std::string>::pointer v8 = end;
  if (v7 < (char *)__from_e)
  {
    unint64_t v9 = (unint64_t)v7;
    std::vector<std::string>::pointer v8 = this->__end_;
    do
    {
      long long v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)unint64_t v9 = 0;
      v9 += 24;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v11, (uint64_t)__from_s, (uint64_t)v7, (uint64_t)end);
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::vector<int>::pointer begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__p, (long long *)this->__end_, (uint64_t)__v->__end_);
  unint64_t v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  std::vector<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0) {
        operator delete(*(void **)v7);
      }
      long long v8 = *(_OWORD *)(v6 - 24);
      *(void *)(v7 + 16) = *(void *)(v6 - 8);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v6 - 1) = 0;
      *(unsigned char *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      v4 += 24;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      a2 = (long long *)((char *)a2 + 24);
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = (long long *)a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    char v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = v8 + 2;
        v12[1] = v8 + 5;
        std::pair<std::string &,std::vector<SiriTTS::ForcedAlignment::Phoneme> &>::operator=[abi:ne180100]<std::string const,std::vector<SiriTTS::ForcedAlignment::Phoneme>,(void *)0>((uint64_t)v12, (uint64_t)(v4 + 1));
        uint64_t v10 = (void *)*v8;
        std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__node_insert_multi(a1, v8);
        uint64_t v4 = *(long long **)v4;
        if (v10) {
          BOOL v11 = v4 == (long long *)a3;
        }
        else {
          BOOL v11 = 1;
        }
        char v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != (long long *)a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__emplace_multi<std::pair<std::string const,std::vector<SiriTTS::ForcedAlignment::Phoneme>> const&>(a1, v4 + 1);
    uint64_t v4 = *(long long **)v4;
  }
}

void sub_1A9680(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1A969C(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__node_insert_multi(void *a1, void *a2)
{
  uint64_t v4 = (unsigned __int8 *)(a2 + 2);
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

uint64_t std::pair<std::string &,std::vector<SiriTTS::ForcedAlignment::Phoneme> &>::operator=[abi:ne180100]<std::string const,std::vector<SiriTTS::ForcedAlignment::Phoneme>,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2 + 24) {
    std::vector<SiriTTS::ForcedAlignment::Phoneme>::__assign_with_size[abi:ne180100]<SiriTTS::ForcedAlignment::Phoneme*,SiriTTS::ForcedAlignment::Phoneme*>(v4, *(long long ***)(a2 + 24), *(long long ***)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = a1 + 32;
  float v7 = *(float *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    BOOL v10 = 1;
    if (v8 >= 3) {
      BOOL v10 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v11 = v10 | (2 * v8);
    unint64_t v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__rehash<false>(a1, v13);
    unint64_t v8 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = a2;
    if (v8 <= a2) {
      unint64_t v16 = a2 % v8;
    }
  }
  else
  {
    unint64_t v16 = (v8 - 1) & a2;
  }
  long long v17 = *(unsigned __int8 **)(*(void *)a1 + 8 * v16);
  if (v17)
  {
    std::locale v18 = *(unsigned __int8 **)v17;
    if (*(void *)v17)
    {
      int v19 = 0;
      do
      {
        unint64_t v20 = *((void *)v18 + 1);
        if (v15 > 1)
        {
          unint64_t v21 = *((void *)v18 + 1);
          if (v20 >= v8) {
            unint64_t v21 = v20 % v8;
          }
        }
        else
        {
          unint64_t v21 = v20 & (v8 - 1);
        }
        if (v21 != v16) {
          break;
        }
        int v22 = v20 == a2 ? std::equal_to<std::string>::operator()[abi:ne180100](v6, v18 + 16, a3) : 0;
        if (v19 & (v22 ^ 1)) {
          break;
        }
        v19 |= v22;
        long long v17 = *(unsigned __int8 **)v17;
        std::locale v18 = *(unsigned __int8 **)v17;
      }
      while (*(void *)v17);
    }
  }
  return v17;
}

void *std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v12 = *v7;
      if (*v7)
      {
        unint64_t v18 = v9.u32[0];
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            uint64_t v7 = (unsigned __int8 **)v12;
          }
          else if (*(void *)(*(void *)a1 + 8 * v13))
          {
            uint8x8_t v14 = *(unsigned __int8 **)v12;
            if (*(void *)v12)
            {
              unint64_t v15 = v12;
              while (1)
              {
                int v16 = std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, v12 + 16, v14 + 16);
                long long v17 = *(unsigned __int8 **)v15;
                if (!v16) {
                  break;
                }
                uint8x8_t v14 = *(unsigned __int8 **)v17;
                unint64_t v15 = *(unsigned __int8 **)v15;
                if (!*(void *)v17) {
                  goto LABEL_32;
                }
              }
              uint8x8_t v14 = *(unsigned __int8 **)v15;
              long long v17 = v15;
LABEL_32:
              unint64_t v10 = v18;
            }
            else
            {
              long long v17 = v12;
            }
            *uint64_t v7 = v14;
            *(void *)long long v17 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            uint64_t v7 = (unsigned __int8 **)v12;
            unint64_t v8 = v13;
          }
          unint64_t v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__emplace_multi<std::pair<std::string const,std::vector<SiriTTS::ForcedAlignment::Phoneme>> const&>(void *a1, long long *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__construct_node<std::pair<std::string const,std::vector<SiriTTS::ForcedAlignment::Phoneme>> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1A9CE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>>>::__construct_node<std::pair<std::string const,std::vector<SiriTTS::ForcedAlignment::Phoneme>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  std::pair<std::string const,std::vector<SiriTTS::ForcedAlignment::Phoneme>>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((void *)v7 + 1) = result;
  return result;
}

void sub_1A9D74(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<SiriTTS::ForcedAlignment::Phoneme>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<SiriTTS::ForcedAlignment::Phoneme>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<SiriTTS::ForcedAlignment::Phoneme>::__init_with_size[abi:ne180100]<SiriTTS::ForcedAlignment::Phoneme*,SiriTTS::ForcedAlignment::Phoneme*>(this + 1, *((long long ***)a2 + 3), *((long long ***)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  return this;
}

void sub_1A9E04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<SiriTTS::ForcedAlignment::Phoneme>::__init_with_size[abi:ne180100]<SiriTTS::ForcedAlignment::Phoneme*,SiriTTS::ForcedAlignment::Phoneme*>(std::string *result, long long **a2, long long **a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](result, a4);
    unint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SiriTTS::ForcedAlignment::Phoneme>,SiriTTS::ForcedAlignment::Phoneme*,SiriTTS::ForcedAlignment::Phoneme*,SiriTTS::ForcedAlignment::Phoneme*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1A9E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<SiriTTS::ForcedAlignment::Phoneme>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void boost::algorithm::trim_right_if<std::string,boost::algorithm::detail::is_classifiedF>(std::string *a1, const std::locale *a2)
{
  int v3 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v3 >= 0) {
    long long v4 = (char *)a1;
  }
  else {
    long long v4 = (char *)a1->__r_.__value_.__r.__words[0];
  }
  if (v3 >= 0) {
    std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  uint64_t v6 = &v4[size];
  int locale = (int)a2->__locale_;
  std::locale::locale(&v14, a2 + 1);
  int v15 = locale;
  std::locale::locale(&v16, &v14);
  while (size)
  {
    std::string::size_type v7 = size;
    uint64_t v8 = v4[size - 1];
    uint64_t v9 = std::locale::use_facet(&v16, &std::ctype<char>::id);
    if ((v8 & 0x80) != 0)
    {
      long long v4 = v6;
      break;
    }
    --v6;
    int v10 = *((_DWORD *)&v9[1].~facet + v8);
    std::string::size_type size = v7 - 1;
    if ((v10 & v15) == 0)
    {
      v4 += v7;
      break;
    }
  }
  std::locale::~locale(&v16);
  std::string::size_type v11 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v11 & 0x80u) == 0) {
    unint64_t v12 = (char *)a1;
  }
  else {
    unint64_t v12 = (char *)a1->__r_.__value_.__r.__words[0];
  }
  if ((v11 & 0x80u) != 0) {
    std::string::size_type v11 = a1->__r_.__value_.__l.__size_;
  }
  std::string::erase(a1, v4 - v12, &v12[v11] - v4);
  std::locale::~locale(&v14);
}

void sub_1A9FC4(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,int>>,std::reverse_iterator<std::pair<std::string,int>*>,std::reverse_iterator<std::pair<std::string,int>*>,std::reverse_iterator<std::pair<std::string,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,int>>,std::reverse_iterator<std::pair<std::string,int>*>,std::reverse_iterator<std::pair<std::string,int>*>,std::reverse_iterator<std::pair<std::string,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,int>>,std::reverse_iterator<std::pair<std::string,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,int>>,std::reverse_iterator<std::pair<std::string,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,int>>,std::reverse_iterator<std::pair<std::string,int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,int>>,std::reverse_iterator<std::pair<std::string,int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<std::pair<std::string,int>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::string,int>>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void OUTLINED_FUNCTION_0_3()
{
  operator delete[]();
}

uint64_t boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result) {
    OUTLINED_FUNCTION_0_3();
  }
  return result;
}

void SpeechEnergy::SpeechEnergy(SpeechEnergy *this)
{
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 72) = xmmword_212880;
  *((_DWORD *)this + 30) = 500;
  *((_DWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 88) = xmmword_212890;
  *(_OWORD *)((char *)this + 104) = xmmword_2128A0;
}

void SpeechEnergy::estimate_speech_energy(uint64_t a1@<X0>, uint64_t a2@<X1>, DSP *a3@<X2>, void *a4@<X8>)
{
  clock();
  *(_DWORD *)a1 = a3;
  *(_DWORD *)(a1 + 92) = a3;
  if (*(_DWORD *)(a1 + 104) && *(_DWORD *)(a1 + 88) != a3)
  {
    std::string::size_type v78 = 0;
    uint64_t v79 = 0;
    uint64_t v77 = 0;
    std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v77, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
    DSP::resample((uint64_t)&v77, *(_DWORD *)a1, *(_DWORD *)(a1 + 88), (uint64_t)&v80);
    uint64_t v7 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v7;
      operator delete(v7);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
    }
    *(_OWORD *)a2 = v80;
    *(void *)(a2 + 16) = v81;
    uint64_t v81 = 0;
    long long v80 = 0uLL;
    if (v77)
    {
      std::string::size_type v78 = v77;
      operator delete(v77);
    }
    a3 = (DSP *)*(unsigned int *)(a1 + 88);
    *(_DWORD *)a1 = a3;
  }
  DSP::get_highpass_70hz_coefficients(a3);
  std::string v73 = 0;
  uint64_t v74 = 0;
  std::string v72 = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v72, (const void *)v80, *((uint64_t *)&v80 + 1), (uint64_t)(*((void *)&v80 + 1) - v80) >> 3);
  std::string __p = 0;
  unint64_t v70 = 0;
  uint64_t v71 = 0;
  std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  DSP::high_pass_filter((unint64_t *)&v72, (char **)&__p, (char **)&v75);
  uint64_t v8 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v8;
    operator delete(v8);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = v75;
  *(void *)(a2 + 16) = v76;
  uint64_t v76 = 0;
  long long v75 = 0uLL;
  if (__p)
  {
    unint64_t v70 = __p;
    operator delete(__p);
  }
  if (v72)
  {
    std::string v73 = v72;
    operator delete(v72);
  }
  double v9 = (double)*(int *)a1;
  uint64_t v10 = *(char **)a2;
  unint64_t v11 = (int)llround(*(double *)(a1 + 72) / 1000.0 * v9);
  if (v11 > (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1)
  {
    int v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Error: Signal is not long enough to be processed.", 49);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v56);
    exit(1);
  }
  double v12 = *(double *)(a1 + 80);
  unint64_t v13 = (int)llround((double)(int)v11 * 0.5);
  LOWORD(v75) = 0;
  std::vector<short>::insert(a2, v10, v13, (char *)&v75);
  long long v14 = *(char **)(a2 + 8);
  LOWORD(v75) = 0;
  std::vector<short>::insert(a2, v14, v13, (char *)&v75);
  unint64_t v15 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1;
  signed int v60 = llround(v12 / 1000.0 * v9);
  std::locale v16 = (void **)(a1 + 48);
  unint64_t v17 = (int)(v15 / v60 - (int)v11 / v60 + 1);
  std::vector<double>::resize(a1 + 48, v17);
  std::vector<double>::resize(a1 + 24, v17);
  std::vector<double>::vector(&v75, v11);
  int v58 = v15 / v60 - (int)v11 / v60 + 1;
  std::string::size_type v59 = (void *)a2;
  DSP::window_blackman((DSP *)v11, v68);
  if (v15 > v11)
  {
    int v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 2 * v11;
    do
    {
      if (*(_DWORD *)(a1 + 96) == 1 && *(_DWORD *)(a1 + 100) == 1 && *(_DWORD *)(a1 + 116) < v58)
      {
        int v21 = *(_DWORD *)(a1 + 120);
        int v22 = *(_DWORD *)(a1 + 112);
        std::string::basic_string[abi:ne180100]<0>(v66, "Progress: ");
        utils::update_progress_bar(v19, v58, v21, v22, (uint64_t)v66);
        if (v67 < 0) {
          operator delete(v66[0]);
        }
      }
      *(double *)(*(void *)(a1 + 24) + 8 * v19) = (double)v18 / (double)*(int *)a1;
      char v23 = (const double *)v75;
      if (v11)
      {
        uint64_t v24 = v20 - 2 * v18;
        int v25 = (__int16 *)(*v59 + 2 * v18);
        int v26 = (double *)v75;
        do
        {
          int v27 = *v25++;
          *v26++ = (double)v27;
          v24 -= 2;
        }
        while (v24);
        if ((int)v11 >= 1)
        {
          unint64_t v28 = (double *)v68[0];
          uint64_t v29 = v11;
          unint64_t v30 = (double *)v23;
          do
          {
            double v31 = *v28++;
            *unint64_t v30 = *v30 * v31;
            ++v30;
            --v29;
          }
          while (v29);
        }
      }
      double v32 = cblas_ddot(v11, v23, 1, v23, 1);
      *((long double *)*v16 + v19++) = log(sqrt(v32 / (double)(int)v11) + 1.0e-10);
      v18 += v60;
      v20 += 2 * v60;
    }
    while (v15 > v11 + v19 * v60);
  }
  unint64_t v33 = *(double **)(a1 + 32);
  uint64_t v34 = *(char **)(a1 + 56);
  if (*(v33 - 1) == 0.0)
  {
    std::string::size_type v35 = (double **)(a1 + 24);
    do
    {
      v34 -= 8;
      double v36 = *(v33 - 2);
      --v33;
    }
    while (v36 == 0.0);
    *(void *)(a1 + 32) = v33;
    *(void *)(a1 + 56) = v34;
  }
  else
  {
    std::string::size_type v35 = (double **)(a1 + 24);
  }
  long long v37 = (char *)*v16;
  uint64_t v38 = *v35;
  uint64_t v39 = v34 - (unsigned char *)*v16;
  uint64_t v40 = (char *)v33 - (char *)v38;
  if (v39 > (unint64_t)((char *)v33 - (char *)v38))
  {
    do
    {
      v34 -= 8;
      v39 -= 8;
    }
    while (v39 > (unint64_t)v40);
    *(void *)(a1 + 56) = v34;
  }
  unint64_t v41 = v39 >> 3;
  if (v39 >> 3 < (unint64_t)(v40 >> 3))
  {
    uint64_t v42 = (void *)(a1 + 64);
    do
    {
      if ((unint64_t)v34 >= *v42)
      {
        unint64_t v43 = v41 + 1;
        if ((v41 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v44 = *v42 - (void)v37;
        if (v44 >> 2 > v43) {
          unint64_t v43 = v44 >> 2;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v43;
        }
        if (v45)
        {
          unint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 64, v45);
          long long v37 = *(char **)(a1 + 48);
          std::string v47 = *(char **)(a1 + 56);
        }
        else
        {
          unint64_t v46 = 0;
          std::string v47 = v34;
        }
        long long v48 = &v46[8 * v41];
        *(void *)long long v48 = *((void *)v34 - 1);
        uint64_t v34 = v48 + 8;
        while (v47 != v37)
        {
          uint64_t v49 = *((void *)v47 - 1);
          v47 -= 8;
          *((void *)v48 - 1) = v49;
          v48 -= 8;
        }
        *(void *)(a1 + 48) = v48;
        *(void *)(a1 + 56) = v34;
        *(void *)(a1 + 64) = &v46[8 * v45];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *(void *)uint64_t v34 = *((void *)v34 - 1);
        v34 += 8;
      }
      *(void *)(a1 + 56) = v34;
      long long v37 = *(char **)(a1 + 48);
      unint64_t v41 = (v34 - v37) >> 3;
      uint64_t v38 = *(double **)(a1 + 24);
      unint64_t v33 = *(double **)(a1 + 32);
    }
    while (v41 < v33 - v38);
  }
  if (*(int *)(a1 + 108) >= 3)
  {
    DSP::smooth(a1 + 48, *(_DWORD *)(a1 + 108), (char **)v64);
    uint64_t v50 = *v16;
    if (*v16)
    {
      *(void *)(a1 + 56) = v50;
      operator delete(v50);
      *std::locale v16 = 0;
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 0;
    }
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v64;
    *(void *)(a1 + 64) = v65;
    uint64_t v38 = *(double **)(a1 + 24);
    unint64_t v33 = *(double **)(a1 + 32);
  }
  v64[0] = 0;
  v64[1] = 0;
  uint64_t v65 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((char *)v64, v38, v33, v33 - v38);
  unint64_t v51 = *(double **)(a1 + 48);
  uint64_t v52 = *(double **)(a1 + 56);
  std::locale v62 = 0;
  uint64_t v63 = 0;
  long long v61 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((char *)&v61, v51, v52, v52 - v51);
  if (*(_DWORD *)(a1 + 96))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Elapsed time: ", 14);
    clock();
    unint64_t v53 = (void *)std::ostream::operator<<();
    uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" s", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
    uint64_t v55 = std::locale::use_facet(&v82, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
    std::locale::~locale(&v82);
    std::ostream::put();
    std::ostream::flush();
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_6vectorIfNS_9allocatorIfEEEES6_EEC2B8ne180100IJLm0ELm1EEJS6_S6_EJEJEJRS6_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(a4, (uint64_t)v64, (uint64_t)&v61);
  if (v61)
  {
    std::locale v62 = v61;
    operator delete(v61);
  }
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  if (v68[0])
  {
    v68[1] = v68[0];
    operator delete(v68[0]);
  }
  if ((void)v75)
  {
    *((void *)&v75 + 1) = v75;
    operator delete((void *)v75);
  }
  if ((void)v80)
  {
    *((void *)&v80 + 1) = v80;
    operator delete((void *)v80);
  }
}

void sub_1AA9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v40 = *(void **)(v38 - 184);
  if (v40)
  {
    *(void *)(v38 - 176) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_6vectorIfNS_9allocatorIfEEEES6_EEC2B8ne180100IJLm0ELm1EEJS6_S6_EJEJEJRS6_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 3, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  return a1;
}

void sub_1AAB08(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void SRH::SRH(SRH *this)
{
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 8) = xmmword_2128B0;
  *((int64x2_t *)this + 9) = vdupq_n_s64(0x4059000000000000uLL);
  *((_OWORD *)this + 10) = xmmword_2128C0;
  *((_OWORD *)this + 11) = xmmword_212640;
  *((_OWORD *)this + 13) = xmmword_2128D0;
  *((_OWORD *)this + 14) = xmmword_2128E0;
  *((void *)this + 31) = 16000;
  *((_OWORD *)this + 12) = xmmword_2128F0;
  *((void *)this + 30) = 0x3FE4CCCCCCCCCCCDLL;
  *((_DWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 260) = xmmword_212910;
  *(_OWORD *)((char *)this + 276) = xmmword_212900;
  *((void *)this + 3) = 0;
}

void SRH::estimate_pitch(unsigned int *a1@<X0>, uint64_t a2@<X1>, DSP *a3@<X2>, void *a4@<X8>)
{
  clock();
  *a1 = a3;
  a1[63] = a3;
  long long v388 = 0uLL;
  uint64_t v389 = 0;
  if (a1[6] && a1[62] != a3)
  {
    uint64_t v384 = 0;
    uint64_t v385 = 0;
    unsigned int v383 = 0;
    std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v383, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
    DSP::resample((uint64_t)&v383, *a1, a1[62], (uint64_t)&v386);
    if ((void)v388)
    {
      *((void *)&v388 + 1) = v388;
      operator delete((void *)v388);
    }
    long long v388 = v386;
    uint64_t v389 = v387;
    uint64_t v387 = 0;
    long long v386 = 0uLL;
    if (v383)
    {
      uint64_t v384 = v383;
      operator delete(v383);
    }
    a3 = (DSP *)a1[62];
    *a1 = a3;
  }
  else if (&v388 != (long long *)a2)
  {
    std::vector<short>::__assign_with_size[abi:ne180100]<short *,short *>((char *)&v388, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
    a3 = (DSP *)*a1;
  }
  long long v386 = 0uLL;
  uint64_t v387 = 0;
  DSP::get_highpass_70hz_coefficients(a3);
  if (v381 == v382)
  {
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Warning: High-pass filtering not performed due to unsupported sampling frequency!", 81);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
    double v9 = std::locale::use_facet((const std::locale *)&v379, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale((std::locale *)&v379);
    std::ostream::put();
    std::ostream::flush();
    std::vector<short>::__assign_with_size[abi:ne180100]<short *,short *>((char *)&v386, (char *)v388, *((uint64_t *)&v388 + 1), (uint64_t)(*((void *)&v388 + 1) - v388) >> 1);
  }
  else
  {
    uint64_t v378 = 0;
    v376 = 0;
    v377 = 0;
    std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v376, v381, (uint64_t)v382, (v382 - (unsigned char *)v381) >> 3);
    v374 = 0;
    std::string __p = 0;
    uint64_t v375 = 0;
    std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&__p, (const void *)v388, *((uint64_t *)&v388 + 1), (uint64_t)(*((void *)&v388 + 1) - v388) >> 1);
    DSP::high_pass_filter((unint64_t *)&v376, (char **)&__p, (char **)&v379);
    if ((void)v386)
    {
      *((void *)&v386 + 1) = v386;
      operator delete((void *)v386);
    }
    long long v386 = v379;
    uint64_t v387 = v380;
    uint64_t v380 = 0;
    long long v379 = 0uLL;
    if (__p)
    {
      v374 = __p;
      operator delete(__p);
    }
    if (v376)
    {
      v377 = v376;
      operator delete(v376);
    }
  }
  double v10 = (double)(int)*a1;
  double v12 = *((double *)a1 + 19);
  double v11 = *((double *)a1 + 20);
  double v13 = *((double *)a1 + 21);
  int v14 = a1[72];
  double v15 = *((double *)a1 + 22) / v10 * (double)v14;
  double v16 = *((double *)a1 + 23);
  unint64_t v17 = (char *)v386;
  unint64_t v18 = (uint64_t)(*((void *)&v386 + 1) - v386) >> 1;
  if (*((void *)&v386 + 1) != (void)v386)
  {
    if (v18 <= 1) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = (uint64_t)(*((void *)&v386 + 1) - v386) >> 1;
    }
    double v20 = 0.0;
    int v21 = (__int16 *)v386;
    uint64_t v22 = v19;
    do
    {
      int v24 = *v21++;
      int v23 = v24;
      if (v24 < 0) {
        int v23 = -v23;
      }
      if (v20 < (double)(unsigned __int16)v23) {
        double v20 = (double)(unsigned __int16)v23;
      }
      --v22;
    }
    while (v22);
    double v25 = 32767.0 / v20 * *((double *)a1 + 30);
    int v26 = (__int16 *)v386;
    do
    {
      *int v26 = (int)(v25 * (double)*v26);
      ++v26;
      --v19;
    }
    while (v19);
  }
  signed int v327 = llround(v15);
  double v27 = v10;
  if (a1[6])
  {
    int v28 = a1[63];
    double v27 = (double)v28;
    if (v28 >= (int)a1[62]) {
      double v27 = v10;
    }
  }
  float v29 = v27 / 1000.0;
  *((double *)a1 + 17) = *((double *)a1 + 17) / (powf(v29, 0.71429) * 0.0625);
  *((double *)a1 + 18) = *((double *)a1 + 18) / (powf(v29, 0.2) * 0.46);
  unsigned int v30 = a1[65];
  if (v14 >= 0) {
    int v31 = v14;
  }
  else {
    int v31 = v14 + 1;
  }
  double v331 = a1;
  if ((int)(v30 * v327) > v31 >> 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Error: f0min is too high in order to evaluate f0 up to ", 55);
    uint64_t v301 = (void *)std::ostream::operator<<();
    int v302 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v301, (uint64_t)" harmonics.", 11);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v302);
    int v303 = "       Please lower f0min and try again.";
    goto LABEL_332;
  }
  signed int v318 = llround(v16 / v10 * (double)v14);
  int v316 = v30 * v318;
  if ((int)(v30 * v318) > v31 >> 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Error: f0max is too high in order to evaluate f0 up to ", 55);
    uint64_t v304 = (void *)std::ostream::operator<<();
    int v305 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v304, (uint64_t)" harmonics.", 11);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v305);
    int v303 = "       Please lower f0max and try again.";
LABEL_332:
    double v306 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)v303, 40);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v306);
    exit(1);
  }
  LODWORD(a1) = llround(v12 / 1000.0 * v10);
  if (v18 < (int)a1)
  {
    unsigned int v307 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Error: Signal is not long enough to be processed.", 49);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v307);
    exit(1);
  }
  int v32 = (int)(v10 * 0.75 / 1000.0);
  if ((v32 & 0x80000001) == 1) {
    ++v32;
  }
  v331[64] = v32;
  double v33 = (double)(int)a1 * 0.5;
  unint64_t v34 = (int)llround(v33);
  LOWORD(v379) = 0;
  std::vector<short>::insert((uint64_t)&v386, v17, v34, (char *)&v379);
  LOWORD(v379) = 0;
  std::vector<short>::insert((uint64_t)&v386, *((char **)&v386 + 1), v34, (char *)&v379);
  signed int v35 = llround(v13 / 1000.0 * v10);
  unint64_t v324 = (uint64_t)(*((void *)&v386 + 1) - v386) >> 1;
  uint64_t v322 = v35;
  signed int v320 = v35;
  unsigned int v310 = v324 / v35 - (int)a1 / v35;
  signed int v36 = v310 + 1;
  uint64_t v325 = (int)v331[64];
  long long v379 = 0uLL;
  uint64_t v380 = 0;
  if ((int)v331[68] <= (int)(v310 + 1))
  {
    unint64_t v37 = v36;
  }
  else
  {
    std::vector<double>::vector(&v369, v316 + 1);
    unint64_t v37 = v36;
    std::vector<std::vector<double>>::vector(&v371, v36, (uint64_t)&v369);
    if (v369)
    {
      v370 = v369;
      operator delete(v369);
    }
    std::vector<std::vector<double>>::__assign_with_size[abi:ne180100]<std::vector<double>*,std::vector<double>*>((uint64_t)&v379, (uint64_t)v371, *(uint64_t *)v372, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v372 - (void)v371) >> 3));
    v369 = &v371;
    std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v369);
  }
  uint64_t v38 = v331 + 14;
  std::vector<double>::resize((uint64_t)(v331 + 14), v37);
  std::vector<double>::resize((uint64_t)(v331 + 20), v37);
  std::vector<double>::resize((uint64_t)(v331 + 26), v37);
  std::vector<double>::resize((uint64_t)(v331 + 8), v37);
  std::vector<double>::vector(&v371, v37);
  v368[0] = 0;
  std::vector<double>::vector(&v369, v37, v368);
  double v309 = a4;
  __Y[0] = 0;
  std::vector<double>::vector(v368, v37, __Y);
  uint64_t v39 = (int)a1;
  std::vector<double>::vector(__Y, (int)a1);
  int __N = llround(v11 / 1000.0 * v10);
  std::vector<double>::vector(__X, __N);
  std::vector<double>::vector(v365, (int)a1);
  std::vector<double>::vector(&v363, (int)v325 + (int)a1);
  std::vector<double>::vector(&v361, (int)v325 + (int)a1);
  uint64_t v358 = (double *)0x3FF0000000000000;
  std::vector<double>::vector(v360, 1uLL, &v358);
  std::vector<double>::vector(&v358, (int)v331[72] / 2 + 1);
  int v312 = v325 + a1;
  std::vector<double>::vector(&v356, v318 - v327 + 1);
  uint64_t v40 = (float *)malloc_type_calloc((2 * (int)v331[72]) | 1, 4uLL, 0x100004052888210uLL);
  uint64_t v326 = v310 + 1;
  DSP::window_blackman((DSP *)a1, v355);
  if (v331[66])
  {
    unint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Start frame-wise processing", 27);
    std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
    uint64_t v42 = std::locale::use_facet((const std::locale *)&v351, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
    std::locale::~locale((std::locale *)&v351);
    std::ostream::put();
    std::ostream::flush();
  }
  if (v324 > (int)a1)
  {
    int v43 = 0;
    uint64_t v44 = 0;
    v329 = 0;
    double v45 = (double)__N;
    uint64_t v46 = 2 * (int)a1;
    uint64_t v313 = 8 * v325;
    double v47 = round(v33 + (double)__N * -0.5);
    int v48 = -(int)v325;
    uint64_t v49 = v331;
    while (1)
    {
      if (v49[66] == 1 && v49[67] == 1 && (int)v49[70] < (int)v326)
      {
        int v50 = v49[71];
        int v51 = v49[69];
        std::string::basic_string[abi:ne180100]<0>(v353, "Progress: ");
        utils::update_progress_bar(v44, v326, v50, v51, (uint64_t)v353);
        uint64_t v49 = v331;
        if (v354 < 0) {
          operator delete(v353[0]);
        }
      }
      *(double *)(*((void *)v49 + 4) + 8 * v44) = (float)((float)v43 / (float)(int)*v49);
      uint64_t v52 = v386;
      unint64_t v53 = __Y[0];
      if (a1)
      {
        uint64_t v54 = v46 - 2 * v43;
        uint64_t v55 = __Y[0];
        int v56 = (__int16 *)(v386 + 2 * v43);
        do
        {
          int v57 = *v56++;
          *v55++ = (double)v57;
          v54 -= 2;
        }
        while (v54);
      }
      double v58 = v47 + (double)v43;
      unint64_t v59 = (unint64_t)v58;
      double v60 = v58 + v45;
      if (v59 != (unint64_t)v60)
      {
        long long v61 = __X[0];
        std::locale v62 = (__int16 *)(v52 + 2 * v59);
        unint64_t v63 = 2 * (unint64_t)v60 - 2 * v59;
        do
        {
          int v64 = *v62++;
          *v61++ = (double)v64;
          v63 -= 2;
        }
        while (v63);
      }
      double v65 = cblas_ddot((const int)a1, v53, 1, v53, 1);
      double v66 = cblas_ddot(__N, __X[0], 1, __X[0], 1);
      double v67 = sqrt(v66 / v45);
      *((double *)v371 + v44) = v67;
      double v68 = DSP::gradient_index((uint64_t *)__X);
      uint64_t v69 = (double *)v368[0];
      *((double *)v368[0] + v44) = v68 * 0.5 / v67;
      if (v66 == 0.0) {
        v69[v44] = *((double *)v331 + 18) + *((double *)v331 + 18);
      }
      int v70 = DSP::zero_crossing_rate_plus_zero((uint64_t)__X);
      *((double *)v369 + v44) = (double)v70 / v45;
      if (v43 - (int)v325 < 1)
      {
        long long v75 = (char *)v363;
        if (v364 - (unsigned char *)v363 >= 1) {
          bzero(v363, 8 * (((unint64_t)(v364 - (unsigned char *)v363) >> 3) - ((unint64_t)(v364 - (unsigned char *)v363) > 7)) + 8);
        }
        if ((int)a1 < 1) {
          goto LABEL_76;
        }
        uint64_t v76 = __Y[0];
        uint64_t v77 = &v75[v313];
        std::string::size_type v78 = a1;
        do
        {
          uint64_t v79 = *(void *)v76++;
          *(void *)uint64_t v77 = v79;
          v77 += 8;
          std::string::size_type v78 = (unsigned int *)((char *)v78 - 1);
        }
        while (v78);
      }
      else if (v312 >= 1)
      {
        uint64_t v71 = v386;
        std::string v72 = (double *)v363;
        uint64_t v73 = v312;
        int v74 = v48;
        do
        {
          *v72++ = (double)*(__int16 *)(v71 + 2 * v74++);
          --v73;
        }
        while (v73);
      }
      if ((int)a1 >= 1)
      {
        long long v80 = __Y[0];
        uint64_t v81 = (double *)v355[0];
        std::locale v82 = a1;
        do
        {
          double v83 = *v81++;
          double *v80 = *v80 * v83;
          ++v80;
          std::locale v82 = (unsigned int *)((char *)v82 - 1);
        }
        while (v82);
      }
LABEL_76:
      DSP::LP((uint64_t)__Y, v331[64], &v351);
      if (v329) {
        operator delete(v329);
      }
      uint64_t v349 = 0;
      uint64_t v350 = 0;
      v348 = 0;
      v329 = (void *)v351;
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v348, (const void *)v351, *((uint64_t *)&v351 + 1), (uint64_t)(*((void *)&v351 + 1) - v351) >> 3);
      DSP::firfilter((uint64_t)&v348, (uint64_t *)&v363, &v351);
      if ((void)v361)
      {
        *((void *)&v361 + 1) = v361;
        operator delete((void *)v361);
      }
      long long v361 = v351;
      uint64_t v362 = v352;
      uint64_t v352 = 0;
      long long v351 = 0uLL;
      if (v348)
      {
        uint64_t v349 = v348;
        operator delete(v348);
      }
      if ((int)a1 >= 1)
      {
        uint64_t v84 = (double *)v365[0];
        int v85 = (double *)(v361 + v313);
        double v86 = 0.0;
        double v87 = a1;
        int8x16_t v88 = (double *)v365[0];
        do
        {
          double v89 = *v85++;
          *v88++ = v89;
          double v86 = v86 + v89 * v89;
          double v87 = (unsigned int *)((char *)v87 - 1);
        }
        while (v87);
        if (v86 != 0.0)
        {
          double v90 = sqrt(v65 / v86);
          uint64_t v91 = a1;
          double v92 = v84;
          do
          {
            *double v92 = v90 * *v92;
            ++v92;
            uint64_t v91 = (unsigned int *)((char *)v91 - 1);
          }
          while (v91);
        }
        double v93 = 0.0;
        uint64_t v94 = (double *)v355[0];
        int v95 = a1;
        uint64_t v96 = v84;
        do
        {
          double v97 = *v94++;
          double v98 = v97 * *v96;
          *v96++ = v98;
          double v93 = v93 + v98;
          int v95 = (unsigned int *)((char *)v95 - 1);
        }
        while (v95);
        int v99 = a1;
        double v100 = v93 / (float)(int)a1;
        do
        {
          *uint64_t v84 = *v84 - v100;
          ++v84;
          int v99 = (unsigned int *)((char *)v99 - 1);
        }
        while (v99);
      }
      uint64_t v101 = v331[72];
      if ((v101 & 0x80000000) == 0) {
        bzero(v40, (8 * v101) | 4);
      }
      if (*((double *)v371 + v44) > *((double *)v331 + 24) * *((double *)v331 + 16))
      {
        if ((int)a1 >= 1)
        {
          uint64_t v102 = (double *)v365[0];
          int v103 = a1;
          double v104 = v40 + 1;
          do
          {
            double v105 = *v102++;
            float v106 = v105;
            *double v104 = v106;
            v104 += 2;
            int v103 = (unsigned int *)((char *)v103 - 1);
          }
          while (v103);
        }
        DSP::fft((DSP *)v40, (int)v101, 1);
        uint64_t v101 = v331[72];
      }
      if ((v101 & 0x80000000) == 0)
      {
        unint64_t v107 = 0;
        uint64_t v108 = v358;
        double v109 = 0.0;
        do
        {
          double v110 = sqrtf((float)(v40[v107 / 4 + 2] * v40[v107 / 4 + 2]) + (float)(v40[v107 / 4 + 1] * v40[v107 / 4 + 1]));
          v108[v107 / 8] = v110;
          double v109 = v109 + v110 * v110;
          v107 += 8;
        }
        while (((4 * v101) & 0x3FFFFFFF8) + 8 != v107);
        if (v109 != 0.0) {
          cblas_dscal((unint64_t)((char *)v359 - (char *)v108) >> 3, 1.0 / sqrt(v109), v108, 1);
        }
      }
      if ((v316 & 0x80000000) == 0 && (int)v331[68] > (int)v326)
      {
        uint64_t v111 = v358;
        double v112 = *(void **)(v379 + 24 * v44);
        uint64_t v113 = (v316 + 1);
        do
        {
          uint64_t v114 = *(void *)v111++;
          *v112++ = v114;
          --v113;
        }
        while (v113);
      }
      BOOL v115 = (double *)v356;
      if (v318 >= v327)
      {
        int v116 = v358;
        int v117 = v331[65];
        uint64_t v118 = 8 * v327;
        uint64_t v119 = &v358[2 * v327];
        uint64_t v120 = v327;
        do
        {
          double v121 = v116[v120];
          v115[v120 - v327] = v121;
          if (v117 >= 2)
          {
            double v122 = v119;
            uint64_t v123 = 2;
            do
            {
              double v121 = v121 + *v122 - v116[(int)(((double)(int)v123 + -0.5) * (double)(int)v120)];
              v115[v120 - v327] = v121;
              ++v123;
              double v122 = (double *)((char *)v122 + v118);
            }
            while (v117 + 1 != v123);
          }
          ++v120;
          v119 += 2;
          v118 += 8;
        }
        while (v318 + 1 != v120);
      }
      if (v357 == v115)
      {
        int v125 = -1;
        double v126 = -INFINITY;
      }
      else
      {
        if ((unint64_t)(v357 - v115) <= 1) {
          uint64_t v124 = 1;
        }
        else {
          uint64_t v124 = v357 - v115;
        }
        int v125 = -1;
        double v126 = -INFINITY;
        signed int v127 = v327;
        do
        {
          double v128 = *v115++;
          double v129 = v128;
          if (v128 > v126)
          {
            double v126 = v129;
            int v125 = v127;
          }
          ++v127;
          --v124;
        }
        while (v124);
      }
      uint64_t v49 = v331;
      *(double *)(*((void *)v331 + 7) + 8 * v44) = (double)(int)*v331 / (double)(int)v331[72] * (double)v125;
      uint64_t v130 = (double *)*((void *)v331 + 10);
      v130[v44++] = v126;
      v43 += v320;
      v46 += 2 * v322;
      v48 += v320;
      if (v324 <= (int)a1 + v44 * v322)
      {
        unint64_t v131 = (std::locale::__imp *)v329;
        uint64_t v38 = v331 + 14;
        uint64_t v39 = (int)a1;
        double v33 = (double)(int)a1 * 0.5;
        goto LABEL_127;
      }
    }
  }
  unint64_t v131 = 0;
  LODWORD(v44) = 0;
  uint64_t v130 = (double *)*((void *)v331 + 10);
LABEL_127:
  unint64_t v132 = (double *)*((void *)v331 + 11);
  unint64_t v133 = v132 - v130;
  if (v132 == v130)
  {
    *((void *)v331 + 29) = 0xFFF0000000000000;
    double v182 = 0.0;
    char v183 = 1;
    uint64_t v184 = v130;
    double v185 = 0.0;
    uint64_t v186 = v310 + 1;
    uint64_t v140 = v331;
    int v187 = v309;
    goto LABEL_255;
  }
  uint64_t v134 = 0;
  if (v133 <= 1) {
    uint64_t v135 = 1;
  }
  else {
    uint64_t v135 = v132 - v130;
  }
  double v136 = -INFINITY;
  do
  {
    if (v130[v134] > v136) {
      double v136 = v130[v134];
    }
    ++v134;
  }
  while (v135 != v134);
  *((double *)v331 + 29) = v136;
  if (v136 > *((double *)v331 + 25))
  {
    if (v331[66])
    {
      uint64_t v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Re-estimate SRH and f0 again using refined f0 limits", 52);
      std::ios_base::getloc((const std::ios_base *)((char *)v137 + *(void *)(*v137 - 24)));
      unint64_t v138 = std::locale::use_facet((const std::locale *)&v351, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v138->__vftable[2].~facet_0)(v138, 10);
      std::locale::~locale((std::locale *)&v351);
      std::ostream::put();
      std::ostream::flush();
    }
    uint64_t v321 = v39;
    int64_t v139 = a1;
    long long v351 = 0uLL;
    uint64_t v352 = 0;
    uint64_t v140 = v331;
    int locale = v131;
    std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v351, *((const void **)v331 + 7), *((void *)v331 + 8), (uint64_t)(*((void *)v331 + 8) - *((void *)v331 + 7)) >> 3);
    uint64_t v143 = *((void *)v331 + 10);
    uint64_t v142 = *((void *)v331 + 11);
    if (v142 != v143)
    {
      unint64_t v144 = 0;
      int v145 = 0;
      do
      {
        double v141 = *(double *)(v143 + 8 * v144);
        if (v141 >= *((double *)v331 + 25))
        {
          ++v145;
        }
        else
        {
          uint64_t v146 = v351 + 8 * v145;
          uint64_t v147 = *((void *)&v351 + 1) - (v146 + 8);
          if (*((void *)&v351 + 1) != v146 + 8)
          {
            memmove((void *)(v351 + 8 * v145), (const void *)(v146 + 8), *((void *)&v351 + 1) - (v146 + 8));
            uint64_t v143 = *((void *)v331 + 10);
            uint64_t v142 = *((void *)v331 + 11);
          }
          *((void *)&v351 + 1) = v146 + v147;
        }
        ++v144;
      }
      while (v144 < (v142 - v143) >> 3);
    }
    uint64_t v148 = v351;
    unint64_t v149 = (unint64_t)((uint64_t)(*((void *)&v351 + 1) - v351) >> 3) >> 1;
    float v150 = (double *)(v351 + 8 * v149);
    if (v150 != *((double **)&v351 + 1))
    {
      std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>((double *)v351, v150, *((double **)&v351 + 1), v141);
      uint64_t v148 = v351;
      unint64_t v149 = (unint64_t)((uint64_t)(*((void *)&v351 + 1) - v351) >> 3) >> 1;
    }
    int v308 = v38;
    double v151 = *(double *)(v148 + 8 * v149);
    double v152 = *((double *)v331 + 22);
    if (v151 * 0.5 > v152)
    {
      *((double *)v331 + 22) = v151 * 0.5;
      double v152 = v151 * 0.5;
    }
    double v153 = v151 + v151;
    double v154 = *((double *)v331 + 23);
    if (v153 < v154)
    {
      *((double *)v331 + 23) = v153;
      double v154 = v153;
    }
    double v155 = (double)(int)*v331;
    double v156 = (double)(int)v331[72];
    signed int v157 = llround(v152 / v155 * v156);
    signed int v319 = llround(v154 / v155 * v156);
    int v158 = v319 + 1;
    std::vector<double>::vector(&v345, v319 + 1 - v157);
    if ((int)v331[68] > (int)v326)
    {
      if (v310 <= 0x7FFFFFFE)
      {
        uint64_t v159 = 0;
        uint64_t v160 = v379;
        uint64_t v161 = (double *)v345;
        uint64_t v162 = v346;
        unint64_t v163 = ((char *)v346 - (unsigned char *)v345) >> 3;
        double v164 = (double)(int)*v331 / (double)(int)v331[72];
        uint64_t v165 = *((void *)v331 + 7);
        uint64_t v166 = *((void *)v331 + 10);
        if (v163 <= 1) {
          unint64_t v163 = 1;
        }
        do
        {
          if (v157 <= v319)
          {
            uint64_t v167 = *(void *)(v160 + 24 * v159);
            int v168 = v331[65];
            v169 = (double *)(v167 + 16 * v157);
            uint64_t v170 = 8 * v157;
            uint64_t v171 = v157;
            do
            {
              double v172 = *(double *)(v167 + 8 * v171);
              v161[v171 - v157] = v172;
              if (v168 >= 2)
              {
                double v173 = v169;
                uint64_t v174 = 2;
                do
                {
                  double v172 = v172 + *v173 - *(double *)(v167 + 8 * (int)(((double)(int)v174 + -0.5) * (double)(int)v171));
                  v161[v171 - v157] = v172;
                  ++v174;
                  double v173 = (double *)((char *)v173 + v170);
                }
                while (v168 + 1 != v174);
              }
              ++v171;
              v169 += 2;
              v170 += 8;
            }
            while (v158 != v171);
          }
          int v175 = -1;
          double v176 = -INFINITY;
          if (v162 != v161)
          {
            unint64_t v177 = v163;
            signed int v178 = v157;
            signed int v179 = v161;
            do
            {
              double v180 = *v179++;
              double v181 = v180;
              if (v180 > v176)
              {
                double v176 = v181;
                int v175 = v178;
              }
              ++v178;
              --v177;
            }
            while (v177);
          }
          *(double *)(v165 + 8 * v159) = v164 * (double)v175;
          *(double *)(v166 + 8 * v159++) = v176;
        }
        while (v159 != v326);
      }
      goto LABEL_242;
    }
    int v188 = v44 * v320 + v139;
    if (v324 <= v188)
    {
LABEL_242:
      if (v345)
      {
        v346 = (double *)v345;
        operator delete(v345);
      }
      int v187 = v309;
      unint64_t v131 = locale;
      if ((void)v351)
      {
        *((void *)&v351 + 1) = v351;
        operator delete((void *)v351);
      }
      uint64_t v184 = (double *)*((void *)v331 + 10);
      uint64_t v130 = (double *)*((void *)v331 + 11);
      unint64_t v133 = v130 - v184;
      uint64_t v38 = v308;
      uint64_t v186 = v310 + 1;
      goto LABEL_247;
    }
    signed int v189 = v157;
    unint64_t v190 = v188;
    double v191 = (double)__N;
    double v192 = round(v33 + (double)__N * -0.5);
    uint64_t v193 = v189;
    uint64_t v44 = (int)v44;
    int v194 = v44 * v320;
    int v328 = v44 * v320 - v325;
    uint64_t v314 = 2 * v189;
    uint64_t v315 = 8 * v325;
    signed int v317 = v189;
    uint64_t v311 = 8 * v189;
    while (1)
    {
      if (v331[66] == 1 && v331[67] == 1 && (int)v331[70] < (int)v326)
      {
        int v195 = v331[71];
        int v196 = v331[69];
        std::string::basic_string[abi:ne180100]<0>(v343, "Progress: ");
        utils::update_progress_bar(v44, v326, v195, v196, (uint64_t)v343);
        if (v344 < 0) {
          operator delete(v343[0]);
        }
      }
      *(double *)(*((void *)v331 + 4) + 8 * v44) = (float)((float)v194 / (float)(int)*v331);
      uint64_t v197 = v386;
      uint64_t v198 = __Y[0];
      if (v139)
      {
        v199 = (__int16 *)(v386 + 2 * v194);
        uint64_t v200 = 2 * v190 - 2 * v194;
        v201 = __Y[0];
        do
        {
          int v202 = *v199++;
          *v201++ = (double)v202;
          v200 -= 2;
        }
        while (v200);
      }
      double v203 = v192 + (double)v194;
      unint64_t v204 = (unint64_t)v203;
      double v205 = v203 + v191;
      if (v204 != (unint64_t)v205)
      {
        int v206 = __X[0];
        double v207 = (__int16 *)(v197 + 2 * v204);
        unint64_t v208 = 2 * (unint64_t)v205 - 2 * v204;
        do
        {
          int v209 = *v207++;
          *v206++ = (double)v209;
          v208 -= 2;
        }
        while (v208);
      }
      double v210 = cblas_ddot((const int)v139, v198, 1, v198, 1);
      double v211 = cblas_ddot(__N, __X[0], 1, __X[0], 1);
      *((double *)v371 + v44) = sqrt(v211 / v191);
      if (v194 - (int)v325 < 1)
      {
        v216 = (char *)v363;
        if (v364 - (unsigned char *)v363 >= 1) {
          bzero(v363, 8 * (((unint64_t)(v364 - (unsigned char *)v363) >> 3) - ((unint64_t)(v364 - (unsigned char *)v363) > 7)) + 8);
        }
        if ((int)v139 < 1) {
          goto LABEL_197;
        }
        v217 = __Y[0];
        v218 = &v216[v315];
        uint64_t v219 = v139;
        do
        {
          uint64_t v220 = *(void *)v217++;
          *(void *)v218 = v220;
          v218 += 8;
          uint64_t v219 = (unsigned int *)((char *)v219 - 1);
        }
        while (v219);
      }
      else if (v312 >= 1)
      {
        uint64_t v212 = v386;
        uint64_t v213 = (double *)v363;
        uint64_t v214 = v312;
        int v215 = v328;
        do
        {
          *v213++ = (double)*(__int16 *)(v212 + 2 * v215++);
          --v214;
        }
        while (v214);
      }
      if ((int)v139 >= 1)
      {
        uint64_t v221 = __Y[0];
        unsigned int v222 = (double *)v355[0];
        int v223 = v139;
        do
        {
          double v224 = *v222++;
          *uint64_t v221 = *v221 * v224;
          ++v221;
          int v223 = (unsigned int *)((char *)v223 - 1);
        }
        while (v223);
      }
LABEL_197:
      DSP::LP((uint64_t)__Y, v331[64], v341);
      if (locale) {
        operator delete(locale);
      }
      uint64_t v339 = 0;
      uint64_t v340 = 0;
      uint64_t v338 = 0;
      int locale = v341[0].__locale_;
      std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v338, v341[0].__locale_, (uint64_t)v341[1].__locale_, (v341[1].__locale_ - v341[0].__locale_) >> 3);
      DSP::firfilter((uint64_t)&v338, (uint64_t *)&v363, v341);
      if ((void)v361)
      {
        *((void *)&v361 + 1) = v361;
        operator delete((void *)v361);
      }
      long long v361 = *(_OWORD *)&v341[0].__locale_;
      uint64_t v362 = v342;
      v341[1].__locale_ = 0;
      uint64_t v342 = 0;
      v341[0].__locale_ = 0;
      if (v338)
      {
        uint64_t v339 = v338;
        operator delete(v338);
      }
      if ((int)v139 >= 1)
      {
        v225 = (double *)v365[0];
        v226 = (double *)(v361 + v315);
        double v227 = 0.0;
        v228 = v139;
        double v229 = (double *)v365[0];
        do
        {
          double v230 = *v226++;
          *v229++ = v230;
          double v227 = v227 + v230 * v230;
          v228 = (unsigned int *)((char *)v228 - 1);
        }
        while (v228);
        if (v227 != 0.0)
        {
          double v231 = sqrt(v210 / v227);
          v232 = v139;
          uint64_t v233 = v225;
          do
          {
            *uint64_t v233 = v231 * *v233;
            ++v233;
            v232 = (unsigned int *)((char *)v232 - 1);
          }
          while (v232);
        }
        double v234 = 0.0;
        double v235 = (double *)v355[0];
        v236 = v139;
        uint64_t v237 = v225;
        do
        {
          double v238 = *v235++;
          double v239 = v238 * *v237;
          *v237++ = v239;
          double v234 = v234 + v239;
          v236 = (unsigned int *)((char *)v236 - 1);
        }
        while (v236);
        int v240 = v139;
        double v241 = v234 / (float)(int)v139;
        do
        {
          double *v225 = *v225 - v241;
          ++v225;
          int v240 = (unsigned int *)((char *)v240 - 1);
        }
        while (v240);
      }
      uint64_t v242 = v331[72];
      if ((v242 & 0x80000000) == 0) {
        bzero(v40, (8 * v242) | 4);
      }
      if (*((double *)v371 + v44) > *((double *)v331 + 24) * *((double *)v331 + 16))
      {
        if ((int)v139 >= 1)
        {
          unint64_t v243 = (double *)v365[0];
          v244 = v40 + 1;
          v245 = v139;
          do
          {
            double v246 = *v243++;
            float v247 = v246;
            float *v244 = v247;
            v244 += 2;
            v245 = (unsigned int *)((char *)v245 - 1);
          }
          while (v245);
        }
        DSP::fft((DSP *)v40, (int)v242, 1);
        double v248 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v248 + *(void *)(*v248 - 24)));
        v249 = std::locale::use_facet(v341, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v249->__vftable[2].~facet_0)(v249, 10);
        std::locale::~locale(v341);
        std::ostream::put();
        std::ostream::flush();
        uint64_t v242 = v331[72];
      }
      if ((v242 & 0x80000000) == 0)
      {
        unint64_t v250 = 0;
        v251 = v358;
        double v252 = 0.0;
        do
        {
          double v253 = sqrtf((float)(v40[v250 / 4 + 2] * v40[v250 / 4 + 2]) + (float)(v40[v250 / 4 + 1] * v40[v250 / 4 + 1]));
          v251[v250 / 8] = v253;
          double v252 = v252 + v253 * v253;
          v250 += 8;
        }
        while (((4 * v242) & 0x3FFFFFFF8) + 8 != v250);
        if (v252 != 0.0) {
          cblas_dscal((unint64_t)((char *)v359 - (char *)v251) >> 3, 1.0 / sqrt(v252), v251, 1);
        }
      }
      v254 = (double *)v356;
      if (v317 <= v319)
      {
        v255 = v358;
        int v256 = v331[65];
        BOOL v257 = &v358[v314];
        uint64_t v258 = v311;
        uint64_t v259 = v193;
        do
        {
          double v260 = v255[v259];
          v254[v259 - v193] = v260;
          if (v256 >= 2)
          {
            uint64_t v261 = v257;
            uint64_t v262 = 2;
            do
            {
              double v260 = v260 + *v261 - v255[(int)(((double)(int)v262 + -0.5) * (double)(int)v259)];
              v254[v259 - v193] = v260;
              ++v262;
              uint64_t v261 = (double *)((char *)v261 + v258);
            }
            while (v256 + 1 != v262);
          }
          ++v259;
          v257 += 2;
          v258 += 8;
        }
        while (v158 != v259);
      }
      if (v357 == v254)
      {
        int v264 = -1;
        double v265 = -INFINITY;
      }
      else
      {
        if ((unint64_t)(v357 - v254) <= 1) {
          uint64_t v263 = 1;
        }
        else {
          uint64_t v263 = v357 - v254;
        }
        int v264 = -1;
        double v265 = -INFINITY;
        int v266 = v317;
        do
        {
          double v267 = *v254++;
          double v268 = v267;
          if (v267 > v265)
          {
            double v265 = v268;
            int v264 = v266;
          }
          ++v266;
          --v263;
        }
        while (v263);
      }
      *(double *)(*((void *)v331 + 7) + 8 * v44) = (double)(int)*v331
                                                                   / (double)(int)v331[72]
                                                                   * (double)v264;
      *(double *)(*((void *)v331 + 10) + 8 * v44++) = v265;
      unint64_t v190 = v321 + v44 * v322;
      v194 += v320;
      v328 += v320;
      if (v324 <= v190) {
        goto LABEL_242;
      }
    }
  }
  uint64_t v184 = v130;
  uint64_t v130 = v132;
  uint64_t v186 = v310 + 1;
  uint64_t v140 = v331;
  int v187 = v309;
LABEL_247:
  if (v130 == v184)
  {
    double v182 = 0.0;
    char v183 = 1;
    double v185 = 0.0;
  }
  else
  {
    uint64_t v269 = 0;
    if (v133 <= 1) {
      uint64_t v270 = 1;
    }
    else {
      uint64_t v270 = v133;
    }
    double v185 = 0.0;
    double v182 = 0.0;
    do
    {
      double v271 = v184[v269];
      double v182 = v182 + v271;
      double v185 = v185 + v271 * v271;
      ++v269;
    }
    while (v270 != v269);
    char v183 = 0;
  }
LABEL_255:
  if (sqrt(v185 / (double)(int)v186 - v182 / (double)(int)v186 * (v182 / (double)(int)v186)) > *((double *)v140 + 26)) {
    *((void *)v140 + 27) = *((void *)v140 + 28);
  }
  if (v310 <= 0x7FFFFFFE)
  {
    double v272 = (double *)*((void *)v140 + 13);
    uint64_t v273 = v186;
    double v274 = v272;
    BOOL v275 = v184;
    do
    {
      double v276 = *v275++;
      if (v276 <= *((double *)v140 + 27)) {
        double v277 = 0.0;
      }
      else {
        double v277 = 1.0;
      }
      *v274++ = v277;
      --v273;
    }
    while (v273);
    uint64_t v278 = (double *)v371;
    v279 = (double *)v369;
    unint64_t v280 = (double *)v368[0];
    do
    {
      if (*v278 < *((double *)v140 + 16)) {
        *double v272 = 0.0;
      }
      if (*v279 > *((double *)v140 + 17)) {
        *double v272 = 0.0;
      }
      if (*v280 > *((double *)v140 + 18)) {
        *double v272 = 0.0;
      }
      ++v278;
      ++v272;
      ++v279;
      ++v280;
      --v186;
    }
    while (v186);
  }
  if ((v183 & 1) == 0)
  {
    double v281 = log((double)(int)v140[65]);
    if (v133 <= 1) {
      uint64_t v282 = 1;
    }
    else {
      uint64_t v282 = v133;
    }
    do
    {
      *uint64_t v184 = fmax(fmin(*v184 / v281 * 6.4, 1.0), 0.0);
      ++v184;
      --v282;
    }
    while (v282);
  }
  uint64_t v283 = *((void *)v140 + 5);
  if ((unint64_t)(v283 - *((void *)v140 + 4)) >= 9 && *(double *)(v283 - 8) == 0.0)
  {
    *((void *)v140 + 5) = v283 - 8;
    *((void *)v140 + 8) -= 8;
    *((void *)v140 + 14) -= 8;
    *((void *)v140 + 11) = v130 - 1;
  }
  DSP::smooth_voiced_pitch_contour((double **)v38, (DSP *)v140[7], &v351);
  double v284 = *(double **)v38;
  if (*(void *)v38)
  {
    *((void *)v140 + 8) = v284;
    operator delete(v284);
    *(void *)uint64_t v38 = 0;
    *((void *)v38 + 1) = 0;
    *((void *)v38 + 2) = 0;
  }
  *(_OWORD *)(v140 + 14) = v351;
  *((void *)v140 + 9) = v352;
  free(v40);
  long long v351 = 0uLL;
  uint64_t v352 = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(&v351, *((const void **)v140 + 7), *((void *)v140 + 8), (uint64_t)(*((void *)v140 + 8) - *((void *)v140 + 7)) >> 3);
  double v285 = (double *)v351;
  if (*((void *)&v351 + 1) != (void)v351)
  {
    unint64_t v286 = (uint64_t)(*((void *)&v351 + 1) - v351) >> 3;
    v287 = *(double **)v38;
    double v288 = (double *)*((void *)v331 + 13);
    if (v286 <= 1) {
      unint64_t v286 = 1;
    }
    do
    {
      double v289 = *v287++;
      double v290 = v289;
      double v291 = *v288++;
      *v285++ = v290 * v291;
      --v286;
    }
    while (v286);
  }
  double v292 = (double *)*((void *)v140 + 4);
  double v293 = (double *)*((void *)v140 + 5);
  v346 = 0;
  uint64_t v347 = 0;
  double v345 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((char *)&v345, v292, v293, v293 - v292);
  v341[1].__locale_ = 0;
  uint64_t v342 = 0;
  v341[0].__locale_ = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((char *)v341, (double *)v351, *((double **)&v351 + 1), (uint64_t)(*((void *)&v351 + 1) - v351) >> 3);
  double v294 = (double *)*((void *)v140 + 7);
  double v295 = (double *)*((void *)v140 + 8);
  signed int v336 = 0;
  uint64_t v337 = 0;
  v335 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((char *)&v335, v294, v295, v295 - v294);
  v296 = (double *)*((void *)v140 + 10);
  double v297 = (double *)*((void *)v140 + 11);
  int v333 = 0;
  uint64_t v334 = 0;
  uint64_t v332 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((char *)&v332, v296, v297, v297 - v296);
  if (v140[66])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cout, (uint64_t)"Elapsed time: ", 14);
    clock();
    v298 = (void *)std::ostream::operator<<();
    uint64_t v299 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v298, (uint64_t)" s", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v299 + *(void *)(*v299 - 24)));
    unint64_t v300 = std::locale::use_facet(&v390, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v300->__vftable[2].~facet_0)(v300, 10);
    std::locale::~locale(&v390);
    std::ostream::put();
    std::ostream::flush();
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_6vectorIfNS_9allocatorIfEEEES6_S6_S6_EEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS6_S6_S6_S6_EJEJEJRS6_S9_S9_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(v187, (uint64_t)&v345, (uint64_t)v341, (uint64_t)&v335, (uint64_t)&v332);
  if (v332)
  {
    int v333 = v332;
    operator delete(v332);
  }
  if (v335)
  {
    signed int v336 = v335;
    operator delete(v335);
  }
  if (v341[0].__locale_)
  {
    v341[1] = v341[0];
    operator delete(v341[0].__locale_);
  }
  if (v345)
  {
    v346 = (double *)v345;
    operator delete(v345);
  }
  if ((void)v351)
  {
    *((void *)&v351 + 1) = v351;
    operator delete((void *)v351);
  }
  if (v355[0])
  {
    v355[1] = v355[0];
    operator delete(v355[0]);
  }
  if (v356)
  {
    uint64_t v357 = (double *)v356;
    operator delete(v356);
  }
  if (v358)
  {
    int v359 = v358;
    operator delete(v358);
  }
  if (v131) {
    operator delete(v131);
  }
  if (v360[0])
  {
    v360[1] = v360[0];
    operator delete(v360[0]);
  }
  if ((void)v361)
  {
    *((void *)&v361 + 1) = v361;
    operator delete((void *)v361);
  }
  if (v363)
  {
    uint64_t v364 = v363;
    operator delete(v363);
  }
  if (v365[0])
  {
    v365[1] = v365[0];
    operator delete(v365[0]);
  }
  if (__X[0])
  {
    __X[1] = __X[0];
    operator delete(__X[0]);
  }
  if (__Y[0])
  {
    __Y[1] = __Y[0];
    operator delete(__Y[0]);
  }
  if (v368[0])
  {
    v368[1] = v368[0];
    operator delete(v368[0]);
  }
  if (v369)
  {
    v370 = v369;
    operator delete(v369);
  }
  if (v371)
  {
    *(void *)v372 = v371;
    operator delete(v371);
  }
  v371 = &v379;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v371);
  if (v381)
  {
    uint64_t v382 = v381;
    operator delete(v381);
  }
  if ((void)v386)
  {
    *((void *)&v386 + 1) = v386;
    operator delete((void *)v386);
  }
  if ((void)v388)
  {
    *((void *)&v388 + 1) = v388;
    operator delete((void *)v388);
  }
}

void sub_1ACA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::locale a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a63) {
    operator delete(a63);
  }
  if (a66) {
    operator delete(a66);
  }
  if (a69) {
    operator delete(a69);
  }
  if (a34) {
    operator delete(a34);
  }
  if (a72)
  {
    STACK[0x200] = (unint64_t)a72;
    operator delete(a72);
  }
  int v74 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v74;
    operator delete(v74);
  }
  long long v75 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v75;
    operator delete(v75);
  }
  uint64_t v76 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v76;
    operator delete(v76);
  }
  uint64_t v77 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v77;
    operator delete(v77);
  }
  std::string::size_type v78 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v78;
    operator delete(v78);
  }
  uint64_t v79 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v79;
    operator delete(v79);
  }
  long long v80 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v80;
    operator delete(v80);
  }
  uint64_t v81 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v81;
    operator delete(v81);
  }
  STACK[0x2B8] = (unint64_t)&STACK[0x300];
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2B8]);
  std::locale v82 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v82;
    operator delete(v82);
  }
  double v83 = *(void **)(v72 - 224);
  if (v83)
  {
    *(void *)(v72 - 216) = v83;
    operator delete(v83);
  }
  uint64_t v84 = *(void **)(v72 - 192);
  if (v84)
  {
    *(void *)(v72 - 184) = v84;
    operator delete(v84);
  }
  _Unwind_Resume(a1);
}

void SiriTTS::ForcedAlignment::convert_espbuffer_to_2d_vector(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *(void *)(a1 + 80);
  unint64_t v5 = *(void *)(a1 + 88);
  int v10 = 0;
  std::vector<float>::vector(__p, v4, &v10);
  std::vector<std::vector<float>>::vector(a2, v5, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(char **)a1;
    uint64_t v8 = 4 * v4;
    do
    {
      double v9 = &v7[v8];
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(*a2 + v6), v7, (uint64_t)&v7[v8], v4);
      v6 += 24;
      uint64_t v7 = v9;
      --v5;
    }
    while (v5);
  }
}

void sub_1ACEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *SiriTTS::ForcedAlignment::EspressoSession::EspressoSession(uint64_t *a1)
{
  *a1 = espresso_create_context();
  a1[3] = espresso_create_plan();
  espresso_plan_add_network();
  return a1;
}

void SiriTTS::ForcedAlignment::EspressoSession::~EspressoSession(SiriTTS::ForcedAlignment::EspressoSession *this)
{
}

void SiriTTS::ForcedAlignment::EspressoSession::forward(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  espresso_network_change_blob_shape();
  espresso_plan_build();
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v6 = (void *)*a2;
  v16[1] = (void **)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  v16[2] = (void **)((uint64_t)(v6[1] - *v6) >> 2);
  espresso_buffer_pack_tensor_shape();
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  double v13 = 0;
  std::vector<float>::reserve(&v13, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) * ((uint64_t)(*(void *)(*a2 + 8) - *(void *)*a2) >> 2));
  *(_DWORD *)(a1 + 192) = 65568;
  espresso_network_bind_buffer();
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v13, v14, *(char **)(v7 + v8), *(char **)(v7 + v8 + 8), (uint64_t)(*(void *)(v7 + v8 + 8) - *(void *)(v7 + v8)) >> 2);
      ++v9;
      uint64_t v7 = *a2;
      v8 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v9);
  }
  *(void *)(a1 + 32) = v13;
  espresso_network_bind_buffer();
  espresso_plan_execute_sync();
  SiriTTS::ForcedAlignment::convert_espbuffer_to_2d_vector((uint64_t)v12, &v10);
  std::vector<std::vector<int>>::__vdeallocate(a3);
  *(_OWORD *)a3 = v10;
  a3[2] = v11;
  uint64_t v11 = 0;
  long long v10 = 0uLL;
  v16[0] = (void **)&v10;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](v16);
  espresso_plan_build_clean();
  if (v13)
  {
    uint64_t v14 = (uint64_t)v13;
    operator delete(v13);
  }
}

void sub_1AD1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  uint64_t v7 = *(void **)(v5 - 136);
  if (v7)
  {
    *(void *)(v5 - 128) = v7;
    operator delete(v7);
  }
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void SiriTTS::ForcedAlignment::FeatureTransform::FeatureTransform(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_1AD28C()
{
}

uint64_t SiriTTS::ForcedAlignment::FeatureTransform::transform@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  long long v18 = 0u;
  long long v17 = 0u;
  double v16 = off_262DC8;
  char v19 = 0;
  long long v14 = 0u;
  long long v13 = 0u;
  double v12 = off_262DC8;
  char v15 = 0;
  memset(v10, 0, sizeof(v10));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v10, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  SiriTTS::ForcedAlignment::kaldi_matrix_from_matrix(v10, (uint64_t)v11);
  v9[0] = (void **)v10;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](v9);
  kaldi::CuMatrix<float>::operator=((uint64_t)&v16, (kaldi::ContextDependency *)v11);
  kaldi::nnet1::Nnet::Feedforward(*a1, (uint64_t)&v16, (uint64_t)&v12, -1, 0);
  kaldi::Matrix<float>::Matrix((uint64_t)v9);
  kaldi::Matrix<float>::Resize((uint64_t)v9, HIDWORD(v13), DWORD2(v13), 0, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v12, (unsigned int *)v9, 111, v5, v6);
  kaldi::Matrix<float>::Matrix(v8, v9);
  SiriTTS::ForcedAlignment::matrix_from_kaldi_matrix(v8, a3);
  kaldi::Matrix<float>::~Matrix((uint64_t)v8);
  kaldi::Matrix<float>::~Matrix((uint64_t)v9);
  kaldi::Matrix<float>::~Matrix((uint64_t)v11);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v12);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v16);
}

void sub_1AD430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a14);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a22);
  kaldi::CuMatrix<float>::~CuMatrix(v22 - 128);
  kaldi::CuMatrix<float>::~CuMatrix(v22 - 80);
  _Unwind_Resume(a1);
}

void SiriTTS::ForcedAlignment::PdfPrior::PdfPrior(void *a1, const std::string *a2)
{
  *a1 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v4 = 0x2EDBE6FF3F800000;
  std::string::operator=(&__p, a2);
  operator new();
}

void sub_1AD530(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t SiriTTS::ForcedAlignment::PdfPrior::subtract_on_logpost@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  memset(v7, 0, sizeof(v7));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v7, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  SiriTTS::ForcedAlignment::kaldi_matrix_from_matrix(v7, (uint64_t)v8);
  unint64_t v9 = (void **)v7;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  kaldi::nnet1::PdfPrior::SubtractOnLogpost(*a1, (kaldi::ContextDependency *)v8);
  kaldi::Matrix<float>::Matrix(v6, v8);
  SiriTTS::ForcedAlignment::matrix_from_kaldi_matrix(v6, a3);
  kaldi::Matrix<float>::~Matrix((uint64_t)v6);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v8);
}

void sub_1AD638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void SiriTTS::ForcedAlignment::AcousticModel::AcousticModel(uint64_t a1, const void **a2, unsigned char *a3)
{
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t v7 = v35;
  std::string::basic_string[abi:ne180100]((uint64_t)v35, v6 + 5);
  if (v36 < 0) {
    uint64_t v7 = (void **)v35[0];
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *a2;
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "/tree");
  unint64_t v9 = operator new(0x30uLL);
  v9[1] = 0;
  void v9[2] = 0;
  void *v9 = off_26EF00;
  uint64_t v10 = (uint64_t)(v9 + 3);
  v9[4] = 0;
  v9[5] = 0;
  void v9[3] = off_261398;
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v9 + 3;
  *(void *)(a1 + 8) = v9;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    uint64_t v10 = *(void *)a1;
  }
  LOBYTE(v33[0]) = 0;
  kaldi::Input::Input(v37, v35, v33);
  double v12 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v37);
  kaldi::ContextDependency::Read(v10, v12, LOBYTE(v33[0]));
  kaldi::Input::~Input((kaldi::Input *)v37);
  if (*((char *)a2 + 23) >= 0) {
    size_t v13 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v13 = (size_t)a2[1];
  }
  long long v14 = v33;
  std::string::basic_string[abi:ne180100]((uint64_t)v33, v13 + 10);
  if (v34 < 0) {
    long long v14 = (void **)v33[0];
  }
  if (v13)
  {
    if (*((char *)a2 + 23) >= 0) {
      char v15 = a2;
    }
    else {
      char v15 = *a2;
    }
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "/final.mdl");
  double v16 = (char *)operator new(0x110uLL);
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *(_OWORD *)(v16 + 24) = 0u;
  long long v17 = (std::vector<int> *)(v16 + 24);
  *(void *)double v16 = off_26EF50;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 120) = 0u;
  *(_OWORD *)(v16 + 136) = 0u;
  *(_OWORD *)(v16 + 152) = 0u;
  *(_OWORD *)(v16 + 168) = 0u;
  *(_OWORD *)(v16 + 184) = 0u;
  *(_OWORD *)(v16 + 200) = 0u;
  *(_OWORD *)(v16 + 216) = 0u;
  *(_OWORD *)(v16 + 232) = 0u;
  *(_OWORD *)(v16 + 248) = 0u;
  long long v18 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v16 + 24;
  *(void *)(a1 + 24) = v16;
  if (v18)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    long long v17 = *(std::vector<int> **)(a1 + 16);
  }
  LOBYTE(v31[0]) = 0;
  kaldi::Input::Input(v37, v33, v31);
  char v19 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v37);
  kaldi::TransitionModel::Read(v17, v19, LOBYTE(v31[0]), 0);
  kaldi::Input::~Input((kaldi::Input *)v37);
  if (*a3)
  {
    if (*((char *)a2 + 23) >= 0) {
      size_t v20 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v20 = (size_t)a2[1];
    }
    int v21 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v20 + 9);
    if (v39 < 0) {
      int v21 = (void **)__p[0];
    }
    if (v20)
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v22 = a2;
      }
      else {
        uint64_t v22 = *a2;
      }
      memmove(v21, v22, v20);
    }
    strcpy((char *)v21 + v20, "/final.pb");
  }
  else
  {
    if (*((char *)a2 + 23) >= 0) {
      size_t v26 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v26 = (size_t)a2[1];
    }
    double v27 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v26 + 34);
    if (v39 < 0) {
      double v27 = (void **)__p[0];
    }
    if (v26)
    {
      if (*((char *)a2 + 23) >= 0) {
        int v28 = a2;
      }
      else {
        int v28 = *a2;
      }
      memmove(v27, v28, v26);
    }
    strcpy((char *)v27 + v26, "/final.mlmodelc/model.espresso.net");
    std::allocate_shared[abi:ne180100]<SiriTTS::ForcedAlignment::EspressoSession,std::allocator<SiriTTS::ForcedAlignment::EspressoSession>,std::string &,void>(v37);
    long long v29 = v37[0];
    v37[0] = 0uLL;
    unsigned int v30 = *(std::__shared_weak_count **)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v29;
    if (v30)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      if (*((void *)&v37[0] + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37[0] + 1));
      }
    }
  }
  if (v39 < 0) {
    operator delete(__p[0]);
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v23 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v23 = (size_t)a2[1];
  }
  int v24 = v31;
  std::string::basic_string[abi:ne180100]((uint64_t)v31, v23 + 24);
  if (v32 < 0) {
    int v24 = (void **)v31[0];
  }
  if (v23)
  {
    if (*((char *)a2 + 23) >= 0) {
      double v25 = a2;
    }
    else {
      double v25 = *a2;
    }
    memmove(v24, v25, v23);
  }
  strcpy((char *)v24 + v23, "/final.feature_transform");
  std::allocate_shared[abi:ne180100]<SiriTTS::ForcedAlignment::FeatureTransform,std::allocator<SiriTTS::ForcedAlignment::FeatureTransform>,std::string &,void>();
}

void sub_1ADEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  STACK[0x360] = v52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x360]);
  STACK[0x360] = v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x360]);
  uint64_t v54 = (std::__shared_weak_count *)v50[9];
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  uint64_t v55 = (std::__shared_weak_count *)v50[7];
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  int v56 = (std::__shared_weak_count *)v50[5];
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  int v57 = (std::__shared_weak_count *)v50[3];
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  double v58 = (std::__shared_weak_count *)v50[1];
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  _Unwind_Resume(a1);
}

void sub_1AE098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

uint64_t std::copy[abi:ne180100]<std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::back_insert_iterator<std::vector<std::string>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = *(void *)a1;
  if (*(char *)(a1 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else {
    std::string v11 = *(std::string *)(a1 + 8);
  }
  uint64_t v5 = *(void *)a2;
  uint64_t v8 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
    uint64_t v5 = v8;
  }
  else
  {
    std::string v9 = *(std::string *)(a2 + 8);
  }
  std::string v19 = v11;
  memset(&v11, 0, sizeof(v11));
  uint64_t v16 = v5;
  std::string v17 = v9;
  uint64_t v18 = v10;
  memset(&v9, 0, sizeof(v9));
  std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::back_insert_iterator<std::vector<std::string>>>(&v18, &v16, a3, (uint64_t)v12);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = v15;
  if (v14 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_1AE1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SiriTTS::ForcedAlignment::AcousticModel::forward(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X2>, void *a4@<X8>)
{
  SiriTTS::ForcedAlignment::FeatureTransform::transform(*(uint64_t ***)(a1 + 32), a2, &v27);
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  unint64_t v26 = 0;
  if ((int)(-1431655765 * ((unint64_t)(v28 - v27) >> 3)) >= 1)
  {
    int v6 = 0;
    do
    {
      SiriTTS::ForcedAlignment::get_submatrix(&v27, v6, 0x7530u, v23);
      if (*a3)
      {
        long long v21 = 0uLL;
        uint64_t v22 = 0;
        memset(v18, 0, sizeof(v18));
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v18, 0, 0, 0);
        SiriTTS::ForcedAlignment::kaldi_matrix_from_matrix(v18, (uint64_t)&v19);
        unint64_t v7 = v25;
        if (v25 >= v26)
        {
          uint64_t v8 = std::vector<kaldi::Matrix<float>>::__push_back_slow_path<kaldi::Matrix<float>>(&v24, (uint64_t)&v19);
        }
        else
        {
          kaldi::Matrix<float>::Matrix(v25, &v19);
          uint64_t v8 = v7 + 40;
        }
        unint64_t v25 = v8;
        kaldi::Matrix<float>::~Matrix((uint64_t)&v19);
        v16[0] = v18;
      }
      else
      {
        long long v21 = 0uLL;
        uint64_t v22 = 0;
        uint64_t v9 = *(void *)(a1 + 48);
        std::string::basic_string[abi:ne180100]<0>(v16, "main_input");
        std::string::basic_string[abi:ne180100]<0>(&__p, "output_layer_BiasAdd");
        SiriTTS::ForcedAlignment::EspressoSession::forward(v9, v23, (uint64_t *)&v19);
        std::vector<std::vector<int>>::__vdeallocate((uint64_t *)&v21);
        long long v21 = v19;
        uint64_t v22 = v20;
        uint64_t v20 = 0;
        long long v19 = 0uLL;
        long long v29 = (void **)&v19;
        std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v29);
        if (v15 < 0) {
          operator delete(__p);
        }
        if (v17 < 0) {
          operator delete(v16[0]);
        }
        memset(v13, 0, sizeof(v13));
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v13, v21, *((uint64_t *)&v21 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v21 + 1) - v21) >> 3));
        SiriTTS::ForcedAlignment::kaldi_matrix_from_matrix(v13, (uint64_t)&v19);
        unint64_t v10 = v25;
        if (v25 >= v26)
        {
          uint64_t v11 = std::vector<kaldi::Matrix<float>>::__push_back_slow_path<kaldi::Matrix<float>>(&v24, (uint64_t)&v19);
        }
        else
        {
          kaldi::Matrix<float>::Matrix(v25, &v19);
          uint64_t v11 = v10 + 40;
        }
        unint64_t v25 = v11;
        kaldi::Matrix<float>::~Matrix((uint64_t)&v19);
        v16[0] = v13;
      }
      std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v16);
      *(void *)&long long v19 = &v21;
      std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
      *(void *)&long long v19 = v23;
      std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
      v6 += 30000;
    }
    while (v6 < (int)(-1431655765 * ((unint64_t)(v28 - v27) >> 3)));
  }
  SiriTTS::ForcedAlignment::concat_features((uint64_t)&v24, &v19);
  SiriTTS::ForcedAlignment::PdfPrior::subtract_on_logpost(*(uint64_t **)(a1 + 64), (uint64_t *)&v19, a4);
  v23[0] = (void **)&v19;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](v23);
  *(void *)&long long v19 = &v24;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  *(void *)&long long v19 = &v27;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
}

void sub_1AE50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  *(void *)(v36 - 168) = v35;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 168));
  a29 = v36 - 144;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = v36 - 120;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  _Unwind_Resume(a1);
}

void *SiriTTS::ForcedAlignment::AcousticModel::context@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this[1];
  *a2 = *this;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t SiriTTS::ForcedAlignment::AcousticModel::transition_model@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 24);
  *a2 = *(void *)(this + 16);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t SiriTTS::ForcedAlignment::AcousticModel::silence_phones(SiriTTS::ForcedAlignment::AcousticModel *this)
{
  return (uint64_t)this + 80;
}

uint64_t SiriTTS::ForcedAlignment::AcousticModel::nonsilence_phones(SiriTTS::ForcedAlignment::AcousticModel *this)
{
  return (uint64_t)this + 104;
}

void std::__shared_ptr_emplace<kaldi::ContextDependency>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26EF00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::ContextDependency>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26EF00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t std::__shared_ptr_emplace<kaldi::ContextDependency>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<kaldi::TransitionModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26EF50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::TransitionModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26EF50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<kaldi::TransitionModel>::__on_zero_shared(uint64_t a1)
{
}

void *std::allocate_shared[abi:ne180100]<SiriTTS::ForcedAlignment::EspressoSession,std::allocator<SiriTTS::ForcedAlignment::EspressoSession>,std::string &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xE0uLL);
  uint64_t result = std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::EspressoSession>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<SiriTTS::ForcedAlignment::EspressoSession>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AE7B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::EspressoSession>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<SiriTTS::ForcedAlignment::EspressoSession>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26EFA0;
  SiriTTS::ForcedAlignment::EspressoSession::EspressoSession(a1 + 3);
  return a1;
}

void sub_1AE810(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::EspressoSession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26EFA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::EspressoSession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26EFA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::EspressoSession>::__on_zero_shared(uint64_t a1)
{
}

void std::allocate_shared[abi:ne180100]<SiriTTS::ForcedAlignment::FeatureTransform,std::allocator<SiriTTS::ForcedAlignment::FeatureTransform>,std::string &,void>()
{
  uint64_t v0 = operator new(0x20uLL);
  std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::FeatureTransform>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<SiriTTS::ForcedAlignment::FeatureTransform>,0>(v0);
}

void sub_1AE8EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::FeatureTransform>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<SiriTTS::ForcedAlignment::FeatureTransform>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26EFF0;
  SiriTTS::ForcedAlignment::FeatureTransform::FeatureTransform(a1 + 3);
}

void sub_1AE948(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::FeatureTransform>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26EFF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::FeatureTransform>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26EFF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

kaldi::nnet1::Nnet *std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::FeatureTransform>::__on_zero_shared(uint64_t a1)
{
  return std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)(a1 + 24), 0);
}

void std::allocate_shared[abi:ne180100]<SiriTTS::ForcedAlignment::PdfPrior,std::allocator<SiriTTS::ForcedAlignment::PdfPrior>,std::string &,void>(uint64_t a1, const std::string *a2)
{
  int v3 = operator new(0x20uLL);
  std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::PdfPrior>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<SiriTTS::ForcedAlignment::PdfPrior>,0>(v3, a2);
}

void sub_1AEA28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::PdfPrior>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<SiriTTS::ForcedAlignment::PdfPrior>,0>(void *a1, const std::string *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26F040;
  SiriTTS::ForcedAlignment::PdfPrior::PdfPrior(a1 + 3, a2);
}

void sub_1AEA84(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::PdfPrior>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26F040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::PdfPrior>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26F040;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t *std::__shared_ptr_emplace<SiriTTS::ForcedAlignment::PdfPrior>::__on_zero_shared(uint64_t a1)
{
  return std::unique_ptr<kaldi::nnet1::PdfPrior>::reset[abi:ne180100]((uint64_t *)(a1 + 24), 0);
}

uint64_t **std::istream_iterator<std::string,char,std::char_traits<char>,long>::istream_iterator[abi:ne180100](uint64_t **a1, uint64_t *a2)
{
  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  int v3 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)(a1 + 1));
  if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0) {
    *a1 = 0;
  }
  return a1;
}

void sub_1AEB90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::back_insert_iterator<std::vector<std::string>>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)(a1 + 1);
  uint64_t v10 = a1[3];
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v5 = *a2;
  *(_OWORD *)std::string __p = *(_OWORD *)(a2 + 1);
  uint64_t v7 = a2[3];
  uint64_t v8 = v4;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::back_insert_iterator<std::vector<std::string>>,0>((uint64_t)&v8, (uint64_t)&v5, a3, a4);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
}

void sub_1AEC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::back_insert_iterator<std::vector<std::string>>,0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = *(void *)a1;
  uint64_t v8 = (_OWORD *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *v8;
    v29.__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
  }
  uint64_t v25 = *(void *)a2;
  *(_OWORD *)std::string __p = *(_OWORD *)(a2 + 8);
  uint64_t v27 = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  std::__unwrap_range[abi:ne180100]<std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::istream_iterator<std::string,char,std::char_traits<char>,long>>(&v28, &v25, (uint64_t)&v30);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  uint64_t v21 = v32;
  uint64_t v16 = v33;
  *(_OWORD *)uint64_t v20 = v31;
  long long v31 = 0uLL;
  uint64_t v18 = v35;
  uint64_t v19 = v30;
  *(_OWORD *)char v17 = v34;
  uint64_t v32 = 0;
  long long v34 = 0uLL;
  uint64_t v35 = 0;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::back_insert_iterator<std::vector<std::string>>>((uint64_t)&v19, &v16, a3, (uint64_t)v22);
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
  uint64_t v9 = *(void **)(a1 + 8);
  int v10 = *(char *)(a1 + 31);
  *(void *)uint64_t v8 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  long long v11 = *(_OWORD *)v22;
  v36[0] = v23;
  *(void *)((char *)v36 + 7) = *(void *)((char *)&v23 + 7);
  char v12 = HIBYTE(v23);
  long long v23 = 0uLL;
  v22[1] = 0;
  *(void *)((char *)v37 + 7) = *(void *)((char *)v36 + 7);
  v37[0] = v36[0];
  if (v10 < 0)
  {
    long long v15 = v11;
    operator delete(v9);
    long long v11 = v15;
    BOOL v13 = v23 < 0;
  }
  else
  {
    BOOL v13 = 0;
  }
  uint64_t v14 = v24;
  *(_OWORD *)a4 = v11;
  *(void *)(a4 + 16) = v37[0];
  *(void *)(a4 + 23) = *(void *)((char *)v37 + 7);
  *(unsigned char *)(a4 + 31) = v12;
  *(void *)(a4 + 32) = v14;
  if (v13) {
    operator delete(v22[1]);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
}

void sub_1AEE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
}

void std::__unwrap_range[abi:ne180100]<std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::istream_iterator<std::string,char,std::char_traits<char>,long>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::string::value_type *)a1[1];
  std::string::size_type v7 = a1[2];
  *(_DWORD *)uint64_t v18 = *((_DWORD *)a1 + 6);
  *(_DWORD *)&void v18[3] = *(_DWORD *)((char *)a1 + 27);
  int v8 = *((char *)a1 + 31);
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  if (v8 < 0)
  {
    std::string::__init_copy_ctor_external(&v20, v5, v7);
    std::string::size_type v10 = v20.__r_.__value_.__r.__words[0];
    char v9 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v20.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
    v20.__r_.__value_.__l.__size_ = v7;
    LODWORD(v20.__r_.__value_.__r.__words[2]) = *(_DWORD *)v18;
    *(_DWORD *)((char *)&v20.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v18[3];
    char v9 = v8;
    std::string::size_type v10 = (std::string::size_type)v5;
  }
  v22[0] = v20.__r_.__value_.__l.__size_;
  *(void *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&v20.__r_.__value_.__r.__words[1] + 7);
  uint64_t v11 = *a2;
  char v12 = (std::string::value_type *)a2[1];
  std::string::size_type v13 = a2[2];
  *(_DWORD *)char v17 = *((_DWORD *)a2 + 6);
  *(_DWORD *)&v17[3] = *(_DWORD *)((char *)a2 + 27);
  int v14 = *((char *)a2 + 31);
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  uint64_t v19 = v11;
  if (v14 < 0)
  {
    std::string::__init_copy_ctor_external(&v20, v12, v13);
    uint64_t v11 = v19;
    std::string::size_type v16 = v20.__r_.__value_.__r.__words[0];
    char v15 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v20.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    v20.__r_.__value_.__l.__size_ = v13;
    LODWORD(v20.__r_.__value_.__r.__words[2]) = *(_DWORD *)v17;
    *(_DWORD *)((char *)&v20.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v17[3];
    char v15 = v14;
    std::string::size_type v16 = (std::string::size_type)v12;
  }
  v21[0] = v20.__r_.__value_.__l.__size_;
  *(void *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v20.__r_.__value_.__r.__words[1] + 7);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v10;
  *(void *)(a3 + 16) = v22[0];
  *(void *)(a3 + 23) = *(void *)((char *)v22 + 7);
  *(unsigned char *)(a3 + 31) = v9;
  *(void *)(a3 + 32) = v11;
  *(void *)(a3 + 40) = v16;
  *(void *)(a3 + 48) = v21[0];
  *(void *)(a3 + 55) = *(void *)((char *)v21 + 7);
  *(unsigned char *)(a3 + 63) = v15;
  if ((v14 & 0x80000000) == 0)
  {
    if ((v8 & 0x80000000) == 0) {
      return;
    }
LABEL_11:
    operator delete(v5);
    return;
  }
  operator delete(v12);
  if (v8 < 0) {
    goto LABEL_11;
  }
}

void sub_1AF098(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

__n128 std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::back_insert_iterator<std::vector<std::string>>>@<Q0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  std::string::size_type v10 = a3;
  uint64_t v6 = *(uint64_t **)a1;
  if (*(void *)a1 != *a2)
  {
    do
    {
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&v10, (long long *)(a1 + 8));
      std::istream_iterator<std::string,char,std::char_traits<char>,long>::operator++[abi:ne180100]((uint64_t **)a1);
      uint64_t v6 = *(uint64_t **)a1;
    }
    while (*(void *)a1 != *a2);
    a3 = v10;
  }
  *(void *)a4 = v6;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a4 + 8) = result;
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a4 + 24) = v9;
  *(void *)(a4 + 32) = a3;
  return result;
}

uint64_t std::pair<std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::istream_iterator<std::string,char,std::char_traits<char>,long>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](uint64_t **a1, long long *a2)
{
  int v3 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  uint64_t v6 = *a1;
  if (v5 >= v4)
  {
    uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
    uint64_t v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

uint64_t **std::istream_iterator<std::string,char,std::char_traits<char>,long>::operator++[abi:ne180100](uint64_t **a1)
{
  uint64_t v2 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*a1, (uint64_t)(a1 + 1));
  if ((*((unsigned char *)v2 + *(void *)(*v2 - 24) + 32) & 5) != 0) {
    *a1 = 0;
  }
  return a1;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_1AF288(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::Matrix<float>>::__push_back_slow_path<kaldi::Matrix<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  char v17 = a1 + 2;
  if (v9) {
    std::string::size_type v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>(v7, v9);
  }
  else {
    std::string::size_type v10 = 0;
  }
  std::string::size_type v13 = v10;
  int v14 = &v10[40 * v4];
  std::string::size_type v16 = &v10[40 * v9];
  kaldi::Matrix<float>::Matrix(v14, a2);
  char v15 = v14 + 40;
  std::vector<kaldi::Matrix<float>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1AF384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

SiriTTS::ForcedAlignment::AlignmentGraph *SiriTTS::ForcedAlignment::AlignmentGraph::AlignmentGraph(SiriTTS::ForcedAlignment::AlignmentGraph *this, const kaldi::ContextDependency *a2, const kaldi::TransitionModel *a3, void *a4)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  __int16 v11 = 256;
  uint64_t v10 = 0;
  unint64_t v8 = a4;
  std::allocate_shared[abi:ne180100]<kaldi::TrainingGraphCompiler,std::allocator<kaldi::TrainingGraphCompiler>,kaldi::TransitionModel const&,kaldi::ContextDependency const&,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::vector<int>,kaldi::TrainingGraphCompilerOptions &,void>((uint64_t)a3, (uint64_t)a2, &v8, &v9);
  long long v5 = v9;
  long long v9 = 0uLL;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  return this;
}

void sub_1AF43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  char v12 = (std::__shared_weak_count *)v10[5];
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::string::size_type v13 = (std::__shared_weak_count *)v10[3];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  int v14 = (std::__shared_weak_count *)v10[1];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void SiriTTS::ForcedAlignment::AlignmentGraph::compile()
{
}

void sub_1AF504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<kaldi::TrainingGraphCompiler,std::allocator<kaldi::TrainingGraphCompiler>,kaldi::TransitionModel const&,kaldi::ContextDependency const&,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::vector<int>,kaldi::TrainingGraphCompilerOptions &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  unint64_t v8 = operator new(0x78uLL);
  __n128 result = std::__shared_ptr_emplace<kaldi::TrainingGraphCompiler>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel const&,kaldi::ContextDependency const&,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::vector<int>,kaldi::TrainingGraphCompilerOptions &,std::allocator<kaldi::TrainingGraphCompiler>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1AF594(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::TrainingGraphCompiler>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel const&,kaldi::ContextDependency const&,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::vector<int>,kaldi::TrainingGraphCompilerOptions &,std::allocator<kaldi::TrainingGraphCompiler>,0>(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26F090;
  kaldi::TrainingGraphCompiler::TrainingGraphCompiler(a1 + 3, a2, a3, *a4);
  return a1;
}

void sub_1AF5F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::TrainingGraphCompiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26F090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::TrainingGraphCompiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26F090;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<kaldi::TrainingGraphCompiler>::__on_zero_shared(uint64_t a1)
{
}

void kaldi::TrainingGraphCompiler::~TrainingGraphCompiler(kaldi::TrainingGraphCompiler *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

void _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_17TropicalWeightTplIfEEEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_()
{
  uint64_t v0 = operator new(0x28uLL);
  _ZNSt3__120__shared_ptr_emplaceIN3fst9VectorFstINS1_6ArcTplINS1_17TropicalWeightTplIfEEEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEEC2B8ne180100IJESC_Li0EEESC_DpOT_(v0);
}

void sub_1AF74C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__120__shared_ptr_emplaceIN3fst9VectorFstINS1_6ArcTplINS1_17TropicalWeightTplIfEEEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEEC2B8ne180100IJESC_Li0EEESC_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26F0E0;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst();
}

void sub_1AF7A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26F0E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26F0E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *SiriTTS::ForcedAlignment::matrix_from_kaldi_matrix@<X0>(unsigned int *a1@<X0>, void *a2@<X8>)
{
  int v4 = kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)a1);
  int v5 = kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)a1);
  __n128 result = std::vector<std::vector<float>>::vector(a2, v4);
  if (v4 >= 1)
  {
    for (unint64_t i = 0;
          i != v4;
          __n128 result = std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(*a2 + 24 * i++), v9, (uint64_t)&v9[4 * v5], v5))
    {
      std::vector<float>::resize(*a2 + 24 * i, v5);
      if (i >= a1[3]) {
        kaldi::KaldiAssertFailure_((kaldi *)"RowData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", &stru_68.sectname[15], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v8);
      }
      long long v9 = (char *)(*(void *)a1 + 4 * (int)(a1[4] * i));
    }
  }
  return result;
}

void sub_1AF93C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void SiriTTS::ForcedAlignment::kaldi_matrix_from_matrix(void *a1@<X0>, uint64_t a2@<X8>)
{
  kaldi::Matrix<float>::Matrix(a2);
  uint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  kaldi::Matrix<float>::Resize(a2, v4, (*(void *)(*a1 + 8) - *(void *)*a1) >> 2, 1, 0);
  if ((int)v4 >= 1)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 8;
    do
    {
      if (v6 >= *(unsigned int *)(a2 + 12)) {
        kaldi::KaldiAssertFailure_((kaldi *)"RowData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", &stru_68.sectname[15], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v5);
      }
      unint64_t v8 = (const void **)(*a1 + v7);
      long long v9 = *(v8 - 1);
      uint64_t v10 = *v8;
      if (v10 != v9) {
        memmove((void *)(*(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v6), v9, v10 - v9);
      }
      ++v6;
      v7 += 24;
    }
    while (v4 != v6);
  }
}

void sub_1AFA4C(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t SiriTTS::ForcedAlignment::concat_features@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = kaldi::ContextDependency::CentralPosition(*(kaldi::ContextDependency **)a1);
  uint64_t v5 = kaldi::ContextDependency::ContextWidth(*(kaldi::ContextDependency **)a1);
  unint64_t v6 = *(kaldi::ContextDependency **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3) >= 2)
  {
    unint64_t v7 = 1;
    uint64_t v8 = 40;
    do
    {
      uint64_t v4 = kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)((char *)v6 + v8))
         + v4;
      ++v7;
      unint64_t v6 = *(kaldi::ContextDependency **)a1;
      v8 += 40;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3) > v7);
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v20, v4, v5, 0, 0);
  long long v9 = *(kaldi::ContextDependency **)a1;
  if (*(void *)(a1 + 8) != *(void *)a1)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)((char *)v9 + v10));
      int v14 = v13;
      kaldi::SubMatrix<float>::SubMatrix(v19, v20, v12, v13, 0, v5);
      kaldi::MatrixBase<float>::CopyFromMat<float>(v19, *(void *)a1 + v10, 111, v15, v16);
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v19);
      uint64_t v12 = (v14 + v12);
      ++v11;
      long long v9 = *(kaldi::ContextDependency **)a1;
      v10 += 40;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3) > v11);
  }
  kaldi::Matrix<float>::Matrix(v18, v20);
  SiriTTS::ForcedAlignment::matrix_from_kaldi_matrix(v18, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)v18);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v20);
}

void sub_1AFBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t SiriTTS::ForcedAlignment::get_submatrix@<X0>(void *a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  unsigned int v7 = -1431655765 * ((a1[1] - *a1) >> 3) - a2;
  if ((int)v7 >= (int)a3) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = v7;
  }
  kaldi::Matrix<float>::Matrix((uint64_t)&v17);
  kaldi::Matrix<float>::Resize((uint64_t)&v17, v8, (*(void *)(*a1 + 8) - *(void *)*a1) >> 2, 1, 0);
  if ((int)v8 >= 1)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 24 * a2;
    do
    {
      if (v10 >= v18) {
        kaldi::KaldiAssertFailure_((kaldi *)"RowData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", &stru_68.sectname[15], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v9);
      }
      uint64_t v12 = *a1 + v11;
      uint64_t v13 = *(unsigned char **)v12;
      int v14 = *(unsigned char **)(v12 + 8);
      if (v14 != v13) {
        memmove((void *)(v17 + 4 * v10 * v19), v13, v14 - v13);
      }
      ++v10;
      v11 += 24;
    }
    while (v8 != v10);
  }
  kaldi::Matrix<float>::Matrix(v16, &v17);
  SiriTTS::ForcedAlignment::matrix_from_kaldi_matrix(v16, a4);
  kaldi::Matrix<float>::~Matrix((uint64_t)v16);
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v17);
}

void sub_1AFD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void MelBanks::MelBanks(MelBanks *this, int a2, int a3, int a4, int a5, int a6, int a7, char a8)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = a2;
  *((_DWORD *)this + 7) = a3;
  *((_DWORD *)this + 8) = a4;
  *((_DWORD *)this + 9) = a5;
  *((_DWORD *)this + 10) = a6;
  *((_DWORD *)this + 11) = a7;
  *((unsigned char *)this + 48) = a8;
  MelBanks::linspace((double)a3, (double)a4, a6, v17);
  MelBanks::mel_frequencies(this, *((_DWORD *)this + 11) + 2, v16);
  MelBanks::compute_diff((unint64_t *)v16, (double **)v15);
  MelBanks::compute_ramps((uint64_t *)v16, v17, v14);
  if (*((int *)this + 11) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 48;
    do
    {
      MelBanks::compute_lower((double **)(v14[0] + v10 - 48), v13, *((double *)v15[0] + v9));
      MelBanks::compute_upper((double **)(v14[0] + v10), v12, *((double *)v15[0] + v9 + 1));
      MelBanks::intersection((double **)v13, (double **)v12, __p, 0.0);
      std::vector<std::vector<double>>::push_back[abi:ne180100]((uint64_t *)this, (uint64_t)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v12[0])
      {
        v12[1] = v12[0];
        operator delete(v12[0]);
      }
      if (v13[0])
      {
        v13[1] = v13[0];
        operator delete(v13[0]);
      }
      ++v9;
      v10 += 24;
    }
    while (v9 < *((int *)this + 11));
  }
  MelBanks::normalize((uint64_t)this, v16);
  v13[0] = v14;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v13);
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
}

void sub_1AFF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  a16 = &a19;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  unint64_t v26 = *(void **)(v24 - 80);
  if (v26)
  {
    *(void *)(v24 - 72) = v26;
    operator delete(v26);
  }
  uint64_t v27 = *(void **)(v24 - 56);
  if (v27)
  {
    *(void *)(v24 - 48) = v27;
    operator delete(v27);
  }
  *(void *)(v24 - 56) = v23;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 56));
  _Unwind_Resume(a1);
}

void MelBanks::linspace(double a1@<D0>, double a2@<D1>, int a3@<W1>, double **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    int v7 = a3 - 1;
    if (a3 == 1)
    {
      uint64_t v8 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a4 + 2), 1uLL);
      uint64_t v9 = *a4;
      uint64_t v10 = a4[1];
      uint64_t v12 = &v8[v11];
      *uint64_t v8 = a1;
      uint64_t v13 = v8 + 1;
      while (v10 != v9)
      {
        uint64_t v14 = *((void *)v10-- - 1);
        *((void *)v8-- - 1) = v14;
      }
      *a4 = v8;
      a4[1] = v13;
      a4[2] = v12;
      if (!v9) {
        goto LABEL_30;
      }
    }
    else
    {
      std::string::size_type v16 = (uint64_t *)(a4 + 2);
      if (a3 < 2)
      {
        uint64_t v17 = 0;
        uint64_t v29 = 0;
      }
      else
      {
        uint64_t v17 = 0;
        int v18 = 0;
        do
        {
          double v19 = a1 + (a2 - a1) / (double)v7 * (double)v18;
          if ((unint64_t)v17 >= *v16)
          {
            std::string v20 = *a4;
            uint64_t v21 = v17 - *a4;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v23 = *v16 - (void)v20;
            if (v23 >> 2 > v22) {
              unint64_t v22 = v23 >> 2;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v22;
            }
            if (v24)
            {
              uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a4 + 2), v24);
              std::string v20 = *a4;
              uint64_t v17 = a4[1];
            }
            else
            {
              uint64_t v25 = 0;
            }
            unint64_t v26 = (double *)&v25[8 * v21];
            *unint64_t v26 = v19;
            uint64_t v27 = v26 + 1;
            while (v17 != v20)
            {
              uint64_t v28 = *((void *)v17-- - 1);
              *((void *)v26-- - 1) = v28;
            }
            *a4 = v26;
            a4[1] = v27;
            a4[2] = (double *)&v25[8 * v24];
            if (v20) {
              operator delete(v20);
            }
            uint64_t v17 = v27;
          }
          else
          {
            *v17++ = v19;
          }
          a4[1] = v17;
          ++v18;
        }
        while (v18 != v7);
        uint64_t v29 = *v16;
        if ((unint64_t)v17 < *v16)
        {
          double *v17 = a2;
          uint64_t v13 = v17 + 1;
LABEL_30:
          a4[1] = v13;
          return;
        }
      }
      uint64_t v9 = *a4;
      uint64_t v30 = v17 - *a4;
      unint64_t v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v32 = v29 - (void)v9;
      if (v32 >> 2 > v31) {
        unint64_t v31 = v32 >> 2;
      }
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v33 = v31;
      }
      if (v33)
      {
        long long v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a4 + 2), v33);
        uint64_t v9 = *a4;
        uint64_t v17 = a4[1];
      }
      else
      {
        long long v34 = 0;
      }
      uint64_t v35 = (double *)&v34[8 * v30];
      uint64_t v36 = (double *)&v34[8 * v33];
      double *v35 = a2;
      uint64_t v13 = v35 + 1;
      while (v17 != v9)
      {
        uint64_t v37 = *((void *)v17-- - 1);
        *((void *)v35-- - 1) = v37;
      }
      *a4 = v35;
      a4[1] = v13;
      a4[2] = v36;
      if (!v9) {
        goto LABEL_30;
      }
    }
    operator delete(v9);
    goto LABEL_30;
  }
}

void sub_1B0208(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MelBanks::mel_frequencies(MelBanks *this@<X0>, int a2@<W1>, double **a3@<X8>)
{
  int v6 = *((_DWORD *)this + 7);
  double v7 = (double)v6;
  if (*((unsigned char *)this + 48))
  {
    double v8 = log10(v7 / 700.0 + 1.0) * 2595.0;
    double v9 = log10((double)*((int *)this + 8) / 700.0 + 1.0) * 2595.0;
  }
  else
  {
    if (v6 >= 1000) {
      double v8 = log10(v7 / 1000.0) / 0.0298585176 + 15.0000006;
    }
    else {
      double v8 = v7 / 66.6666641;
    }
    int v10 = *((_DWORD *)this + 8);
    double v11 = (double)v10;
    if (v10 >= 1000) {
      double v9 = log10(v11 / 1000.0) / 0.0298585176 + 15.0000006;
    }
    else {
      double v9 = v11 / 66.6666641;
    }
  }
  MelBanks::linspace(v8, v9, a2, (double **)&v13);
  uint64_t v12 = (void *)v13;
  long long v15 = v13;
  uint64_t v16 = v14;
  MelBanks::mel_to_hz((uint64_t)this, (uint64_t)&v15, a3);
  if (v12) {
    operator delete(v12);
  }
}

void sub_1B0388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if ((void)a9) {
    operator delete((void *)a9);
  }
  _Unwind_Resume(exception_object);
}

void MelBanks::compute_diff(unint64_t *a1@<X1>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v3 = *a1;
  if (*a1 < a1[1] - 8)
  {
    uint64_t v5 = 0;
    int v6 = a2 + 2;
    do
    {
      double v7 = (double *)v3;
      double v8 = *(double *)(v3 + 8);
      v3 += 8;
      double v9 = v8 - *v7;
      if ((unint64_t)v5 >= *v6)
      {
        double v11 = *a2;
        uint64_t v12 = v5 - *a2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = *v6 - (void)v11;
        if (v14 >> 2 > v13) {
          unint64_t v13 = v14 >> 2;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v15);
          double v11 = *a2;
          uint64_t v5 = a2[1];
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v17 = (double *)&v16[8 * v12];
        double *v17 = v9;
        int v10 = v17 + 1;
        while (v5 != v11)
        {
          uint64_t v18 = *((void *)v5-- - 1);
          *((void *)v17-- - 1) = v18;
        }
        *a2 = v17;
        a2[1] = v10;
        a2[2] = (double *)&v16[8 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *uint64_t v5 = v9;
        int v10 = v5 + 1;
      }
      a2[1] = v10;
      uint64_t v5 = v10;
    }
    while (v3 < a1[1] - 8);
  }
}

void sub_1B04DC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MelBanks::compute_ramps(uint64_t *a1@<X1>, double **a2@<X2>, void *a3@<X8>)
{
  std::vector<std::vector<double>>::vector(a3, (a1[1] - *a1) >> 3);
  if (a1[1] != *a1)
  {
    unint64_t v6 = 0;
    double v8 = *a2;
    double v7 = a2[1];
    do
    {
      std::vector<double>::resize(*a3 + 24 * v6, v7 - v8);
      double v8 = *a2;
      double v7 = a2[1];
      uint64_t v9 = *a1;
      if (v7 != *a2)
      {
        unint64_t v10 = v7 - *a2;
        double v11 = *(double **)(*a3 + 24 * v6);
        if (v10 <= 1) {
          unint64_t v10 = 1;
        }
        uint64_t v12 = *a2;
        do
        {
          double v13 = *v12++;
          *v11++ = *(double *)(v9 + 8 * v6) - v13;
          --v10;
        }
        while (v10);
      }
      ++v6;
    }
    while (v6 < (a1[1] - v9) >> 3);
  }
}

void sub_1B05D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

double **MelBanks::compute_lower@<X0>(double **a1@<X1>, void *a2@<X8>, double a3@<D0>)
{
  __n128 result = (double **)std::vector<double>::vector(a2, a1[1] - *a1);
  unint64_t v6 = *a1;
  uint64_t v7 = (char *)a1[1] - (char *)*a1;
  if (v7)
  {
    unint64_t v8 = v7 >> 3;
    uint64_t v9 = *result;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      double v10 = *v6++;
      *v9++ = -v10 / a3;
      --v8;
    }
    while (v8);
  }
  return result;
}

double **MelBanks::compute_upper@<X0>(double **a1@<X1>, void *a2@<X8>, double a3@<D0>)
{
  __n128 result = (double **)std::vector<double>::vector(a2, a1[1] - *a1);
  unint64_t v6 = *a1;
  uint64_t v7 = (char *)a1[1] - (char *)*a1;
  if (v7)
  {
    unint64_t v8 = v7 >> 3;
    uint64_t v9 = *result;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      double v10 = *v6++;
      *v9++ = v10 / a3;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t std::vector<std::vector<double>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    void v16[4] = result;
    double v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Vector<float>>>(result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<double>>::__swap_out_circular_buffer(a1, v16);
    unint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<std::pair<int,int>>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    unint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B07FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<int,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

double **MelBanks::intersection@<X0>(double **a1@<X1>, double **a2@<X2>, void *a3@<X8>, double a4@<D0>)
{
  uint64_t result = (double **)std::vector<double>::vector(a3, a1[1] - *a1);
  unint64_t v8 = *a1;
  uint64_t v9 = (char *)a1[1] - (char *)*a1;
  if (v9)
  {
    unint64_t v10 = v9 >> 3;
    unint64_t v11 = *a2;
    unint64_t v12 = *result;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    do
    {
      double v13 = *v11++;
      double v14 = v13;
      double v15 = *v8++;
      double v16 = v15;
      if (v14 >= v15) {
        double v14 = v16;
      }
      if (v14 <= a4) {
        double v14 = a4;
      }
      *v12++ = v14;
      --v10;
    }
    while (v10);
  }
  return result;
}

void MelBanks::normalize(uint64_t a1, void *a2)
{
  std::vector<double>::vector(__p, ((uint64_t)(a2[1] - *a2) >> 3) - 2);
  uint64_t v4 = *(unsigned int *)(a1 + 44);
  if ((int)v4 >= 1)
  {
    unint64_t v5 = (double *)__p[0];
    unint64_t v6 = (double *)(*a2 + 16);
    uint64_t v7 = *(unsigned int *)(a1 + 44);
    do
    {
      *v5++ = 2.0 / (*v6 - *(v6 - 2));
      ++v6;
      --v7;
    }
    while (v7);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 40);
  uint64_t v9 = (double *)__p[0];
  if ((int)v8 >= 1)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      if ((int)v4 >= 1)
      {
        unint64_t v11 = *(uint64_t **)a1;
        uint64_t v12 = v4;
        double v13 = v9;
        do
        {
          uint64_t v15 = *v11;
          v11 += 3;
          uint64_t v14 = v15;
          double v16 = *(double *)(v15 + 8 * i);
          double v17 = *v13++;
          *(double *)(v14 + 8 * i) = v16 * v17;
          --v12;
        }
        while (v12);
      }
    }
    uint64_t v9 = (double *)__p[0];
  }
  if (v9)
  {
    __p[1] = v9;
    operator delete(v9);
  }
}

void MelBanks::mel_to_hz(uint64_t a1@<X0>, uint64_t a2@<X1>, double **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v6 = *(double **)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  if (*(unsigned char *)(a1 + 48))
  {
    if ((unint64_t)v6 < v5)
    {
      do
      {
        double v7 = (__exp10(*v6 / 2595.0) + -1.0) * 700.0;
        uint64_t v9 = a3[1];
        unint64_t v8 = (unint64_t)a3[2];
        if ((unint64_t)v9 >= v8)
        {
          unint64_t v11 = *a3;
          uint64_t v12 = v9 - *a3;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v8 - (void)v11;
          if (v14 >> 2 > v13) {
            unint64_t v13 = v14 >> 2;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            double v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 2), v15);
            unint64_t v11 = *a3;
            uint64_t v9 = a3[1];
          }
          else
          {
            double v16 = 0;
          }
          double v17 = (double *)&v16[8 * v12];
          double *v17 = v7;
          unint64_t v10 = v17 + 1;
          while (v9 != v11)
          {
            uint64_t v18 = *((void *)v9-- - 1);
            *((void *)v17-- - 1) = v18;
          }
          *a3 = v17;
          a3[1] = v10;
          a3[2] = (double *)&v16[8 * v15];
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          double *v9 = v7;
          unint64_t v10 = v9 + 1;
        }
        a3[1] = v10;
        ++v6;
      }
      while ((unint64_t)v6 < *(void *)(a2 + 8));
    }
  }
  else
  {
    if ((unint64_t)v6 < v5)
    {
      double v19 = 0;
      std::string v20 = a3 + 2;
      do
      {
        double v21 = *v6 * 66.6666641 + 0.0;
        if ((unint64_t)v19 >= *v20)
        {
          uint64_t v23 = *a3;
          uint64_t v24 = v19 - *a3;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v26 = *v20 - (void)v23;
          if (v26 >> 2 > v25) {
            unint64_t v25 = v26 >> 2;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 2), v27);
            uint64_t v23 = *a3;
            double v19 = a3[1];
          }
          else
          {
            uint64_t v28 = 0;
          }
          uint64_t v29 = (double *)&v28[8 * v24];
          double *v29 = v21;
          unint64_t v22 = v29 + 1;
          while (v19 != v23)
          {
            uint64_t v30 = *((void *)v19-- - 1);
            *((void *)v29-- - 1) = v30;
          }
          *a3 = v29;
          a3[1] = v22;
          a3[2] = (double *)&v28[8 * v27];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          double *v19 = v21;
          unint64_t v22 = v19 + 1;
        }
        a3[1] = v22;
        ++v6;
        unint64_t v5 = *(void *)(a2 + 8);
        double v19 = v22;
      }
      while ((unint64_t)v6 < v5);
      unint64_t v6 = *(double **)a2;
    }
    uint64_t v31 = v5 - (void)v6;
    if (v31)
    {
      unint64_t v32 = v31 >> 3;
      unint64_t v33 = *a3;
      if (v32 <= 1) {
        uint64_t v34 = 1;
      }
      else {
        uint64_t v34 = v32;
      }
      do
      {
        if (*v6 >= 15.0000006) {
          long double *v33 = exp((*v6 + -15.0000006) * 0.0687517774) * 1000.0;
        }
        ++v33;
        ++v6;
        --v34;
      }
      while (v34);
    }
  }
}

void sub_1B0C28(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Mel::Mel(Mel *this, int a2)
{
  *(_DWORD *)this = -1027080192;
  *((_DWORD *)this + 2) = 1064849900;
  *((_DWORD *)this + 3) = a2;
  *((int32x2_t *)this + 2) = vmul_s32(vdup_n_s32(a2 / 1000), (int32x2_t)0xA00000019);
  *((void *)this + 3) = 0x5000000800;
  *((_DWORD *)this + 8) = 65793;
  *((unsigned char *)this + 36) = 1;
  *((_DWORD *)this + 10) = 1024;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 6, "reflective");
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  Mel::buildNonSymHannWindow(this, *((_DWORD *)this + 4));
  operator new();
}

void sub_1B0E44()
{
}

void Mel::buildNonSymHannWindow(Mel *this, int a2)
{
  unint64_t v3 = (uint64_t *)((char *)this + 72);
  std::vector<double>::resize((uint64_t)this + 72, a2);
  if (a2 >= 1)
  {
    uint64_t v4 = 0;
    *(double *)&uint64_t v5 = (double)a2;
    uint64x2_t v14 = (uint64x2_t)vdupq_n_s64((unint64_t)a2 - 1);
    uint64x2_t v6 = (uint64x2_t)xmmword_204A30;
    int64x2_t v12 = vdupq_n_s64(2uLL);
    float64x2_t v13 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
    uint64_t v7 = *v3;
    uint64_t v8 = (a2 + 1) & 0x1FFFFFFFELL;
    float64x2_t v11 = (float64x2_t)vdupq_lane_s64(v5, 0);
    do
    {
      int64x2_t v18 = (int64x2_t)v6;
      int32x2_t v17 = vmovn_s64((int64x2_t)vcgeq_u64(v14, v6));
      v9.i64[0] = (int)v4;
      v9.i64[1] = (int)v4 + 1;
      float64x2_t __x = vdivq_f64(vmulq_f64(vcvtq_f64_s64(v9), v13), v11);
      double v16 = cos(__x.f64[1]);
      double v10 = cos(__x.f64[0]);
      if (v17.i8[0]) {
        *(double *)(v7 + 8 * v4) = (1.0 - v10) * 0.5;
      }
      if (v17.i8[4]) {
        *(double *)(v7 + 8 * v4 + 8) = (1.0 - v16) * 0.5;
      }
      v4 += 2;
      uint64x2_t v6 = (uint64x2_t)vaddq_s64(v18, v12);
    }
    while (v8 != v4);
  }
}

void Mel::Mel(Mel *this, int a2, int a3, int a4, int a5, int a6, char a7, char a8, float a9, char a10, char a11, char a12, int a13, long long *a14)
{
  *(_DWORD *)this = -1027080192;
  *((float *)this + 2) = a9;
  *((_DWORD *)this + 3) = a2;
  *((_DWORD *)this + 4) = a3;
  *((_DWORD *)this + 5) = a4;
  *((_DWORD *)this + 6) = a5;
  *((_DWORD *)this + 7) = a6;
  *((unsigned char *)this + 32) = a7;
  *((unsigned char *)this + 33) = a8;
  *((unsigned char *)this + 34) = a10;
  *((unsigned char *)this + 35) = a11;
  *((unsigned char *)this + 36) = a12;
  *((_DWORD *)this + 10) = a13;
  if (*((char *)a14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 2, *(const std::string::value_type **)a14, *((void *)a14 + 1));
    a3 = *((_DWORD *)this + 4);
  }
  else
  {
    long long v15 = *a14;
    *((void *)this + 8) = *((void *)a14 + 2);
    *((_OWORD *)this + 3) = v15;
  }
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  Mel::buildNonSymHannWindow(this, a3);
  operator new();
}

{
  Mel::Mel(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void sub_1B121C()
{
}

void Mel::~Mel(Mel *this)
{
  if (*((void *)this + 27))
  {
    uint64_t v5 = (void **)*((void *)this + 27);
    std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
    operator delete();
  }
  vDSP_destroy_fftsetupD(*((FFTSetupD *)this + 29));
  free(*((void **)this + 30));
  free(*((void **)this + 31));
  uint64_t v5 = (void **)((char *)this + 192);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)((char *)this + 168);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)((char *)this + 144);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 9);
  if (v4)
  {
    *((void *)this + 10) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
}

double Mel::applyWindow(uint64_t a1, void *a2, int a3, uint64_t *a4)
{
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4 >= 1)
  {
    int v5 = *(_DWORD *)(a1 + 24);
    BOOL v6 = __OFSUB__(v5, v4);
    int v7 = v5 - v4;
    if (v7 < 0 != v6) {
      int v8 = v7 + 1;
    }
    else {
      int v8 = v7;
    }
    int v9 = v4 + (v8 >> 1);
    double v10 = *(double **)(a1 + 72);
    uint64_t v11 = *a4;
    uint64_t v12 = (uint64_t)v8 >> 1;
    uint64_t v13 = *a2 + 8 * a3;
    do
    {
      double v14 = *v10++;
      double result = v14 * *(double *)(v13 + 8 * v12);
      *(double *)(v11 + 8 * v12++) = result;
    }
    while (v12 < v9);
  }
  return result;
}

double Mel::padSignal@<D0>(uint64_t a1@<X0>, const void **a2@<X1>, const std::string *a3@<X2>, void *a4@<X8>)
{
  unint64_t v8 = (((unsigned char *)a2[1] - (unsigned char *)*a2) >> 3) + 2 * *(int *)(a1 + 40);
  uint64_t v21 = 0;
  std::vector<double>::vector(__p, v8, &v21);
  if (!std::string::compare(a3, "none"))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(a4, *a2, (uint64_t)a2[1], ((unsigned char *)a2[1] - (unsigned char *)*a2) >> 3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    if (!std::string::compare(a3, "reflective"))
    {
      uint64_t v11 = (char *)*a2;
      uint64_t v12 = *(int *)(a1 + 40);
      uint64_t v13 = (char *)__p[0];
      if ((char *)*a2 + 8 * v12 + 8 != *a2)
      {
        uint64_t v14 = 8 * v12;
        long long v15 = __p[0];
        do
        {
          *v15++ = *(void *)&v11[v14];
          v14 -= 8;
        }
        while (v14 != -8);
      }
      double v16 = (char *)a2[1];
      if (v16 != v11)
      {
        memmove(&v13[8 * v12], v11, v16 - v11);
        uint64_t v11 = (char *)a2[1];
        uint64_t v12 = *(int *)(a1 + 40);
      }
      if (v11 != &v11[-8 * v12 - 8])
      {
        int32x2_t v17 = (char *)__p[1];
        uint64_t v18 = 8 * ~v12;
        double v19 = v11 - 8;
        do
        {
          uint64_t v20 = *(void *)v19;
          v19 -= 8;
          *(void *)&v17[v18] = v20;
          v18 += 8;
        }
        while (v18);
      }
    }
    else if (!std::string::compare(a3, "constant"))
    {
      int v9 = (char *)a2[1];
      if (v9 != *a2) {
        memmove((char *)__p[0] + 8 * *(int *)(a1 + 40), *a2, v9 - (unsigned char *)*a2);
      }
    }
    double result = *(double *)__p;
    *(_OWORD *)a4 = *(_OWORD *)__p;
    a4[2] = v23;
  }
  return result;
}

void sub_1B1598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Mel::computeMagSpec(uint64_t a1, const DSPDoubleComplex **a2, double **a3)
{
  vDSP_ctozD(*a2, 2, (const DSPDoubleSplitComplex *)(a1 + 240), 1, (uint64_t)(*(_DWORD *)(a1 + 24) + (*(int *)(a1 + 24) < 0)) >> 1);
  vDSP_fft_zripD(*(FFTSetupD *)(a1 + 232), (const DSPDoubleSplitComplex *)(a1 + 240), 1, *(int *)(a1 + 224), 1);
  BOOL v6 = *(double **)(a1 + 240);
  int v5 = *(double **)(a1 + 248);
  float v7 = *v6 * 0.5;
  unint64_t v8 = *a3;
  **a3 = fabsf(v7);
  float v9 = *v5 * 0.5;
  double v10 = fabsf(v9);
  int v11 = *(_DWORD *)(a1 + 24);
  if (v11 >= 0) {
    int v12 = *(_DWORD *)(a1 + 24);
  }
  else {
    int v12 = v11 + 1;
  }
  LODWORD(v13) = v12 >> 1;
  v8[(int)v13] = v10;
  if (v11 >= 4)
  {
    if ((int)v13 <= 2) {
      uint64_t v13 = 2;
    }
    else {
      uint64_t v13 = v13;
    }
    uint64_t v14 = v5 + 1;
    long long v15 = v6 + 1;
    double v16 = v8 + 1;
    uint64_t v17 = v13 - 1;
    do
    {
      double v18 = *v15++;
      double v19 = v18 * 0.5 * (v18 * 0.5);
      double v20 = *v14++;
      *v16++ = sqrt(v19 + v20 * 0.5 * (v20 * 0.5));
      --v17;
    }
    while (v17);
  }
}

void Mel::applyFilterBank(uint64_t a1, const double **a2, void *a3)
{
  if (*(int *)(a1 + 28) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      vDSP_dotprD(*(const double **)(*(void *)(a1 + 144) + v7), 1, *a2, 1, (double *)(*a3 + v6), *(_DWORD *)(a1 + 24) / 2 + 1);
      ++v8;
      v7 += 24;
      v6 += 8;
    }
    while (v8 < *(int *)(a1 + 28));
  }
}

void Mel::formatOutput(uint64_t a1, double **a2, double **a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 28);
  if ((int)v3 >= 1)
  {
    int v5 = *a2;
    if (*(unsigned char *)(a1 + 34)) {
      double v6 = 20.0;
    }
    else {
      double v6 = 1.0;
    }
    uint64_t v7 = *a3;
    int v8 = *(unsigned __int8 *)(a1 + 33);
    do
    {
      long double v9 = *v5;
      if (*v5 < 0.00001)
      {
        *int v5 = 0.00001;
        long double v9 = 0.00001;
      }
      double v10 = v6 * log10(v9);
      *uint64_t v7 = v10;
      if (v8)
      {
        double v11 = (v10 - *(float *)a1) / (float)-*(float *)a1;
        *uint64_t v7 = v11;
        double v12 = 0.0;
        if (v11 < 0.0 || (double v12 = 1.0, v11 > 1.0)) {
          *uint64_t v7 = v12;
        }
      }
      ++v5;
      ++v7;
      --v3;
    }
    while (v3);
  }
}

void Mel::preemphasis(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = a2[1] - *a2;
  std::vector<double>::resize((uint64_t)a3, (int)(v6 >> 3));
  uint64_t v7 = (void *)*a2;
  int v8 = (void *)*a3;
  *(void *)*a3 = *(void *)*a2;
  if ((int)((unint64_t)v6 >> 3) >= 2)
  {
    double v9 = -*(float *)(a1 + 8);
    double v10 = (double *)(v7 + 1);
    double v11 = (double *)(v8 + 1);
    uint64_t v12 = ((unint64_t)v6 >> 3) - 1;
    do
    {
      *v11++ = *v10 + v9 * *(v10 - 1);
      ++v10;
      --v12;
    }
    while (v12);
  }
}

void sub_1B18E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Mel::compute_mel(uint64_t a1@<X0>, __int16 **a2@<X1>, uint64_t *a3@<X8>)
{
  std::string __p = 0;
  double v19 = 0;
  double v20 = 0;
  int v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    uint64_t v7 = 0;
    do
    {
      float v8 = (double)*v5 * 0.0000305175781;
      if (v7 >= v20)
      {
        double v10 = (float *)__p;
        uint64_t v11 = ((char *)v7 - (unsigned char *)__p) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = (char *)v20 - (unsigned char *)__p;
        if (((char *)v20 - (unsigned char *)__p) >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v20, v14);
          double v10 = (float *)__p;
          uint64_t v7 = v19;
        }
        else
        {
          long long v15 = 0;
        }
        double v16 = (float *)&v15[4 * v11];
        *double v16 = v8;
        double v9 = v16 + 1;
        while (v7 != v10)
        {
          int v17 = *((_DWORD *)v7-- - 1);
          *((_DWORD *)v16-- - 1) = v17;
        }
        std::string __p = v16;
        double v19 = v9;
        double v20 = (float *)&v15[4 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *uint64_t v7 = v8;
        double v9 = v7 + 1;
      }
      double v19 = v9;
      ++v5;
      uint64_t v7 = v9;
    }
    while (v5 != v6);
  }
  Mel::compute_mel(a1, (float **)&__p, a3);
  if (__p)
  {
    double v19 = (float *)__p;
    operator delete(__p);
  }
}

void sub_1B1A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Mel::compute_mel(uint64_t a1@<X0>, float **a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = *a2;
  int v5 = a2[1];
  unint64_t v7 = v5 - *a2;
  uint64_t v24 = 0;
  long long v23 = 0uLL;
  std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((char *)&v23, v6, v5, v7);
  if (*(unsigned char *)(a1 + 32))
  {
    Mel::preemphasis(a1, (uint64_t *)&v23, &v21);
    if ((void)v23)
    {
      *((void *)&v23 + 1) = v23;
      operator delete((void *)v23);
    }
    long long v23 = v21;
    uint64_t v24 = v22;
  }
  if (*(char *)(a1 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
  }
  else {
    std::string v20 = *(std::string *)(a1 + 48);
  }
  Mel::padSignal(a1, (const void **)&v23, &v20, &v21);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  unint64_t v8 = *(int *)(a1 + 24);
  v18[0] = 0;
  std::vector<double>::vector(v19, v8, v18);
  std::vector<double>::vector(v18, *(_DWORD *)(a1 + 24) / 2 + 1);
  std::vector<double>::vector(v17, *(int *)(a1 + 28));
  std::vector<double>::vector(&v15, *(int *)(a1 + 28));
  unint64_t v9 = (((uint64_t)(*((void *)&v21 + 1) - v21) >> 3) - *(int *)(a1 + 24)) / (unint64_t)*(int *)(a1 + 20);
  if ((v9 & 0x80000000) == 0)
  {
    int v10 = 0;
    int v11 = v9 + 1;
    do
    {
      Mel::applyWindow(a1, &v21, *(_DWORD *)(a1 + 20) * v10, (uint64_t *)v19);
      Mel::computeMagSpec(a1, (const DSPDoubleComplex **)v19, (double **)v18);
      Mel::applyFilterBank(a1, (const double **)v18, v17);
      Mel::formatOutput(a1, (double **)v17, (double **)&v15);
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      std::string __p = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((char *)&__p, (double *)v15, v16, ((char *)v16 - (unsigned char *)v15) >> 3);
      std::vector<std::vector<float>>::push_back[abi:ne180100](a3, (uint64_t)&__p);
      if (__p)
      {
        uint64_t v13 = __p;
        operator delete(__p);
      }
      ++v10;
    }
    while (v11 != v10);
  }
  if (v15)
  {
    double v16 = (double *)v15;
    operator delete(v15);
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
  if ((void)v21)
  {
    *((void *)&v21 + 1) = v21;
    operator delete((void *)v21);
  }
  if ((void)v23)
  {
    *((void *)&v23 + 1) = v23;
    operator delete((void *)v23);
  }
}

void sub_1B1CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  unint64_t v33 = *(void **)(v31 - 80);
  if (v33)
  {
    *(void *)(v31 - 72) = v33;
    operator delete(v33);
  }
  *(void *)(v31 - 80) = v30;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 80));
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    void v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Vector<float>>>(result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v16);
    unint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<std::pair<int,int>>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *unint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    unint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B1EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<int,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(char *result, float *a2, float *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::pair<int,float>>::__vallocate[abi:ne180100](result, a4);
    unint64_t v7 = (double *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      float v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B1F50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Preprocessing::Preprocessing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, std::string *__str)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v9 = (void **)(a1 + 8);
  unint64_t v10 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 56) = 0u;
  unint64_t v11 = (void **)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  unint64_t v12 = (std::string *)(a1 + 104);
  uint64_t v22 = (std::string *)(a1 + 128);
  long long v23 = (std::string *)(a1 + 80);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 192) = 0xC20C0000C1E00000;
  *(void *)(a1 + 216) = 0;
  uint64_t v13 = (std::string *)(a1 + 216);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  uint64_t v14 = (std::string *)(a1 + 264);
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    if (*(char *)(a1 + 55) < 0) {
      operator delete(v10->__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v31 = *(std::string *)a2;
  }
  *unint64_t v10 = v31;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v31 = *(std::string *)a3;
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*v9);
  }
  *(std::string *)unint64_t v9 = v31;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v31 = *(std::string *)a4;
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v11);
  }
  *(std::string *)unint64_t v11 = v31;
  std::string::operator=(v14, __str);
  std::allocate_shared[abi:ne180100]<Checkpointable,std::allocator<Checkpointable>,std::string const&,void>(&v31);
  long long v15 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = 0uLL;
  double v16 = *(std::__shared_weak_count **)(a1 + 256);
  *(_OWORD *)(a1 + 248) = v15;
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    if (v31.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v31.__r_.__value_.__l.__size_);
    }
  }
  std::string::assign(v23, ".wav");
  std::string::assign(v12, ".mel");
  *(_DWORD *)(a1 + 152) = 24000;
  std::string::assign(v22, "silence_trimmed");
  *(_OWORD *)(a1 + 156) = xmmword_212C50;
  *(void *)(a1 + 180) = 0x4110000000000080;
  *(void *)(a1 + 172) = 0x5DC000000300;
  *(_DWORD *)(a1 + 188) = 32;
  std::string::basic_string[abi:ne180100]<0>(&v29, "preprocess");
  if (*(char *)(a1 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else {
    std::string v30 = *v10;
  }
  boost::filesystem::path::append_v3(&v30, &v29);
  std::string::basic_string[abi:ne180100]<0>(&__p, "preprocess_config.json");
  boost::filesystem::path::append_v3(&v30, &__p);
  std::string v31 = v30;
  memset(&v30, 0, sizeof(v30));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v30, (char *)&v31);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v30, 0);
  unsigned __int8 v17 = v29.__r_.__value_.__s.__data_[0];
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (v17 && v17 != 255)
  {
    TrainingUtils::read_json_from_file((const char *)&v31, (uint64_t)&__p);
    std::string::basic_string[abi:ne180100]<0>(&v30, "data_filtering");
    v29.__r_.__value_.__s.__data_[0] = 0;
    v29.__r_.__value_.__l.__size_ = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>((char *)&__p, (const void **)&v30.__r_.__value_.__l.__data_, (unsigned __int8 *)&v29, (uint64_t)v26);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v29.__r_.__value_.__l.__size_, v29.__r_.__value_.__s.__data_[0]);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v30, "enable_filtering");
    v29.__r_.__value_.__s.__data_[0] = 1;
    *(unsigned char *)(a1 + 200) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v26, (const void **)&v30.__r_.__value_.__l.__data_, (unsigned __int8 *)&v29);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v30, "enable_normalization");
    v29.__r_.__value_.__s.__data_[0] = 0;
    *(unsigned char *)(a1 + 201) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v26, (const void **)&v30.__r_.__value_.__l.__data_, (unsigned __int8 *)&v29);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v30, "spl_threshold");
    v29.__r_.__value_.__r.__words[0] = 0x4039000000000000;
    float v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>(v26, (const void **)&v30.__r_.__value_.__l.__data_, (uint64_t)&v29);
    *(float *)(a1 + 204) = v18;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v30, "snr_threshold");
    v29.__r_.__value_.__r.__words[0] = 0x4041800000000000;
    float v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>(v26, (const void **)&v30.__r_.__value_.__l.__data_, (uint64_t)&v29);
    *(float *)(a1 + 208) = v19;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v30, "data_preprocessing");
    v29.__r_.__value_.__s.__data_[0] = 0;
    v29.__r_.__value_.__l.__size_ = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>((char *)&__p, (const void **)&v30.__r_.__value_.__l.__data_, (unsigned __int8 *)&v29, (uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v29.__r_.__value_.__l.__size_, v29.__r_.__value_.__s.__data_[0]);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v29, "normlization_before_VI");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("minmax", v24, (const void **)&v29.__r_.__value_.__l.__data_, &v30);
    if (*(char *)(a1 + 239) < 0) {
      operator delete(v13->__r_.__value_.__l.__data_);
    }
    std::string *v13 = v30;
    *((unsigned char *)&v30.__r_.__value_.__s + 23) = 0;
    v30.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v30, "minmax_boost_factor");
    v29.__r_.__value_.__r.__words[0] = 0x3FE0000000000000;
    float v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>(v24, (const void **)&v30.__r_.__value_.__l.__data_, (uint64_t)&v29);
    *(float *)(a1 + 240) = v20;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v30, "minimum_number_filtered_file");
    LODWORD(v29.__r_.__value_.__l.__data_) = 96;
    *(_DWORD *)(a1 + 212) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(v24, (const void **)&v30.__r_.__value_.__l.__data_, (unsigned int *)&v29);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
  }
  else
  {
    *(_WORD *)(a1 + 200) = 1;
    *(void *)(a1 + 204) = 0x420C000041C80000;
    std::string::assign(v13, "minmax");
    *(_DWORD *)(a1 + 240) = 1056964608;
    *(_DWORD *)(a1 + 212) = 96;
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1B25E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, uint64_t *a11, uint64_t a12, uint64_t *a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&a15);
  if (*(char *)(v39 - 89) < 0) {
    operator delete(*(void **)(v39 - 112));
  }
  if (*(char *)(v32 + 287) < 0) {
    operator delete(*v38);
  }
  unint64_t v41 = *(std::__shared_weak_count **)(v32 + 256);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (*(char *)(v32 + 239) < 0) {
    operator delete(*v37);
  }
  if (*(char *)(v32 + 151) < 0) {
    operator delete(*a9);
  }
  if (*(char *)(v32 + 127) < 0) {
    operator delete(*v35);
  }
  if (*(char *)(v32 + 103) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v32 + 79) < 0) {
    operator delete(*v36);
  }
  if (*(char *)(v32 + 55) < 0) {
    operator delete(*v34);
  }
  if (*(char *)(v32 + 31) < 0) {
    operator delete(*v33);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>@<X0>(char *a1@<X0>, const void **a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v12, v9);
    unint64_t v10 = std::string::insert(&v12, 0, "cannot use value() with ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
    long long v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v13, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v13);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v12, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v12);
  if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v13, (unsigned __int8 **)&v12))a3 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v13); {
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a4, (uint64_t)a3);
  }
}

void sub_1B28F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t **nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(uint64_t **a1)
{
  return a1;
}

BOOL nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(char *a1, const void **a2, unsigned __int8 *a3)
{
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v12, v9);
    unint64_t v10 = std::string::insert(&v12, 0, "cannot use value() with ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
    long long v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v13, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v13);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v12, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v12);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v13, (unsigned __int8 **)&v12))
  {
    int v5 = *a3;
  }
  else
  {
    unint64_t v6 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v13);
    v12.__r_.__value_.__s.__data_[0] = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v6, &v12);
    int v5 = v12.__r_.__value_.__s.__data_[0];
  }
  return v5 != 0;
}

void sub_1B2AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>(char *a1, const void **a2, uint64_t a3)
{
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    float v8 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v11, v8);
    unint64_t v9 = std::string::insert(&v11, 0, "cannot use value() with ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
    long long v12 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v12, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v12);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v11, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v11);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v12, (unsigned __int8 **)&v11))
  {
    return *(double *)a3;
  }
  unint64_t v6 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v12);
  v11.__r_.__value_.__r.__words[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v6, (double *)&v11);
  return *(double *)&v11.__r_.__value_.__l.__data_;
}

void sub_1B2C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(char *__s@<X2>, char *a2@<X0>, const void **a3@<X1>, std::string *a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::string,0>(a2, a3, (uint64_t)__p, a4);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B2CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(char *a1, const void **a2, unsigned int *a3)
{
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    char v8 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v11, v8);
    unint64_t v9 = std::string::insert(&v11, 0, "cannot use value() with ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
    long long v12 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v12, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v12);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v11, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v11);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v12, (unsigned __int8 **)&v11))
  {
    return *a3;
  }
  unint64_t v6 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v12);
  LODWORD(v11.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v6, (int *)&v11);
  return LODWORD(v11.__r_.__value_.__l.__data_);
}

void sub_1B2E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void Preprocessing::stop(Preprocessing *this)
{
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = (void *)((char *)this + 264);
    if (*((char *)this + 287) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    int v4 = 136315138;
    int v5 = v3;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "TaskId: %s, Stopping preprocessing.", (uint8_t *)&v4, 0xCu);
  }
  *(unsigned char *)this = 1;
}

uint64_t Preprocessing::extract_mels(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v125, "extract_mels");
  if (*(unsigned char *)a1 || (Checkpointable::should_skip_stage(*(char **)(a1 + 248), (unsigned __int8 *)v125) & 1) != 0) {
    goto LABEL_122;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "metadata_mel.json");
  int v4 = (_OWORD *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = *v4;
    v124.__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
  }
  boost::filesystem::path::append_v3(&v124, (std::string *)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  long long v122 = 0uLL;
  uint64_t v123 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "mel");
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v121, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v121.__r_.__value_.__l.__data_ = *v4;
    v121.__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
  }
  boost::filesystem::path::append_v3(&v121, &__p);
  int v5 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>((std::string *)buf, (char *)&v121);
  std::__fs::filesystem::__create_directory(v5, 0);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v121.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "metadata_feature.json");
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v121, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v121.__r_.__value_.__l.__data_ = *v4;
    v121.__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
  }
  boost::filesystem::path::append_v3(&v121, (std::string *)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  TrainingUtils::read_metadata_from_file((const char *)&v121, (uint64_t *)&__p);
  double v83 = (int *)(a1 + 176);
  std::allocate_shared[abi:ne180100]<Mel,std::allocator<Mel>,int &,void>((int *)(a1 + 176), &v118);
  int checkpoint_stage_step = Checkpointable::get_checkpoint_stage_step(*(char **)(a1 + 248), (unsigned __int8 *)v125);
  if (checkpoint_stage_step >= 1)
  {
    unint64_t v7 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>((std::string *)buf, (char *)&v124);
    std::__fs::filesystem::__status(v7, 0);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    int v8 = 0;
    if (!v117.__r_.__value_.__s.__data_[0] || v117.__r_.__value_.__s.__data_[0] == 255) {
      goto LABEL_29;
    }
    TrainingUtils::read_metadata_from_file((const char *)&v124, (uint64_t *)buf);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vdeallocate((void **)&v122);
    long long v122 = *(_OWORD *)buf;
    uint64_t v123 = *(void *)&buf[16];
    memset(buf, 0, 24);
    v117.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  }
  int v8 = checkpoint_stage_step;
LABEL_29:
  unint64_t v9 = v8;
  std::string::size_type v10 = __p.__r_.__value_.__r.__words[0];
  if (v9 >= (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4)
  {
    int v82 = 0;
  }
  else
  {
    uint64_t v81 = (_OWORD *)(a1 + 8);
    int v82 = 0;
    std::string v11 = (const char *)(a1 + 264);
    uint64_t v80 = a2;
    uint64_t v12 = 16 * v9;
    do
    {
      uint64_t v13 = v10 + v12;
      uint64_t v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v10 + v12, "utterance_name");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v14, &v117);
      LogObject = Diagnostics_GetLogObject();
      if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
      {
        double v16 = (const char *)(a1 + 264);
        if (*(char *)(a1 + 287) < 0) {
          double v16 = *(const char **)v11;
        }
        unsigned __int8 v17 = &v117;
        if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unsigned __int8 v17 = (std::string *)v117.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = v16;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v17;
        _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "TaskId: %s, Processing %s", buf, 0x16u);
      }
      if (*(unsigned char *)a1)
      {
        float v18 = Diagnostics_GetLogObject();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          float v19 = (const char *)(a1 + 264);
          if (*(char *)(a1 + 287) < 0) {
            float v19 = *(const char **)v11;
          }
          *(_DWORD *)buf = 136315138;
          *(void *)&buf[4] = v19;
          _os_log_impl(&def_5A5E8, v18, OS_LOG_TYPE_INFO, "TaskId: %s, WARN: Exit due to stopping.", buf, 0xCu);
        }
        Checkpointable::write_checkpoint(*(uint64_t **)(a1 + 248), (uint64_t)v125, v9);
        int v20 = 2;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v114, "silence_trimmed");
        if (*(char *)(a1 + 31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)buf, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
        }
        else
        {
          *(_OWORD *)buf = *v81;
          *(void *)&buf[16] = *(void *)(a1 + 24);
        }
        boost::filesystem::path::append_v3((std::string *)buf, &v114);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v117.__r_.__value_.__l.__data_, (const void **)(a1 + 80), (uint64_t)&v112);
        std::string v113 = v112;
        memset(&v112, 0, sizeof(v112));
        boost::filesystem::path::append_v3((std::string *)buf, &v113);
        long long v115 = *(_OWORD *)buf;
        uint64_t v116 = *(void *)&buf[16];
        memset(buf, 0, 24);
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v114.__r_.__value_.__l.__data_);
        }
        reader = PCMFile::create_reader((char *)&v115);
        uint64_t v22 = (PCMFile::Reader *)reader;
        if (!reader)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          if (*(char *)(a1 + 287) < 0) {
            std::string v11 = *(const char **)v11;
          }
          std::string::size_type v78 = (const char *)&v115;
          if (v116 < 0) {
            std::string::size_type v78 = (const char *)v115;
          }
          StringFormatter::StringFormatter((StringFormatter *)buf, "TaskId: %s, Can't read wavfile from %s", v11, v78);
          std::logic_error::logic_error(exception, (const std::string *)buf);
        }
        uint64_t v23 = *((void *)reader + 6);
        uint64_t v84 = (int *)reader;
        std::vector<short>::vector(&v114, v23);
        PCMFile::Reader::read_samples(v22, v23, v114.__r_.__value_.__l.__data_, 2, 0, 1.0);
        int v24 = Diagnostics_GetLogObject();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          unint64_t v25 = (const char *)(a1 + 264);
          if (*(char *)(a1 + 287) < 0) {
            unint64_t v25 = *(const char **)v11;
          }
          uint64_t v26 = &v115;
          if (v116 < 0) {
            uint64_t v26 = (long long *)v115;
          }
          int v27 = v84[6];
          *(_DWORD *)buf = 136315906;
          *(void *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v23;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&buf[24] = v26;
          __int16 v128 = 1024;
          LODWORD(v129) = v27;
          _os_log_impl(&def_5A5E8, v24, OS_LOG_TYPE_INFO, "TaskId: %s, Read %ld samples from file %s with sample rate %d", buf, 0x26u);
        }
        if (v84[6] != *v83)
        {
          double v110 = 0;
          uint64_t v111 = 0;
          double v109 = 0;
          std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v109, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_, (uint64_t)(v114.__r_.__value_.__l.__size_ - v114.__r_.__value_.__r.__words[0]) >> 1);
          SiriTTS::SpeechFeature::SpeechFeatureExtractor::resample((uint64_t)&v109, v84[6], *v83, (uint64_t)buf);
          if (v114.__r_.__value_.__r.__words[0])
          {
            v114.__r_.__value_.__l.__size_ = v114.__r_.__value_.__r.__words[0];
            operator delete(v114.__r_.__value_.__l.__data_);
          }
          std::string v114 = *(std::string *)buf;
          memset(buf, 0, 24);
          if (v109)
          {
            double v110 = v109;
            operator delete(v109);
          }
        }
        Mel::compute_mel(v118, (__int16 **)&v114, (uint64_t *)&v113);
        TrainingUtils::flatten_2d_to_1d<float>(&v113, &v112);
        std::string::basic_string[abi:ne180100]<0>(&v106, "mel");
        if (*(char *)(a1 + 31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)buf, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
        }
        else
        {
          *(_OWORD *)buf = *v81;
          *(void *)&buf[16] = *(void *)(a1 + 24);
        }
        boost::filesystem::path::append_v3((std::string *)buf, &v106);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v117.__r_.__value_.__l.__data_, (const void **)(a1 + 104), (uint64_t)&v104);
        std::string v105 = v104;
        memset(&v104, 0, sizeof(v104));
        boost::filesystem::path::append_v3((std::string *)buf, &v105);
        long long v107 = *(_OWORD *)buf;
        uint64_t v108 = *(void *)&buf[16];
        memset(buf, 0, 24);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v105.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v104.__r_.__value_.__l.__data_);
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v106.__r_.__value_.__l.__data_);
        }
        TrainingUtils::write_vector_to_file<float>();
        uint64_t v28 = Diagnostics_GetLogObject();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          std::string v29 = (const char *)(a1 + 264);
          if (*(char *)(a1 + 287) < 0) {
            std::string v29 = *(const char **)v11;
          }
          uint64_t v30 = (uint64_t)(*(void *)(v113.__r_.__value_.__r.__words[0] + 8) - *(void *)v113.__r_.__value_.__l.__data_) >> 2;
          std::string v31 = &v107;
          if (v108 < 0) {
            std::string v31 = (long long *)v107;
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&buf[4] = v29;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = 0xAAAAAAAAAAAAAAABLL
                              * ((uint64_t)(v113.__r_.__value_.__l.__size_ - v113.__r_.__value_.__r.__words[0]) >> 3);
          *(_WORD *)&buf[22] = 2048;
          *(void *)&buf[24] = v30;
          __int16 v128 = 2080;
          double v129 = v31;
          _os_log_impl(&def_5A5E8, v28, OS_LOG_TYPE_INFO, "TaskId: %s, Write mel [%ld:%ld] to file %s", buf, 0x2Au);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v113.__r_.__value_.__l.__size_ - v113.__r_.__value_.__r.__words[0]) >> 3) <= *(int *)(a1 + 172))
        {
          uint64_t v36 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v13, "phone_duration");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(v36, &v106);
          Preprocessing::realign_durations((uint64_t)&v106, buf, *(float *)(a1 + 168)* (float)(0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v113.__r_.__value_.__l.__size_ - v113.__r_.__value_.__r.__words[0]) >> 3)));
          if (v106.__r_.__value_.__r.__words[0])
          {
            v106.__r_.__value_.__l.__size_ = v106.__r_.__value_.__r.__words[0];
            operator delete(v106.__r_.__value_.__l.__data_);
          }
          v106.__r_.__value_.__s.__data_[0] = 0;
          v106.__r_.__value_.__l.__size_ = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v106);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v106);
          uint64_t v37 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v13, "utterance_name");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v102, v37);
          uint64_t v38 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v106, "utterance_name");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v102);
          unsigned __int8 v39 = *(unsigned char *)v38;
          *(unsigned char *)uint64_t v38 = v102[0];
          v102[0] = v39;
          uint64_t v40 = (uint64_t *)v38[1];
          v38[1] = (uint64_t)v103;
          int v103 = v40;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v38);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v102);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v103, v102[0]);
          uint64_t v41 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v13, "transcription");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v100, v41);
          uint64_t v42 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v106, "transcription");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v100);
          unsigned __int8 v43 = *(unsigned char *)v42;
          *(unsigned char *)uint64_t v42 = v100[0];
          v100[0] = v43;
          uint64_t v44 = (uint64_t *)v42[1];
          v42[1] = (uint64_t)v101;
          uint64_t v101 = v44;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v100);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v101, v100[0]);
          uint64_t v45 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v13, "words");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v98, v45);
          uint64_t v46 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v106, "words");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v98);
          unsigned __int8 v47 = *(unsigned char *)v46;
          *(unsigned char *)uint64_t v46 = v98[0];
          v98[0] = v47;
          int v48 = (uint64_t *)v46[1];
          v46[1] = (uint64_t)v99;
          int v99 = v48;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v46);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v98);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v99, v98[0]);
          uint64_t v49 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v13, "phone_sequence");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v96, v49);
          int v50 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v106, "phone_sequence");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v96);
          unsigned __int8 v51 = *(unsigned char *)v50;
          *(unsigned char *)int v50 = v96[0];
          v96[0] = v51;
          unint64_t v52 = (uint64_t *)v50[1];
          v50[1] = (uint64_t)v97;
          double v97 = v52;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v50);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v96);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v97, v96[0]);
          uint64_t v53 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v13, "phone_list");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v94, v53);
          uint64_t v54 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v106, "phone_list");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v94);
          unsigned __int8 v55 = *(unsigned char *)v54;
          *(unsigned char *)uint64_t v54 = v94[0];
          v94[0] = v55;
          int v56 = (uint64_t *)v54[1];
          v54[1] = (uint64_t)v95;
          int v95 = v56;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v54);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v94);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v95, v94[0]);
          double v93 = 0;
          v92[0] = 2;
          v105.__r_.__value_.__r.__words[0] = *(void *)buf;
          v104.__r_.__value_.__r.__words[0] = *(void *)&buf[8];
          double v93 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((float **)&v105, (float **)&v104);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v92);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v92);
          int v57 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v106, "phone_duration");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v92);
          unsigned __int8 v58 = *(unsigned char *)v57;
          *(unsigned char *)int v57 = v92[0];
          v92[0] = v58;
          unint64_t v59 = (uint64_t *)v57[1];
          v57[1] = (uint64_t)v93;
          double v93 = v59;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v92);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v93, v92[0]);
          uint64_t v60 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v13, "phone_pitch");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v90, v60);
          long long v61 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v106, "phone_pitch");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v90);
          unsigned __int8 v62 = *(unsigned char *)v61;
          *(unsigned char *)long long v61 = v90[0];
          v90[0] = v62;
          unint64_t v63 = (uint64_t *)v61[1];
          v61[1] = (uint64_t)v91;
          uint64_t v91 = v63;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v90);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v91, v90[0]);
          uint64_t v64 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v13, "phone_energy");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v88, v64);
          double v65 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v106, "phone_energy");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v88);
          unsigned __int8 v66 = *(unsigned char *)v65;
          *(unsigned char *)double v65 = v88;
          unsigned __int8 v88 = v66;
          double v67 = (uint64_t *)v65[1];
          v65[1] = (uint64_t)v89;
          double v89 = v67;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v65);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v88);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v89, v88);
          v86[0] = 6;
          unint64_t v87 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v113.__r_.__value_.__l.__size_ - v113.__r_.__value_.__r.__words[0]) >> 3);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v86);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v86);
          double v68 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v106, "n_frames");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v86);
          unsigned __int8 v69 = *(unsigned char *)v68;
          *(unsigned char *)double v68 = v86[0];
          v86[0] = v69;
          int v70 = (uint64_t *)v68[1];
          v68[1] = v87;
          unint64_t v87 = (unint64_t)v70;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v68);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v86);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v87, v86[0]);
          std::string::size_type size = v113.__r_.__value_.__l.__size_;
          std::string::size_type v72 = v113.__r_.__value_.__r.__words[0];
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::push_back[abi:ne180100]((uint64_t *)&v122, (uint64_t)&v106);
          if (*(void *)(v80 + 24))
          {
            LODWORD(v85) = 4;
            HIDWORD(v85) = v9;
            unint64_t v79 = v79 & 0xFFFFFFFF00000000 | ((__p.__r_.__value_.__l.__size_
                                                             - __p.__r_.__value_.__r.__words[0]) >> 4);
            std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()(v80, v85, (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4);
          }
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v106);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v106.__r_.__value_.__l.__size_, v106.__r_.__value_.__s.__data_[0]);
          if (*(void *)buf)
          {
            *(void *)&buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
          }
          int v20 = 0;
          v82 -= 1431655765 * ((size - v72) >> 3);
        }
        else
        {
          uint64_t v32 = Diagnostics_GetLogObject();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
          {
            unint64_t v33 = (const char *)(a1 + 264);
            if (*(char *)(a1 + 287) < 0) {
              unint64_t v33 = *(const char **)v11;
            }
            uint64_t v34 = &v117;
            if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v34 = (std::string *)v117.__r_.__value_.__r.__words[0];
            }
            int v35 = *(_DWORD *)(a1 + 172);
            *(_DWORD *)buf = 136315906;
            *(void *)&buf[4] = v33;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = v34;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&buf[24] = 0xAAAAAAAAAAAAAAABLL
                                * ((uint64_t)(v113.__r_.__value_.__l.__size_ - v113.__r_.__value_.__r.__words[0]) >> 3);
            __int16 v128 = 1024;
            LODWORD(v129) = v35;
            _os_log_impl(&def_5A5E8, v32, OS_LOG_TYPE_INFO, "TaskId: %s, WARN: %s mel frame size is larger than expected. mel_size=%ld, max_mel_size=%d", buf, 0x26u);
          }
          int v20 = 4;
        }
        if (SHIBYTE(v108) < 0) {
          operator delete((void *)v107);
        }
        if (v112.__r_.__value_.__r.__words[0])
        {
          v112.__r_.__value_.__l.__size_ = v112.__r_.__value_.__r.__words[0];
          operator delete(v112.__r_.__value_.__l.__data_);
        }
        *(void *)buf = &v113;
        std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if (v114.__r_.__value_.__r.__words[0])
        {
          v114.__r_.__value_.__l.__size_ = v114.__r_.__value_.__r.__words[0];
          operator delete(v114.__r_.__value_.__l.__data_);
        }
        (*(void (**)(int *))(*(void *)v84 + 8))(v84);
        if (SHIBYTE(v116) < 0) {
          operator delete((void *)v115);
        }
      }
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v117.__r_.__value_.__l.__data_);
      }
      if (v20 == 2) {
        break;
      }
      ++v9;
      std::string::size_type v10 = __p.__r_.__value_.__r.__words[0];
      v12 += 16;
    }
    while (v9 < (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4);
  }
  TrainingUtils::write_metadata_to_file((uint64_t *)&v124, (uint64_t *)&v122);
  uint64_t v73 = Diagnostics_GetLogObject();
  if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
  {
    int v74 = (void *)(a1 + 264);
    if (*(char *)(a1 + 287) < 0) {
      int v74 = (void *)*v74;
    }
    double v75 = (float)(*(float *)(a1 + 168) * (float)v82) / 1000.0;
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[4] = v74;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v82;
    *(_WORD *)&buf[18] = 2048;
    *(double *)&buf[20] = v75 / 60.0;
    _os_log_impl(&def_5A5E8, v73, OS_LOG_TYPE_INFO, "TaskId: %s, Total mel frames = %d, total duration = %f mins", buf, 0x1Cu);
  }
  if (v119) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v119);
  }
  *(void *)buf = &__p;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v121.__r_.__value_.__l.__data_);
  }
  *(void *)buf = &v122;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
LABEL_122:
  if (v126 < 0) {
    operator delete(v125[0]);
  }
  return 0;
}

void sub_1B3FFC(_Unwind_Exception *a1)
{
  if (STACK[0x290]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x290]);
  }
  *(void *)(v1 - 160) = &STACK[0x298];
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 160));
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  *(void *)(v1 - 160) = v1 - 240;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 160));
  if (*(char *)(v1 - 185) < 0) {
    operator delete(*(void **)(v1 - 208));
  }
  if (*(char *)(v1 - 161) < 0) {
    operator delete(*(void **)(v1 - 184));
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(uint64_t a1, const std::string::value_type *a2)
{
  uint64_t v13 = a2;
  if (*(unsigned char *)a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v7 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v10, v7);
    int v8 = std::string::insert(&v10, 0, "cannot use operator[] with a string argument with ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v8->__r_.__value_.__r.__words[2];
    long long v11 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(305, (uint64_t)&v11, exception);
  }
  uint64_t v3 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>(*(void *)(a1 + 8), &v13);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 + 8 == v3) {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>();
  }
  return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>(v4, &v13)+ 56;
}

void sub_1B44D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    int v8 = (char *)result;
  }
  else {
    int v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      long long v9 = a1;
    }
    else {
      long long v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  std::string v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      long long v11 = a2;
    }
    else {
      long long v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void *TrainingUtils::flatten_2d_to_1d<float>@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  int64_t v4 = *(void *)(*a1 + 8) - *(void *)*a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) * (v4 >> 2);
  int v11 = 0;
  uint64_t result = std::vector<float>::vector(a2, v5, &v11);
  uint64_t v7 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      uint64_t result = memcpy((void *)(*a2 + v8), *(const void **)(v7 + v9), v4);
      ++v10;
      uint64_t v7 = *a1;
      v9 += 24;
      v8 += 4 * (v4 >> 2);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) > v10);
  }
  return result;
}

uint64_t TrainingUtils::write_vector_to_file<float>()
{
  std::ofstream::basic_ofstream(v1);
  std::ostream::write();
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v1 + (unint64_t)*(v1[0] - 3)), *(_DWORD *)((char *)&v1[4] + (unint64_t)*(v1[0] - 3)) | 4);
  }
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return 0;
}

void sub_1B4844(_Unwind_Exception *exception_object)
{
}

float Preprocessing::realign_durations@<S0>(uint64_t a1@<X1>, void *a2@<X8>, float a3@<S0>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a2, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  size_t v6 = *(float **)a1;
  uint64_t v7 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  for (float i = 0.0; --v7; float i = i + v9)
    float v9 = *v6++;
  float result = a3 - i;
  *(float *)(a2[1] - 4) = result;
  return result;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>@<D0>(char *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<float>,0>(a1, (uint64_t)a2);
}

void sub_1B4910(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(unsigned __int8 *a1, char *__s)
{
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    unint64_t v5 = operator new(0x18uLL);
    v5[2] = 0;
    v5[1] = 0;
    *unint64_t v5 = v5 + 1;
    *((void *)a1 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    int v4 = *a1;
  }
  if (v4 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    unint64_t v10 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    int v11 = std::string::insert(&v13, 0, "cannot use operator[] with a string argument with ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(305, (uint64_t)__p, exception);
  }
  size_t v6 = (uint64_t **)*((void *)a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  uint64_t v7 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, &v13);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  return v7 + 7;
}

void sub_1B4A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::TransitionModel::Tuple>>(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    std::string::size_type v15 = v14;
    double v16 = &v14[16 * v10];
    float v18 = &v14[16 * v13];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, a2);
    unsigned __int8 v17 = v16 + 16;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

void sub_1B4BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::function<int ()(SiriTTS::TTSTrainer::CallbackMessage)>::operator()(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a2;
  int v6 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v5);
}

uint64_t Preprocessing::validate_input_audio(Preprocessing *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "validate_input_audio");
  if (*(unsigned char *)this || (Checkpointable::should_skip_stage(*((char **)this + 31), (unsigned __int8 *)__p) & 1) != 0)
  {
    uint64_t v2 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&buf, "metadata_data.json");
    uint64_t v4 = (_OWORD *)((char *)this + 8);
    if (*((char *)this + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)this + 1), *((void *)this + 2));
    }
    else
    {
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *v4;
      v27.__r_.__value_.__r.__words[2] = *((void *)this + 3);
    }
    boost::filesystem::path::append_v3(&v27, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    uint64_t v5 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&buf, (char *)&v27);
    std::__fs::filesystem::__status(v5, 0);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v25 != 255 && (_BYTE)v25)
    {
      TrainingUtils::read_metadata_from_file((const char *)&v27, &v25);
      uint64_t v7 = v25;
      uint64_t v8 = v26;
      if (v25 == v26)
      {
LABEL_53:
        uint64_t v2 = 0;
      }
      else
      {
        long long v21 = (char **)((char *)this + 264);
        while (1)
        {
          uint64_t v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v7, "utterance_name");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v9, &v24);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v24.__r_.__value_.__l.__data_, (const void **)this + 10, (uint64_t)&v22);
          std::string buf = v22;
          memset(&v22, 0, sizeof(v22));
          if (*((char *)this + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v23, *((const std::string::value_type **)this + 1), *((void *)this + 2));
          }
          else
          {
            *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *v4;
            v23.__r_.__value_.__r.__words[2] = *((void *)this + 3);
          }
          boost::filesystem::path::append_v3(&v23, &buf);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v22.__r_.__value_.__l.__data_);
          }
          reader = PCMFile::create_reader((char *)&v23);
          uint64_t v11 = reader;
          if (reader)
          {
            int v12 = *((_DWORD *)reader + 6);
            if (v12 == *((_DWORD *)this + 38))
            {
              int v13 = 0;
            }
            else
            {
              LogObject = Diagnostics_GetLogObject();
              if (os_log_type_enabled(LogObject, OS_LOG_TYPE_ERROR))
              {
                float v18 = (char *)this + 264;
                if (*((char *)this + 287) < 0) {
                  float v18 = *v21;
                }
                uint64_t v19 = &v23;
                if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  uint64_t v19 = (std::string *)v23.__r_.__value_.__r.__words[0];
                }
                int v20 = *((_DWORD *)this + 38);
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v19;
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
                int v31 = v20;
                __int16 v32 = 1024;
                int v33 = v12;
                _os_log_error_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_ERROR, "TaskId: %s, The sample rate of the wavfile from %s should be %d, not %d", (uint8_t *)&buf, 0x22u);
              }
              int v13 = 1;
            }
            (*(void (**)(const char *))(*(void *)v11 + 8))(v11);
          }
          else
          {
            uint64_t v14 = Diagnostics_GetLogObject();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              double v16 = (char *)this + 264;
              if (*((char *)this + 287) < 0) {
                double v16 = *v21;
              }
              unsigned __int8 v17 = &v23;
              if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                unsigned __int8 v17 = (std::string *)v23.__r_.__value_.__r.__words[0];
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v17;
              _os_log_error_impl(&def_5A5E8, v14, OS_LOG_TYPE_ERROR, "TaskId: %s, Can't read wavfile from %s", (uint8_t *)&buf, 0x16u);
            }
            int v13 = 1;
          }
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v23.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v24.__r_.__value_.__l.__data_);
          }
          if (v13) {
            break;
          }
          v7 += 16;
          if (v7 == v8) {
            goto LABEL_53;
          }
        }
        uint64_t v2 = 1;
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    }
    else
    {
      int v6 = Diagnostics_GetLogObject();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        Preprocessing::validate_input_audio((uint64_t *)&v27, v6);
      }
      uint64_t v2 = 1;
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1B5074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Preprocessing::compute_audioquality_metrics(Preprocessing *this)
{
  std::string::basic_string[abi:ne180100]<0>(v91, "compute_audioquality_metrics");
  if (*(unsigned char *)this || (Checkpointable::should_skip_stage(*((char **)this + 31), (unsigned __int8 *)v91) & 1) != 0) {
    goto LABEL_62;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "metadata_data_audioquality.json");
  uint64_t v2 = (std::string *)((char *)this + 8);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v90, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
  boost::filesystem::path::append_v3(&v90, (std::string *)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  long long v88 = 0uLL;
  uint64_t v89 = 0;
  std::string::basic_string[abi:ne180100]<0>(buf, "metadata_data.json");
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v87, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
  boost::filesystem::path::append_v3(&v87, (std::string *)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  TrainingUtils::read_metadata_from_file((const char *)&v87, &v85);
  int v3 = *((_DWORD *)this + 48);
  int v84 = 0;
  int v83 = 1;
  if (!*((unsigned char *)this + 201))
  {
    int v84 = 2;
    int v83 = 3;
    int v3 = 2143289344;
  }
  LogObject = Diagnostics_GetLogObject();
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = (void *)((char *)this + 264);
    if (*((char *)this + 287) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    int v6 = *((unsigned __int8 *)this + 201);
    double v7 = *((float *)this + 51);
    double v8 = *((float *)this + 52);
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v6;
    *(_WORD *)&buf[18] = 2048;
    *(double *)&buf[20] = v7;
    *(_WORD *)&buf[28] = 2048;
    *(double *)&buf[30] = v8;
    _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "TaskId: %s, Estimating SNR/SPL: enable_normalization=%d, spl_threshold=%f, snr_threshold=%f", buf, 0x26u);
  }
  int checkpoint_stage_step = Checkpointable::get_checkpoint_stage_step(*((char **)this + 31), (unsigned __int8 *)v91);
  if (checkpoint_stage_step >= 1)
  {
    uint64_t v10 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>((std::string *)buf, (char *)&v90);
    std::__fs::filesystem::__status(v10, 0);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    int v11 = 0;
    if (!v82.__r_.__value_.__s.__data_[0] || v82.__r_.__value_.__s.__data_[0] == 255) {
      goto LABEL_26;
    }
    TrainingUtils::read_metadata_from_file((const char *)&v90, (uint64_t *)buf);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vdeallocate((void **)&v88);
    long long v88 = *(_OWORD *)buf;
    uint64_t v89 = *(void *)&buf[16];
    memset(buf, 0, 24);
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
  }
  int v11 = checkpoint_stage_step;
LABEL_26:
  unint64_t v12 = v11;
  uint64_t v13 = v85;
  if (v12 < (v86 - v85) >> 4)
  {
    uint64_t v14 = (void *)((char *)this + 264);
    std::string::size_type v15 = (const void **)((char *)this + 80);
    double v16 = (uint64_t **)&v77;
    unsigned __int8 v17 = (uint64_t **)&v75;
    uint64_t v18 = 16 * v12;
    do
    {
      uint64_t v63 = v18;
      uint64_t v19 = v13 + v18;
      uint64_t v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v13 + v18, "utterance_name");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v20, &v82);
      long long v21 = Diagnostics_GetLogObject();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        std::string v22 = v14;
        if (*((char *)this + 287) < 0) {
          std::string v22 = (void *)*v14;
        }
        std::string v23 = &v82;
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string v23 = (std::string *)v82.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&buf[4] = v22;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v23;
        _os_log_impl(&def_5A5E8, v21, OS_LOG_TYPE_INFO, "TaskId: %s, Estimating SNR/SPL: %s", buf, 0x16u);
      }
      int v62 = *(unsigned __int8 *)this;
      if (*(unsigned char *)this)
      {
        std::string v24 = Diagnostics_GetLogObject();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          uint64_t v25 = v14;
          if (*((char *)this + 287) < 0) {
            uint64_t v25 = (void *)*v14;
          }
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&buf[4] = v25;
          _os_log_impl(&def_5A5E8, v24, OS_LOG_TYPE_INFO, "TaskId: %s, WARN: Exit due to stopping.", buf, 0xCu);
        }
        Checkpointable::write_checkpoint(*((uint64_t **)this + 31), (uint64_t)v91, v12);
      }
      else
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v82.__r_.__value_.__l.__data_, v15, (uint64_t)&__p);
        *(_OWORD *)std::string buf = __p;
        *(void *)&buf[16] = v80;
        uint64_t v80 = 0;
        long long __p = 0uLL;
        if (*((char *)this + 31) < 0) {
          std::string::__init_copy_ctor_external(&v81, *((const std::string::value_type **)this + 1), *((void *)this + 2));
        }
        else {
          std::string v81 = *v2;
        }
        boost::filesystem::path::append_v3(&v81, (std::string *)buf);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (SHIBYTE(v80) < 0) {
          operator delete((void *)__p);
        }
        *(void *)&long long __p = 0x40D7700000000000;
        LODWORD(v80) = 1061997773;
        BYTE4(v80) = 1;
        *((void *)&__p + 1) = __PAIR64__(*((_DWORD *)this + 49), v3);
        assess_audio_quality((char *)&v81, &__p, (uint64_t *)v78);
        v76[0] = 0;
        uint64_t v77 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v76);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v76);
        uint64_t v26 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v19, "utterance_name");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v74, v26);
        std::string v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v76, "utterance_name");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v74);
        unsigned __int8 v28 = *(unsigned char *)v27;
        *(unsigned char *)std::string v27 = v74[0];
        v74[0] = v28;
        uint64_t v29 = v27[1];
        v27[1] = v75;
        uint64_t v75 = v29;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v74);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v17, v74[0]);
        uint64_t v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v19, "transcription");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v72, v30);
        int v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v76, "transcription");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v72);
        unsigned __int8 v32 = *(unsigned char *)v31;
        *(unsigned char *)int v31 = v72[0];
        v72[0] = v32;
        int v33 = (uint64_t *)v31[1];
        v31[1] = (uint64_t)v73;
        uint64_t v73 = v33;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v72);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v73, v72[0]);
        uint64_t v34 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v19, "words");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v70, v34);
        int v35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v76, "words");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v70);
        unsigned __int8 v36 = *(unsigned char *)v35;
        *(unsigned char *)int v35 = v70[0];
        v70[0] = v36;
        uint64_t v37 = (uint64_t *)v35[1];
        v35[1] = (uint64_t)v71;
        uint64_t v71 = v37;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v70);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v71, v70[0]);
        uint64_t v38 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v19, "phone_sequence");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v68, v38);
        unsigned __int8 v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v76, "phone_sequence");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v68);
        unsigned __int8 v40 = *(unsigned char *)v39;
        *(unsigned char *)unsigned __int8 v39 = v68[0];
        v68[0] = v40;
        uint64_t v41 = (uint64_t *)v39[1];
        v39[1] = (uint64_t)v69;
        unsigned __int8 v69 = v41;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v68);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v69, v68[0]);
        double v93 = &v84;
        uint64_t v42 = std::__tree<std::__value_type<AudioQualityMetric,double>,std::__map_value_compare<AudioQualityMetric,std::__value_type<AudioQualityMetric,double>,std::less<AudioQualityMetric>,true>,std::allocator<std::__value_type<AudioQualityMetric,double>>>::__emplace_unique_key_args<AudioQualityMetric,std::piecewise_construct_t const&,std::tuple<AudioQualityMetric const&>,std::tuple<>>(v78, &v84, (uint64_t)&std::piecewise_construct, &v93)[5];
        v66[0] = 7;
        double v67 = v42;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v66);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v66);
        unsigned __int8 v43 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v76, "spl");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v66);
        unsigned __int8 v44 = *(unsigned char *)v43;
        *(unsigned char *)unsigned __int8 v43 = v66[0];
        v66[0] = v44;
        uint64_t v45 = (uint64_t *)v43[1];
        v43[1] = (uint64_t)v67;
        double v67 = v45;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v66);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v67, v66[0]);
        double v93 = &v83;
        uint64_t v46 = std::__tree<std::__value_type<AudioQualityMetric,double>,std::__map_value_compare<AudioQualityMetric,std::__value_type<AudioQualityMetric,double>,std::less<AudioQualityMetric>,true>,std::allocator<std::__value_type<AudioQualityMetric,double>>>::__emplace_unique_key_args<AudioQualityMetric,std::piecewise_construct_t const&,std::tuple<AudioQualityMetric const&>,std::tuple<>>(v78, &v83, (uint64_t)&std::piecewise_construct, &v93)[5];
        v64[0] = 7;
        double v65 = v46;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v64);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v64);
        unsigned __int8 v47 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v76, "snr");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v64);
        unsigned __int8 v48 = *(unsigned char *)v47;
        *(unsigned char *)unsigned __int8 v47 = v64[0];
        v64[0] = v48;
        uint64_t v49 = (uint64_t *)v47[1];
        v47[1] = (uint64_t)v65;
        double v65 = v49;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v64);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v65, v64[0]);
        int v50 = Diagnostics_GetLogObject();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
        {
          unsigned __int8 v51 = this;
          unint64_t v52 = v17;
          uint64_t v53 = v14;
          uint64_t v54 = v16;
          unsigned __int8 v55 = v15;
          int v56 = v2;
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v57 = &v81;
          }
          else {
            int v57 = (std::string *)v81.__r_.__value_.__r.__words[0];
          }
          double v93 = &v84;
          unsigned __int8 v58 = std::__tree<std::__value_type<AudioQualityMetric,double>,std::__map_value_compare<AudioQualityMetric,std::__value_type<AudioQualityMetric,double>,std::less<AudioQualityMetric>,true>,std::allocator<std::__value_type<AudioQualityMetric,double>>>::__emplace_unique_key_args<AudioQualityMetric,std::piecewise_construct_t const&,std::tuple<AudioQualityMetric const&>,std::tuple<>>(v78, &v84, (uint64_t)&std::piecewise_construct, &v93)[5];
          double v93 = &v83;
          unint64_t v59 = std::__tree<std::__value_type<AudioQualityMetric,double>,std::__map_value_compare<AudioQualityMetric,std::__value_type<AudioQualityMetric,double>,std::less<AudioQualityMetric>,true>,std::allocator<std::__value_type<AudioQualityMetric,double>>>::__emplace_unique_key_args<AudioQualityMetric,std::piecewise_construct_t const&,std::tuple<AudioQualityMetric const&>,std::tuple<>>(v78, &v83, (uint64_t)&std::piecewise_construct, &v93)[5];
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&buf[4] = v57;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v58;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&buf[24] = v59;
          _os_log_impl(&def_5A5E8, v50, OS_LOG_TYPE_INFO, "File=%s, SPL = %.3f SNR = %.3f\n", buf, 0x20u);
          uint64_t v2 = v56;
          std::string::size_type v15 = v55;
          double v16 = v54;
          uint64_t v14 = v53;
          unsigned __int8 v17 = v52;
          this = v51;
        }
        double v93 = &v84;
        std::__tree<std::__value_type<AudioQualityMetric,double>,std::__map_value_compare<AudioQualityMetric,std::__value_type<AudioQualityMetric,double>,std::less<AudioQualityMetric>,true>,std::allocator<std::__value_type<AudioQualityMetric,double>>>::__emplace_unique_key_args<AudioQualityMetric,std::piecewise_construct_t const&,std::tuple<AudioQualityMetric const&>,std::tuple<>>(v78, &v84, (uint64_t)&std::piecewise_construct, &v93);
        double v93 = &v83;
        std::__tree<std::__value_type<AudioQualityMetric,double>,std::__map_value_compare<AudioQualityMetric,std::__value_type<AudioQualityMetric,double>,std::less<AudioQualityMetric>,true>,std::allocator<std::__value_type<AudioQualityMetric,double>>>::__emplace_unique_key_args<AudioQualityMetric,std::piecewise_construct_t const&,std::tuple<AudioQualityMetric const&>,std::tuple<>>(v78, &v83, (uint64_t)&std::piecewise_construct, &v93);
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::push_back[abi:ne180100]((uint64_t *)&v88, (uint64_t)v76);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v76);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v16, v76[0]);
        std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::destroy((uint64_t)v78, v78[1]);
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v60 = v63;
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v82.__r_.__value_.__l.__data_);
        uint64_t v60 = v63;
      }
      if (v62) {
        break;
      }
      ++v12;
      uint64_t v13 = v85;
      uint64_t v18 = v60 + 16;
    }
    while (v12 < (v86 - v85) >> 4);
  }
  TrainingUtils::write_metadata_to_file((uint64_t *)&v90, (uint64_t *)&v88);
  *(void *)std::string buf = &v85;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  *(void *)std::string buf = &v88;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
LABEL_62:
  if (v92 < 0) {
    operator delete(v91[0]);
  }
  return 0;
}

void sub_1B5C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  *(void *)(v60 - 160) = &a52;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 160));
  if (a60 < 0) {
    operator delete(__p);
  }
  *(void *)(v60 - 160) = v60 - 256;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 160));
  if (*(char *)(v60 - 201) < 0) {
    operator delete(*(void **)(v60 - 224));
  }
  if (*(char *)(v60 - 177) < 0) {
    operator delete(*(void **)(v60 - 200));
  }
  _Unwind_Resume(a1);
}

uint64_t Preprocessing::snr_spl_data_filtering(Preprocessing *this)
{
  std::string::basic_string[abi:ne180100]<0>(v92, "snr_spl_data_filtering");
  if (!*(unsigned char *)this && (Checkpointable::should_skip_stage(*((char **)this + 31), (unsigned __int8 *)v92) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "metadata_data_filtered.json");
    uint64_t v2 = (_OWORD *)((char *)this + 8);
    if (*((char *)this + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v91, *((const std::string::value_type **)this + 1), *((void *)this + 2));
    }
    else
    {
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = *v2;
      v91.__r_.__value_.__r.__words[2] = *((void *)this + 3);
    }
    boost::filesystem::path::append_v3(&v91, (std::string *)buf);
    if ((v97[9] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "metadata_data_audioquality.json");
    if (*((char *)this + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v90, *((const std::string::value_type **)this + 1), *((void *)this + 2));
    }
    else
    {
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = *v2;
      v90.__r_.__value_.__r.__words[2] = *((void *)this + 3);
    }
    boost::filesystem::path::append_v3(&v90, (std::string *)buf);
    if ((v97[9] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    TrainingUtils::read_metadata_from_file((const char *)&v90, &v88);
    if (*((unsigned char *)this + 200))
    {
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      uint64_t v87 = 0;
      uint64_t v82 = 0;
      int v83 = 0;
      uint64_t v84 = 0;
      LogObject = Diagnostics_GetLogObject();
      if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = (void *)((char *)this + 264);
        if (*((char *)this + 287) < 0) {
          uint64_t v4 = (void *)*v4;
        }
        int v5 = *((unsigned __int8 *)this + 201);
        double v6 = *((float *)this + 51);
        double v7 = *((float *)this + 52);
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&buf[4] = v4;
        __int16 v96 = 1024;
        *(_DWORD *)double v97 = v5;
        *(_WORD *)&v97[4] = 2048;
        *(double *)&v97[6] = v6;
        *(_WORD *)&v97[14] = 2048;
        *(double *)&v97[16] = v7;
        _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "TaskId: %s, Estimating SNR/SPL: enable_normalization=%d, spl_threshold=%f, snr_threshold=%f", buf, 0x26u);
      }
      uint64_t v8 = v88;
      uint64_t v9 = v89;
      if (v88 != v89)
      {
        unsigned __int8 v66 = (char **)((char *)this + 264);
        do
        {
          uint64_t v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8, "utterance_name");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v10, &__p);
          int v11 = Diagnostics_GetLogObject();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string buf = 136315138;
            *(void *)&buf[4] = p_p;
            _os_log_impl(&def_5A5E8, v11, OS_LOG_TYPE_INFO, "Filtering SNR/SPL: %s", buf, 0xCu);
          }
          v79[0] = 0;
          uint64_t v80 = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v79);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v79);
          uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8, "utterance_name");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v77, v13);
          uint64_t v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v79, "utterance_name");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v77);
          char v15 = *(unsigned char *)v14;
          *(unsigned char *)uint64_t v14 = v77[0];
          v77[0] = v15;
          double v16 = (uint64_t *)v14[1];
          v14[1] = (uint64_t)v78;
          std::string::size_type v78 = v16;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v77);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v78, v77[0]);
          uint64_t v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8, "transcription");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v75, v17);
          uint64_t v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v79, "transcription");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v75);
          char v19 = *(unsigned char *)v18;
          *(unsigned char *)uint64_t v18 = v75[0];
          v75[0] = v19;
          uint64_t v20 = (uint64_t *)v18[1];
          v18[1] = (uint64_t)v76;
          uint64_t v76 = v20;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v75);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v76, v75[0]);
          uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8, "words");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v73, v21);
          std::string v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v79, "words");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v73);
          char v23 = *(unsigned char *)v22;
          *(unsigned char *)std::string v22 = v73[0];
          v73[0] = v23;
          std::string v24 = (uint64_t *)v22[1];
          v22[1] = (uint64_t)v74;
          int v74 = v24;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v73);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v74, v73[0]);
          uint64_t v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8, "phone_sequence");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v71, v25);
          uint64_t v26 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v79, "phone_sequence");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v71);
          char v27 = *(unsigned char *)v26;
          *(unsigned char *)uint64_t v26 = v71[0];
          v71[0] = v27;
          unsigned __int8 v28 = (uint64_t *)v26[1];
          v26[1] = (uint64_t)v72;
          std::string::size_type v72 = v28;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v71);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v72, v71[0]);
          uint64_t v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8, "spl");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v69, v29);
          uint64_t v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v79, "spl");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v69);
          char v31 = *(unsigned char *)v30;
          *(unsigned char *)uint64_t v30 = v69[0];
          v69[0] = v31;
          unsigned __int8 v32 = (uint64_t *)v30[1];
          v30[1] = (uint64_t)v70;
          int v70 = v32;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v69);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v70, v69[0]);
          uint64_t v33 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8, "snr");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v67, v33);
          uint64_t v34 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v79, "snr");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
          char v35 = *(unsigned char *)v34;
          *(unsigned char *)uint64_t v34 = v67[0];
          v67[0] = v35;
          unsigned __int8 v36 = (uint64_t *)v34[1];
          v34[1] = (uint64_t)v68;
          double v68 = v36;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v34);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v68, v67[0]);
          uint64_t v37 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v79, "spl");
          float v94 = 0.0;
          nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v37, &v94);
          if (v94 <= *((float *)this + 51)
            && (uint64_t v38 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v79, "snr"), v94 = 0.0, nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v38, &v94), v94 >= *((float *)this + 52)))
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::push_back[abi:ne180100](&v85, (uint64_t)v79);
            unsigned __int8 v47 = Diagnostics_GetLogObject();
            if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
            {
              unsigned __int8 v48 = (char *)this + 264;
              if (*((char *)this + 287) < 0) {
                unsigned __int8 v48 = *v66;
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v49 = &__p;
              }
              else {
                uint64_t v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              int v50 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v79, "spl");
              float v94 = 0.0;
              nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v50, &v94);
              float v51 = v94;
              unint64_t v52 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v79, "snr");
              float v94 = 0.0;
              nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v52, &v94);
              *(_DWORD *)std::string buf = 136315906;
              *(void *)&buf[4] = v48;
              __int16 v96 = 2080;
              *(void *)double v97 = v49;
              *(_WORD *)&v97[8] = 2048;
              *(double *)&v97[10] = v51;
              *(_WORD *)&v97[18] = 2048;
              *(double *)&v97[20] = v94;
              uint64_t v45 = v47;
              uint64_t v46 = "TaskId: %s, File=%s, SPL = %.3f SNR = %.3f, PASS\n";
              goto LABEL_40;
            }
          }
          else
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::push_back[abi:ne180100](&v82, (uint64_t)v79);
            unsigned __int8 v39 = Diagnostics_GetLogObject();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
            {
              unsigned __int8 v40 = (char *)this + 264;
              if (*((char *)this + 287) < 0) {
                unsigned __int8 v40 = *v66;
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v41 = &__p;
              }
              else {
                uint64_t v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              uint64_t v42 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v79, "spl");
              float v94 = 0.0;
              nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v42, &v94);
              float v43 = v94;
              unsigned __int8 v44 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v79, "snr");
              float v94 = 0.0;
              nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v44, &v94);
              *(_DWORD *)std::string buf = 136315906;
              *(void *)&buf[4] = v40;
              __int16 v96 = 2080;
              *(void *)double v97 = v41;
              *(_WORD *)&v97[8] = 2048;
              *(double *)&v97[10] = v43;
              *(_WORD *)&v97[18] = 2048;
              *(double *)&v97[20] = v94;
              uint64_t v45 = v39;
              uint64_t v46 = "TaskId: %s, File=%s, SPL = %.3f SNR = %.3f, NOT PASS\n";
LABEL_40:
              _os_log_impl(&def_5A5E8, v45, OS_LOG_TYPE_INFO, v46, buf, 0x2Au);
            }
          }
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v79);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v80, v79[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          v8 += 16;
        }
        while (v8 != v9);
      }
      uint64_t v53 = Diagnostics_GetLogObject();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
      {
        uint64_t v54 = (void *)((char *)this + 264);
        if (*((char *)this + 287) < 0) {
          uint64_t v54 = (void *)*v54;
        }
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&buf[4] = v54;
        __int16 v96 = 2048;
        *(double *)double v97 = (float)((float)((float)(unint64_t)((v86 - v85) >> 4)
                                       / (float)(unint64_t)((v89 - v88) >> 4))
                               * 100.0);
        *(_WORD *)&v97[8] = 2048;
        *(void *)&v97[10] = (v86 - v85) >> 4;
        *(_WORD *)&v97[18] = 2048;
        *(void *)&v97[20] = (v89 - v88) >> 4;
        _os_log_impl(&def_5A5E8, v53, OS_LOG_TYPE_INFO, "TaskId: %s, SPL/SNR pass rate=%.2f%%, pass_file_number=%ld, total_file_number=%ld\n", buf, 0x2Au);
      }
      if (*((int *)this + 53) > (unint64_t)((v86 - v85) >> 4))
      {
        uint64_t v55 = v82;
        int v56 = v83;
        unint64_t v57 = (uint64_t)&v83[-v82] >> 4;
        if ((uint64_t)&v83[-v82] < 1)
        {
          unsigned __int8 v58 = 0;
          uint64_t v60 = 0;
        }
        else
        {
          unsigned __int8 v58 = (unsigned __int8 *)std::get_temporary_buffer[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)&v83[-v82] >> 4);
          uint64_t v60 = v59;
        }
        std::__stable_sort<std::_ClassicAlgPolicy,Preprocessing::snr_spl_data_filtering(void)::$_0 &,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>>(v55, v56, v57, v58, v60);
        if (v58) {
          operator delete(v58);
        }
        if (*((int *)this + 53) - ((v86 - v85) >> 4) >= (unint64_t)((uint64_t)&v83[-v82] >> 4)) {
          uint64_t v61 = (uint64_t)&v83[-v82] >> 4;
        }
        else {
          uint64_t v61 = *((int *)this + 53) - ((v86 - v85) >> 4);
        }
        int v62 = Diagnostics_GetLogObject();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
        {
          uint64_t v63 = (void *)((char *)this + 264);
          if (*((char *)this + 287) < 0) {
            uint64_t v63 = (void *)*v63;
          }
          int v64 = *((_DWORD *)this + 53);
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&buf[4] = v63;
          __int16 v96 = 1024;
          *(_DWORD *)double v97 = v61;
          *(_WORD *)&v97[4] = 1024;
          *(_DWORD *)&v97[6] = v64;
          _os_log_impl(&def_5A5E8, v62, OS_LOG_TYPE_INFO, "TaskId: %s, Not having enough filtered files, adding additional %d files, minimum_number_filtered_file=%d\n", buf, 0x18u);
        }
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(&v85, v86, v82, v82 + 16 * (int)v61, (int)v61);
      }
      TrainingUtils::write_metadata_to_file((uint64_t *)&v91, &v85);
      *(void *)std::string buf = &v82;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)std::string buf = &v85;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    else
    {
      TrainingUtils::write_metadata_to_file((uint64_t *)&v91, &v88);
    }
    *(void *)std::string buf = &v88;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
  }
  if (v93 < 0) {
    operator delete(v92[0]);
  }
  return 0;
}

void sub_1B6830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  *(void *)(v57 - 176) = &a43;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 176));
  *(void *)(v57 - 176) = &a46;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 176));
  *(void *)(v57 - 176) = &a49;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 176));
  if (a57 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v57 - 217) < 0) {
    operator delete(*(void **)(v57 - 240));
  }
  if (*(char *)(v57 - 185) < 0) {
    operator delete(*(void **)(v57 - 208));
  }
  _Unwind_Resume(a1);
}

uint64_t Preprocessing::apply_noise_reduction(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v20, "apply_noise_reduction");
  if (!*(unsigned char *)a1 && (Checkpointable::should_skip_stage(*(char **)(a1 + 248), (unsigned __int8 *)v20) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "noise_reduced");
    uint64_t v2 = (_OWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    }
    else
    {
      *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *v2;
      v19.__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    }
    boost::filesystem::path::append_v3(&v19, &__p);
    int v3 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&buf, (char *)&v19);
    std::__fs::filesystem::__create_directory(v3, 0);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, "metadata_data_filtered.json");
    if (*(char *)(a1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    }
    else
    {
      *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *v2;
      v19.__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    }
    boost::filesystem::path::append_v3(&v19, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    TrainingUtils::read_metadata_from_file((const char *)&v19, (uint64_t *)&__p);
    std::string::basic_string[abi:ne180100]<0>(&v15, "preprocess");
    uint64_t v4 = (_OWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
    }
    else
    {
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *v4;
      v16.__r_.__value_.__r.__words[2] = *(void *)(a1 + 48);
    }
    boost::filesystem::path::append_v3(&v16, &v15);
    std::string::basic_string[abi:ne180100]<0>(&v14, "unet");
    boost::filesystem::path::append_v3(&v16, &v14);
    std::string buf = v16;
    memset(&v16, 0, sizeof(v16));
    std::string::basic_string[abi:ne180100]<0>(&v13, "model_config.json");
    boost::filesystem::path::append_v3(&buf, &v13);
    std::string v17 = buf;
    memset(&buf, 0, sizeof(buf));
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v13.__r_.__value_.__l.__data_);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v14, "preprocess");
    if (*(char *)(a1 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
    }
    else
    {
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *v4;
      v15.__r_.__value_.__r.__words[2] = *(void *)(a1 + 48);
    }
    boost::filesystem::path::append_v3(&v15, &v14);
    std::string::basic_string[abi:ne180100]<0>(&v13, "cargan");
    boost::filesystem::path::append_v3(&v15, &v13);
    std::string buf = v15;
    memset(&v15, 0, sizeof(v15));
    std::string::basic_string[abi:ne180100]<0>(&v12, "model_config.json");
    boost::filesystem::path::append_v3(&buf, &v12);
    std::string v16 = buf;
    memset(&buf, 0, sizeof(buf));
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v12.__r_.__value_.__l.__data_);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    buf.__r_.__value_.__r.__words[0] = 0x3FEF0A3D70A3D70ALL;
    LODWORD(v15.__r_.__value_.__l.__data_) = 1024;
    LODWORD(v14.__r_.__value_.__l.__data_) = 256;
    LODWORD(v13.__r_.__value_.__l.__data_) = 1024;
    LODWORD(v12.__r_.__value_.__l.__data_) = 80;
    LOBYTE(__dst[0]) = 0;
    LOBYTE(v8) = 0;
    LOBYTE(v7[0]) = 0;
    LOBYTE(v6) = 0;
    v22[0] = 1;
    LODWORD(v11) = 384;
    std::allocate_shared[abi:ne180100]<Mel,std::allocator<Mel>,double,int &,int,int,int,int,BOOL,BOOL,BOOL,BOOL,BOOL,int,char const(&)[11],void>((uint64_t)&__src, (double *)&buf, (int *)(a1 + 176), (int *)&v15, (int *)&v14, (int *)&v13, (int *)&v12, (char *)__dst, (char *)&v8, (char *)v7, (char *)&v6, (char *)v22, (int *)&v11, "reflective");
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  return 0;
}

void sub_1B7C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (*(char *)(v68 - 201) < 0) {
    operator delete(*(void **)(v68 - 224));
  }
  if (a68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a68);
  }
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  *(void *)(v68 - 224) = &STACK[0x288];
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v68 - 224));
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete((void *)STACK[0x2B8]);
  }
  _Unwind_Resume(a1);
}

void Preprocessing::run_unet_inference(void (****a1)(void)@<X1>, uint64_t a2@<X2>, uint64_t **a3@<X8>)
{
  (***a1)();
  double v6 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v27, "mel_bin");
  double v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)v6 + 128, (const void **)&v27);
  LODWORD(v25) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v7, (int *)&v25);
  if (SHIBYTE(v29) < 0) {
    operator delete(v27);
  }
  uint64_t v8 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v27, "frame_length");
  uint64_t v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)v8 + 128, (const void **)&v27);
  LODWORD(v25) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v9, (int *)&v25);
  int v10 = v25;
  if (SHIBYTE(v29) < 0) {
    operator delete(v27);
  }
  uint64_t v12 = *(void *)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  char v27 = 0;
  unsigned __int8 v28 = 0;
  uint64_t v29 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, *(const void **)(v11 - 24), *(void *)(v11 - 16), (uint64_t)(*(void *)(v11 - 16) - *(void *)(v11 - 24)) >> 2);
  std::vector<std::vector<float>>::vector(&v25, (int)(v10 + 1431655765 * ((*(void *)(a2 + 8) - *(void *)a2) >> 3)), (uint64_t)&v27);
  std::vector<std::vector<float>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t *)a2, *(__n128 **)(a2 + 8), v25, v26, 0xAAAAAAAAAAAAAAABLL * ((v26 - v25) >> 3));
  InferenceEngine::DataUtils::transpose_2d_array<float>((uint64_t **)a2, v24);
  std::string::basic_string[abi:ne180100]<0>(__p, "input_mel");
  InferenceEngine::DataTensor::build_from_2d_array<float>(v24, &v22);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  std::string v13 = *a1;
  uint64_t v18 = v22;
  std::string v19 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(void (***)(void), uint64_t *))(*v13)[2])(v13, &v18);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  (**a1)[5]();
  std::string v14 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "output_mel");
  ((void (*)(uint64_t *__return_ptr, void (***)(void), void **))(*v14)[3])(&v16, v14, __p);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  InferenceEngine::DataTensor::get_1d_array<float>(v16, __p);
  InferenceEngine::DataUtils::reshape_1d_to_2d<float>((uint64_t *)__p, v10, (uint64_t *)v15);
  InferenceEngine::DataUtils::transpose_2d_array<float>(v15, a3);
  std::vector<std::vector<float>>::resize((uint64_t *)a3, (int)(-1431655765 * ((v11 - v12) >> 3)));
  (**a1)[1]();
  uint64_t v30 = (void **)v15;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v30);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  __p[0] = v24;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v24[0] = &v25;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
  if (v27)
  {
    unsigned __int8 v28 = v27;
    operator delete(v27);
  }
}

void sub_1B8494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, char **__p, char **a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,char *a24,uint64_t a25,uint64_t a26,char a27)
{
  *(void *)(v27 - 72) = &a9;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 72));
  if (__p)
  {
    a17 = __p;
    operator delete(__p);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  std::string __p = &a24;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a24 = &a27;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  uint64_t v29 = *(void **)(v27 - 96);
  if (v29)
  {
    *(void *)(v27 - 88) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void Preprocessing::run_cargan_inference(void (****a1)(void)@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  (***a1)();
  int v5 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v43, "conditioning_lookback");
  double v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)v5 + 128, (const void **)&v43);
  LODWORD(v42[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v6, (int *)v42);
  unint64_t v7 = SLODWORD(v42[0]);
  if (v45 < 0) {
    operator delete(v43);
  }
  uint64_t v8 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v43, "frames_per_chunk");
  uint64_t v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)v8 + 128, (const void **)&v43);
  LODWORD(v42[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v9, (int *)v42);
  unint64_t v10 = SLODWORD(v42[0]);
  if (v45 < 0) {
    operator delete(v43);
  }
  uint64_t v11 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v43, "mel_bin");
  uint64_t v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)v11 + 128, (const void **)&v43);
  LODWORD(v42[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v12, (int *)v42);
  if (v45 < 0) {
    operator delete(v43);
  }
  uint64_t v13 = ((int)(-1431655765 * ((a2[1] - *a2) >> 3)) / (int)v10);
  LODWORD(v42[0]) = 0;
  std::vector<float>::vector(&v43, v7, v42);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((int)v13 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 24 * v10;
    do
    {
      uint64_t v17 = v14 + *a2;
      memset(v42, 0, sizeof(v42));
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v42, v17, v17 + v16, v10);
      InferenceEngine::DataUtils::transpose_2d_array<float>(v42, v41);
      std::string::basic_string[abi:ne180100]<0>(&__p, "input_mel");
      InferenceEngine::DataTensor::build_from_2d_array<float>(v41, &v39);
      if (v38 < 0) {
        operator delete(__p);
      }
      uint64_t v18 = *a1;
      uint64_t v34 = v39;
      char v35 = v40;
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      ((void (*)(void (***)(void), uint64_t *))(*v18)[2])(v18, &v34);
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      if (v15)
      {
        uint64_t v19 = a3[1];
        uint64_t v20 = v43;
        char v21 = v44;
        std::string::basic_string[abi:ne180100]<0>(&__p, "past");
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v29 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v29, (const void *)(v19 + v20 - v21), v19 + v20 - v21 + v44 - v43, (v44 - v43) >> 2);
        InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v29, &v32);
        char v23 = v32;
        uint64_t v22 = v33;
        unsigned __int8 v32 = 0;
        uint64_t v33 = 0;
        if (v29)
        {
          uint64_t v30 = (std::__shared_weak_count *)v29;
          operator delete(v29);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "past");
        InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v43, &v29);
        char v23 = v29;
        uint64_t v22 = v30;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
      }
      if (v38 < 0) {
        operator delete(__p);
      }
      std::string v24 = *a1;
      uint64_t v27 = v23;
      unsigned __int8 v28 = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      ((void (*)(void (***)(void), void **))(*v24)[2])(v24, &v27);
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      (**a1)[5]();
      uint64_t v25 = *a1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "output");
      ((void (*)(void **__return_ptr, void (***)(void), void **))(*v25)[3])(&v29, v25, &__p);
      if (v38 < 0) {
        operator delete(__p);
      }
      InferenceEngine::DataTensor::get_1d_array<float>((uint64_t)v29, &__p);
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)a3, a3[1], (char *)__p, v37, (v37 - (unsigned char *)__p) >> 2);
      if (__p)
      {
        uint64_t v37 = (char *)__p;
        operator delete(__p);
      }
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      ++v15;
      std::string __p = v41;
      std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v41[0] = (uint64_t *)v42;
      std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v41);
      v14 += v16;
    }
    while (v13 != v15);
  }
  (**a1)[1]();
  if (v43)
  {
    unsigned __int8 v44 = v43;
    operator delete(v43);
  }
}

void sub_1B8A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v30 = *(void **)v28;
  if (*(void *)v28)
  {
    *(void *)(v28 + 8) = v30;
    operator delete(v30);
  }
  uint64_t v31 = *(void **)(v29 - 112);
  if (v31)
  {
    *(void *)(v29 - 104) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Preprocessing::extract_speech_feature(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v62, "extract_speech_feature");
  if (*(unsigned char *)a1 || (Checkpointable::should_skip_stage(*(char **)(a1 + 248), (unsigned __int8 *)v62) & 1) != 0) {
    goto LABEL_106;
  }
  memset(&v61, 0, sizeof(v61));
  std::string::basic_string[abi:ne180100]<0>(&buf, "metadata_feature.json");
  uint64_t v2 = (_OWORD *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *v2;
    v60.__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
  }
  boost::filesystem::path::append_v3(&v60, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "silence_trimmed");
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = *v2;
    v64.__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
  }
  boost::filesystem::path::append_v3(&v64, &__p);
  int v3 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&buf, (char *)&v64);
  std::__fs::filesystem::__create_directory(v3, 0);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "metadata_data_filtered.json");
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v2;
    __p.__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
  }
  boost::filesystem::path::append_v3(&__p, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  TrainingUtils::read_metadata_from_file((const char *)&__p, &v57);
  v64.__r_.__value_.__s.__data_[0] = 0;
  std::allocate_shared[abi:ne180100]<SiriTTS::SpeechFeature::SpeechFeatureExtractor,std::allocator<SiriTTS::SpeechFeature::SpeechFeatureExtractor>,std::string const&,BOOL,void>(&v55);
  int checkpoint_stage_step = Checkpointable::get_checkpoint_stage_step(*(char **)(a1 + 248), (unsigned __int8 *)v62);
  if (checkpoint_stage_step >= 1)
  {
    int v5 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&buf, (char *)&v60);
    std::__fs::filesystem::__status(v5, 0);
    unsigned __int8 v6 = v64.__r_.__value_.__s.__data_[0];
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    int v7 = 0;
    if (!v6 || v6 == 255) {
      goto LABEL_29;
    }
    TrainingUtils::read_metadata_from_file((const char *)&v60, (uint64_t *)&buf);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vdeallocate((void **)&v61.__r_.__value_.__l.__data_);
    std::string v61 = buf;
    memset(&buf, 0, sizeof(buf));
    v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  }
  int v7 = checkpoint_stage_step;
LABEL_29:
  unint64_t v8 = v7;
  uint64_t v9 = v57;
  if (v8 < (v58 - v57) >> 4)
  {
    unsigned __int8 v48 = (std::string::size_type *)(a1 + 264);
    p_std::string::size_type size = &buf.__r_.__value_.__l.__size_;
    while (1)
    {
      uint64_t v11 = p_size;
      uint64_t v12 = v9 + 16 * v8;
      uint64_t v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v12, "utterance_name");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v13, &v54);
      LogObject = Diagnostics_GetLogObject();
      if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
      {
        std::string::size_type v15 = a1 + 264;
        if (*(char *)(a1 + 287) < 0) {
          std::string::size_type v15 = *v48;
        }
        uint64_t v16 = &v54;
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v16 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v15;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v16;
        _os_log_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_INFO, "TaskId: %s, Processing %s", (uint8_t *)&buf, 0x16u);
      }
      if (*(unsigned char *)a1)
      {
        uint64_t v17 = Diagnostics_GetLogObject();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          std::string::size_type v18 = a1 + 264;
          if (*(char *)(a1 + 287) < 0) {
            std::string::size_type v18 = *v48;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v18;
          _os_log_impl(&def_5A5E8, v17, OS_LOG_TYPE_INFO, "TaskId: %s, WARN: Exit due to stopping.", (uint8_t *)&buf, 0xCu);
        }
        Checkpointable::write_checkpoint(*(uint64_t **)(a1 + 248), (uint64_t)v62, v8);
        int v19 = 2;
      }
      else
      {
        uint64_t v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v12, "transcription");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v20, &v53);
        std::string::basic_string[abi:ne180100]<0>(&v64, "noise_reduced");
        if (*(char *)(a1 + 31) < 0) {
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
        }
        else {
          std::string buf = *(std::string *)(a1 + 8);
        }
        boost::filesystem::path::append_v3(&buf, &v64);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v54.__r_.__value_.__l.__data_, (const void **)(a1 + 80), (uint64_t)&v50);
        std::string v51 = v50;
        memset(&v50, 0, sizeof(v50));
        boost::filesystem::path::append_v3(&buf, &v51);
        std::string v52 = buf;
        memset(&buf, 0, sizeof(buf));
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v51.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        char v21 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&buf, (char *)&v52);
        std::__fs::filesystem::__status(v21, 0);
        unsigned __int8 v22 = v64.__r_.__value_.__s.__data_[0];
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (v22 != 255 && v22)
        {
          reader = PCMFile::create_reader((char *)&v52);
          uint64_t v27 = (PCMFile::Reader *)reader;
          if (!reader)
          {
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            char v45 = &v52;
            if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              char v45 = (std::string *)v52.__r_.__value_.__r.__words[0];
            }
            StringFormatter::StringFormatter((StringFormatter *)&buf, "TaskId: %s, Can't read wavfile from %s", (const char *)v45, v46);
            std::logic_error::logic_error(exception, &buf);
          }
          uint64_t v28 = *((void *)reader + 6);
          unsigned __int8 v47 = reader;
          std::vector<short>::vector(&v51, v28);
          PCMFile::Reader::read_samples(v27, v28, v51.__r_.__value_.__l.__data_, 2, 0, 1.0);
          uint64_t v29 = Diagnostics_GetLogObject();
          uint64_t v30 = (int *)((char *)v27 + 24);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            std::string::size_type v31 = a1 + 264;
            if (*(char *)(a1 + 287) < 0) {
              std::string::size_type v31 = *v48;
            }
            *(double *)&std::string::pointer data = COERCE_DOUBLE(&v52);
            if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::pointer data = (std::string *)v52.__r_.__value_.__l.__data_;
            }
            int v33 = *v30;
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v31;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v28;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
            double v66 = *(double *)&data;
            __int16 v67 = 1024;
            LODWORD(v68) = v33;
            _os_log_impl(&def_5A5E8, v29, OS_LOG_TYPE_INFO, "TaskId: %s, Read %ld samples from file %s with sample rate %d", (uint8_t *)&buf, 0x26u);
          }
          float v34 = (float)(unint64_t)v28 / (float)*v30;
          if (v34 < *(float *)(a1 + 184))
          {
            uint64_t v35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v12, "phone_sequence");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v35, &v50);
            unsigned __int8 v36 = Diagnostics_GetLogObject();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
            {
              std::string::size_type v37 = a1 + 264;
              if (*(char *)(a1 + 287) < 0) {
                std::string::size_type v37 = *v48;
              }
              char v38 = &v50;
              if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                char v38 = (std::string *)v50.__r_.__value_.__r.__words[0];
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v37;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v38;
              _os_log_impl(&def_5A5E8, v36, OS_LOG_TYPE_INFO, "TaskId: %s, phone_sequence: %s", (uint8_t *)&buf, 0x16u);
            }
            memset(v49, 0, sizeof(v49));
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)"#";
            buf.__r_.__value_.__l.__size_ = (std::string::size_type)"";
            boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(__dst, (uint64_t)&buf);
            boost::algorithm::split<std::vector<std::string>,std::string&,boost::algorithm::detail::is_any_ofF<char>>((uint64_t)v49, (uint64_t)&v50, __dst, 0);
          }
          uint64_t v39 = Diagnostics_GetLogObject();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
          {
            std::string::size_type v40 = a1 + 264;
            if (*(char *)(a1 + 287) < 0) {
              std::string::size_type v40 = *v48;
            }
            uint64_t v41 = &v54;
            if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v41 = (std::string *)v54.__r_.__value_.__r.__words[0];
            }
            double v42 = *(float *)(a1 + 184);
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v40;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v41;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
            double v66 = v34;
            __int16 v67 = 2048;
            double v68 = v42;
            _os_log_impl(&def_5A5E8, v39, OS_LOG_TYPE_INFO, "TaskId: %s, WARN: %s audio duration is larger than expected, skip. duration=%f s, max_audio_duration=%f s", (uint8_t *)&buf, 0x2Au);
          }
          int v19 = 4;
          if (v51.__r_.__value_.__r.__words[0])
          {
            v51.__r_.__value_.__l.__size_ = v51.__r_.__value_.__r.__words[0];
            operator delete(v51.__r_.__value_.__l.__data_);
          }
          (*(void (**)(const char *))(*(void *)v47 + 8))(v47);
        }
        else
        {
          char v23 = Diagnostics_GetLogObject();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            std::string::size_type v24 = a1 + 264;
            if (*(char *)(a1 + 287) < 0) {
              std::string::size_type v24 = *v48;
            }
            uint64_t v25 = &v52;
            if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v25 = (std::string *)v52.__r_.__value_.__r.__words[0];
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v24;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
            _os_log_impl(&def_5A5E8, v23, OS_LOG_TYPE_INFO, "TaskId: %s, WARN: %s wavefile doesn't exist, skip.", (uint8_t *)&buf, 0x16u);
          }
          int v19 = 4;
        }
        p_std::string::size_type size = v11;
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v52.__r_.__value_.__l.__data_);
          p_std::string::size_type size = v11;
        }
        if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_93;
        }
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      p_std::string::size_type size = v11;
LABEL_93:
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v54.__r_.__value_.__l.__data_);
        p_std::string::size_type size = v11;
      }
      if (v19 != 2)
      {
        ++v8;
        uint64_t v9 = v57;
        if (v8 < (v58 - v57) >> 4) {
          continue;
        }
      }
      break;
    }
  }
  TrainingUtils::write_metadata_to_file((uint64_t *)&v60, (uint64_t *)&v61);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
LABEL_106:
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  return 0;
}

void sub_1BA4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a70);
  std::string __p = &a72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  int v74 = a73;
  if (a73)
  {
    STACK[0x200] = (unint64_t)a73;
    operator delete(v74);
  }
  uint64_t v75 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v75;
    operator delete(v75);
  }
  uint64_t v76 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v76;
    operator delete(v76);
  }
  STACK[0x228] = (unint64_t)&STACK[0x240];
  std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x228]);
  STACK[0x240] = (unint64_t)&STACK[0x258];
  std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  uint64_t v77 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v77;
    operator delete(v77);
  }
  STACK[0x288] = (unint64_t)&STACK[0x2A0];
  std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x288]);
  STACK[0x2A0] = (unint64_t)&STACK[0x400];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
  STACK[0x2A0] = (unint64_t)&STACK[0x2B8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
  STACK[0x2B8] = (unint64_t)&STACK[0x2D0];
  std::vector<SiriTTS::ForcedAlignment::Lexeme>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2B8]);
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  std::string::size_type v78 = (void *)STACK[0x300];
  if (STACK[0x300])
  {
    STACK[0x308] = (unint64_t)v78;
    operator delete(v78);
  }
  (*(void (**)(uint64_t))(*(void *)a27 + 8))(a27);
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  if (SLOBYTE(STACK[0x34F]) < 0) {
    operator delete((void *)STACK[0x338]);
  }
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  if (STACK[0x370]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x370]);
  }
  STACK[0x350] = (unint64_t)&STACK[0x378];
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x350]);
  if (SLOBYTE(STACK[0x3A7]) < 0) {
    operator delete((void *)STACK[0x390]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  STACK[0x3B0] = (unint64_t)&STACK[0x3D0];
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B0]);
  if (SLOBYTE(STACK[0x3FF]) < 0) {
    operator delete((void *)STACK[0x3E8]);
  }
  _Unwind_Resume(a1);
}

char *Preprocessing::trim_silence_and_adjust_speechfeature@<X0>(unsigned __int16 **a1@<X1>, void *a2@<X2>, int a3@<W3>, uint64_t a4@<X8>, float a5@<S0>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  int v6 = a3 / 1000;
  unint64_t v8 = *a1;
  int v7 = a1[1];
  uint64_t v9 = (char *)v7 - (char *)*a1;
  if (v7 != *a1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v9 / 48;
    BOOL v12 = v9 / 48 != 0;
    uint64_t v13 = v9 / 48 - 1;
    if (v13 == 0 || !v12) {
      uint64_t v11 = 1;
    }
    uint64_t v14 = (float *)&v8[24 * v13];
    std::string::size_type v15 = v14 + 9;
    float v16 = 0.0;
    uint64_t v17 = 16;
    while (1)
    {
      if (v10) {
        goto LABEL_6;
      }
      int v20 = *((char *)v8 + 23);
      if (v20 < 0)
      {
        if (*((void *)v8 + 1) != 3) {
          goto LABEL_6;
        }
        char v21 = *(unsigned __int16 **)v8;
      }
      else
      {
        char v21 = v8;
        if (v20 != 3) {
          goto LABEL_6;
        }
      }
      int v26 = *v21;
      int v27 = *((unsigned __int8 *)v21 + 2);
      if (v26 == 26995 && v27 == 108)
      {
        float v29 = *((float *)v8 + 9);
        if (v29 > a5)
        {
          float v16 = v29 - a5;
          *((float *)v8 + 8) = a5;
          *((float *)v8 + 9) = a5;
          goto LABEL_23;
        }
      }
LABEL_6:
      if (v13 != v10) {
        goto LABEL_22;
      }
      int v18 = *((char *)v14 + 23);
      if (v18 < 0)
      {
        if (*((void *)v14 + 1) != 3) {
          goto LABEL_22;
        }
        int v19 = *(unsigned __int16 **)v14;
      }
      else
      {
        int v19 = &v8[24 * v13];
        if (v18 != 3) {
          goto LABEL_22;
        }
      }
      int v22 = *v19;
      int v23 = *((unsigned __int8 *)v19 + 2);
      BOOL v24 = v22 == 26995 && v23 == 108;
      if (!v24 || (float v25 = *v15, *v15 <= a5))
      {
LABEL_22:
        *(float *)&v8[v17] = *(float *)&v8[v17] - v16;
        goto LABEL_23;
      }
      float *v15 = a5;
      v14[8] = (float)(v14[8] - v16) - (float)(v25 - a5);
LABEL_23:
      ++v10;
      v17 += 24;
      if (v11 == v10) {
        goto LABEL_35;
      }
    }
  }
  float v16 = 0.0;
LABEL_35:
  uint64_t v30 = (char *)(*a2 + 2 * (int)(float)(v16 * (float)v6));
  unint64_t v31 = (int)(float)(*((float *)v7 - 4) * (float)v6);
  return std::vector<short>::__assign_with_size[abi:ne180100]<std::__wrap_iter<short const*>,std::__wrap_iter<short const*>>((char *)a4, v30, (uint64_t)&v30[2 * v31], v31);
}

void sub_1BAC70(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Preprocessing::remove_silence_from_speechfeatures(uint64_t *a1@<X1>, unsigned __int8 **a2@<X2>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)(v3 + 8);
      }
      uint64_t v10 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
      int v11 = (char)v10;
      if ((char)v10 < 0) {
        uint64_t v10 = a2[1];
      }
      if (v9 != v10) {
        goto LABEL_19;
      }
      if (v11 >= 0) {
        BOOL v12 = (unsigned __int8 *)a2;
      }
      else {
        BOOL v12 = *a2;
      }
      if ((v8 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v3, v12, *(void *)(v3 + 8))) {
          goto LABEL_19;
        }
      }
      else if (*(unsigned char *)(v3 + 23))
      {
        uint64_t v13 = 0;
        while (*(unsigned __int8 *)(v3 + v13) == v12[v13])
        {
          if (v8 == ++v13) {
            goto LABEL_23;
          }
        }
LABEL_19:
        if (v7 >= a3[2])
        {
          unint64_t v7 = std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__push_back_slow_path<SiriTTS::SpeechFeature::SpeechFeatureData const&>(a3, (long long *)v3);
        }
        else
        {
          std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__construct_one_at_end[abi:ne180100]<SiriTTS::SpeechFeature::SpeechFeatureData const&>((uint64_t)a3, (long long *)v3);
          v7 += 48;
        }
        a3[1] = v7;
      }
LABEL_23:
      v3 += 48;
    }
    while (v3 != v4);
  }
}

void sub_1BAD94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Preprocessing::align_speech_features(uint64_t *a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>, float a4@<S0>, float a5@<S1>, float a6@<S2>)
{
  uint64_t v7 = (uint64_t)(a2[1] - *a2) >> 3;
  a3[1] = 0;
  a3[2] = 0;
  int v8 = -1431655765 * v7;
  *a3 = 0;
  if (v8 >= 1)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    uint64_t v16 = (v8 - 1);
    uint64_t v17 = v8;
    float v18 = 0.0;
    do
    {
      uint64_t v19 = *a2 + 24 * v14;
      if (*(char *)(v19 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v19, *(void *)(v19 + 8));
      }
      else
      {
        long long v20 = *(_OWORD *)v19;
        __str.__r_.__value_.__r.__words[2] = *(void *)(v19 + 16);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
      }
      uint64_t v21 = *a1;
      if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4) <= v15) {
        goto LABEL_23;
      }
      int v22 = (unsigned __int8 **)(v21 + 48 * v15);
      uint64_t v23 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      float v25 = (unsigned __int8 *)*((unsigned __int8 *)v22 + 23);
      int v26 = (char)v25;
      if ((char)v25 < 0) {
        float v25 = v22[1];
      }
      if ((unsigned __int8 *)size != v25) {
        goto LABEL_23;
      }
      if (v26 >= 0) {
        int v27 = (unsigned __int8 *)(v21 + 48 * v15);
      }
      else {
        int v27 = *v22;
      }
      if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(__str.__r_.__value_.__l.__data_, v27, __str.__r_.__value_.__l.__size_)) {
          goto LABEL_23;
        }
      }
      else if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
      {
        p_str = &__str;
        while (p_str->__r_.__value_.__s.__data_[0] == *v27)
        {
          p_str = (std::string *)((char *)p_str + 1);
          ++v27;
          if (!--v23) {
            goto LABEL_31;
          }
        }
LABEL_23:
        if (v14 == v16) {
          float v29 = a4;
        }
        else {
          float v29 = v18 + a5;
        }
        memset(&__p, 0, sizeof(__p));
        std::string::operator=(&__p, &__str);
        float v30 = (float)(int)(float)(v29 / a6) * a6;
        float v38 = v30 - v18;
        unint64_t v32 = a3[1];
        unint64_t v31 = a3[2];
        uint64_t v39 = *(void *)(v32 - 8);
        if (v32 >= v31)
        {
          uint64_t v33 = std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__push_back_slow_path<SiriTTS::SpeechFeature::SpeechFeatureData const&>(a3, (long long *)&__p);
        }
        else
        {
          std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__construct_one_at_end[abi:ne180100]<SiriTTS::SpeechFeature::SpeechFeatureData const&>((uint64_t)a3, (long long *)&__p);
          uint64_t v33 = v32 + 48;
        }
        a3[1] = v33;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_37;
      }
LABEL_31:
      float v34 = *(float *)(v21 + 48 * v15 + 32);
      memset(&__p, 0, sizeof(__p));
      std::string::operator=(&__p, &__str);
      float v30 = (float)(int)(float)(v34 / a6) * a6;
      float v38 = v30 - v18;
      uint64_t v39 = *(void *)(*a1 + 48 * v15 + 40);
      unint64_t v35 = a3[1];
      if (v35 >= a3[2])
      {
        uint64_t v36 = std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__push_back_slow_path<SiriTTS::SpeechFeature::SpeechFeatureData const&>(a3, (long long *)&__p);
      }
      else
      {
        std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__construct_one_at_end[abi:ne180100]<SiriTTS::SpeechFeature::SpeechFeatureData const&>((uint64_t)a3, (long long *)&__p);
        uint64_t v36 = v35 + 48;
      }
      a3[1] = v36;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v15;
LABEL_37:
      float v18 = v30;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      ++v14;
    }
    while (v14 != v17);
  }
}

void sub_1BB060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  std::vector<SiriTTS::SpeechFeature::SpeechFeatureData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t Preprocessing::validate_data(Preprocessing *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "validate_data");
  if (*(unsigned char *)this || (Checkpointable::should_skip_stage(*((char **)this + 31), (unsigned __int8 *)__p) & 1) != 0)
  {
    uint64_t v2 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&buf, "metadata_mel.json");
    if (*((char *)this + 31) < 0) {
      std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)this + 1), *((void *)this + 2));
    }
    else {
      std::string v9 = *(std::string *)((char *)this + 8);
    }
    boost::filesystem::path::append_v3(&v9, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    TrainingUtils::read_metadata_from_file((const char *)&v9, &v7);
    if (*((int *)this + 47) <= (unint64_t)((v8 - v7) >> 4))
    {
      uint64_t v2 = 0;
    }
    else
    {
      LogObject = Diagnostics_GetLogObject();
      if (os_log_type_enabled(LogObject, OS_LOG_TYPE_ERROR))
      {
        int v5 = (void *)((char *)this + 264);
        if (*((char *)this + 287) < 0) {
          int v5 = (void *)*v5;
        }
        int v6 = *((_DWORD *)this + 47);
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (v8 - v7) >> 4;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        int v13 = v6;
        _os_log_error_impl(&def_5A5E8, LogObject, OS_LOG_TYPE_ERROR, "TaskId: %s, Training metadata is invalid due to not enough data! metadta_size=%lu, minimum_size=%d", (uint8_t *)&buf, 0x1Cu);
      }
      uint64_t v2 = 1;
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v7;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1BB264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 41) < 0) {
    operator delete(*(void **)(v24 - 64));
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::DataUtils::transpose_2d_array<float>(uint64_t **a1@<X0>, uint64_t **a2@<X8>)
{
  int v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a1);
  uint64_t v8 = **a1;
  uint64_t v7 = (*a1)[1];
  std::vector<float>::vector(__p, v6);
  std::vector<std::vector<float>>::vector(a2, (v7 - v8) >> 2, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v4 != v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *a1;
    char v11 = *a2;
    if ((unint64_t)((v7 - v8) >> 2) <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = (v7 - v8) >> 2;
    }
    if (v6 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v6;
    }
    do
    {
      if (v7 != v8)
      {
        uint64_t v14 = (int *)v10[3 * v9];
        uint64_t v15 = v12;
        uint64_t v16 = v11;
        do
        {
          int v17 = *v14++;
          int v18 = v17;
          uint64_t v19 = *v16;
          v16 += 3;
          *(_DWORD *)(v19 + 4 * v9) = v18;
          --v15;
        }
        while (v15);
      }
      ++v9;
    }
    while (v9 != v13);
  }
}

void sub_1BB3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::DataTensor::build_from_2d_array<float>(uint64_t **a1@<X1>, void *a2@<X8>)
{
  int v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v7 = **a1;
  uint64_t v6 = (*a1)[1];
  uint64_t v8 = operator new(0x10uLL);
  uint64_t v12 = v8 + 2;
  uint64_t v13 = v8 + 2;
  *uint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v4 - v5);
  v8[1] = (v6 - v7) >> 2;
  char v11 = v8;
  InferenceEngine::DataUtils::get_type_string<float>(__p);
  std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long> &,void>(a2);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  TrainingUtils::flatten_2d_to_1d<float>(a1, __p);
  memcpy(*(void **)(*a2 + 88), __p[0], *(void *)(*a2 + 80));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
}

void sub_1BB4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  uint64_t v19 = *(std::__shared_weak_count **)(v17 + 8);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *InferenceEngine::DataTensor::get_1d_array<float>@<X0>(uint64_t a1@<X0>, void **a2@<X8>)
{
  uint64_t v4 = (uint64_t *)(a1 + 32);
  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    int v5 = *(unsigned __int8 *)(a1 + 55);
    if (v5 != 4)
    {
      if (v5 != 5) {
        goto LABEL_22;
      }
      goto LABEL_9;
    }
    if (*(_DWORD *)v4 != 842231910) {
      goto LABEL_22;
    }
LABEL_17:
      InferenceEngine::DataTensor::get_1d_array<float>();
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6 == 4 && *(_DWORD *)*v4 == 842231910) {
    goto LABEL_17;
  }
  if (v6 != 5) {
    goto LABEL_22;
  }
  uint64_t v4 = (uint64_t *)*v4;
LABEL_9:
  int v7 = *(_DWORD *)v4;
  int v8 = *((unsigned __int8 *)v4 + 4);
  if (v7 != 863268457 || v8 != 50) {
LABEL_22:
  }
    InferenceEngine::DataTensor::get_1d_array<float>();
    InferenceEngine::DataTensor::get_1d_array<float>();
LABEL_18:
  char v10 = *(const void **)(a1 + 88);
  int size = InferenceEngine::DataTensor::get_size((InferenceEngine::DataTensor *)a1);
  std::vector<float>::vector(a2, size);
  uint64_t v12 = *a2;

  return memcpy(v12, v10, 4 * size);
}

void InferenceEngine::DataUtils::reshape_1d_to_2d<float>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = a2;
    uint64_t v9 = 4 * a2;
    do
    {
      std::string __p = 0;
      char v11 = 0;
      uint64_t v12 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)(v6 + v4), v6 + v4 + v9, v8);
      std::vector<std::vector<float>>::push_back[abi:ne180100](a3, (uint64_t)&__p);
      if (__p)
      {
        char v11 = __p;
        operator delete(__p);
      }
      v7 += v8;
      uint64_t v4 = *a1;
      v6 += v9;
    }
    while (v7 < (a1[1] - *a1) >> 2);
  }
}

void sub_1BB704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void InferenceEngine::DataTensor::build_from_1d_array<float>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v5 = *(const void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = operator new(8uLL);
  uint64_t v9 = v6;
  void *v6 = (v4 - (uint64_t)v5) >> 2;
  char v10 = v6 + 1;
  char v11 = v6 + 1;
  InferenceEngine::DataUtils::get_type_string<float>(&__p);
  std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long> &,void>(a2);
  if (v8 < 0) {
    operator delete(__p);
  }
  memcpy(*(void **)(*a2 + 88), *(const void **)a1, *(void *)(*a2 + 80));
  if (v9)
  {
    char v10 = v9;
    operator delete(v9);
  }
}

void sub_1BB7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SiriTTS::SpeechFeature::WordData::WordData(uint64_t a1, long long **a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 24), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  return a1;
}

void sub_1BB86C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(uint64_t result)
{
  switch(*(unsigned char *)result)
  {
    case 1:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::object or m_value.object != nullptr";
      int v2 = 1220;
      break;
    case 2:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::array or m_value.array != nullptr";
      int v2 = 1221;
      break;
    case 3:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::string or m_value.string != nullptr";
      int v2 = 1222;
      break;
    case 8:
      if (*(void *)(result + 8)) {
        return result;
      }
      uint64_t v1 = "m_type != value_t::binary or m_value.binary != nullptr";
      int v2 = 1223;
      break;
    default:
      return result;
  }
  __assert_rtn("assert_invariant", "json.hpp", v2, v1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(uint64_t **a1, int a2)
{
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  unint64_t v26 = 0;
  int v3 = a2 - 1;
  if (a2 == 1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, (*a1)[2]);
    uint64_t v4 = (uint64_t)(*a1 + 1);
    int v5 = (void *)**a1;
    if (v5 != (void *)v4)
    {
      unint64_t v6 = v25;
      do
      {
        if (v6 >= v26)
        {
          unint64_t v6 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v5 + 7));
        }
        else
        {
          *(unsigned char *)unint64_t v6 = *((unsigned char *)v5 + 56);
          *(void *)(v6 + 8) = v5[8];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 7));
          *((unsigned char *)v5 + 56) = 0;
          v5[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
          v6 += 16;
        }
        unint64_t v25 = v6;
        unint64_t v7 = (void *)v5[1];
        if (v7)
        {
          do
          {
            char v8 = v7;
            unint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            char v8 = (void *)v5[2];
            BOOL v9 = *v8 == (void)v5;
            int v5 = v8;
          }
          while (!v9);
        }
        int v5 = v8;
      }
      while (v8 != (void *)v4);
    }
  }
  else if (a2 == 2)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, ((*a1)[1] - **a1) >> 4);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v22, **a1, (*a1)[1], &v24);
  }
  for (unint64_t i = v25; v24 != v25; unint64_t i = v25)
  {
    char v12 = *(unsigned char *)(i - 16);
    uint64_t v11 = i - 16;
    LOBYTE(v22) = v12;
    uint64_t v23 = *(uint64_t **)(v11 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    *(unsigned char *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v24, v25 - 16);
    if (v22 == 1)
    {
      uint64_t v13 = v23;
      uint64_t v14 = v23 + 1;
      uint64_t v15 = (void *)*v23;
      if ((uint64_t *)*v23 != v23 + 1)
      {
        unint64_t v16 = v25;
        do
        {
          if (v16 >= v26)
          {
            unint64_t v16 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v15 + 7));
          }
          else
          {
            *(unsigned char *)unint64_t v16 = *((unsigned char *)v15 + 56);
            *(void *)(v16 + 8) = v15[8];
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v15 + 7));
            *((unsigned char *)v15 + 56) = 0;
            v15[8] = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
            v16 += 16;
          }
          unint64_t v25 = v16;
          uint64_t v17 = (void *)v15[1];
          if (v17)
          {
            do
            {
              int v18 = v17;
              uint64_t v17 = (void *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              int v18 = (void *)v15[2];
              BOOL v9 = *v18 == (void)v15;
              uint64_t v15 = v18;
            }
            while (!v9);
          }
          uint64_t v15 = v18;
        }
        while (v18 != v14);
        uint64_t v13 = v23;
      }
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)v13, (char *)v13[1]);
      uint64_t *v13 = (uint64_t)(v13 + 1);
      void v13[2] = 0;
      v13[1] = 0;
    }
    else if (v22 == 2)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v27, *v23, v23[1], &v24);
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](v23);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22);
  }
  switch(v3)
  {
    case 0:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)*a1, (char *)(*a1)[1]);
      goto LABEL_41;
    case 1:
      int v22 = (void **)*a1;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
      goto LABEL_41;
    case 2:
      uint64_t v19 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0) {
        goto LABEL_42;
      }
      long long v20 = (void *)*v19;
      break;
    case 7:
      uint64_t v19 = *a1;
      uint64_t v21 = (void *)**a1;
      if (!v21) {
        goto LABEL_42;
      }
      v19[1] = (uint64_t)v21;
      long long v20 = v21;
      break;
    default:
      goto LABEL_43;
  }
  operator delete(v20);
LABEL_41:
  uint64_t v19 = *a1;
LABEL_42:
  operator delete(v19);
LABEL_43:
  int v22 = (void **)&v24;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::TransitionModel::Tuple>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 16 * v6;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1BBD34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (v2 != *result)
  {
    uint64_t v4 = v2 - 16;
    uint64_t v5 = (unsigned __int8 *)(v2 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      unsigned int v6 = *v5;
      v5 -= 16;
      uint64_t result = (void *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v4 + 8, v6);
      BOOL v7 = v4 == v3;
      uint64_t v4 = (uint64_t)v5;
    }
    while (!v7);
  }
  v1[1] = v3;
  return result;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3 - 16;
    do
    {
      *(unsigned char *)(v7 - 16) = *(unsigned char *)v9;
      uint64_t v10 = v7 - 16;
      *(void *)(v10 + 8) = *(void *)(v9 + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
      *(unsigned char *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
      uint64_t v7 = *((void *)&v17 + 1) - 16;
      *((void *)&v17 + 1) -= 16;
      BOOL v11 = v9 == a5;
      v9 -= 16;
    }
    while (!v11);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (unint64_t i = *(unsigned __int8 **)(a2 + 32); i != *(unsigned __int8 **)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)i);
    uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(i + 8, *i);
    unint64_t i = (unsigned __int8 *)(*(void *)(a2 + 32) + 16);
  }
  return result;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v2 - 16);
      uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v2 - 8, *(unsigned __int8 *)(v2 - 16));
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    unint64_t v7 = a4[1];
    do
    {
      if (v7 >= a4[2])
      {
        unint64_t v7 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a4, v5);
      }
      else
      {
        *(unsigned char *)unint64_t v7 = *(unsigned char *)v5;
        *(void *)(v7 + 8) = *(void *)(v5 + 8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
        *(unsigned char *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        v7 += 16;
      }
      a4[1] = v7;
      v5 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::TransitionModel::Tuple>>(v7, v9);
  uint64_t v11 = (uint64_t)&v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  void v15[3] = &v10[16 * v12];
  *(unsigned char *)uint64_t v11 = *(unsigned char *)a2;
  *(void *)(v11 + 8) = *(void *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v15[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1BC218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 16;
    uint64_t v6 = (unsigned __int8 *)(v4 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
      unsigned int v7 = *v6;
      v6 -= 16;
      uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v5 + 8, v7);
      BOOL v8 = v5 == a2;
      uint64_t v5 = (uint64_t)v6;
    }
    while (!v8);
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *((void *)a2 + 1));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(a2 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a2 + 64, a2[56]);
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::allocate_shared[abi:ne180100]<Checkpointable,std::allocator<Checkpointable>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<Checkpointable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<Checkpointable>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1BC3AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<Checkpointable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<Checkpointable>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26F130;
  Checkpointable::Checkpointable(a1 + 3);
  return a1;
}

void sub_1BC408(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Checkpointable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26F130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Checkpointable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26F130;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<Checkpointable>::__on_zero_shared(uint64_t a1)
{
  std::allocator<Checkpointable>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<Checkpointable>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2 + 32);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a2 + 40), *(unsigned __int8 *)(a2 + 32));
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  if ((int)v3 < 0) {
    a2 = *(char **)a2;
  }
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_1BC564(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::exception::name(int a1@<W1>, std::string *a2@<X8>)
{
  std::operator+<char>();
  BOOL v4 = std::string::append(&v12, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  BOOL v8 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = std::string::append(&v14, "] ");
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_1BC6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

nlohmann::detail::exception *nlohmann::detail::exception::exception(nlohmann::detail::exception *this, int a2, const char *a3)
{
  *(void *)this = off_26F198;
  *((_DWORD *)this + 2) = a2;
  std::runtime_error::runtime_error((std::runtime_error *)this + 1, a3);
  return this;
}

void sub_1BC754(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

const char *nlohmann::detail::exception::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this + 1);
}

void nlohmann::detail::exception::~exception(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_26F198;
  std::runtime_error::~runtime_error(this + 1);

  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)off_26F198;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);

  operator delete();
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, unsigned __int8 **a3@<X8>)
{
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(a3, a1);
  uint64_t result = (uint64_t)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(a3);
  if (*(unsigned char *)a1 == 1)
  {
    uint64_t result = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*(void *)(a1 + 8), a2);
    a3[1] = (unsigned __int8 *)result;
  }
  return result;
}

unsigned __int8 *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(unsigned __int8 **a1)
{
  uint64_t result = *a1;
  if (!result) {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*();
  }
  int v3 = *result;
  if (v3 == 1)
  {
    uint64_t v6 = a1[1];
    if (v6 == (unsigned __int8 *)(*((void *)result + 1) + 8)) {
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*();
    }
    return v6 + 56;
  }
  else if (v3 == 2)
  {
    long long v5 = *(unsigned __int8 **)(*((void *)result + 1) + 8);
    uint64_t result = a1[2];
    if (result == v5) {
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*();
    }
  }
  else
  {
    if (!*result)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v8, "cannot get value");
      nlohmann::detail::invalid_iterator::create(214, (uint64_t)v8, exception);
    }
    if (a1[4])
    {
      BOOL v4 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v8, "cannot get value");
      nlohmann::detail::invalid_iterator::create(214, (uint64_t)v8, v4);
    }
  }
  return result;
}

void sub_1BC9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::type_error::create(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "type_error");
  nlohmann::detail::exception::name(a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    unsigned int v7 = (const std::string::value_type *)a2;
  }
  else {
    unsigned int v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  long long v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v16 >= 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (void **)v15[0];
  }
  nlohmann::detail::exception::exception(a3, a1, (const char *)v11);
  *(void *)a3 = off_26F218;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_1BCB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(char *a1)
{
  unint64_t v1 = *a1;
  if (v1 > 9) {
    return "number";
  }
  else {
    return (&off_258368)[v1];
  }
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(unsigned __int8 **result)
{
  unint64_t v1 = *result;
  if (!*result) {
    __assert_rtn("set_end", "iter_impl.hpp", 211, "m_object != nullptr");
  }
  int v2 = *v1;
  if (v2 == 2)
  {
    result[2] = *(unsigned __int8 **)(*((void *)v1 + 1) + 8);
  }
  else if (v2 == 1)
  {
    result[1] = (unsigned __int8 *)(*((void *)v1 + 1) + 8);
  }
  else
  {
    result[4] = (unsigned char *)(&def_5A5E8 + 1);
  }
  return result;
}

void *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0x8000000000000000;
  if (!a2) {
    __assert_rtn("iter_impl", "iter_impl.hpp", 88, "m_object != nullptr");
  }
  return result;
}

BOOL nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2 = *a1;
  if (*a1 != *a2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "cannot compare iterators of different containers");
    nlohmann::detail::invalid_iterator::create(212, (uint64_t)v8, exception);
  }
  if (!v2) {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==();
  }
  int v3 = *v2;
  if (v3 == 2)
  {
    BOOL v4 = a1[2];
    long long v5 = a2[2];
  }
  else if (v3 == 1)
  {
    BOOL v4 = a1[1];
    long long v5 = a2[1];
  }
  else
  {
    BOOL v4 = a1[4];
    long long v5 = a2[4];
  }
  return v4 == v5;
}

void sub_1BCD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlohmann::detail::invalid_iterator::create(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "invalid_iterator");
  nlohmann::detail::exception::name(a1, &v14);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    unsigned int v7 = (const std::string::value_type *)a2;
  }
  else {
    unsigned int v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  long long v9 = std::string::append(&v14, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v16 >= 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (void **)v15[0];
  }
  nlohmann::detail::exception::exception(a3, a1, (const char *)v11);
  *(void *)a3 = off_26F1F0;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_1BCE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(char *result, unsigned char *a2)
{
  int v2 = result;
  if (*result != 4)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    BOOL v4 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
    std::string::basic_string[abi:ne180100]<0>(&v7, v4);
    long long v5 = std::string::insert(&v7, 0, "type must be BOOLean, but is ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v9 = v5->__r_.__value_.__r.__words[2];
    long long v8 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v8, exception);
  }
  *a2 = result[8];
  return result;
}

void sub_1BCF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

unsigned __int8 *nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(unsigned __int8 *result, double *a2)
{
  int v2 = (char *)result;
  int v3 = *result;
  switch(v3)
  {
    case 5:
      double v4 = (double)*((uint64_t *)result + 1);
      break;
    case 7:
      double v4 = *((double *)result + 1);
      break;
    case 6:
      double v4 = (double)*((unint64_t *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      long long v6 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
      std::string::basic_string[abi:ne180100]<0>(&v9, v6);
      std::string v7 = std::string::insert(&v9, 0, "type must be number, but is ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
      long long v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(302, (uint64_t)&v10, exception);
  }
  *a2 = v4;
  return result;
}

void sub_1BD0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::string,0>(char *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v12, v9);
    long long v10 = std::string::insert(&v12, 0, "cannot use value() with ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
    long long v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v13, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v13);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v12, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v12);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v13, (unsigned __int8 **)&v12))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      a4->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
    }
  }
  else
  {
    std::string v7 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v13);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v7, a4);
  }
}

void sub_1BD24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

unsigned char *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(unsigned char *result, int *a2)
{
  int v2 = result;
  switch(*result)
  {
    case 4:
      int v3 = result[8];
      break;
    case 5:
    case 6:
      int v3 = *((_DWORD *)result + 2);
      break;
    case 7:
      int v3 = (int)*((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      long long v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
      std::string::basic_string[abi:ne180100]<0>(&v8, v5);
      long long v6 = std::string::insert(&v8, 0, "type must be number, but is ");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
      long long v9 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(302, (uint64_t)&v9, exception);
  }
  *a2 = v3;
  return result;
}

void sub_1BD3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    double v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)(v4 - 16);
      long long v7 = v4 - 16;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        unsigned int v8 = *v7;
        v7 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v6 + 8, v8);
        BOOL v9 = v6 == (void)v2;
        uint64_t v6 = (uint64_t)v7;
      }
      while (!v9);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::allocate_shared[abi:ne180100]<Mel,std::allocator<Mel>,int &,void>@<X0>(int *a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0x118uLL);
  uint64_t result = std::__shared_ptr_emplace<Mel>::__shared_ptr_emplace[abi:ne180100]<int &,std::allocator<Mel>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1BD50C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<Mel>::__shared_ptr_emplace[abi:ne180100]<int &,std::allocator<Mel>,0>(void *a1, int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_26F240;
  Mel::Mel((Mel *)(a1 + 3), *a2);
  return a1;
}

void sub_1BD56C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Mel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_26F240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Mel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_26F240;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void std::__shared_ptr_emplace<Mel>::__on_zero_shared(uint64_t a1)
{
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vdeallocate(void **a1)
{
  if (*a1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>(uint64_t a1, const std::string::value_type **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = std::string::compare((const std::string *)(v3 + 32), *a2);
    long long v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      long long v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || std::string::compare((const std::string *)(v5 + 32), *a2) >= 1) {
    return v2;
  }
  return v5;
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a1, a2);
}

void sub_1BD6EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t a1, std::string *this)
{
  if (*(unsigned char *)a1 != 3)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    long long v7 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v10, v7);
    unsigned int v8 = std::string::insert(&v10, 0, "type must be string, but is ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v8->__r_.__value_.__r.__words[2];
    long long v11 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v11, exception);
  }
  double v4 = *(const std::string **)(a1 + 8);

  return std::string::operator=(this, v4);
}

void sub_1BD7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

double nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<float>,0>(char *a1, uint64_t a2)
{
  if (*a1 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    uint64_t v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    int v6 = std::string::insert(&v8, 0, "type must be array, but is ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
    long long v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v9, exception);
  }

  return nlohmann::detail::from_json_array_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<float>>((unsigned __int8 *)a1, a2);
}

void sub_1BD920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

double nlohmann::detail::from_json_array_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<float>>(unsigned __int8 *a1, uint64_t a2)
{
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  unint64_t v4 = *a1;
  if (*a1)
  {
    if (v4 == 1)
    {
      unint64_t v4 = *(void *)(*((void *)a1 + 1) + 16);
    }
    else if (v4 == 2)
    {
      unint64_t v4 = (uint64_t)(*(void *)(*((void *)a1 + 1) + 8) - **((void **)a1 + 1)) >> 4;
    }
    else
    {
      unint64_t v4 = 1;
    }
  }
  std::vector<float>::reserve((void **)&v12, v4);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v11, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_begin(v11);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v10, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(v10);
  for (unint64_t i = (char *)*((void *)&v12 + 1);
        !nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(v11, v10);
        unint64_t i = v7 + 4)
  {
    int v6 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v11);
    int v14 = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v6, (float *)&v14);
    long long v7 = std::vector<float>::insert((uint64_t)&v12, i, (float *)&v14);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(v11);
  }
  std::string v8 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v8;
    operator delete(v8);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  double result = *(double *)&v12;
  *(_OWORD *)a2 = v12;
  *(void *)(a2 + 16) = v13;
  return result;
}

void sub_1BDAA8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 48);
  if (v3)
  {
    *(void *)(v1 - 40) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(unsigned __int8 **result)
{
  if (!*result) {
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++();
  }
  int v1 = **result;
  if (v1 == 2)
  {
    result[2] += 16;
  }
  else if (v1 == 1)
  {
    uint64_t v2 = result[1];
    uint64_t v3 = (unsigned __int8 *)*((void *)v2 + 1);
    if (v3)
    {
      do
      {
        unint64_t v4 = v3;
        uint64_t v3 = *(unsigned __int8 **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        unint64_t v4 = (unsigned __int8 *)*((void *)v2 + 2);
        BOOL v5 = *(void *)v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    result[1] = v4;
  }
  else
  {
    ++result[4];
  }
  return result;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_begin(unsigned __int8 **result)
{
  int v1 = *result;
  if (!*result) {
    __assert_rtn("set_begin", "iter_impl.hpp", 174, "m_object != nullptr");
  }
  int v2 = *v1;
  if (*v1)
  {
    if (v2 == 2)
    {
      result[2] = (unsigned __int8 *)**((void **)v1 + 1);
    }
    else if (v2 == 1)
    {
      result[1] = (unsigned __int8 *)**((void **)v1 + 1);
    }
    else
    {
      result[4] = 0;
    }
  }
  else
  {
    result[4] = (unsigned char *)(&def_5A5E8 + 1);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  int v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    std::string v8 = v6;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__insert_node_at(a1, v11, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _OWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  long long v7 = *a2;
  uint64_t v8 = *((void *)*a2 + 2);
  v6[2] = **a2;
  *((void *)v6 + 6) = v8;
  *long long v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *((void *)v6 + 8) = 0;
  *((unsigned char *)v6 + 56) = 0;
  uint64_t v9 = (uint64_t)v6 + 56;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6 + 56);
  uint64_t result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  switch(*(unsigned char *)a1)
  {
    case 1:
      unint64_t v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(const void ****)(a2 + 8));
      goto LABEL_8;
    case 2:
      unint64_t v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(uint64_t **)(a2 + 8));
      goto LABEL_8;
    case 3:
      unint64_t v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(*(void *)(a2 + 8));
      goto LABEL_8;
    case 4:
      unint64_t v4 = (std::string *)*(unsigned __int8 *)(a2 + 8);
      goto LABEL_8;
    case 5:
    case 6:
    case 7:
      unint64_t v4 = *(std::string **)(a2 + 8);
      goto LABEL_8;
    case 8:
      unint64_t v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(*(void *)(a2 + 8));
LABEL_8:
      *(void *)(a1 + 8) = v4;
      break;
    default:
      break;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(const void ***a1)
{
  int v2 = (uint64_t *)operator new(0x18uLL);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](v2, a1);
  return v2;
}

void sub_1BDE68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1BDEBC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    unint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      long long v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          long long v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          unint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      unint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  int v6 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

const void **std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  BOOL v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      int v14 = (const void **)a2[1];
      do
      {
        uint64_t v15 = v14;
        int v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = (const void **)a2;
      do
      {
        uint64_t v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    long long v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  uint64_t v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      long long v12 = v11;
      uint64_t v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    int64_t v16 = a2;
    do
    {
      long long v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      int64_t v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return (const void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1BE1F8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(&this[1], (char *)a2 + 24);
  return this;
}

void sub_1BE26C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t *a1)
{
  int v2 = operator new(0x18uLL);
  v2[1] = 0;
  v2[2] = 0;
  *int v2 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v2, *a1, a1[1], (a1[1] - *a1) >> 4);
  return v2;
}

void sub_1BE2D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BE34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::TransitionModel::Tuple>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v4, v6);
      v6 += 16;
      uint64_t v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1BE440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(*(void *)a1, **(void **)(a1 + 16), **(void **)(a1 + 16), **(void **)(a1 + 8), **(void **)(a1 + 8));
  }
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3 - 16;
    long long v7 = (unsigned __int8 *)(a3 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
      int v8 = *v7;
      v7 -= 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v6 + 8), v8);
      BOOL v9 = v6 == a5;
      uint64_t v6 = (uint64_t)v7;
    }
    while (!v9);
  }
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(uint64_t a1)
{
  int v2 = (std::string *)operator new(0x18uLL);
  uint64_t v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  return v3;
}

void sub_1BE554(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(uint64_t a1)
{
  int v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *int v2 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v2, *(const void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  *((_WORD *)v2 + 12) = *(_WORD *)(a1 + 24);
  return v2;
}

void sub_1BE5B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<signed char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BE628(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(float **a1, float **a2)
{
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  unint64_t v7 = *a2 - *a1;
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(v4, v5, v6, v7);
  return v4;
}

void sub_1BE69C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(void *result, float *a2, float *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,float const*,float const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BE718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,float const*,float const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, float *a2, float *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)(v4 + 8) = 0;
      float v7 = *v6++;
      *(unsigned char *)uint64_t v4 = 7;
      *(double *)(v4 + 8) = v7;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      uint64_t v4 = v12 + 16;
      v12 += 16;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = off_26F2A8;
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  operator delete();
}

uint64_t **std::__tree<std::__value_type<AudioQualityMetric,double>,std::__map_value_compare<AudioQualityMetric,std::__value_type<AudioQualityMetric,double>,std::less<AudioQualityMetric>,true>,std::allocator<std::__value_type<AudioQualityMetric,double>>>::__emplace_unique_key_args<AudioQualityMetric,std::piecewise_construct_t const&,std::tuple<AudioQualityMetric const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  float v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        float v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        float v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

char *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(char *result, float *a2)
{
  int v2 = result;
  switch(*result)
  {
    case 4:
      float v3 = 0.0;
      if (result[8]) {
        float v3 = 1.0;
      }
      break;
    case 5:
      float v3 = (float)*((uint64_t *)result + 1);
      break;
    case 6:
      float v3 = (float)*((unint64_t *)result + 1);
      break;
    case 7:
      float v3 = *((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      uint64_t v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
      std::string::basic_string[abi:ne180100]<0>(&v8, v5);
      uint64_t v6 = std::string::insert(&v8, 0, "type must be number, but is ");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
      long long v9 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(302, (uint64_t)&v9, exception);
  }
  *a2 = v3;
  return result;
}

void sub_1BEA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void *std::get_temporary_buffer[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  while (1)
  {
    uint64_t result = operator new(16 * v1, &std::nothrow);
    if (result) {
      break;
    }
    BOOL v3 = v1 > 1;
    v1 >>= 1;
    if (!v3) {
      return 0;
    }
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,Preprocessing::snr_spl_data_filtering(void)::$_0 &,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>>(uint64_t a1, unsigned char *a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = a1;
    if (a3 == 2)
    {
      long long v7 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)(a2 - 16), "spl");
      float v61 = 0.0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v7, &v61);
      float v8 = v61;
      long long v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v6, "spl");
      float v61 = 0.0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v9, &v61);
      if (v8 < v61)
      {
        char v10 = *(unsigned char *)v6;
        *(unsigned char *)uint64_t v6 = *(a2 - 16);
        *(a2 - 16) = v10;
        uint64_t v11 = *(void *)(v6 + 8);
        *(void *)(v6 + 8) = *((void *)a2 - 1);
        *((void *)a2 - 1) = v11;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((unsigned char *)a1 != a2)
      {
        uint64_t v18 = a1 + 16;
        if ((unsigned char *)(a1 + 16) != a2)
        {
          uint64_t v19 = 0;
          uint64_t v20 = a1;
          do
          {
            uint64_t v21 = (unsigned char *)v18;
            int v22 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "spl");
            float v61 = 0.0;
            nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v22, &v61);
            float v23 = v61;
            int v24 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v20, "spl");
            float v61 = 0.0;
            nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v24, &v61);
            if (v23 < v61)
            {
              LOBYTE(v61) = *v21;
              int v62 = *(uint64_t **)(v20 + 24);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
              unsigned char *v21 = 0;
              *(void *)(v20 + 24) = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v61);
              uint64_t v25 = v19;
              while (1)
              {
                uint64_t v26 = v6 + v25;
                v59[0] = *(unsigned char *)(v6 + v25);
                std::string v60 = *(uint64_t **)(v6 + v25 + 8);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6 + v25);
                *(unsigned char *)uint64_t v26 = 0;
                *(void *)(v26 + 8) = 0;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
                char v27 = *(unsigned char *)(v6 + v25 + 16);
                *(unsigned char *)(v26 + 16) = v59[0];
                v59[0] = v27;
                uint64_t v28 = *(uint64_t **)(v6 + v25 + 24);
                *(void *)(v26 + 24) = v60;
                std::string v60 = v28;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6 + v25 + 16);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v60, v59[0]);
                if (!v25) {
                  break;
                }
                float v29 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)&v61, "spl");
                LODWORD(v56) = 0;
                nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v29, (float *)&v56);
                float v30 = *(float *)&v56;
                unint64_t v31 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v26 - 16, "spl");
                LODWORD(v56) = 0;
                nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v31, (float *)&v56);
                v25 -= 16;
                if (v30 >= *(float *)&v56)
                {
                  uint64_t v32 = v6 + v25 + 16;
                  goto LABEL_19;
                }
              }
              uint64_t v32 = v6;
LABEL_19:
              v57[0] = LOBYTE(v61);
              uint64_t v58 = v62;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v61);
              LOBYTE(v61) = 0;
              int v62 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
              char v33 = *(unsigned char *)v32;
              *(unsigned char *)uint64_t v32 = v57[0];
              v57[0] = v33;
              float v34 = *(uint64_t **)(v32 + 8);
              *(void *)(v32 + 8) = v58;
              uint64_t v58 = v34;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v32);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v58, v57[0]);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v61);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v62, LOBYTE(v61));
            }
            uint64_t v18 = (uint64_t)(v21 + 16);
            v19 += 16;
            uint64_t v20 = (uint64_t)v21;
          }
          while (v21 + 16 != a2);
        }
      }
    }
    else
    {
      uint64_t v15 = a3 >> 1;
      uint64_t v16 = a1 + 16 * (a3 >> 1);
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,Preprocessing::snr_spl_data_filtering(void)::$_0 &,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>>(a1, (unsigned char *)(a1 + 16 * (a3 >> 1)), a3 >> 1, (uint64_t)a4);
        uint64_t v35 = (uint64_t)&a4[16 * v15];
        std::__stable_sort_move<std::_ClassicAlgPolicy,Preprocessing::snr_spl_data_filtering(void)::$_0 &,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>>(v6 + 16 * (a3 >> 1), a2, a3 - v15, v35);
        uint64_t v36 = &a4[16 * a3];
        unint64_t v56 = a3;
        uint64_t v37 = v35;
        uint64_t v38 = (uint64_t)a4;
        while ((unsigned __int8 *)v37 != v36)
        {
          uint64_t v39 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v37, "spl");
          float v61 = 0.0;
          nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v39, &v61);
          float v40 = v61;
          uint64_t v41 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v38, "spl");
          float v61 = 0.0;
          nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v41, &v61);
          if (v40 >= v61)
          {
            v57[0] = *(unsigned char *)v38;
            uint64_t v58 = *(uint64_t **)(v38 + 8);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v38);
            *(unsigned char *)uint64_t v38 = 0;
            *(void *)(v38 + 8) = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
            char v44 = *(unsigned char *)v6;
            *(unsigned char *)uint64_t v6 = v57[0];
            v57[0] = v44;
            char v45 = *(uint64_t **)(v6 + 8);
            *(void *)(v6 + 8) = v58;
            uint64_t v58 = v45;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v58, v57[0]);
            v38 += 16;
          }
          else
          {
            v59[0] = *(unsigned char *)v37;
            std::string v60 = *(uint64_t **)(v37 + 8);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v37);
            *(unsigned char *)uint64_t v37 = 0;
            *(void *)(v37 + 8) = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
            char v42 = *(unsigned char *)v6;
            *(unsigned char *)uint64_t v6 = v59[0];
            v59[0] = v42;
            float v43 = *(uint64_t **)(v6 + 8);
            *(void *)(v6 + 8) = v60;
            std::string v60 = v43;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v60, v59[0]);
            v37 += 16;
          }
          v6 += 16;
          if (v38 == v35)
          {
            if ((unsigned __int8 *)v37 != v36)
            {
              uint64_t v46 = 0;
              do
              {
                uint64_t v47 = v37 + v46;
                uint64_t v48 = v6 + v46;
                LOBYTE(v61) = *(unsigned char *)(v37 + v46);
                int v62 = *(uint64_t **)(v37 + v46 + 8);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v37 + v46);
                *(unsigned char *)uint64_t v47 = 0;
                *(void *)(v47 + 8) = 0;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v61);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v61);
                char v49 = *(unsigned char *)(v6 + v46);
                *(unsigned char *)uint64_t v48 = LOBYTE(v61);
                LOBYTE(v61) = v49;
                std::string v50 = *(uint64_t **)(v6 + v46 + 8);
                *(void *)(v48 + 8) = v62;
                int v62 = v50;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6 + v46);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v61);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v62, LOBYTE(v61));
                v46 += 16;
              }
              while ((unsigned __int8 *)(v47 + 16) != v36);
            }
            goto LABEL_35;
          }
        }
        if (v38 != v35)
        {
          uint64_t v51 = 0;
          do
          {
            uint64_t v52 = v38 + v51;
            uint64_t v53 = v6 + v51;
            LOBYTE(v61) = *(unsigned char *)(v38 + v51);
            int v62 = *(uint64_t **)(v38 + v51 + 8);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v38 + v51);
            *(unsigned char *)uint64_t v52 = 0;
            *(void *)(v52 + 8) = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v61);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v61);
            char v54 = *(unsigned char *)(v6 + v51);
            *(unsigned char *)uint64_t v53 = LOBYTE(v61);
            LOBYTE(v61) = v54;
            uint64_t v55 = *(uint64_t **)(v6 + v51 + 8);
            *(void *)(v53 + 8) = v62;
            int v62 = v55;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6 + v51);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v61);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v62, LOBYTE(v61));
            v51 += 16;
          }
          while (v52 + 16 != v35);
        }
LABEL_35:
        if (a4) {
          std::__destruct_n::__process[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v56, a4);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,Preprocessing::snr_spl_data_filtering(void)::$_0 &,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>>(a1, a1 + 16 * (a3 >> 1), a3 >> 1, a4, a5);
        uint64_t v17 = a3 - v15;
        std::__stable_sort<std::_ClassicAlgPolicy,Preprocessing::snr_spl_data_filtering(void)::$_0 &,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>>(v16, a2, v17, a4, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,Preprocessing::snr_spl_data_filtering(void)::$_0 &,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>>(v6, v16, (uint64_t)a2, v15, v17, a4, a5);
      }
    }
  }
}

void sub_1BF180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v15) {
    std::__destruct_n::__process[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&a10, v15);
  }
  _Unwind_Resume(exception_object);
}

void std::__stable_sort_move<std::_ClassicAlgPolicy,Preprocessing::snr_spl_data_filtering(void)::$_0 &,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>>(uint64_t a1, unsigned char *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = a1;
    if (a3 == 2)
    {
      uint64_t v50 = 0;
      float v8 = a2 - 16;
      long long v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)(a2 - 16), "spl");
      float v48 = 0.0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v9, &v48);
      float v10 = v48;
      uint64_t v11 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v7, "spl");
      float v48 = 0.0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v11, &v48);
      if (v10 >= v48)
      {
        *(unsigned char *)a4 = *(unsigned char *)v7;
        *(void *)(a4 + 8) = *(void *)(v7 + 8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        *(unsigned char *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
        *(unsigned char *)(a4 + 16) = *(v6 - 16);
        uint64_t v12 = v6 - 8;
      }
      else
      {
        *(unsigned char *)a4 = *(v6 - 16);
        *(void *)(a4 + 8) = *((void *)v6 - 1);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v6 - 16));
        *(v6 - 16) = 0;
        *((void *)v6 - 1) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
        uint64_t v12 = (void *)(v7 + 8);
        *(unsigned char *)(a4 + 16) = *(unsigned char *)v7;
        float v8 = (unsigned char *)v7;
      }
      *(void *)(a4 + 24) = *v12;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
      *float v8 = 0;
      *uint64_t v12 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4 + 16);
    }
    else if (a3 == 1)
    {
      *(unsigned char *)a4 = *(unsigned char *)a1;
      *(void *)(a4 + 8) = *(void *)(a1 + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
      *(unsigned char *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
    }
    else if ((uint64_t)a3 > 8)
    {
      unint64_t v32 = a1 + 16 * (a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,Preprocessing::snr_spl_data_filtering(void)::$_0 &,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>>(a1, v32, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,Preprocessing::snr_spl_data_filtering(void)::$_0 &,std::__wrap_iter<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>>(v7 + 16 * (a3 >> 1), v6, a3 - (a3 >> 1), a4 + 16 * (a3 >> 1), a3 - (a3 >> 1));
      uint64_t v33 = 0;
      uint64_t v50 = 0;
      uint64_t v34 = v7 + 16 * (a3 >> 1);
      while ((unsigned char *)v34 != v6)
      {
        uint64_t v35 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v34, "spl");
        float v48 = 0.0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v35, &v48);
        float v36 = v48;
        uint64_t v37 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v7, "spl");
        float v48 = 0.0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v37, &v48);
        uint64_t v38 = (unsigned char *)(a4 + v33);
        uint64_t v39 = a4 + v33;
        if (v36 >= v48)
        {
          unsigned char *v38 = *(unsigned char *)v7;
          *(void *)(v39 + 8) = *(void *)(v7 + 8);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
          *(unsigned char *)uint64_t v7 = 0;
          *(void *)(v7 + 8) = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4 + v33);
          v7 += 16;
        }
        else
        {
          unsigned char *v38 = *(unsigned char *)v34;
          *(void *)(v39 + 8) = *(void *)(v34 + 8);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v34);
          *(unsigned char *)uint64_t v34 = 0;
          *(void *)(v34 + 8) = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4 + v33);
          v34 += 16;
        }
        ++v50;
        v33 += 16;
        if (v7 == v32)
        {
          if ((unsigned char *)v34 != v6)
          {
            uint64_t v40 = 0;
            do
            {
              uint64_t v41 = v34 + v40;
              uint64_t v42 = a4 + v40 + v33;
              *(unsigned char *)uint64_t v42 = *(unsigned char *)(v34 + v40);
              *(void *)(v42 + 8) = *(void *)(v34 + v40 + 8);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v34 + v40);
              *(unsigned char *)uint64_t v41 = 0;
              *(void *)(v41 + 8) = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4 + v33 + v40);
              ++v50;
              v40 += 16;
            }
            while ((unsigned char *)(v41 + 16) != v6);
          }
          return;
        }
      }
      if (v7 != v32)
      {
        uint64_t v43 = 0;
        do
        {
          uint64_t v44 = a4 + v43 + v33;
          uint64_t v45 = v7 + v43;
          *(unsigned char *)uint64_t v44 = *(unsigned char *)(v7 + v43);
          *(void *)(v44 + 8) = *(void *)(v7 + v43 + 8);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7 + v43);
          *(unsigned char *)uint64_t v45 = 0;
          *(void *)(v45 + 8) = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4 + v33 + v43);
          ++v50;
          v43 += 16;
        }
        while (v45 + 16 != v32);
      }
    }
    else if ((unsigned char *)a1 != a2)
    {
      *(unsigned char *)a4 = *(unsigned char *)a1;
      *(void *)(a4 + 8) = *(void *)(a1 + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
      *(unsigned char *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
      uint64_t v52 = 1;
      uint64_t v13 = v7 + 16;
      if ((unsigned char *)(v7 + 16) != v6)
      {
        uint64_t v14 = 0;
        uint64_t v46 = v6;
        uint64_t v15 = a4;
        do
        {
          uint64_t v16 = (unsigned char *)v13;
          uint64_t v17 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v13, "spl");
          float v53 = 0.0;
          nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v17, &v53);
          float v18 = v53;
          uint64_t v19 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v15, "spl");
          float v53 = 0.0;
          nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v19, &v53);
          uint64_t v20 = v15 + 16;
          if (v18 >= v53)
          {
            *(unsigned char *)(v15 + 16) = *v16;
            *(void *)(v15 + 24) = *(void *)(v7 + 24);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
            *uint64_t v16 = 0;
            *(void *)(v7 + 24) = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v15 + 16);
            ++v52;
          }
          else
          {
            *(unsigned char *)(v15 + 16) = *(unsigned char *)v15;
            *(void *)(v15 + 24) = *(void *)(v15 + 8);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v15);
            *(unsigned char *)uint64_t v15 = 0;
            *(void *)(v15 + 8) = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v15 + 16);
            ++v52;
            uint64_t v21 = a4;
            if (v15 != a4)
            {
              uint64_t v47 = v15 + 16;
              uint64_t v22 = v14;
              while (1)
              {
                float v23 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v16, "spl");
                float v53 = 0.0;
                nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v23, &v53);
                uint64_t v24 = a4 + v22;
                float v25 = v53;
                uint64_t v26 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a4 + v22 - 16, "spl");
                float v53 = 0.0;
                nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v26, &v53);
                if (v25 >= v53) {
                  break;
                }
                LOBYTE(v50) = *(unsigned char *)(v24 - 16);
                uint64_t v27 = a4 + v22;
                uint64_t v51 = *(uint64_t **)(a4 + v22 - 8);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4 + v22 - 16);
                *(unsigned char *)(v24 - 16) = 0;
                *(void *)(v27 - 8) = 0;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v50);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v50);
                char v28 = *(unsigned char *)(a4 + v22);
                *(unsigned char *)uint64_t v27 = v50;
                LOBYTE(v50) = v28;
                float v29 = *(uint64_t **)(a4 + v22 + 8);
                *(void *)(v27 + 8) = v51;
                uint64_t v51 = v29;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4 + v22);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v50);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v51, v50);
                v22 -= 16;
                if (!v22)
                {
                  uint64_t v21 = a4;
                  goto LABEL_21;
                }
              }
              uint64_t v21 = a4 + v22;
LABEL_21:
              uint64_t v20 = v47;
            }
            LOBYTE(v48) = *v16;
            char v49 = *(uint64_t **)(v7 + 24);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
            *uint64_t v16 = 0;
            *(void *)(v7 + 24) = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v48);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v48);
            char v30 = *(unsigned char *)v21;
            *(unsigned char *)uint64_t v21 = LOBYTE(v48);
            LOBYTE(v48) = v30;
            unint64_t v31 = *(uint64_t **)(v21 + 8);
            *(void *)(v21 + 8) = v49;
            char v49 = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v21);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v48);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v49, LOBYTE(v48));
            uint64_t v6 = v46;
          }
          uint64_t v13 = (uint64_t)(v16 + 16);
          v14 += 16;
          uint64_t v15 = v20;
          uint64_t v7 = (uint64_t)v16;
        }
        while (v16 + 16 != v6);
      }
    }
  }
}