unint64_t specialized SIMD<>.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  void (**v10)(char *, uint64_t);
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t result;
  int v25;
  unint64_t v26;
  unint64_t v27;
  void v28[3];
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v29 = type metadata accessor for CharacterSet();
  v4 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a1;
  v33 = a2;
  v30 = 44;
  v31 = 0xE100000000000000;
  v28[2] = lazy protocol witness table accessor for type String and conformance String();
  v7 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  v8 = *(void *)(v7 + 16);
  v9 = MEMORY[0x263F8EE78];
  if (v8)
  {
    v30 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v10 = (void (**)(char *, uint64_t))(v4 + 8);
    v28[1] = v7;
    v11 = (uint64_t *)(v7 + 40);
    do
    {
      v12 = *v11;
      v32 = *(v11 - 1);
      v33 = v12;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      v13 = StringProtocol.trimmingCharacters(in:)();
      v15 = v14;
      (*v10)(v6, v29);
      swift_bridgeObjectRelease();
      v16 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1);
        v16 = v30;
      }
      v18 = *(void *)(v16 + 16);
      v17 = *(void *)(v16 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v16 = v30;
      }
      v11 += 2;
      *(void *)(v16 + 16) = v18 + 1;
      v19 = v16 + 16 * v18;
      *(void *)(v19 + 32) = v13;
      *(void *)(v19 + 40) = v15;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x263F8EE78];
    v20 = *(void *)(v16 + 16);
    if (!v20) {
      goto LABEL_16;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v16 = MEMORY[0x263F8EE78];
    v20 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v20)
    {
LABEL_16:
      swift_bridgeObjectRelease();
      specialized SIMD.init<A>(_:)(v9);
      return swift_bridgeObjectRelease();
    }
  }
  v32 = v9;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  v9 = v32;
  v21 = (uint64_t *)(v16 + 40);
  while (1)
  {
    v22 = *(v21 - 1);
    v23 = *v21;
    swift_bridgeObjectRetain();
    result = specialized Float.init<A>(_:)(v22, v23);
    if ((result & 0x100000000) != 0) {
      break;
    }
    v25 = result;
    v32 = v9;
    v27 = *(void *)(v9 + 16);
    v26 = *(void *)(v9 + 24);
    if (v27 >= v26 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
      v9 = v32;
    }
    v21 += 2;
    *(void *)(v9 + 16) = v27 + 1;
    *(_DWORD *)(v9 + 4 * v27 + 32) = v25;
    if (!--v20) {
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t SIMD<>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v40 = a6;
  uint64_t v41 = type metadata accessor for CharacterSet();
  uint64_t v13 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  uint64_t v42 = 44;
  unint64_t v43 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v16 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  int64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    uint64_t v36 = a5;
    uint64_t v37 = a3;
    uint64_t v38 = a4;
    uint64_t v39 = v7;
    uint64_t v42 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    v18 = (void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v35 = v16;
    v19 = (uint64_t *)(v16 + 40);
    do
    {
      uint64_t v20 = *v19;
      uint64_t v44 = *(v19 - 1);
      uint64_t v45 = v20;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      uint64_t v21 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v23 = v22;
      (*v18)(v15, v41);
      swift_bridgeObjectRelease();
      uint64_t v24 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v24 + 16) + 1, 1);
        uint64_t v24 = v42;
      }
      unint64_t v26 = *(void *)(v24 + 16);
      unint64_t v25 = *(void *)(v24 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        uint64_t v24 = v42;
      }
      v19 += 2;
      *(void *)(v24 + 16) = v26 + 1;
      unint64_t v27 = v24 + 16 * v26;
      *(void *)(v27 + 32) = v21;
      *(void *)(v27 + 40) = v23;
      --v17;
    }
    while (v17);
    uint64_t v28 = swift_bridgeObjectRelease();
    a4 = v38;
    a5 = v36;
    a3 = v37;
  }
  else
  {
    uint64_t v28 = swift_bridgeObjectRelease();
    uint64_t v24 = MEMORY[0x263F8EE78];
  }
  uint64_t v44 = v24;
  MEMORY[0x270FA5388](v28);
  *(&v35 - 4) = a3;
  *(&v35 - 3) = a4;
  *(&v35 - 2) = a5;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A]);
  uint64_t v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in SIMD<>.init(_:), (uint64_t)(&v35 - 6), v29, AssociatedTypeWitness, MEMORY[0x263F8E628], v31, MEMORY[0x263F8E658], v32);
  swift_bridgeObjectRelease();
  uint64_t v44 = v33;
  type metadata accessor for Array();
  swift_getWitnessTable();
  return SIMD.init<A>(_:)();
}

uint64_t closure #2 in SIMD<>.init(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v3 - 8);
  v5 = (char *)&v8 - v4;
  swift_bridgeObjectRetain();
  dispatch thunk of LosslessStringConvertible.init(_:)();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, AssociatedTypeWitness);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v5, AssociatedTypeWitness);
  }
  __break(1u);
  return result;
}

uint64_t specialized FixedWidthInteger.init(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = 0;
    LOBYTE(v18) = 1;
    return v19 | ((unint64_t)v18 << 32);
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v8 = specialized _parseInteger<A, B>(ascii:radix:)(result, a2, 10);
    swift_bridgeObjectRelease();
    uint64_t v18 = HIDWORD(v8) & 1;
LABEL_36:
    uint64_t v19 = v8;
    if (v18) {
      uint64_t v19 = 0;
    }
    return v19 | ((unint64_t)v18 << 32);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0) {
      uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v7 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
    LODWORD(v8) = v7;
    char v25 = BYTE4(v7) & 1;
    char v9 = BYTE4(v7) & 1;
    goto LABEL_35;
  }
  v24[0] = result;
  v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v3) {
      goto LABEL_51;
    }
    if (v3 == 1) {
      goto LABEL_34;
    }
    LODWORD(v8) = (BYTE1(result) - 48);
    if (v8 > 9) {
      goto LABEL_34;
    }
    uint64_t v14 = v3 - 2;
    if (v14)
    {
      v15 = (unsigned __int8 *)v24 + 2;
      while (1)
      {
        unsigned int v16 = *v15 - 48;
        if (v16 > 9) {
          goto LABEL_34;
        }
        uint64_t v17 = 10 * (int)v8;
        if (v17 != (int)v17) {
          goto LABEL_34;
        }
        LODWORD(v8) = v17 + v16;
        if (__OFADD__(v17, v16)) {
          goto LABEL_34;
        }
        char v9 = 0;
        ++v15;
        if (!--v14) {
          goto LABEL_35;
        }
      }
    }
LABEL_40:
    char v9 = 0;
    goto LABEL_35;
  }
  if (result != 45)
  {
    if (!v3) {
      goto LABEL_34;
    }
    LODWORD(v8) = (result - 48);
    if (v8 > 9) {
      goto LABEL_34;
    }
    uint64_t v20 = v3 - 1;
    if (v20)
    {
      uint64_t v21 = (unsigned __int8 *)v24 + 1;
      while (1)
      {
        unsigned int v22 = *v21 - 48;
        if (v22 > 9) {
          goto LABEL_34;
        }
        uint64_t v23 = 10 * (int)v8;
        if (v23 != (int)v23) {
          goto LABEL_34;
        }
        LODWORD(v8) = v23 + v22;
        if (__OFADD__(v23, v22)) {
          goto LABEL_34;
        }
        char v9 = 0;
        ++v21;
        if (!--v20) {
          goto LABEL_35;
        }
      }
    }
    goto LABEL_40;
  }
  if (v3)
  {
    if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      char v9 = 0;
      LODWORD(v8) = -(BYTE1(result) - 48);
      uint64_t v10 = v3 - 2;
      if (!v10)
      {
LABEL_35:
        swift_bridgeObjectRelease();
        LODWORD(v18) = v9 & 1;
        goto LABEL_36;
      }
      v11 = (unsigned __int8 *)v24 + 2;
      while (1)
      {
        unsigned int v12 = *v11 - 48;
        if (v12 > 9) {
          break;
        }
        uint64_t v13 = 10 * (int)v8;
        if (v13 != (int)v13) {
          break;
        }
        LODWORD(v8) = v13 - v12;
        if (__OFSUB__(v13, v12)) {
          break;
        }
        char v9 = 0;
        ++v11;
        if (!--v10) {
          goto LABEL_35;
        }
      }
    }
LABEL_34:
    LODWORD(v8) = 0;
    char v9 = 1;
    goto LABEL_35;
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

void *createType(_:)()
{
  uint64_t v32 = type metadata accessor for CharacterSet();
  uint64_t v0 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  v2 = (char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = XMLNode.subscript.getter(1701869940, 0xE400000000000000);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v3;
  uint64_t v6 = v4;
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v3 == 0x676E69727473 && v4 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v8 = XMLNode.subscript.getter(1836412517, 0xE400000000000000);
    if (v9)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v9;
      uint64_t v12 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
      if (v13)
      {
        uint64_t v14 = v12;
        uint64_t v15 = v13;
        swift_bridgeObjectRelease();
        uint64_t v35 = v10;
        uint64_t v36 = v11;
        uint64_t v33 = 44;
        unint64_t v34 = 0xE100000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v16 = StringProtocol.components<A>(separatedBy:)();
        swift_bridgeObjectRelease();
        int64_t v17 = *(void *)(v16 + 16);
        if (v17)
        {
          uint64_t v30 = v14;
          uint64_t v31 = v15;
          uint64_t v33 = v7;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
          uint64_t v18 = (void (**)(char *, uint64_t))(v0 + 8);
          uint64_t v29 = v16;
          uint64_t v19 = (uint64_t *)(v16 + 40);
          do
          {
            uint64_t v20 = *v19;
            uint64_t v35 = *(v19 - 1);
            uint64_t v36 = v20;
            swift_bridgeObjectRetain();
            static CharacterSet.whitespacesAndNewlines.getter();
            uint64_t v21 = StringProtocol.trimmingCharacters(in:)();
            uint64_t v23 = v22;
            (*v18)(v2, v32);
            swift_bridgeObjectRelease();
            uint64_t v24 = v33;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v24 + 16) + 1, 1);
              uint64_t v24 = v33;
            }
            unint64_t v26 = *(void *)(v24 + 16);
            unint64_t v25 = *(void *)(v24 + 24);
            if (v26 >= v25 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
              uint64_t v24 = v33;
            }
            v19 += 2;
            *(void *)(v24 + 16) = v26 + 1;
            unint64_t v27 = v24 + 16 * v26;
            *(void *)(v27 + 32) = v21;
            *(void *)(v27 + 40) = v23;
            --v17;
          }
          while (v17);
          swift_bridgeObjectRelease();
          uint64_t v7 = MEMORY[0x263F8EE78];
          uint64_t v14 = v30;
          uint64_t v15 = v31;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v24 = MEMORY[0x263F8EE78];
        }
        type metadata accessor for MaterialXDataType();
        uint64_t result = (void *)swift_allocObject();
        uint64_t v5 = v14;
        uint64_t v6 = v15;
        goto LABEL_20;
      }
      swift_bridgeObjectRelease();
    }
  }
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  uint64_t v24 = 0;
LABEL_20:
  result[4] = v5;
  result[5] = v6;
  result[2] = v7;
  result[3] = v24;
  return result;
}

uint64_t XMLNode.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_getObjectType();
  uint64_t v6 = swift_conformsToProtocol2();
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  if (!v6) {
    uint64_t v3 = 0;
  }
  if (!v3) {
    return 0;
  }
  uint64_t ObjectType = swift_getObjectType();
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, ObjectType, v7)) {
    return 0;
  }
  uint64_t v10 = v9;
  uint64_t v11 = swift_getObjectType();
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v11, v10);
  swift_unknownObjectRelease();
  return v12;
}

void *MaterialXDataType.__allocating_init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)swift_allocObject();
  result[4] = a1;
  result[5] = a2;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = a3;
  return result;
}

void *MaterialXDataType.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)swift_allocObject();
  result[4] = a1;
  result[5] = a2;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = 0;
  return result;
}

void *XMLNode.elements(forXPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(void))(a4 + 48))();
  if (!v4)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 + 16);
    if (v8)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = (void *)MEMORY[0x263F8EE78];
      uint64_t v9 = 32;
      do
      {
        uint64_t v11 = *(void *)(v7 + v9);
        swift_getObjectType();
        uint64_t v12 = swift_conformsToProtocol2();
        if (v12) {
          uint64_t v13 = v11;
        }
        else {
          uint64_t v13 = 0;
        }
        if (v12) {
          uint64_t v14 = v12;
        }
        else {
          uint64_t v14 = 0;
        }
        if (v13)
        {
          swift_unknownObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
          }
          unint64_t v16 = v5[2];
          unint64_t v15 = v5[3];
          if (v16 >= v15 >> 1) {
            uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v5);
          }
          v5[2] = v16 + 1;
          uint64_t v10 = &v5[2 * v16];
          v10[4] = v13;
          v10[5] = v14;
        }
        v9 += 16;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
  }
  return v5;
}

Swift::Bool_optional __swiftcall XMLElement.BOOL(named:)(Swift::String named)
{
  uint64_t v1 = XMLNode.subscript.getter(named._countAndFlagsBits, (uint64_t)named._object);
  if (!v2) {
    return (Swift::Bool_optional)2;
  }
  uint64_t v3 = v1;
  uint64_t v4 = v2;
  if (v1 == 1702195828 && v2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (Swift::Bool_optional)1;
  }
  else if (v3 == 0x65736C6166 && v4 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 0;
    }
    else {
      return (Swift::Bool_optional)2;
    }
  }
}

uint64_t createNodeDef(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v97 = (void *)type metadata accessor for CharacterSet();
  uint64_t v6 = *(v97 - 1);
  MEMORY[0x270FA5388](v97);
  uint64_t v8 = (char *)v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v92 = *(void *)(a2 + 8);
  uint64_t v10 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
  if (!v11) {
    goto LABEL_13;
  }
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  uint64_t v14 = XMLNode.subscript.getter(1701080942, 0xE400000000000000);
  if (!v15)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    _s11ShaderGraph7NodeDefVSgWOi0_(&v98);
    goto LABEL_56;
  }
  uint64_t v91 = ObjectType;
  uint64_t v88 = v15;
  uint64_t v89 = v14;
  *(void *)&long long v90 = v12;
  uint64_t v16 = XMLNode.subscript.getter(0x756F726765646F6ELL, 0xE900000000000070);
  uint64_t v86 = v17;
  uint64_t v87 = v16;
  uint64_t v18 = XMLNode.subscript.getter(0x746567726174, 0xE600000000000000);
  *((void *)&v90 + 1) = v13;
  if (v19)
  {
    uint64_t v115 = v18;
    uint64_t v116 = v19;
    *(void *)&long long v98 = 44;
    *((void *)&v98 + 1) = 0xE100000000000000;
    unint64_t v96 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v20 = StringProtocol.components<A>(separatedBy:)();
    swift_bridgeObjectRelease();
    int64_t v21 = *(void *)(v20 + 16);
    if (v21)
    {
      uint64_t v84 = a1;
      uint64_t v85 = a3;
      *(void *)&long long v98 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
      uint64_t v22 = (void (**)(char *, void *))(v6 + 8);
      uint64_t v95 = v20;
      uint64_t v23 = (uint64_t *)(v20 + 40);
      do
      {
        uint64_t v24 = *v23;
        uint64_t v115 = *(v23 - 1);
        uint64_t v116 = v24;
        swift_bridgeObjectRetain();
        static CharacterSet.whitespacesAndNewlines.getter();
        uint64_t v25 = StringProtocol.trimmingCharacters(in:)();
        uint64_t v27 = v26;
        (*v22)(v8, v97);
        swift_bridgeObjectRelease();
        uint64_t v28 = v98;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1);
          uint64_t v28 = v98;
        }
        unint64_t v30 = *(void *)(v28 + 16);
        unint64_t v29 = *(void *)(v28 + 24);
        if (v30 >= v29 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
          uint64_t v28 = v98;
        }
        v23 += 2;
        *(void *)(v28 + 16) = v30 + 1;
        uint64_t v31 = v28 + 16 * v30;
        *(void *)(v31 + 32) = v25;
        *(void *)(v31 + 40) = v27;
        --v21;
      }
      while (v21);
      uint64_t v32 = v28;
      swift_bridgeObjectRelease();
      uint64_t v33 = 0;
      a1 = v84;
      a3 = v85;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v33 = 0;
      uint64_t v32 = MEMORY[0x263F8EE78];
    }
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
  }
  uint64_t v34 = v92;
  uint64_t v35 = XMLNode.elements(forXPath:)(0x7475706E692F2ELL, 0xE700000000000000, v91, v92);
  uint64_t v36 = v35[2];
  if (v36)
  {
    v83 = 0;
    uint64_t v84 = a1;
    uint64_t v85 = a3;
    swift_bridgeObjectRetain();
    v82[1] = v35;
    uint64_t v37 = v35 + 5;
    v97 = (void *)MEMORY[0x263F8EE78];
    do
    {
      swift_unknownObjectRetain();
      uint64_t v38 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
      if (v39)
      {
        uint64_t v40 = v38;
        uint64_t v41 = v39;
        uint64_t v42 = createType(_:)();
        if (v42)
        {
          unint64_t v43 = v42;
          v44._countAndFlagsBits = 0x6D726F66696E75;
          v44._object = (void *)0xE700000000000000;
          LOBYTE(v45) = XMLElement.BOOL(named:)(v44);
          LODWORD(v94) = v45;
          uint64_t v46 = XMLNode.subscript.getter(0x65756C6176, 0xE500000000000000);
          uint64_t v95 = v47;
          unint64_t v96 = v46;
          uint64_t v93 = XMLNode.subscript.getter(0x67746C7561666564, 0xEF706F72706D6F65);
          uint64_t v49 = v48;
          swift_unknownObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v97[2] + 1, 1, v97);
          }
          unint64_t v51 = v97[2];
          unint64_t v50 = v97[3];
          if (v51 >= v50 >> 1) {
            v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v97);
          }
          char v52 = v94 & 1;
          unint64_t v54 = v96;
          v53 = v97;
          v97[2] = v51 + 1;
          v55 = &v53[8 * v51];
          v55[4] = v40;
          v55[5] = v41;
          v55[6] = v43;
          v55[7] = v54;
          uint64_t v56 = v93;
          v55[8] = v95;
          v55[9] = v56;
          v55[10] = v49;
          *((unsigned char *)v55 + 88) = v52;
        }
        else
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_unknownObjectRelease();
      }
      v37 += 2;
      --v36;
    }
    while (v36);
    swift_bridgeObjectRelease();
    a1 = v84;
    a3 = v85;
    uint64_t v34 = v92;
    uint64_t v33 = v83;
  }
  else
  {
    v97 = (void *)MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  v57 = XMLNode.elements(forXPath:)(0x74757074756F2F2ELL, 0xE800000000000000, v91, v34);
  if (v33)
  {

    v58 = 0;
  }
  else
  {
    v59 = v57;
    uint64_t v60 = v57[2];
    if (v60)
    {
      uint64_t v84 = a1;
      uint64_t v85 = a3;
      swift_bridgeObjectRetain();
      v94 = v59;
      v61 = v59 + 5;
      v58 = (void *)MEMORY[0x263F8EE78];
      do
      {
        swift_unknownObjectRetain();
        uint64_t v62 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
        if (v63)
        {
          uint64_t v64 = v62;
          uint64_t v65 = v63;
          v66 = createType(_:)();
          if (v66)
          {
            v67 = v66;
            uint64_t v95 = XMLNode.subscript.getter(0x65756C6176, 0xE500000000000000);
            unint64_t v96 = v68;
            swift_unknownObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v58[2] + 1, 1, v58);
            }
            unint64_t v70 = v58[2];
            unint64_t v69 = v58[3];
            if (v70 >= v69 >> 1) {
              v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v69 > 1), v70 + 1, 1, v58);
            }
            v58[2] = v70 + 1;
            v71 = &v58[8 * v70];
            v71[4] = v64;
            v71[5] = v65;
            uint64_t v72 = v95;
            v71[6] = v67;
            v71[7] = v72;
            v71[9] = 0;
            v71[10] = 0;
            v71[8] = v96;
            *((unsigned char *)v71 + 88) = 0;
          }
          else
          {
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_unknownObjectRelease();
        }
        v61 += 2;
        --v60;
      }
      while (v60);
      swift_bridgeObjectRelease();
      a3 = v85;
    }
    else
    {
      v58 = (void *)MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v73 = XMLNode.subscript.getter(0xD000000000000011, 0x800000025C424600);
  uint64_t v74 = XMLNode.subscript.getter(0x6C62616C69617661, 0xE900000000000065);
  uint64_t v76 = specialized MaterialXAvailability.init(_:message:)(v74, v75, v73);
  long long v98 = v90;
  if (v32) {
    uint64_t v78 = v32;
  }
  else {
    uint64_t v78 = MEMORY[0x263F8EE78];
  }
  v79 = v97;
  if (!v97) {
    v79 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v99 = v89;
  uint64_t v100 = v88;
  uint64_t v101 = 0;
  if (v58) {
    v80 = v58;
  }
  else {
    v80 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v102 = 0;
  uint64_t v103 = v87;
  uint64_t v104 = v86;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  char v107 = 2;
  uint64_t v108 = v78;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  uint64_t v111 = v76;
  uint64_t v112 = v77;
  v113 = v79;
  v114 = v80;
  destructiveProjectEnumData for NodePersonality.ShaderType(&v98);
LABEL_56:
  outlined init with take of NodeDef?((uint64_t)&v98, (uint64_t)&v115);
  return outlined init with take of NodeDef?((uint64_t)&v115, a3);
}

uint64_t createGeomPropDef(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
  uint64_t v7 = v5;
  if (!v6)
  {
    uint64_t v64 = 1701667182;
    unint64_t v65 = 0xE400000000000000;
LABEL_7:
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi11_((uint64_t)&v64);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v64, (uint64_t)v66);
    long long v67 = (unint64_t)v7;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    _OWORD *v15 = v66[0];
    long long v16 = v66[4];
    long long v17 = v66[2];
    long long v18 = v66[1];
    v15[3] = v66[3];
    v15[4] = v16;
    v15[1] = v18;
    v15[2] = v17;
    long long v19 = v66[8];
    long long v20 = v66[6];
    long long v21 = v66[5];
    v15[7] = v66[7];
    v15[8] = v19;
    v15[5] = v21;
    v15[6] = v20;
    long long v22 = v67;
    long long v23 = v66[10];
    long long v24 = v66[9];
    v15[11] = v66[11];
    v15[12] = v22;
    v15[9] = v24;
    v15[10] = v23;
    return swift_willThrow();
  }
  uint64_t v8 = v6;
  uint64_t v9 = v5;
  uint64_t v7 = XMLNode.subscript.getter(0x706F72706D6F6567, 0xE800000000000000);
  if (!v10)
  {
    swift_bridgeObjectRelease();
    uint64_t v64 = 0x706F72706D6F6567;
    unint64_t v65 = 0xE800000000000000;
    goto LABEL_7;
  }
  uint64_t v11 = v10;
  uint64_t v12 = swift_unknownObjectRetain();
  uint64_t v13 = specialized MaterialXDataType.__allocating_init(xmlElement:)(v12, a1);
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  uint64_t v63 = v13;
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  v69._countAndFlagsBits = v7;
  v69._object = v11;
  unsigned __int8 v25 = specialized GeomPropDef.BuiltinGeomProp.init(rawValue:)(v69);
  unsigned __int8 v26 = v25;
  uint64_t v62 = v9;
  if (v25 == 6)
  {
    uint64_t v68 = v7;
    unsigned __int8 v27 = v25;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = 0;
    unsigned __int8 v27 = v26;
    uint64_t v68 = v26;
  }
  uint64_t v28 = XMLNode.subscript.getter(0x6563617073, 0xE500000000000000);
  if (v29)
  {
    unint64_t v30 = v29;
    v31._countAndFlagsBits = v28;
    v31._object = v30;
    unint64_t v32 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GeomPropDef.Space.init(rawValue:), v31);
    swift_bridgeObjectRelease();
    if (v32 >= 3) {
      char v33 = 3;
    }
    else {
      char v33 = v32;
    }
  }
  else
  {
    char v33 = 3;
  }
  uint64_t result = XMLNode.subscript.getter(0x7865646E69, 0xE500000000000000);
  unsigned __int8 v35 = v27;
  if (!v34)
  {
    uint64_t v45 = 0;
    char v46 = 1;
    uint64_t v47 = v63;
    uint64_t v40 = v68;
LABEL_65:
    *(void *)a2 = v62;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v47;
    *(void *)(a2 + 24) = v40;
    *(void *)(a2 + 32) = v11;
    *(unsigned char *)(a2 + 40) = v35 == 6;
    *(unsigned char *)(a2 + 41) = v33;
    *(void *)(a2 + 48) = v45;
    *(unsigned char *)(a2 + 56) = v46 & 1;
    return result;
  }
  uint64_t v36 = v34;
  uint64_t v37 = HIBYTE(v34) & 0xF;
  uint64_t v38 = result & 0xFFFFFFFFFFFFLL;
  if ((v36 & 0x2000000000000000) != 0) {
    uint64_t v39 = v37;
  }
  else {
    uint64_t v39 = result & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v40 = v68;
  if (!v39)
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v45 = 0;
    char v46 = 1;
    uint64_t v47 = v63;
    goto LABEL_65;
  }
  char v61 = v33;
  if ((v36 & 0x1000000000000000) != 0)
  {
    uint64_t v42 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(result, v36, 10);
    char v44 = v60;
    goto LABEL_61;
  }
  if ((v36 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0) {
      uint64_t v41 = (unsigned __int8 *)((v36 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v41 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v42 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v41, v38, 10);
    char v44 = v43 & 1;
    goto LABEL_61;
  }
  *(void *)&v66[0] = result;
  *((void *)&v66[0] + 1) = v36 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v37) {
      goto LABEL_76;
    }
    if (v37 == 1 || (BYTE1(result) - 48) > 9u) {
      goto LABEL_48;
    }
    uint64_t v42 = (BYTE1(result) - 48);
    if (v37 != 2)
    {
      if ((BYTE2(result) - 48) > 9u) {
        goto LABEL_48;
      }
      uint64_t v42 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
      uint64_t v48 = v37 - 3;
      if (v48)
      {
        uint64_t v49 = (unsigned __int8 *)v66 + 3;
        while (1)
        {
          unsigned int v50 = *v49 - 48;
          if (v50 > 9) {
            goto LABEL_48;
          }
          uint64_t v51 = 10 * v42;
          if ((unsigned __int128)(v42 * (__int128)10) >> 64 != (10 * v42) >> 63) {
            goto LABEL_48;
          }
          uint64_t v42 = v51 + v50;
          if (__OFADD__(v51, v50)) {
            goto LABEL_48;
          }
          char v44 = 0;
          ++v49;
          if (!--v48) {
            goto LABEL_61;
          }
        }
      }
    }
LABEL_60:
    char v44 = 0;
    goto LABEL_61;
  }
  if (result != 45)
  {
    if (!v37 || (result - 48) > 9u) {
      goto LABEL_48;
    }
    uint64_t v42 = (result - 48);
    if (v37 != 1)
    {
      if ((BYTE1(result) - 48) > 9u) {
        goto LABEL_48;
      }
      uint64_t v42 = 10 * (result - 48) + (BYTE1(result) - 48);
      uint64_t v52 = v37 - 2;
      if (v52)
      {
        v53 = (unsigned __int8 *)v66 + 2;
        while (1)
        {
          unsigned int v54 = *v53 - 48;
          if (v54 > 9) {
            goto LABEL_48;
          }
          uint64_t v55 = 10 * v42;
          if ((unsigned __int128)(v42 * (__int128)10) >> 64 != (10 * v42) >> 63) {
            goto LABEL_48;
          }
          uint64_t v42 = v55 + v54;
          if (__OFADD__(v55, v54)) {
            goto LABEL_48;
          }
          char v44 = 0;
          ++v53;
          if (!--v52) {
            goto LABEL_61;
          }
        }
      }
    }
    goto LABEL_60;
  }
  if (v37)
  {
    if (v37 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      if (v37 == 2)
      {
        char v44 = 0;
        uint64_t v42 = -(uint64_t)(BYTE1(result) - 48);
LABEL_61:
        uint64_t result = swift_bridgeObjectRelease();
        char v46 = v44 & 1;
        if (v44) {
          uint64_t v45 = 0;
        }
        else {
          uint64_t v45 = v42;
        }
        uint64_t v47 = v63;
        char v33 = v61;
        goto LABEL_65;
      }
      if ((BYTE2(result) - 48) <= 9u)
      {
        uint64_t v42 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
        uint64_t v56 = v37 - 3;
        if (!v56) {
          goto LABEL_60;
        }
        v57 = (unsigned __int8 *)v66 + 3;
        while (1)
        {
          unsigned int v58 = *v57 - 48;
          if (v58 > 9) {
            break;
          }
          uint64_t v59 = 10 * v42;
          if ((unsigned __int128)(v42 * (__int128)10) >> 64 != (10 * v42) >> 63) {
            break;
          }
          uint64_t v42 = v59 - v58;
          if (__OFSUB__(v59, v58)) {
            break;
          }
          char v44 = 0;
          ++v57;
          if (!--v56) {
            goto LABEL_61;
          }
        }
      }
    }
LABEL_48:
    uint64_t v42 = 0;
    char v44 = 1;
    goto LABEL_61;
  }
  __break(1u);
LABEL_76:
  __break(1u);
  return result;
}

Swift::String *MaterialXDataType.__allocating_init(xmlElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = specialized MaterialXDataType.__allocating_init(xmlElement:)(a1, a2);
  swift_unknownObjectRelease();
  return v2;
}

uint64_t collectGeomPropDefs(_:into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t result = (uint64_t)XMLNode.elements(forXPath:)(0x72706D6F65672F2ELL, 0xED0000666564706FLL, ObjectType, v7);
  if (v3) {
    return result;
  }
  uint64_t v9 = *(void *)(result + 16);
  uint64_t v52 = a3;
  if (!v9)
  {
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(ObjectType, v7);
    if (result)
    {
      uint64_t v35 = result;
      uint64_t v36 = *(void *)(result + 16);
      if (v36)
      {
        swift_bridgeObjectRetain();
        uint64_t v37 = (void *)MEMORY[0x263F8EE78];
        uint64_t v38 = 32;
        do
        {
          uint64_t v40 = *(void *)(v35 + v38);
          swift_getObjectType();
          uint64_t v41 = swift_conformsToProtocol2();
          if (v41) {
            uint64_t v42 = v40;
          }
          else {
            uint64_t v42 = 0;
          }
          if (v41) {
            uint64_t v43 = v41;
          }
          else {
            uint64_t v43 = 0;
          }
          if (v42)
          {
            swift_unknownObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
            }
            unint64_t v45 = v37[2];
            unint64_t v44 = v37[3];
            if (v45 >= v44 >> 1) {
              uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v45 + 1, 1, v37);
            }
            v37[2] = v45 + 1;
            uint64_t v39 = &v37[2 * v45];
            v39[4] = v42;
            v39[5] = v43;
          }
          v38 += 16;
          --v36;
        }
        while (v36);
        swift_bridgeObjectRelease();
        a3 = v52;
      }
      else
      {
        uint64_t v37 = (void *)MEMORY[0x263F8EE78];
      }
      swift_bridgeObjectRelease();
      uint64_t v46 = v37[2];
      if (v46)
      {
        swift_bridgeObjectRetain();
        uint64_t v47 = v37 + 5;
        do
        {
          uint64_t v48 = *v47;
          uint64_t v49 = swift_unknownObjectRetain();
          collectGeomPropDefs(_:into:)(v49, v48, a3);
          swift_unknownObjectRelease();
          v47 += 2;
          --v46;
        }
        while (v46);
        swift_bridgeObjectRelease();
      }
      return swift_bridgeObjectRelease();
    }
    return result;
  }
  uint64_t v50 = v7;
  uint64_t v51 = ObjectType;
  uint64_t v10 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  while (1)
  {
    uint64_t v11 = *v10;
    swift_unknownObjectRetain();
    uint64_t v12 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
    if (v13) {
      break;
    }
    swift_unknownObjectRelease();
LABEL_5:
    v10 += 2;
    if (!--v9)
    {
      swift_bridgeObjectRelease_n();
      uint64_t ObjectType = v51;
      uint64_t v7 = v50;
      goto LABEL_21;
    }
  }
  uint64_t v14 = v12;
  uint64_t v15 = v13;
  createGeomPropDef(for:)(v11, (uint64_t)v54);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v56 = *(void **)(a3 + 8);
  long long v17 = v56;
  *(void *)(a3 + 8) = 0x8000000000000000;
  uint64_t v53 = v14;
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
  uint64_t v20 = v17[2];
  BOOL v21 = (v18 & 1) == 0;
  uint64_t v22 = v20 + v21;
  if (!__OFADD__(v20, v21))
  {
    char v23 = v18;
    if (v17[3] < v22)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
      unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v15);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_48;
      }
      unint64_t v19 = v24;
      unsigned __int8 v26 = v56;
      if ((v23 & 1) == 0) {
        goto LABEL_16;
      }
LABEL_14:
      outlined assign with take of GeomPropDef((uint64_t)v54, v26[7] + (v19 << 6));
LABEL_18:
      a3 = v52;
      *(void *)(v52 + 8) = v26;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      unsigned __int8 v26 = v56;
      if (v18) {
        goto LABEL_14;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      unsigned __int8 v26 = v56;
      if (v23) {
        goto LABEL_14;
      }
    }
LABEL_16:
    v26[(v19 >> 6) + 8] |= 1 << v19;
    unsigned __int8 v27 = (uint64_t *)(v26[6] + 16 * v19);
    *unsigned __int8 v27 = v53;
    v27[1] = v15;
    uint64_t v28 = (_OWORD *)(v26[7] + (v19 << 6));
    long long v29 = v54[0];
    long long v30 = v54[1];
    long long v31 = v55[0];
    *(_OWORD *)((char *)v28 + 41) = *(_OWORD *)((char *)v55 + 9);
    v28[1] = v30;
    v28[2] = v31;
    *uint64_t v28 = v29;
    uint64_t v32 = v26[2];
    BOOL v33 = __OFADD__(v32, 1);
    uint64_t v34 = v32 + 1;
    if (v33) {
      goto LABEL_47;
    }
    v26[2] = v34;
    swift_bridgeObjectRetain();
    goto LABEL_18;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t collectNodeDefs(_:into:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t result = (uint64_t)XMLNode.elements(forXPath:)(0x656465646F6E2F2ELL, 0xE900000000000066, ObjectType, v7);
  if (v3) {
    return result;
  }
  uint64_t v9 = *(void *)(result + 16);
  uint64_t v56 = a3;
  if (!v9)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(ObjectType, v7);
    if (result)
    {
      uint64_t v39 = result;
      uint64_t v40 = *(void *)(result + 16);
      if (v40)
      {
        swift_bridgeObjectRetain();
        uint64_t v41 = (void *)MEMORY[0x263F8EE78];
        uint64_t v42 = 32;
        do
        {
          uint64_t v44 = *(void *)(v39 + v42);
          swift_getObjectType();
          uint64_t v45 = swift_conformsToProtocol2();
          if (v45) {
            uint64_t v46 = v44;
          }
          else {
            uint64_t v46 = 0;
          }
          if (v45) {
            uint64_t v47 = v45;
          }
          else {
            uint64_t v47 = 0;
          }
          if (v46)
          {
            swift_unknownObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41[2] + 1, 1, v41);
            }
            unint64_t v49 = v41[2];
            unint64_t v48 = v41[3];
            if (v49 >= v48 >> 1) {
              uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v48 > 1), v49 + 1, 1, v41);
            }
            v41[2] = v49 + 1;
            uint64_t v43 = &v41[2 * v49];
            v43[4] = v46;
            v43[5] = v47;
          }
          v42 += 16;
          --v40;
        }
        while (v40);
        swift_bridgeObjectRelease();
        a3 = v56;
      }
      else
      {
        uint64_t v41 = (void *)MEMORY[0x263F8EE78];
      }
      swift_bridgeObjectRelease();
      uint64_t v50 = v41[2];
      if (v50)
      {
        swift_bridgeObjectRetain();
        uint64_t v51 = v41 + 5;
        do
        {
          uint64_t v52 = *v51;
          uint64_t v53 = swift_unknownObjectRetain();
          collectNodeDefs(_:into:)(v53, v52, a3);
          swift_unknownObjectRelease();
          v51 += 2;
          --v50;
        }
        while (v50);
        swift_bridgeObjectRelease();
      }
      return swift_bridgeObjectRelease();
    }
    return result;
  }
  uint64_t v54 = v7;
  uint64_t v55 = ObjectType;
  uint64_t v10 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  while (1)
  {
    uint64_t v11 = *v10;
    uint64_t v12 = swift_unknownObjectRetain();
    createNodeDef(for:)(v12, v11, (uint64_t)v58);
    outlined init with take of NodeDef?((uint64_t)v58, (uint64_t)v59);
    if (getEnumTag for IOAttachment((uint64_t)v59) == 1) {
      goto LABEL_5;
    }
    long long v66 = v59[6];
    long long v67 = v59[7];
    long long v68 = v59[8];
    long long v62 = v59[2];
    long long v63 = v59[3];
    long long v64 = v59[4];
    long long v65 = v59[5];
    long long v60 = v59[0];
    long long v61 = v59[1];
    uint64_t v13 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
    if (v14) {
      break;
    }
    outlined release of NodeDef?(v58);
LABEL_5:
    swift_unknownObjectRelease();
LABEL_6:
    v10 += 2;
    if (!--v9)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v7 = v54;
      uint64_t ObjectType = v55;
      goto LABEL_23;
    }
  }
  uint64_t v15 = v13;
  uint64_t v16 = v14;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *a3;
  v57 = (void *)*a3;
  *a3 = 0x8000000000000000;
  uint64_t v69 = v15;
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
  uint64_t v21 = *(void *)(v18 + 16);
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (!__OFADD__(v21, v22))
  {
    char v24 = v19;
    if (*(void *)(v18 + 24) >= v23)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        unsigned __int8 v27 = v57;
        if ((v19 & 1) == 0) {
          goto LABEL_18;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        unsigned __int8 v27 = v57;
        if ((v24 & 1) == 0) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v69, v16);
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_49;
      }
      unint64_t v20 = v25;
      unsigned __int8 v27 = v57;
      if ((v24 & 1) == 0)
      {
LABEL_18:
        v27[(v20 >> 6) + 8] |= 1 << v20;
        uint64_t v28 = (void *)(v27[6] + 16 * v20);
        *uint64_t v28 = v69;
        v28[1] = v16;
        long long v29 = (_OWORD *)(v27[7] + 144 * v20);
        *long long v29 = v60;
        long long v30 = v61;
        long long v31 = v62;
        long long v32 = v64;
        v29[3] = v63;
        v29[4] = v32;
        v29[1] = v30;
        v29[2] = v31;
        long long v33 = v65;
        long long v34 = v66;
        long long v35 = v68;
        v29[7] = v67;
        v29[8] = v35;
        v29[5] = v33;
        v29[6] = v34;
        uint64_t v36 = v27[2];
        BOOL v37 = __OFADD__(v36, 1);
        uint64_t v38 = v36 + 1;
        if (v37) {
          goto LABEL_48;
        }
        v27[2] = v38;
        swift_bridgeObjectRetain();
        goto LABEL_20;
      }
    }
    outlined assign with take of NodeDef((uint64_t)&v60, v27[7] + 144 * v20);
LABEL_20:
    a3 = v56;
    *uint64_t v56 = v27;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *collectImplementations(_:into:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t result = XMLNode.elements(forXPath:)(0xD000000000000015, 0x800000025C422390, ObjectType, v7);
  if (!v3)
  {
    uint64_t v9 = result;
    uint64_t v10 = result[2];
    if (v10)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v10; ++i)
      {
        long long v15 = *(_OWORD *)&v9[2 * i + 4];
        swift_unknownObjectRetain();
        closure #1 in collectImplementations(_:into:)((uint64_t *)&v15, a3);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = XMLNode.elements(forXPath:)(0xD000000000000010, 0x800000025C4223B0, ObjectType, v7);
    uint64_t v13 = v12[2];
    if (v13)
    {
      swift_bridgeObjectRetain();
      for (uint64_t j = 0; j != v13; ++j)
      {
        long long v15 = *(_OWORD *)&v12[2 * j + 4];
        swift_unknownObjectRetain();
        closure #2 in collectImplementations(_:into:)((uint64_t *)&v15, a3);
        swift_unknownObjectRelease();
      }
      return (void *)swift_bridgeObjectRelease_n();
    }
    else
    {
      return (void *)swift_bridgeObjectRelease();
    }
  }
  return result;
}

void closure #3 in collectGeomPropDefs(_:into:)(uint64_t *a1, uint64_t a2)
{
  collectGeomPropDefs(_:into:)(*a1, a1[1], a2);
  if (v2) {
}
  }

uint64_t closure #1 in collectImplementations(_:into:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v81 = a2;
  uint64_t v77 = type metadata accessor for NodeDef.Implementation(0);
  uint64_t v5 = *(void *)(v77 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v77);
  uint64_t v78 = (uint64_t)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (_OWORD *)((char *)&v71 - v8);
  uint64_t v90 = type metadata accessor for CharacterSet();
  uint64_t v10 = *(void *)(v90 - 8);
  MEMORY[0x270FA5388](v90);
  uint64_t v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a1;
  uint64_t v79 = a1[1];
  uint64_t result = XMLNode.subscript.getter(0x66656465646F6ELL, 0xE700000000000000);
  uint64_t v80 = v15;
  if (!v15) {
    return result;
  }
  uint64_t v16 = result;
  uint64_t v73 = v5;
  uint64_t v17 = XMLNode.subscript.getter(0x746567726174, 0xE600000000000000);
  unint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t v76 = v16;
  if (!v18)
  {
LABEL_44:
    uint64_t v46 = v81;
    uint64_t v47 = *(void **)v81;
    uint64_t v48 = *(void *)(v81 + 8);
    uint64_t v49 = *(void *)(v81 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    createGraph(_:nodeDefStore:)((void *)v13, v79, v47, v48, v49, v88);
    uint64_t v50 = v80;
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v51 = *(_OWORD *)v89;
    v9[8] = v88[8];
    v9[9] = v51;
    *(_OWORD *)((char *)v9 + 153) = *(_OWORD *)&v89[9];
    long long v52 = v88[5];
    v9[4] = v88[4];
    v9[5] = v52;
    long long v53 = v88[7];
    v9[6] = v88[6];
    v9[7] = v53;
    long long v54 = v88[1];
    *uint64_t v9 = v88[0];
    v9[1] = v54;
    long long v55 = v88[3];
    v9[2] = v88[2];
    v9[3] = v55;
    type metadata accessor for NodeDef.Implementation.Kind(0);
    swift_storeEnumTagMultiPayload();
    outlined retain of Graph((uint64_t)v88);
    unint64_t v38 = specialized Set.init<A>(_:)(v19);
    swift_bridgeObjectRelease();
    *(void *)((char *)v9 + *(int *)(v77 + 20)) = v38;
    outlined init with copy of NodeDef.Implementation((uint64_t)v9, v78);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v86 = *(void *)(v46 + 16);
    uint64_t v57 = v86;
    *(void *)(v46 + 16) = 0x8000000000000000;
    uint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v76, v50);
    uint64_t v59 = *(void *)(v57 + 16);
    BOOL v60 = (v58 & 1) == 0;
    uint64_t v61 = v59 + v60;
    if (__OFADD__(v59, v60)) {
      goto LABEL_60;
    }
    char v62 = v58;
    if (*(void *)(v57 + 24) >= v61)
    {
      uint64_t v65 = v81;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v65 = v81;
        uint64_t v57 = v86;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v61, isUniquelyReferenced_nonNull_native);
      uint64_t v57 = v86;
      unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)(v76, v50);
      if ((v62 & 1) != (v64 & 1))
      {
LABEL_63:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      uint64_t v42 = v63;
      uint64_t v65 = v81;
    }
    *(void *)(v65 + 16) = v57;
    uint64_t v66 = v65;
    swift_bridgeObjectRelease();
    long long v67 = *(void **)(v66 + 16);
    if ((v62 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      specialized thunk for @callee_guaranteed () -> (@owned [NodeDef.Implementation])(&v86);
      specialized _NativeDictionary._insert(at:key:value:)(v42, v76, v50, v86, v67);
    }
    swift_bridgeObjectRetain();
    uint64_t v13 = v67[7];
    swift_bridgeObjectRelease();
    unint64_t v38 = *(void *)(v13 + 8 * v42);
    char v68 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v13 + 8 * v42) = v38;
    if ((v68 & 1) == 0) {
      goto LABEL_61;
    }
    goto LABEL_55;
  }
  unint64_t v86 = v17;
  uint64_t v87 = v18;
  uint64_t v84 = 44;
  unint64_t v85 = 0xE100000000000000;
  unint64_t v83 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v20 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  int64_t v21 = *(void *)(v20 + 16);
  uint64_t v82 = v13;
  uint64_t v75 = v2;
  uint64_t v74 = v9;
  if (v21)
  {
    uint64_t v84 = v19;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    BOOL v22 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v72 = v20;
    uint64_t v23 = (uint64_t *)(v20 + 40);
    do
    {
      uint64_t v24 = *v23;
      unint64_t v86 = *(v23 - 1);
      uint64_t v87 = v24;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      uint64_t v25 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v27 = v26;
      (*v22)(v12, v90);
      swift_bridgeObjectRelease();
      uint64_t v28 = v84;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1);
        uint64_t v28 = v84;
      }
      unint64_t v30 = *(void *)(v28 + 16);
      unint64_t v29 = *(void *)(v28 + 24);
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        uint64_t v28 = v84;
      }
      v23 += 2;
      *(void *)(v28 + 16) = v30 + 1;
      unint64_t v31 = v28 + 16 * v30;
      *(void *)(v31 + 32) = v25;
      *(void *)(v31 + 40) = v27;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    uint64_t v3 = v75;
    uint64_t v9 = v74;
    uint64_t v13 = v82;
    unint64_t v19 = MEMORY[0x263F8EE78];
    unint64_t v32 = *(void *)(v28 + 16);
    if (v32) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
  swift_bridgeObjectRelease();
  uint64_t v28 = MEMORY[0x263F8EE78];
  unint64_t v32 = *(void *)(MEMORY[0x263F8EE78] + 16);
  if (!v32)
  {
LABEL_43:
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
LABEL_11:
  unint64_t v86 = v19;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v33 = 0;
  uint64_t v72 = v28;
  uint64_t v90 = v28 + 32;
  unint64_t v83 = v32;
  while (1)
  {
    uint64_t v34 = v90 + 16 * v33;
    uint64_t v9 = *(_OWORD **)v34;
    uint64_t v35 = *(void *)(v34 + 8);
    uint64_t v36 = one-time initialization token for allTargets;
    swift_bridgeObjectRetain();
    if (v36 != -1) {
      swift_once();
    }
    uint64_t v37 = static MaterialXTarget.allTargets;
    if ((unint64_t)static MaterialXTarget.allTargets >> 62)
    {
      swift_bridgeObjectRetain_n();
      unint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v38) {
        goto LABEL_62;
      }
    }
    else
    {
      unint64_t v38 = *(void *)((static MaterialXTarget.allTargets & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (!v38) {
        goto LABEL_62;
      }
    }
    if ((v37 & 0xC000000000000001) != 0)
    {
      uint64_t v39 = MEMORY[0x2611848A0](0, v37);
    }
    else
    {
      uint64_t v39 = *(void *)(v37 + 32);
      swift_retain();
    }
    BOOL v40 = *(_OWORD **)(v39 + 16) == v9 && *(void *)(v39 + 24) == v35;
    if (!v40 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      break;
    }
LABEL_12:
    ++v33;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    uint64_t v13 = v82;
    if (v33 == v83)
    {
      unint64_t v19 = v86;
      swift_bridgeObjectRelease();
      uint64_t v3 = v75;
      uint64_t v9 = v74;
      goto LABEL_44;
    }
  }
  swift_release();
  if (v38 == 1)
  {
LABEL_62:
    swift_bridgeObjectRelease_n();
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v13 = 5;
  while (1)
  {
    uint64_t v41 = v13 - 4;
    if ((v37 & 0xC000000000000001) == 0) {
      break;
    }
    uint64_t v42 = MEMORY[0x2611848A0](v13 - 4, v37);
    BOOL v43 = __OFADD__(v41, 1);
    uint64_t v44 = v13 - 3;
    if (v43) {
      goto LABEL_59;
    }
LABEL_31:
    BOOL v45 = *(_OWORD **)(v42 + 16) == v9 && *(void *)(v42 + 24) == v35;
    if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_12;
    }
    swift_release();
    ++v13;
    if (v44 == v38) {
      goto LABEL_62;
    }
  }
  uint64_t v42 = *(void *)(v37 + 8 * v13);
  swift_retain();
  BOOL v43 = __OFADD__(v41, 1);
  uint64_t v44 = v13 - 3;
  if (!v43) {
    goto LABEL_31;
  }
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  unint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v38 + 16) + 1, 1, v38);
  *(void *)(v13 + 8 * v42) = v38;
LABEL_55:
  unint64_t v70 = *(void *)(v38 + 16);
  unint64_t v69 = *(void *)(v38 + 24);
  if (v70 >= v69 >> 1)
  {
    unint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1, v38);
    *(void *)(v13 + 8 * v42) = v38;
  }
  *(void *)(v38 + 16) = v70 + 1;
  outlined init with take of NodeDef.Implementation(v78, v38+ ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80))+ *(void *)(v73 + 72) * v70);
  outlined release of Graph((uint64_t)v88);
  swift_bridgeObjectRelease();
  return outlined destroy of NodeDef.Implementation((uint64_t)v9);
}

uint64_t createGraph(_:nodeDefStore:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t countAndFlagsBits = v6;
  uint64_t v222 = a4;
  uint64_t v223 = a5;
  uint64_t ObjectType = swift_getObjectType();
  v227 = *(void **)(a2 + 8);
  uint64_t v13 = XMLNode.subscript.getter(0x6C6562616C6975, 0xE700000000000000);
  if (!v14)
  {
    uint64_t v13 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
    if (!v14)
    {
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi36_((uint64_t)&v235);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v235, (uint64_t)&v245);
      *(void *)&long long v256 = 0xD00000000000001BLL;
      *((void *)&v256 + 1) = 0x800000025C4243A0;
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      swift_allocError();
      *unint64_t v86 = v245;
      long long v87 = v249;
      long long v89 = v246;
      long long v88 = v247;
      v86[3] = v248;
      v86[4] = v87;
      v86[1] = v89;
      v86[2] = v88;
      long long v90 = v253;
      long long v92 = v250;
      long long v91 = v251;
      v86[7] = v252;
      v86[8] = v90;
      v86[5] = v92;
      v86[6] = v91;
      long long v93 = v256;
      long long v95 = *(_OWORD *)v254;
      long long v94 = *(_OWORD *)&v254[16];
      v86[11] = v255;
      v86[12] = v93;
      v86[9] = v95;
      v86[10] = v94;
      return swift_willThrow();
    }
  }
  v220 = a6;
  uint64_t v221 = v13;
  v224 = v14;
  unint64_t v260 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a2 + 16))(0x66656465646F6ELL, 0xE700000000000000, ObjectType, a2);
  v225 = a3;
  v226 = a1;
  uint64_t v228 = ObjectType;
  if (v15)
  {
    uint64_t v17 = v16;
    uint64_t v18 = swift_getObjectType();
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(v18, v17);
    int64_t v21 = v20;
    swift_unknownObjectRelease();
    if (v21)
    {
      if (a3[2])
      {
        swift_bridgeObjectRetain();
        unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v19, (uint64_t)v21);
        if (v23)
        {
          uint64_t v24 = (long long *)(a3[7] + 144 * v22);
          long long v245 = *v24;
          long long v25 = v24[4];
          long long v27 = v24[1];
          long long v26 = v24[2];
          long long v248 = v24[3];
          long long v249 = v25;
          long long v246 = v27;
          long long v247 = v26;
          long long v28 = v24[8];
          long long v30 = v24[5];
          long long v29 = v24[6];
          long long v252 = v24[7];
          long long v253 = v28;
          long long v250 = v30;
          long long v251 = v29;
          outlined retain of NodeDef((uint64_t)&v245);
          swift_bridgeObjectRelease_n();
          uint64_t v31 = v253;
          uint64_t v32 = *(void *)(v253 + 16);
          if (v32)
          {
            uint64_t v231 = v6;
            swift_bridgeObjectRetain_n();
            uint64_t v219 = v31;
            uint64_t v33 = (uint64_t *)(v31 + 40);
            while (1)
            {
              v230 = (void *)v32;
              uint64_t v35 = *(v33 - 1);
              uint64_t countAndFlagsBits = *v33;
              uint64_t v36 = v33[1];
              uint64_t v37 = v33[3];
              a3 = (void *)v33[5];
              swift_bridgeObjectRetain();
              swift_retain_n();
              swift_bridgeObjectRetain_n();
              uint64_t v229 = v37;
              swift_bridgeObjectRetain();
              unint64_t v38 = v260;
              uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(void *)&long long v235 = v38;
              unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v35, countAndFlagsBits);
              uint64_t v42 = *(void *)(v38 + 16);
              BOOL v43 = (v40 & 1) == 0;
              uint64_t v44 = v42 + v43;
              if (__OFADD__(v42, v43)) {
                break;
              }
              char v45 = v40;
              if (*(void *)(v38 + 24) >= v44)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                  specialized _NativeDictionary.copy()();
                }
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, isUniquelyReferenced_nonNull_native);
                unint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v35, countAndFlagsBits);
                if ((v45 & 1) != (v47 & 1)) {
                  goto LABEL_160;
                }
                unint64_t v41 = v46;
              }
              uint64_t v48 = (void *)v235;
              unint64_t v260 = v235;
              if (v45)
              {
                uint64_t v34 = (uint64_t *)(*(void *)(v235 + 56) + 24 * v41);
                swift_release();
                swift_bridgeObjectRelease();
                *uint64_t v34 = v35;
                v34[1] = countAndFlagsBits;
                v34[2] = v36;
              }
              else
              {
                *(void *)(v235 + 8 * (v41 >> 6) + 64) |= 1 << v41;
                uint64_t v49 = (uint64_t *)(v48[6] + 16 * v41);
                *uint64_t v49 = v35;
                v49[1] = countAndFlagsBits;
                uint64_t v50 = (uint64_t *)(v48[7] + 24 * v41);
                *uint64_t v50 = v35;
                v50[1] = countAndFlagsBits;
                v50[2] = v36;
                uint64_t v51 = v48[2];
                BOOL v52 = __OFADD__(v51, 1);
                uint64_t v53 = v51 + 1;
                if (v52) {
                  goto LABEL_155;
                }
                v48[2] = v53;
                swift_bridgeObjectRetain();
              }
              v33 += 8;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              uint64_t v32 = (uint64_t)v230 - 1;
              if (v230 == (void *)1)
              {
                swift_bridgeObjectRelease();
                uint64_t countAndFlagsBits = v231;
                a3 = v225;
                uint64_t ObjectType = v228;
                goto LABEL_86;
              }
            }
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
            goto LABEL_159;
          }
          swift_bridgeObjectRetain();
LABEL_86:
          outlined release of NodeDef((uint64_t)&v245);
LABEL_87:
          swift_bridgeObjectRelease();
          goto LABEL_88;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi40_((uint64_t)&v235);
      *(void *)&long long v245 = 0x20676E697373694DLL;
      *((void *)&v245 + 1) = 0xE800000000000000;
      v97._uint64_t countAndFlagsBits = v19;
      v97._object = v21;
      String.append(_:)(v97);
      swift_bridgeObjectRelease();
      long long v98 = v245;
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v235, (uint64_t)&v245);
      long long v256 = v98;
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      swift_allocError();
      *uint64_t v99 = v245;
      long long v100 = v249;
      long long v102 = v246;
      long long v101 = v247;
      v99[3] = v248;
      v99[4] = v100;
      v99[1] = v102;
      v99[2] = v101;
      long long v103 = v253;
      long long v105 = v250;
      long long v104 = v251;
      v99[7] = v252;
      v99[8] = v103;
      v99[5] = v105;
      v99[6] = v104;
      long long v106 = v256;
      long long v108 = *(_OWORD *)v254;
      long long v107 = *(_OWORD *)&v254[16];
      v99[11] = v255;
      v99[12] = v106;
      v99[9] = v108;
      v99[10] = v107;
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
  }
  long long v54 = XMLNode.elements(forXPath:)(0x7475706E692F2ELL, 0xE700000000000000, ObjectType, (uint64_t)v227);
  if (v6) {
    goto LABEL_89;
  }
  uint64_t v55 = v54[2];
  if (v55)
  {
    uint64_t v219 = swift_bridgeObjectRetain();
    a3 = (void *)(v219 + 40);
    do
    {
      uint64_t v56 = *a3;
      uint64_t v57 = swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v58 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
      if (v59)
      {
        uint64_t v60 = v58;
        uint64_t v61 = v59;
        uint64_t v229 = v55;
        swift_unknownObjectRetain();
        v62._uint64_t countAndFlagsBits = 1701869940;
        v62._object = (void *)0xE400000000000000;
        Swift::String v63 = XMLElement.getRequiredAttribute(_:)(v62);
        uint64_t v231 = v64;
        if (v64)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return swift_unknownObjectRelease_n();
        }
        uint64_t countAndFlagsBits = v63._countAndFlagsBits;
        v230 = (void *)v60;
        if ((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v56 + 16))(1836412517, 0xE400000000000000, v57, v56)&& (v66 = v65, v67 = swift_getObjectType(), uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 32))(v67, v66), v70 = v69, swift_unknownObjectRelease(), v70))
        {
          *(void *)&long long v245 = v68;
          *((void *)&v245 + 1) = v70;
          *(void *)&long long v235 = 44;
          *((void *)&v235 + 1) = 0xE100000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v71 = StringProtocol.components<A>(separatedBy:)();
          swift_bridgeObjectRelease();
          type metadata accessor for MaterialXDataType();
          uint64_t v72 = (Swift::String *)swift_allocObject();
        }
        else
        {
          type metadata accessor for MaterialXDataType();
          uint64_t v72 = (Swift::String *)swift_allocObject();
          uint64_t v71 = 0;
        }
        v72[2] = v63;
        v72[1]._object = (void *)v71;
        v72[1]._uint64_t countAndFlagsBits = MEMORY[0x263F8EE78];
        swift_unknownObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v245 = v260;
        unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v230, v61);
        uint64_t v75 = *(void *)(v260 + 16);
        BOOL v76 = (v73 & 1) == 0;
        uint64_t v77 = v75 + v76;
        if (__OFADD__(v75, v76)) {
          goto LABEL_154;
        }
        uint64_t countAndFlagsBits = v73;
        if (*(void *)(v260 + 24) >= v77)
        {
          uint64_t v55 = v229;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v230;
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v77, isUniquelyReferenced_nonNull_native);
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v230;
          unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v230, v61);
          uint64_t v55 = v229;
          if ((countAndFlagsBits & 1) != (v79 & 1))
          {
LABEL_160:
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v74 = v78;
        }
        uint64_t v80 = (void *)v245;
        unint64_t v260 = v245;
        if (countAndFlagsBits)
        {
          uint64_t v81 = (uint64_t *)(*(void *)(v245 + 56) + 24 * v74);
          swift_release();
          swift_bridgeObjectRelease();
          *uint64_t v81 = isUniquelyReferenced_nonNull_native;
          v81[1] = v61;
          v81[2] = (uint64_t)v72;
        }
        else
        {
          *(void *)(v245 + 8 * (v74 >> 6) + 64) |= 1 << v74;
          uint64_t v82 = (uint64_t *)(v80[6] + 16 * v74);
          *uint64_t v82 = isUniquelyReferenced_nonNull_native;
          v82[1] = v61;
          unint64_t v83 = (uint64_t *)(v80[7] + 24 * v74);
          uint64_t *v83 = isUniquelyReferenced_nonNull_native;
          v83[1] = v61;
          v83[2] = (uint64_t)v72;
          uint64_t v84 = v80[2];
          BOOL v52 = __OFADD__(v84, 1);
          uint64_t v85 = v84 + 1;
          if (v52) {
            goto LABEL_157;
          }
          v80[2] = v85;
          swift_bridgeObjectRetain();
        }
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v231;
      }
      else
      {
        swift_unknownObjectRelease();
      }
      a3 += 2;
      --v55;
    }
    while (v55);
    swift_bridgeObjectRelease_n();
    a3 = v225;
    uint64_t ObjectType = v228;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v109 = ((uint64_t (*)(uint64_t))v227[3])(ObjectType);
  if (!v109) {
    goto LABEL_88;
  }
  uint64_t v110 = *(void *)(v109 + 16);
  if (!v110) {
    goto LABEL_87;
  }
  uint64_t v217 = v109 + 32;
  uint64_t v214 = v109;
  swift_bridgeObjectRetain();
  uint64_t v111 = 0;
  uint64_t v215 = v110;
  do
  {
    uint64_t v218 = v111;
    uint64_t v112 = (uint64_t *)(v217 + 16 * v111);
    uint64_t v114 = *v112;
    uint64_t v113 = v112[1];
    uint64_t v115 = swift_getObjectType();
    swift_unknownObjectRetain();
    uint64_t v219 = v114;
    uint64_t v116 = XMLNode.elements(forXPath:)(0x7475706E692F2ELL, 0xE700000000000000, v115, v113);
    if (countAndFlagsBits)
    {
      uint64_t v231 = countAndFlagsBits;
      swift_bridgeObjectRelease();
LABEL_84:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v117 = v116[2];
    if (v117)
    {
      uint64_t v231 = 0;
      uint64_t v216 = swift_bridgeObjectRetain();
      a3 = (void *)(v216 + 40);
      while (1)
      {
        uint64_t countAndFlagsBits = *(a3 - 1);
        uint64_t v118 = *a3;
        uint64_t v119 = swift_getObjectType();
        swift_unknownObjectRetain();
        v230 = (void *)XMLNode.subscript.getter(0x6361667265746E69, 0xED0000656D616E65);
        if (v120)
        {
          uint64_t v121 = v120;
          uint64_t v229 = v117;
          swift_unknownObjectRetain();
          v122._uint64_t countAndFlagsBits = 1701869940;
          v122._object = (void *)0xE400000000000000;
          Swift::String v123 = XMLElement.getRequiredAttribute(_:)(v122);
          uint64_t v231 = v124;
          if (v124)
          {
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            goto LABEL_84;
          }
          if ((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v118 + 16))(1836412517, 0xE400000000000000, v119, v118)&& (uint64_t v126 = v125, v127 = swift_getObjectType(), v128 = (*(uint64_t (**)(uint64_t, uint64_t))(v126 + 32))(v127, v126), v130 = v129, swift_unknownObjectRelease(), v130))
          {
            *(void *)&long long v245 = v128;
            *((void *)&v245 + 1) = v130;
            *(void *)&long long v235 = 44;
            *((void *)&v235 + 1) = 0xE100000000000000;
            lazy protocol witness table accessor for type String and conformance String();
            uint64_t v131 = StringProtocol.components<A>(separatedBy:)();
            swift_bridgeObjectRelease();
            type metadata accessor for MaterialXDataType();
            v132 = (Swift::String *)swift_allocObject();
          }
          else
          {
            type metadata accessor for MaterialXDataType();
            v132 = (Swift::String *)swift_allocObject();
            uint64_t v131 = 0;
          }
          v132[2] = v123;
          v132[1]._object = (void *)v131;
          v132[1]._uint64_t countAndFlagsBits = MEMORY[0x263F8EE78];
          swift_unknownObjectRelease();
          uint64_t v117 = v229;
          if (!*(void *)(v260 + 16)) {
            goto LABEL_69;
          }
          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v230, v121);
          if ((v133 & 1) == 0)
          {
            swift_bridgeObjectRelease();
LABEL_69:
            swift_bridgeObjectRetain();
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v245 = v260;
            unint64_t v135 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v230, v121);
            uint64_t v136 = *(void *)(v260 + 16);
            BOOL v137 = (v134 & 1) == 0;
            uint64_t v138 = v136 + v137;
            if (__OFADD__(v136, v137)) {
              goto LABEL_156;
            }
            char v139 = v134;
            if (*(void *)(v260 + 24) >= v138)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                specialized _NativeDictionary.copy()();
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v138, isUniquelyReferenced_nonNull_native);
              unint64_t v140 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v230, v121);
              if ((v139 & 1) != (v141 & 1)) {
                goto LABEL_160;
              }
              unint64_t v135 = v140;
            }
            v142 = (void *)v245;
            unint64_t v260 = v245;
            if (v139)
            {
              v143 = (void *)(*(void *)(v245 + 56) + 24 * v135);
              swift_release();
              swift_bridgeObjectRelease();
              void *v143 = v230;
              v143[1] = v121;
              v143[2] = v132;
            }
            else
            {
              *(void *)(v245 + 8 * (v135 >> 6) + 64) |= 1 << v135;
              v144 = (void *)(v142[6] + 16 * v135);
              uint64_t v145 = (uint64_t)v230;
              void *v144 = v230;
              v144[1] = v121;
              v146 = (uint64_t *)(v142[7] + 24 * v135);
              uint64_t *v146 = v145;
              v146[1] = v121;
              v146[2] = (uint64_t)v132;
              uint64_t v147 = v142[2];
              BOOL v52 = __OFADD__(v147, 1);
              uint64_t v148 = v147 + 1;
              if (v52) {
                goto LABEL_158;
              }
              v142[2] = v148;
              swift_bridgeObjectRetain();
            }
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_58;
          }
          swift_bridgeObjectRetain();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease_n();
        }
        else
        {
          swift_unknownObjectRelease();
        }
LABEL_58:
        uint64_t ObjectType = v228;
        a3 += 2;
        if (!--v117)
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v231;
          a3 = v225;
          uint64_t v110 = v215;
          goto LABEL_53;
        }
      }
    }
    swift_unknownObjectRelease();
LABEL_53:
    swift_bridgeObjectRelease();
    uint64_t v111 = v218 + 1;
  }
  while (v218 + 1 != v110);
  swift_bridgeObjectRelease_n();
LABEL_88:
  uint64_t v149 = ObjectType;
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v227;
  v150 = XMLNode.elements(forXPath:)(0x74757074756F2F2ELL, 0xE800000000000000, v149, (uint64_t)v227);
  if (countAndFlagsBits)
  {
LABEL_89:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v151 = v150[2];
  v230 = v150;
  uint64_t v231 = 0;
  uint64_t v219 = v151;
  if (!v151)
  {
    if (one-time initialization token for logger == -1)
    {
LABEL_105:
      uint64_t v169 = type metadata accessor for Logger();
      __swift_project_value_buffer(v169, (uint64_t)logger);
      unint64_t v168 = (unint64_t)v224;
      swift_bridgeObjectRetain_n();
      v170 = Logger.logObject.getter();
      os_log_type_t v171 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v170, v171))
      {
        v172 = (uint8_t *)swift_slowAlloc();
        uint64_t v173 = swift_slowAlloc();
        *(void *)&long long v245 = v173;
        *(_DWORD *)v172 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)&long long v235 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v221, v168, (uint64_t *)&v245);
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v227;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25C27E000, v170, v171, "Graph implementation for %s has no outputs!", v172, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x261185880](v173, -1, -1);
        MEMORY[0x261185880](v172, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v154 = (void *)MEMORY[0x263F8EE78];
      uint64_t v155 = (uint64_t)v230;
      goto LABEL_109;
    }
LABEL_159:
    swift_once();
    goto LABEL_105;
  }
  swift_bridgeObjectRetain();
  uint64_t v152 = 32;
  uint64_t v153 = v151;
  v154 = (void *)MEMORY[0x263F8EE78];
  do
  {
    swift_unknownObjectRetain();
    uint64_t v156 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
    if (v157)
    {
      uint64_t v158 = v156;
      uint64_t v159 = v157;
      uint64_t v160 = XMLNode.subscript.getter(1701869940, 0xE400000000000000);
      if (v161)
      {
        uint64_t v162 = v160;
        uint64_t v163 = v161;
        type metadata accessor for MaterialXDataType();
        v164 = (void *)swift_allocObject();
        v164[4] = v162;
        v164[5] = v163;
        v164[3] = 0;
        v164[2] = MEMORY[0x263F8EE78];
        swift_unknownObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v154 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v154[2] + 1, 1, v154);
        }
        a3 = v225;
        unint64_t v166 = v154[2];
        unint64_t v165 = v154[3];
        if (v166 >= v165 >> 1) {
          v154 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v165 > 1), v166 + 1, 1, v154);
        }
        v154[2] = v166 + 1;
        v167 = &v154[3 * v166];
        v167[4] = v158;
        v167[5] = v159;
        v167[6] = v164;
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v227;
      }
      else
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        a3 = v225;
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v227;
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
    v152 += 16;
    --v153;
    uint64_t v155 = (uint64_t)v230;
  }
  while (v153);
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v231;
  unint64_t v168 = (unint64_t)v224;
LABEL_109:
  uint64_t v174 = swift_bridgeObjectRetain();
  v175 = specialized _copyCollectionToContiguousArray<A>(_:)(v174);
  swift_bridgeObjectRelease();
  specialized Graph.init(id:label:inputs:outputs:)(0, v221, v168, (unint64_t)v175, (unint64_t)v154, (uint64_t)&v245);
  v234 = (void *)MEMORY[0x263F8EE78];
  unint64_t v233 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v176 = (*(uint64_t (**)(uint64_t, uint64_t))(isUniquelyReferenced_nonNull_native + 24))(v228, isUniquelyReferenced_nonNull_native);
  if (!v176)
  {
LABEL_133:
    uint64_t v190 = v219;
    v191 = v234;
    uint64_t v228 = v234[2];
    if (v228)
    {
      v224 = &v214;
      v192 = v234 + 4;
      v226 = v234;
      swift_bridgeObjectRetain_n();
      uint64_t v193 = 0;
      v227 = v191 + 4;
      while (1)
      {
        v194 = &v192[8 * v193];
        uint64_t v195 = v194[1];
        uint64_t v196 = v194[3];
        uint64_t v198 = v194[4];
        char v199 = *((unsigned char *)v194 + 56);
        v257[0] = v194[2];
        unint64_t v197 = v257[0];
        v257[1] = v196;
        v257[2] = v198;
        long long v258 = *(_OWORD *)(v194 + 5);
        char v259 = v199;
        uint64_t v200 = swift_getObjectType();
        swift_unknownObjectRetain();
        outlined copy of NodePersonality(v197);
        uint64_t v201 = *(void *)(v195 + 8);
        uint64_t v231 = v196;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v202 = XMLNode.elements(forXPath:)(0x7475706E692F2ELL, 0xE700000000000000, v200, v201);
        if (countAndFlagsBits) {
          break;
        }
        v203 = v202;
        uint64_t v229 = v198;
        uint64_t v204 = v202[2];
        if (v204)
        {
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v204; ++i)
          {
            long long v235 = *(_OWORD *)&v203[2 * i + 4];
            swift_unknownObjectRetain();
            closure #1 in closure #7 in createGraph(_:nodeDefStore:)((uint64_t)&v235, (uint64_t)v257, (uint64_t)&v245, (uint64_t *)&v233);
            swift_unknownObjectRelease();
          }
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v155 = (uint64_t)v230;
        }
        else
        {
          swift_unknownObjectRelease();
        }
        ++v193;
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v197);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v192 = v227;
        if (v193 == v228)
        {
          swift_bridgeObjectRelease_n();
          a3 = v225;
          uint64_t v190 = v219;
          goto LABEL_143;
        }
      }
      swift_unknownObjectRelease();
      outlined consume of NodePersonality(v197);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v243 = v253;
      v244[0] = *(_OWORD *)v254;
      *(_OWORD *)((char *)v244 + 9) = *(_OWORD *)&v254[9];
      long long v239 = v249;
      long long v240 = v250;
      long long v241 = v251;
      long long v242 = v252;
      long long v235 = v245;
      long long v236 = v246;
      long long v237 = v247;
      long long v238 = v248;
      outlined release of Graph((uint64_t)&v235);
      return swift_bridgeObjectRelease();
    }
    else
    {
LABEL_143:
      if (v190)
      {
        swift_bridgeObjectRetain();
        uint64_t v206 = 0;
        do
        {
          uint64_t v207 = v155 + 16 * v206++;
          long long v235 = *(_OWORD *)(v207 + 32);
          swift_unknownObjectRetain();
          specialized closure #8 in createGraph(_:nodeDefStore:)((void **)&v235, (uint64_t *)&v233, (uint64_t)&v245, (uint64_t)a3);
          swift_unknownObjectRelease();
        }
        while (v190 != v206);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      long long v243 = v253;
      v244[0] = *(_OWORD *)v254;
      *(_OWORD *)((char *)v244 + 9) = *(_OWORD *)&v254[9];
      long long v239 = v249;
      long long v240 = v250;
      long long v241 = v251;
      long long v242 = v252;
      long long v235 = v245;
      long long v236 = v246;
      long long v237 = v247;
      long long v238 = v248;
      outlined retain of Graph((uint64_t)&v235);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of Graph((uint64_t)&v235);
      uint64_t result = swift_bridgeObjectRelease();
      long long v208 = v244[0];
      v209 = v220;
      v220[8] = v243;
      v209[9] = v208;
      *(_OWORD *)((char *)v209 + 153) = *(_OWORD *)((char *)v244 + 9);
      long long v210 = v240;
      v209[4] = v239;
      v209[5] = v210;
      long long v211 = v242;
      v209[6] = v241;
      v209[7] = v211;
      long long v212 = v236;
      _OWORD *v209 = v235;
      v209[1] = v212;
      long long v213 = v238;
      v209[2] = v237;
      v209[3] = v213;
    }
    return result;
  }
  uint64_t v177 = v176;
  uint64_t v178 = *(void *)(v176 + 16);
  if (v178)
  {
    swift_bridgeObjectRetain();
    v179 = (void *)MEMORY[0x263F8EE78];
    uint64_t v180 = 32;
    do
    {
      uint64_t v182 = *(void *)(v177 + v180);
      swift_getObjectType();
      uint64_t v183 = swift_conformsToProtocol2();
      if (v183) {
        uint64_t v184 = v182;
      }
      else {
        uint64_t v184 = 0;
      }
      if (v183) {
        uint64_t v185 = v183;
      }
      else {
        uint64_t v185 = 0;
      }
      if (v184)
      {
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v179 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v179[2] + 1, 1, v179);
        }
        unint64_t v187 = v179[2];
        unint64_t v186 = v179[3];
        if (v187 >= v186 >> 1) {
          v179 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v186 > 1), v187 + 1, 1, v179);
        }
        v179[2] = v187 + 1;
        v181 = &v179[2 * v187];
        v181[4] = v184;
        v181[5] = v185;
      }
      v180 += 16;
      --v178;
    }
    while (v178);
    swift_bridgeObjectRelease();
    uint64_t v155 = (uint64_t)v230;
    uint64_t countAndFlagsBits = v231;
    a3 = v225;
  }
  else
  {
    v179 = (void *)MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  uint64_t v188 = v179[2];
  if (!v188)
  {
LABEL_132:
    swift_bridgeObjectRelease();
    goto LABEL_133;
  }
  swift_bridgeObjectRetain();
  uint64_t v189 = 0;
  while (1)
  {
    long long v232 = *(_OWORD *)&v179[2 * v189 + 4];
    swift_unknownObjectRetain();
    closure #6 in createGraph(_:nodeDefStore:)((uint64_t *)&v232, (unint64_t)a3, v222, v223, (uint64_t)&v245, &v233, &v234);
    if (countAndFlagsBits) {
      break;
    }
    ++v189;
    swift_unknownObjectRelease();
    if (v188 == v189)
    {
      swift_bridgeObjectRelease();
      goto LABEL_132;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v243 = v253;
  v244[0] = *(_OWORD *)v254;
  *(_OWORD *)((char *)v244 + 9) = *(_OWORD *)&v254[9];
  long long v239 = v249;
  long long v240 = v250;
  long long v241 = v251;
  long long v242 = v252;
  long long v235 = v245;
  long long v236 = v246;
  long long v237 = v247;
  long long v238 = v248;
  outlined release of Graph((uint64_t)&v235);
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in collectImplementations(_:into:)(uint64_t *a1, unint64_t a2)
{
  unint64_t v123 = a2;
  uint64_t v118 = type metadata accessor for NodeDef.Implementation(0);
  uint64_t v4 = *(void *)(v118 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v118);
  uint64_t v110 = (uint64_t)v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v111 = (void *)((char *)v105 - v8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v115 = (uint64_t)v105 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v116 = (void *)((char *)v105 - v12);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v120 = (uint64_t)v105 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v121 = (void *)((char *)v105 - v15);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  Swift::String v122 = (char *)v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *a1;
  uint64_t result = XMLNode.subscript.getter(0x66656465646F6ELL, 0xE700000000000000);
  uint64_t v124 = v21;
  if (!v21) {
    return result;
  }
  uint64_t v113 = v17;
  uint64_t v114 = v16;
  uint64_t v117 = result;
  uint64_t v109 = v4;
  uint64_t v112 = v2;
  uint64_t v108 = XMLNode.subscript.getter(1701603686, 0xE400000000000000);
  uint64_t v119 = v22;
  uint64_t v107 = XMLNode.subscript.getter(0x6F63656372756F73, 0xEA00000000006564);
  uint64_t v24 = v23;
  uint64_t v25 = XMLNode.subscript.getter(0x746567726174, 0xE600000000000000);
  unint64_t v27 = MEMORY[0x263F8EE78];
  if (!v26) {
    goto LABEL_38;
  }
  unint64_t v129 = v25;
  uint64_t v130 = v26;
  uint64_t v127 = 44;
  unint64_t v128 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v28 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  unint64_t v29 = *(void *)(v28 + 16);
  if (!v29)
  {
    swift_bridgeObjectRelease();
LABEL_37:
    swift_bridgeObjectRetain();
LABEL_38:
    uint64_t v45 = v119;
    uint64_t v46 = specialized Set.init<A>(_:)(v27);
    swift_bridgeObjectRelease();
    if (v45)
    {
      char v47 = v122;
      URL.init(fileURLWithPath:)();
      uint64_t v48 = XMLNode.subscript.getter(0x6E6F6974636E7566, 0xE800000000000000);
      if (!v49)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(char *, uint64_t))(v113 + 8))(v47, v114);
      }
      uint64_t v50 = v48;
      uint64_t v51 = v49;
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL));
      uint64_t v53 = v121;
      long long v54 = (char *)v121 + *(int *)(v52 + 48);
      *uint64_t v121 = v50;
      v53[1] = v51;
      (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v54, v47, v114);
      type metadata accessor for NodeDef.Implementation.Kind(0);
      swift_storeEnumTagMultiPayload();
      *(uint64_t *)((char *)v53 + *(int *)(v118 + 20)) = v46;
      outlined init with copy of NodeDef.Implementation((uint64_t)v53, v120);
      unint64_t v30 = v123;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v129 = *(void *)(v30 + 16);
      unint64_t v32 = v129;
      *(void *)(v30 + 16) = 0x8000000000000000;
      unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v117, v124);
      uint64_t v57 = *(void *)(v32 + 16);
      BOOL v58 = (v56 & 1) == 0;
      uint64_t v59 = v57 + v58;
      if (__OFADD__(v57, v58)) {
        goto LABEL_84;
      }
      char v60 = v56;
      if (*(void *)(v32 + 24) >= v59)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          unint64_t v32 = v129;
        }
        uint64_t v61 = v117;
LABEL_53:
        unint64_t v77 = v123;
        *(void *)(v123 + 16) = v32;
        swift_bridgeObjectRelease();
        unint64_t v78 = *(void **)(v77 + 16);
        swift_bridgeObjectRetain();
        if ((v60 & 1) == 0)
        {
          specialized _NativeDictionary._insert(at:key:value:)(v33, v61, v124, MEMORY[0x263F8EE78], v78);
          swift_bridgeObjectRetain();
        }
        unint64_t v30 = v78[7];
        swift_bridgeObjectRelease();
        unint64_t v32 = *(void *)(v30 + 8 * v33);
        char v79 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v30 + 8 * v33) = v32;
        if ((v79 & 1) == 0) {
          goto LABEL_85;
        }
        goto LABEL_56;
      }
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v59, isUniquelyReferenced_nonNull_native);
      unint64_t v32 = v129;
      uint64_t v61 = v117;
      unint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)(v117, v124);
      if ((v60 & 1) == (v63 & 1))
      {
        unint64_t v33 = v62;
        goto LABEL_53;
      }
LABEL_91:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    if (!v24)
    {
      swift_bridgeObjectRelease();
      uint64_t v82 = XMLNode.subscript.getter(0x6E6F6974636E7566, 0xE800000000000000);
      uint64_t v84 = v117;
      if (!v83)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      uint64_t v85 = (uint64_t)v111;
      *uint64_t v111 = v82;
      *(void *)(v85 + 8) = v83;
      type metadata accessor for NodeDef.Implementation.Kind(0);
      swift_storeEnumTagMultiPayload();
      *(void *)(v85 + *(int *)(v118 + 20)) = v46;
      outlined init with copy of NodeDef.Implementation(v85, v110);
      unint64_t v86 = v123;
      unint64_t v29 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v129 = *(void *)(v86 + 16);
      unint64_t v32 = v129;
      *(void *)(v86 + 16) = 0x8000000000000000;
      unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v124);
      uint64_t v88 = *(void *)(v32 + 16);
      BOOL v89 = (v87 & 1) == 0;
      uint64_t v90 = v88 + v89;
      if (__OFADD__(v88, v89)) {
        goto LABEL_89;
      }
      char v91 = v87;
      if (*(void *)(v32 + 24) >= v90)
      {
        if ((v29 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          unint64_t v32 = v129;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v90, v29);
        unint64_t v32 = v129;
        unint64_t v92 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v124);
        if ((v91 & 1) != (v93 & 1)) {
          goto LABEL_91;
        }
        unint64_t v30 = v92;
      }
      unint64_t v100 = v123;
      *(void *)(v123 + 16) = v32;
      swift_bridgeObjectRelease();
      long long v101 = *(void **)(v100 + 16);
      swift_bridgeObjectRetain();
      if ((v91 & 1) == 0)
      {
        specialized _NativeDictionary._insert(at:key:value:)(v30, v84, v124, MEMORY[0x263F8EE78], v101);
        swift_bridgeObjectRetain();
      }
      unint64_t v29 = v101[7];
      swift_bridgeObjectRelease();
      unint64_t v32 = *(void *)(v29 + 8 * v30);
      char v102 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v29 + 8 * v30) = v32;
      if (v102) {
        goto LABEL_78;
      }
      goto LABEL_90;
    }
    uint64_t v64 = (uint64_t)v116;
    *uint64_t v116 = v107;
    *(void *)(v64 + 8) = v24;
    type metadata accessor for NodeDef.Implementation.Kind(0);
    swift_storeEnumTagMultiPayload();
    *(void *)(v64 + *(int *)(v118 + 20)) = v46;
    outlined init with copy of NodeDef.Implementation(v64, v115);
    swift_bridgeObjectRetain();
    unint64_t v65 = v123;
    uint64_t v66 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v129 = *(void *)(v65 + 16);
    unint64_t v67 = v129;
    *(void *)(v65 + 16) = 0x8000000000000000;
    uint64_t v68 = v117;
    unint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)(v117, v124);
    uint64_t v71 = *(void *)(v67 + 16);
    BOOL v72 = (v69 & 1) == 0;
    uint64_t v73 = v71 + v72;
    if (__OFADD__(v71, v72))
    {
      __break(1u);
    }
    else
    {
      char v74 = v69;
      if (*(void *)(v67 + 24) >= v73)
      {
        if ((v66 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          unint64_t v67 = v129;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v73, v66);
        unint64_t v67 = v129;
        unint64_t v75 = specialized __RawDictionaryStorage.find<A>(_:)(v68, v124);
        if ((v74 & 1) != (v76 & 1)) {
          goto LABEL_91;
        }
        unint64_t v70 = v75;
      }
      unint64_t v94 = v123;
      *(void *)(v123 + 16) = v67;
      swift_bridgeObjectRelease();
      long long v95 = *(void **)(v94 + 16);
      swift_bridgeObjectRetain();
      if ((v74 & 1) == 0)
      {
        specialized _NativeDictionary._insert(at:key:value:)(v70, v68, v124, MEMORY[0x263F8EE78], v95);
        swift_bridgeObjectRetain();
      }
      uint64_t v66 = v95[7];
      swift_bridgeObjectRelease();
      unint64_t v67 = *(void *)(v66 + 8 * v70);
      char v96 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v66 + 8 * v70) = v67;
      if (v96)
      {
LABEL_69:
        unint64_t v98 = *(void *)(v67 + 16);
        unint64_t v97 = *(void *)(v67 + 24);
        if (v98 >= v97 >> 1)
        {
          unint64_t v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v97 > 1, v98 + 1, 1, v67);
          *(void *)(v66 + 8 * v70) = v67;
        }
        *(void *)(v67 + 16) = v98 + 1;
        outlined init with take of NodeDef.Implementation(v115, v67+ ((*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80))+ *(void *)(v109 + 72) * v98);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v99 = (uint64_t)v116;
        return outlined destroy of NodeDef.Implementation(v99);
      }
    }
    unint64_t v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v67 + 16) + 1, 1, v67);
    *(void *)(v66 + 8 * v70) = v67;
    goto LABEL_69;
  }
  uint64_t v106 = v24;
  unint64_t v129 = v27;
  specialized ContiguousArray.reserveCapacity(_:)();
  unint64_t v30 = 0;
  v105[1] = v28;
  uint64_t v131 = v28 + 32;
  unint64_t v125 = v29;
  uint64_t v126 = v19;
  while (1)
  {
    uint64_t v31 = (unint64_t *)(v131 + 16 * v30);
    unint64_t v33 = *v31;
    unint64_t v32 = v31[1];
    uint64_t v34 = one-time initialization token for allTargets;
    swift_bridgeObjectRetain();
    if (v34 != -1) {
      swift_once();
    }
    uint64_t v35 = static MaterialXTarget.allTargets;
    if ((unint64_t)static MaterialXTarget.allTargets >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v36) {
        goto LABEL_88;
      }
    }
    else
    {
      uint64_t v36 = *(void *)((static MaterialXTarget.allTargets & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (!v36) {
        goto LABEL_88;
      }
    }
    unint64_t v29 = v35 & 0xC000000000000001;
    if ((v35 & 0xC000000000000001) != 0)
    {
      uint64_t v37 = MEMORY[0x2611848A0](0, v35);
    }
    else
    {
      uint64_t v37 = *(void *)(v35 + 32);
      swift_retain();
    }
    BOOL v38 = *(void *)(v37 + 16) == v33 && *(void *)(v37 + 24) == v32;
    if (!v38 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      break;
    }
LABEL_5:
    ++v30;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (v30 == v125)
    {
      unint64_t v27 = v129;
      swift_bridgeObjectRelease();
      uint64_t v24 = v106;
      goto LABEL_37;
    }
  }
  swift_release();
  if (v36 == 1)
  {
LABEL_88:
    swift_bridgeObjectRelease_n();
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v32 + 16) + 1, 1, v32);
    *(void *)(v29 + 8 * v30) = v32;
LABEL_78:
    unint64_t v104 = *(void *)(v32 + 16);
    unint64_t v103 = *(void *)(v32 + 24);
    if (v104 >= v103 >> 1)
    {
      unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v103 > 1, v104 + 1, 1, v32);
      *(void *)(v29 + 8 * v30) = v32;
    }
    *(void *)(v32 + 16) = v104 + 1;
    outlined init with take of NodeDef.Implementation(v110, v32+ ((*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80))+ *(void *)(v109 + 72) * v104);
    swift_bridgeObjectRelease();
    uint64_t v99 = (uint64_t)v111;
    return outlined destroy of NodeDef.Implementation(v99);
  }
  uint64_t v39 = 5;
  while (1)
  {
    uint64_t v40 = v39 - 4;
    if (!v29) {
      break;
    }
    uint64_t v41 = MEMORY[0x2611848A0](v39 - 4, v35);
    BOOL v42 = __OFADD__(v40, 1);
    uint64_t v43 = v39 - 3;
    if (v42) {
      goto LABEL_83;
    }
LABEL_24:
    BOOL v44 = *(void *)(v41 + 16) == v33 && *(void *)(v41 + 24) == v32;
    if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_5;
    }
    swift_release();
    ++v39;
    if (v43 == v36) {
      goto LABEL_88;
    }
  }
  uint64_t v41 = *(void *)(v35 + 8 * v39);
  swift_retain();
  BOOL v42 = __OFADD__(v40, 1);
  uint64_t v43 = v39 - 3;
  if (!v42) {
    goto LABEL_24;
  }
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v32 + 16) + 1, 1, v32);
  *(void *)(v30 + 8 * v33) = v32;
LABEL_56:
  unint64_t v81 = *(void *)(v32 + 16);
  unint64_t v80 = *(void *)(v32 + 24);
  if (v81 >= v80 >> 1)
  {
    unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1, v32);
    *(void *)(v30 + 8 * v33) = v32;
  }
  *(void *)(v32 + 16) = v81 + 1;
  outlined init with take of NodeDef.Implementation(v120, v32+ ((*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80))+ *(void *)(v109 + 72) * v81);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of NodeDef.Implementation((uint64_t)v121);
  return (*(uint64_t (**)(char *, uint64_t))(v113 + 8))(v122, v114);
}

void closure #6 in createGraph(_:nodeDefStore:)(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void **a7)
{
  unint64_t v124 = a2;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = *(void *)(v11 + 8);
  uint64_t v95 = ObjectType;
  unint64_t v92 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 16);
  uint64_t v14 = v92(ObjectType, v13);
  if (!v15)
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi40_((uint64_t)v99);
    *(void *)&v100[0] = 0;
    *((void *)&v100[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    v32._object = (void *)0x800000025C4245B0;
    v32._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v32);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XMLElement);
    _print_unlocked<A, B>(_:_:)();
    long long v33 = v100[0];
    outlined init with take of UserGraphError.ErrorType((uint64_t)v99, (uint64_t)v100);
    long long v101 = v33;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *uint64_t v34 = v100[0];
    long long v35 = v100[4];
    long long v37 = v100[1];
    long long v36 = v100[2];
    v34[3] = v100[3];
    v34[4] = v35;
    v34[1] = v37;
    v34[2] = v36;
    long long v38 = v100[8];
    long long v40 = v100[5];
    long long v39 = v100[6];
    v34[7] = v100[7];
    v34[8] = v38;
    v34[5] = v40;
    v34[6] = v39;
    long long v41 = v101;
    long long v43 = v100[9];
    long long v42 = v100[10];
    v34[11] = v100[11];
    v34[12] = v41;
    v34[9] = v43;
    v34[10] = v42;
    swift_willThrow();
    return;
  }
  uint64_t v16 = v14;
  uint64_t v17 = v15;
  uint64_t v91 = v11;
  uint64_t v98 = v10;
  BOOL v18 = v14 == 0x7061726765646F6ELL && v15 == 0xE900000000000068;
  if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    XMLNode.subscript.getter(0x66656465646F6ELL, 0xE700000000000000);
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    if (!v20)
    {
      createGraph(_:nodeDefStore:)(v102, v10, v11, v124, a3, a4);
      if (!v7)
      {
        long long v119 = v103;
        v120[0] = *(_OWORD *)v104;
        *(_OWORD *)((char *)v120 + 9) = *(_OWORD *)&v104[9];
        outlined init with take of NodePersonality(&v119, v123);
        uint64_t v21 = *(void *)&v120[0];
        uint64_t v121 = *(void *)&v120[0];
        uint64_t v122 = *((void *)&v119 + 1);
        long long v114 = v105;
        v115[0] = v106[0];
        *(_OWORD *)((char *)v115 + 9) = *(_OWORD *)((char *)v106 + 9);
        outlined init with take of NodePersonality(&v114, &v118);
        uint64_t v116 = *(void *)&v115[0];
        uint64_t v117 = *((void *)&v114 + 1);
        int64_t v22 = *(void *)(v21 + 16);
        if (v22)
        {
          uint64_t v23 = MEMORY[0x263F8EE78];
          outlined retain of NodePersonality(v123);
          outlined retain of [Input]((uint64_t)&v122);
          outlined retain of [Input]((uint64_t)&v121);
          outlined retain of NodePersonality(&v118);
          outlined retain of [Input]((uint64_t)&v117);
          outlined retain of [Input]((uint64_t)&v116);
          *(void *)&v100[0] = v23;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
          uint64_t v24 = v23;
          uint64_t v25 = (uint64_t *)(v21 + 56);
          do
          {
            uint64_t v27 = *(v25 - 2);
            uint64_t v26 = *(v25 - 1);
            uint64_t v28 = *v25;
            *(void *)&v100[0] = v24;
            unint64_t v30 = *(void *)(v24 + 16);
            unint64_t v29 = *(void *)(v24 + 24);
            swift_retain();
            swift_bridgeObjectRetain();
            if (v30 >= v29 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
              uint64_t v24 = *(void *)&v100[0];
            }
            *(void *)(v24 + 16) = v30 + 1;
            uint64_t v31 = (void *)(v24 + 24 * v30);
            v31[4] = v26;
            v31[5] = v28;
            v31[6] = v27;
            v25 += 7;
            --v22;
          }
          while (v22);
        }
        else
        {
          outlined retain of NodePersonality(v123);
          outlined retain of [Input]((uint64_t)&v122);
          outlined retain of [Input]((uint64_t)&v121);
          outlined retain of NodePersonality(&v118);
          outlined retain of [Input]((uint64_t)&v117);
          outlined retain of [Input]((uint64_t)&v116);
          uint64_t v24 = MEMORY[0x263F8EE78];
        }
        uint64_t v58 = v117;
        int64_t v59 = *(void *)(v117 + 16);
        uint64_t v60 = MEMORY[0x263F8EE78];
        if (v59)
        {
          *(void *)&v100[0] = MEMORY[0x263F8EE78];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59, 0);
          uint64_t v60 = *(void *)&v100[0];
          uint64_t v61 = (uint64_t *)(v58 + 56);
          do
          {
            uint64_t v63 = *(v61 - 2);
            uint64_t v62 = *(v61 - 1);
            uint64_t v64 = *v61;
            *(void *)&v100[0] = v60;
            unint64_t v66 = *(void *)(v60 + 16);
            unint64_t v65 = *(void *)(v60 + 24);
            swift_retain();
            swift_bridgeObjectRetain();
            if (v66 >= v65 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v65 > 1, v66 + 1, 1);
              uint64_t v60 = *(void *)&v100[0];
            }
            *(void *)(v60 + 16) = v66 + 1;
            unint64_t v67 = (void *)(v60 + 24 * v66);
            v67[4] = v62;
            v67[5] = v64;
            v67[6] = v63;
            v61 += 7;
            --v59;
          }
          while (v59);
          outlined release of [Input]((uint64_t)&v117);
        }
        uint64_t v68 = swift_allocObject();
        long long v69 = v106[0];
        *(_OWORD *)(v68 + 144) = v105;
        *(_OWORD *)(v68 + 160) = v69;
        *(_OWORD *)(v68 + 169) = *(_OWORD *)((char *)v106 + 9);
        long long v70 = v103;
        *(_OWORD *)(v68 + 80) = v102[4];
        *(_OWORD *)(v68 + 96) = v70;
        long long v71 = *(_OWORD *)&v104[16];
        *(_OWORD *)(v68 + 112) = *(_OWORD *)v104;
        *(_OWORD *)(v68 + 128) = v71;
        long long v72 = v102[1];
        *(_OWORD *)(v68 + 16) = v102[0];
        *(_OWORD *)(v68 + 32) = v72;
        long long v73 = v102[3];
        *(_OWORD *)(v68 + 48) = v102[2];
        *(_OWORD *)(v68 + 64) = v73;
        unint64_t v74 = v68 | 0xC000000000000000;
        unint64_t v75 = *(void *)(a5 + 40);
        outlined retain of Graph((uint64_t)v102);
        specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v75, v24, v60, v74, a5 + 64, a5, v107);
        unint64_t v76 = v107[0];
        unint64_t v77 = v107[2];
        unint64_t v124 = v107[3];
        unint64_t v90 = v107[4];
        char v89 = v108;
        uint64_t v78 = v107[1];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        outlined release of NodePersonality(&v118);
        outlined release of [Input]((uint64_t)&v117);
        outlined release of [Input]((uint64_t)&v116);
        outlined release of NodePersonality(v123);
        outlined release of [Input]((uint64_t)&v122);
        outlined release of [Input]((uint64_t)&v121);
        outlined release of Graph((uint64_t)v102);
        goto LABEL_43;
      }
    }
  }
  else
  {
    BOOL v44 = v16 == 0x7475706E69 && v17 == 0xE500000000000000;
    if (v44
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || (v16 == 0x74757074756FLL ? (BOOL v45 = v17 == 0xE600000000000000) : (BOOL v45 = 0), v45))
    {
LABEL_49:
      swift_bridgeObjectRelease();
      return;
    }
    char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v46) {
      return;
    }
    specialized NodeDefStore.createNode(for:in:)(v11, a5, &v109);
    if (!v7)
    {
      uint64_t v78 = *((void *)&v109 + 1);
      unint64_t v76 = v109;
      unint64_t v77 = v110;
      unint64_t v124 = v111;
      unint64_t v90 = v112;
      char v89 = v113;
LABEL_43:
      outlined copy of NodePersonality(v76);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v79._uint64_t countAndFlagsBits = 1701667182;
      v79._object = (void *)0xE400000000000000;
      Swift::String v80 = XMLElement.getRequiredAttribute(_:)(v79);
      if (v81)
      {
        outlined consume of ShaderGraphNode?(v76, v78);
        swift_unexpectedError();
        __break(1u);
        return;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v100[0] = *a6;
      *a6 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v124, v80._countAndFlagsBits, (uint64_t)v80._object, isUniquelyReferenced_nonNull_native);
      *a6 = *(void *)&v100[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v83 = *a7;
      swift_unknownObjectRetain();
      outlined copy of NodePersonality(v76);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v84 = swift_isUniquelyReferenced_nonNull_native();
      *a7 = v83;
      if ((v84 & 1) == 0)
      {
        uint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83[2] + 1, 1, v83);
        *a7 = v83;
      }
      unint64_t v86 = v83[2];
      unint64_t v85 = v83[3];
      if (v86 >= v85 >> 1)
      {
        uint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v85 > 1), v86 + 1, 1, v83);
        *a7 = v83;
      }
      v83[2] = v86 + 1;
      char v87 = &v83[8 * v86];
      v87[4] = v98;
      v87[5] = v91;
      v87[6] = v76;
      v87[7] = v78;
      unint64_t v88 = v124;
      v87[8] = v77;
      v87[9] = v88;
      v87[10] = v90;
      *((unsigned char *)v87 + 88) = v89;
      outlined consume of ShaderGraphNode?(v76, v78);
      outlined consume of NodePersonality(v76);
      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)logger);
    swift_unknownObjectRetain();
    id v48 = v7;
    swift_unknownObjectRetain();
    id v49 = v7;
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      unint64_t v97 = (void *)swift_slowAlloc();
      unint64_t v124 = swift_slowAlloc();
      *(void *)&v100[0] = v124;
      *(_DWORD *)uint64_t v52 = 136315394;
      uint64_t v53 = v92(v95, v13);
      if (v54)
      {
        unint64_t v55 = v54;
      }
      else
      {
        uint64_t v53 = 0x64656D616E6E753CLL;
        unint64_t v55 = 0xE90000000000003ELL;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v55, (uint64_t *)v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 12) = 2112;
      id v56 = v7;
      v99[0] = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v97 = v99[0];

      _os_log_impl(&dword_25C27E000, v50, v51, "Could not create node for element '%s'. (%@)", (uint8_t *)v52, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261185880](v97, -1, -1);
      unint64_t v57 = v124;
      swift_arrayDestroy();
      MEMORY[0x261185880](v57, -1, -1);
      MEMORY[0x261185880](v52, -1, -1);
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLElement.getRequiredAttribute(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (!(*(uint64_t (**)(void))(v1 + 16))()
    || (uint64_t v7 = v6,
        uint64_t ObjectType = swift_getObjectType(),
        uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(ObjectType, v7),
        uint64_t v3 = v9,
        swift_unknownObjectRelease(),
        !v3))
  {
    lazy protocol witness table accessor for type XMLElementErrors and conformance XMLElementErrors();
    swift_allocError();
    *uint64_t v10 = countAndFlagsBits;
    v10[1] = (uint64_t)object;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
  uint64_t v11 = v2;
  uint64_t v12 = v3;
  result._object = v12;
  result._uint64_t countAndFlagsBits = v11;
  return result;
}

void closure #1 in closure #7 in createGraph(_:nodeDefStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v177 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 40);
  uint64_t v10 = *(void *)(a1 + 8);
  swift_getObjectType();
  v11._uint64_t countAndFlagsBits = 1701667182;
  v11._unint64_t object = (void *)0xE400000000000000;
  Swift::String v12 = XMLElement.getRequiredAttribute(_:)(v11);
  if (v13) {
    return;
  }
  uint64_t countAndFlagsBits = v12._countAndFlagsBits;
  uint64_t v162 = v7;
  unint64_t v165 = (void *)a2;
  uint64_t v167 = v8;
  uint64_t v163 = v6;
  char v164 = v9;
  uint64_t v235 = v5;
  uint64_t v169 = v5;
  uint64_t v15 = *(void *)(v5 + 16);
  if (!v15)
  {
LABEL_10:
    uint64_t v24 = countAndFlagsBits;
    outlined init with take of NodePersonality(v165, &v209);
    uint64_t v208 = v165[2];
    uint64_t v184 = v177;
    uint64_t v185 = v169;
    uint64_t v186 = v162;
    uint64_t v187 = v163;
    uint64_t v188 = v167;
    char v189 = v164 & 1;
    uint64_t v190 = v24;
    unint64_t object = (unint64_t)v12._object;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v184);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v184, (uint64_t)&v192);
    long long v204 = 0uLL;
    outlined retain of [Input]((uint64_t)&v235);
    outlined retain of NodePersonality(&v209);
    outlined retain of [Input]((uint64_t)&v208);
    swift_bridgeObjectRetain();
    outlined release of UserGraphError((uint64_t *)&v192);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *uint64_t v25 = v192;
    long long v26 = v196;
    long long v28 = v193;
    long long v27 = v194;
    v25[3] = v195;
    v25[4] = v26;
    v25[1] = v28;
    v25[2] = v27;
    long long v29 = v200;
    long long v31 = v197;
    long long v30 = v198;
    v25[7] = v199;
    v25[8] = v29;
    v25[5] = v31;
    v25[6] = v30;
    long long v32 = v204;
    long long v34 = v201;
    long long v33 = v202;
    v25[11] = v203;
    v25[12] = v32;
    v25[9] = v34;
    v25[10] = v33;
    outlined retain of [Input]((uint64_t)&v235);
    outlined retain of NodePersonality(&v209);
    outlined retain of [Input]((uint64_t)&v208);
    swift_willThrow();
    return;
  }
  uint64_t v16 = (void *)(v5 + 80);
  uint64_t v181 = v12._countAndFlagsBits;
  while (1)
  {
    uint64_t v17 = *(v16 - 6);
    uint64_t v183 = *(v16 - 5);
    uint64_t v18 = *(v16 - 4);
    uint64_t v19 = (void *)*(v16 - 3);
    uint64_t v20 = *(v16 - 2);
    char v21 = *((unsigned char *)v16 - 8);
    uint64_t v22 = *v16;
    if (v18 == countAndFlagsBits && v19 == v12._object) {
      break;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      goto LABEL_12;
    }
    v16 += 7;
    --v15;
    uint64_t countAndFlagsBits = v12._countAndFlagsBits;
    if (!v15) {
      goto LABEL_10;
    }
  }
  uint64_t v18 = countAndFlagsBits;
  uint64_t v19 = v12._object;
LABEL_12:
  v222[0] = v17;
  v222[1] = v183;
  v222[2] = v18;
  v222[3] = v19;
  v222[4] = v20;
  char v223 = v21;
  uint64_t v224 = v22;
  swift_retain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String?>);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_25C41B5A0;
  uint64_t v36 = XMLNode.subscript.getter(0x6361667265746E69, 0xED0000656D616E65);
  uint64_t v38 = v37;
  *(void *)(v35 + 32) = v36;
  *(void *)(v35 + 40) = v37;
  uint64_t v156 = XMLNode.subscript.getter(0x656D616E65646F6ELL, 0xE800000000000000);
  *(void *)(v35 + 48) = v156;
  *(void *)(v35 + 56) = v39;
  uint64_t v40 = v39;
  uint64_t v158 = XMLNode.subscript.getter(0x65756C6176, 0xE500000000000000);
  *(void *)(v35 + 64) = v158;
  *(void *)(v35 + 72) = v41;
  uint64_t v42 = v41;
  if (!v38)
  {
    long long v43 = (void *)MEMORY[0x263F8EE78];
    if (!v40) {
      goto LABEL_23;
    }
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  long long v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v45 = v43[2];
  unint64_t v44 = v43[3];
  unint64_t v46 = v45 + 1;
  if (v45 >= v44 >> 1)
  {
    uint64_t v155 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v45 + 1, 1, v43);
    unint64_t v46 = v45 + 1;
    long long v43 = v155;
  }
  v43[2] = v46;
  uint64_t v47 = &v43[2 * v45];
  v47[4] = v36;
  v47[5] = v38;
  uint64_t v41 = v42;
  if (v40)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
    }
    unint64_t v49 = v43[2];
    unint64_t v48 = v43[3];
    if (v49 >= v48 >> 1) {
      long long v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v48 > 1), v49 + 1, 1, v43);
    }
    v43[2] = v49 + 1;
    uint64_t v50 = &v43[2 * v49];
    v50[4] = v156;
    v50[5] = v40;
    uint64_t v41 = v42;
  }
LABEL_23:
  if (v41)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
    }
    unint64_t v52 = v43[2];
    unint64_t v51 = v43[3];
    if (v52 >= v51 >> 1) {
      long long v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v51 > 1), v52 + 1, 1, v43);
    }
    v43[2] = v52 + 1;
    uint64_t v53 = &v43[2 * v52];
    v53[4] = v158;
    v53[5] = v42;
  }
  swift_release();
  uint64_t v54 = v43[2];
  swift_bridgeObjectRelease();
  if (v54 != 1)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)logger);
    swift_bridgeObjectRetain_n();
    id v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      *(void *)&long long v192 = v59;
      *(_DWORD *)uint64_t v58 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12._countAndFlagsBits, (unint64_t)v12._object, (uint64_t *)&v192);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25C27E000, v56, v57, "Input %s should only have 1 of (interfacename, nodename, value)", v58, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261185880](v59, -1, -1);
      MEMORY[0x261185880](v58, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v60 = XMLNode.subscript.getter(0x6361667265746E69, 0xED0000656D616E65);
  if (v61)
  {
    uint64_t v179 = v60;
    uint64_t v182 = v61;
    swift_bridgeObjectRelease();
    unint64_t v63 = *(void *)(a3 + 80);
    uint64_t v62 = *(void *)(a3 + 88);
    uint64_t v64 = *(void *)(a3 + 96);
    uint64_t v65 = *(void *)(a3 + 104);
    uint64_t v66 = *(void *)(a3 + 112);
    char v67 = *(unsigned char *)(a3 + 120);
    uint64_t v68 = *(void *)(v64 + 16);
    if (v68)
    {
      char v166 = *(unsigned char *)(a3 + 120);
      uint64_t v168 = *(void *)(a3 + 112);
      uint64_t v170 = *(void *)(a3 + 104);
      unint64_t v171 = *(void *)(a3 + 80);
      uint64_t v178 = *(void *)(a3 + 88);
      swift_bridgeObjectRetain();
      uint64_t v174 = v64;
      long long v69 = (void *)(v64 + 80);
      while (1)
      {
        uint64_t v70 = *(v69 - 6);
        uint64_t v71 = *(v69 - 5);
        uint64_t v72 = *(v69 - 4);
        long long v73 = (void *)*(v69 - 3);
        uint64_t v74 = *(v69 - 2);
        char v75 = *((unsigned char *)v69 - 8);
        uint64_t v76 = *v69;
        uint64_t v77 = v179;
        if (v72 == v179 && v182 == v73) {
          break;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)())
        {
          uint64_t v77 = v72;
          break;
        }
        v69 += 7;
        if (!--v68)
        {
          uint64_t v215 = v70;
          uint64_t v216 = v71;
          uint64_t v217 = v72;
          uint64_t v218 = v73;
          uint64_t v219 = v74;
          char v220 = v75;
          uint64_t v221 = v76;
          uint64_t v62 = v178;
          unint64_t v63 = v171;
          uint64_t v64 = v174;
          uint64_t v66 = v168;
          uint64_t v65 = v170;
          char v67 = v166;
          goto LABEL_67;
        }
      }
      uint64_t v215 = v70;
      uint64_t v216 = v71;
      uint64_t v217 = v77;
      uint64_t v218 = v73;
      uint64_t v219 = v74;
      char v220 = v75;
      uint64_t v221 = v76;
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v171);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      Graph.connect(_:to:)((uint64_t)&v215, (unint64_t)v222);
      outlined consume of NodePersonality(v171);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRetain();
LABEL_67:
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v63);
    uint64_t v184 = v63;
    uint64_t v185 = v62;
    uint64_t v186 = v64;
    uint64_t v187 = v65;
    uint64_t v188 = v66;
    char v189 = v67;
    uint64_t v190 = v179;
    unint64_t object = (unint64_t)v182;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v184);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v184, (uint64_t)&v192);
    long long v204 = 0uLL;
    swift_bridgeObjectRetain();
    outlined release of UserGraphError((uint64_t *)&v192);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_68:
    swift_release();
    return;
  }
  uint64_t v79 = XMLNode.subscript.getter(0x656D616E65646F6ELL, 0xE800000000000000);
  if (!v80)
  {
    uint64_t v112 = XMLNode.subscript.getter(0x65756C6176, 0xE500000000000000);
    if (v113)
    {
      uint64_t v114 = v112;
      uint64_t v115 = v113;
      swift_bridgeObjectRelease();
      uint64_t v116 = swift_unknownObjectRetain();
      uint64_t v130 = specialized MaterialXDataType.__allocating_init(xmlElement:)(v116, v10);
      swift_unknownObjectRelease();
      swift_retain();
      specialized SGDataTypeStorage.init(materialXValue:type:)(v114, v115, (uint64_t)v130, (uint64_t)v205);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
      uint64_t v146 = swift_allocObject();
      *(_OWORD *)(v146 + 16) = xmmword_25C418EE0;
      *(void *)(v146 + 32) = 7632239;
      *(void *)(v146 + 40) = 0xE300000000000000;
      *(void *)(v146 + 48) = v130;
      unint64_t v147 = swift_allocObject();
      outlined init with take of SGDataTypeStorage((uint64_t)v205, v147 + 16);
      *(void *)(v147 + 88) = v130;
      unint64_t v148 = *(void *)(a3 + 40);
      swift_retain_n();
      outlined retain of SGDataTypeStorage((uint64_t)v205, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
      specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v148, MEMORY[0x263F8EE78], v146, v147, a3 + 64, a3, v206);
      swift_release();
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      uint64_t v214 = v207;
      if (*(void *)(v207 + 16))
      {
        uint64_t v149 = *(void *)(v207 + 40);
        uint64_t v150 = *(void *)(v207 + 48);
        uint64_t v151 = *(void *)(v207 + 56);
        uint64_t v152 = *(void *)(v207 + 64);
        char v153 = *(unsigned char *)(v207 + 72);
        uint64_t v154 = *(void *)(v207 + 80);
        v232[0] = *(void *)(v207 + 32);
        v232[1] = v149;
        v232[2] = v150;
        v232[3] = v151;
        v232[4] = v152;
        char v233 = v153;
        uint64_t v234 = v154;
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.connect(_:to:)((uint64_t)v232, (unint64_t)v222);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        outlined retain of SGDataTypeStorage((uint64_t)v205, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
        outlined init with take of NodePersonality(v206, &v213);
        outlined release of NodePersonality(&v213);
        unint64_t v212 = v206[1];
        outlined release of [Input]((uint64_t)&v212);
        outlined release of [Input]((uint64_t)&v214);
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        __break(1u);
      }
      return;
    }
    swift_getObjectType();
    v127._uint64_t countAndFlagsBits = 1701667182;
    v127._unint64_t object = (void *)0xE400000000000000;
    Swift::String v128 = XMLElement.getRequiredAttribute(_:)(v127);
    if (v129)
    {
      swift_bridgeObjectRelease();
LABEL_84:
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
    unint64_t v92 = (void *)v128._countAndFlagsBits;
    unint64_t v86 = (unint64_t)v128._object;
    if (one-time initialization token for logger == -1)
    {
LABEL_78:
      uint64_t v131 = type metadata accessor for Logger();
      __swift_project_value_buffer(v131, (uint64_t)logger);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v132 = Logger.logObject.getter();
      os_log_type_t v133 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v132, v133))
      {
        uint64_t v134 = swift_slowAlloc();
        uint64_t v135 = swift_slowAlloc();
        *(void *)&long long v192 = v135;
        *(_DWORD *)uint64_t v134 = 136315394;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v181, (unint64_t)v12._object, (uint64_t *)&v192);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v134 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v184 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v92, v86, (uint64_t *)&v192);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_arrayDestroy();
        MEMORY[0x261185880](v135, -1, -1);
        MEMORY[0x261185880](v134, -1, -1);
        swift_bridgeObjectRelease();
        swift_release();

        return;
      }

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      goto LABEL_68;
    }
LABEL_94:
    swift_once();
    goto LABEL_78;
  }
  uint64_t v81 = v79;
  uint64_t v82 = v80;
  swift_bridgeObjectRelease();
  uint64_t v83 = *a4;
  if (!*(void *)(*a4 + 16))
  {
LABEL_74:
    uint64_t v184 = v81;
    uint64_t v185 = v82;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi4_((uint64_t)&v184);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v184, (uint64_t)&v192);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v204 = 0uLL;
    swift_allocError();
    *uint64_t v117 = v192;
    long long v118 = v196;
    long long v120 = v193;
    long long v119 = v194;
    v117[3] = v195;
    v117[4] = v118;
    v117[1] = v120;
    v117[2] = v119;
    long long v121 = v200;
    long long v123 = v197;
    long long v122 = v198;
    v117[7] = v199;
    v117[8] = v121;
    v117[5] = v123;
    v117[6] = v122;
    long long v124 = v204;
    long long v126 = v201;
    long long v125 = v202;
    v117[11] = v203;
    v117[12] = v124;
    v117[9] = v126;
    v117[10] = v125;
LABEL_83:
    swift_willThrow();
    goto LABEL_84;
  }
  swift_bridgeObjectRetain();
  unint64_t v84 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v82);
  if ((v85 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_74;
  }
  unint64_t v86 = *(void *)(*(void *)(v83 + 56) + 8 * v84);
  swift_bridgeObjectRelease_n();
  uint64_t v87 = XMLNode.subscript.getter(0x74757074756FLL, 0xE600000000000000);
  if (v88) {
    uint64_t v89 = v87;
  }
  else {
    uint64_t v89 = 7632239;
  }
  if (v88) {
    unint64_t v90 = v88;
  }
  else {
    unint64_t v90 = 0xE300000000000000;
  }
  unint64_t v92 = v165;
  uint64_t v91 = v167;
  uint64_t v93 = v177;
  if (v86 == -7)
  {
LABEL_82:
    outlined init with take of NodePersonality(v92, &v211);
    uint64_t v210 = v92[2];
    uint64_t v184 = v93;
    uint64_t v185 = v169;
    uint64_t v186 = v162;
    uint64_t v187 = v163;
    uint64_t v188 = v91;
    char v189 = v164 & 1;
    uint64_t v190 = v89;
    unint64_t object = v90;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v184);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v184, (uint64_t)&v192);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v204 = 0uLL;
    swift_allocError();
    *uint64_t v136 = v192;
    long long v137 = v196;
    long long v139 = v193;
    long long v138 = v194;
    v136[3] = v195;
    v136[4] = v137;
    v136[1] = v139;
    v136[2] = v138;
    long long v140 = v200;
    long long v142 = v197;
    long long v141 = v198;
    v136[7] = v199;
    v136[8] = v140;
    v136[5] = v142;
    v136[6] = v141;
    long long v143 = v204;
    long long v145 = v201;
    long long v144 = v202;
    v136[11] = v203;
    v136[12] = v143;
    v136[9] = v145;
    v136[10] = v144;
    outlined retain of [Input]((uint64_t)&v235);
    outlined retain of NodePersonality(&v211);
    outlined retain of [Input]((uint64_t)&v210);
    goto LABEL_83;
  }
  uint64_t v180 = v89;
  uint64_t v181 = v90;
  if ((v86 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_93;
  }
  uint64_t v94 = *(void *)(a3 + 64);
  if (v86 >= *(void *)(v94 + 16))
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  uint64_t v95 = v94 + 48 * v86;
  unint64_t v96 = *(void *)(v95 + 32);
  uint64_t v97 = *(void *)(v95 + 40);
  uint64_t v98 = *(void *)(v95 + 48);
  uint64_t v99 = *(void *)(v95 + 56);
  uint64_t v100 = *(void *)(v95 + 64);
  char v175 = *(unsigned char *)(v95 + 72);
  uint64_t v101 = *(void *)(v98 + 16);
  if (!v101)
  {
    swift_bridgeObjectRetain();
LABEL_81:
    outlined copy of NodePersonality(v96);
    swift_bridgeObjectRetain();
    uint64_t v184 = v96;
    uint64_t v185 = v97;
    uint64_t v186 = v98;
    uint64_t v187 = v99;
    uint64_t v188 = v100;
    char v189 = v175;
    uint64_t v89 = v180;
    unint64_t v90 = v181;
    uint64_t v190 = v180;
    unint64_t object = v181;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v184);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v184, (uint64_t)&v192);
    long long v204 = 0uLL;
    swift_bridgeObjectRetain();
    outlined release of UserGraphError((uint64_t *)&v192);
    goto LABEL_82;
  }
  uint64_t v157 = *(void *)(v95 + 64);
  uint64_t v159 = *(void *)(v95 + 56);
  uint64_t v160 = *(void *)(v95 + 40);
  unint64_t v161 = *(void *)(v95 + 32);
  swift_bridgeObjectRetain();
  uint64_t v172 = v98;
  char v102 = (void *)(v98 + 80);
  while (1)
  {
    uint64_t v103 = *(v102 - 6);
    uint64_t v104 = *(v102 - 5);
    uint64_t v105 = *(v102 - 4);
    uint64_t v106 = *(v102 - 3);
    uint64_t v107 = *(v102 - 2);
    char v108 = *((unsigned char *)v102 - 8);
    uint64_t v109 = *v102;
    uint64_t v110 = v180;
    if (v105 == v180 && v106 == v181)
    {
      uint64_t v106 = v181;
      goto LABEL_91;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      break;
    }
    v102 += 7;
    if (!--v101)
    {
      uint64_t v225 = v103;
      uint64_t v226 = v104;
      uint64_t v227 = v105;
      uint64_t v228 = v106;
      uint64_t v229 = v107;
      char v230 = v108;
      uint64_t v231 = v109;
      unint64_t v92 = v165;
      uint64_t v91 = v167;
      uint64_t v93 = v177;
      uint64_t v98 = v172;
      unint64_t v96 = v161;
      uint64_t v97 = v160;
      uint64_t v100 = v157;
      uint64_t v99 = v159;
      goto LABEL_81;
    }
  }
  uint64_t v110 = v105;
LABEL_91:
  uint64_t v225 = v103;
  uint64_t v226 = v104;
  uint64_t v227 = v110;
  uint64_t v228 = v106;
  uint64_t v229 = v107;
  char v230 = v108;
  uint64_t v231 = v109;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.connect(_:to:)((uint64_t)&v225, (unint64_t)v222);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
}

double Graph.appendSwizzleNode(to:resultType:channels:nodeDefStore:)@<D0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  specialized Graph.appendSwizzleNode(to:resultType:channels:nodeDefStore:)(a1, a2, a3, a4, a5, &v10);
  if (!v6)
  {
    long long v9 = v11[0];
    *a6 = v10;
    a6[1] = v9;
    double result = *(double *)((char *)v11 + 9);
    *(_OWORD *)((char *)a6 + 25) = *(_OWORD *)((char *)v11 + 9);
  }
  return result;
}

uint64_t static MaterialXDataType.Kind.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  if (a1 && a2) {
    return specialized static Array<A>.== infix(_:_:)((void *)a1, (void *)a2);
  }
  else {
    return (a1 | a2) == 0;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MaterialXDataType.Kind.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MaterialXDataType.Kind.CodingKeys()
{
  if (*v0) {
    return 7628147;
  }
  else {
    return 0x64656D616ELL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MaterialXDataType.Kind.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized MaterialXDataType.Kind.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MaterialXDataType.Kind.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MaterialXDataType.Kind.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MaterialXDataType.Kind.NamedCodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MaterialXDataType.Kind.NamedCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance MaterialXDataType.Kind.NamedCodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MaterialXDataType.Kind.NamedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MaterialXDataType.Kind.NamedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MaterialXDataType.Kind.SetCodingKeys()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance MaterialXDataType.Kind.SetCodingKeys()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MaterialXDataType.Kind.SetCodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MaterialXDataType.Kind.SetCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MaterialXDataType.Kind.SetCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MaterialXDataType.Kind.SetCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MaterialXDataType.Kind.SetCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t MaterialXDataType.Kind.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v19 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MaterialXDataType.Kind.SetCodingKeys>);
  uint64_t v17 = *(void *)(v3 - 8);
  uint64_t v18 = v3;
  MEMORY[0x270FA5388](v3);
  char v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MaterialXDataType.Kind.NamedCodingKeys>);
  uint64_t v16 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MaterialXDataType.Kind.CodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  Swift::String v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys();
  uint64_t v13 = v19;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v13)
  {
    char v22 = 1;
    lazy protocol witness table accessor for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v20 = v13;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    uint64_t v14 = v18;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v14);
  }
  else
  {
    char v21 = 0;
    lazy protocol witness table accessor for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

void *MaterialXDataType.Kind.init(from:)(void *a1)
{
  return specialized MaterialXDataType.Kind.init(from:)(a1);
}

void *protocol witness for Decodable.init(from:) in conformance MaterialXDataType.Kind@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized MaterialXDataType.Kind.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MaterialXDataType.Kind(void *a1)
{
  return MaterialXDataType.Kind.encode(to:)(a1, *v1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MaterialXDataType.Kind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = *a2;
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return specialized static Array<A>.== infix(_:_:)((void *)v2, (void *)v3);
  }
}

uint64_t MaterialXDataType.kind.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MaterialXDataType.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void *MaterialXDataType.init(_:)(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  v2[2] = MEMORY[0x263F8EE78];
  v2[3] = 0;
  return v2;
}

void *MaterialXDataType.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a1;
  v3[5] = a2;
  v3[2] = MEMORY[0x263F8EE78];
  v3[3] = a3;
  return v3;
}

uint64_t MaterialXDataType.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (!result) {
    return result;
  }
  unint64_t v2 = (void *)result;
  unint64_t v3 = (void *)v0[3];
  BOOL v4 = (void *)v2[3];
  if (!v3)
  {
    if (!v4) {
      goto LABEL_5;
    }
    return 0;
  }
  if (!v4 || (specialized static Array<A>.== infix(_:_:)(v3, v4) & 1) == 0) {
    return 0;
  }
LABEL_5:
  if (v0[4] == v2[4] && v0[5] == v2[5]) {
    return 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t MaterialXDataType.description.getter()
{
  if (v0[3]) {
    uint64_t v1 = 0x7465733A786C746DLL;
  }
  else {
    uint64_t v1 = 0x6D616E3A786C746DLL;
  }
  uint64_t v7 = v1;
  uint64_t v2 = v0[4];
  unint64_t v3 = (void *)v0[5];
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._unint64_t object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 41;
  v5._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return v7;
}

uint64_t MaterialXDataType.debugDescription.getter()
{
  if (v0[3])
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    uint64_t v12 = 0x7465733A786C746DLL;
    uint64_t v2 = v0[4];
    uint64_t v1 = (void *)v0[5];
    swift_bridgeObjectRetain();
    v3._uint64_t countAndFlagsBits = v2;
    v3._unint64_t object = v1;
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = 23337;
    v4._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v4);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    v5._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    uint64_t v6 = 93;
  }
  else
  {
    uint64_t v12 = 0x6D616E3A786C746DLL;
    uint64_t v8 = v0[4];
    uint64_t v7 = (void *)v0[5];
    swift_bridgeObjectRetain();
    v9._uint64_t countAndFlagsBits = v8;
    v9._unint64_t object = v7;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    uint64_t v6 = 41;
  }
  unint64_t v10 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v6);
  return v12;
}

BOOL MaterialXDataType.isMaterialXEnum.getter()
{
  return *(void *)(v0 + 24) != 0;
}

uint64_t MaterialXDataType.asMetalDataType.getter()
{
  if (one-time initialization token for integer != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for int32 == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for integer2 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_9;
  }
  if (one-time initialization token for integer3 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
LABEL_14:
    if (one-time initialization token for int3 == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for integer4 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for int4 == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for BOOLean != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for BOOL == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for float != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for float == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for float2 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_34;
  }
  if (one-time initialization token for float3 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
LABEL_39:
    if (one-time initialization token for float3 == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for float4 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_44;
  }
  if (one-time initialization token for half != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for half == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for half2 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for half2 == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for half3 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for half3 == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for half4 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for half4 == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for color3 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for color3 == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for color4 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for color4 == -1) {
      return swift_retain();
    }
LABEL_318:
    swift_once();
    return swift_retain();
  }
  if (one-time initialization token for vector2 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
LABEL_34:
    if (one-time initialization token for float2 == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for vector3 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_39;
  }
  if (one-time initialization token for vector4 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
LABEL_44:
    if (one-time initialization token for float4 == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for matrix22 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for float2x2 == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for matrix33 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for float3x3 == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for matrix44 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for float4x4 == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for uAddressMode != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
LABEL_113:
    if (one-time initialization token for s_address == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for vAddressMode != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_119;
  }
  if (one-time initialization token for wrapS != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_113;
  }
  if (one-time initialization token for wrapT != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_119;
  }
  if (one-time initialization token for filterType != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_131;
  }
  if (one-time initialization token for blurFilterType != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    return 0;
  }
  if (one-time initialization token for frameEndAction != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    return 0;
  }
  if (one-time initialization token for space != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_149;
  }
  if (one-time initialization token for normalMapSpace != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
LABEL_149:
    if (one-time initialization token for space == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for lumacoeffs != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    return 0;
  }
  if (one-time initialization token for addressMode != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_161;
  }
  if (one-time initialization token for pixelAddressMode != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
LABEL_161:
    if (one-time initialization token for address == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for sAddressMode != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_113;
  }
  if (one-time initialization token for tAddressMode != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_119;
  }
  if (one-time initialization token for rAddressMode != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
LABEL_175:
    if (one-time initialization token for r_address == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for u_wrap_mode != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_113;
  }
  if (one-time initialization token for v_wrap_mode != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_119;
  }
  if (one-time initialization token for w_wrap_mode != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_175;
  }
  if (one-time initialization token for u_pixel_wrap_mode != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_113;
  }
  if (one-time initialization token for v_pixel_wrap_mode != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
LABEL_119:
    if (one-time initialization token for t_address == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for w_pixel_wrap_mode != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_175;
  }
  if (one-time initialization token for filter != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_131;
  }
  if (one-time initialization token for magFilter != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for mag_filter == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for minFilter != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for min_filter == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for cubeimageFilterType != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
LABEL_131:
    if (one-time initialization token for filter == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for coord != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for coord == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for borderColor != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for border_color == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for mipFilter != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for mip_filter == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for texture2dhalf != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for texture2d_half == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for texture2dfloat != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for texture2d_float == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for texture2dint != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for texture2d_int == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for texture2darrayhalf != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for texture2darray_half == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for texture2darrayfloat != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for texture2darray_float == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for texture2darrayint != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for texture2darray_int == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for texture3dhalf != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for texture3d_half == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for texture3dfloat != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for texture3d_float == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for texture3dint != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for texture3d_int == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for texturecubehalf != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for texturecube_half == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for texturecubefloat != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for texturecube_float == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for sampler != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for sampler == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for bias != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for bias != -1) {
      swift_once();
    }
    return swift_retain();
  }
  if (one-time initialization token for max_anisotropy != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for max_anisotropy != -1) {
      swift_once();
    }
    return swift_retain();
  }
  if (one-time initialization token for level != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for level != -1) {
      swift_once();
    }
    return swift_retain();
  }
  if (one-time initialization token for min_lod_clamp != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for min_lod_clamp != -1) {
      swift_once();
    }
    return swift_retain();
  }
  if (one-time initialization token for offset != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
LABEL_9:
    if (one-time initialization token for int2 == -1) {
      return swift_retain();
    }
    goto LABEL_318;
  }
  if (one-time initialization token for offset3 != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)()) {
    goto LABEL_14;
  }
  if (one-time initialization token for lod_clamp != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for lod_clamp != -1) {
      swift_once();
    }
    return swift_retain();
  }
  if (one-time initialization token for gradient2d != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for gradient2d != -1) {
      swift_once();
    }
    return swift_retain();
  }
  if (one-time initialization token for gradient3d != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for gradient3d != -1) {
      swift_once();
    }
    return swift_retain();
  }
  if (one-time initialization token for gradientcube != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for gradientcube != -1) {
      swift_once();
    }
    return swift_retain();
  }
  if (one-time initialization token for realityKitHoverData != -1) {
    swift_once();
  }
  if (MaterialXDataType.isEqual(to:)())
  {
    if (one-time initialization token for HoverData != -1) {
      swift_once();
    }
    return swift_retain();
  }
  return 0;
}

uint64_t *MaterialXDataType.frameEndAction.unsafeMutableAddressor()
{
  if (one-time initialization token for frameEndAction != -1) {
    swift_once();
  }
  return &static MaterialXDataType.frameEndAction;
}

uint64_t *MetalDataType.MaterialX.space.unsafeMutableAddressor()
{
  if (one-time initialization token for space != -1) {
    swift_once();
  }
  return &static MetalDataType.MaterialX.space;
}

uint64_t *MaterialXDataType.realitykit.pixelAddressMode.unsafeMutableAddressor()
{
  if (one-time initialization token for pixelAddressMode != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realitykit.pixelAddressMode;
}

uint64_t *MaterialXDataType.texture2dhalf.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2dhalf != -1) {
    swift_once();
  }
  return &static MaterialXDataType.texture2dhalf;
}

uint64_t *MaterialXDataType.texture2dfloat.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2dfloat != -1) {
    swift_once();
  }
  return &static MaterialXDataType.texture2dfloat;
}

uint64_t *MaterialXDataType.texture2dint.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2dint != -1) {
    swift_once();
  }
  return &static MaterialXDataType.texture2dint;
}

uint64_t *MaterialXDataType.texture2darrayhalf.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darrayhalf != -1) {
    swift_once();
  }
  return &static MaterialXDataType.texture2darrayhalf;
}

uint64_t *MaterialXDataType.texture2darrayfloat.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darrayfloat != -1) {
    swift_once();
  }
  return &static MaterialXDataType.texture2darrayfloat;
}

uint64_t *MaterialXDataType.texture2darrayint.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darrayint != -1) {
    swift_once();
  }
  return &static MaterialXDataType.texture2darrayint;
}

uint64_t *MaterialXDataType.texture3dhalf.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3dhalf != -1) {
    swift_once();
  }
  return &static MaterialXDataType.texture3dhalf;
}

uint64_t *MaterialXDataType.texture3dfloat.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3dfloat != -1) {
    swift_once();
  }
  return &static MaterialXDataType.texture3dfloat;
}

uint64_t *MaterialXDataType.texture3dint.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3dint != -1) {
    swift_once();
  }
  return &static MaterialXDataType.texture3dint;
}

uint64_t *MaterialXDataType.texturecubehalf.unsafeMutableAddressor()
{
  if (one-time initialization token for texturecubehalf != -1) {
    swift_once();
  }
  return &static MaterialXDataType.texturecubehalf;
}

uint64_t *MaterialXDataType.texturecubefloat.unsafeMutableAddressor()
{
  if (one-time initialization token for texturecubefloat != -1) {
    swift_once();
  }
  return &static MaterialXDataType.texturecubefloat;
}

uint64_t *MaterialXDataType.sampler.unsafeMutableAddressor()
{
  if (one-time initialization token for sampler != -1) {
    swift_once();
  }
  return &static MaterialXDataType.sampler;
}

uint64_t *MaterialXDataType.bias.unsafeMutableAddressor()
{
  if (one-time initialization token for bias != -1) {
    swift_once();
  }
  return &static MaterialXDataType.bias;
}

uint64_t *MaterialXDataType.max_anisotropy.unsafeMutableAddressor()
{
  if (one-time initialization token for max_anisotropy != -1) {
    swift_once();
  }
  return &static MaterialXDataType.max_anisotropy;
}

uint64_t *MaterialXDataType.level.unsafeMutableAddressor()
{
  if (one-time initialization token for level != -1) {
    swift_once();
  }
  return &static MaterialXDataType.level;
}

uint64_t *MaterialXDataType.min_lod_clamp.unsafeMutableAddressor()
{
  if (one-time initialization token for min_lod_clamp != -1) {
    swift_once();
  }
  return &static MaterialXDataType.min_lod_clamp;
}

uint64_t *MaterialXDataType.offset.unsafeMutableAddressor()
{
  if (one-time initialization token for offset != -1) {
    swift_once();
  }
  return &static MaterialXDataType.offset;
}

uint64_t *MaterialXDataType.offset3.unsafeMutableAddressor()
{
  if (one-time initialization token for offset3 != -1) {
    swift_once();
  }
  return &static MaterialXDataType.offset3;
}

uint64_t *MaterialXDataType.lod_clamp.unsafeMutableAddressor()
{
  if (one-time initialization token for lod_clamp != -1) {
    swift_once();
  }
  return &static MaterialXDataType.lod_clamp;
}

uint64_t *MaterialXDataType.gradient2d.unsafeMutableAddressor()
{
  if (one-time initialization token for gradient2d != -1) {
    swift_once();
  }
  return &static MaterialXDataType.gradient2d;
}

uint64_t *MaterialXDataType.gradient3d.unsafeMutableAddressor()
{
  if (one-time initialization token for gradient3d != -1) {
    swift_once();
  }
  return &static MaterialXDataType.gradient3d;
}

uint64_t *MaterialXDataType.gradientcube.unsafeMutableAddressor()
{
  if (one-time initialization token for gradientcube != -1) {
    swift_once();
  }
  return &static MaterialXDataType.gradientcube;
}

uint64_t *MaterialXDataType.realityKitHoverData.unsafeMutableAddressor()
{
  if (one-time initialization token for realityKitHoverData != -1) {
    swift_once();
  }
  return &static MaterialXDataType.realityKitHoverData;
}

void MaterialXDataType.__allocating_init(properties:)()
{
}

void MaterialXDataType.init(properties:)()
{
}

uint64_t MaterialXDataType.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t MaterialXDataType.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MaterialXDataType.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

double one-time initialization function for unsupported()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B5B0;
  *(void *)(v0 + 40) = 0xEB00000000646574;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.unsupported = v0;
  return result;
}

uint64_t static MaterialXDataType.unsupported.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for unsupported);
}

double one-time initialization function for BOOLean()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B5C0;
  *(void *)(v0 + 40) = 0xE700000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.BOOLean = v0;
  return result;
}

uint64_t static MaterialXDataType.BOOLean.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for BOOLean);
}

double one-time initialization function for integer()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B5D0;
  *(void *)(v0 + 40) = 0xE700000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.integer = v0;
  return result;
}

uint64_t static MaterialXDataType.integer.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for integer);
}

uint64_t static MaterialXDataType.float.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for float);
}

double one-time initialization function for color3()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B5F0;
  *(void *)(v0 + 40) = 0xE600000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.color3 = v0;
  return result;
}

uint64_t static MaterialXDataType.color3.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for color3);
}

double one-time initialization function for color4()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B600;
  *(void *)(v0 + 40) = 0xE600000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.color4 = v0;
  return result;
}

uint64_t static MaterialXDataType.color4.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for color4);
}

double one-time initialization function for vector2()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B610;
  *(void *)(v0 + 40) = 0xE700000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.vector2 = v0;
  return result;
}

uint64_t static MaterialXDataType.vector2.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for vector2);
}

double one-time initialization function for vector3()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B620;
  *(void *)(v0 + 40) = 0xE700000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.vector3 = v0;
  return result;
}

uint64_t static MaterialXDataType.vector3.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for vector3);
}

double one-time initialization function for vector4()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B630;
  *(void *)(v0 + 40) = 0xE700000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.vector4 = v0;
  return result;
}

uint64_t static MaterialXDataType.vector4.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for vector4);
}

double one-time initialization function for matrix22()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B640;
  *(void *)(v0 + 40) = 0xE800000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.matrix22 = v0;
  return result;
}

uint64_t static MaterialXDataType.matrix22.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for matrix22);
}

double one-time initialization function for matrix33()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B650;
  *(void *)(v0 + 40) = 0xE800000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.matrix33 = v0;
  return result;
}

uint64_t static MaterialXDataType.matrix33.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for matrix33);
}

double one-time initialization function for matrix44()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B660;
  *(void *)(v0 + 40) = 0xE800000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.matrix44 = v0;
  return result;
}

uint64_t static MaterialXDataType.matrix44.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for matrix44);
}

uint64_t static MaterialXDataType.half.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for half);
}

double one-time initialization function for half2()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B680;
  *(void *)(v0 + 40) = 0xE500000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.half2 = v0;
  return result;
}

uint64_t static MaterialXDataType.half2.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for half2);
}

double one-time initialization function for half3()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B690;
  *(void *)(v0 + 40) = 0xE500000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.half3 = v0;
  return result;
}

uint64_t static MaterialXDataType.half3.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for half3);
}

double one-time initialization function for half4()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B6A0;
  *(void *)(v0 + 40) = 0xE500000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.half4 = v0;
  return result;
}

uint64_t static MaterialXDataType.half4.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for half4);
}

double one-time initialization function for float2()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B6B0;
  *(void *)(v0 + 40) = 0xE600000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.float2 = v0;
  return result;
}

uint64_t static MaterialXDataType.float2.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for float2);
}

double one-time initialization function for float3()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B6C0;
  *(void *)(v0 + 40) = 0xE600000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.float3 = v0;
  return result;
}

uint64_t static MaterialXDataType.float3.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for float3);
}

double one-time initialization function for float4()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B6D0;
  *(void *)(v0 + 40) = 0xE600000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.float4 = v0;
  return result;
}

uint64_t static MaterialXDataType.float4.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for float4);
}

double one-time initialization function for integer2()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B6E0;
  *(void *)(v0 + 40) = 0xE800000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.integer2 = v0;
  return result;
}

uint64_t static MaterialXDataType.integer2.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for integer2);
}

double one-time initialization function for integer3()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B6F0;
  *(void *)(v0 + 40) = 0xE800000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.integer3 = v0;
  return result;
}

uint64_t static MaterialXDataType.integer3.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for integer3);
}

double one-time initialization function for integer4()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B700;
  *(void *)(v0 + 40) = 0xE800000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.integer4 = v0;
  return result;
}

uint64_t static MaterialXDataType.integer4.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for integer4);
}

double one-time initialization function for surfaceshader()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B710;
  *(void *)(v0 + 40) = 0xED00007265646168;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.surfaceshader = v0;
  return result;
}

uint64_t static MaterialXDataType.surfaceshader.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for surfaceshader);
}

double one-time initialization function for displacementshader()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B720;
  *(void *)(v0 + 40) = 0x800000025C424410;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.displacementshader = v0;
  return result;
}

uint64_t *MaterialXDataType.displacementshader.unsafeMutableAddressor()
{
  if (one-time initialization token for displacementshader != -1) {
    swift_once();
  }
  return &static MaterialXDataType.displacementshader;
}

uint64_t static MaterialXDataType.displacementshader.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for displacementshader);
}

double one-time initialization function for volumeshader()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B730;
  *(void *)(v0 + 40) = 0xEC00000072656461;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.volumeshader = v0;
  return result;
}

uint64_t *MaterialXDataType.volumeshader.unsafeMutableAddressor()
{
  if (one-time initialization token for volumeshader != -1) {
    swift_once();
  }
  return &static MaterialXDataType.volumeshader;
}

uint64_t static MaterialXDataType.volumeshader.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for volumeshader);
}

double one-time initialization function for lightshader()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B740;
  *(void *)(v0 + 40) = 0xEB00000000726564;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.lightshader = v0;
  return result;
}

uint64_t *MaterialXDataType.lightshader.unsafeMutableAddressor()
{
  if (one-time initialization token for lightshader != -1) {
    swift_once();
  }
  return &static MaterialXDataType.lightshader;
}

uint64_t static MaterialXDataType.lightshader.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for lightshader);
}

double one-time initialization function for vertexshader()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B750;
  *(void *)(v0 + 40) = 0xE600000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.vertexshader = v0;
  return result;
}

uint64_t static MaterialXDataType.vertexshader.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for vertexshader);
}

double one-time initialization function for geometrymodifier()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B760;
  *(void *)(v0 + 40) = 0x800000025C424620;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.geometrymodifier = v0;
  return result;
}

uint64_t static MaterialXDataType.geometrymodifier.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for geometrymodifier);
}

double one-time initialization function for material()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B770;
  *(void *)(v0 + 40) = 0xE800000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.material = v0;
  return result;
}

uint64_t *MaterialXDataType.material.unsafeMutableAddressor()
{
  if (one-time initialization token for material != -1) {
    swift_once();
  }
  return &static MaterialXDataType.material;
}

uint64_t static MaterialXDataType.material.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for material);
}

double one-time initialization function for filename()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B780;
  *(void *)(v0 + 40) = 0xE800000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.filename = v0;
  return result;
}

uint64_t static MaterialXDataType.filename.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for filename);
}

double one-time initialization function for string()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B790;
  *(void *)(v0 + 40) = 0xE600000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.string = v0;
  return result;
}

uint64_t static MaterialXDataType.string.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for string);
}

double one-time initialization function for stringarray()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B7A0;
  *(void *)(v0 + 40) = 0xEB00000000796172;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.stringarray = v0;
  return result;
}

uint64_t *MaterialXDataType.stringarray.unsafeMutableAddressor()
{
  if (one-time initialization token for stringarray != -1) {
    swift_once();
  }
  return &static MaterialXDataType.stringarray;
}

uint64_t static MaterialXDataType.stringarray.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for stringarray);
}

double one-time initialization function for texture2dhalf()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B7B0;
  *(void *)(v0 + 40) = 0xED0000666C616864;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.texture2dhalf = v0;
  return result;
}

uint64_t static MaterialXDataType.texture2dhalf.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2dhalf);
}

double one-time initialization function for texture2dfloat()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B7B0;
  *(void *)(v0 + 40) = 0xEE0074616F6C6664;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.texture2dfloat = v0;
  return result;
}

uint64_t static MaterialXDataType.texture2dfloat.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2dfloat);
}

double one-time initialization function for texture2dint()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B7B0;
  *(void *)(v0 + 40) = 0xEC000000746E6964;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.texture2dint = v0;
  return result;
}

uint64_t static MaterialXDataType.texture2dint.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2dint);
}

double one-time initialization function for texture2darrayhalf()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B720;
  *(void *)(v0 + 40) = 0x800000025C4244B0;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.texture2darrayhalf = v0;
  return result;
}

uint64_t static MaterialXDataType.texture2darrayhalf.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2darrayhalf);
}

double one-time initialization function for texture2darrayfloat()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B7C0;
  *(void *)(v0 + 40) = 0x800000025C424490;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.texture2darrayfloat = v0;
  return result;
}

uint64_t static MaterialXDataType.texture2darrayfloat.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2darrayfloat);
}

double one-time initialization function for texture2darrayint()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B7D0;
  *(void *)(v0 + 40) = 0x800000025C424470;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.texture2darrayint = v0;
  return result;
}

uint64_t static MaterialXDataType.texture2darrayint.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture2darrayint);
}

double one-time initialization function for texture3dhalf()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B7E0;
  *(void *)(v0 + 40) = 0xED0000666C616864;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.texture3dhalf = v0;
  return result;
}

uint64_t static MaterialXDataType.texture3dhalf.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture3dhalf);
}

double one-time initialization function for texture3dfloat()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B7E0;
  *(void *)(v0 + 40) = 0xEE0074616F6C6664;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.texture3dfloat = v0;
  return result;
}

uint64_t static MaterialXDataType.texture3dfloat.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture3dfloat);
}

double one-time initialization function for texture3dint()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B7E0;
  *(void *)(v0 + 40) = 0xEC000000746E6964;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.texture3dint = v0;
  return result;
}

uint64_t static MaterialXDataType.texture3dint.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texture3dint);
}

double one-time initialization function for texturecubehalf()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B7F0;
  *(void *)(v0 + 40) = 0xEF666C6168656275;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.texturecubehalf = v0;
  return result;
}

uint64_t static MaterialXDataType.texturecubehalf.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texturecubehalf);
}

double one-time initialization function for texturecubefloat()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B760;
  *(void *)(v0 + 40) = 0x800000025C424450;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.texturecubefloat = v0;
  return result;
}

uint64_t static MaterialXDataType.texturecubefloat.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texturecubefloat);
}

double one-time initialization function for texturecubeint()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B7F0;
  *(void *)(v0 + 40) = 0xEE00746E69656275;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.texturecubeint = v0;
  return result;
}

uint64_t *MaterialXDataType.texturecubeint.unsafeMutableAddressor()
{
  if (one-time initialization token for texturecubeint != -1) {
    swift_once();
  }
  return &static MaterialXDataType.texturecubeint;
}

uint64_t static MaterialXDataType.texturecubeint.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for texturecubeint);
}

uint64_t static MaterialXDataType.sampler.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for sampler);
}

double one-time initialization function for max_anisotropy()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B810;
  *(void *)(v0 + 40) = 0xEE0079706F72746FLL;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.max_anisotropy = v0;
  return result;
}

uint64_t static MaterialXDataType.max_anisotropy.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for max_anisotropy);
}

uint64_t static MaterialXDataType.lod_clamp.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for lod_clamp);
}

uint64_t static MaterialXDataType.bias.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for bias);
}

uint64_t static MaterialXDataType.level.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for level);
}

uint64_t static MaterialXDataType.gradient2d.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for gradient2d);
}

uint64_t static MaterialXDataType.gradient3d.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for gradient3d);
}

double one-time initialization function for gradientcube()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B850;
  *(void *)(v0 + 40) = 0xEC00000065627563;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.gradientcube = v0;
  return result;
}

uint64_t static MaterialXDataType.gradientcube.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for gradientcube);
}

uint64_t static MaterialXDataType.offset.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for offset);
}

double one-time initialization function for offset3()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B870;
  *(void *)(v0 + 40) = 0xE700000000000000;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.offset3 = v0;
  return result;
}

uint64_t static MaterialXDataType.offset3.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for offset3);
}

double one-time initialization function for min_lod_clamp()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B880;
  *(void *)(v0 + 40) = 0xED0000706D616C63;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.min_lod_clamp = v0;
  return result;
}

uint64_t static MaterialXDataType.min_lod_clamp.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for min_lod_clamp);
}

double one-time initialization function for realityKitHoverData()
{
  type metadata accessor for MaterialXDataType();
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_25C41B890;
  *(void *)(v0 + 40) = 0x800000025C424430;
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  static MaterialXDataType.realityKitHoverData = v0;
  return result;
}

uint64_t static MaterialXDataType.realityKitHoverData.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for realityKitHoverData);
}

uint64_t one-time initialization function for uAddressMode()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = swift_allocObject();
  strcpy((char *)(result + 32), "uaddressmode");
  *(unsigned char *)(result + 45) = 0;
  *(_WORD *)(result + 46) = -5120;
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  *(void *)(result + 24) = &outlined read-only object #0 of one-time initialization function for uAddressMode;
  static MaterialXDataType.uAddressMode = result;
  return result;
}

uint64_t static MaterialXDataType.uAddressMode.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uAddressMode);
}

uint64_t one-time initialization function for vAddressMode()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = swift_allocObject();
  strcpy((char *)(result + 32), "vaddressmode");
  *(unsigned char *)(result + 45) = 0;
  *(_WORD *)(result + 46) = -5120;
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  *(void *)(result + 24) = &outlined read-only object #0 of one-time initialization function for vAddressMode;
  static MaterialXDataType.vAddressMode = result;
  return result;
}

uint64_t static MaterialXDataType.vAddressMode.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for vAddressMode);
}

void *one-time initialization function for filterType()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x79747265746C6966;
  result[5] = 0xEA00000000006570;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for filterType;
  static MaterialXDataType.filterType = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.filterType.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for filterType);
}

void *one-time initialization function for blurFilterType()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x746C696672756C62;
  result[5] = 0xEA00000000007265;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for blurFilterType;
  static MaterialXDataType.blurFilterType = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.blurFilterType.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for blurFilterType);
}

uint64_t one-time initialization function for frameEndAction()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = swift_allocObject();
  strcpy((char *)(result + 32), "frameendaction");
  *(unsigned char *)(result + 47) = -18;
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  *(void *)(result + 24) = &outlined read-only object #0 of one-time initialization function for frameEndAction;
  static MaterialXDataType.frameEndAction = result;
  return result;
}

uint64_t static MaterialXDataType.frameEndAction.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for frameEndAction);
}

void *one-time initialization function for space()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x6563617073;
  result[5] = 0xE500000000000000;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for space;
  static MaterialXDataType.space = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.space.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for space);
}

void *one-time initialization function for normalMapSpace()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x6563617073;
  result[5] = 0xE500000000000000;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for normalMapSpace;
  static MaterialXDataType.normalMapSpace = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.normalMapSpace.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for normalMapSpace);
}

void *one-time initialization function for lumacoeffs()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x66656F63616D756CLL;
  result[5] = 0xEA00000000007366;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for lumacoeffs;
  static MaterialXDataType.lumacoeffs = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.lumacoeffs.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for lumacoeffs);
}

void *one-time initialization function for wrapS()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x5370617277;
  result[5] = 0xE500000000000000;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for wrapS;
  static MaterialXDataType.usd.wrapS = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.usd.wrapS.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for wrapS);
}

void *one-time initialization function for wrapT()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x5470617277;
  result[5] = 0xE500000000000000;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for wrapT;
  static MaterialXDataType.usd.wrapT = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.usd.wrapT.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for wrapT);
}

void *one-time initialization function for cubeimageFilterType()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x79747265746C6966;
  result[5] = 0xEA00000000006570;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for cubeimageFilterType;
  static MaterialXDataType.realitykit.cubeimageFilterType = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.cubeimageFilterType.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for cubeimageFilterType);
}

void *one-time initialization function for coord()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x64726F6F63;
  result[5] = 0xE500000000000000;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for coord;
  static MaterialXDataType.realitykit.coord = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.coord.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for coord);
}

void *one-time initialization function for addressMode()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x73736572646461;
  result[5] = 0xE700000000000000;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for addressMode;
  static MaterialXDataType.realitykit.addressMode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.addressMode.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for addressMode);
}

uint64_t one-time initialization function for pixelAddressMode()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = swift_allocObject();
  strcpy((char *)(result + 32), "pixel_address");
  *(_WORD *)(result + 46) = -4864;
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  *(void *)(result + 24) = &outlined read-only object #0 of one-time initialization function for pixelAddressMode;
  static MaterialXDataType.realitykit.pixelAddressMode = result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.pixelAddressMode.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for pixelAddressMode);
}

void *one-time initialization function for sAddressMode()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x7365726464615F73;
  result[5] = 0xE900000000000073;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for sAddressMode;
  static MaterialXDataType.realitykit.sAddressMode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.sAddressMode.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for sAddressMode);
}

void *one-time initialization function for tAddressMode()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x7365726464615F74;
  result[5] = 0xE900000000000073;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for tAddressMode;
  static MaterialXDataType.realitykit.tAddressMode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.tAddressMode.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for tAddressMode);
}

void *one-time initialization function for u_wrap_mode()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x6D5F706172775F75;
  result[5] = 0xEB0000000065646FLL;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for u_wrap_mode;
  static MaterialXDataType.realitykit.u_wrap_mode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.u_wrap_mode.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for u_wrap_mode);
}

void *one-time initialization function for v_wrap_mode()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x6D5F706172775F76;
  result[5] = 0xEB0000000065646FLL;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for v_wrap_mode;
  static MaterialXDataType.realitykit.v_wrap_mode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.v_wrap_mode.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for v_wrap_mode);
}

void *one-time initialization function for w_wrap_mode()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x6D5F706172775F77;
  result[5] = 0xEB0000000065646FLL;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for w_wrap_mode;
  static MaterialXDataType.realitykit.w_wrap_mode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.w_wrap_mode.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for w_wrap_mode);
}

void *one-time initialization function for rAddressMode()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x7365726464615F72;
  result[5] = 0xE900000000000073;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for rAddressMode;
  static MaterialXDataType.realitykit.rAddressMode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.rAddressMode.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for rAddressMode);
}

void *one-time initialization function for u_pixel_wrap_mode()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x6D5F706172775F75;
  result[5] = 0xEB0000000065646FLL;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for u_pixel_wrap_mode;
  static MaterialXDataType.realitykit.u_pixel_wrap_mode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.u_pixel_wrap_mode.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for u_pixel_wrap_mode);
}

void *one-time initialization function for v_pixel_wrap_mode()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x6D5F706172775F76;
  result[5] = 0xEB0000000065646FLL;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for v_pixel_wrap_mode;
  static MaterialXDataType.realitykit.v_pixel_wrap_mode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.v_pixel_wrap_mode.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for v_pixel_wrap_mode);
}

void *one-time initialization function for w_pixel_wrap_mode()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x6D5F706172775F77;
  result[5] = 0xEB0000000065646FLL;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for w_pixel_wrap_mode;
  static MaterialXDataType.realitykit.w_pixel_wrap_mode = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.w_pixel_wrap_mode.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for w_pixel_wrap_mode);
}

uint64_t one-time initialization function for borderColor()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = swift_allocObject();
  strcpy((char *)(result + 32), "border_color");
  *(unsigned char *)(result + 45) = 0;
  *(_WORD *)(result + 46) = -5120;
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  *(void *)(result + 24) = &outlined read-only object #0 of one-time initialization function for borderColor;
  static MaterialXDataType.realitykit.borderColor = result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.borderColor.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for borderColor);
}

void *one-time initialization function for filter()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x7265746C6966;
  result[5] = 0xE600000000000000;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for filter;
  static MaterialXDataType.realitykit.filter = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.filter.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for filter);
}

void *one-time initialization function for magFilter()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x746C69665F67616DLL;
  result[5] = 0xEA00000000007265;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for magFilter;
  static MaterialXDataType.realitykit.magFilter = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.magFilter.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for magFilter);
}

void *one-time initialization function for minFilter()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x746C69665F6E696DLL;
  result[5] = 0xEA00000000007265;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for minFilter;
  static MaterialXDataType.realitykit.minFilter = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.minFilter.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for minFilter);
}

void *one-time initialization function for mipFilter()
{
  type metadata accessor for MaterialXDataType();
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0x746C69665F70696DLL;
  result[5] = 0xEA00000000007265;
  result[2] = MEMORY[0x263F8EE78];
  result[3] = &outlined read-only object #0 of one-time initialization function for mipFilter;
  static MaterialXDataType.realitykit.mipFilter = (uint64_t)result;
  return result;
}

uint64_t static MaterialXDataType.realitykit.mipFilter.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for mipFilter);
}

uint64_t one-time initialization function for space()
{
  uint64_t result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0, 0, 0x70533A3A786C746DLL, 0xEB00000000656361, (uint64_t)&outlined read-only object #0 of one-time initialization function for space);
  static MetalDataType.MaterialX.space = result;
  return result;
}

uint64_t static MetalDataType.MaterialX.space.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for space);
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x270F9DBA0]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 16) = result + 1;
  uint64_t v5 = v4 + 16 * result;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = a3;
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 16) = a1 + 1;
  uint64_t v6 = *(void *)(type metadata accessor for NodeDef.Implementation(0) - 8);
  uint64_t v7 = v5
     + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(void *)(v6 + 72) * a1;
  return outlined init with take of NodeDef.Implementation(a2, v7);
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

{
  uint64_t v2;
  void *v4;
  size_t v5;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Edge>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 112);
  return v4;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x261183F90](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            uint64_t v23 = (int)v8 * (uint64_t)(int)a3;
            if (v23 != (int)v23) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__OFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            uint64_t v31 = (int)v28 * (uint64_t)(int)a3;
            if (v31 != (int)v31) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__OFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          unint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            uint64_t v14 = (int)v8 * (uint64_t)(int)a3;
            if (v14 != (int)v14) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (__OFSUB__(v14, v15)) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  int v3 = a2;
  uint64_t v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        unsigned __int8 v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned int v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned int v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              char v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  unsigned int v12 = -87;
                }
                else
                {
                  unsigned int v12 = -55;
                }
              }
              else
              {
                unsigned int v12 = -48;
              }
              unsigned __int8 v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              unint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      char v22 = a3 + 48;
      uint64_t v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        char v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        uint64_t v23 = 65;
      }
      if (result)
      {
        unsigned __int8 v25 = 0;
        do
        {
          unsigned __int8 v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              unsigned __int8 v27 = -87;
            }
            else
            {
              unsigned __int8 v27 = -55;
            }
          }
          else
          {
            unsigned __int8 v27 = -48;
          }
          unsigned int v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          unsigned __int8 v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  uint64_t v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    uint64_t v16 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  unsigned __int8 v18 = result + 1;
  do
  {
    unsigned __int8 v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        uint64_t v20 = -87;
      }
      else
      {
        uint64_t v20 = -55;
      }
    }
    else
    {
      uint64_t v20 = -48;
    }
    unsigned int v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    unint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      char v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        _StringObject.sharedUTF8.getter();
LABEL_4:
        JUMPOUT(0x261183F00);
      }
    }
    else
    {
      char v11 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x261183F00](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x261183F00]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

uint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return MEMORY[0x270F9D808](a1, a2, a3, a4);
  }
  __break(1u);
  return MEMORY[0x270F9D808](a1, a2, a3, a4);
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t specialized Float.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    char v6 = v9;
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      char v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (unint64_t v7 = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      char v6 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tgq507_sSRys4f5VGxs5E35_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TGq5SRyAGGSbsAD_pIgyrzo_Tf1cn_nTm(v4, v5, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      swift_bridgeObjectRelease();
    }
  }
  return (unint64_t)((v6 & 1) == 0) << 32;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tgq507_sSRys4f5VGxs5E35_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TGq5SRyAGGSbsAD_pIgyrzo_Tf1cn_nTm(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

Swift::String *specialized MaterialXDataType.__allocating_init(xmlElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  v4._uint64_t countAndFlagsBits = 1701869940;
  v4._unint64_t object = (void *)0xE400000000000000;
  Swift::String v6 = XMLElement.getRequiredAttribute(_:)(v4);
  uint64_t result = (Swift::String *)v6._countAndFlagsBits;
  if (!v7)
  {
    if ((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a2 + 16))(1836412517, 0xE400000000000000, ObjectType, a2)&& (uint64_t v9 = v8, v10 = swift_getObjectType(), (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v10, v9), v12 = v11, swift_unknownObjectRelease(), v12))
    {
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v13 = StringProtocol.components<A>(separatedBy:)();
      swift_bridgeObjectRelease();
      type metadata accessor for MaterialXDataType();
      uint64_t result = (Swift::String *)swift_allocObject();
    }
    else
    {
      type metadata accessor for MaterialXDataType();
      uint64_t result = (Swift::String *)swift_allocObject();
      uint64_t v13 = 0;
    }
    result[2] = v6;
    result[1]._uint64_t countAndFlagsBits = MEMORY[0x263F8EE78];
    result[1]._unint64_t object = (void *)v13;
  }
  return result;
}

uint64_t specialized Graph.appendSwizzleNode(to:resultType:channels:nodeDefStore:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v14 = a1[1];
  type metadata accessor for MaterialXDataType();
  uint64_t v15 = swift_dynamicCastClass();
  if (!v15)
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_((uint64_t)&v138);
    *(void *)&long long v144 = 0;
    *((void *)&v144 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(58);
    v22._uint64_t countAndFlagsBits = 0x742074757074754FLL;
    v22._unint64_t object = (void *)0xED00002720657079;
    String.append(_:)(v22);
    unint64_t v23 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 136);
    uint64_t v24 = swift_retain();
    v25._uint64_t countAndFlagsBits = v23(v24);
    String.append(_:)(v25);
    swift_release();
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v26._unint64_t object = (void *)0x800000025C424500;
    String.append(_:)(v26);
    long long v27 = v144;
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v138, (uint64_t)&v144);
    long long v156 = v27;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *unsigned int v28 = v144;
    long long v29 = v148;
    long long v31 = v145;
    long long v30 = v146;
    v28[3] = v147;
    v28[4] = v29;
    v28[1] = v31;
    void v28[2] = v30;
    long long v32 = v152;
    long long v34 = v149;
    long long v33 = v150;
    v28[7] = v151;
    v28[8] = v32;
    v28[5] = v34;
    v28[6] = v33;
    long long v35 = v156;
    long long v37 = v153;
    long long v36 = v154;
    v28[11] = v155;
    v28[12] = v35;
    v28[9] = v37;
    v28[10] = v36;
    return swift_willThrow();
  }
  uint64_t v16 = v15;
  if (*(void *)(v15 + 24))
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_((uint64_t)&v138);
    *(void *)&long long v144 = 0;
    *((void *)&v144 + 1) = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    *(void *)&long long v144 = 0x272065707954;
    *((void *)&v144 + 1) = 0xE600000000000000;
    unint64_t v17 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 136);
    uint64_t v18 = swift_retain();
    v19._uint64_t countAndFlagsBits = v17(v18);
    String.append(_:)(v19);
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v20 = 0xD000000000000021;
    uint64_t v21 = "' not supported as swizzle output";
LABEL_7:
    unint64_t v42 = (unint64_t)(v21 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v20);
    long long v43 = v144;
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v138, (uint64_t)&v144);
    long long v156 = v43;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *unint64_t v44 = v144;
    long long v45 = v148;
    long long v47 = v145;
    long long v46 = v146;
    v44[3] = v147;
    v44[4] = v45;
    v44[1] = v47;
    v44[2] = v46;
    long long v48 = v152;
    long long v50 = v149;
    long long v49 = v150;
    v44[7] = v151;
    v44[8] = v48;
    v44[5] = v50;
    v44[6] = v49;
    long long v51 = v156;
    long long v53 = v153;
    long long v52 = v154;
    v44[11] = v155;
    v44[12] = v51;
    v44[9] = v53;
    v44[10] = v52;
    swift_willThrow();
    return swift_release();
  }
  if (a2[3])
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_((uint64_t)&v138);
    *(void *)&long long v144 = 0;
    *((void *)&v144 + 1) = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    *(void *)&long long v144 = 0x272065707954;
    *((void *)&v144 + 1) = 0xE600000000000000;
    uint64_t v39 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 136);
    uint64_t v40 = swift_retain();
    v41._uint64_t countAndFlagsBits = v39(v40);
    String.append(_:)(v41);
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v20 = 0xD000000000000020;
    uint64_t v21 = "' not supported as swizzle input";
    goto LABEL_7;
  }
  v132 = a6;
  swift_retain();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  *(void *)&long long v144 = 0x7A7A6977735F444ELL;
  *((void *)&v144 + 1) = 0xEB000000005F656CLL;
  uint64_t v54 = *(void *)(v16 + 32);
  uint64_t v55 = *(void **)(v16 + 40);
  swift_bridgeObjectRetain();
  v56._uint64_t countAndFlagsBits = v54;
  v56._unint64_t object = v55;
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  v57._uint64_t countAndFlagsBits = 95;
  v57._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v57);
  uint64_t v58 = a2[4];
  uint64_t v59 = (void *)a2[5];
  swift_bridgeObjectRetain();
  v60._uint64_t countAndFlagsBits = v58;
  v60._unint64_t object = v59;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  long long v61 = v144;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  *(void *)&long long v144 = 0xD000000000000013;
  *((void *)&v144 + 1) = 0x800000025C424590;
  uint64_t v62 = a1[2];
  unint64_t v63 = (void *)a1[3];
  swift_bridgeObjectRetain();
  v64._uint64_t countAndFlagsBits = v62;
  v64._unint64_t object = v63;
  String.append(_:)(v64);
  swift_bridgeObjectRelease();
  v65._uint64_t countAndFlagsBits = 39;
  v65._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v65);
  if (!*(void *)(a5 + 16)) {
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)(v61, *((uint64_t *)&v61 + 1));
  if ((v67 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    long long v138 = v61;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi18_((uint64_t)&v138);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v138, (uint64_t)&v144);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v156 = 0uLL;
    swift_allocError();
    _OWORD *v80 = v144;
    long long v81 = v148;
    long long v83 = v145;
    long long v82 = v146;
    v80[3] = v147;
    v80[4] = v81;
    v80[1] = v83;
    v80[2] = v82;
    long long v84 = v152;
    long long v86 = v149;
    long long v85 = v150;
    v80[7] = v151;
    v80[8] = v84;
    v80[5] = v86;
    v80[6] = v85;
    long long v87 = v156;
    long long v89 = v153;
    long long v88 = v154;
    v80[11] = v155;
    v80[12] = v87;
    v80[9] = v89;
    v80[10] = v88;
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v68 = (_OWORD *)(*(void *)(a5 + 56) + 144 * v66);
  v191[0] = *v68;
  long long v69 = v68[4];
  long long v71 = v68[1];
  long long v70 = v68[2];
  v191[3] = v68[3];
  v191[4] = v69;
  v191[1] = v71;
  v191[2] = v70;
  long long v72 = v68[8];
  long long v74 = v68[5];
  long long v73 = v68[6];
  v191[7] = v68[7];
  v191[8] = v72;
  v191[5] = v74;
  v191[6] = v73;
  outlined retain of NodeDef((uint64_t)v191);
  swift_bridgeObjectRelease();
  specialized NodeDefStore.createNode(in:from:label:)(v137, v191, &v157);
  uint64_t v129 = *((void *)&v157 + 1);
  uint64_t v125 = v157;
  long long v126 = *(_OWORD *)v158;
  uint64_t v127 = *(void *)&v158[16];
  char v128 = v158[24];
  outlined release of NodeDef((uint64_t)v191);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for string != -1) {
    swift_once();
  }
  uint64_t v75 = static MaterialXDataType.string;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_25C418EE0;
  *(void *)(v76 + 32) = 7632239;
  *(void *)(v76 + 40) = 0xE300000000000000;
  *(void *)(v76 + 48) = v75;
  unint64_t v77 = swift_allocObject();
  *(void *)(v77 + 16) = a3;
  *(void *)(v77 + 24) = a4;
  *(_OWORD *)(v77 + 32) = 0u;
  *(_OWORD *)(v77 + 48) = 0u;
  *(_OWORD *)(v77 + 64) = 0u;
  *(unsigned char *)(v77 + 80) = 6;
  *(void *)(v77 + 88) = v75;
  unint64_t v78 = *(void *)(v137 + 40);
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v78, MEMORY[0x263F8EE78], v76, v77, v137 + 64, v137, &v159);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  ShaderGraphNode.out.getter((uint64_t)v162);
  if (v7)
  {
    outlined init with take of NodePersonality(&v159, &v192);
    outlined release of NodePersonality(&v192);
    uint64_t v184 = v160;
    outlined release of [Input]((uint64_t)&v184);
    uint64_t v183 = v161;
    outlined release of [Input]((uint64_t)&v183);
    outlined init with take of NodePersonality(&v157, &v182);
    outlined release of NodePersonality(&v182);
    uint64_t v181 = *((void *)&v157 + 1);
    outlined release of [Input]((uint64_t)&v181);
    uint64_t v180 = *(void *)v158;
    uint64_t v79 = &v180;
LABEL_36:
    outlined release of [Input]((uint64_t)v79);
    return swift_release();
  }
  uint64_t v179 = v129;
  uint64_t v90 = *(void *)(v129 + 16);
  if (!v90)
  {
LABEL_25:
    outlined init with take of NodePersonality(&v157, &v169);
    uint64_t v168 = *(void *)v158;
    *(void *)&long long v138 = v125;
    *((void *)&v138 + 1) = v129;
    long long v139 = v126;
    uint64_t v140 = v127;
    char v141 = v128;
    uint64_t v142 = 0x736C656E6E616863;
    unint64_t v143 = 0xE800000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v138);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v138, (uint64_t)&v144);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v156 = 0uLL;
    swift_allocError();
    _OWORD *v97 = v144;
    long long v98 = v148;
    long long v100 = v145;
    long long v99 = v146;
    v97[3] = v147;
    v97[4] = v98;
    v97[1] = v100;
    v97[2] = v99;
    long long v101 = v152;
    long long v103 = v149;
    long long v102 = v150;
    v97[7] = v151;
    v97[8] = v101;
    v97[5] = v103;
    v97[6] = v102;
    long long v104 = v156;
    long long v106 = v153;
    long long v105 = v154;
    v97[11] = v155;
    v97[12] = v104;
    v97[9] = v106;
    v97[10] = v105;
    outlined retain of [Input]((uint64_t)&v179);
    outlined retain of NodePersonality(&v169);
    outlined retain of [Input]((uint64_t)&v168);
    swift_willThrow();
    swift_release();
    long long v167 = v163;
    outlined release of String((uint64_t)&v167);
    outlined init with take of NodePersonality(&v159, &v166);
    outlined release of NodePersonality(&v166);
    uint64_t v165 = v160;
    outlined release of [Input]((uint64_t)&v165);
    uint64_t v164 = v161;
    outlined release of [Input]((uint64_t)&v164);
    outlined release of NodePersonality(&v169);
    outlined release of [Input]((uint64_t)&v179);
    uint64_t v79 = &v168;
    goto LABEL_36;
  }
  uint64_t v91 = (void *)(v129 + 80);
  while (1)
  {
    uint64_t v92 = *(v91 - 5);
    uint64_t v93 = *(v91 - 4);
    unint64_t v94 = *(v91 - 3);
    uint64_t v133 = *(v91 - 2);
    uint64_t v135 = *(v91 - 6);
    char v95 = *((unsigned char *)v91 - 8);
    uint64_t v130 = *v91;
    if (v93 == 0x736C656E6E616863 && v94 == 0xE800000000000000) {
      break;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      goto LABEL_27;
    }
    v91 += 7;
    if (!--v90) {
      goto LABEL_25;
    }
  }
  unint64_t v94 = 0xE800000000000000;
LABEL_27:
  v188[0] = v135;
  v188[1] = v92;
  v188[2] = v93;
  v188[3] = v94;
  v188[4] = v133;
  char v189 = v95;
  uint64_t v190 = v130;
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.connect(_:to:)((uint64_t)v162, (unint64_t)v188);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  long long v178 = v163;
  outlined release of String((uint64_t)&v178);
  uint64_t v107 = *(void *)(v129 + 16);
  if (!v107)
  {
LABEL_35:
    outlined init with take of NodePersonality(&v157, &v174);
    uint64_t v173 = *(void *)v158;
    *(void *)&long long v138 = v125;
    *((void *)&v138 + 1) = v129;
    long long v139 = v126;
    uint64_t v140 = v127;
    char v141 = v128;
    uint64_t v142 = 28265;
    unint64_t v143 = 0xE200000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v138);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v138, (uint64_t)&v144);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v156 = 0uLL;
    swift_allocError();
    _OWORD *v114 = v144;
    long long v115 = v148;
    long long v117 = v145;
    long long v116 = v146;
    v114[3] = v147;
    v114[4] = v115;
    v114[1] = v117;
    v114[2] = v116;
    long long v118 = v152;
    long long v120 = v149;
    long long v119 = v150;
    v114[7] = v151;
    v114[8] = v118;
    v114[5] = v120;
    v114[6] = v119;
    long long v121 = v156;
    long long v123 = v153;
    long long v122 = v154;
    v114[11] = v155;
    v114[12] = v121;
    v114[9] = v123;
    v114[10] = v122;
    outlined retain of [Input]((uint64_t)&v179);
    outlined retain of NodePersonality(&v174);
    outlined retain of [Input]((uint64_t)&v173);
    swift_willThrow();
    outlined init with take of NodePersonality(&v159, &v172);
    outlined release of NodePersonality(&v172);
    uint64_t v171 = v160;
    outlined release of [Input]((uint64_t)&v171);
    uint64_t v170 = v161;
    outlined release of [Input]((uint64_t)&v170);
    outlined release of NodePersonality(&v174);
    outlined release of [Input]((uint64_t)&v179);
    uint64_t v79 = &v173;
    goto LABEL_36;
  }
  char v108 = (void *)(v129 + 80);
  while (1)
  {
    uint64_t v109 = *(v108 - 5);
    uint64_t v110 = *(v108 - 4);
    unint64_t v111 = *(v108 - 3);
    uint64_t v134 = *(v108 - 2);
    uint64_t v136 = *(v108 - 6);
    char v112 = *((unsigned char *)v108 - 8);
    uint64_t v131 = *v108;
    if (v110 == 28265 && v111 == 0xE200000000000000) {
      break;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      goto LABEL_38;
    }
    v108 += 7;
    if (!--v107) {
      goto LABEL_35;
    }
  }
  unint64_t v111 = 0xE200000000000000;
LABEL_38:
  v185[0] = v136;
  v185[1] = v109;
  v185[2] = v110;
  v185[3] = v111;
  v185[4] = v134;
  char v186 = v112;
  uint64_t v187 = v131;
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.connect(_:to:)((uint64_t)a1, (unint64_t)v185);
  swift_bridgeObjectRelease();
  swift_release();
  outlined init with take of NodePersonality(&v159, &v177);
  outlined release of NodePersonality(&v177);
  uint64_t v176 = v160;
  outlined release of [Input]((uint64_t)&v176);
  uint64_t v175 = v161;
  outlined release of [Input]((uint64_t)&v175);
  uint64_t result = swift_release();
  long long v124 = *(_OWORD *)v158;
  _OWORD *v132 = v157;
  v132[1] = v124;
  *(_OWORD *)((char *)v132 + 25) = *(_OWORD *)&v158[9];
  return result;
}

void specialized closure #8 in createGraph(_:nodeDefStore:)(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *a1;
  uint64_t v10 = XMLNode.subscript.getter(0x656D616E65646F6ELL, 0xE800000000000000);
  if (!v11) {
    return;
  }
  uint64_t v12 = *a2;
  if (!*(void *)(*a2 + 16) || (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11), (v14 & 1) == 0))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
  swift_bridgeObjectRelease();
  if (v15 == -7) {
    return;
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v16 = *(void *)(a3 + 64);
  if (v15 >= *(void *)(v16 + 16))
  {
LABEL_51:
    __break(1u);
LABEL_52:
    swift_once();
LABEL_27:
    uint64_t v58 = type metadata accessor for Logger();
    __swift_project_value_buffer(v58, (uint64_t)logger);
    id v59 = v9;
    id v60 = v9;
    long long v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v61, v62))
    {
      unint64_t v63 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      uint64_t v126 = v64;
      *(_DWORD *)unint64_t v63 = 136315138;
      id v65 = v9;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v66 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, &v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_25C27E000, v61, v62, "Got error '%s'. Ignoring.", v63, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261185880](v64, -1, -1);
      MEMORY[0x261185880](v63, -1, -1);
    }
    else
    {
    }
    return;
  }
  uint64_t v17 = v16 + 48 * v15;
  unint64_t v18 = *(void *)(v17 + 32);
  uint64_t v19 = *(void *)(v17 + 40);
  uint64_t v20 = *(void *)(v17 + 48);
  uint64_t v117 = *(void *)(v17 + 64);
  uint64_t v118 = *(void *)(v17 + 56);
  char v116 = *(unsigned char *)(v17 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v18);
  uint64_t v21 = XMLNode.subscript.getter(0x74757074756FLL, 0xE600000000000000);
  uint64_t v121 = v19;
  uint64_t v114 = a3;
  if (v22)
  {
    uint64_t v23 = v21;
    uint64_t v24 = v22;
    char v112 = v5;
    uint64_t v113 = a4;
    unint64_t v120 = v18;
    uint64_t v122 = v20;
    uint64_t v25 = *(void *)(v20 + 16);
    if (!v25)
    {
LABEL_16:
      unint64_t v127 = v120;
      uint64_t v128 = v121;
      uint64_t v129 = v122;
      *(void *)&long long v130 = v118;
      *((void *)&v130 + 1) = v117;
      char v131 = v116;
      uint64_t v132 = v23;
      uint64_t v133 = v24;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v127);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v127, (uint64_t)&v134);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v146 = 0uLL;
      uint64_t v9 = (void *)swift_allocError();
      *long long v34 = v134;
      long long v35 = v138;
      long long v37 = v135;
      long long v36 = v136;
      v34[3] = v137;
      v34[4] = v35;
      v34[1] = v37;
      v34[2] = v36;
      long long v38 = v142;
      long long v40 = v139;
      long long v39 = v140;
      v34[7] = v141;
      v34[8] = v38;
      v34[5] = v40;
      v34[6] = v39;
      long long v41 = v146;
      long long v43 = v143;
      long long v42 = v144;
      v34[11] = v145;
      v34[12] = v41;
      v34[9] = v43;
      v34[10] = v42;
      swift_willThrow();
      goto LABEL_26;
    }
    Swift::String v26 = (void *)(v20 + 80);
    while (1)
    {
      uint64_t v27 = *(v26 - 5);
      uint64_t v125 = *(v26 - 6);
      uint64_t v29 = *(v26 - 4);
      uint64_t v28 = *(v26 - 3);
      uint64_t v30 = *(v26 - 2);
      char v123 = *((unsigned char *)v26 - 8);
      uint64_t v31 = *v26;
      if (v29 == v23 && v24 == v28) {
        break;
      }
      uint64_t v33 = v23;
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_21;
      }
      v26 += 7;
      --v25;
      uint64_t v23 = v33;
      if (!v25) {
        goto LABEL_16;
      }
    }
    uint64_t v29 = v23;
LABEL_21:
    uint64_t v45 = v27;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v5 = v112;
    uint64_t v48 = v31;
    uint64_t v46 = v30;
    uint64_t v44 = v125;
    char v47 = v123;
  }
  else
  {
    if (!*(void *)(v20 + 16))
    {
      outlined consume of NodePersonality(v18);
LABEL_45:
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
    uint64_t v113 = a4;
    unint64_t v120 = v18;
    uint64_t v44 = *(void *)(v20 + 32);
    uint64_t v45 = *(void *)(v20 + 40);
    uint64_t v29 = *(void *)(v20 + 48);
    uint64_t v28 = *(void *)(v20 + 56);
    uint64_t v46 = *(void *)(v20 + 64);
    char v47 = *(unsigned char *)(v20 + 72);
    uint64_t v48 = *(void *)(v20 + 80);
    swift_retain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  swift_bridgeObjectRetain();
  v161[0] = v44;
  v161[1] = v45;
  v161[2] = v29;
  v161[3] = v28;
  v161[4] = v46;
  char v124 = v47;
  char v162 = v47;
  uint64_t v163 = v48;
  swift_retain();
  uint64_t v49 = v28;
  swift_bridgeObjectRetain();
  uint64_t v50 = v29;
  uint64_t v51 = XMLNode.subscript.getter(1701869940, 0xE400000000000000);
  if (!v52)
  {
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Input?(v44, v45);
    outlined consume of NodePersonality(v120);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  uint64_t v53 = v51;
  uint64_t v54 = v52;
  uint64_t v109 = v46;
  uint64_t v110 = v45;
  uint64_t v111 = v49;
  type metadata accessor for MaterialXDataType();
  uint64_t v55 = (void *)swift_allocObject();
  v55[4] = v53;
  v55[5] = v54;
  _OWORD v55[2] = MEMORY[0x263F8EE78];
  v55[3] = 0;
  uint64_t v56 = XMLNode.subscript.getter(0x736C656E6E616863, 0xE800000000000000);
  if (v57)
  {
    specialized Graph.appendSwizzleNode(to:resultType:channels:nodeDefStore:)(v161, v55, v56, v57, v113, &v147);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of Input?(v44, v45);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_setDeallocating();
      swift_deallocClassInstance();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v120);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v9 = v5;
      goto LABEL_26;
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    ShaderGraphNode.out.getter((uint64_t)v149);
    swift_bridgeObjectRelease();
    swift_release();
    outlined init with take of NodePersonality(&v147, &v164);
    outlined release of NodePersonality(&v164);
    uint64_t v153 = *((void *)&v147 + 1);
    outlined release of [Input]((uint64_t)&v153);
    uint64_t v152 = v148;
    outlined release of [Input]((uint64_t)&v152);
    uint64_t v106 = v149[4];
    uint64_t v107 = v151;
    char v124 = v150;
    uint64_t v111 = v149[3];
    uint64_t v108 = v149[1];
    uint64_t v104 = v149[0];
    uint64_t v105 = v149[2];
    uint64_t v68 = v44;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v68 = v44;
    uint64_t v107 = v48;
    uint64_t v108 = v45;
    uint64_t v104 = v44;
    uint64_t v105 = v50;
    uint64_t v106 = v109;
  }
  uint64_t v69 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
  uint64_t v119 = v70;
  if (!v70)
  {
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Input?(v68, v45);
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_deallocClassInstance();
    outlined consume of NodePersonality(v120);
    goto LABEL_45;
  }
  uint64_t v71 = v69;
  unint64_t v73 = *(void *)(v114 + 128);
  uint64_t v72 = *(void *)(v114 + 136);
  uint64_t v74 = *(void *)(v114 + 144);
  long long v103 = *(_OWORD *)(v114 + 152);
  char v75 = *(unsigned char *)(v114 + 168);
  uint64_t v76 = *(void *)(v72 + 16);
  if (!v76)
  {
LABEL_42:
    unint64_t v127 = v73;
    uint64_t v128 = v72;
    uint64_t v129 = v74;
    long long v130 = v103;
    char v131 = v75;
    uint64_t v132 = v71;
    uint64_t v133 = v119;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v127);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v127, (uint64_t)&v134);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v146 = 0uLL;
    uint64_t v9 = (void *)swift_allocError();
    *long long v89 = v134;
    long long v90 = v138;
    long long v92 = v135;
    long long v91 = v136;
    v89[3] = v137;
    v89[4] = v90;
    v89[1] = v92;
    v89[2] = v91;
    long long v93 = v142;
    long long v95 = v139;
    long long v94 = v140;
    v89[7] = v141;
    v89[8] = v93;
    v89[5] = v95;
    v89[6] = v94;
    long long v96 = v146;
    long long v98 = v143;
    long long v97 = v144;
    v89[11] = v145;
    v89[12] = v96;
    v89[9] = v98;
    v89[10] = v97;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v73);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v73);
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Input?(v44, v110);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_deallocClassInstance();
    outlined consume of NodePersonality(v73);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v120);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_26:
    if (one-time initialization token for logger == -1) {
      goto LABEL_27;
    }
    goto LABEL_52;
  }
  char v99 = *(unsigned char *)(v114 + 168);
  unint64_t v101 = *(void *)(v114 + 128);
  uint64_t v102 = *(void *)(v114 + 144);
  uint64_t v100 = *(void *)(v114 + 136);
  unint64_t v77 = (void *)(v72 + 80);
  while (1)
  {
    uint64_t v79 = *(v77 - 6);
    uint64_t v78 = *(v77 - 5);
    uint64_t v81 = *(v77 - 4);
    uint64_t v80 = *(v77 - 3);
    uint64_t v82 = *(v77 - 2);
    char v83 = *((unsigned char *)v77 - 8);
    uint64_t v84 = *v77;
    if (v81 == v71 && v119 == v80) {
      break;
    }
    uint64_t v115 = *v77;
    uint64_t v86 = *(v77 - 5);
    uint64_t v87 = *(v77 - 3);
    uint64_t v88 = v71;
    if (_stringCompareWithSmolCheck(_:_:expecting:)())
    {
      uint64_t v71 = v81;
      uint64_t v78 = v86;
      uint64_t v80 = v87;
      uint64_t v84 = v115;
      break;
    }
    v77 += 7;
    --v76;
    uint64_t v71 = v88;
    if (!v76)
    {
      uint64_t v154 = v79;
      uint64_t v155 = v86;
      uint64_t v156 = v81;
      uint64_t v157 = v87;
      uint64_t v158 = v82;
      char v159 = v83;
      uint64_t v160 = v115;
      uint64_t v72 = v100;
      unint64_t v73 = v101;
      uint64_t v74 = v102;
      char v75 = v99;
      goto LABEL_42;
    }
  }
  uint64_t v154 = v79;
  uint64_t v155 = v78;
  uint64_t v156 = v71;
  uint64_t v157 = v80;
  uint64_t v158 = v82;
  char v159 = v83;
  uint64_t v160 = v84;
  *(void *)&long long v134 = v104;
  *((void *)&v134 + 1) = v108;
  *(void *)&long long v135 = v105;
  *((void *)&v135 + 1) = v111;
  *(void *)&long long v136 = v106;
  BYTE8(v136) = v124;
  *(void *)&long long v137 = v107;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Graph.connect(_:to:)((uint64_t)&v134, (unint64_t)&v154);
  outlined consume of Input?(v44, v110);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_deallocClassInstance();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of NodePersonality(v120);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t specialized SGDataTypeStorage.init(materialXValue:type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  v227.i64[0] = a2;
  v228.i64[0] = a1;
  uint64_t v8 = (uint64_t)&v235;
  uint64_t v9 = type metadata accessor for CharacterSet();
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (uint64_t)&v220 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = *(void **)(a3 + 24);
  if (v13)
  {
    uint64_t v225 = a4;
    uint64_t v226 = (uint64_t *)a3;
    uint64_t v14 = v13[2];
    if (!v14) {
      goto LABEL_29;
    }
    a4 = v4;
    uint64_t v8 = v228.i64[0];
    uint64_t v15 = v227.i64[0];
    BOOL v16 = v13[4] == v228.i64[0] && v13[5] == v227.i64[0];
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t result = swift_release();
      uint64_t v18 = 0;
      int8x16_t v19 = 0uLL;
      int64x2_t v20 = (int64x2_t)(unint64_t)v15;
      goto LABEL_9;
    }
    if (v14 == 1)
    {
LABEL_29:
      long long v231 = 0u;
      memset(v232, 0, sizeof(v232));
      uint64_t v34 = v228.i64[0];
      uint64_t v35 = v227.i64[0];
      uint64_t v233 = v228.i64[0];
      uint64_t v234 = v227.i64[0];
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v231);
      *(void *)&long long v235 = 0;
      *((void *)&v235 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      *(void *)&long long v235 = v34;
      *((void *)&v235 + 1) = v35;
      v36._uint64_t countAndFlagsBits = 0x20746F6E20736920;
      v36._unint64_t object = (void *)0xEF20666F20656E6FLL;
      String.append(_:)(v36);
      v37._uint64_t countAndFlagsBits = MEMORY[0x261184160](v13, MEMORY[0x263F8D310]);
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v38 = v235;
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v231, (uint64_t)&v235);
      long long v247 = v38;
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      swift_allocError();
      *long long v39 = v235;
      long long v40 = v239;
      long long v42 = v236;
      long long v41 = v237;
      v39[3] = v238;
      v39[4] = v40;
      v39[1] = v42;
      v39[2] = v41;
      long long v43 = v243;
      long long v45 = v240;
      long long v44 = v241;
      v39[7] = v242;
      v39[8] = v43;
      v39[5] = v45;
      v39[6] = v44;
      long long v46 = v246;
      long long v47 = v247;
      long long v49 = v244;
      long long v48 = v245;
      goto LABEL_30;
    }
    uint64_t v9 = (uint64_t)(v13 + 7);
    uint64_t v12 = 1;
    uint64_t v8 = v228.i64[0];
    a3 = v227.i64[0];
    while (1)
    {
      uint64_t v5 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        break;
      }
      if (*(void *)(v9 - 8) == v8 && *(void *)v9 == a3)
      {
        uint64_t result = swift_release();
        uint64_t v18 = 0;
        int8x16_t v19 = 0uLL;
        int64x2_t v20 = (int64x2_t)(unint64_t)a3;
LABEL_9:
        char v21 = 6;
        int64x2_t v22 = 0uLL;
        a4 = v225;
LABEL_50:
        *(void *)a4 = v8;
        *(int64x2_t *)(a4 + 8) = v20;
        *(int8x16_t *)(a4 + 24) = v19;
        *(int64x2_t *)(a4 + 40) = v22;
        *(void *)(a4 + 56) = v18;
        *(unsigned char *)(a4 + 64) = v21;
        return result;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_56;
      }
      v9 += 16;
      ++v12;
      if (v5 == v14) {
        goto LABEL_29;
      }
    }
    __break(1u);
  }
  else
  {
    unint64_t v13 = v10;
    uint64_t v23 = one-time initialization token for BOOLean;
    swift_retain();
    if (v23 == -1) {
      goto LABEL_11;
    }
  }
  swift_once();
LABEL_11:
  char v24 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v24)
  {
    uint64_t v25 = v228.i64[0];
    uint64_t v26 = v227.i64[0];
    if (v228.i64[0] == 1702195828 && v227.i64[0] == 0xE400000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      uint64_t v18 = 0;
      char v21 = 0;
      int64x2_t v20 = 0uLL;
      uint64_t v8 = 1;
      goto LABEL_48;
    }
    if (v25 == 0x65736C6166 && v26 == 0xE500000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      uint64_t v8 = 0;
      uint64_t v18 = 0;
      char v21 = 0;
      int64x2_t v20 = 0uLL;
      goto LABEL_48;
    }
    long long v231 = 0u;
    memset(v232, 0, sizeof(v232));
    uint64_t v233 = v25;
    goto LABEL_80;
  }
  uint64_t v27 = one-time initialization token for integer;
  swift_retain();
  if (v27 != -1) {
    swift_once();
  }
  char v28 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v28)
  {
    unint64_t v29 = v227.i64[0];
    swift_bridgeObjectRetain();
    uint64_t v30 = v228.i64[0];
    uint64_t v31 = specialized FixedWidthInteger.init(_:)(v228.i64[0], v29);
    if ((v31 & 0x100000000) == 0)
    {
      unsigned int v32 = v31;
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      uint64_t v18 = 0;
      uint64_t v8 = v32;
      int64x2_t v20 = 0uLL;
      char v21 = 2;
LABEL_48:
      int8x16_t v19 = 0uLL;
      goto LABEL_49;
    }
    long long v231 = 0u;
    memset(v232, 0, sizeof(v232));
    uint64_t v233 = v30;
    uint64_t v234 = v29;
LABEL_81:
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v231);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v231, (uint64_t)&v235);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    *(void *)(v8 + 192) = 0;
    *(void *)(v8 + 200) = 0;
    swift_allocError();
    *uint64_t v74 = *(_OWORD *)v8;
    long long v75 = *(_OWORD *)(v8 + 64);
    long long v77 = *(_OWORD *)(v8 + 16);
    long long v76 = *(_OWORD *)(v8 + 32);
    v74[3] = *(_OWORD *)(v8 + 48);
    v74[4] = v75;
    v74[1] = v77;
    v74[2] = v76;
    long long v78 = *(_OWORD *)(v8 + 128);
    long long v80 = *(_OWORD *)(v8 + 80);
    long long v79 = *(_OWORD *)(v8 + 96);
    v74[7] = *(_OWORD *)(v8 + 112);
    v74[8] = v78;
    v74[5] = v80;
    v74[6] = v79;
    long long v81 = *(_OWORD *)(v8 + 192);
    long long v83 = *(_OWORD *)(v8 + 144);
    long long v82 = *(_OWORD *)(v8 + 160);
    v74[11] = *(_OWORD *)(v8 + 176);
    v74[12] = v81;
    v74[9] = v83;
    v74[10] = v82;
    swift_willThrow();
    return swift_release();
  }
  uint64_t v50 = one-time initialization token for integer2;
  swift_retain();
  if (v50 != -1) {
    swift_once();
  }
  char v51 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v51)
  {
    specialized SIMD<>.init(_:)(v228.i64[0], v227.i64[0]);
    uint64_t v53 = v52;
    uint64_t result = swift_release();
    uint64_t v18 = 0;
    uint64_t v8 = v53;
    int64x2_t v20 = 0uLL;
    char v21 = 13;
    goto LABEL_48;
  }
  uint64_t v54 = one-time initialization token for integer3;
  swift_retain();
  if (v54 != -1) {
    swift_once();
  }
  char v55 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v55)
  {
    specialized SIMD<>.init(_:)(v228.i64[0], v227.i64[0], (double (*)(uint64_t))specialized SIMD.init<A>(_:));
    int64x2_t v228 = v56;
    uint64_t result = swift_release();
    uint64_t v18 = 0;
    uint64_t v8 = v228.i64[0];
    int8x16_t v19 = 0uLL;
    int64x2_t v20 = vzip2q_s64(v228, (int64x2_t)0);
    char v21 = 14;
LABEL_49:
    int64x2_t v22 = 0uLL;
    goto LABEL_50;
  }
  uint64_t v57 = one-time initialization token for integer4;
  swift_retain();
  if (v57 != -1) {
    swift_once();
  }
  char v58 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v58)
  {
    specialized SIMD<>.init(_:)(v228.i64[0], v227.i64[0], (double (*)(uint64_t))specialized SIMD.init<A>(_:));
    int64x2_t v228 = v59;
    uint64_t result = swift_release();
    uint64_t v18 = 0;
    uint64_t v8 = v228.i64[0];
    int8x16_t v19 = 0uLL;
    int64x2_t v20 = vzip2q_s64(v228, (int64x2_t)0);
    char v21 = 15;
    goto LABEL_49;
  }
  uint64_t v60 = one-time initialization token for float;
  swift_retain();
  if (v60 != -1) {
    swift_once();
  }
  char v61 = MaterialXDataType.isEqual(to:)();
  uint64_t v62 = swift_release();
  if (v61)
  {
    LODWORD(v230) = 0;
    uint64_t v63 = MEMORY[0x270FA5388](v62);
    *(&v220 - 2) = (uint64_t)&v230;
    uint64_t v26 = v227.i64[0];
    if ((v227.i64[0] & 0x1000000000000000) != 0
      || !(v227.i64[0] & 0x2000000000000000 | v228.i64[0] & 0x1000000000000000))
    {
      swift_bridgeObjectRetain();
      _StringGuts._slowWithCString<A>(_:)();
      swift_bridgeObjectRelease();
      if ((v231 & 1) == 0) {
        goto LABEL_79;
      }
    }
    else
    {
      MEMORY[0x270FA5388](v63);
      *(&v220 - 2) = (uint64_t)partial apply for closure #1 in closure #1 in Float.init<A>(_:);
      *(&v220 - 1) = (uint64_t)(&v220 - 4);
      if ((v26 & 0x2000000000000000) == 0)
      {
        uint64_t v226 = &v220;
        uint64_t v26 = v227.i64[0];
        if ((v228.i64[0] & 0x1000000000000000) != 0)
        {
          uint64_t v64 = (v227.i64[0] & 0xFFFFFFFFFFFFFFFLL) + 32;
          uint64_t v65 = v228.i64[0] & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v64 = _StringObject.sharedUTF8.getter();
          uint64_t v65 = v174;
        }
        swift_bridgeObjectRetain();
        char v66 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tgq507_sSRys4f5VGxs5E35_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TGq5SRyAGGSbsAD_pIgyrzo_Tf1cn_nTm(v64, v65, (void (*)(uint64_t *__return_ptr))closure #1 in _StringGuts.withCString<A>(_:)specialized partial apply);
        swift_bridgeObjectRelease();
        if (v66) {
          goto LABEL_67;
        }
LABEL_79:
        long long v231 = 0u;
        memset(v232, 0, sizeof(v232));
        uint64_t v233 = v228.i64[0];
LABEL_80:
        uint64_t v234 = v26;
        goto LABEL_81;
      }
      unsigned __int8 v73 = v228.i8[0];
      *(void *)uint64_t v8 = v228.i64[0];
      *(void *)(v8 + 8) = v26 & 0xFFFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain();
      if (v73 <= 0x20u && ((1 << v73) & 0x100003E01) != 0
        || (char v99 = (unsigned __int8 *)_swift_stdlib_strtof_clocale()) == 0)
      {
        uint64_t v26 = v227.i64[0];
        swift_bridgeObjectRelease();
        goto LABEL_79;
      }
      int v100 = *v99;
      uint64_t v26 = v227.i64[0];
      swift_bridgeObjectRelease();
      if (v100) {
        goto LABEL_79;
      }
    }
LABEL_67:
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    uint64_t v18 = 0;
    uint64_t v8 = v230;
    int64x2_t v20 = 0uLL;
    char v21 = 5;
    goto LABEL_48;
  }
  uint64_t v67 = one-time initialization token for color3;
  swift_retain();
  if (v67 != -1) {
    swift_once();
  }
  char v68 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v68) {
    goto LABEL_71;
  }
  uint64_t v70 = one-time initialization token for color4;
  swift_retain();
  if (v70 != -1) {
    swift_once();
  }
  char v71 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v71)
  {
    specialized SIMD<>.init(_:)(v228.i64[0], v227.i64[0], (double (*)(void))specialized SIMD.init<A>(_:));
    int64x2_t v228 = v72;
    uint64_t result = swift_release();
    uint64_t v18 = 0;
    uint64_t v8 = v228.i64[0];
    int8x16_t v19 = 0uLL;
    int64x2_t v20 = vzip2q_s64(v228, (int64x2_t)0);
    char v21 = 9;
    goto LABEL_49;
  }
  uint64_t v84 = one-time initialization token for vector2;
  swift_retain();
  if (v84 != -1) {
    swift_once();
  }
  char v85 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v85) {
    goto LABEL_88;
  }
  uint64_t v86 = one-time initialization token for float2;
  swift_retain();
  if (v86 != -1) {
    swift_once();
  }
  char v87 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v87)
  {
LABEL_88:
    specialized SIMD<>.init(_:)(v228.i64[0], v227.i64[0]);
    uint64_t v89 = v88;
    uint64_t result = swift_release();
    uint64_t v18 = 0;
    uint64_t v8 = v89;
    int64x2_t v20 = 0uLL;
    char v21 = 7;
    goto LABEL_48;
  }
  uint64_t v90 = one-time initialization token for vector3;
  swift_retain();
  if (v90 != -1) {
    swift_once();
  }
  char v91 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v91) {
    goto LABEL_71;
  }
  uint64_t v92 = one-time initialization token for float3;
  swift_retain();
  if (v92 != -1) {
    swift_once();
  }
  char v93 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v93)
  {
LABEL_71:
    specialized SIMD<>.init(_:)(v228.i64[0], v227.i64[0], (double (*)(void))specialized SIMD.init<A>(_:));
    int64x2_t v228 = v69;
    uint64_t result = swift_release();
    uint64_t v18 = 0;
    uint64_t v8 = v228.i64[0];
    int8x16_t v19 = 0uLL;
    int64x2_t v20 = vzip2q_s64(v228, (int64x2_t)0);
    char v21 = 8;
    goto LABEL_49;
  }
  uint64_t v224 = v5;
  uint64_t v225 = a4;
  uint64_t v94 = one-time initialization token for vector4;
  swift_retain();
  if (v94 != -1) {
    swift_once();
  }
  char v95 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v95) {
    goto LABEL_101;
  }
  uint64_t v96 = one-time initialization token for float4;
  uint64_t v226 = (uint64_t *)a3;
  swift_retain();
  if (v96 != -1) {
    swift_once();
  }
  char v97 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if (v97)
  {
LABEL_101:
    specialized SIMD<>.init(_:)(v228.i64[0], v227.i64[0], (double (*)(void))specialized SIMD.init<A>(_:));
    int64x2_t v228 = v98;
    uint64_t result = swift_release();
    uint64_t v18 = 0;
    uint64_t v8 = v228.i64[0];
    int8x16_t v19 = 0uLL;
    int64x2_t v20 = vzip2q_s64(v228, (int64x2_t)0);
    char v21 = 9;
LABEL_102:
    int64x2_t v22 = 0uLL;
LABEL_103:
    a4 = v225;
    goto LABEL_50;
  }
  uint64_t v101 = one-time initialization token for matrix22;
  swift_retain();
  if (v101 != -1) {
    swift_once();
  }
  char v102 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v102 & 1) == 0)
  {
    uint64_t v115 = one-time initialization token for matrix33;
    swift_retain();
    if (v115 != -1) {
      swift_once();
    }
    char v116 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v116 & 1) == 0)
    {
      uint64_t v128 = one-time initialization token for matrix44;
      swift_retain();
      if (v128 == -1) {
        goto LABEL_133;
      }
      goto LABEL_281;
    }
    *(void *)&long long v235 = v228.i64[0];
    *((void *)&v235 + 1) = v227.i64[0];
    *(void *)&long long v231 = 44;
    *((void *)&v231 + 1) = 0xE100000000000000;
    v223.i64[0] = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v117 = StringProtocol.components<A>(separatedBy:)();
    swift_bridgeObjectRelease();
    uint64_t v221 = v117;
    int64_t v118 = *(void *)(v117 + 16);
    if (v118)
    {
      *(void *)&long long v231 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v118, 0);
      v222.i64[0] = (uint64_t)(v13 + 1);
      uint64_t v119 = (uint64_t *)(v221 + 40);
      do
      {
        uint64_t v120 = *v119;
        *(void *)&long long v235 = *(v119 - 1);
        *((void *)&v235 + 1) = v120;
        swift_bridgeObjectRetain();
        static CharacterSet.whitespacesAndNewlines.getter();
        v228.i64[0] = StringProtocol.trimmingCharacters(in:)();
        v227.i64[0] = v121;
        (*(void (**)(uint64_t, uint64_t))v222.i64[0])(v12, v9);
        swift_bridgeObjectRelease();
        uint64_t v122 = (void *)v231;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v122[2] + 1, 1);
          uint64_t v122 = (void *)v231;
        }
        unint64_t v124 = v122[2];
        unint64_t v123 = v122[3];
        if (v124 >= v123 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v123 > 1, v124 + 1, 1);
          uint64_t v122 = (void *)v231;
        }
        v119 += 2;
        v122[2] = v124 + 1;
        uint64_t v125 = &v122[2 * v124];
        uint64_t v126 = v227.i64[0];
        v125[4] = v228.i64[0];
        v125[5] = v126;
        --v118;
      }
      while (v118);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v122 = (void *)MEMORY[0x263F8EE78];
    }
    int64_t v157 = v122[2];
    if (v157)
    {
      char v230 = (void *)MEMORY[0x263F8EE78];
      uint64_t isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v157, 0);
      char v159 = v122 + 5;
      while (1)
      {
        uint64_t v9 = *(v159 - 1);
        uint64_t v142 = *v159;
        int v229 = 0;
        MEMORY[0x270FA5388](isUniquelyReferenced_nonNull_native);
        *(&v220 - 2) = (uint64_t)&v229;
        if ((v142 & 0x1000000000000000) != 0 || !(v142 & 0x2000000000000000 | v9 & 0x1000000000000000))
        {
          swift_bridgeObjectRetain_n();
          uint64_t v169 = v224;
          _StringGuts._slowWithCString<A>(_:)();
          uint64_t v224 = v169;
        }
        else
        {
          if ((v142 & 0x2000000000000000) != 0)
          {
            *(void *)&long long v235 = v9;
            *((void *)&v235 + 1) = v142 & 0xFFFFFFFFFFFFFFLL;
            switch((char)v9)
            {
              case 0:
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 32:
                swift_bridgeObjectRetain_n();
                goto LABEL_198;
              default:
                swift_bridgeObjectRetain_n();
                uint64_t v168 = (unsigned char *)_swift_stdlib_strtof_clocale();
                if (v168) {
                  BOOL v162 = *v168 == 0;
                }
                else {
LABEL_198:
                }
                  BOOL v162 = 0;
                LOBYTE(v231) = v162;
                swift_bridgeObjectRelease();
                break;
            }
            goto LABEL_200;
          }
          if ((v9 & 0x1000000000000000) != 0) {
            uint64_t v160 = (unsigned char *)((v142 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else {
            uint64_t v160 = (unsigned char *)_StringObject.sharedUTF8.getter();
          }
          switch(*v160)
          {
            case 0:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
            case 0x20:
              swift_bridgeObjectRetain_n();
              goto LABEL_193;
            default:
              swift_bridgeObjectRetain_n();
              long long v167 = (unsigned char *)_swift_stdlib_strtof_clocale();
              if (v167) {
                BOOL v161 = *v167 == 0;
              }
              else {
LABEL_193:
              }
                BOOL v161 = 0;
              LOBYTE(v231) = v161;
              break;
          }
        }
        swift_bridgeObjectRelease();
LABEL_200:
        if ((v231 & 1) == 0) {
          goto LABEL_253;
        }
        swift_bridgeObjectRelease();
        int v163 = v229;
        unint64_t v164 = v230;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v164[2] + 1, 1);
          unint64_t v164 = v230;
        }
        unint64_t v166 = v164[2];
        unint64_t v165 = v164[3];
        if (v166 >= v165 >> 1)
        {
          uint64_t isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v165 > 1, v166 + 1, 1);
          unint64_t v164 = v230;
        }
        v159 += 2;
        v164[2] = v166 + 1;
        *((_DWORD *)v164 + v166 + 8) = v163;
        if (!--v157)
        {
          swift_bridgeObjectRelease();
          goto LABEL_214;
        }
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v164 = (void *)MEMORY[0x263F8EE78];
LABEL_214:
    unint64_t v170 = v164[2];
    if (v170 < 3)
    {
      __break(1u);
    }
    else
    {
      specialized SIMD.init<A>(_:)((uint64_t)(v164 + 4), 0, 7uLL);
      int64x2_t v228 = v171;
      if (v170 >= 6)
      {
        specialized SIMD.init<A>(_:)((uint64_t)(v164 + 4), 3, 0xDuLL);
        int8x16_t v227 = v172;
        if (v170 >= 9)
        {
          specialized SIMD.init<A>(_:)((uint64_t)(v164 + 4), 6, 0x13uLL);
          int8x16_t v223 = v173;
          swift_release();
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v18 = 0;
          uint64_t v8 = v228.i64[0];
          int64x2_t v20 = (int64x2_t)vextq_s8((int8x16_t)v228, v227, 8uLL);
          int8x16_t v19 = vextq_s8(v227, v223, 8uLL);
          int64x2_t v22 = vzip2q_s64((int64x2_t)v223, (int64x2_t)0);
          char v21 = 17;
          goto LABEL_103;
        }
        goto LABEL_284;
      }
    }
    __break(1u);
LABEL_284:
    __break(1u);
LABEL_285:
    swift_once();
LABEL_181:
    char v156 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if (v156)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      uint64_t v8 = 0;
      uint64_t v18 = 0;
      int64x2_t v20 = 0uLL;
      char v21 = 4;
LABEL_268:
      int8x16_t v19 = 0uLL;
      goto LABEL_102;
    }
    uint64_t v175 = one-time initialization token for half2;
    swift_retain();
    if (v175 == -1) {
      goto LABEL_220;
    }
    goto LABEL_290;
  }
  *(void *)&long long v235 = v228.i64[0];
  *((void *)&v235 + 1) = v227.i64[0];
  *(void *)&long long v231 = 44;
  *((void *)&v231 + 1) = 0xE100000000000000;
  v228.i64[0] = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v103 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  v223.i64[0] = v103;
  int64_t v104 = *(void *)(v103 + 16);
  if (v104)
  {
    *(void *)&long long v231 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v104, 0);
    v227.i64[0] = (uint64_t)(v13 + 1);
    uint64_t v105 = (uint64_t *)(v223.i64[0] + 40);
    do
    {
      uint64_t v106 = *v105;
      *(void *)&long long v235 = *(v105 - 1);
      *((void *)&v235 + 1) = v106;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      uint64_t v107 = StringProtocol.trimmingCharacters(in:)();
      uint64_t v109 = v108;
      (*(void (**)(uint64_t, uint64_t))v227.i64[0])(v12, v9);
      swift_bridgeObjectRelease();
      uint64_t v110 = v231;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v111 = v110;
      }
      else
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v110 + 16) + 1, 1);
        uint64_t v111 = v231;
      }
      unint64_t v113 = *(void *)(v111 + 16);
      unint64_t v112 = *(void *)(v111 + 24);
      unint64_t v13 = (void *)(v113 + 1);
      if (v113 >= v112 >> 1)
      {
        v222.i64[0] = v107;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v112 > 1, v113 + 1, 1);
        uint64_t v107 = v222.i64[0];
        uint64_t v111 = v231;
      }
      v105 += 2;
      *(void *)(v111 + 16) = v13;
      uint64_t v114 = v111 + 16 * v113;
      *(void *)(v114 + 32) = v107;
      *(void *)(v114 + 40) = v109;
      --v104;
    }
    while (v104);
    uint64_t v127 = v111;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v127 = MEMORY[0x263F8EE78];
  }
  int64_t v140 = *(void *)(v127 + 16);
  if (v140)
  {
    char v230 = (void *)MEMORY[0x263F8EE78];
    uint64_t v141 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v140, 0);
    uint64_t v12 = v127 + 40;
    while (1)
    {
      uint64_t v9 = *(void *)(v12 - 8);
      uint64_t v142 = *(void *)v12;
      int v229 = 0;
      MEMORY[0x270FA5388](v141);
      *(&v220 - 2) = (uint64_t)&v229;
      if ((v142 & 0x1000000000000000) != 0 || !(v142 & 0x2000000000000000 | v9 & 0x1000000000000000))
      {
        swift_bridgeObjectRetain_n();
        uint64_t v152 = v224;
        _StringGuts._slowWithCString<A>(_:)();
        uint64_t v224 = v152;
      }
      else
      {
        if ((v142 & 0x2000000000000000) != 0)
        {
          *(void *)&long long v235 = v9;
          *((void *)&v235 + 1) = v142 & 0xFFFFFFFFFFFFFFLL;
          switch((char)v9)
          {
            case 0:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
              swift_bridgeObjectRetain_n();
              goto LABEL_159;
            default:
              swift_bridgeObjectRetain_n();
              uint64_t v151 = (unsigned char *)_swift_stdlib_strtof_clocale();
              if (v151) {
                BOOL v145 = *v151 == 0;
              }
              else {
LABEL_159:
              }
                BOOL v145 = 0;
              LOBYTE(v231) = v145;
              swift_bridgeObjectRelease();
              break;
          }
          goto LABEL_161;
        }
        if ((v9 & 0x1000000000000000) != 0) {
          long long v143 = (unsigned char *)((v142 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else {
          long long v143 = (unsigned char *)_StringObject.sharedUTF8.getter();
        }
        switch(*v143)
        {
          case 0:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0x20:
            swift_bridgeObjectRetain_n();
            goto LABEL_154;
          default:
            swift_bridgeObjectRetain_n();
            char v150 = (unsigned char *)_swift_stdlib_strtof_clocale();
            if (v150) {
              BOOL v144 = *v150 == 0;
            }
            else {
LABEL_154:
            }
              BOOL v144 = 0;
            LOBYTE(v231) = v144;
            break;
        }
      }
      swift_bridgeObjectRelease();
LABEL_161:
      if ((v231 & 1) == 0) {
        goto LABEL_253;
      }
      swift_bridgeObjectRelease();
      int v146 = v229;
      long long v147 = v230;
      uint64_t v141 = swift_isUniquelyReferenced_nonNull_native();
      if ((v141 & 1) == 0)
      {
        uint64_t v141 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v147[2] + 1, 1);
        long long v147 = v230;
      }
      unint64_t v149 = v147[2];
      unint64_t v148 = v147[3];
      unint64_t v13 = (void *)(v149 + 1);
      if (v149 >= v148 >> 1)
      {
        uint64_t v141 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v148 > 1, v149 + 1, 1);
        long long v147 = v230;
      }
      v12 += 16;
      v147[2] = v13;
      *((_DWORD *)v147 + v149 + 8) = v146;
      if (!--v140)
      {
        swift_bridgeObjectRelease();
        goto LABEL_175;
      }
    }
  }
  swift_bridgeObjectRelease();
  long long v147 = (void *)MEMORY[0x263F8EE78];
LABEL_175:
  unint64_t v154 = v147[2];
  if (!v154)
  {
    __break(1u);
    goto LABEL_278;
  }
  if (v154 == 1)
  {
LABEL_278:
    __break(1u);
    goto LABEL_279;
  }
  if (v154 >= 3)
  {
    if (v154 != 3)
    {
      uint64_t v8 = v147[4];
      v153.i64[0] = v147[5];
      int64x2_t v228 = v153;
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      int64x2_t v20 = v228;
      uint64_t v18 = 0;
      int8x16_t v19 = 0uLL;
      char v21 = 16;
      goto LABEL_102;
    }
    goto LABEL_280;
  }
LABEL_279:
  __break(1u);
LABEL_280:
  __break(1u);
LABEL_281:
  swift_once();
LABEL_133:
  char v129 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v129 & 1) == 0)
  {
    uint64_t v155 = one-time initialization token for half;
    swift_retain();
    if (v155 == -1) {
      goto LABEL_181;
    }
    goto LABEL_285;
  }
  *(void *)&long long v235 = v228.i64[0];
  *((void *)&v235 + 1) = v227.i64[0];
  *(void *)&long long v231 = 44;
  *((void *)&v231 + 1) = 0xE100000000000000;
  v223.i64[0] = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v130 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  uint64_t v221 = v130;
  int64_t v131 = *(void *)(v130 + 16);
  if (v131)
  {
    *(void *)&long long v231 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v131, 0);
    v222.i64[0] = (uint64_t)(v13 + 1);
    uint64_t v132 = (uint64_t *)(v221 + 40);
    do
    {
      uint64_t v133 = *v132;
      *(void *)&long long v235 = *(v132 - 1);
      *((void *)&v235 + 1) = v133;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      v228.i64[0] = StringProtocol.trimmingCharacters(in:)();
      v227.i64[0] = v134;
      (*(void (**)(uint64_t, uint64_t))v222.i64[0])(v12, v9);
      swift_bridgeObjectRelease();
      long long v135 = (void *)v231;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v135[2] + 1, 1);
        long long v135 = (void *)v231;
      }
      unint64_t v137 = v135[2];
      unint64_t v136 = v135[3];
      if (v137 >= v136 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v136 > 1, v137 + 1, 1);
        long long v135 = (void *)v231;
      }
      v132 += 2;
      v135[2] = v137 + 1;
      long long v138 = &v135[2 * v137];
      uint64_t v139 = v227.i64[0];
      v138[4] = v228.i64[0];
      v138[5] = v139;
      --v131;
    }
    while (v131);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    long long v135 = (void *)MEMORY[0x263F8EE78];
  }
  int64_t v177 = v135[2];
  if (!v177)
  {
    swift_bridgeObjectRelease();
    char v186 = (void *)MEMORY[0x263F8EE78];
LABEL_255:
    unint64_t v201 = v186[2];
    if (v201 < 4)
    {
      __break(1u);
    }
    else
    {
      specialized SIMD.init<A>(_:)((uint64_t)(v186 + 4), 0, 9uLL);
      int64x2_t v228 = v202;
      if (v201 >= 8)
      {
        specialized SIMD.init<A>(_:)((uint64_t)(v186 + 4), 4, 0x11uLL);
        int8x16_t v227 = v203;
        if (v201 >= 0xC)
        {
          specialized SIMD.init<A>(_:)((uint64_t)(v186 + 4), 8, 0x19uLL);
          int8x16_t v223 = v204;
          if (v201 >= 0x10)
          {
            specialized SIMD.init<A>(_:)((uint64_t)(v186 + 4), 12, 0x21uLL);
            int8x16_t v222 = v205;
            swift_release();
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v8 = v228.i64[0];
            uint64_t v18 = v222.i64[1];
            int64x2_t v20 = (int64x2_t)vextq_s8((int8x16_t)v228, v227, 8uLL);
            int8x16_t v19 = vextq_s8(v227, v223, 8uLL);
            int64x2_t v22 = (int64x2_t)vextq_s8(v223, v222, 8uLL);
            char v21 = 18;
            goto LABEL_103;
          }
          goto LABEL_289;
        }
LABEL_288:
        __break(1u);
LABEL_289:
        __break(1u);
LABEL_290:
        swift_once();
LABEL_220:
        char v176 = MaterialXDataType.isEqual(to:)();
        swift_release();
        if (v176)
        {
          swift_bridgeObjectRelease();
          uint64_t result = swift_release();
          uint64_t v8 = 0;
          uint64_t v18 = 0;
          int64x2_t v20 = 0uLL;
          char v21 = 10;
          goto LABEL_268;
        }
        uint64_t v206 = one-time initialization token for half3;
        swift_retain();
        if (v206 != -1) {
          swift_once();
        }
        char v207 = MaterialXDataType.isEqual(to:)();
        swift_release();
        if (v207)
        {
          swift_bridgeObjectRelease();
          uint64_t result = swift_release();
          uint64_t v8 = 0;
          uint64_t v18 = 0;
          int64x2_t v20 = 0uLL;
          char v21 = 11;
          goto LABEL_268;
        }
        uint64_t v208 = one-time initialization token for half4;
        swift_retain();
        if (v208 != -1) {
          swift_once();
        }
        char v209 = MaterialXDataType.isEqual(to:)();
        swift_release();
        if (v209)
        {
          swift_bridgeObjectRelease();
          uint64_t result = swift_release();
          uint64_t v8 = 0;
          uint64_t v18 = 0;
          int64x2_t v20 = 0uLL;
          char v21 = 12;
          goto LABEL_268;
        }
        uint64_t v210 = one-time initialization token for filename;
        swift_retain();
        if (v210 != -1) {
          swift_once();
        }
        char v211 = MaterialXDataType.isEqual(to:)();
        swift_release();
        if (v211) {
          goto LABEL_56;
        }
        uint64_t v212 = one-time initialization token for string;
        swift_retain();
        if (v212 != -1) {
          swift_once();
        }
        char v213 = MaterialXDataType.isEqual(to:)();
        swift_release();
        if (v213)
        {
LABEL_56:
          uint64_t result = swift_release();
          uint64_t v18 = 0;
          int8x16_t v19 = 0uLL;
          int64x2_t v20 = (int64x2_t)v227.u64[0];
          char v21 = 6;
          int64x2_t v22 = 0uLL;
          a4 = v225;
          uint64_t v8 = v228.i64[0];
          goto LABEL_50;
        }
        long long v231 = 0u;
        memset(v232, 0, sizeof(v232));
        uint64_t v233 = v228.i64[0];
        uint64_t v234 = v227.i64[0];
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v231);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v231, (uint64_t)&v235);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        long long v247 = 0uLL;
        swift_allocError();
        *long long v39 = v235;
        long long v214 = v239;
        long long v216 = v236;
        long long v215 = v237;
        v39[3] = v238;
        v39[4] = v214;
        v39[1] = v216;
        v39[2] = v215;
        long long v217 = v243;
        long long v219 = v240;
        long long v218 = v241;
        v39[7] = v242;
        v39[8] = v217;
        v39[5] = v219;
        v39[6] = v218;
        long long v46 = v246;
        long long v47 = v247;
        long long v49 = v244;
        long long v48 = v245;
LABEL_30:
        v39[11] = v46;
        v39[12] = v47;
        v39[9] = v49;
        v39[10] = v48;
        swift_willThrow();
        return swift_release();
      }
    }
    __break(1u);
    goto LABEL_288;
  }
  char v230 = (void *)MEMORY[0x263F8EE78];
  uint64_t v178 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v177, 0);
  uint64_t v179 = v135 + 5;
  while (1)
  {
    uint64_t v9 = *(v179 - 1);
    uint64_t v142 = *v179;
    int v229 = 0;
    MEMORY[0x270FA5388](v178);
    *(&v220 - 2) = (uint64_t)&v229;
    if ((v142 & 0x1000000000000000) == 0)
    {
      if (v142 & 0x2000000000000000 | v9 & 0x1000000000000000) {
        break;
      }
    }
    swift_bridgeObjectRetain_n();
    uint64_t v190 = v224;
    _StringGuts._slowWithCString<A>(_:)();
    uint64_t v224 = v190;
LABEL_240:
    swift_bridgeObjectRelease();
LABEL_241:
    if ((v231 & 1) == 0) {
      goto LABEL_253;
    }
    swift_bridgeObjectRelease();
    int v185 = v229;
    char v186 = v230;
    uint64_t v178 = swift_isUniquelyReferenced_nonNull_native();
    if ((v178 & 1) == 0)
    {
      uint64_t v178 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v186[2] + 1, 1);
      char v186 = v230;
    }
    unint64_t v188 = v186[2];
    unint64_t v187 = v186[3];
    if (v188 >= v187 >> 1)
    {
      uint64_t v178 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v187 > 1, v188 + 1, 1);
      char v186 = v230;
    }
    v179 += 2;
    v186[2] = v188 + 1;
    *((_DWORD *)v186 + v188 + 8) = v185;
    if (!--v177)
    {
      swift_bridgeObjectRelease();
      goto LABEL_255;
    }
  }
  if ((v142 & 0x2000000000000000) != 0)
  {
    *(void *)&long long v235 = v9;
    *((void *)&v235 + 1) = v142 & 0xFFFFFFFFFFFFFFLL;
    switch((char)v9)
    {
      case 0:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
        swift_bridgeObjectRetain_n();
        goto LABEL_236;
      default:
        swift_bridgeObjectRetain_n();
        char v189 = (unsigned char *)_swift_stdlib_strtof_clocale();
        if (v189) {
          BOOL v184 = *v189 == 0;
        }
        else {
LABEL_236:
        }
          BOOL v184 = 0;
        LOBYTE(v231) = v184;
        swift_bridgeObjectRelease();
        break;
    }
    goto LABEL_241;
  }
  if ((v9 & 0x1000000000000000) != 0)
  {
    uint64_t v180 = (unsigned __int8 *)((v142 & 0xFFFFFFFFFFFFFFFLL) + 32);
LABEL_230:
    swift_bridgeObjectRetain_n();
    unint64_t v181 = *v180;
    BOOL v183 = (v181 >= 0x21 || ((0x100003E01uLL >> v181) & 1) == 0)
        && (unint64_t v182 = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0
        && *v182 == 0;
    LOBYTE(v231) = v183;
    goto LABEL_240;
  }
  uint64_t v180 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  if (v180) {
    goto LABEL_230;
  }
  swift_bridgeObjectRetain_n();
  __break(1u);
LABEL_253:
  long long v231 = 0u;
  memset(v232, 0, sizeof(v232));
  uint64_t v233 = v9;
  uint64_t v234 = v142;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v231);
  outlined init with take of UserGraphError.ErrorType((uint64_t)&v231, (uint64_t)&v235);
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  long long v247 = 0uLL;
  swift_allocError();
  _OWORD *v191 = v235;
  long long v192 = v239;
  long long v194 = v236;
  long long v193 = v237;
  v191[3] = v238;
  v191[4] = v192;
  v191[1] = v194;
  v191[2] = v193;
  long long v195 = v243;
  long long v197 = v240;
  long long v196 = v241;
  v191[7] = v242;
  v191[8] = v195;
  v191[5] = v197;
  v191[6] = v196;
  long long v198 = v247;
  long long v200 = v244;
  long long v199 = v245;
  v191[11] = v246;
  v191[12] = v198;
  v191[9] = v200;
  _OWORD v191[10] = v199;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t partial apply for closure #2 in SIMD<>.init(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in SIMD<>.init(_:)(a1);
}

uint64_t outlined init with take of NodeDef?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NodeDef?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *outlined release of NodeDef?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of NodeDef?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(a15, a16);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi36_(uint64_t a1)
{
  *(void *)a1 = 2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0x8C00000000000000;
  return result;
}

uint64_t type metadata accessor for MaterialXDataType()
{
  return self;
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi40_(uint64_t a1)
{
  *(void *)a1 = 6;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0x8C00000000000000;
  return result;
}

unint64_t lazy protocol witness table accessor for type XMLElementErrors and conformance XMLElementErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type XMLElementErrors and conformance XMLElementErrors;
  if (!lazy protocol witness table cache variable for type XMLElementErrors and conformance XMLElementErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type XMLElementErrors and conformance XMLElementErrors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys);
  }
  return result;
}

uint64_t specialized MaterialXDataType.Kind.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64656D616ELL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7628147 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *specialized MaterialXDataType.Kind.init(from:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MaterialXDataType.Kind.SetCodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v23 = v2;
  uint64_t v24 = v3;
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MaterialXDataType.Kind.NamedCodingKeys>);
  uint64_t v25 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MaterialXDataType.Kind.CodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v26 = a1;
  uint64_t v14 = __swift_project_boxed_opaque_existential_1(a1, v13);
  lazy protocol witness table accessor for type MaterialXDataType.Kind.CodingKeys and conformance MaterialXDataType.Kind.CodingKeys();
  uint64_t v15 = v27;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    uint64_t v16 = v25;
    uint64_t v27 = v10;
    uint64_t v14 = v12;
    uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v17 + 16) == 1)
    {
      if (*(unsigned char *)(v17 + 32))
      {
        char v30 = 1;
        lazy protocol witness table accessor for type MaterialXDataType.Kind.SetCodingKeys and conformance MaterialXDataType.Kind.SetCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
        uint64_t v18 = v23;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v18);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v9);
        uint64_t v14 = v28;
      }
      else
      {
        char v29 = 0;
        lazy protocol witness table accessor for type MaterialXDataType.Kind.NamedCodingKeys and conformance MaterialXDataType.Kind.NamedCodingKeys();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v9);
        uint64_t v14 = 0;
      }
    }
    else
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      char v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *char v21 = &type metadata for MaterialXDataType.Kind;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x263F8DCB0], v19);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v27 + 8))(v14, v9);
    }
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
  return v14;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [String]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for MaterialXDataType(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MaterialXDataType);
}

uint64_t dispatch thunk of MaterialXDataType.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of MaterialXDataType.__allocating_init(_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

void *initializeBufferWithCopyOfBuffer for MaterialXDataType.Kind(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MaterialXDataType.Kind()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for MaterialXDataType.Kind(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for MaterialXDataType.Kind(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialXDataType.Kind(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MaterialXDataType.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for MaterialXDataType.Kind(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for MaterialXDataType.Kind(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for MaterialXDataType.Kind()
{
  return &type metadata for MaterialXDataType.Kind;
}

ValueMetadata *type metadata accessor for MaterialXDataType.usd()
{
  return &type metadata for MaterialXDataType.usd;
}

ValueMetadata *type metadata accessor for MaterialXDataType.realitykit()
{
  return &type metadata for MaterialXDataType.realitykit;
}

ValueMetadata *type metadata accessor for MetalDataType.MaterialX()
{
  return &type metadata for MetalDataType.MaterialX;
}

uint64_t getEnumTagSinglePayload for XMLElementErrors(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XMLElementErrors(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for XMLElementErrors()
{
  return 0;
}

ValueMetadata *type metadata accessor for XMLElementErrors()
{
  return &type metadata for XMLElementErrors;
}

unsigned char *storeEnumTagSinglePayload for MaterialXDataType.Kind.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C312AECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for MaterialXDataType.Kind.CodingKeys()
{
  return &unk_27099CA28;
}

void *type metadata accessor for MaterialXDataType.Kind.NamedCodingKeys()
{
  return &unk_27099CA48;
}

uint64_t getEnumTagSinglePayload for MaterialXDataType.Kind.SetCodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for MaterialXDataType.Kind.SetCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25C312C24);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for MaterialXDataType.Kind.SetCodingKeys()
{
  return &unk_27099CAD8;
}

uint64_t outlined init with take of NodeDef.Implementation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NodeDef.Implementation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [String]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25C312FE4()
{
  outlined consume of SGDataTypeStorage(*(void **)(v0 + 16), *(id *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));
  swift_release();
  return MEMORY[0x270FA0238](v0, 96, 15);
}

uint64_t sub_25C313040()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(*(void *)(v0 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(*(void *)(v0 + 144));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 185, 7);
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x2800000000000000;
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi4_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x1400000000000000;
  return result;
}

uint64_t outlined init with copy of NodeDef.Implementation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NodeDef.Implementation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of NodeDef.Implementation(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NodeDef.Implementation(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double _s11ShaderGraph7NodeDefVSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi11_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x3000000000000000;
  return result;
}

unsigned char *partial apply for closure #1 in closure #1 in Float.init<A>(_:)@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return partial apply for closure #1 in closure #1 in Float.init<A>(_:)(a1, a2);
}

void *closure #1 in _StringGuts.withCString<A>(_:)specialized partial apply@<X0>(unsigned char *a1@<X8>)
{
  double result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

unsigned char *partial apply for closure #1 in closure #1 in Float.init<A>(_:)@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void *partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in _StringGuts.withCString<A>(_:)specialized partial apply(a1);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph16DataTypePropertyV_s6UInt32VtG_AF21SGPropertyDescriptionCs5NeverOTg504_s11d7Graph16fgh3Vs6i5VAA21jk17CIggyo_AC_AEtAGs5L96OIegnrzr_TR04_s11a13Graph17SGTypeh12CyAcA13Metalcd9CcfcAA010g9D0CAA0fG8e4V_s6F7VtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v16 = (objc_class *)type metadata accessor for SGTypeDescription();
    BOOL v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      uint64_t v17 = *(v4 - 1);
      uint64_t v6 = v4[1];
      char v18 = *((unsigned char *)v4 + 24);
      int v19 = *((_DWORD *)v4 + 10);
      BOOL v7 = (char *)objc_allocWithZone(v16);
      *(_DWORD *)&v7[OBJC_IVAR___SGTypeDescription_offset] = 0;
      *(void *)&v7[OBJC_IVAR___SGTypeDescription_type] = v6;
      uint64_t v8 = *(void (**)(void))(*(void *)v6 + 232);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v9 = v7;
      v8();
      uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph16DataTypePropertyV_s6UInt32VtG_AF21SGPropertyDescriptionCs5NeverOTg504_s11d7Graph16fgh3Vs6i5VAA21jk17CIggyo_AC_AEtAGs5L96OIegnrzr_TR04_s11a13Graph17SGTypeh12CyAcA13Metalcd9CcfcAA010g9D0CAA0fG8e4V_s6F7VtXEfU_Tf3nnnpf_nTf1cn_n();
      swift_bridgeObjectRelease();
      *(void *)&v9[OBJC_IVAR___SGTypeDescription_properties] = v10;

      v21.receiver = v9;
      v21.super_class = v16;
      id v11 = objc_msgSendSuper2(&v21, sel_init);
      swift_release();
      uint64_t v12 = (objc_class *)type metadata accessor for SGPropertyDescription();
      uint64_t v13 = objc_allocWithZone(v12);
      uint64_t v14 = &v13[OBJC_IVAR___SGPropertyDescription_name];
      *uint64_t v14 = v17;
      v14[1] = v5;
      *(void *)&v13[OBJC_IVAR___SGPropertyDescription_type] = v11;
      v13[OBJC_IVAR___SGPropertyDescription_visible] = v18;
      v20.receiver = v13;
      v20.super_class = v12;
      uint64_t v15 = (_DWORD *)(*(void *)((char *)objc_msgSendSuper2(&v20, sel_init) + OBJC_IVAR___SGPropertyDescription_type)
                     + OBJC_IVAR___SGTypeDescription_offset);
      swift_beginAccess();
      _DWORD *v15 = v19;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 += 7;
      --v2;
    }
    while (v2);
    return v22;
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph21SGPropertyDescriptionCGG_AH16DataTypePropertyVsAE_pTg506_sSi11f7Graph21hi5CAA16jkl3Vs5C149_pIgygozo_Si6offset_AC7elementtAEsAF_pIegnrzr_TR04_s11a12Graph13Metalef25C6create_4nameAcA17SGTyped14C_SStKFZAA0dE8g9VSi_AA010C10I0CtKXEfU_Tf3nnnpf_nTf1cn_n(unint64_t a1)
{
  uint64_t v35 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v2 = v35;
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v3)
  {
    while (1)
    {
      unint64_t v4 = 0;
      uint64_t v30 = a1 & 0xFFFFFFFFFFFFFF8;
      unint64_t v31 = a1 & 0xC000000000000001;
      uint64_t v28 = v3;
      unint64_t v29 = a1;
      while (v31)
      {
        uint64_t v5 = (char *)MEMORY[0x2611848A0](v4, a1);
LABEL_7:
        uint64_t v6 = v5;
        unint64_t v7 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_16;
        }
        uint64_t v8 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)&v5[OBJC_IVAR___SGPropertyDescription_type]
                                                             + OBJC_IVAR___SGTypeDescription_type)
                                               + 144);
        uint64_t v9 = swift_retain();
        uint64_t v10 = v8(v9);
        swift_release();
        if (!v10)
        {
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi45_((uint64_t)&v32);
          outlined init with take of UserGraphError.ErrorType((uint64_t)&v32, (uint64_t)v33);
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          long long v34 = 0uLL;
          swift_allocError();
          *uint64_t v17 = v33[0];
          long long v18 = v33[4];
          long long v19 = v33[2];
          long long v20 = v33[1];
          v17[3] = v33[3];
          v17[4] = v18;
          v17[1] = v20;
          v17[2] = v19;
          long long v21 = v33[8];
          long long v22 = v33[6];
          long long v23 = v33[5];
          v17[7] = v33[7];
          v17[8] = v21;
          v17[5] = v23;
          v17[6] = v22;
          long long v24 = v34;
          long long v25 = v33[10];
          long long v26 = v33[9];
          v17[11] = v33[11];
          v17[12] = v24;
          v17[9] = v26;
          v17[10] = v25;
          swift_willThrow();
          swift_release();
          swift_bridgeObjectRelease();

          return v2;
        }
        uint64_t v11 = *(void *)&v6[OBJC_IVAR___SGPropertyDescription_name];
        uint64_t v12 = *(void *)&v6[OBJC_IVAR___SGPropertyDescription_name + 8];
        char v13 = v6[OBJC_IVAR___SGPropertyDescription_visible];
        swift_bridgeObjectRetain();

        uint64_t v35 = v2;
        unint64_t v14 = *(void *)(v2 + 16);
        unint64_t v15 = *(void *)(v2 + 24);
        if (v14 >= v15 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v14 + 1, 1);
          uint64_t v2 = v35;
        }
        *(void *)(v2 + 16) = v14 + 1;
        uint64_t v16 = v2 + 48 * v14;
        *(void *)(v16 + 32) = v11;
        *(void *)(v16 + 40) = v12;
        *(void *)(v16 + 48) = v10;
        *(void *)(v16 + 56) = MEMORY[0x263F8EE78];
        *(unsigned char *)(v16 + 64) = v13;
        *(void *)(v16 + 72) = v4++;
        a1 = v29;
        if (v7 == v28) {
          goto LABEL_18;
        }
      }
      if (v4 < *(void *)(v30 + 16)) {
        break;
      }
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        goto LABEL_18;
      }
    }
    uint64_t v5 = (char *)*(id *)(a1 + 8 * v4 + 32);
    goto LABEL_7;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t SGTypeDescription.size.getter()
{
  return *(unsigned int *)(*(void *)(v0 + OBJC_IVAR___SGTypeDescription_type) + 56);
}

uint64_t SGTypeDescription.alignment.getter()
{
  return *(unsigned int *)(*(void *)(v0 + OBJC_IVAR___SGTypeDescription_type) + 60);
}

uint64_t static MetalDataType.create(_:)(uint64_t a1)
{
  return specialized static MetalDataType.create(_:)(a1);
}

uint64_t SGTypeDescription.type.getter()
{
  return swift_retain();
}

uint64_t SGTypeDescription.properties.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SGTypeDescription.offset.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR___SGTypeDescription_offset);
  swift_beginAccess();
  return *v1;
}

uint64_t SGTypeDescription.offset.setter(int a1)
{
  uint64_t v3 = (_DWORD *)(v1 + OBJC_IVAR___SGTypeDescription_offset);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*SGTypeDescription.offset.modify())()
{
  return XMLParserDelegate.StringNode.children.modify;
}

BOOL SGTypeDescription.getMTLTextureType(_:)(uint64_t *a1)
{
  return SGTypeDescription.getMTLTextureType(_:)(a1, MetalDataType.MTLTextureType.getter);
}

BOOL SGTypeDescription.getMTLDataType(_:)(uint64_t *a1)
{
  return SGTypeDescription.getMTLTextureType(_:)(a1, MetalDataType.MTLDataType.getter);
}

BOOL SGTypeDescription.getMTLTextureType(_:)(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2();
  if ((v4 & 1) == 0 && a1) {
    *a1 = v3;
  }
  return (v4 & 1) == 0;
}

BOOL @objc SGTypeDescription.getMTLTextureType(_:)(void *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  id v6 = a1;
  uint64_t v7 = a4();
  if ((v8 & 1) == 0 && a3) {
    *a3 = v7;
  }
  BOOL v9 = (v8 & 1) == 0;

  return v9;
}

id SGTypeDescription.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  char v4 = (char *)objc_allocWithZone(v2);
  *(_DWORD *)&v4[OBJC_IVAR___SGTypeDescription_offset] = 0;
  *(void *)&v4[OBJC_IVAR___SGTypeDescription_type] = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 232);
  id v6 = v4;
  uint64_t v7 = swift_retain();
  uint64_t v8 = v5(v7);
  uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph16DataTypePropertyV_s6UInt32VtG_AF21SGPropertyDescriptionCs5NeverOTg504_s11d7Graph16fgh3Vs6i5VAA21jk17CIggyo_AC_AEtAGs5L96OIegnrzr_TR04_s11a13Graph17SGTypeh12CyAcA13Metalcd9CcfcAA010g9D0CAA0fG8e4V_s6F7VtXEfU_Tf3nnnpf_nTf1cn_n(v8);
  swift_bridgeObjectRelease();
  *(void *)&v6[OBJC_IVAR___SGTypeDescription_properties] = v9;

  v12.receiver = v6;
  v12.super_class = v2;
  id v10 = objc_msgSendSuper2(&v12, sel_init);
  swift_release();
  return v10;
}

id SGTypeDescription.init(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(_DWORD *)&v2[OBJC_IVAR___SGTypeDescription_offset] = 0;
  *(void *)&v2[OBJC_IVAR___SGTypeDescription_type] = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 232);
  id v6 = v2;
  uint64_t v7 = swift_retain();
  uint64_t v8 = v5(v7);
  uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph16DataTypePropertyV_s6UInt32VtG_AF21SGPropertyDescriptionCs5NeverOTg504_s11d7Graph16fgh3Vs6i5VAA21jk17CIggyo_AC_AEtAGs5L96OIegnrzr_TR04_s11a13Graph17SGTypeh12CyAcA13Metalcd9CcfcAA010g9D0CAA0fG8e4V_s6F7VtXEfU_Tf3nnnpf_nTf1cn_n(v8);
  swift_bridgeObjectRelease();
  *(void *)&v6[OBJC_IVAR___SGTypeDescription_properties] = v9;

  v12.receiver = v6;
  v12.super_class = ObjectType;
  id v10 = objc_msgSendSuper2(&v12, sel_init);
  swift_release();
  return v10;
}

id SGPropertyDescription.__allocating_init(name:type:visible:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = objc_allocWithZone(v4);
  id v10 = &v9[OBJC_IVAR___SGPropertyDescription_name];
  *id v10 = a1;
  v10[1] = a2;
  *(void *)&v9[OBJC_IVAR___SGPropertyDescription_type] = a3;
  v9[OBJC_IVAR___SGPropertyDescription_visible] = a4;
  v12.receiver = v9;
  v12.super_class = v4;
  return objc_msgSendSuper2(&v12, sel_init);
}

uint64_t SGTypeDescription.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v7);
  if (!v8)
  {
    outlined destroy of Any?((uint64_t)v7);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    char v4 = 0;
    return v4 & 1;
  }
  id v3 = v1;
  char v4 = static NSObject.== infix(_:_:)();

  return v4 & 1;
}

id static SGTypeDescription.create(_:)(uint64_t a1)
{
  return specialized static SGTypeDescription.create(_:)(a1);
}

uint64_t SGTypeDescription.description.getter()
{
  return SGTypeDescription.description.getter((void (*)(void *__return_ptr, uint64_t *, uint64_t))closure #1 in SGTypeDescription.description.getter);
}

void closure #1 in SGTypeDescription.description.getter(uint64_t a1@<X1>, void *a2@<X8>)
{
  _StringGuts.grow(_:)(45);
  v4._unint64_t object = (void *)0x800000025C424770;
  v4._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafePointer<SGTypeDescription>);
  _print_unlocked<A, B>(_:_:)();
  v5._uint64_t countAndFlagsBits = 0x3D6570797420;
  v5._unint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v5);
  id v6 = *(uint64_t (**)(uint64_t))(**(void **)(a1 + OBJC_IVAR___SGTypeDescription_type) + 136);
  uint64_t v7 = swift_retain();
  v8._uint64_t countAndFlagsBits = v6(v7);
  String.append(_:)(v8);
  swift_release();
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x747265706F727020;
  v9._unint64_t object = (void *)0xEC0000003D736569;
  String.append(_:)(v9);
  uint64_t v10 = type metadata accessor for SGPropertyDescription();
  uint64_t v11 = swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = MEMORY[0x261184160](v11, v10);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 62;
  v13._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  *a2 = 0;
  a2[1] = 0xE000000000000000;
}

id SGTypeDescription.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void SGTypeDescription.init()()
{
}

uint64_t static SGTypeDescription.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + OBJC_IVAR___SGTypeDescription_type) + 128))(*(void *)(a2 + OBJC_IVAR___SGTypeDescription_type)) & 1;
}

uint64_t static MetalDataType.create(_:name:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + OBJC_IVAR___SGTypeDescription_type) + 144))();
  if (!result)
  {
    unint64_t v7 = swift_bridgeObjectRetain();
    uint64_t v8 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph21SGPropertyDescriptionCGG_AH16DataTypePropertyVsAE_pTg506_sSi11f7Graph21hi5CAA16jkl3Vs5C149_pIgygozo_Si6offset_AC7elementtAEsAF_pIegnrzr_TR04_s11a12Graph13Metalef25C6create_4nameAcA17SGTyped14C_SStKFZAA0dE8g9VSi_AA010C10I0CtKXEfU_Tf3nnnpf_nTf1cn_n(v7);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v3)
    {
      type metadata accessor for MetalDataType.Struct();
      uint64_t v9 = swift_allocObject();
      swift_bridgeObjectRetain();
      uint64_t v10 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, a2, a3, 0x100000000, 0x100000000, 0, v8, v9);
      swift_release();
      return v10;
    }
  }
  return result;
}

uint64_t SGPropertyDescription.name.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SGPropertyDescription_name);
  swift_bridgeObjectRetain();
  return v1;
}

id SGPropertyDescription.type.getter()
{
  return *(id *)(v0 + OBJC_IVAR___SGPropertyDescription_type);
}

uint64_t SGPropertyDescription.visible.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SGPropertyDescription_visible);
}

id SGPropertyDescription.init(name:type:visible:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v10 = &v4[OBJC_IVAR___SGPropertyDescription_name];
  *uint64_t v10 = a1;
  v10[1] = a2;
  *(void *)&v4[OBJC_IVAR___SGPropertyDescription_type] = a3;
  v4[OBJC_IVAR___SGPropertyDescription_visible] = a4;
  v12.receiver = v4;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, sel_init);
}

id static SGPropertyDescription.create(_:type:)(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v7 = objc_allocWithZone(v3);
  uint64_t v8 = &v7[OBJC_IVAR___SGPropertyDescription_name];
  *uint64_t v8 = a1;
  v8[1] = a2;
  *(void *)&v7[OBJC_IVAR___SGPropertyDescription_type] = a3;
  v7[OBJC_IVAR___SGPropertyDescription_visible] = 1;
  v11.receiver = v7;
  v11.super_class = v3;
  swift_bridgeObjectRetain();
  id v9 = a3;
  return objc_msgSendSuper2(&v11, sel_init);
}

id @objc SGTypeDescription.description.getter(void *a1, uint64_t a2, void (*a3)(void *__return_ptr, void **, id))
{
  v8[2] = *MEMORY[0x263EF8340];
  unint64_t v7 = a1;
  id v4 = a1;
  a3(v8, &v7, v4);

  Swift::String v5 = (void *)MEMORY[0x261183E60](v8[0], v8[1]);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t SGPropertyDescription.description.getter()
{
  return SGTypeDescription.description.getter((void (*)(void *__return_ptr, uint64_t *, uint64_t))closure #1 in SGPropertyDescription.description.getter);
}

uint64_t SGTypeDescription.description.getter(void (*a1)(void *__return_ptr, uint64_t *, uint64_t))
{
  v4[2] = *MEMORY[0x263EF8340];
  a1(v4, &v3, v1);
  return v4[0];
}

void closure #1 in SGPropertyDescription.description.getter(uint64_t a1@<X1>, void *a2@<X8>)
{
  _StringGuts.grow(_:)(53);
  v4._unint64_t object = (void *)0x800000025C424750;
  v4._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafePointer<SGPropertyDescription>);
  _print_unlocked<A, B>(_:_:)();
  v5._uint64_t countAndFlagsBits = 0x3D656D616E20;
  v5._unint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v5);
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR___SGPropertyDescription_name);
  unint64_t v7 = *(void **)(a1 + OBJC_IVAR___SGPropertyDescription_name + 8);
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v6;
  v8._unint64_t object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x3D6570797420;
  v9._unint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v9);
  id v10 = *(id *)(a1 + OBJC_IVAR___SGPropertyDescription_type);
  id v11 = objc_msgSend(v10, sel_description);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  v15._uint64_t countAndFlagsBits = v12;
  v15._unint64_t object = v14;
  String.append(_:)(v15);

  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0x656C626973697620;
  v16._unint64_t object = (void *)0xE90000000000003DLL;
  String.append(_:)(v16);
  if (*(unsigned char *)(a1 + OBJC_IVAR___SGPropertyDescription_visible)) {
    uint64_t v17 = 1702195828;
  }
  else {
    uint64_t v17 = 0x65736C6166;
  }
  if (*(unsigned char *)(a1 + OBJC_IVAR___SGPropertyDescription_visible)) {
    unint64_t v18 = 0xE400000000000000;
  }
  else {
    unint64_t v18 = 0xE500000000000000;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 62;
  v20._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  *a2 = 0;
  a2[1] = 0xE000000000000000;
}

void SGPropertyDescription.init()()
{
}

uint64_t static SGPropertyDescription.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  BOOL v4 = *(void *)(a1 + OBJC_IVAR___SGPropertyDescription_name) == *(void *)(a2
                                                                             + OBJC_IVAR___SGPropertyDescription_name)
    && *(void *)(a1 + OBJC_IVAR___SGPropertyDescription_name + 8) == *(void *)(a2
                                                                                 + OBJC_IVAR___SGPropertyDescription_name
                                                                                 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v6 = 0, (v5 & 1) != 0))
  {
    if (((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + OBJC_IVAR___SGPropertyDescription_type)
                                                          + OBJC_IVAR___SGTypeDescription_type)
                                            + 128))(*(void *)(*(void *)(a2 + OBJC_IVAR___SGPropertyDescription_type)
                                                                + OBJC_IVAR___SGTypeDescription_type)) & 1) != 0)
      char v6 = *(unsigned char *)(a1 + OBJC_IVAR___SGPropertyDescription_visible) ^ *(unsigned char *)(a2
                                                                                 + OBJC_IVAR___SGPropertyDescription_visible) ^ 1;
    else {
      char v6 = 0;
    }
  }
  return v6 & 1;
}

uint64_t SGPropertyDescription.isEqual(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v10);
  if (!v11)
  {
    outlined destroy of Any?((uint64_t)v10);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    char v7 = 0;
    return v7 & 1;
  }
  if (v9 == v1)
  {

    char v7 = 1;
    return v7 & 1;
  }
  BOOL v4 = *(void *)&v9[OBJC_IVAR___SGPropertyDescription_name] == *(void *)&v1[OBJC_IVAR___SGPropertyDescription_name]
    && *(void *)&v9[OBJC_IVAR___SGPropertyDescription_name + 8] == *(void *)&v1[OBJC_IVAR___SGPropertyDescription_name
                                                                                  + 8];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || ((*(uint64_t (**)(void))(**(void **)(*(void *)&v9[OBJC_IVAR___SGPropertyDescription_type]
                                                        + OBJC_IVAR___SGTypeDescription_type)
                                          + 128))(*(void *)(*(void *)&v1[OBJC_IVAR___SGPropertyDescription_type]
                                                              + OBJC_IVAR___SGTypeDescription_type)) & 1) == 0)
  {

    goto LABEL_13;
  }
  char v5 = v9[OBJC_IVAR___SGPropertyDescription_visible];
  char v6 = v2[OBJC_IVAR___SGPropertyDescription_visible];

  char v7 = v5 ^ v6 ^ 1;
  return v7 & 1;
}

uint64_t @objc SGTypeDescription.isEqual(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    id v7 = a1;
  }
  char v8 = a4(v10);

  outlined destroy of Any?((uint64_t)v10);
  return v8 & 1;
}

uint64_t specialized static MetalDataType.create(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + OBJC_IVAR___SGPropertyDescription_name);
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR___SGPropertyDescription_name + 8);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + OBJC_IVAR___SGPropertyDescription_type)
                                              + OBJC_IVAR___SGTypeDescription_type)
                                + 144))();
  if (!result)
  {
    unint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph21SGPropertyDescriptionCGG_AH16DataTypePropertyVsAE_pTg506_sSi11f7Graph21hi5CAA16jkl3Vs5C149_pIgygozo_Si6offset_AC7elementtAEsAF_pIegnrzr_TR04_s11a12Graph13Metalef25C6create_4nameAcA17SGTyped14C_SStKFZAA0dE8g9VSi_AA010C10I0CtKXEfU_Tf3nnnpf_nTf1cn_n(v5);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v1)
    {
      type metadata accessor for MetalDataType.Struct();
      uint64_t v7 = swift_allocObject();
      swift_bridgeObjectRetain();
      uint64_t v8 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, v2, v3, 0x100000000, 0x100000000, 0, v6, v7);
      swift_release();
      return v8;
    }
  }
  return result;
}

id specialized static SGTypeDescription.create(_:)(uint64_t a1)
{
  id v2 = v1;
  specialized SGDataType.materialXDataType.getter(a1);
  swift_retain();
  uint64_t v3 = MaterialXDataType.asMetalDataType.getter();
  if (v3)
  {
    uint64_t v4 = v3;
    unint64_t v5 = (objc_class *)type metadata accessor for SGTypeDescription();
    uint64_t v6 = (char *)objc_allocWithZone(v5);
    *(_DWORD *)&v6[OBJC_IVAR___SGTypeDescription_offset] = 0;
    *(void *)&v6[OBJC_IVAR___SGTypeDescription_type] = v4;
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 232);
    uint64_t v8 = v6;
    uint64_t v9 = swift_retain();
    uint64_t v10 = v7(v9);
    uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph16DataTypePropertyV_s6UInt32VtG_AF21SGPropertyDescriptionCs5NeverOTg504_s11d7Graph16fgh3Vs6i5VAA21jk17CIggyo_AC_AEtAGs5L96OIegnrzr_TR04_s11a13Graph17SGTypeh12CyAcA13Metalcd9CcfcAA010g9D0CAA0fG8e4V_s6F7VtXEfU_Tf3nnnpf_nTf1cn_n(v10);
    swift_bridgeObjectRelease();
    *(void *)&v8[OBJC_IVAR___SGTypeDescription_properties] = v11;

    v23.receiver = v8;
    v23.super_class = v5;
    id v2 = objc_msgSendSuper2(&v23, sel_init);
    swift_release();
    swift_release();
  }
  else
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi45_((uint64_t)v24);
    outlined init with take of UserGraphError.ErrorType((uint64_t)v24, (uint64_t)v25);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v26 = 0uLL;
    swift_allocError();
    *uint64_t v12 = v25[0];
    long long v13 = v25[4];
    long long v15 = v25[1];
    long long v14 = v25[2];
    v12[3] = v25[3];
    v12[4] = v13;
    v12[1] = v15;
    v12[2] = v14;
    long long v16 = v25[8];
    long long v18 = v25[5];
    long long v17 = v25[6];
    v12[7] = v25[7];
    v12[8] = v16;
    v12[5] = v18;
    v12[6] = v17;
    long long v19 = v26;
    long long v21 = v25[9];
    long long v20 = v25[10];
    v12[11] = v25[11];
    v12[12] = v19;
    v12[9] = v21;
    v12[10] = v20;
    swift_willThrow();
    swift_release();
  }
  return v2;
}

uint64_t type metadata accessor for SGTypeDescription()
{
  return self;
}

uint64_t method lookup function for SGTypeDescription(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SGTypeDescription);
}

uint64_t dispatch thunk of SGTypeDescription.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for SGPropertyDescription()
{
  return self;
}

uint64_t method lookup function for SGPropertyDescription(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SGPropertyDescription);
}

uint64_t dispatch thunk of SGPropertyDescription.__allocating_init(name:type:visible:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi45_(uint64_t a1)
{
  *(void *)a1 = 11;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0x8C00000000000000;
  return result;
}

void *Signposts.subsystem.unsafeMutableAddressor()
{
  return &static Signposts.subsystem;
}

const char *Signposts.Category.material.unsafeMutableAddressor()
{
  return "Material";
}

char **Signposts.Names.transform.unsafeMutableAddressor()
{
  return &static Signposts.Names.transform;
}

void *Signposts.Category.api.unsafeMutableAddressor()
{
  return &static Signposts.Category.api;
}

char **Signposts.Events.materialInit.unsafeMutableAddressor()
{
  return &static Signposts.Events.materialInit;
}

char **Signposts.Events.archiveInit.unsafeMutableAddressor()
{
  return &static Signposts.Events.archiveInit;
}

char **Signposts.Events.archiveDecode.unsafeMutableAddressor()
{
  return &static Signposts.Events.archiveDecode;
}

char **Signposts.Events.libraryFromMaterial.unsafeMutableAddressor()
{
  return &static Signposts.Events.libraryFromMaterial;
}

unint64_t static Signposts.subsystem.getter()
{
  return 0xD000000000000015;
}

const char *Signposts.Category.graphCompiler.unsafeMutableAddressor()
{
  return "GraphCompiler";
}

uint64_t static Signposts.Category.graphCompiler.getter()
{
  return 0x6D6F436870617247;
}

const char *Signposts.Category.sourceBackend.unsafeMutableAddressor()
{
  return "SourceBackend";
}

uint64_t static Signposts.Category.sourceBackend.getter()
{
  return 0x6142656372756F53;
}

void *Signposts.Category.stitchingBackend.unsafeMutableAddressor()
{
  return &static Signposts.Category.stitchingBackend;
}

unint64_t static Signposts.Category.stitchingBackend.getter()
{
  return 0xD000000000000010;
}

const char *Signposts.Category.metalCompile.unsafeMutableAddressor()
{
  return "MetalCompile";
}

uint64_t static Signposts.Category.metalCompile.getter()
{
  return 0x6D6F436C6174654DLL;
}

uint64_t static Signposts.Category.material.getter()
{
  return 0x6C6169726574614DLL;
}

uint64_t static Signposts.Category.api.getter()
{
  return 4804673;
}

const char *static Signposts.Names.transform.getter()
{
  return "transform";
}

char **Signposts.Names.functionGraph.unsafeMutableAddressor()
{
  return &static Signposts.Names.functionGraph;
}

const char *static Signposts.Names.functionGraph.getter()
{
  return "functionGraph";
}

char **Signposts.Names.textGen.unsafeMutableAddressor()
{
  return &static Signposts.Names.textGen;
}

const char *static Signposts.Names.textGen.getter()
{
  return "textGeneration";
}

char **Signposts.Names.metalCompile.unsafeMutableAddressor()
{
  return &static Signposts.Names.metalCompile;
}

const char *static Signposts.Names.metalCompile.getter()
{
  return "metalCompile";
}

char **Signposts.Names.supportLib.unsafeMutableAddressor()
{
  return &static Signposts.Names.supportLib;
}

const char *static Signposts.Names.supportLib.getter()
{
  return "supportLibrary";
}

char **Signposts.Names.metalStitcher.unsafeMutableAddressor()
{
  return &static Signposts.Names.metalStitcher;
}

const char *static Signposts.Names.metalStitcher.getter()
{
  return "metalStitcher";
}

char **Signposts.Names.stitchingGraph.unsafeMutableAddressor()
{
  return &static Signposts.Names.stitchingGraph;
}

const char *static Signposts.Names.stitchingGraph.getter()
{
  return "stitchingGraph";
}

char **Signposts.Names.samplerCache.unsafeMutableAddressor()
{
  return &static Signposts.Names.samplerCache;
}

const char *static Signposts.Names.samplerCache.getter()
{
  return "samplerCache";
}

char **Signposts.Events.begin.unsafeMutableAddressor()
{
  return &static Signposts.Events.begin;
}

const char *static Signposts.Events.begin.getter()
{
  return "begin";
}

char **Signposts.Events.end.unsafeMutableAddressor()
{
  return &static Signposts.Events.end;
}

const char *static Signposts.Events.end.getter()
{
  return "end";
}

char **Signposts.Events.graphInit.unsafeMutableAddressor()
{
  return &static Signposts.Events.graphInit;
}

const char *static Signposts.Events.graphInit.getter()
{
  return "graphInit";
}

const char *static Signposts.Events.materialInit.getter()
{
  return "materialInit";
}

const char *static Signposts.Events.archiveInit.getter()
{
  return "archiveInit";
}

const char *static Signposts.Events.archiveDecode.getter()
{
  return "archiveDecode";
}

const char *static Signposts.Events.libraryFromMaterial.getter()
{
  return "libraryFromMaterial";
}

ValueMetadata *type metadata accessor for Signposts()
{
  return &type metadata for Signposts;
}

ValueMetadata *type metadata accessor for Signposts.Category()
{
  return &type metadata for Signposts.Category;
}

ValueMetadata *type metadata accessor for Signposts.Names()
{
  return &type metadata for Signposts.Names;
}

ValueMetadata *type metadata accessor for Signposts.Events()
{
  return &type metadata for Signposts.Events;
}

uint64_t OrderedDictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = specialized OrderedDictionary.init(dictionaryLiteral:)(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t protocol witness for ExpressibleByDictionaryLiteral.init(dictionaryLiteral:) in conformance OrderedDictionary<A, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = specialized OrderedDictionary.init(dictionaryLiteral:)(a1, a2[2], a2[3], a2[4]);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4;
  a3[1] = v6;
  a3[2] = v8;
  return result;
}

uint64_t specialized OrderedDictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a1;
  swift_getTupleTypeMetadata2();
  uint64_t v7 = type metadata accessor for Array();
  swift_getWitnessTable();
  return specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)((char *)&v9, a2, a3, v7, a4);
}

uint64_t static _HashTable.maximumUnhashedCount.getter()
{
  return 15;
}

uint64_t static _HashTable.minimumScale.getter()
{
  return 5;
}

uint64_t static _HashTable.maximumScale.getter()
{
  return 56;
}

double static _HashTable.maximumLoadFactor.getter()
{
  return 0.75;
}

double static _HashTable.minimumLoadFactor.getter()
{
  return 0.25;
}

uint64_t static _HashTable.wordCount(forScale:)(uint64_t result)
{
  uint64_t v1 = (result << result) + 63;
  if (__OFADD__(result << result, 63))
  {
    __break(1u);
  }
  else
  {
    if (v1 < 0) {
      uint64_t v1 = (result << result) + 126;
    }
    return v1 >> 6;
  }
  return result;
}

int64_t specialized static _HashTable.scale(forCapacity:)(int64_t result)
{
  if (result < 16) {
    return 0;
  }
  double v1 = ceil((double)result / 0.75);
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v1 >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v2 = result + 1;
  if (__OFADD__(result, 1))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  if (v2 <= (uint64_t)v1) {
    uint64_t v2 = (uint64_t)v1;
  }
  return 64 - __clz(v2 - 1);
}

uint64_t specialized static _HashTable.maximumCapacity(forScale:)(uint64_t result)
{
  if (result < 5) {
    return 15;
  }
  double v1 = (double)(1 << result) * 0.75;
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v1 < 9.22337204e18) {
    return (uint64_t)v1;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized static _HashTable.minimumCapacity(forScale:)(uint64_t result)
{
  if (result < 5) {
    return 0;
  }
  double v1 = (double)(1 << result) * 0.25;
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v1 < 9.22337204e18) {
    return (uint64_t)v1;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t GraphCompiler.replaceTier1TextureGetterNodes(in:surface:geometryModifier:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return specialized GraphCompiler.replaceTier1TextureGetterNodes(in:surface:geometryModifier:)(a1, a2, a3);
}

uint64_t closure #1 in GraphCompiler.replaceTier1TextureGetterNodes(in:surface:geometryModifier:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v12 = v7;
  long long v14 = *a1;
  long long v15 = a1[1];
  *(_OWORD *)&v179[9] = *(long long *)((char *)a1 + 25);
  long long v178 = v14;
  *(_OWORD *)uint64_t v179 = v15;
  outlined init with take of NodePersonality(&v178, v181);
  uint64_t result = (uint64_t)outlined init with take of NodePersonality(v181, &v182);
  if (v182 >> 61 != 4) {
    return result;
  }
  uint64_t v17 = v182 & 0x1FFFFFFFFFFFFFFFLL;
  v182 &= 0x1FFFFFFFFFFFFFFFuLL;
  uint64_t v18 = *((void *)&v178 + 1);
  if (!*(void *)(*((void *)&v178 + 1) + 16)) {
    return result;
  }
  int64_t v118 = a7;
  uint64_t v115 = a2;
  uint64_t v19 = *(void *)(v17 + 16);
  uint64_t v20 = *(void *)(v17 + 24);
  type metadata accessor for MetalDataType();
  uint64_t result = swift_dynamicCastClass();
  if (!result) {
    return result;
  }
  uint64_t v113 = v18;
  long long v21 = *(uint64_t (**)(uint64_t))(*(void *)result + 88);
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v23 = v21(v22);
  specialized Sequence.first(where:)(v23, v19, v20, v124);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined init with take of MetalFunctionNode?((uint64_t)v124, (uint64_t)&v133, &demangling cache variable for type metadata for DataTypeProperty?);
  if (!*((void *)&v133 + 1)) {
    goto LABEL_12;
  }
  long long v135 = v133;
  uint64_t v24 = v134;
  MetalDataType.MTLTextureType.getter();
  if (v25)
  {
    long long v142 = v135;
    outlined release of String((uint64_t)&v142);
    swift_release();
    uint64_t v143 = v24;
    uint64_t v27 = &v143;
    goto LABEL_11;
  }
  ShaderGraphNode.out.getter((uint64_t)v125);
  if (v12)
  {
    long long v144 = v135;
    outlined release of String((uint64_t)&v144);
    swift_release();
    uint64_t v145 = v24;
    long long v26 = &v145;
LABEL_8:
    outlined release of [Input]((uint64_t)v26);
    swift_release_n();
    return swift_bridgeObjectRelease();
  }
  uint64_t v28 = v126;
  long long v151 = v127;
  outlined release of String((uint64_t)&v151);
  type metadata accessor for MetalDataType.Struct();
  uint64_t v29 = swift_dynamicCastClass();
  if (!v29)
  {
    lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
    swift_allocError();
    *(void *)uint64_t v54 = 0xD000000000000030;
    *(void *)(v54 + 8) = 0x800000025C4248F0;
    *(unsigned char *)(v54 + 16) = 2;
    swift_willThrow();
    swift_release();
    long long v136 = v135;
    outlined release of String((uint64_t)&v136);
    swift_release();
    uint64_t v137 = v24;
    long long v26 = &v137;
    goto LABEL_8;
  }
  uint64_t v105 = v24;
  uint64_t v30 = v29;
  lazy protocol witness table accessor for type String and conformance String();
  swift_retain();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v33 = v32;
  swift_bridgeObjectRelease();
  uint64_t v121 = *(void *)(v30 + 24);
  uint64_t v123 = *(void *)(v30 + 32);
  swift_bridgeObjectRetain();
  v34._uint64_t countAndFlagsBits = 95;
  v34._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 95;
  v36._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  v37._uint64_t countAndFlagsBits = v31;
  v37._unint64_t object = v33;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v38._uint64_t countAndFlagsBits = a4;
  v38._unint64_t object = a5;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v121;
  *(void *)(v39 + 24) = v123;
  *(void *)(v39 + 32) = v28;
  unint64_t v40 = v39 | 0x2000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_25C418EE0;
  uint64_t v42 = *a6;
  swift_retain();
  if (v42 != -1) {
    swift_once();
  }
  uint64_t v43 = *v118;
  *(void *)(v41 + 32) = 28265;
  *(void *)(v41 + 40) = 0xE200000000000000;
  *(void *)(v41 + 48) = v43;
  uint64_t v44 = *(void *)v179;
  uint64_t v180 = *(void *)v179;
  int64_t v45 = *(void *)(*(void *)v179 + 16);
  uint64_t v107 = *(void *)v179;
  if (v45)
  {
    uint64_t v119 = v41;
    swift_retain();
    outlined retain of [Input]((uint64_t)&v180);
    uint64_t v122 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45, 0);
    uint64_t v46 = v122;
    long long v47 = (uint64_t *)(v44 + 56);
    do
    {
      uint64_t v48 = *(v47 - 2);
      uint64_t v49 = *(v47 - 1);
      uint64_t v50 = *v47;
      unint64_t v52 = *(void *)(v122 + 16);
      unint64_t v51 = *(void *)(v122 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v52 >= v51 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
      }
      *(void *)(v122 + 16) = v52 + 1;
      uint64_t v53 = (void *)(v122 + 24 * v52);
      v53[4] = v49;
      v53[5] = v50;
      v53[6] = v48;
      v47 += 7;
      --v45;
    }
    while (v45);
    outlined release of [Input]((uint64_t)&v180);
    uint64_t v41 = v119;
  }
  else
  {
    swift_retain();
    uint64_t v46 = MEMORY[0x263F8EE78];
  }
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(*(void *)(v115 + 40), v41, v46, v40, v115 + 64, v115, &v128);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_bridgeObjectRelease();
  uint64_t v150 = v129;
  uint64_t v106 = v129;
  uint64_t v55 = v113;
  uint64_t v110 = *(void *)(v129 + 16);
  if (!v110) {
    goto LABEL_42;
  }
  uint64_t v108 = v129 + 32;
  swift_bridgeObjectRetain();
  uint64_t v56 = 0;
  while (2)
  {
    char v58 = (uint64_t *)(v108 + 56 * v56);
    uint64_t v59 = *v58;
    uint64_t v60 = v58[1];
    uint64_t v61 = v58[2];
    uint64_t v62 = v58[3];
    uint64_t v63 = v58[4];
    char v64 = *((unsigned char *)v58 + 40);
    uint64_t v65 = v58[6];
    *(void *)&long long v172 = v59;
    *((void *)&v172 + 1) = v60;
    uint64_t v173 = v61;
    uint64_t v174 = v62;
    uint64_t v175 = v63;
    char v176 = v64;
    uint64_t v177 = v65;
    uint64_t v66 = *(void *)(v55 + 16);
    if (!v66) {
      goto LABEL_30;
    }
    uint64_t v111 = v56;
    uint64_t v67 = (void *)(v113 + 80);
    do
    {
      uint64_t v68 = *(v67 - 6);
      uint64_t v69 = *(v67 - 5);
      uint64_t v70 = *(v67 - 4);
      uint64_t v71 = *(v67 - 2);
      char v72 = *((unsigned char *)v67 - 8);
      uint64_t v73 = *v67;
      if (v70 == v61 && *(v67 - 3) == v62)
      {
        uint64_t v57 = v62;
LABEL_28:
        uint64_t v165 = v68;
        uint64_t v166 = v69;
        uint64_t v167 = v61;
        uint64_t v168 = v57;
        uint64_t v169 = v71;
        char v170 = v72;
        uint64_t v171 = v73;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v165, &v172);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_29;
      }
      uint64_t v116 = *(v67 - 6);
      uint64_t v120 = *(v67 - 3);
      uint64_t v75 = v61;
      uint64_t v76 = v62;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v61 = v70;
        uint64_t v68 = v116;
        uint64_t v57 = v120;
        goto LABEL_28;
      }
      v67 += 7;
      --v66;
      uint64_t v62 = v76;
      uint64_t v61 = v75;
    }
    while (v66);
    uint64_t v165 = v116;
    uint64_t v166 = v69;
    uint64_t v167 = v70;
    uint64_t v168 = v120;
    uint64_t v169 = v71;
    char v170 = v72;
    uint64_t v171 = v73;
LABEL_29:
    uint64_t v56 = v111;
    uint64_t v55 = v113;
LABEL_30:
    if (++v56 != v110) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v150);
LABEL_42:
  uint64_t v149 = v130;
  uint64_t v112 = *(void *)(v130 + 16);
  if (!v112) {
    goto LABEL_59;
  }
  uint64_t v109 = v130 + 32;
  swift_bridgeObjectRetain();
  uint64_t v77 = 0;
  uint64_t v78 = v107;
  while (2)
  {
    long long v80 = (uint64_t *)(v109 + 56 * v77);
    uint64_t v81 = *v80;
    uint64_t v82 = v80[1];
    uint64_t v83 = v80[2];
    uint64_t v84 = v80[3];
    uint64_t v85 = v80[4];
    char v86 = *((unsigned char *)v80 + 40);
    uint64_t v87 = v80[6];
    v162[0] = v81;
    v162[1] = v82;
    v162[2] = v83;
    v162[3] = v84;
    v162[4] = v85;
    char v163 = v86;
    uint64_t v164 = v87;
    uint64_t v88 = *(void *)(v78 + 16);
    if (!v88) {
      goto LABEL_47;
    }
    uint64_t v114 = v77;
    uint64_t v89 = (void *)(v107 + 80);
    while (2)
    {
      uint64_t v90 = *(v89 - 6);
      uint64_t v91 = *(v89 - 5);
      uint64_t v92 = *(v89 - 4);
      uint64_t v93 = *(v89 - 2);
      char v94 = *((unsigned char *)v89 - 8);
      uint64_t v95 = *v89;
      if (v92 == v83 && *(v89 - 3) == v84)
      {
        uint64_t v79 = v84;
LABEL_45:
        uint64_t v155 = v90;
        uint64_t v156 = v91;
        uint64_t v157 = v83;
        uint64_t v158 = v79;
        uint64_t v159 = v93;
        char v160 = v94;
        uint64_t v161 = v95;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v155, (uint64_t)v162);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_46;
      }
      uint64_t v117 = *(v89 - 6);
      uint64_t v79 = *(v89 - 3);
      uint64_t v97 = v83;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v83 = v92;
        uint64_t v90 = v117;
        goto LABEL_45;
      }
      v89 += 7;
      --v88;
      uint64_t v83 = v97;
      if (v88) {
        continue;
      }
      break;
    }
    uint64_t v155 = v117;
    uint64_t v156 = v91;
    uint64_t v157 = v92;
    uint64_t v158 = v79;
    uint64_t v159 = v93;
    char v160 = v94;
    uint64_t v161 = v95;
LABEL_46:
    uint64_t v78 = v107;
    uint64_t v77 = v114;
LABEL_47:
    if (++v77 != v112) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v149);
LABEL_59:
  specialized Graph.remove(_:)(*(uint64_t *)&v179[8]);
  if (!*(void *)(v106 + 16))
  {
    lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
    swift_allocError();
    *(void *)uint64_t v104 = 0xD000000000000016;
    *(void *)(v104 + 8) = 0x800000025C424930;
    *(unsigned char *)(v104 + 16) = 2;
    swift_willThrow();
    outlined init with take of NodePersonality(&v128, &v146);
    outlined release of NodePersonality(&v146);
    outlined release of [Input]((uint64_t)&v150);
    outlined release of [Input]((uint64_t)&v149);
    swift_release();
    swift_release();
    swift_release();
    long long v138 = v135;
    outlined release of String((uint64_t)&v138);
    swift_release();
    uint64_t v139 = v105;
    long long v26 = &v139;
    goto LABEL_8;
  }
  uint64_t v98 = *(void *)(v106 + 40);
  uint64_t v99 = *(void *)(v106 + 48);
  uint64_t v100 = *(void *)(v106 + 56);
  uint64_t v101 = *(void *)(v106 + 64);
  char v102 = *(unsigned char *)(v106 + 72);
  uint64_t v103 = *(void *)(v106 + 80);
  v152[0] = *(void *)(v106 + 32);
  v152[1] = v98;
  v152[2] = v99;
  v152[3] = v100;
  v152[4] = v101;
  char v153 = v102;
  uint64_t v154 = v103;
  swift_retain();
  swift_bridgeObjectRetain();
  ShaderGraphNode.out.getter((uint64_t)v131);
  Graph.connect(_:to:)((uint64_t)v131, (unint64_t)v152);
  swift_release();
  long long v148 = v132;
  outlined release of String((uint64_t)&v148);
  swift_bridgeObjectRelease();
  swift_release();
  outlined init with take of NodePersonality(&v128, &v147);
  outlined release of NodePersonality(&v147);
  outlined release of [Input]((uint64_t)&v150);
  outlined release of [Input]((uint64_t)&v149);
  swift_release();
  swift_release();
  swift_release();
  long long v140 = v135;
  outlined release of String((uint64_t)&v140);
  swift_release();
  uint64_t v141 = v105;
  uint64_t v27 = &v141;
LABEL_11:
  outlined release of [Input]((uint64_t)v27);
LABEL_12:
  swift_bridgeObjectRelease();
  return swift_release_n();
}

void MetalStitchingBackend.generateFallbackTier1Getters(for:augmenting:library:)(uint64_t a1, uint64_t a2, void *a3)
{
}

uint64_t specialized GraphCompiler.replaceTier1TextureGetterNodes(in:surface:geometryModifier:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  long long v7 = a1[1];
  v92[0] = *a1;
  v92[1] = v7;
  long long v8 = a1[2];
  long long v9 = a1[3];
  long long v10 = a1[5];
  long long v95 = a1[4];
  long long v96 = v10;
  long long v93 = v8;
  long long v94 = v9;
  long long v11 = a1[6];
  long long v12 = a1[7];
  *(_OWORD *)((char *)v100 + 9) = *(_OWORD *)((char *)a1 + 153);
  long long v13 = a1[9];
  long long v99 = a1[8];
  v100[0] = v13;
  long long v97 = v11;
  long long v98 = v12;
  unint64_t v14 = *((void *)&v93 + 1);
  outlined retain of Graph((uint64_t)v92);
  Graph.connectedUpstreamSubgraph(rootedAt:)(a2, (uint64_t)&v45);
  unint64_t v15 = v45;
  outlined release of Graph((uint64_t)v92);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  if (one-time initialization token for surface_parameters_private != -1) {
    swift_once();
  }
  uint64_t v16 = static MetalDataType.re.surface_parameters_private;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C418EE0;
  *(void *)(inited + 32) = 7632239;
  *(void *)(inited + 40) = 0xE300000000000000;
  *(void *)(inited + 48) = v16;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = 12324;
  *(void *)(v18 + 24) = 0xE200000000000000;
  unint64_t v19 = v18 | 0x6000000000000000;
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v14, MEMORY[0x263F8EE78], inited, v19, (uint64_t)(a1 + 4), (uint64_t)a1, &v49);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v20 = *(void *)(v15 + 16);
  if (v20)
  {
    swift_bridgeObjectRetain();
    unint64_t v101 = v15;
    unint64_t v21 = v15 + 40;
    while (1)
    {
      uint64_t v23 = *(void *)v21;
      uint64_t v24 = *(void *)(v21 + 8);
      char v25 = *(unsigned char *)(v21 + 32);
      *(void *)&long long v45 = *(void *)(v21 - 8);
      unint64_t v22 = v45;
      *((void *)&v45 + 1) = v23;
      uint64_t v46 = v24;
      long long v47 = *(_OWORD *)(v21 + 16);
      LOBYTE(v48) = v25;
      outlined copy of NodePersonality(v45);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #1 in GraphCompiler.replaceTier1TextureGetterNodes(in:surface:geometryModifier:)(&v45, (uint64_t)a1, (uint64_t)&v49, 0x656361667275735FLL, (void *)0xE800000000000000, &one-time initialization token for surface_parameters_private, &static MetalDataType.re.surface_parameters_private);
      if (v4) {
        break;
      }
      outlined consume of NodePersonality(v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v21 += 48;
      if (!--v20)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    outlined consume of NodePersonality(v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of NodePersonality(&v49, &v82);
    outlined release of NodePersonality(&v82);
    uint64_t v81 = v50;
    outlined release of [Input]((uint64_t)&v81);
    uint64_t v80 = v51;
    uint64_t v42 = &v80;
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    outlined init with take of MetalFunctionNode?(a3, (uint64_t)&v55, &demangling cache variable for type metadata for ShaderGraphNode?);
    if (!*((void *)&v55 + 1))
    {
      outlined init with take of NodePersonality(&v49, &v79);
      outlined release of NodePersonality(&v79);
      uint64_t v78 = v50;
      outlined release of [Input]((uint64_t)&v78);
      uint64_t v77 = v51;
      return outlined release of [Input]((uint64_t)&v77);
    }
    long long v57 = v55;
    v58[0] = v56[0];
    *(_OWORD *)((char *)v58 + 9) = *(_OWORD *)((char *)v56 + 9);
    long long v26 = a1[9];
    long long v90 = a1[8];
    v91[0] = v26;
    *(_OWORD *)((char *)v91 + 9) = *(_OWORD *)((char *)a1 + 153);
    long long v27 = a1[5];
    long long v86 = a1[4];
    long long v87 = v27;
    long long v28 = a1[7];
    long long v88 = a1[6];
    long long v89 = v28;
    long long v29 = a1[1];
    v83[0] = *a1;
    v83[1] = v29;
    long long v30 = a1[3];
    long long v84 = a1[2];
    long long v85 = v30;
    unint64_t v101 = *((void *)&v84 + 1);
    outlined retain of ShaderGraphNode?(a3);
    outlined retain of Graph((uint64_t)v83);
    Graph.connectedUpstreamSubgraph(rootedAt:)((uint64_t)&v57, (uint64_t)&v45);
    unint64_t v31 = v45;
    outlined release of Graph((uint64_t)v83);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    if (one-time initialization token for geometry_parameters_private != -1) {
      swift_once();
    }
    uint64_t v32 = static MetalDataType.re.geometry_parameters_private;
    uint64_t v33 = swift_initStackObject();
    *(_OWORD *)(v33 + 16) = xmmword_25C418EE0;
    *(void *)(v33 + 32) = 7632239;
    *(void *)(v33 + 40) = 0xE300000000000000;
    *(void *)(v33 + 48) = v32;
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = 12324;
    *(void *)(v34 + 24) = 0xE200000000000000;
    unint64_t v35 = v34 | 0x6000000000000000;
    swift_retain();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v101, MEMORY[0x263F8EE78], v33, v35, (uint64_t)(a1 + 4), (uint64_t)a1, &v52);
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t v36 = *(void *)(v31 + 16);
    if (v36)
    {
      swift_bridgeObjectRetain();
      unint64_t v101 = v31;
      unint64_t v37 = v31 + 40;
      while (1)
      {
        uint64_t v38 = *(void *)v37;
        uint64_t v40 = *(void *)(v37 + 8);
        char v41 = *(unsigned char *)(v37 + 32);
        *(void *)&long long v45 = *(void *)(v37 - 8);
        unint64_t v39 = v45;
        *((void *)&v45 + 1) = v38;
        uint64_t v46 = v40;
        long long v47 = *(_OWORD *)(v37 + 16);
        LOBYTE(v48) = v41;
        outlined copy of NodePersonality(v45);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #1 in GraphCompiler.replaceTier1TextureGetterNodes(in:surface:geometryModifier:)(&v45, (uint64_t)a1, (uint64_t)&v52, 0x7274656D6F65675FLL, (void *)0xE900000000000079, &one-time initialization token for geometry_parameters_private, &static MetalDataType.re.geometry_parameters_private);
        if (v4) {
          break;
        }
        outlined consume of NodePersonality(v39);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v37 += 48;
        if (!--v36)
        {
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
      }
      outlined consume of NodePersonality(v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(&v49, &v76);
      outlined release of NodePersonality(&v76);
      uint64_t v75 = v50;
      outlined release of [Input]((uint64_t)&v75);
      uint64_t v74 = v51;
      outlined release of [Input]((uint64_t)&v74);
      outlined init with take of NodePersonality(&v57, &v62);
      outlined release of NodePersonality(&v62);
      uint64_t v63 = *((void *)&v57 + 1);
      outlined release of [Input]((uint64_t)&v63);
      uint64_t v64 = *(void *)&v58[0];
      outlined release of [Input]((uint64_t)&v64);
      outlined init with take of NodePersonality(&v52, &v73);
      outlined release of NodePersonality(&v73);
      uint64_t v72 = v53;
      outlined release of [Input]((uint64_t)&v72);
      uint64_t v71 = v54;
      uint64_t v42 = &v71;
    }
    else
    {
LABEL_16:
      outlined init with take of NodePersonality(&v49, &v70);
      outlined release of NodePersonality(&v70);
      uint64_t v69 = v50;
      outlined release of [Input]((uint64_t)&v69);
      uint64_t v68 = v51;
      outlined release of [Input]((uint64_t)&v68);
      outlined init with take of NodePersonality(&v57, &v59);
      outlined release of NodePersonality(&v59);
      uint64_t v60 = *((void *)&v57 + 1);
      outlined release of [Input]((uint64_t)&v60);
      uint64_t v61 = *(void *)&v58[0];
      outlined release of [Input]((uint64_t)&v61);
      outlined init with take of NodePersonality(&v52, &v67);
      outlined release of NodePersonality(&v67);
      uint64_t v66 = v53;
      outlined release of [Input]((uint64_t)&v66);
      uint64_t v65 = v54;
      uint64_t v42 = &v65;
    }
  }
  outlined release of [Input]((uint64_t)v42);
  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in MetalStitchingBackend.generateFallbackTier1Getters(for:augmenting:library:)(long long *a1, int a2, uint64_t a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, void *a8)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v14 = *((void *)a1 + 2);
  uint64_t v13 = *((void *)a1 + 3);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v15 = MetalDataType.MTLTextureType.getter();
  if (v16)
  {
    uint64_t v33 = (void *)*((void *)a1 + 5);
    long long v93 = *a1;
    id v34 = specialized MetalStitchingBackend.specializeGetter(for:field:offset:library:)(a3, v93, *((void **)&v93 + 1), v14, v33, a2, a8);
    if (v8)
    {
      outlined release of String((uint64_t)&v93);
      swift_release();
      uint64_t v92 = v13;
      unint64_t v37 = &v92;
    }
    else
    {
      specialized OrderedDictionary.subscript.setter(v36, (uint64_t)v34, v35);
      outlined release of String((uint64_t)&v93);
      swift_release();
      uint64_t v91 = *((void *)a1 + 3);
      unint64_t v37 = &v91;
    }
  }
  else
  {
    uint64_t v74 = a1;
    id v80 = a8;
    uint64_t v17 = v15;
    unint64_t v18 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v19 = MEMORY[0x263F8D310];
    id v81 = (id)StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    unint64_t v82 = v20;
    unint64_t v71 = v18;
    unint64_t v72 = v18;
    uint64_t v69 = v19;
    unint64_t v70 = v18;
    uint64_t v21 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    unint64_t v24 = *(void *)(a3 + 32);
    id v81 = *(id *)(a3 + 24);
    unint64_t v82 = v24;
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = 95;
    v25._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._uint64_t countAndFlagsBits = 95;
    v27._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    v28._uint64_t countAndFlagsBits = v21;
    v28._unint64_t object = v23;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    uint64_t v29 = v82;
    id v30 = v81;
    switch(v17)
    {
      case 2:
        unsigned int v73 = *a4;
        if (*a4 == -1)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
        }
        unint64_t v31 = (void *)0xD000000000000028;
        ++*a4;
        id v81 = 0;
        unint64_t v82 = 0xE000000000000000;
        _StringGuts.grow(_:)(37);
        swift_bridgeObjectRelease();
        uint64_t v32 = "lookup_tier1_textureSlot_texture2d_float";
        break;
      case 3:
        unsigned int v73 = *a6;
        if (*a6 == -1) {
          goto LABEL_26;
        }
        ++*a6;
        id v81 = 0;
        unint64_t v82 = 0xE000000000000000;
        _StringGuts.grow(_:)(42);
        swift_bridgeObjectRelease();
        unint64_t v31 = (void *)0xD00000000000002DLL;
        uint64_t v32 = "lookup_tier1_textureSlot_texture2darray_float";
        break;
      case 5:
        unsigned int v73 = *a7;
        if (*a7 == -1) {
          goto LABEL_27;
        }
        ++*a7;
        id v81 = 0;
        unint64_t v82 = 0xE000000000000000;
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        unint64_t v31 = (void *)0xD00000000000002ALL;
        uint64_t v32 = "lookup_tier1_textureSlot_texturecube_float";
        break;
      case 7:
        unsigned int v73 = *a5;
        if (*a5 == -1) {
          goto LABEL_28;
        }
        unint64_t v31 = (void *)0xD000000000000028;
        ++*a5;
        id v81 = 0;
        unint64_t v82 = 0xE000000000000000;
        _StringGuts.grow(_:)(37);
        swift_bridgeObjectRelease();
        uint64_t v32 = "lookup_tier1_textureSlot_texture3d_float";
        break;
      default:
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors();
        swift_allocError();
        *(_OWORD *)uint64_t v38 = xmmword_25C41A120;
        *(unsigned char *)(v38 + 16) = 6;
        swift_willThrow();
        long long v90 = *a1;
        outlined release of String((uint64_t)&v90);
        swift_release();
        uint64_t v89 = *((void *)a1 + 3);
        unint64_t v37 = &v89;
        return outlined release of [Input]((uint64_t)v37);
    }
    unint64_t v39 = (unint64_t)(v32 - 32) | 0x8000000000000000;
    id v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128B8]), sel_init, v69, v70, v71, v72);
    uint64_t v78 = v30;
    swift_bridgeObjectRetain();
    v41._uint64_t countAndFlagsBits = 0x656361667275735FLL;
    v41._unint64_t object = (void *)0xE800000000000000;
    String.append(_:)(v41);
    uint64_t v42 = (uint64_t)v30;
    uint64_t v43 = (void *)MEMORY[0x261183E60](v30, v29);
    objc_msgSend(v40, sel_setSpecializedName_, v43);

    id v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128B0]), sel_init);
    objc_msgSend(v40, sel_setConstantValues_, v44);

    unint64_t v82 = v39;
    swift_bridgeObjectRetain();
    v45._uint64_t countAndFlagsBits = 0x656361667275735FLL;
    v45._unint64_t object = (void *)0xE800000000000000;
    String.append(_:)(v45);
    uint64_t v46 = (void *)MEMORY[0x261183E60](v31, v39);
    swift_bridgeObjectRelease();
    objc_msgSend(v40, sel_setName_, v46);

    id v81 = (id)__PAIR64__(HIDWORD(v31), v73);
    id v47 = objc_msgSend(v40, sel_constantValues);
    if (v47)
    {
      uint64_t v48 = v47;
      objc_msgSend(v47, sel_setConstantValue_type_atIndex_, &v81, 33, 100);
    }
    id v81 = 0;
    id v49 = objc_msgSend(v80, sel_newFunctionWithDescriptor_error_, v40, &v81);
    id v50 = v81;
    if (v49)
    {
      uint64_t v51 = (uint64_t)v49;
      swift_unknownObjectRetain();
      id v52 = v50;
      specialized OrderedDictionary.subscript.setter(v51, v42, v29);
      id v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128B8]), sel_init);
      id v81 = v78;
      unint64_t v82 = v29;
      swift_bridgeObjectRetain();
      v54._uint64_t countAndFlagsBits = 0x7274656D6F65675FLL;
      v54._unint64_t object = (void *)0xE900000000000079;
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      uint64_t v55 = (uint64_t)v81;
      uint64_t v56 = v82;
      long long v57 = (void *)MEMORY[0x261183E60](v81, v82);
      objc_msgSend(v53, sel_setSpecializedName_, v57);

      id v58 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128B0]), sel_init);
      objc_msgSend(v53, sel_setConstantValues_, v58);

      id v81 = v31;
      unint64_t v82 = v39;
      swift_bridgeObjectRetain();
      v59._uint64_t countAndFlagsBits = 0x7274656D6F65675FLL;
      v59._unint64_t object = (void *)0xE900000000000079;
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      uint64_t v60 = (void *)MEMORY[0x261183E60](v81, v82);
      swift_bridgeObjectRelease();
      objc_msgSend(v53, sel_setName_, v60);

      LODWORD(v81) = v73;
      id v61 = objc_msgSend(v53, sel_constantValues);
      if (v61)
      {
        unint64_t v62 = v61;
        objc_msgSend(v61, sel_setConstantValue_type_atIndex_, &v81, 33, 100);
      }
      id v81 = 0;
      id v63 = objc_msgSend(v80, sel_newFunctionWithDescriptor_error_, v53, &v81);
      id v64 = v81;
      if (v63)
      {
        uint64_t v65 = swift_unknownObjectRetain();
        specialized OrderedDictionary.subscript.setter(v65, v55, v56);
        swift_unknownObjectRelease();

        swift_unknownObjectRelease();
        long long v84 = *v74;
        outlined release of String((uint64_t)&v84);
        swift_release();
        uint64_t v83 = *((void *)v74 + 3);
        unint64_t v37 = &v83;
      }
      else
      {
        unint64_t v67 = v64;
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_unknownObjectRelease();

        long long v86 = *v74;
        outlined release of String((uint64_t)&v86);
        swift_release();
        uint64_t v85 = *((void *)v74 + 3);
        unint64_t v37 = &v85;
      }
    }
    else
    {
      id v66 = v81;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)();

      swift_willThrow();
      long long v88 = *v74;
      outlined release of String((uint64_t)&v88);
      swift_release();
      uint64_t v87 = *((void *)v74 + 3);
      unint64_t v37 = &v87;
    }
  }
  return outlined release of [Input]((uint64_t)v37);
}

void specialized MetalStitchingBackend.generateFallbackTier1Getters(for:augmenting:library:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  type metadata accessor for MetalDataType.Struct();
  uint64_t v7 = swift_dynamicCastClass();
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    swift_beginAccess();
    uint64_t v9 = *(void *)(v8 + 16);
    uint64_t v46 = (void *)MEMORY[0x263F8EE78];
    int v34 = 0;
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      long long v11 = (void *)(v9 + 72);
      do
      {
        uint64_t v12 = *(v11 - 5);
        uint64_t v13 = *(v11 - 4);
        uint64_t v14 = *(v11 - 3);
        uint64_t v15 = *(v11 - 2);
        char v16 = *((unsigned char *)v11 - 8);
        uint64_t v17 = *v11;
        v11 += 6;
        v43[0] = v12;
        v43[1] = v13;
        v43[2] = v14;
        v43[3] = v15;
        char v44 = v16;
        uint64_t v45 = v17;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        specialized closure #1 in calculateOffsets(for:)((uint64_t)v43, &v34, &v46);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      unint64_t v18 = v46;
      uint64_t v19 = v46[2];
      if (v19)
      {
LABEL_6:
        swift_bridgeObjectRetain();
        unint64_t v20 = (int *)(v18 + 10);
        while (1)
        {
          uint64_t v21 = *((void *)v20 - 4);
          uint64_t v22 = *((void *)v20 - 3);
          int v23 = *v20;
          uint64_t v24 = *((void *)v20 - 1);
          char v25 = *((unsigned char *)v20 - 16);
          uint64_t v26 = *((void *)v20 - 5);
          *(void *)&long long v38 = *((void *)v20 - 6);
          *((void *)&v38 + 1) = v26;
          uint64_t v39 = v21;
          uint64_t v40 = v22;
          char v41 = v25;
          uint64_t v42 = v24;
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          specialized closure #1 in MetalStitchingBackend.generateFallbackTier1Getters(for:augmenting:library:)(&v38, v23, v8, (unsigned int *)&v37 + 1, (unsigned int *)&v37, (unsigned int *)&v36 + 1, (unsigned int *)&v36, a3);
          if (v4) {
            break;
          }
          v20 += 14;
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          if (!--v19)
          {
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_17;
          }
        }
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_17;
      }
    }
    else
    {
      swift_retain();
      unint64_t v18 = (void *)MEMORY[0x263F8EE78];
      uint64_t v19 = *(void *)(MEMORY[0x263F8EE78] + 16);
      if (v19) {
        goto LABEL_6;
      }
    }
    swift_release();
LABEL_17:
    swift_bridgeObjectRelease();
    return;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)logger);
  swift_retain();
  Swift::String v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    id v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    v35[0] = v31;
    *(_DWORD *)id v30 = 136315138;
    uint64_t v32 = *(void *)(a1 + 24);
    unint64_t v33 = *(void *)(a1 + 32);
    swift_bridgeObjectRetain();
    uint64_t v46 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25C27E000, v28, v29, "Can not generate getters for a non-struct type %s", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261185880](v31, -1, -1);
    MEMORY[0x261185880](v30, -1, -1);
  }
  else
  {

    swift_release();
  }
}

unint64_t lazy protocol witness table accessor for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors;
  if (!lazy protocol witness table cache variable for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MetalStitchingBackendErrors and conformance MetalStitchingBackendErrors);
  }
  return result;
}

uint64_t sub_25C3178A0()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t outlined retain of ShaderGraphNode?(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type GraphCompilerErrors and conformance GraphCompilerErrors;
  if (!lazy protocol witness table cache variable for type GraphCompilerErrors and conformance GraphCompilerErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphCompilerErrors and conformance GraphCompilerErrors);
  }
  return result;
}

uint64_t sub_25C317964()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t OrderedSet._UnstableInternals.base.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedSet._UnstableInternals.base.setter(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t result = swift_release();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OrderedSet._UnstableInternals.base.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedSet.__unstable.getter(uint64_t a1)
{
  return a1;
}

uint64_t key path getter for OrderedSet.__unstable : <A>OrderedSet<A>@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = OrderedSet._UnstableInternals.init(_:)(*a1, a1[1]);
  a2[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t key path setter for OrderedSet.__unstable : <A>OrderedSet<A>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  OrderedSet._UnstableInternals.init(_:)(*a2, a2[1]);
  swift_retain();
  swift_retain();
  uint64_t v5 = OrderedSet.init()();
  uint64_t v7 = v6;
  swift_release();
  swift_release();
  *a2 = v5;
  a2[1] = v7;
  v9[0] = v3;
  v9[1] = v4;
  $defer #1 <A>() in OrderedSet.__unstable.modify(a2, v9);
  swift_release();
  return swift_release();
}

void (*OrderedSet.__unstable.modify(void *a1, uint64_t a2))(void **a1)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  uint64_t v6 = *v2;
  uint64_t v7 = v2[1];
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  v5[2] = v2;
  v5[3] = v8;
  v5[4] = v9;
  void *v5 = v6;
  v5[1] = v7;
  uint64_t *v2 = OrderedSet.init()();
  v2[1] = v10;
  return OrderedSet.__unstable.modify;
}

void OrderedSet.__unstable.modify(void **a1)
{
  double v1 = *a1;
  $defer #1 <A>() in OrderedSet.__unstable.modify((void *)(*a1)[2], *a1);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t $defer #1 <A>() in OrderedSet.__unstable.modify(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_retain();
  swift_retain();
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.__unstable.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  swift_retain();
  uint64_t v5 = OrderedSet.init()();
  uint64_t v7 = v6;
  swift_release();
  swift_release();
  uint64_t *v2 = v5;
  v2[1] = v7;
  v9[0] = a1;
  v9[1] = a2;
  $defer #1 <A>() in OrderedSet.__unstable.modify(v2, v9);
  swift_release_n();
  return swift_release_n();
}

uint64_t sub_25C317D84()
{
  return 16;
}

__n128 sub_25C317D90(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata instantiation function for OrderedSet._UnstableInternals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t destroy for OrderedSet._UnstableInternals()
{
  swift_release();
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for OrderedSet._UnstableInternals(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for OrderedSet._UnstableInternals(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for OrderedSet._UnstableInternals(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for OrderedSet._UnstableInternals()
{
  return __swift_instantiateGenericMetadata();
}

Swift::Void __swiftcall OrderedDictionary.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t OrderedDictionary.remove(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for OrderedSet();
  OrderedSet.remove(at:)(a3, v4);
  type metadata accessor for ContiguousArray();
  return ContiguousArray.remove(at:)();
}

uint64_t OrderedDictionary.removeSubrange(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OrderedSet();
  OrderedSet.removeSubrange(_:)(a1, a2, v4);
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  return RangeReplaceableCollection.removeSubrange(_:)();
}

uint64_t OrderedDictionary.removeSubrange<A>(_:)()
{
  type metadata accessor for OrderedDictionary.Elements();
  swift_getWitnessTable();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  return OrderedDictionary.removeSubrange(_:)(v1, v2);
}

uint64_t OrderedDictionary.removeLast()(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  uint64_t result = Collection.isEmpty.getter();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = ContiguousArray.count.getter();
    if (!__OFSUB__(result, 1)) {
      return OrderedDictionary.remove(at:)(a1, a2, result - 1);
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedDictionary.removeLast(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else if (ContiguousArray.count.getter() >= a1)
  {
    type metadata accessor for OrderedSet();
    OrderedSet.removeLast(_:)(a1);
    type metadata accessor for ContiguousArray();
    swift_getWitnessTable();
    swift_getWitnessTable();
    RangeReplaceableCollection<>.removeLast(_:)();
    return;
  }
  __break(1u);
}

uint64_t OrderedDictionary.removeFirst()(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  uint64_t result = Collection.isEmpty.getter();
  if ((result & 1) == 0) {
    return OrderedDictionary.remove(at:)(a1, a2, 0);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedDictionary.removeFirst(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else if (ContiguousArray.count.getter() >= a1)
  {
    type metadata accessor for OrderedSet();
    OrderedSet.removeFirst(_:)(a1);
    type metadata accessor for ContiguousArray();
    swift_getWitnessTable();
    RangeReplaceableCollection.removeFirst(_:)(a1);
    return;
  }
  __break(1u);
}

void *OrderedDictionary.removeAll(where:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 24);
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v8 + 16);
  v12[0] = v8
         + ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80));
  uint64_t v10 = v12[0];
  v12[1] = v9;
  closure #1 in OrderedDictionary.removeAll(where:)(v12, a1, a2, v7, &v13);
  if (v4) {
    return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v12, v10, v9);
  }
  $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v12, v10, v9);
  v12[0] = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeFrom<Int>);
  lazy protocol witness table accessor for type PartialRangeFrom<Int> and conformance PartialRangeFrom<A>();
  return (void *)OrderedDictionary.removeSubrange<A>(_:)();
}

Swift::Void __swiftcall OrderedDictionary.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t closure #1 in OrderedDictionary.removeAll(where:)@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(char *, char *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = type metadata accessor for OrderedSet();
  uint64_t result = OrderedSet._halfStablePartition<A>(values:by:)(v10, v11, a2, a3, v12, a4);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PartialRangeFrom<Int> and conformance PartialRangeFrom<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PartialRangeFrom<Int> and conformance PartialRangeFrom<A>;
  if (!lazy protocol witness table cache variable for type PartialRangeFrom<Int> and conformance PartialRangeFrom<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PartialRangeFrom<Int>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialRangeFrom<Int> and conformance PartialRangeFrom<A>);
  }
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, long long *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v6 = swift_bridgeObjectRetain() + 40;
  uint64_t v47 = v4 - 1;
  for (uint64_t i = (void *)MEMORY[0x263F8EE78]; ; uint64_t i = v9)
  {
    unint64_t v8 = *(void *)(v6 - 8);
    uint64_t v7 = *(void *)v6;
    uint64_t v9 = *(void **)(v6 + 8);
    char v10 = *(unsigned char *)(v6 + 32);
    unint64_t v63 = v8;
    uint64_t v64 = v7;
    uint64_t v65 = v9;
    long long v66 = *(_OWORD *)(v6 + 16);
    char v67 = v10;
    long long v11 = a2[9];
    long long v57 = a2[8];
    v58[0] = v11;
    *(_OWORD *)((char *)v58 + 9) = *(long long *)((char *)a2 + 153);
    long long v12 = a2[5];
    long long v53 = a2[4];
    long long v54 = v12;
    long long v13 = a2[7];
    long long v55 = a2[6];
    long long v56 = v13;
    long long v14 = a2[1];
    long long v49 = *a2;
    long long v50 = v14;
    long long v15 = a2[3];
    long long v51 = a2[2];
    long long v52 = v15;
    outlined copy of NodePersonality(v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of Graph((uint64_t)&v49);
    ShaderGraphNode.out.getter((uint64_t)&v59);
    if (v3)
    {
      outlined release of Graph((uint64_t)&v49);
      outlined consume of NodePersonality(v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (unint64_t)v9;
    }
    uint64_t v46 = v6;
    uint64_t v16 = v50;
    unint64_t result = specialized OrderedSet._find(_:)(v59, v49, *((void **)&v49 + 1));
    if (v18)
    {
      uint64_t v26 = MEMORY[0x263F8EE78];
      goto LABEL_11;
    }
    if ((result & 0x8000000000000000) != 0) {
      break;
    }
    if (result >= *(void *)(v16 + 16)) {
      goto LABEL_25;
    }
    uint64_t v68 = 0;
    uint64_t v19 = (void *)(v16 + 48 * result);
    uint64_t v20 = v19[4];
    uint64_t v21 = v19[5];
    uint64_t v22 = v19[6];
    long long v62 = v60;
    swift_retain();
    swift_retain();
    swift_retain();
    outlined retain of String((uint64_t)&v62);
    swift_retain();
    specialized OrderedDictionary.subscript.getter((uint64_t)&v59, v20, v21, v22);
    uint64_t v24 = v23;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of String((uint64_t)&v62);
    if (v24)
    {
      swift_retain();
      outlined retain of String((uint64_t)&v62);
      uint64_t v25 = v68;
      uint64_t v26 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v24, &v59);
      uint64_t v3 = v25;
      swift_release();
      outlined release of String((uint64_t)&v62);
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v26 = MEMORY[0x263F8EE78];
      uint64_t v3 = v68;
    }
LABEL_11:
    swift_release();
    long long v61 = v60;
    outlined release of String((uint64_t)&v61);
    outlined release of Graph((uint64_t)&v49);
    if (*(void *)(v26 + 16))
    {
      uint64_t v68 = v3;
      uint64_t v27 = *(void *)(v26 + 40);
      uint64_t v28 = *(void *)(v26 + 56);
      uint64_t v44 = *(void *)(v26 + 48);
      uint64_t v45 = *(void *)(v26 + 32);
      uint64_t v43 = *(void *)(v26 + 64);
      char v42 = *(unsigned char *)(v26 + 72);
      uint64_t v29 = *(void *)(v26 + 96);
      uint64_t v40 = *(void *)(v26 + 88);
      uint64_t v41 = *(void *)(v26 + 80);
      uint64_t v30 = *(void *)(v26 + 112);
      uint64_t v38 = *(void *)(v26 + 120);
      uint64_t v39 = *(void *)(v26 + 104);
      char v37 = *(unsigned char *)(v26 + 128);
      uint64_t v36 = *(void *)(v26 + 136);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v9 = i;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, i[2] + 1, 1, i);
      }
      unint64_t v32 = v9[2];
      unint64_t v31 = v9[3];
      if (v32 >= v31 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v9);
      }
      void v9[2] = v32 + 1;
      unint64_t v33 = &v9[14 * v32];
      v33[4] = v45;
      v33[5] = v27;
      v33[6] = v44;
      v33[7] = v28;
      v33[8] = v43;
      *((unsigned char *)v33 + 72) = v42;
      v33[10] = v41;
      v33[11] = v40;
      _OWORD v33[12] = v29;
      v33[13] = v39;
      v33[14] = v30;
      v33[15] = v38;
      *((unsigned char *)v33 + 128) = v37;
      v33[17] = v36;
      uint64_t v3 = v68;
      uint64_t v35 = v46;
      uint64_t v34 = v47;
      if (!v47)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        return (unint64_t)v9;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v9 = i;
      uint64_t v35 = v46;
      uint64_t v34 = v47;
      if (!v47) {
        goto LABEL_22;
      }
    }
    uint64_t v6 = v35 + 48;
    uint64_t v47 = v34 - 1;
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v9 = MEMORY[0x263F8EE78];
  unint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    if (*(void *)(a2 + 16) >= v4) {
      uint64_t v6 = *(void *)(a3 + 16);
    }
    else {
      uint64_t v6 = *(void *)(a2 + 16);
    }
    swift_retain();
    swift_retain();
    uint64_t result = swift_retain();
    uint64_t v7 = (unsigned char *)(a3 + 40);
    while (v6)
    {
      if (*v7 == 1)
      {
        uint64_t v8 = outlined copy of MetalLibrary(*((void *)v7 - 1), 1);
        MEMORY[0x261184120](v8);
        if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = specialized Array._endMutation()();
      }
      --v6;
      v7 += 16;
      if (!--v4)
      {
        swift_release();
        swift_release();
        swift_release();
        return v9;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  uint64_t v38;

  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = *(void *)(a2 + 16);
    swift_retain();
    swift_retain();
    uint64_t result = swift_retain();
    uint64_t v8 = 0;
    uint64_t v26 = a3 + 80;
    uint64_t v9 = (void *)MEMORY[0x263F8EE78];
    uint64_t v25 = v5;
    while (v6)
    {
      char v10 = *(void *)(v26 + v8 - 48);
      long long v11 = *(void *)(v26 + v8 - 24);
      long long v12 = *(void *)(v26 + v8 - 16);
      long long v13 = *(void *)(v26 + v8);
      if (*(void *)(v26 + v8 - 40))
      {
        unint64_t v31 = v6;
        long long v14 = *(void *)(v5 + v8 + 40);
        unint64_t v33 = *(void *)(v5 + v8 + 32);
        uint64_t v34 = v3;
        uint64_t v38 = *(void *)(v26 + v8 - 40);
        long long v15 = *(void *)(v5 + v8 + 56);
        uint64_t v30 = *(void *)(v5 + v8 + 48);
        uint64_t v29 = *(void *)(v5 + v8 + 64);
        uint64_t v28 = *(unsigned char *)(v5 + v8 + 72);
        uint64_t v27 = *(void *)(v5 + v8 + 80);
        uint64_t v36 = v9;
        uint64_t v16 = *(void *)(v26 + v8 - 8);
        uint64_t v17 = *(void *)(v26 + v8 - 32);
        swift_retain();
        swift_bridgeObjectRetain();
        outlined copy of Output?(v10, v38);
        swift_retain();
        swift_bridgeObjectRetain();
        outlined copy of Output?(v10, v38);
        swift_bridgeObjectRelease();
        unint64_t v32 = v14;
        swift_release();
        uint64_t v35 = v17;
        char v37 = v16;
        char v18 = v36;
        outlined consume of Input?(v10, v38);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
          char v18 = (void *)result;
        }
        uint64_t v19 = v18;
        uint64_t v20 = v18[2];
        uint64_t v21 = v19;
        uint64_t v22 = v19[3];
        uint64_t v23 = v13;
        uint64_t v3 = v34;
        if (v20 >= v22 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v20 + 1, 1, v21);
          uint64_t v23 = v13;
          uint64_t v21 = (void *)result;
        }
        v21[2] = v20 + 1;
        uint64_t v24 = &v21[14 * v20];
        uint64_t v9 = v21;
        v24[4] = v10;
        v24[5] = v38;
        v24[6] = v35;
        v24[7] = v11;
        v24[8] = v12;
        *((unsigned char *)v24 + 72) = v37 & 1;
        v24[10] = v23;
        v24[11] = v33;
        uint64_t v6 = v31;
        v24[12] = v32;
        v24[13] = v30;
        v24[14] = v15;
        v24[15] = v29;
        *((unsigned char *)v24 + 128) = v28;
        v24[17] = v27;
        uint64_t v5 = v25;
      }
      else
      {
        uint64_t result = outlined consume of Input?(*(void *)(v26 + v8 - 48), 0);
      }
      --v6;
      v8 += 56;
      if (!--v3)
      {
        swift_release();
        swift_release();
        swift_release();
        return (uint64_t)v9;
      }
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph09RESurfaceD12FunctionNodeCG_AF0gH2IDVs5NeverOTg504_s11d103Graph0B8CompilerV08functionB033_137984365F15B3FD94CB2D26CA095C9FLL3forAA05MetalA7ProgramCAA0B0V_tKFAA14gH73IDVAA09RESurfaceaoP0Ccfu_33_56b5a88cd278ec4ee448dc3b0c4fd19cAnLTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    if (!v2) {
      return v3;
    }
    uint64_t v10 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v10;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = MEMORY[0x2611848A0](v5, a1);
      }
      else
      {
        uint64_t v6 = *(void *)(a1 + 8 * v5 + 32);
        swift_retain();
      }
      swift_beginAccess();
      uint64_t v7 = *(void *)(v6 + 88);
      swift_release();
      unint64_t v9 = *(void *)(v10 + 16);
      unint64_t v8 = *(void *)(v10 + 24);
      if (v9 >= v8 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      }
      ++v5;
      *(void *)(v10 + 16) = v9 + 1;
      *(void *)(v10 + 8 * v9 + 32) = v7;
      if (v2 == v5) {
        return v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence.forEach(_:)(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v3 = (void *)a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = (void *)a1[3];
  uint64_t v113 = a1[4];
  uint64_t v114 = v6;
  uint64_t v97 = v113;
  long long v98 = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of [Input]((uint64_t)&v114);
  outlined retain of [Input]((uint64_t)&v113);
  uint64_t v65 = v5;
  if (!v6[2])
  {
LABEL_73:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  uint64_t v68 = v4;
  long long v66 = v3;
  char v67 = v3 + 4;
  uint64_t v63 = v4 + 32;
  uint64_t v64 = (void *)(v4 + 16);
  uint64_t v62 = v5 + 32;
  id v58 = v3 + 7;
  while (1)
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v7 = v6[2];
      if (!v7) {
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
      uint64_t v7 = v6[2];
      if (!v7)
      {
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
    }
    uint64_t v8 = v7 - 1;
    unint64_t v9 = &v6[7 * v8];
    long long v10 = *((_OWORD *)v9 + 2);
    long long v11 = *((_OWORD *)v9 + 3);
    long long v12 = *((_OWORD *)v9 + 4);
    Swift::UInt v118 = v9[10];
    long long v116 = v11;
    long long v117 = v12;
    long long v115 = v10;
    uint64_t v13 = v9[4];
    uint64_t v14 = v9[6];
    uint64_t v74 = v9[7];
    uint64_t v75 = v9[5];
    uint64_t v15 = v9[8];
    char v16 = *((unsigned char *)v9 + 72);
    uint64_t v17 = v9[10];
    v6[2] = v8;
    long long v98 = v6;
    uint64_t v18 = v97;
    uint64_t v72 = v14;
    uint64_t v73 = v13;
    uint64_t v71 = v15;
    char v70 = v16;
    uint64_t v69 = v17;
    if (*(void *)(v97 + 16))
    {
      Hasher.init(_seed:)();
      uint64_t v120 = v115;
      Hasher._combine(_:)(v115);
      uint64_t v19 = *((void *)&v115 + 1);
      uint64_t v20 = *(void (**)(void *))(**((void **)&v115 + 1) + 120);
      swift_retain();
      v20(v87);
      swift_release();
      long long v21 = v116;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::UInt v22 = v117;
      char v80 = BYTE8(v117);
      uint64_t v76 = v117;
      if (BYTE8(v117) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v22);
      }
      Swift::UInt v79 = v118;
      Hasher._combine(_:)(v118);
      Swift::Int v23 = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v18 + 32);
      unint64_t v25 = v23 & ~v24;
      if ((*(void *)(v18 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25))
      {
        uint64_t v77 = v6;
        uint64_t v26 = ~v24;
        while (1)
        {
          uint64_t v27 = *(void *)(v18 + 48) + 56 * v25;
          if (*(void *)v27 == v120)
          {
            uint64_t v28 = *(void *)(v27 + 16);
            uint64_t v29 = *(void *)(v27 + 24);
            uint64_t v82 = *(void *)(v27 + 32);
            char v30 = *(unsigned char *)(v27 + 40);
            uint64_t v85 = *(void *)(v27 + 48);
            unint64_t v31 = *(uint64_t (**)(uint64_t))(**(void **)(v27 + 8) + 128);
            swift_retain();
            swift_bridgeObjectRetain();
            if (v31(v19))
            {
              if (v28 == (void)v21 && v29 == *((void *)&v21 + 1))
              {
                swift_bridgeObjectRelease();
                swift_release();
                if (v30)
                {
LABEL_24:
                  char v34 = v80;
                  if (v85 != v79) {
                    char v34 = 0;
                  }
                  if (v34)
                  {
LABEL_35:
                    swift_bridgeObjectRelease();
                    swift_release();
                    uint64_t v4 = v68;
                    uint64_t v3 = v66;
                    uint64_t v6 = v77;
                    goto LABEL_4;
                  }
                  goto LABEL_15;
                }
                goto LABEL_29;
              }
              char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_release();
              if (v33)
              {
                if (v30) {
                  goto LABEL_24;
                }
LABEL_29:
                if ((v80 & 1) == 0 && v82 == v76 && v85 == v79) {
                  goto LABEL_35;
                }
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
          }
LABEL_15:
          unint64_t v25 = (v25 + 1) & v26;
          if (((*(void *)(v18 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
          {
            uint64_t v4 = v68;
            uint64_t v3 = v66;
            uint64_t v6 = v77;
            goto LABEL_38;
          }
        }
      }
      uint64_t v3 = v66;
    }
LABEL_38:
    v119[0] = v116;
    swift_retain();
    outlined retain of String((uint64_t)v119);
    specialized Set._Variant.insert(_:)((uint64_t)v87, (Swift::Int)&v115);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v36 = v3[2];
    if (v4) {
      break;
    }
    if (!v36) {
      goto LABEL_3;
    }
    if (*v67 == (void)v115)
    {
      unint64_t result = 0;
      uint64_t v39 = v65;
    }
    else
    {
      if (v36 == 1) {
        goto LABEL_3;
      }
      if (v3[5] == (void)v115)
      {
        unint64_t result = 1;
        uint64_t v39 = v65;
      }
      else
      {
        if (v36 == 2) {
          goto LABEL_3;
        }
        if (v3[6] != (void)v115)
        {
          uint64_t v40 = 0;
          while (v36 - 3 != v40)
          {
            uint64_t v41 = v58[v40++];
            if (v41 == (void)v115)
            {
              unint64_t result = v40 + 2;
              uint64_t v39 = v65;
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_76;
              }
              goto LABEL_55;
            }
          }
LABEL_3:
          swift_release();
          outlined release of String((uint64_t)v119);
          goto LABEL_4;
        }
        unint64_t result = 2;
        uint64_t v39 = v65;
      }
    }
LABEL_55:
    if (result >= *(void *)(v39 + 16)) {
      goto LABEL_77;
    }
    uint64_t v78 = v6;
    char v42 = (void *)(v62 + 48 * result);
    uint64_t v43 = v42[3];
    uint64_t v44 = v42[4];
    uint64_t v45 = v42[5];
    uint64_t v46 = *(void *)(v44 + 16);
    if (v43)
    {
      swift_retain();
      outlined retain of String((uint64_t)v119);
      swift_retain();
      swift_retain();
      swift_retain();
      unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v115, v44 + 32, v46, (void *)(v43 + 16), v43 + 32);
      if (v47) {
        goto LABEL_65;
      }
    }
    else
    {
      swift_retain();
      outlined retain of String((uint64_t)v119);
      swift_retain();
      swift_retain();
      unint64_t result = specialized Collection<>.firstIndex(of:)(&v115, v44 + 32, v46);
      if (v48)
      {
LABEL_65:
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined release of String((uint64_t)v119);
        swift_release();
        outlined release of String((uint64_t)v119);
LABEL_67:
        uint64_t v6 = v78;
        uint64_t v4 = v68;
        goto LABEL_4;
      }
    }
    if ((result & 0x8000000000000000) != 0) {
      goto LABEL_78;
    }
    if (result >= *(void *)(v45 + 16)) {
      goto LABEL_79;
    }
    long long v49 = (void *)(v45 + 56 * result);
    uint64_t v51 = v49[4];
    uint64_t v50 = v49[5];
    uint64_t v52 = v49[6];
    uint64_t v53 = v49[8];
    uint64_t v54 = v49[9];
    uint64_t v55 = v49[10];
    uint64_t v120 = v49[7];
    uint64_t v84 = v53;
    char v86 = v54;
    outlined copy of Output?(v51, v50);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of String((uint64_t)v119);
    if (!v50)
    {
      swift_release();
      outlined release of String((uint64_t)v119);
      goto LABEL_67;
    }
    uint64_t v83 = v55;
    uint64_t v4 = v68;
    specialized OrderedDictionary.subscript.getter(v51, v68, v3, v65, v99);
    outlined init with take of MetalFunctionNode?((uint64_t)v99, (uint64_t)&v100, &demangling cache variable for type metadata for Graph.Adjacent?);
    if (*((void *)&v100 + 1))
    {
      long long v108 = v100;
      long long v105 = v102;
      uint64_t v81 = v101;
      uint64_t v56 = v103;
      outlined init with take of MetalFunctionNode?((uint64_t)&v105, (uint64_t)v107, &demangling cache variable for type metadata for _HashTable.Storage?);
      uint64_t v57 = *((void *)&v105 + 1);
      uint64_t v106 = *((void *)&v105 + 1);
      uint64_t v104 = v56;
      long long v110 = v108;
      outlined init with take of MetalFunctionNode?((uint64_t)&v110, (uint64_t)v112, &demangling cache variable for type metadata for _HashTable.Storage?);
      swift_retain();
      outlined retain of String((uint64_t)v119);
      outlined retain of _HashTable.Storage?((uint64_t)v107);
      outlined retain of _HashTable.Storage?((uint64_t)&v106);
      outlined retain of _HashTable.Storage?((uint64_t)&v104);
      outlined release of _HashTable.Storage?((uint64_t)v112);
      uint64_t v111 = *((void *)&v110 + 1);
      outlined release of _HashTable.Storage?((uint64_t)&v111);
      uint64_t v109 = v81;
      outlined release of _HashTable.Storage?((uint64_t)&v109);
      outlined release of _HashTable.Storage?((uint64_t)v107);
      outlined release of _HashTable.Storage?((uint64_t)&v106);
      outlined release of _HashTable.Storage?((uint64_t)&v104);
      outlined release of _HashTable.Storage?((uint64_t)&v104);
      outlined release of _HashTable.Storage?((uint64_t)v107);
    }
    else
    {
      swift_retain();
      outlined retain of String((uint64_t)v119);
      uint64_t v57 = MEMORY[0x263F8EE78];
    }
    specialized Array.append<A>(contentsOf:)(v57);
    swift_release();
    outlined release of String((uint64_t)v119);
    v87[0] = v51;
    v87[1] = v50;
    v87[2] = v52;
    v87[3] = v120;
    v87[4] = v84;
    char v88 = v86 & 1;
    uint64_t v89 = v83;
    uint64_t v90 = v73;
    uint64_t v91 = v75;
    uint64_t v92 = v72;
    uint64_t v93 = v74;
    uint64_t v94 = v71;
    char v95 = v70;
    uint64_t v96 = v69;
    closure #2 in GraphCompiler.extract(node:from:withName:)((uint64_t)v87, a2, a3);
    if (v61)
    {
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v61 = 0;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v6 = v98;
    uint64_t v3 = v66;
LABEL_4:
    if (!v6[2]) {
      goto LABEL_73;
    }
  }
  unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v115, (uint64_t)v67, v36, v64, v63);
  if (v38) {
    goto LABEL_3;
  }
  uint64_t v39 = v65;
  if ((result & 0x8000000000000000) == 0) {
    goto LABEL_55;
  }
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
  return result;
}

void *GraphCompiler.init(material:)@<X0>(void *__src@<X0>, void *a2@<X8>)
{
  return memcpy(a2, __src, 0x138uLL);
}

NSObject *GraphCompiler.compile(for:options:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v302 = a2;
  v293 = a1;
  uint64_t v4 = type metadata accessor for OSSignpostError();
  uint64_t v288 = *(void *)(v4 - 8);
  uint64_t v289 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  v281 = (char *)&v271 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  v284 = (char *)&v271 - v8;
  MEMORY[0x270FA5388](v7);
  v287 = (char *)&v271 - v9;
  uint64_t v10 = type metadata accessor for OSSignpostID();
  long long v11 = *(const char **)(v10 - 8);
  uint64_t v305 = v10;
  v306 = (void (**)(char *, char *, uint64_t))v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  v282 = (char *)&v271 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  char v16 = (char *)&v271 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  v286 = (char *)&v271 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  v285 = (char *)&v271 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  v291 = (char *)&v271 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  v292 = (char *)&v271 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v307 = (uint64_t)&v271 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  v344 = (char *)&v271 - v28;
  MEMORY[0x270FA5388](v27);
  char v30 = (char *)&v271 - v29;
  uint64_t v31 = type metadata accessor for OSSignposter();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  char v34 = (char *)&v271 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v294 = (uint64_t)v3;
  memcpy(v334, v3, sizeof(v334));
  uint64_t v35 = *(void *)v334;
  unint64_t v36 = *(void *)&v334[8];
  swift_bridgeObjectRetain();
  OSSignposter.init(subsystem:category:)();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  swift_bridgeObjectRetain_n();
  v304 = v34;
  char v37 = OSSignposter.logHandle.getter();
  LODWORD(v301) = static os_signpost_type_t.event.getter();
  char v38 = OS_os_log.signpostsEnabled.getter();
  uint64_t v296 = v32;
  uint64_t v297 = v31;
  uint64_t v298 = v35;
  v283 = v16;
  if (v38)
  {
    v306[2](v344, v30, v305);
    uint64_t v39 = swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(void *)&long long v321 = v40;
    *(_DWORD *)uint64_t v39 = 141558275;
    *(void *)&long long v311 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v39 + 12) = 2081;
    swift_bridgeObjectRetain();
    *(void *)&long long v311 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, (uint64_t *)&v321);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v300 = v30;
    uint64_t v41 = v344;
    os_signpost_id_t v42 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_25C27E000, v37, (os_signpost_type_t)v301, v42, "begin", "%{private,mask.hash}s", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261185880](v40, -1, -1);
    MEMORY[0x261185880](v39, -1, -1);

    uint64_t v44 = v305;
    uint64_t v43 = (const char *)v306;
    uint64_t v45 = v306[1];
    ((void (*)(char *, uint64_t))v45)(v300, v305);
    v301 = v45;
    ((void (*)(char *, uint64_t))v45)(v41, v44);
    uint64_t v46 = v44;
    char v47 = v41;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v46 = v305;
    uint64_t v43 = (const char *)v306;
    v301 = v306[1];
    ((void (*)(char *, uint64_t))v301)(v30, v305);
    char v47 = v344;
  }
  uint64_t v331 = 0;
  uint64_t v332 = MEMORY[0x263F8EE78];
  uint64_t v333 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  swift_bridgeObjectRetain_n();
  char v48 = OSSignposter.logHandle.getter();
  os_signpost_type_t v49 = static os_signpost_type_t.begin.getter();
  char v50 = OS_os_log.signpostsEnabled.getter();
  unint64_t v303 = v36;
  if (v50)
  {
    uint64_t v51 = (char *)*((void *)v43 + 2);
    unint64_t v299 = (unint64_t)(v43 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v300 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v51)(v47, v307, v46);
    uint64_t v52 = swift_slowAlloc();
    unint64_t v53 = v36;
    uint64_t v54 = swift_slowAlloc();
    *(void *)&long long v321 = v54;
    *(_DWORD *)uint64_t v52 = 141558275;
    *(void *)&long long v311 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v52 + 12) = 2081;
    swift_bridgeObjectRetain();
    *(void *)&long long v311 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v298, v53, (uint64_t *)&v321);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_signpost_id_t v55 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_25C27E000, v48, v49, v55, "transform", "%{private,mask.hash}s", (uint8_t *)v52, 0x16u);
    swift_arrayDestroy();
    uint64_t v46 = v305;
    MEMORY[0x261185880](v54, -1, -1);
    uint64_t v56 = v52;
    char v47 = v344;
    MEMORY[0x261185880](v56, -1, -1);

    uint64_t v57 = v301;
    ((void (*)(char *, uint64_t))v301)(v47, v46);
    unint64_t v59 = v299;
    id v58 = v300;
  }
  else
  {
    swift_bridgeObjectRelease_n();

    id v58 = (char *)*((void *)v43 + 2);
    unint64_t v59 = (unint64_t)(v43 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v57 = v301;
  }
  uint64_t v60 = v307;
  unint64_t v299 = v59;
  v300 = v58;
  ((void (*)(char *, uint64_t, uint64_t))v58)(v47, v307, v46);
  uint64_t v290 = type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v61 = OSSignpostIntervalState.init(id:isOpen:)();
  ((void (*)(uint64_t, uint64_t))v57)(v60, v46);
  v338[8] = *(_OWORD *)&v334[240];
  v339[0] = *(_OWORD *)&v334[256];
  *(_OWORD *)((char *)v339 + 9) = *(_OWORD *)&v334[265];
  v338[4] = *(_OWORD *)&v334[176];
  v338[5] = *(_OWORD *)&v334[192];
  v338[6] = *(_OWORD *)&v334[208];
  v338[7] = *(_OWORD *)&v334[224];
  v338[0] = *(_OWORD *)&v334[112];
  v338[1] = *(_OWORD *)&v334[128];
  v338[2] = *(_OWORD *)&v334[144];
  v338[3] = *(_OWORD *)&v334[160];
  long long v328 = *(_OWORD *)&v334[224];
  long long v329 = *(_OWORD *)&v334[240];
  v330[0] = *(_OWORD *)&v334[256];
  *(_OWORD *)((char *)v330 + 9) = *(_OWORD *)&v334[265];
  long long v325 = *(_OWORD *)&v334[176];
  long long v326 = *(_OWORD *)&v334[192];
  long long v327 = *(_OWORD *)&v334[208];
  long long v321 = *(_OWORD *)&v334[112];
  long long v322 = *(_OWORD *)&v334[128];
  long long v323 = *(_OWORD *)&v334[144];
  long long v324 = *(_OWORD *)&v334[160];
  uint64_t v62 = *(CGColorSpace **)(v302 + OBJC_IVAR___SGREMaterialCompilationOptions_workingColorSpace);
  if (v62)
  {
    uint64_t v63 = v61;
    outlined retain of Graph((uint64_t)v338);
    CGColorSpaceRef v64 = v62;
  }
  else
  {
    CFStringRef v65 = (const __CFString *)*MEMORY[0x263F002B0];
    outlined retain of Graph((uint64_t)v338);
    CGColorSpaceRef v66 = CGColorSpaceCreateWithName(v65);
    if (!v66)
    {
      lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
      uint64_t v71 = (void *)swift_allocError();
      *(_OWORD *)uint64_t v98 = xmmword_25C41BE30;
      *(unsigned char *)(v98 + 16) = 3;
      swift_willThrow();
      unint64_t v67 = v303;
      goto LABEL_28;
    }
    CGColorSpaceRef v64 = v66;
    uint64_t v63 = v61;
    uint64_t v62 = 0;
  }
  unint64_t v67 = v303;
  uint64_t v68 = v62;
  uint64_t v69 = v64;
  char v70 = (void *)v295;
  Graph.convertColors(to:)(v69);
  uint64_t v71 = v70;
  if (v70)
  {

LABEL_28:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    long long v319 = v329;
    v320[0] = v330[0];
    *(_OWORD *)((char *)v320 + 9) = *(_OWORD *)((char *)v330 + 9);
    long long v315 = v325;
    long long v316 = v326;
    long long v317 = v327;
    long long v318 = v328;
LABEL_29:
    long long v311 = v321;
    long long v312 = v322;
    long long v100 = v323;
    long long v99 = v324;
    goto LABEL_30;
  }

  Graph.replaceCreateSamplerNodes()();
  uint64_t v71 = v72;
  if (v72) {
    goto LABEL_28;
  }
  GraphCompiler.extractSamplerNodes(in:into:)((uint64_t)&v321, &v331);
  Graph.replaceWellKnownConstants()();
  uint64_t v71 = v73;
  if (v73) {
    goto LABEL_28;
  }
  if (!objc_msgSend(v293, sel_argumentBuffersSupport)
    || (*(unsigned char *)(v302 + OBJC_IVAR___SGREMaterialCompilationOptions_forceEnableTier1FallbackSupport) & 1) != 0)
  {
    goto LABEL_20;
  }
  if (one-time initialization token for tier1SupportOverrideEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (static DebugConfig.tier1SupportOverrideEnabled == 1)
  {
LABEL_20:
    long long v336 = *(_OWORD *)&v334[16];
    v337[0] = *(_OWORD *)&v334[32];
    *(_OWORD *)((char *)v337 + 9) = *(_OWORD *)&v334[41];
    outlined init with take of MetalFunctionNode?((uint64_t)&v334[64], (uint64_t)v335, &demangling cache variable for type metadata for ShaderGraphNode?);
    specialized GraphCompiler.replaceTier1TextureGetterNodes(in:surface:geometryModifier:)(&v321, (uint64_t)&v336, (uint64_t)v335);
  }
  specialized GraphCompiler.replaceGettersWithFunctionCalls(in:)((uint64_t)&v321);
  v279 = 0;
  specialized GraphCompiler.replaceMetalFunctionsWithStitchedNodes(in:)((uint64_t)&v321);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode?>);
  uint64_t v74 = swift_allocObject();
  *(_OWORD *)(v74 + 16) = xmmword_25C418EF0;
  unint64_t v75 = *(void *)&v334[16];
  unint64_t v76 = *(void *)&v334[24];
  uint64_t v77 = *(void *)&v334[32];
  uint64_t v78 = *(void *)&v334[40];
  uint64_t v79 = *(void *)&v334[48];
  int v80 = v334[56];
  *(void *)(v74 + 32) = *(void *)&v334[16];
  *(void *)(v74 + 40) = v76;
  *(void *)(v74 + 48) = v77;
  *(void *)(v74 + 56) = v78;
  uint64_t v274 = v79;
  uint64_t v275 = v78;
  *(void *)(v74 + 64) = v79;
  int v273 = v80;
  *(unsigned char *)(v74 + 72) = v80;
  uint64_t v81 = *(void *)&v334[72];
  v306 = *(void (***)(char *, char *, uint64_t))&v334[64];
  uint64_t v307 = *(void *)&v334[72];
  uint64_t v82 = *(void *)&v334[80];
  uint64_t v83 = *(void *)&v334[88];
  uint64_t v295 = *(void *)&v334[88];
  uint64_t v84 = *(void *)&v334[96];
  char v85 = v334[104];
  LODWORD(v294) = v334[104];
  *(void *)(v74 + 80) = *(void *)&v334[64];
  *(void *)(v74 + 88) = v81;
  *(void *)(v74 + 96) = v82;
  *(void *)(v74 + 104) = v83;
  *(void *)(v74 + 112) = v84;
  *(unsigned char *)(v74 + 120) = v85;
  outlined copy of NodePersonality(v75);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v278 = v75;
  outlined copy of NodePersonality(v75);
  unint64_t v277 = v76;
  swift_bridgeObjectRetain();
  uint64_t v276 = v77;
  swift_bridgeObjectRetain();
  uint64_t v280 = v82;
  uint64_t v272 = v84;
  outlined copy of ShaderGraphNode?((unint64_t)v306, v307);
  char v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v88 = v86[2];
  unint64_t v87 = v86[3];
  if (v88 >= v87 >> 1) {
    char v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v87 > 1), v88 + 1, 1, v86);
  }
  v86[2] = v88 + 1;
  uint64_t v89 = &v86[6 * v88];
  unint64_t v90 = v277;
  v89[4] = v278;
  v89[5] = v90;
  uint64_t v91 = v275;
  v89[6] = v276;
  v89[7] = v91;
  v89[8] = v274;
  *((unsigned char *)v89 + 72) = v273;
  if (v307)
  {
    outlined copy of NodePersonality((unint64_t)v306);
    unint64_t v93 = v86[2];
    unint64_t v92 = v86[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v67 = v303;
    uint64_t v71 = v279;
    if (v93 >= v92 >> 1) {
      char v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v92 > 1), v93 + 1, 1, v86);
    }
    uint64_t v94 = v295;
    uint64_t v95 = v272;
    char v96 = v294;
    v86[2] = v93 + 1;
    uint64_t v97 = &v86[6 * v93];
    v97[4] = v306;
    v97[5] = v307;
    v97[6] = v280;
    v97[7] = v94;
    v97[8] = v95;
    *((unsigned char *)v97 + 72) = v96 & 1;
  }
  else
  {
    unint64_t v67 = v303;
    uint64_t v71 = v279;
  }
  swift_release();
  unint64_t v122 = specialized Sequence.compactMap<A>(_:)((uint64_t)v86, &v321);
  if (v71)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    long long v319 = v329;
    v320[0] = v330[0];
    *(_OWORD *)((char *)v320 + 9) = *(_OWORD *)((char *)v330 + 9);
    long long v315 = v325;
    long long v316 = v326;
    long long v317 = v327;
    long long v318 = v328;
    goto LABEL_29;
  }
  unint64_t v123 = v122;
  swift_bridgeObjectRelease();
  uint64_t v124 = *(void *)(v123 + 16);
  uint64_t v125 = (void *)MEMORY[0x263F8EE78];
  v279 = 0;
  if (v124)
  {
    uint64_t v278 = v325;
    uint64_t v276 = v325 + 32;
    swift_bridgeObjectRetain();
    uint64_t v126 = 88;
    unint64_t v277 = v123;
    do
    {
      unint64_t v130 = *(void *)(v123 + v126);
      if (v130 != -7)
      {
        if ((v130 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          swift_bridgeObjectRelease();
LABEL_122:
          swift_bridgeObjectRelease();
          uint64_t v235 = v309;
          uint64_t v234 = v310;
          uint64_t v236 = HIBYTE(v310) & 0xF;
          if ((v310 & 0x2000000000000000) == 0) {
            uint64_t v236 = v309 & 0xFFFFFFFFFFFFLL;
          }
          if (v236)
          {
            *(void *)&long long v311 = v298;
            *((void *)&v311 + 1) = v303;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v237._uint64_t countAndFlagsBits = 0x72656C706D61735FLL;
            v237._unint64_t object = (void *)0xED00006568636143;
            String.append(_:)(v237);
            specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v235, v234, v311, *((void **)&v311 + 1), 0x6C6174656DLL, 0xE500000000000000);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          goto LABEL_126;
        }
        if (v130 >= *(void *)(v278 + 16)) {
          goto LABEL_120;
        }
        uint64_t v131 = v276 + 48 * v130;
        unint64_t v132 = *(void *)v131;
        long long v133 = *(const char **)(v131 + 8);
        uint64_t v135 = *(void *)(v131 + 16);
        uint64_t v134 = *(void *)(v131 + 24);
        uint64_t v294 = *(void *)(v131 + 32);
        uint64_t v295 = v134;
        LODWORD(v280) = *(unsigned __int8 *)(v131 + 40);
        outlined copy of NodePersonality(v132);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v306 = (void (**)(char *, char *, uint64_t))v133;
        uint64_t v307 = v132;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v125 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v125[2] + 1, 1, v125);
        }
        unint64_t v138 = v125[2];
        unint64_t v137 = v125[3];
        if (v138 >= v137 >> 1) {
          uint64_t v125 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v137 > 1), v138 + 1, 1, v125);
        }
        v125[2] = v138 + 1;
        long long v127 = &v125[6 * v138];
        unint64_t v128 = (const char *)v306;
        v127[4] = v307;
        v127[5] = v128;
        uint64_t v129 = v295;
        v127[6] = v135;
        v127[7] = v129;
        v127[8] = v294;
        *((unsigned char *)v127 + 72) = v280;
        unint64_t v67 = v303;
        uint64_t v71 = v279;
        unint64_t v123 = v277;
      }
      v126 += 112;
      --v124;
    }
    while (v124);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  Graph.removeUnconnectedNodesAndEdges(roots:)((Swift::OpaquePointer)v125);
  swift_bridgeObjectRelease();
  uint64_t v139 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v140 = static os_signpost_type_t.end.getter();
  char v141 = OS_os_log.signpostsEnabled.getter();
  uint64_t v271 = v63;
  if (v141)
  {
    LODWORD(v307) = v140;
    swift_retain();
    long long v142 = v287;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v144 = v288;
    uint64_t v143 = v289;
    if ((*(unsigned int (**)(char *, uint64_t))(v288 + 88))(v142, v289) == *MEMORY[0x263F90238])
    {
      uint64_t v145 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v144 + 8))(v142, v143);
      uint64_t v145 = "";
    }
    v306 = (void (**)(char *, char *, uint64_t))v145;
    unint64_t v147 = v344;
    long long v148 = v292;
    uint64_t v149 = v305;
    ((void (*)(char *, char *, uint64_t))v300)(v344, v292, v305);
    uint64_t v150 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v150 = 0;
    os_signpost_id_t v151 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_25C27E000, v139, (os_signpost_type_t)v307, v151, "transform", (const char *)v306, v150, 2u);
    MEMORY[0x261185880](v150, -1, -1);

    uint64_t v152 = v301;
    ((void (*)(char *, uint64_t))v301)(v148, v149);
    char v153 = v147;
    unint64_t v67 = v303;
    uint64_t v71 = v279;
    unint64_t v146 = v291;
    ((void (*)(char *, uint64_t))v152)(v153, v149);
  }
  else
  {

    unint64_t v146 = v291;
    ((void (*)(char *, uint64_t))v301)(v292, v305);
  }
  if (one-time initialization token for debugMode != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v154 = static DebugConfig.debugMode;
  if (!*(void *)(static DebugConfig.debugMode + 16)) {
    goto LABEL_74;
  }
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v155 = Hasher._finalize()();
  uint64_t v156 = -1 << *(unsigned char *)(v154 + 32);
  unint64_t v157 = v155 & ~v156;
  if ((*(void *)(v154 + 56 + ((v157 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v157))
  {
    uint64_t v158 = ~v156;
    while (1)
    {
      switch(*(unsigned char *)(*(void *)(v154 + 48) + v157))
      {
        case 3:
          swift_bridgeObjectRelease();
          goto LABEL_100;
        default:
          char v159 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v159)
          {
LABEL_100:
            swift_bridgeObjectRelease();
            v342[7] = v328;
            v342[8] = v329;
            v343[0] = v330[0];
            *(_OWORD *)((char *)v343 + 9) = *(_OWORD *)((char *)v330 + 9);
            v342[4] = v325;
            v342[5] = v326;
            v342[6] = v327;
            v342[0] = v321;
            v342[1] = v322;
            v342[2] = v323;
            v342[3] = v324;
            outlined retain of Graph((uint64_t)v342);
            long long v199 = v279;
            createDotText(representing:)((uint64_t)v342);
            uint64_t v71 = v199;
            unint64_t v67 = v303;
            if (v199)
            {
              swift_release();
              swift_release();
              swift_release();
              outlined release of Graph((uint64_t)v342);
              swift_release();
              swift_bridgeObjectRelease();
              uint64_t v101 = v342;
              goto LABEL_31;
            }
            uint64_t v202 = v200;
            uint64_t v203 = v201;
            outlined release of Graph((uint64_t)v342);
            *(void *)&long long v311 = 0;
            *((void *)&v311 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(22);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)&long long v311 = v298;
            *((void *)&v311 + 1) = v67;
            v204._uint64_t countAndFlagsBits = 0xD000000000000014;
            v204._unint64_t object = (void *)0x800000025C424970;
            String.append(_:)(v204);
            specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v202, v203, v311, *((void **)&v311 + 1), 7630692, 0xE300000000000000);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_74;
          }
          unint64_t v157 = (v157 + 1) & v158;
          if (((*(void *)(v154 + 56 + ((v157 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v157) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            unint64_t v67 = v303;
            goto LABEL_73;
          }
          break;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_73:
  uint64_t v71 = v279;
LABEL_74:
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  swift_bridgeObjectRetain_n();
  char v160 = OSSignposter.logHandle.getter();
  int v161 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    BOOL v162 = v146;
    char v163 = v344;
    ((void (*)(char *, char *, uint64_t))v300)(v344, v162, v305);
    uint64_t v164 = swift_slowAlloc();
    LODWORD(v306) = v161;
    uint64_t v165 = v164;
    uint64_t v307 = swift_slowAlloc();
    *(void *)&long long v311 = v307;
    *(_DWORD *)uint64_t v165 = 141558275;
    uint64_t v309 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v165 + 12) = 2081;
    swift_bridgeObjectRetain();
    uint64_t v309 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v298, v303, (uint64_t *)&v311);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_signpost_id_t v166 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_25C27E000, v160, (os_signpost_type_t)v306, v166, "functionGraph", "%{private,mask.hash}s", (uint8_t *)v165, 0x16u);
    uint64_t v167 = v307;
    swift_arrayDestroy();
    unint64_t v67 = v303;
    MEMORY[0x261185880](v167, -1, -1);
    MEMORY[0x261185880](v165, -1, -1);

    uint64_t v168 = v305;
    ((void (*)(char *, uint64_t))v301)(v163, v305);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    uint64_t v168 = v305;
    char v163 = v344;
  }
  uint64_t v169 = v291;
  ((void (*)(char *, char *, uint64_t))v300)(v163, v291, v168);
  swift_allocObject();
  uint64_t v170 = OSSignpostIntervalState.init(id:isOpen:)();
  ((void (*)(char *, uint64_t))v301)(v169, v168);
  v340[7] = v328;
  v340[8] = v329;
  v341[0] = v330[0];
  *(_OWORD *)((char *)v341 + 9) = *(_OWORD *)((char *)v330 + 9);
  v340[4] = v325;
  v340[5] = v326;
  v340[6] = v327;
  v340[0] = v321;
  v340[1] = v322;
  v340[2] = v323;
  v340[3] = v324;
  outlined retain of Graph((uint64_t)v340);
  uint64_t v171 = (const char *)specialized GraphCompiler.functionGraph(for:)(v340);
  if (v71)
  {
    swift_release();
    swift_release();
    swift_release();
    outlined release of Graph((uint64_t)v340);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v101 = v340;
    goto LABEL_31;
  }
  v306 = (void (**)(char *, char *, uint64_t))v171;
  outlined release of Graph((uint64_t)v340);
  long long v172 = OSSignposter.logHandle.getter();
  uint64_t v173 = v285;
  OSSignpostIntervalState.signpostID.getter();
  int v174 = static os_signpost_type_t.end.getter();
  char v175 = OS_os_log.signpostsEnabled.getter();
  v279 = 0;
  uint64_t v295 = v170;
  if (v175)
  {
    swift_retain();
    char v176 = v284;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v178 = v288;
    uint64_t v177 = v289;
    int v179 = (*(uint64_t (**)(char *, uint64_t))(v288 + 88))(v176, v289);
    int v180 = *MEMORY[0x263F90238];
    LODWORD(v307) = v174;
    if (v179 == v180)
    {
      unint64_t v181 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v178 + 8))(v176, v177);
      unint64_t v181 = "";
    }
    unint64_t v182 = v344;
    uint64_t v183 = v305;
    ((void (*)(char *, char *, uint64_t))v300)(v344, v173, v305);
    BOOL v184 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v184 = 0;
    os_signpost_id_t v185 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_25C27E000, v172, (os_signpost_type_t)v307, v185, "functionGraph", v181, v184, 2u);
    MEMORY[0x261185880](v184, -1, -1);

    char v186 = v301;
    ((void (*)(char *, uint64_t))v301)(v173, v183);
    uint64_t v71 = v279;
    ((void (*)(char *, uint64_t))v186)(v182, v183);
  }
  else
  {

    ((void (*)(char *, uint64_t))v301)(v173, v305);
  }
  uint64_t v187 = static DebugConfig.debugMode;
  if (!*(void *)(static DebugConfig.debugMode + 16))
  {
LABEL_92:
    uint64_t v193 = static DebugConfig.debugMode;
    if (*(void *)(static DebugConfig.debugMode + 16))
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v194 = Hasher._finalize()();
      uint64_t v195 = -1 << *(unsigned char *)(v193 + 32);
      unint64_t v196 = v194 & ~v195;
      if ((*(void *)(v193 + 56 + ((v196 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v196))
      {
        uint64_t v197 = ~v195;
        while (2)
        {
          switch(*(unsigned char *)(*(void *)(v193 + 48) + v196))
          {
            case 6:
              goto LABEL_103;
            default:
              char v198 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v198) {
                goto LABEL_104;
              }
              unint64_t v196 = (v196 + 1) & v197;
              if (((*(void *)(v193 + 56 + ((v196 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v196) & 1) == 0) {
                break;
              }
              continue;
          }
          break;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v71 = v279;
    }
    goto LABEL_107;
  }
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v188 = Hasher._finalize()();
  uint64_t v189 = -1 << *(unsigned char *)(v187 + 32);
  unint64_t v190 = v188 & ~v189;
  if (((*(void *)(v187 + 56 + ((v190 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v190) & 1) == 0)
  {
LABEL_91:
    swift_bridgeObjectRelease();
    uint64_t v71 = v279;
    goto LABEL_92;
  }
  uint64_t v191 = ~v189;
  while (2)
  {
    switch(*(unsigned char *)(*(void *)(v187 + 48) + v190))
    {
      case 3:
LABEL_103:
        swift_bridgeObjectRelease();
        goto LABEL_104;
      default:
        char v192 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v192 & 1) == 0)
        {
          unint64_t v190 = (v190 + 1) & v191;
          if (((*(void *)(v187 + 56 + ((v190 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v190) & 1) == 0) {
            goto LABEL_91;
          }
          continue;
        }
LABEL_104:
        unint64_t v67 = v303;
        int8x16_t v205 = v279;
        uint64_t v206 = (const char *)v306;
        swift_bridgeObjectRelease();
        uint64_t v207 = createDotText(representing:inputNodeIDs:outputNodeIDs:)((uint64_t)v206, MEMORY[0x263F8EE78], MEMORY[0x263F8EE78]);
        uint64_t v71 = v205;
        if (v205)
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          long long v319 = v329;
          v320[0] = v330[0];
          *(_OWORD *)((char *)v320 + 9) = *(_OWORD *)((char *)v330 + 9);
          long long v315 = v325;
          long long v316 = v326;
          long long v317 = v327;
          long long v318 = v328;
          long long v311 = v321;
          long long v312 = v322;
          long long v100 = v323;
          long long v99 = v324;
LABEL_30:
          long long v313 = v100;
          long long v314 = v99;
          uint64_t v101 = &v311;
LABEL_31:
          outlined release of Graph((uint64_t)v101);
LABEL_32:
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v102 = type metadata accessor for Logger();
          uint64_t v103 = __swift_project_value_buffer(v102, (uint64_t)logger);
          swift_bridgeObjectRetain();
          uint64_t v104 = Logger.logObject.getter();
          os_log_type_t v105 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v104, v105))
          {
            uint64_t v106 = swift_slowAlloc();
            v344 = (char *)v103;
            uint64_t v107 = (uint8_t *)v106;
            uint64_t v108 = swift_slowAlloc();
            *(void *)&long long v321 = v108;
            *(_DWORD *)uint64_t v107 = 136315138;
            swift_bridgeObjectRetain();
            *(void *)&long long v311 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v298, v67, (uint64_t *)&v321);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_25C27E000, v104, v105, "Compile failed for material: %s", v107, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x261185880](v108, -1, -1);
            MEMORY[0x261185880](v107, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          id v109 = v71;
          id v110 = v71;
          uint64_t v111 = Logger.logObject.getter();
          os_log_type_t v112 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v111, v112))
          {
            uint64_t v113 = (uint8_t *)swift_slowAlloc();
            uint64_t v114 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v113 = 138412290;
            id v115 = v71;
            uint64_t v116 = _swift_stdlib_bridgeErrorToNSError();
            *(void *)&long long v321 = v116;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v114 = v116;

            _os_log_impl(&dword_25C27E000, v111, v112, "%@", v113, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x261185880](v114, -1, -1);
            MEMORY[0x261185880](v113, -1, -1);
          }
          else
          {
          }
          Swift::UInt v118 = v296;
          uint64_t v117 = v297;

          swift_willThrow();
          isa = (void (*)(char *, uint64_t))v118[1].isa;
          uint64_t v119 = v118 + 1;
          isa(v304, v117);
          return v119;
        }
        uint64_t v209 = v207;
        uint64_t v210 = v208;
        *(void *)&long long v311 = 0;
        *((void *)&v311 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(20);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)&long long v311 = v298;
        *((void *)&v311 + 1) = v67;
        v211._unint64_t object = (void *)0x800000025C424950;
        v211._uint64_t countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v211);
        specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v209, v210, v311, *((void **)&v311 + 1), 7630692, 0xE300000000000000);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_107:
        uint64_t v212 = v286;
        OSSignposter.logHandle.getter();
        OSSignpostID.init(log:)();
        char v213 = OSSignposter.logHandle.getter();
        os_signpost_type_t v214 = static os_signpost_type_t.begin.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          long long v215 = v344;
          ((void (*)(char *, char *, uint64_t))v300)(v344, v212, v305);
          long long v216 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)long long v216 = 0;
          os_signpost_id_t v217 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl(&dword_25C27E000, v213, v214, v217, "samplerCache", "buildingSamplerFunctions", v216, 2u);
          long long v218 = v216;
          uint64_t v212 = v286;
          MEMORY[0x261185880](v218, -1, -1);

          uint64_t v219 = v305;
          uint64_t v220 = v301;
          ((void (*)(char *, uint64_t))v301)(v215, v305);
          ((void (*)(char *, char *, uint64_t))v300)(v215, v212, v219);
        }
        else
        {

          uint64_t v219 = v305;
          uint64_t v220 = v301;
          ((void (*)(char *, char *, uint64_t))v300)(v344, v212, v305);
        }
        swift_allocObject();
        uint64_t v221 = OSSignpostIntervalState.init(id:isOpen:)();
        uint64_t v222 = ((uint64_t (*)(char *, uint64_t))v220)(v212, v219);
        uint64_t v309 = 0;
        unint64_t v310 = 0xE000000000000000;
        uint64_t v223 = v331;
        uint64_t v224 = v332;
        uint64_t v225 = v333;
        MEMORY[0x270FA5388](v222);
        *(&v271 - 2) = (uint64_t)&v309;
        *(&v271 - 1) = (uint64_t)v293;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v307 = specialized Sequence.compactMap<A>(_:)(v223, v224, v225, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #4 in GraphCompiler.compile(for:options:));
        if (v71)
        {
          swift_release_n();
          swift_release_n();
          swift_release_n();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          unint64_t v226 = v303;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          long long v319 = v329;
          v320[0] = v330[0];
          *(_OWORD *)((char *)v320 + 9) = *(_OWORD *)((char *)v330 + 9);
          long long v315 = v325;
          long long v316 = v326;
          long long v317 = v327;
          long long v318 = v328;
          long long v311 = v321;
          long long v312 = v322;
          long long v313 = v323;
          long long v314 = v324;
          outlined release of Graph((uint64_t)&v311);
          unint64_t v67 = v226;
          goto LABEL_32;
        }
        v279 = 0;
        swift_release();
        swift_release();
        swift_release();
        uint64_t v227 = static DebugConfig.debugMode;
        uint64_t v228 = *(void *)(static DebugConfig.debugMode + 16);
        uint64_t v294 = v221;
        if (v228)
        {
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          Swift::Int v229 = Hasher._finalize()();
          uint64_t v230 = -1 << *(unsigned char *)(v227 + 32);
          unint64_t v231 = v229 & ~v230;
          if ((*(void *)(v227 + 56 + ((v231 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v231))
          {
            uint64_t v232 = ~v230;
            while (2)
            {
              switch(*(unsigned char *)(*(void *)(v227 + 48) + v231))
              {
                case 4:
                  goto LABEL_121;
                default:
                  char v233 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (v233) {
                    goto LABEL_122;
                  }
                  unint64_t v231 = (v231 + 1) & v232;
                  if (((*(void *)(v227 + 56 + ((v231 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v231) & 1) == 0) {
                    break;
                  }
                  continue;
              }
              break;
            }
          }
          swift_bridgeObjectRelease();
        }
LABEL_126:
        long long v238 = OSSignposter.logHandle.getter();
        long long v239 = v283;
        OSSignpostIntervalState.signpostID.getter();
        os_signpost_type_t v240 = static os_signpost_type_t.end.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          long long v241 = v239;
          swift_retain();
          long long v242 = v281;
          checkForErrorAndConsumeState(state:)();
          swift_release();
          if ((*(unsigned int (**)(char *, uint64_t))(v288 + 88))(v242, v289) == *MEMORY[0x263F90238])
          {
            long long v243 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v288 + 8))(v281, v289);
            long long v243 = "";
          }
          long long v245 = v344;
          uint64_t v246 = v305;
          ((void (*)(char *, char *, uint64_t))v300)(v344, v241, v305);
          long long v247 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)long long v247 = 0;
          os_signpost_id_t v248 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl(&dword_25C27E000, v238, v240, v248, "samplerCache", v243, v247, 2u);
          MEMORY[0x261185880](v247, -1, -1);

          long long v249 = v301;
          ((void (*)(char *, uint64_t))v301)(v241, v246);
          uint64_t v244 = ((uint64_t (*)(char *, uint64_t))v249)(v245, v305);
        }
        else
        {

          uint64_t v244 = ((uint64_t (*)(char *, uint64_t))v301)(v239, v305);
        }
        if (one-time initialization token for samplerCache != -1) {
          uint64_t v244 = swift_once();
        }
        MEMORY[0x270FA5388](v244);
        uint64_t v250 = v307;
        *(&v271 - 2) = v307;
        uint64_t v252 = (uint64_t)&v251[4];
        long long v253 = v251 + 10;
        os_unfair_lock_lock(v251 + 10);
        v254 = v279;
        partial apply for closure #5 in GraphCompiler.compile(for:options:)(v252);
        if (v254)
        {
          os_unfair_lock_unlock(v253);
          __break(1u);
          JUMPOUT(0x25C31C12CLL);
        }
        os_unfair_lock_unlock(v253);
        uint64_t v255 = v331;
        uint64_t v256 = v332;
        uint64_t v257 = v333;
        swift_retain();
        swift_retain();
        swift_retain();
        v291 = (char *)specialized Sequence.compactMap<A>(_:)(v255, v256, v257);
        v292 = 0;
        swift_release();
        swift_release();
        uint64_t v290 = v255;
        swift_release();
        uint64_t v258 = *(void *)(v250 + 16);
        if (v258)
        {
          *(void *)&long long v311 = MEMORY[0x263F8EE78];
          specialized ContiguousArray.reserveCapacity(_:)();
          uint64_t v259 = 48;
          do
          {
            swift_unknownObjectRetain();
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v259 += 24;
            --v258;
          }
          while (v258);
          unint64_t v260 = v311;
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          unint64_t v260 = MEMORY[0x263F8EE78];
        }
        *(void *)&long long v311 = v291;
        specialized Array.append<A>(contentsOf:)(v260);
        unint64_t v67 = v303;
        v261 = v292;
        v262 = MetalStitchingBackend.compile(program:uniformDefinition:additionalLibraries:options:device:)((uint64_t)v306, *(uint64_t *)&v334[304], v311, v302, v293, v298, v303);
        v279 = v261;
        if (v261)
        {
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          long long v319 = v329;
          v320[0] = v330[0];
          *(_OWORD *)((char *)v320 + 9) = *(_OWORD *)((char *)v330 + 9);
          long long v315 = v325;
          long long v316 = v326;
          long long v317 = v327;
          long long v318 = v328;
          long long v311 = v321;
          long long v312 = v322;
          long long v313 = v323;
          long long v314 = v324;
          outlined release of Graph((uint64_t)&v311);
          uint64_t v71 = v279;
          goto LABEL_32;
        }
        uint64_t v119 = v262;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        OSSignposter.logHandle.getter();
        OSSignpostID.init(log:)();
        swift_bridgeObjectRetain();
        v263 = OSSignposter.logHandle.getter();
        LODWORD(v307) = static os_signpost_type_t.event.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          ((void (*)(char *, char *, uint64_t))v300)(v344, v282, v305);
          uint64_t v264 = swift_slowAlloc();
          uint64_t v265 = swift_slowAlloc();
          *(void *)&long long v311 = v265;
          *(_DWORD *)uint64_t v264 = 141558275;
          uint64_t v308 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v264 + 12) = 2081;
          unint64_t v266 = v303;
          swift_bridgeObjectRetain();
          uint64_t v308 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v298, v266, (uint64_t *)&v311);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          v267 = v344;
          os_signpost_id_t v268 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl(&dword_25C27E000, v263, (os_signpost_type_t)v307, v268, "end", "%{private,mask.hash}s", (uint8_t *)v264, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x261185880](v265, -1, -1);
          MEMORY[0x261185880](v264, -1, -1);
          swift_release();
          swift_release();
          swift_release();

          swift_release();
          uint64_t v269 = v305;
          v270 = v301;
          ((void (*)(char *, uint64_t))v301)(v282, v305);
          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(char *, uint64_t))(v296 + 8))(v304, v297);
          ((void (*)(char *, uint64_t))v270)(v267, v269);
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_release();
          swift_release();
          swift_release();

          swift_release();
          ((void (*)(char *, uint64_t))v301)(v282, v305);
          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(char *, uint64_t))(v296 + 8))(v304, v297);
        }
        swift_bridgeObjectRelease();
        long long v319 = v329;
        v320[0] = v330[0];
        *(_OWORD *)((char *)v320 + 9) = *(_OWORD *)((char *)v330 + 9);
        long long v315 = v325;
        long long v316 = v326;
        long long v317 = v327;
        long long v318 = v328;
        long long v311 = v321;
        long long v312 = v322;
        long long v313 = v323;
        long long v314 = v324;
        outlined release of Graph((uint64_t)&v311);
        return v119;
    }
  }
}

uint64_t specialized OrderedSet.removeSubrange(_:)(unint64_t a1, int64_t a2)
{
  uint64_t result = *(void *)v2;
  if (!*(void *)v2) {
    return specialized ContiguousArray.replaceSubrange<A>(_:with:)(a1, a2);
  }
  uint64_t v6 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v6 <= 0) {
    return result;
  }
  uint64_t v7 = *(void *)(*(void *)(v2 + 8) + 16);
  uint64_t v8 = v7 - v6;
  if (__OFSUB__(v7, v6)) {
    goto LABEL_18;
  }
  if (v8 > *(void *)(*(void *)(v2 + 8) + 16) / 2 && v8 >= specialized OrderedSet._minimumCapacity.getter())
  {
    uint64_t result = swift_isUniquelyReferenced_native();
    uint64_t v9 = *(void *)v2;
    if (!result)
    {
      if (!v9)
      {
LABEL_20:
        __break(1u);
        return result;
      }
      uint64_t v9 = _HashTable.copy()(*(void **)v2);
      uint64_t result = swift_release();
      *(void *)uint64_t v2 = v9;
    }
    if (v9)
    {
      swift_retain();
      specialized closure #1 in OrderedSet.removeSubrange(_:)(v9 + 16, (void *)(v9 + 32), v2, a1, a2);
      swift_release();
      return specialized ContiguousArray.replaceSubrange<A>(_:with:)(a1, a2);
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  specialized ContiguousArray.replaceSubrange<A>(_:with:)(a1, a2);
  return specialized OrderedSet._regenerateHashTable()();
}

uint64_t GraphCompiler.material.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of RESurfaceShaderMaterial(v1, a1);
}

uint64_t one-time initialization function for samplerCache()
{
  uint64_t v0 = MEMORY[0x263F8EE78];
  uint64_t v1 = (void *)MEMORY[0x263F8EE78];
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0) {
    uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x263F8EE78]);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<OrderedDictionary<String, MTLLibrary>, os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v0;
  *(void *)(result + 32) = v1;
  static GraphCompiler.samplerCache = result;
  return result;
}

uint64_t *GraphCompiler.samplerCache.unsafeMutableAddressor()
{
  if (one-time initialization token for samplerCache != -1) {
    swift_once();
  }
  return &static GraphCompiler.samplerCache;
}

uint64_t static GraphCompiler.samplerCache.getter()
{
  if (one-time initialization token for samplerCache != -1) {
    swift_once();
  }
  return swift_retain();
}

void GraphCompiler.extractSamplerNodes(in:into:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v6 = a1;
  unint64_t v7 = *(void *)(a1 + 64);
  int64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    CFStringRef v65 = v2;
    uint64_t v6 = v7 + 32;
    uint64_t v9 = v7 + 56;
    swift_bridgeObjectRetain();
    unint64_t v10 = 0;
    uint64_t v11 = MEMORY[0x263F8EE78];
    while (1)
    {
      if (v10 >= v8) {
        goto LABEL_84;
      }
      uint64_t v15 = 48 * v10;
      if (*(void *)(v9 + 48 * v10) == -7) {
        break;
      }
LABEL_16:
      uint64_t v18 = v6 + v15;
      if (*(void *)v18 == 0xE000000000000008)
      {
        uint64_t v19 = *(void *)(v18 + 8);
        uint64_t v20 = *(void *)(v18 + 16);
        long long v69 = *(_OWORD *)(v18 + 24);
        char v67 = *(unsigned char *)(v18 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v74 = v11;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
          uint64_t v11 = v74;
        }
        unint64_t v13 = *(void *)(v11 + 16);
        unint64_t v12 = *(void *)(v11 + 24);
        if (v13 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
          uint64_t v11 = v74;
        }
        *(void *)(v11 + 16) = v13 + 1;
        uint64_t v14 = v11 + 48 * v13;
        *(void *)(v14 + 32) = 0xE000000000000008;
        *(void *)(v14 + 40) = v19;
        *(void *)(v14 + 48) = v20;
        *(_OWORD *)(v14 + 56) = v69;
        *(unsigned char *)(v14 + 72) = v67;
        uint64_t v9 = v7 + 56;
        uint64_t v6 = v7 + 32;
      }
      if ((uint64_t)++v10 >= v8)
      {
LABEL_19:
        swift_bridgeObjectRelease();
        uint64_t v6 = a1;
        uint64_t v4 = v3;
        uint64_t v5 = v65;
        goto LABEL_21;
      }
    }
    if ((uint64_t)(v10 + 1) >= v8) {
      goto LABEL_19;
    }
    uint64_t v16 = 48 * v10++;
    while (1)
    {
      if (*(void *)(v7 + 104 + v16) != -7)
      {
        uint64_t v15 = v16 + 48;
        goto LABEL_16;
      }
      uint64_t v17 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        break;
      }
      ++v10;
      v16 += 48;
      if (v17 >= v8) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    uint64_t v22 = swift_once();
LABEL_24:
    MEMORY[0x270FA5388](v22);
    uint64_t v24 = v23 + 10;
    os_unfair_lock_lock(v23 + 10);
    partial apply for closure #3 in GraphCompiler.extractSamplerNodes(in:into:)(&v74);
    if (v9)
    {
      os_unfair_lock_unlock(v24);
      __break(1u);
    }
    else
    {
      os_unfair_lock_unlock(v24);
      uint64_t v68 = *(void *)(v74 + 16);
      unint64_t v64 = v7;
      if (v68)
      {
        uint64_t v63 = v6;
        uint64_t v66 = v74 + 32;
        uint64_t v25 = a2 + 2;
        swift_bridgeObjectRetain();
        uint64_t v26 = 0;
        while (1)
        {
          uint64_t v31 = (uint64_t *)(v66 + 24 * v26);
          uint64_t v32 = *v31;
          uint64_t v9 = v31[1];
          uint64_t v33 = v31[2];
          uint64_t v35 = *a2;
          char v34 = (void *)a2[1];
          uint64_t v36 = v34[2];
          if (*a2)
          {
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            swift_retain();
            swift_retain();
            unint64_t v7 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v32, v9, (uint64_t)(v34 + 4), v36, (void *)(v35 + 16), v35 + 32);
            char v38 = v37;
            uint64_t v40 = v39;
            swift_release();
            swift_release();
            if ((v38 & 1) == 0)
            {
              uint64_t v25 = a2 + 2;
              goto LABEL_42;
            }
            uint64_t v25 = a2 + 2;
          }
          else
          {
            if (v36)
            {
              BOOL v41 = v34[4] == v32 && v34[5] == v9;
              if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                unint64_t v7 = 0;
                goto LABEL_41;
              }
              if (v36 != 1)
              {
                BOOL v46 = v34[6] == v32 && v34[7] == v9;
                if (v46 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  unint64_t v7 = 1;
                  goto LABEL_41;
                }
                if (v36 != 2)
                {
                  BOOL v47 = v34[8] == v32 && v34[9] == v9;
                  if (v47 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    unint64_t v7 = 2;
LABEL_41:
                    swift_bridgeObjectRetain();
                    swift_unknownObjectRetain();
LABEL_42:
                    uint64_t v6 = *v25;
                    swift_unknownObjectRetain();
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v6 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v6);
                    }
                    if ((v7 & 0x8000000000000000) != 0) {
                      goto LABEL_82;
                    }
                    if (v7 >= *(void *)(v6 + 16)) {
                      goto LABEL_83;
                    }
                    unint64_t v42 = v6 + 16 * v7;
                    uint64_t v43 = *(void *)(v42 + 32);
                    char v30 = (unsigned char *)(v42 + 40);
                    char v44 = *(unsigned char *)(v42 + 40);
                    swift_unknownObjectRetain();
                    outlined consume of MetalLibrary(v43, v44);
                    *(void *)(v42 + 32) = v33;
                    goto LABEL_30;
                  }
                  char v48 = v34 + 11;
                  uint64_t v49 = 3;
                  while (v36 != v49)
                  {
                    if (*(v48 - 1) == v32 && *v48 == v9)
                    {
                      unint64_t v7 = v49;
                      goto LABEL_41;
                    }
                    unint64_t v7 = v49++;
                    v48 += 2;
                    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                      goto LABEL_41;
                    }
                  }
                }
              }
            }
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            uint64_t v40 = 0;
          }
          swift_unknownObjectRetain();
          specialized OrderedSet._appendNew(_:in:)(v32, v9, v40);
          uint64_t v6 = a2[2];
          swift_unknownObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          a2[2] = v6;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
            uint64_t v6 = *v25;
          }
          unint64_t v28 = *(void *)(v6 + 16);
          unint64_t v27 = *(void *)(v6 + 24);
          if (v28 >= v27 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
            uint64_t v6 = *v25;
          }
          *(void *)(v6 + 16) = v28 + 1;
          uint64_t v29 = v6 + 16 * v28;
          *(void *)(v29 + 32) = v33;
          char v30 = (unsigned char *)(v29 + 40);
LABEL_30:
          *char v30 = 1;
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          *uint64_t v25 = v6;
          if (++v26 == v68)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v6 = v63;
            unint64_t v7 = v64;
            uint64_t v51 = *(void *)(v64 + 16);
            if (!v51) {
              goto LABEL_80;
            }
            goto LABEL_77;
          }
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v51 = *(void *)(v7 + 16);
      if (!v51) {
        goto LABEL_80;
      }
LABEL_77:
      swift_bridgeObjectRetain();
      uint64_t v52 = 0;
      do
      {
        uint64_t v53 = v7 + v52;
        unint64_t v55 = *(void *)(v7 + v52 + 48);
        uint64_t v54 = *(void *)(v53 + 56);
        uint64_t v56 = *(void *)(v53 + 64);
        char v57 = *(unsigned char *)(v53 + 88);
        id v58 = (_OWORD *)v6;
        uint64_t v60 = *(void *)(v53 + 32);
        unint64_t v59 = *(void **)(v53 + 40);
        v71[0] = v55;
        v71[1] = v54;
        v71[2] = v56;
        long long v72 = *(_OWORD *)(v53 + 72);
        char v73 = v57;
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v55);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v61 = v60;
        uint64_t v6 = (uint64_t)v58;
        specialized closure #5 in GraphCompiler.extractSamplerNodes(in:into:)(v61, v59, (uint64_t)v71, a2, v58);
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v55);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v52 += 64;
        --v51;
        unint64_t v7 = v64;
      }
      while (v51);
      swift_bridgeObjectRelease();
LABEL_80:
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
LABEL_21:
    outlined retain of RESurfaceShaderMaterial(v5);
    uint64_t v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SS_AHtsAE_pTg504_s11d152Graph0B8CompilerV19extractSamplerNodes33_137984365F15B3FD94CB2D26CA095C9FLL2in4intoyAA0B0Vz_AA17OrderedDictionaryVySSAA12MetalLibraryAELLOGztKFSS_AA0aB4F11VtAPKXEfU0_AF0eJ0VAF0E0VTf1cn_nTf4ngn_n(v11, v5, (_OWORD *)v6);
    uint64_t v9 = v4;
    if (!v4)
    {
      unint64_t v7 = v21;
      outlined release of RESurfaceShaderMaterial(v5);
      uint64_t v22 = swift_release();
      if (one-time initialization token for samplerCache != -1) {
        goto LABEL_85;
      }
      goto LABEL_24;
    }
    outlined release of RESurfaceShaderMaterial(v5);
    swift_release();
  }
}

uint64_t closure #4 in GraphCompiler.compile(for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6)
{
  v28[15] = *(id *)MEMORY[0x263EF8340];
  if (a4) {
    return 0;
  }
  type metadata accessor for MetalShaderCompiler();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  type metadata accessor for MetalShaderCompiler.Scope();
  unint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = MEMORY[0x263F8EE78];
  _OWORD v10[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  v10[3] = 0;
  swift_weakInit();
  v10[5] = v11;
  outlined copy of MetalLibrary(a3, 0);
  outlined copy of MetalLibrary(a3, 0);
  v10[6] = specialized Dictionary.init(dictionaryLiteral:)(v11);
  v10[7] = v11;
  v10[8] = v11;
  v10[9] = v11;
  v10[10] = v11;
  swift_beginAccess();
  swift_weakAssign();
  *(void *)(v9 + 24) = v10;
  Swift::String v12 = MetalShaderCompiler.compile()();
  if (v13)
  {
    swift_release();
    outlined consume of MetalLibrary(a3, 0);
    return a1;
  }
  v28[0] = (id)0xD00000000000002FLL;
  v28[1] = (id)0x800000025C424990;
  String.append(_:)(v12);
  if (one-time initialization token for debugMode != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v15 = static DebugConfig.debugMode;
  if (!*(void *)(static DebugConfig.debugMode + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v16 = Hasher._finalize()();
  uint64_t v17 = -1 << *(unsigned char *)(v15 + 32);
  unint64_t v18 = v16 & ~v17;
  if (((*(void *)(v15 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v27 = a1;
  uint64_t v19 = ~v17;
  while (2)
  {
    switch(*(unsigned char *)(*(void *)(v15 + 48) + v18))
    {
      case 4:
        swift_bridgeObjectRelease();
        goto LABEL_18;
      default:
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0)
        {
          unint64_t v18 = (v18 + 1) & v19;
          if (((*(void *)(v15 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_19;
          }
          continue;
        }
LABEL_18:
        swift_bridgeObjectRelease();
        String.append(_:)(v12);
        swift_bridgeObjectRelease();
        v21._uint64_t countAndFlagsBits = 2570;
        v21._unint64_t object = (void *)0xE200000000000000;
        String.append(_:)(v21);
LABEL_19:
        a1 = v27;
LABEL_20:
        id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F12838]), sel_init);
        uint64_t v23 = (void *)MEMORY[0x261183E60](0xD00000000000002FLL, 0x800000025C424990);
        swift_bridgeObjectRelease();
        v28[0] = 0;
        id v24 = objc_msgSend(a6, sel_newLibraryWithSource_options_error_, v23, v22, v28);

        id v25 = v28[0];
        if (v24)
        {
          outlined consume of MetalLibrary(a3, 0);
          swift_release();

          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v26 = v25;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          outlined consume of MetalLibrary(a3, 0);
          swift_release();
        }
        return a1;
    }
  }
}

uint64_t closure #5 in GraphCompiler.compile(for:options:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  uint64_t v4 = (void *)(result + 16);
  if (*(void *)(*(void *)(result + 16) + 16) > 0x1000uLL)
  {
    if (*(void *)(*(void *)(result + 8) + 16) < 0xC00uLL) {
      goto LABEL_88;
    }
    specialized OrderedSet.removeSubrange(_:)(0, 3072);
    uint64_t result = specialized ContiguousArray.replaceSubrange<A>(_:with:)(0, 3072);
  }
  uint64_t v45 = *(void *)(a2 + 16);
  if (v45)
  {
    uint64_t v44 = a2 + 32;
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    uint64_t v40 = v3;
    BOOL v41 = v4;
    while (1)
    {
      unint64_t v7 = (uint64_t *)(v44 + 24 * v5);
      uint64_t v6 = *v7;
      uint64_t v8 = v7[1];
      uint64_t v9 = v7[2];
      uint64_t v10 = *v3;
      uint64_t v11 = (void *)v3[1];
      uint64_t v12 = v11[2];
      uint64_t v47 = v5;
      if (*v3)
      {
        uint64_t v46 = v3[2];
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_retain();
        uint64_t v42 = (uint64_t)(v11 + 4);
        uint64_t v13 = v6;
        uint64_t v14 = v11;
        unint64_t v15 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v6, v8, (uint64_t)(v11 + 4), v12, (void *)(v10 + 16), v10 + 32);
        char v17 = v16;
        swift_release();
        if (v17)
        {
          uint64_t v21 = v14[2];
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          swift_retain();
          swift_retain();
          unint64_t v22 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v13, v8, v42, v21, (void *)(v10 + 16), v10 + 32);
          char v24 = v23;
          uint64_t v26 = v25;
          swift_release();
          swift_release();
          if (v24)
          {
            uint64_t v3 = v40;
            uint64_t v4 = v41;
            uint64_t v6 = v13;
            goto LABEL_7;
          }
          uint64_t v3 = v40;
          uint64_t v4 = v41;
          uint64_t v27 = v9;
          goto LABEL_35;
        }
        uint64_t v3 = v40;
        uint64_t v4 = v41;
        uint64_t result = v9;
        if ((v15 & 0x8000000000000000) != 0) {
          goto LABEL_84;
        }
      }
      else
      {
        if (!v12) {
          goto LABEL_27;
        }
        uint64_t v46 = v3[2];
        BOOL v18 = v11[4] == v6 && v11[5] == v8;
        if (v18 || (uint64_t v19 = *v7, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          unint64_t v15 = 0;
        }
        else
        {
          if (v12 == 1) {
            goto LABEL_27;
          }
          BOOL v32 = v11[6] == v6 && v11[7] == v8;
          if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            unint64_t v15 = 1;
          }
          else
          {
            if (v12 == 2) {
              goto LABEL_27;
            }
            BOOL v33 = v11[8] == v6 && v11[9] == v8;
            if (!v33 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              uint64_t v43 = v11;
              char v34 = v11 + 11;
              uint64_t v35 = 3;
              while (1)
              {
                uint64_t v6 = v19;
                uint64_t v11 = v43;
                if (v12 == v35) {
                  break;
                }
                if (*(v34 - 1) == v19 && *v34 == v8)
                {
                  unint64_t v15 = v35;
                  goto LABEL_21;
                }
                unint64_t v15 = v35++;
                v34 += 2;
                if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                  goto LABEL_21;
                }
              }
LABEL_27:
              uint64_t v28 = v11[2];
              swift_bridgeObjectRetain();
              uint64_t v27 = v9;
              swift_unknownObjectRetain();
              if (!v28) {
                goto LABEL_47;
              }
              BOOL v29 = v11[4] == v6 && v11[5] == v8;
              if (v29 || (uint64_t v30 = v6, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
              {
                unint64_t v22 = 0;
                goto LABEL_34;
              }
              if (v28 == 1)
              {
LABEL_47:
                swift_bridgeObjectRetain();
                swift_unknownObjectRetain();
                uint64_t v26 = 0;
LABEL_7:
                swift_unknownObjectRetain();
                specialized OrderedSet._appendNew(_:in:)(v6, v8, v26);
                swift_unknownObjectRetain();
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
LABEL_8:
                specialized ContiguousArray._endMutation()();
                swift_unknownObjectRelease_n();
                swift_bridgeObjectRelease_n();
                goto LABEL_9;
              }
              if (v11[6] == v6 && v11[7] == v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                unint64_t v22 = 1;
              }
              else
              {
                if (v28 == 2) {
                  goto LABEL_47;
                }
                if ((v11[8] != v6 || v11[9] != v8) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                {
                  char v37 = v11 + 11;
                  uint64_t v38 = 3;
                  while (1)
                  {
                    uint64_t v6 = v30;
                    if (v28 == v38) {
                      goto LABEL_47;
                    }
                    if (*(v37 - 1) == v30 && *v37 == v8)
                    {
                      unint64_t v22 = v38;
                      goto LABEL_34;
                    }
                    unint64_t v22 = v38++;
                    v37 += 2;
                    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                      goto LABEL_34;
                    }
                  }
                }
                unint64_t v22 = 2;
              }
LABEL_34:
              swift_bridgeObjectRetain();
              swift_unknownObjectRetain();
LABEL_35:
              uint64_t v31 = *v4;
              swift_unknownObjectRetain();
              uint64_t result = swift_isUniquelyReferenced_nonNull_native();
              *uint64_t v4 = v31;
              if ((result & 1) == 0) {
                specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v31);
              }
              if ((v22 & 0x8000000000000000) != 0) {
                goto LABEL_86;
              }
              if (v22 >= *(void *)(v31 + 16)) {
                goto LABEL_87;
              }
              swift_unknownObjectRetain();
              swift_unknownObjectRelease();
              *(void *)(v31 + 8 * v22 + 32) = v27;
              goto LABEL_8;
            }
            unint64_t v15 = 2;
          }
        }
LABEL_21:
        swift_bridgeObjectRetain();
        uint64_t result = swift_unknownObjectRetain();
        if ((v15 & 0x8000000000000000) != 0)
        {
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
          return result;
        }
      }
      unint64_t v20 = *(void *)(v46 + 16);
      swift_unknownObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v15 >= v20) {
        goto LABEL_85;
      }
LABEL_9:
      uint64_t v5 = v47 + 1;
      if (v47 + 1 == v45) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t Graph.convertColors(to:)(CGColorSpace *a1)
{
  char v17 = a1;
  uint64_t result = *(void *)(v1 + 64);
  int64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v5 = v1;
    uint64_t v6 = result + 32;
    swift_bridgeObjectRetain_n();
    unint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = v6 + 48 * v7;
      uint64_t v9 = *(void *)(v8 + 24);
      if (v9 == -7)
      {
        if ((uint64_t)++v7 >= v4) {
          return swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        unint64_t v11 = *(void *)v8;
        uint64_t v10 = *(void *)(v8 + 8);
        uint64_t v12 = *(void *)(v8 + 16);
        char v13 = *(unsigned char *)(v8 + 40);
        uint64_t v14 = *(void *)(v8 + 32);
        v15[0] = v11;
        v15[1] = v10;
        v15[2] = v12;
        v15[3] = v9;
        v15[4] = v14;
        char v16 = v13;
        outlined copy of NodePersonality(v11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #1 in Graph.convertColors(to:)((uint64_t)v15, v17, v5);
        if (v2)
        {
          outlined consume of NodePersonality(v11);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        ++v7;
        outlined consume of NodePersonality(v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((uint64_t)v7 >= v4) {
          return swift_bridgeObjectRelease_n();
        }
      }
      if (v7 >= v4)
      {
        __break(1u);
        return swift_bridgeObjectRelease_n();
      }
    }
  }
  return result;
}

uint64_t closure #2 in GraphCompiler.functionGraph(for:)(void *a1, uint64_t a2)
{
  uint64_t v5 = (void *)*a1;
  v37[3] = type metadata accessor for RESurfaceShaderFunctionNode();
  v37[4] = (Swift::Int)&protocol witness table for RESurfaceShaderFunctionNode;
  v37[0] = (Swift::Int)v5;
  swift_retain();
  uint64_t v6 = MetalShaderProgram.topologicalSort(from:)(v37);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
  if (v2) {
    return result;
  }
  unint64_t v8 = MEMORY[0x263F8EE78];
  unint64_t v38 = MEMORY[0x263F8EE78];
  uint64_t v9 = *(void *)(v6 + 16);
  if (v9)
  {
    uint64_t v10 = v6 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of MetalFunctionNode(v10, (uint64_t)v37);
      outlined init with copy of MetalFunctionNode((uint64_t)v37, (uint64_t)v35);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
      type metadata accessor for MetalFunctionParameterNode();
      if ((swift_dynamicCast() & 1) == 0) {
        uint64_t v36 = 0;
      }
      uint64_t v11 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
      uint64_t v3 = v36;
      if (v36)
      {
        MEMORY[0x261184120](v11);
        if (*(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v10 += 40;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    unint64_t v8 = v38;
  }
  swift_bridgeObjectRelease();
  v35[0] = MEMORY[0x263F8EE88];
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12)
    {
LABEL_14:
      if (v12 < 1) {
        goto LABEL_37;
      }
      uint64_t v13 = 0;
      do
      {
        if ((v8 & 0xC000000000000001) != 0)
        {
          uint64_t v3 = MEMORY[0x2611848A0](v13, v8);
        }
        else
        {
          uint64_t v3 = *(void *)(v8 + 8 * v13 + 32);
          swift_retain();
        }
        ++v13;
        Swift::Int v14 = (*(uint64_t (**)(void))(*(void *)v3 + 192))();
        specialized Set._Variant.insert(_:)(v37, v14, v15);
        swift_release();
        swift_bridgeObjectRelease();
      }
      while (v12 != v13);
      swift_bridgeObjectRelease_n();
      uint64_t v16 = v35[0];
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v16 = MEMORY[0x263F8EE88];
LABEL_23:
  unint64_t v17 = *(void *)(v16 + 16);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, type: MetalDataType)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_25C418EE0;
  uint64_t v18 = v5[5];
  uint64_t v19 = v5[6];
  *(void *)(v12 + 32) = v5[4];
  *(void *)(v12 + 40) = v18;
  *(void *)(v12 + 48) = v19;
  unint64_t v8 = v5[8];
  if (!v8)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    goto LABEL_31;
  }
  uint64_t v3 = v5[7];
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of (name: String, type: MetalDataType)?(v3, v8);
  if (v17 <= 1) {
    goto LABEL_29;
  }
  uint64_t v20 = one-time initialization token for uint8;
  swift_bridgeObjectRetain();
  if (v20 != -1) {
    goto LABEL_38;
  }
  while (1)
  {
    type metadata accessor for MetalDataType.Pointer();
    swift_allocObject();
    uint64_t v21 = (void *)swift_retain();
    uint64_t v22 = specialized MetalDataType.Pointer.init(to:isConst:addressSpace:)(v21, 0, 0);
    swift_release();
    unint64_t v24 = *(void *)(v12 + 16);
    unint64_t v23 = *(void *)(v12 + 24);
    if (v24 >= v23 >> 1) {
      uint64_t v12 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, (void *)v12);
    }
    *(void *)(v12 + 16) = v24 + 1;
    uint64_t v25 = (void *)(v12 + 24 * v24);
    v25[4] = v3;
    v25[5] = v8;
    v25[6] = v22;
LABEL_29:
    swift_release();
    swift_bridgeObjectRelease();
LABEL_31:
    uint64_t v26 = one-time initialization token for void;
    swift_bridgeObjectRetain();
    if (v26 != -1) {
      swift_once();
    }
    uint64_t v27 = *(void *)(a2 + 48);
    if (!__OFADD__(v27, 1)) {
      break;
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    swift_once();
  }
  uint64_t v29 = v5[2];
  uint64_t v28 = (void *)v5[3];
  uint64_t v30 = static MetalDataType.void;
  *(void *)(a2 + 48) = v27 + 1;
  type metadata accessor for MetalFunctionDefinitionNode();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v31 = specialized MetalFunctionDefinitionNode.init(id:argumentTypes:resultType:functionName:specifier:)(v27, v12, v30, v29, v28, 0, 0);
  swift_release();
  uint64_t v32 = specialized MetalShaderProgram.add<A>(_:)((uint64_t)v31);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, unint64_t))(*(void *)v32 + 240))(0x6863746974735B5BLL, 0xEE005D5D656C6261);
  (*(void (**)(uint64_t))(*(void *)v32 + 264))(v12);
  swift_beginAccess();
  BOOL v33 = *(void (**)(uint64_t))(*(void *)v32 + 168);
  uint64_t v34 = swift_bridgeObjectRetain();
  v33(v34);
  return swift_release();
}

BOOL closure #3 in GraphCompiler.functionGraph(for:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  return (specialized Set.contains(_:)(v5, a2) & 1) == 0;
}

uint64_t closure #1 in GraphCompiler.replaceGettersWithFunctionCalls(in:)(long long *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  long long v7 = *a1;
  long long v8 = a1[1];
  *(_OWORD *)&v157[9] = *(long long *)((char *)a1 + 25);
  long long v156 = v7;
  *(_OWORD *)unint64_t v157 = v8;
  outlined init with take of NodePersonality(&v156, &v160);
  uint64_t result = (uint64_t)outlined init with take of NodePersonality(&v160, v161);
  unint64_t v10 = v161[0];
  if (v161[0] >> 61 != 4) {
    return result;
  }
  v161[0] &= 0x1FFFFFFFFFFFFFFFuLL;
  uint64_t v12 = *(void *)((v10 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  uint64_t v11 = *(void *)((v10 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  uint64_t v13 = (int64_t *)*((void *)&v156 + 1);
  uint64_t v159 = *((void *)&v156 + 1);
  if (!*(void *)(*((void *)&v156 + 1) + 16)) {
    return result;
  }
  type metadata accessor for MetalDataType();
  uint64_t result = swift_dynamicCastClass();
  if (!result) {
    return result;
  }
  uint64_t v107 = a2;
  uint64_t v97 = a3;
  Swift::Int v14 = *(uint64_t (**)(uint64_t))(*(void *)result + 88);
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = v14(v15);
  specialized Sequence.first(where:)(v16, v12, v11, v113);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined init with take of MetalFunctionNode?((uint64_t)v113, (uint64_t)&v120, &demangling cache variable for type metadata for DataTypeProperty?);
  if (!*((void *)&v120 + 1))
  {
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  long long v122 = v120;
  uint64_t v17 = v121;
  ShaderGraphNode.out.getter((uint64_t)v114);
  if (v4)
  {
    long long v127 = v122;
    outlined release of String((uint64_t)&v127);
    swift_release();
    uint64_t v128 = v17;
    uint64_t v18 = &v128;
LABEL_7:
    outlined release of [Input]((uint64_t)v18);
    swift_release_n();
    return swift_bridgeObjectRelease();
  }
  long long v100 = v13;
  uint64_t v99 = v17;
  uint64_t v19 = v115;
  long long v132 = v116;
  outlined release of String((uint64_t)&v132);
  type metadata accessor for MetalDataType.Struct();
  uint64_t v20 = swift_dynamicCastClass();
  if (!v20)
  {
    lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
    swift_allocError();
    *(void *)uint64_t v40 = 0xD000000000000030;
    *(void *)(v40 + 8) = 0x800000025C4248F0;
    *(unsigned char *)(v40 + 16) = 2;
    swift_willThrow();
    swift_release();
    long long v123 = v122;
    outlined release of String((uint64_t)&v123);
    swift_release();
    uint64_t v124 = v17;
    uint64_t v18 = &v124;
    goto LABEL_7;
  }
  uint64_t v21 = v20;
  lazy protocol witness table accessor for type String and conformance String();
  swift_retain();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
  uint64_t v110 = *(void *)(v21 + 24);
  uint64_t v112 = *(void *)(v21 + 32);
  swift_bridgeObjectRetain();
  v25._uint64_t countAndFlagsBits = 95;
  v25._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 95;
  v27._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = v22;
  v28._unint64_t object = v24;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v110;
  *(void *)(v29 + 24) = v112;
  *(void *)(v29 + 32) = v19;
  unint64_t v162 = v29 | 0x2000000000000000;
  int64_t v30 = v100[2];
  if (v30)
  {
    uint64_t v31 = MEMORY[0x263F8EE78];
    swift_retain();
    outlined retain of [Input]((uint64_t)&v159);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30, 0);
    uint64_t v32 = v31;
    BOOL v33 = v100 + 7;
    do
    {
      uint64_t v34 = *(v33 - 2);
      uint64_t v35 = *(v33 - 1);
      uint64_t v36 = *v33;
      unint64_t v38 = *(void *)(v32 + 16);
      unint64_t v37 = *(void *)(v32 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v38 >= v37 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
      }
      *(void *)(v32 + 16) = v38 + 1;
      uint64_t v39 = (void *)(v32 + 24 * v38);
      v39[4] = v35;
      v39[5] = v36;
      v39[6] = v34;
      v33 += 7;
      --v30;
    }
    while (v30);
    outlined release of [Input]((uint64_t)&v159);
  }
  else
  {
    swift_retain();
    uint64_t v32 = MEMORY[0x263F8EE78];
  }
  uint64_t v41 = *(void *)v157;
  uint64_t v158 = *(void *)v157;
  int64_t v42 = *(void *)(*(void *)v157 + 16);
  uint64_t v43 = MEMORY[0x263F8EE78];
  uint64_t v98 = *(void *)v157;
  if (v42)
  {
    uint64_t v111 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42, 0);
    uint64_t v43 = v111;
    uint64_t v44 = (uint64_t *)(v41 + 56);
    do
    {
      uint64_t v45 = *(v44 - 2);
      uint64_t v46 = *(v44 - 1);
      uint64_t v47 = *v44;
      unint64_t v49 = *(void *)(v111 + 16);
      unint64_t v48 = *(void *)(v111 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v49 >= v48 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
      }
      *(void *)(v111 + 16) = v49 + 1;
      char v50 = (void *)(v111 + 24 * v49);
      v50[4] = v46;
      v50[5] = v47;
      v50[6] = v45;
      v44 += 7;
      --v42;
    }
    while (v42);
    outlined release of [Input]((uint64_t)&v158);
  }
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(*(void *)(v107 + 40), v32, v43, v162, v107 + 64, v107, &v117);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v131 = v118;
  uint64_t v103 = *(void *)(v118 + 16);
  if (!v103) {
    goto LABEL_41;
  }
  uint64_t v101 = v118 + 32;
  swift_bridgeObjectRetain();
  uint64_t v51 = 0;
  uint64_t v52 = v100;
  while (2)
  {
    uint64_t v54 = (uint64_t *)(v101 + 56 * v51);
    uint64_t v55 = *v54;
    uint64_t v56 = v54[1];
    uint64_t v57 = v54[2];
    uint64_t v58 = v54[3];
    uint64_t v59 = v54[4];
    char v60 = *((unsigned char *)v54 + 40);
    uint64_t v61 = v54[6];
    *(void *)&long long v150 = v55;
    *((void *)&v150 + 1) = v56;
    uint64_t v151 = v57;
    uint64_t v152 = v58;
    uint64_t v153 = v59;
    char v154 = v60;
    uint64_t v155 = v61;
    int64_t v62 = v52[2];
    if (!v62) {
      goto LABEL_29;
    }
    uint64_t v105 = v51;
    uint64_t v63 = v100 + 10;
    do
    {
      uint64_t v64 = *(v63 - 6);
      uint64_t v65 = *(v63 - 5);
      uint64_t v67 = *(v63 - 4);
      uint64_t v66 = *(v63 - 3);
      uint64_t v68 = *(v63 - 2);
      char v69 = *((unsigned char *)v63 - 8);
      unint64_t v70 = *v63;
      if (v67 == v57 && v66 == v58)
      {
        uint64_t v53 = v58;
LABEL_27:
        uint64_t v143 = v64;
        uint64_t v144 = v65;
        uint64_t v145 = v57;
        uint64_t v146 = v53;
        uint64_t v147 = v68;
        char v148 = v69;
        unint64_t v149 = v70;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v143, &v150);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_28;
      }
      uint64_t v108 = *(v63 - 6);
      unint64_t v162 = *v63;
      uint64_t v53 = v66;
      uint64_t v72 = v57;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v57 = v67;
        unint64_t v70 = v162;
        uint64_t v64 = v108;
        goto LABEL_27;
      }
      v63 += 7;
      --v62;
      uint64_t v57 = v72;
    }
    while (v62);
    uint64_t v143 = v108;
    uint64_t v144 = v65;
    uint64_t v145 = v67;
    uint64_t v146 = v53;
    uint64_t v147 = v68;
    char v148 = v69;
    unint64_t v149 = v162;
LABEL_28:
    uint64_t v52 = v100;
    uint64_t v51 = v105;
LABEL_29:
    if (++v51 != v103) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v131);
LABEL_41:
  uint64_t v130 = v119;
  uint64_t v73 = v99;
  uint64_t v104 = *(void *)(v119 + 16);
  if (!v104) {
    goto LABEL_58;
  }
  uint64_t v102 = v119 + 32;
  swift_bridgeObjectRetain();
  uint64_t v74 = 0;
  uint64_t v75 = v98;
  while (2)
  {
    uint64_t v77 = (uint64_t *)(v102 + 56 * v74);
    uint64_t v78 = *v77;
    uint64_t v79 = v77[1];
    uint64_t v80 = v77[2];
    uint64_t v81 = v77[3];
    uint64_t v82 = v77[4];
    char v83 = *((unsigned char *)v77 + 40);
    uint64_t v84 = v77[6];
    v140[0] = v78;
    v140[1] = v79;
    v140[2] = v80;
    v140[3] = v81;
    v140[4] = v82;
    char v141 = v83;
    uint64_t v142 = v84;
    uint64_t v85 = *(void *)(v75 + 16);
    if (!v85) {
      goto LABEL_46;
    }
    uint64_t v106 = v74;
    char v86 = (void *)(v98 + 80);
    while (2)
    {
      uint64_t v87 = *(v86 - 6);
      uint64_t v88 = *(v86 - 5);
      uint64_t v90 = *(v86 - 4);
      uint64_t v89 = *(v86 - 3);
      uint64_t v91 = *(v86 - 2);
      char v92 = *((unsigned char *)v86 - 8);
      unint64_t v93 = *v86;
      if (v90 == v80 && v89 == v81)
      {
        uint64_t v76 = v81;
LABEL_44:
        uint64_t v133 = v87;
        uint64_t v134 = v88;
        uint64_t v135 = v80;
        uint64_t v136 = v76;
        uint64_t v137 = v91;
        char v138 = v92;
        unint64_t v139 = v93;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v133, (uint64_t)v140);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_45;
      }
      uint64_t v109 = *(v86 - 6);
      unint64_t v162 = *v86;
      uint64_t v95 = v89;
      uint64_t v96 = v80;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v80 = v90;
        unint64_t v93 = v162;
        uint64_t v76 = v95;
        uint64_t v87 = v109;
        goto LABEL_44;
      }
      v86 += 7;
      --v85;
      uint64_t v80 = v96;
      if (v85) {
        continue;
      }
      break;
    }
    uint64_t v133 = v109;
    uint64_t v134 = v88;
    uint64_t v135 = v90;
    uint64_t v136 = v95;
    uint64_t v137 = v91;
    char v138 = v92;
    unint64_t v139 = v162;
LABEL_45:
    uint64_t v75 = v98;
    uint64_t v73 = v99;
    uint64_t v74 = v106;
LABEL_46:
    if (++v74 != v104) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v130);
LABEL_58:
  specialized Graph.remove(_:)(*(uint64_t *)&v157[8]);
  swift_release();
  swift_release();
  long long v125 = v122;
  outlined release of String((uint64_t)&v125);
  swift_release();
  uint64_t v126 = v73;
  outlined release of [Input]((uint64_t)&v126);
  outlined init with take of NodePersonality(&v117, &v129);
  outlined release of NodePersonality(&v129);
  outlined release of [Input]((uint64_t)&v131);
  outlined release of [Input]((uint64_t)&v130);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t result = swift_release();
  if (__OFADD__(*v97, 1)) {
    __break(1u);
  }
  else {
    ++*v97;
  }
  return result;
}

uint64_t closure #1 in GraphCompiler.replaceMetalFunctionsWithStitchedNodes(in:)(uint64_t result, uint64_t a2)
{
  if (*(void *)result >> 61 != 1) {
    return result;
  }
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(int64_t **)(result + 16);
  uint64_t v73 = *(void *)(result + 24);
  unint64_t v4 = 0xD000000000000018;
  uint64_t v5 = *(void *)((*(void *)result & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  uint64_t v6 = *(void *)((*(void *)result & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  uint64_t v74 = *(void *)((*(void *)result & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
  unint64_t v7 = 0xD000000000000012;
  unint64_t v8 = 0x800000025C424A60;
  BOOL v9 = v5 == 1935763810 && v6 == 0xE400000000000000;
  if (v9
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || ((unint64_t v7 = 0xD00000000000001BLL, v8 = 0x800000025C424A40, v5 == 0x5F646F6C5F6E696DLL)
      ? (BOOL v10 = v6 == 0xED0000706D616C63)
      : (BOOL v10 = 0),
        v10
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
     || (unint64_t v7 = 0xD000000000000013, v8 = 0x800000025C424A20, v5 == 0x6C6576656CLL) && v6 == 0xE500000000000000
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    unint64_t v4 = v7;
  }
  else
  {
    unint64_t v8 = 0x800000025C424A00;
    if ((v5 != 0x746E656964617267 || v6 != 0xEA00000000006432)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      unint64_t v8 = 0x800000025C4249E0;
      if ((v5 != 0x746E656964617267 || v6 != 0xEA00000000006433)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        unint64_t v4 = 0xD00000000000001ALL;
        unint64_t v8 = 0x800000025C4249C0;
        if (v5 != 0x746E656964617267 || v6 != 0xEC00000065627563)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            return result;
          }
        }
      }
    }
  }
  unint64_t v85 = v8;
  int64_t v11 = *(void *)(v2 + 16);
  uint64_t v75 = v2;
  uint64_t v77 = v3;
  if (v11)
  {
    *(void *)&long long v110 = MEMORY[0x263F8EE78];
    swift_retain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    uint64_t v12 = v110;
    uint64_t v13 = (uint64_t *)(v2 + 56);
    do
    {
      uint64_t v14 = *(v13 - 2);
      uint64_t v15 = *(v13 - 1);
      uint64_t v16 = *v13;
      *(void *)&long long v110 = v12;
      unint64_t v18 = *(void *)(v12 + 16);
      unint64_t v17 = *(void *)(v12 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        uint64_t v12 = v110;
      }
      *(void *)(v12 + 16) = v18 + 1;
      uint64_t v19 = (void *)(v12 + 24 * v18);
      v19[4] = v15;
      v19[5] = v16;
      v19[6] = v14;
      v13 += 7;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    uint64_t v3 = v77;
  }
  else
  {
    swift_retain();
    uint64_t v12 = MEMORY[0x263F8EE78];
  }
  int64_t v20 = v3[2];
  uint64_t v21 = MEMORY[0x263F8EE78];
  if (v20)
  {
    *(void *)&long long v110 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
    uint64_t v21 = v110;
    uint64_t v22 = v3 + 7;
    do
    {
      uint64_t v23 = *(v22 - 2);
      uint64_t v24 = *(v22 - 1);
      uint64_t v25 = *v22;
      *(void *)&long long v110 = v21;
      unint64_t v27 = *(void *)(v21 + 16);
      unint64_t v26 = *(void *)(v21 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        uint64_t v21 = v110;
      }
      *(void *)(v21 + 16) = v27 + 1;
      Swift::String v28 = (void *)(v21 + 24 * v27);
      v28[4] = v24;
      v28[5] = v25;
      v28[6] = v23;
      v22 += 7;
      --v20;
    }
    while (v20);
    uint64_t v3 = v77;
    swift_bridgeObjectRelease();
  }
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v4;
  *(void *)(v29 + 24) = v85;
  *(void *)(v29 + 32) = v74;
  unint64_t v30 = *(void *)(a2 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v30, v12, v21, v29 | 0x2000000000000000, a2 + 64, a2, &v88);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v116 = v89;
  uint64_t v81 = *(void *)(v89 + 16);
  if (!v81) {
    goto LABEL_46;
  }
  uint64_t v78 = v89 + 32;
  swift_bridgeObjectRetain();
  uint64_t v31 = 0;
  uint64_t v32 = v75;
  while (2)
  {
    uint64_t v34 = (uint64_t *)(v78 + 56 * v31);
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    uint64_t v37 = v34[2];
    uint64_t v38 = v34[3];
    uint64_t v39 = v34[4];
    char v40 = *((unsigned char *)v34 + 40);
    uint64_t v41 = v34[6];
    *(void *)&long long v110 = v35;
    *((void *)&v110 + 1) = v36;
    uint64_t v111 = v37;
    uint64_t v112 = v38;
    uint64_t v113 = v39;
    char v114 = v40;
    uint64_t v115 = v41;
    uint64_t v42 = *(void *)(v32 + 16);
    if (!v42) {
      goto LABEL_34;
    }
    uint64_t v83 = v31;
    uint64_t v43 = (void *)(v75 + 80);
    do
    {
      uint64_t v44 = *(v43 - 6);
      uint64_t v45 = *(v43 - 5);
      uint64_t v46 = *(v43 - 4);
      uint64_t v47 = *(v43 - 2);
      char v48 = *((unsigned char *)v43 - 8);
      uint64_t v49 = *v43;
      if (v46 == v37 && *(v43 - 3) == v38)
      {
        uint64_t v33 = v38;
LABEL_32:
        uint64_t v103 = v44;
        uint64_t v104 = v45;
        uint64_t v105 = v37;
        uint64_t v106 = v33;
        uint64_t v107 = v47;
        char v108 = v48;
        uint64_t v109 = v49;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v103, &v110);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_33;
      }
      uint64_t v86 = *(v43 - 6);
      uint64_t v51 = *(v43 - 3);
      uint64_t v52 = v37;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v37 = v46;
        uint64_t v44 = v86;
        uint64_t v33 = v51;
        goto LABEL_32;
      }
      v43 += 7;
      --v42;
      uint64_t v37 = v52;
    }
    while (v42);
    uint64_t v103 = v86;
    uint64_t v104 = v45;
    uint64_t v105 = v46;
    uint64_t v106 = v51;
    uint64_t v107 = v47;
    char v108 = v48;
    uint64_t v109 = v49;
LABEL_33:
    uint64_t v32 = v75;
    uint64_t v31 = v83;
LABEL_34:
    if (++v31 != v81) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v116);
  uint64_t v3 = v77;
LABEL_46:
  uint64_t v92 = v90;
  uint64_t v82 = *(void *)(v90 + 16);
  if (!v82) {
    goto LABEL_63;
  }
  uint64_t v79 = v90 + 32;
  swift_bridgeObjectRetain();
  uint64_t v53 = 0;
  uint64_t v76 = v3 + 10;
  while (2)
  {
    uint64_t v55 = (uint64_t *)(v79 + 56 * v53);
    uint64_t v56 = *v55;
    uint64_t v57 = v55[1];
    uint64_t v58 = v55[2];
    uint64_t v59 = v55[3];
    uint64_t v60 = v55[4];
    char v61 = *((unsigned char *)v55 + 40);
    uint64_t v62 = v55[6];
    v100[0] = v56;
    v100[1] = v57;
    v100[2] = v58;
    _OWORD v100[3] = v59;
    v100[4] = v60;
    char v101 = v61;
    uint64_t v102 = v62;
    int64_t v63 = v3[2];
    if (!v63) {
      goto LABEL_51;
    }
    uint64_t v84 = v53;
    uint64_t v64 = v76;
    while (2)
    {
      uint64_t v65 = *(v64 - 6);
      uint64_t v66 = *(v64 - 5);
      uint64_t v67 = *(v64 - 4);
      uint64_t v68 = *(v64 - 2);
      char v69 = *((unsigned char *)v64 - 8);
      uint64_t v70 = *v64;
      if (v67 == v58 && *(v64 - 3) == v59)
      {
        uint64_t v54 = v59;
LABEL_49:
        uint64_t v93 = v65;
        uint64_t v94 = v66;
        uint64_t v95 = v58;
        uint64_t v96 = v54;
        uint64_t v97 = v68;
        char v98 = v69;
        uint64_t v99 = v70;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v93, (uint64_t)v100);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_50;
      }
      uint64_t v87 = *(v64 - 6);
      uint64_t v54 = *(v64 - 3);
      uint64_t v72 = v58;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v58 = v67;
        uint64_t v65 = v87;
        goto LABEL_49;
      }
      v64 += 7;
      --v63;
      uint64_t v58 = v72;
      if (v63) {
        continue;
      }
      break;
    }
    uint64_t v93 = v87;
    uint64_t v94 = v66;
    uint64_t v95 = v67;
    uint64_t v96 = v54;
    uint64_t v97 = v68;
    char v98 = v69;
    uint64_t v99 = v70;
LABEL_50:
    uint64_t v3 = v77;
    uint64_t v53 = v84;
LABEL_51:
    if (++v53 != v82) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v92);
LABEL_63:
  specialized Graph.remove(_:)(v73);
  swift_release();
  outlined init with take of NodePersonality(&v88, &v91);
  outlined release of NodePersonality(&v91);
  outlined release of [Input]((uint64_t)&v116);
  return outlined release of [Input]((uint64_t)&v92);
}

void closure #2 in GraphCompiler.samplerName(for:in:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5 = a3;
  uint64_t v6 = *a1;
  unint64_t v7 = (unint64_t)*a1 >> 61;
  if (v7 != 1)
  {
    if (!v7)
    {
      uint64_t v93 = a3;
      unint64_t v8 = *(void **)(v6 + 16);
      BOOL v9 = *(void **)(v6 + 24);
      uint64_t v11 = *(void *)(v6 + 32);
      uint64_t v10 = *(void *)(v6 + 40);
      uint64_t v13 = *(void *)(v6 + 48);
      unint64_t v12 = *(void *)(v6 + 56);
      uint64_t v14 = *(void *)(v6 + 64);
      uint64_t v15 = *(void *)(v6 + 72);
      int v16 = *(unsigned __int8 *)(v6 + 80);
      uint64_t v17 = *(void *)(v6 + 88);
      unint64_t v126 = v12;
      *(void *)uint64_t v96 = v11;
      if (v16 == 6)
      {
        uint64_t v95 = a4;
        unint64_t v97 = 0;
        unint64_t v98 = 0xE000000000000000;
        uint64_t v94 = *(uint64_t (**)(uint64_t))(*(void *)v17 + 144);
        int v18 = v14;
        outlined copy of SGDataTypeStorage(v8, v9, v11, v10, v13, v12, v14, v15, 6);
        int v91 = v18;
        outlined copy of SGDataTypeStorage(v8, v9, v11, v10, v13, v12, v18, v15, 6);
        uint64_t v19 = swift_retain();
        uint64_t v20 = v94(v19);
        if (v20)
        {
          uint64_t v21 = *(void *)(v20 + 24);
          uint64_t v22 = *(void **)(v20 + 32);
          swift_bridgeObjectRetain();
          swift_release();
          v23._uint64_t countAndFlagsBits = v21;
          v23._unint64_t object = v22;
          String.append(_:)(v23);
          swift_bridgeObjectRelease();
          v24._uint64_t countAndFlagsBits = 95;
          v24._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v24);
          v25._uint64_t countAndFlagsBits = (uint64_t)v8;
          v25._unint64_t object = v9;
          String.append(_:)(v25);
          outlined consume of SGDataTypeStorage(v8, v9, v11, v10, v13, v126, v91, v15, 6);
          outlined consume of SGDataTypeStorage(v8, v9, v11, v10, v13, v126, v91, v15, 6);
          swift_release();
          uint64_t v26 = v97;
          unint64_t v27 = v98;
LABEL_6:
          *uint64_t v95 = v26;
          v95[1] = v27;
          return;
        }
        goto LABEL_66;
      }
      int v42 = v11;
      uint64_t v43 = v14;
      outlined copy of SGDataTypeStorage(v8, v9, v42, v10, v13, v12, v14, v15, v16);
      swift_retain();
      _StringGuts.grow(_:)(25);
      v44._uint64_t countAndFlagsBits = 0xD000000000000017;
      v44._unint64_t object = (void *)0x800000025C424B30;
      String.append(_:)(v44);
      unint64_t v97 = (unint64_t)v8;
      unint64_t v98 = (unint64_t)v9;
      uint64_t v99 = *(void *)v96;
      uint64_t v100 = v10;
      uint64_t v101 = v13;
      unint64_t v102 = v126;
      uint64_t v103 = v43;
      char v104 = v16;
      _print_unlocked<A, B>(_:_:)();
      lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
      uint64_t v45 = swift_allocError();
      *(void *)uint64_t v46 = 0;
      *(void *)(v46 + 8) = 0xE000000000000000;
      uint64_t v47 = v45;
      *(unsigned char *)(v46 + 16) = 0;
      swift_willThrow();
      swift_release();
      outlined consume of SGDataTypeStorage(v8, v9, v96[0], v10, v13, v126, v43, v15, v16);
      goto LABEL_19;
    }
    unint64_t v97 = 0;
    unint64_t v98 = 0xE000000000000000;
    uint64_t v105 = v6;
    _print_unlocked<A, B>(_:_:)();
LABEL_38:
    unint64_t v62 = v98;
    lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
    uint64_t v47 = swift_allocError();
    *(void *)uint64_t v63 = v97;
    *(void *)(v63 + 8) = v62;
    *(unsigned char *)(v63 + 16) = 0;
    swift_willThrow();
    goto LABEL_39;
  }
  uint64_t v95 = a4;
  uint64_t v29 = a1[1];
  uint64_t v30 = *(void *)((v6 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  uint64_t v31 = *(void **)((v6 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  BOOL v32 = v30 == 0x73696E615F78616DLL && v31 == (void *)0xEE0079706F72746FLL;
  if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (*(void *)(v29 + 16))
    {
      uint64_t v33 = *(void *)(v29 + 40);
      uint64_t v34 = *(void *)(v29 + 48);
      uint64_t v35 = *(void *)(v29 + 56);
      uint64_t v36 = *(void *)(v29 + 64);
      char v37 = *(unsigned char *)(v29 + 72);
      uint64_t v38 = *(void *)(v29 + 80);
      v117[0] = *(void *)(v29 + 32);
      v117[1] = v33;
      v117[2] = v34;
      v117[3] = v35;
      v117[4] = v36;
      char v118 = v37;
      uint64_t v119 = v38;
      swift_retain();
      swift_bridgeObjectRetain();
      Graph.edge(to:)((uint64_t)v117, v107);
      unint64_t v39 = v107[0];
      outlined init with take of MetalFunctionNode?((uint64_t)v107, (uint64_t)v111, &demangling cache variable for type metadata for Edge?);
      if (!v112)
      {
LABEL_16:
        swift_bridgeObjectRelease();
        swift_release();
        unint64_t v97 = 0;
        unint64_t v98 = 0xE000000000000000;
        _StringGuts.grow(_:)(40);
        swift_bridgeObjectRelease();
        unint64_t v40 = 0xD000000000000026;
        uint64_t v41 = "missing max_anisotropy value node for ";
LABEL_37:
        unint64_t v97 = v40;
        unint64_t v98 = (unint64_t)(v41 - 32) | 0x8000000000000000;
        v61._uint64_t countAndFlagsBits = v30;
        v61._unint64_t object = v31;
        String.append(_:)(v61);
        goto LABEL_38;
      }
      if (v39 == -7)
      {
        outlined release of Edge?(v107);
        goto LABEL_16;
      }
      if ((v39 & 0x8000000000000000) == 0)
      {
        uint64_t v56 = *(void *)(a2 + 64);
        if (v39 < *(void *)(v56 + 16))
        {
          unint64_t v57 = *(void *)(v56 + 48 * v39 + 32);
          outlined copy of NodePersonality(v57);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined release of Edge?(v107);
          swift_bridgeObjectRelease();
          swift_release();
          specialized GraphCompiler.constantValue(from:)(v57, (uint64_t)v108);
          if (v4)
          {
            outlined consume of NodePersonality(v57);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v47 = v4;
          }
          else
          {
            unint64_t v58 = SGDataTypeStorage.bitPattern.getter();
            if ((v58 & 0x100000000) == 0)
            {
              int v59 = ((_BYTE)v58 - 1) & 0xF;
              outlined retain of SGDataTypeStorage((uint64_t)v108, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
              _StringGuts.grow(_:)(17);
              swift_bridgeObjectRelease();
              LODWORD(v105) = v59;
              v60._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v60);
              swift_bridgeObjectRelease();
              outlined retain of SGDataTypeStorage((uint64_t)v108, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
              outlined consume of NodePersonality(v57);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v26 = 0x73696E615F78616DLL;
              unint64_t v27 = 0xEF5F79706F72746FLL;
              goto LABEL_6;
            }
            unint64_t v97 = 0;
            unint64_t v98 = 0xE000000000000000;
            outlined retain of SGDataTypeStorage((uint64_t)v108, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
            _StringGuts.grow(_:)(27);
            uint64_t v105 = 0;
            unint64_t v106 = 0xE000000000000000;
            v79._uint64_t countAndFlagsBits = 0xD000000000000018;
            v79._unint64_t object = (void *)0x800000025C424B10;
            String.append(_:)(v79);
            outlined init with take of SGDataTypeStorage((uint64_t)v108, (uint64_t)&v97);
            _print_unlocked<A, B>(_:_:)();
            v80._uint64_t countAndFlagsBits = 32;
            v80._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v80);
            uint64_t v81 = v105;
            unint64_t v82 = v106;
            lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
            uint64_t v47 = swift_allocError();
            *(void *)uint64_t v83 = v81;
            *(void *)(v83 + 8) = v82;
            *(unsigned char *)(v83 + 16) = 0;
            swift_willThrow();
            outlined retain of SGDataTypeStorage((uint64_t)v108, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
            outlined consume of NodePersonality(v57);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          goto LABEL_39;
        }
        goto LABEL_60;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  BOOL v48 = v30 == 0x6D616C635F646F6CLL && v31 == (void *)0xE900000000000070;
  if (!v48 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    unint64_t v97 = 0;
    unint64_t v98 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    unint64_t v40 = 0xD000000000000015;
    uint64_t v41 = "unsupported function ";
    goto LABEL_37;
  }
  if (!*(void *)(v29 + 16)) {
    goto LABEL_61;
  }
  uint64_t v49 = *(void *)(v29 + 40);
  uint64_t v50 = *(void *)(v29 + 48);
  uint64_t v51 = *(void *)(v29 + 56);
  uint64_t v52 = *(void *)(v29 + 64);
  char v53 = *(unsigned char *)(v29 + 72);
  uint64_t v54 = *(void *)(v29 + 80);
  v123[0] = *(void *)(v29 + 32);
  v123[1] = v49;
  v123[2] = v50;
  unint64_t v123[3] = v51;
  v123[4] = v52;
  char v124 = v53;
  uint64_t v125 = v54;
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.edge(to:)((uint64_t)v123, v109);
  unint64_t v55 = v109[0];
  outlined init with take of MetalFunctionNode?((uint64_t)v109, (uint64_t)v115, &demangling cache variable for type metadata for Edge?);
  if (!v116)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v97 = 0;
    unint64_t v98 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v40 = 0xD00000000000001FLL;
    uint64_t v41 = "missing lod_min value node for ";
    goto LABEL_37;
  }
  if (v55 == -7)
  {
    outlined release of Edge?(v109);
    goto LABEL_29;
  }
  if ((v55 & 0x8000000000000000) != 0)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v93 = v5;
  uint64_t v64 = *(void *)(a2 + 64);
  unint64_t v65 = *(void *)(v64 + 16);
  if (v55 >= v65)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v66 = v64 + 32;
  uint64_t v67 = (unint64_t *)(v64 + 32 + 48 * v55);
  unint64_t v68 = *v67;
  uint64_t v92 = v66;
  unint64_t v126 = v67[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v69 = v68;
  outlined copy of NodePersonality(v68);
  outlined release of Edge?(v109);
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v29 + 16) < 2uLL)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  uint64_t v70 = *(void *)(v29 + 96);
  uint64_t v71 = *(void *)(v29 + 104);
  uint64_t v72 = *(void *)(v29 + 112);
  uint64_t v73 = *(void *)(v29 + 120);
  char v74 = *(unsigned char *)(v29 + 128);
  uint64_t v75 = *(void *)(v29 + 136);
  v120[0] = *(void *)(v29 + 88);
  v120[1] = v70;
  _OWORD v120[2] = v71;
  v120[3] = v72;
  v120[4] = v73;
  char v121 = v74;
  uint64_t v122 = v75;
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.edge(to:)((uint64_t)v120, v110);
  unint64_t v76 = v110[0];
  outlined init with take of MetalFunctionNode?((uint64_t)v110, (uint64_t)v113, &demangling cache variable for type metadata for Edge?);
  uint64_t v47 = v4;
  if (!v114) {
    goto LABEL_46;
  }
  if (v76 == -7)
  {
    outlined release of Edge?(v110);
LABEL_46:
    swift_bridgeObjectRelease();
    swift_release();
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v77._uint64_t countAndFlagsBits = v30;
    v77._unint64_t object = v31;
    String.append(_:)(v77);
    lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
    uint64_t v47 = swift_allocError();
    *(void *)uint64_t v78 = 0xD00000000000001FLL;
    *(void *)(v78 + 8) = 0x800000025C424AC0;
    *(unsigned char *)(v78 + 16) = 0;
    swift_willThrow();
LABEL_51:
    outlined consume of NodePersonality(v69);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_19:
    uint64_t v5 = v93;
LABEL_39:
    uint64_t *v5 = v47;
    return;
  }
  if (v76 < v65)
  {
    unint64_t v84 = *(void *)(v92 + 48 * v76);
    outlined copy of NodePersonality(v84);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined release of Edge?(v110);
    swift_bridgeObjectRelease();
    swift_release();
    specialized GraphCompiler.floatValue(from:)(v69);
    if (!v4)
    {
      float v86 = v85;
      specialized GraphCompiler.floatValue(from:)(v84);
      float v87 = v86;
      if ((~LODWORD(v86) & 0x7F800000) != 0)
      {
        float v87 = 65504.0;
        if (v86 <= 65504.0)
        {
          if (v86 >= -65504.0) {
            float v87 = v86;
          }
          else {
            float v87 = -65504.0;
          }
        }
      }
      v88._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v88);
      swift_bridgeObjectRelease();
      v89._uint64_t countAndFlagsBits = 95;
      v89._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v89);
      *(float *)&uint64_t v105 = v87;
      v90._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v90);
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v69);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v84);
      swift_bridgeObjectRelease();
      uint64_t v26 = 0x6D616C635F646F6CLL;
      unint64_t v27 = 0xEA00000000005F70;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined consume of NodePersonality(v84);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
}

unint64_t closure #1 in closure #3 in GraphCompiler.extractSamplerNodes(in:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  unint64_t v7 = (void *)a4[1];
  uint64_t v8 = a4[2];
  swift_bridgeObjectRetain();
  unint64_t result = specialized OrderedSet._find(_:)(a1, a2, v6, v7);
  if (v10)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)(v8 + 16))
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    return a1;
  }
  __break(1u);
  return result;
}

uint64_t GraphCompiler.extract(node:from:withName:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return specialized GraphCompiler.extract(node:from:withName:)(a1, a2, a3, a4);
}

uint64_t closure #2 in GraphCompiler.extract(node:from:withName:)(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if (!*(void *)(*a2 + 16)) {
    return result;
  }
  uint64_t v6 = *(void *)(result + 16);
  uint64_t v54 = *(void *)(result + 24);
  uint64_t v7 = *(void *)(result + 56);
  uint64_t v8 = *(void *)(result + 72);
  uint64_t v9 = *(void *)(result + 80);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)result);
  if ((v10 & 1) == 0) {
    return result;
  }
  unint64_t v11 = *(void *)(*(void *)(v3 + 56) + 8 * result);
  if (v11 == -7) {
    return result;
  }
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v12 = *(void *)(a3 + 64);
  if (v11 >= *(void *)(v12 + 16))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v13 = v12 + 48 * v11;
  unint64_t result = *(void *)(v13 + 48);
  uint64_t v14 = *(void *)(result + 16);
  if (v14)
  {
    uint64_t v42 = v7;
    uint64_t v43 = a2;
    uint64_t v44 = v9;
    uint64_t v45 = v8;
    uint64_t v41 = a3;
    unint64_t v46 = *(void *)(v13 + 32);
    for (uint64_t i = (void *)(swift_bridgeObjectRetain() + 80); ; i += 7)
    {
      uint64_t v16 = *(i - 6);
      uint64_t v47 = *(i - 5);
      uint64_t v17 = *(i - 4);
      uint64_t v18 = *(i - 3);
      uint64_t v19 = *(i - 2);
      char v20 = *((unsigned char *)i - 8);
      uint64_t v21 = *i;
      if (v17 == v6 && v18 == v54) {
        break;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_16;
      }
      if (!--v14) {
        return swift_bridgeObjectRelease();
      }
    }
    uint64_t v17 = v6;
    uint64_t v18 = v54;
LABEL_16:
    v48[0] = v16;
    v48[1] = v47;
    v48[2] = v17;
    v48[3] = v18;
    v48[4] = v19;
    char v49 = v20;
    uint64_t v50 = v21;
    swift_bridgeObjectRetain();
    unint64_t v23 = v46;
    outlined copy of NodePersonality(v46);
    uint64_t v24 = *v43;
    uint64_t v25 = *(void *)(*v43 + 16);
    swift_retain();
    uint64_t v54 = v18;
    swift_bridgeObjectRetain();
    if (!v25
      || (unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v42), (v26 & 1) == 0)
      || (unint64_t v27 = *(void *)(*(void *)(v24 + 56) + 8 * result), v27 == -7))
    {
      swift_bridgeObjectRelease();
      swift_release();
LABEL_20:
      outlined consume of NodePersonality(v23);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    if ((v27 & 0x8000000000000000) == 0)
    {
      uint64_t v28 = *(void *)(v41 + 64);
      if (v27 < *(void *)(v28 + 16))
      {
        uint64_t v29 = v28 + 48 * v27;
        uint64_t v30 = *(void *)(*(void *)(v29 + 40) + 16);
        if (v30)
        {
          unint64_t v40 = *(void *)(v29 + 32);
          uint64_t v31 = (void *)(swift_bridgeObjectRetain() + 80);
          while (1)
          {
            uint64_t v32 = *(v31 - 6);
            uint64_t v33 = *(v31 - 5);
            uint64_t v34 = *(v31 - 4);
            uint64_t v35 = *(v31 - 3);
            uint64_t v36 = *(v31 - 2);
            char v37 = *((unsigned char *)v31 - 8);
            uint64_t v38 = *v31;
            if (v34 == v45 && v35 == v44) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              goto LABEL_37;
            }
            v31 += 7;
            if (!--v30)
            {
              swift_release();
              swift_bridgeObjectRelease();
              unint64_t v23 = v46;
              goto LABEL_35;
            }
          }
          uint64_t v34 = v45;
          uint64_t v35 = v44;
LABEL_37:
          v51[0] = v32;
          v51[1] = v33;
          v51[2] = v34;
          v51[3] = v35;
          v51[4] = v36;
          char v52 = v37;
          uint64_t v53 = v38;
          swift_bridgeObjectRetain();
          outlined copy of NodePersonality(v40);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          Graph.connect(_:to:)((uint64_t)v48, (unint64_t)v51);
          swift_bridgeObjectRelease_n();
          swift_release_n();
          swift_bridgeObjectRelease();
          swift_release();
          outlined consume of NodePersonality(v40);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v23 = v46;
        }
        else
        {
          swift_release();
LABEL_35:
          swift_bridgeObjectRelease();
        }
        goto LABEL_20;
      }
      goto LABEL_41;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
  }
  return result;
}

void closure #1 in Graph.convertColors(to:)(uint64_t a1, CGColorSpace *a2, uint64_t a3)
{
  unint64_t v3 = *(void *)a1;
  if (*(void *)a1 >> 61) {
    return;
  }
  uint64_t v162 = *(void *)(a1 + 8);
  uint64_t v164 = *(void *)(a1 + 16);
  uint64_t v5 = *(void **)(v3 + 16);
  uint64_t v4 = *(void **)(v3 + 24);
  uint64_t v7 = *(void *)(v3 + 32);
  uint64_t v6 = *(void *)(v3 + 40);
  uint64_t v9 = *(void *)(v3 + 48);
  uint64_t v8 = *(void *)(v3 + 56);
  uint64_t v11 = *(void *)(v3 + 64);
  uint64_t v10 = *(void *)(v3 + 72);
  int v12 = *(unsigned __int8 *)(v3 + 80);
  if (v12 == 22)
  {
    unint64_t v166 = *(void *)a1;
    space = a2;
    uint64_t v156 = *(void *)(a1 + 32);
    char v158 = *(unsigned char *)(a1 + 40);
    uint64_t v143 = *(void *)(a1 + 24);
    int v152 = 1;
    uint64_t v13 = 3;
  }
  else
  {
    if (v12 != 23) {
      return;
    }
    unint64_t v166 = *(void *)a1;
    space = a2;
    uint64_t v156 = *(void *)(a1 + 32);
    char v158 = *(unsigned char *)(a1 + 40);
    uint64_t v143 = *(void *)(a1 + 24);
    int v152 = 0;
    uint64_t v13 = 4;
  }
  unint64_t v154 = v13;
  char v14 = *(unsigned char *)(v3 + 80);
  outlined copy of SGDataTypeStorage(v5, v4, v7, v6, v9, v8, v11, v10, v12);
  CGColorRef CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace(space, kCGRenderingIntentDefault, (CGColorRef)v5, 0);
  int v149 = v9;
  int v150 = v8;
  int v147 = v7;
  int v148 = v6;
  uint64_t v145 = v5;
  uint64_t v146 = v4;
  char v144 = v14;
  if (!CopyByMatchingToColorSpace)
  {
    int v26 = v7;
    int v27 = v11;
    outlined copy of SGDataTypeStorage(v5, v4, v26, v6, v9, v8, v11, v10, v14);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v166);
    type metadata accessor for CGColorRef(0);
    uint64_t v28 = String.init<A>(describing:)();
    uint64_t v30 = v29;
    *(void *)&long long v181 = 0;
    *((void *)&v181 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    unint64_t v194 = 0xD00000000000002FLL;
    unint64_t v195 = 0x800000025C424B90;
    CFStringRef v31 = CGColorSpaceCopyName(space);
    uint64_t v32 = (__CFString *)v31;
    if (v31)
    {
      *(void *)&long long v181 = v31;
      type metadata accessor for CFStringRef(0);
      uint64_t v33 = v32;
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v36 = v35;
    }
    else
    {
      uint64_t v34 = 0x3E6C696E3CLL;
      uint64_t v36 = (void *)0xE500000000000000;
    }
    unint64_t v173 = v166;
    uint64_t v174 = v162;
    uint64_t v175 = v164;
    uint64_t v176 = v143;
    uint64_t v177 = v156;
    char v178 = v158;
    uint64_t v179 = v28;
    uint64_t v180 = v30;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v173);
    v64._uint64_t countAndFlagsBits = v34;
    v64._unint64_t object = v36;
    String.append(_:)(v64);

    swift_bridgeObjectRelease();
    v65._uint64_t countAndFlagsBits = 39;
    v65._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v65);
    unint64_t v66 = v194;
    unint64_t v67 = v195;
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v173, (uint64_t)&v181);
    *(void *)&long long v193 = v66;
    *((void *)&v193 + 1) = v67;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *unint64_t v68 = v181;
    long long v69 = v185;
    long long v71 = v182;
    long long v70 = v183;
    v68[3] = v184;
    v68[4] = v69;
    v68[1] = v71;
    v68[2] = v70;
    long long v72 = v189;
    long long v74 = v186;
    long long v73 = v187;
    v68[7] = v188;
    v68[8] = v72;
    v68[5] = v74;
    v68[6] = v73;
    long long v75 = v193;
    long long v77 = v190;
    long long v76 = v191;
    v68[11] = v192;
    v68[12] = v75;
    v68[9] = v77;
    v68[10] = v76;
    swift_willThrow();
    outlined consume of SGDataTypeStorage(v5, v146, v147, v148, v149, v150, v27, v10, v144);
    return;
  }
  int v141 = v10;
  int v142 = v11;
  CGColorRef v16 = CopyByMatchingToColorSpace;
  uint64_t v17 = CGColorRef.components.getter();
  if (!v17)
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_((uint64_t)&v173);
    *(void *)&long long v181 = 0;
    *((void *)&v181 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v37._uint64_t countAndFlagsBits = 0xD000000000000036;
    v37._unint64_t object = (void *)0x800000025C424BC0;
    String.append(_:)(v37);
    unint64_t v194 = (unint64_t)v16;
    type metadata accessor for CGColorRef(0);
    _print_unlocked<A, B>(_:_:)();
    v38._uint64_t countAndFlagsBits = 39;
    v38._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    long long v39 = v181;
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v173, (uint64_t)&v181);
    long long v193 = v39;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *unint64_t v40 = v181;
    long long v41 = v185;
    long long v43 = v182;
    long long v42 = v183;
    v40[3] = v184;
    v40[4] = v41;
    v40[1] = v43;
    v40[2] = v42;
    long long v44 = v189;
    long long v46 = v186;
    long long v45 = v187;
    v40[7] = v188;
    v40[8] = v44;
    v40[5] = v46;
    v40[6] = v45;
    long long v47 = v193;
    long long v49 = v190;
    long long v48 = v191;
    v40[11] = v192;
    v40[12] = v47;
    v40[9] = v49;
    v40[10] = v48;
    swift_willThrow();
    outlined consume of SGDataTypeStorage(v5, v4, v7, v6, v149, v8, v11, v10, v14);

    return;
  }
  uint64_t v18 = v17;
  CGColorRef v140 = v16;
  int64_t v19 = *(void *)(v17 + 16);
  if (v19)
  {
    *(void *)&long long v181 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
    uint64_t v20 = 0;
    uint64_t v21 = v181;
    unint64_t v22 = *(void *)(v181 + 16);
    do
    {
      double v23 = *(double *)(v18 + 8 * v20 + 32);
      *(void *)&long long v181 = v21;
      unint64_t v24 = *(void *)(v21 + 24);
      if (v22 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v22 + 1, 1);
        uint64_t v21 = v181;
      }
      ++v20;
      float v25 = v23;
      *(void *)(v21 + 16) = v22 + 1;
      *(float *)(v21 + 4 * v22++ + 32) = v25;
    }
    while (v19 != v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = MEMORY[0x263F8EE78];
  }
  unint64_t v50 = *(void *)(v21 + 16);
  if (v50 < v154)
  {
    swift_bridgeObjectRelease();
    outlined copy of NodePersonality(v166);
    type metadata accessor for CGColorRef(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v51 = v16;
    uint64_t v52 = String.init<A>(describing:)();
    uint64_t v54 = v53;
    *(void *)&long long v181 = 0;
    *((void *)&v181 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    unint64_t v194 = 0xD000000000000027;
    unint64_t v195 = 0x800000025C424C00;
    CFStringRef v55 = CGColorSpaceCopyName(space);
    uint64_t v56 = (__CFString *)v55;
    if (v55)
    {
      *(void *)&long long v181 = v55;
      type metadata accessor for CFStringRef(0);
      unint64_t v57 = v56;
      uint64_t v58 = String.init<A>(describing:)();
      Swift::String v60 = v59;
    }
    else
    {
      uint64_t v58 = 0x3E6C696E3CLL;
      Swift::String v60 = (void *)0xE500000000000000;
    }
    unint64_t v173 = v166;
    uint64_t v174 = v162;
    uint64_t v175 = v164;
    uint64_t v176 = v143;
    uint64_t v177 = v156;
    char v178 = v158;
    uint64_t v179 = v52;
    uint64_t v180 = v54;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v173);
    v126._uint64_t countAndFlagsBits = v58;
    v126._unint64_t object = v60;
    String.append(_:)(v126);

    swift_bridgeObjectRelease();
    v127._uint64_t countAndFlagsBits = 39;
    v127._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v127);
    unint64_t v128 = v194;
    unint64_t v129 = v195;
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v173, (uint64_t)&v181);
    *(void *)&long long v193 = v128;
    *((void *)&v193 + 1) = v129;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *uint64_t v130 = v181;
    long long v131 = v185;
    long long v133 = v182;
    long long v132 = v183;
    v130[3] = v184;
    v130[4] = v131;
    v130[1] = v133;
    v130[2] = v132;
    long long v134 = v189;
    long long v136 = v186;
    long long v135 = v187;
    v130[7] = v188;
    v130[8] = v134;
    v130[5] = v136;
    v130[6] = v135;
    long long v137 = v193;
    long long v139 = v190;
    long long v138 = v191;
    v130[11] = v192;
    v130[12] = v137;
    v130[9] = v139;
    v130[10] = v138;
    swift_willThrow();
    outlined consume of SGDataTypeStorage(v145, v146, v147, v148, v149, v150, v142, v10, v144);

    return;
  }
  if (!v152)
  {
    if (one-time initialization token for color4 == -1)
    {
      if (!v50)
      {
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
LABEL_31:
      if (v50 != 1)
      {
        if (v50 >= 3)
        {
          if (v50 != 3)
          {
            uint64_t v61 = static MetalDataType.color4;
            unsigned int spaceb = *(_DWORD *)(v21 + 32);
            unsigned int v159 = *(_DWORD *)(v21 + 36);
            uint64_t v167 = *(void *)(v21 + 40);
            swift_retain();
            swift_bridgeObjectRelease();
            *(void *)&long long v78 = __PAIR64__(v159, spaceb);
            *((void *)&v78 + 1) = v167;
            *(_OWORD *)spacea = v78;
            char v63 = 9;
            goto LABEL_35;
          }
LABEL_81:
          __break(1u);
          return;
        }
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
LABEL_79:
      __break(1u);
      goto LABEL_80;
    }
LABEL_77:
    swift_once();
    unint64_t v50 = *(void *)(v21 + 16);
    if (!v50) {
      goto LABEL_78;
    }
    goto LABEL_31;
  }
  if (one-time initialization token for color3 == -1)
  {
    if (v50) {
      goto LABEL_24;
    }
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  swift_once();
  unint64_t v50 = *(void *)(v21 + 16);
  if (!v50) {
    goto LABEL_74;
  }
LABEL_24:
  if (v50 == 1)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  if (v50 < 3)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  uint64_t v61 = static MetalDataType.color3;
  *(void *)&long long v62 = *(void *)(v21 + 32);
  *((void *)&v62 + 1) = *(unsigned int *)(v21 + 40);
  *(_OWORD *)spacea = v62;
  swift_retain();
  swift_bridgeObjectRelease();
  char v63 = 8;
LABEL_35:
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  uint64_t v79 = swift_allocObject();
  *(_OWORD *)(v79 + 16) = xmmword_25C418EE0;
  *(void *)(v79 + 32) = 7632239;
  *(void *)(v79 + 40) = 0xE300000000000000;
  *(void *)(v79 + 48) = v61;
  unint64_t v80 = swift_allocObject();
  *(_OWORD *)(v80 + 16) = *(_OWORD *)spacea;
  *(_OWORD *)(v80 + 32) = 0u;
  *(_OWORD *)(v80 + 48) = 0u;
  *(_OWORD *)(v80 + 64) = 0u;
  *(unsigned char *)(v80 + 80) = v63;
  *(void *)(v80 + 88) = v61;
  unint64_t v81 = *(void *)(a3 + 40);
  swift_retain_n();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v81, MEMORY[0x263F8EE78], v79, v80, a3 + 64, a3, &v196);
  char v151 = v63;
  outlined copy of SGDataTypeStorage(spacea[0], spacea[1], 0, 0, 0, 0, 0, 0, v63);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v201 = v197;
  int v82 = v11;
  int v83 = v150;
  uint64_t v157 = *(void *)(v197 + 16);
  if (!v157) {
    goto LABEL_52;
  }
  uint64_t v153 = v197 + 32;
  swift_bridgeObjectRetain();
  uint64_t v84 = 0;
  while (2)
  {
    float v86 = (uint64_t *)(v153 + 56 * v84);
    uint64_t v87 = *v86;
    uint64_t v88 = v86[1];
    uint64_t v89 = v86[2];
    uint64_t v90 = v86[3];
    uint64_t v91 = v86[4];
    char v92 = *((unsigned char *)v86 + 40);
    uint64_t v93 = v86[6];
    *(void *)&long long v219 = v87;
    *((void *)&v219 + 1) = v88;
    uint64_t v220 = v89;
    uint64_t v221 = v90;
    uint64_t v222 = v91;
    char v223 = v92;
    uint64_t v224 = v93;
    uint64_t v94 = *(void *)(v162 + 16);
    if (!v94) {
      goto LABEL_40;
    }
    uint64_t v160 = v84;
    uint64_t v95 = (void *)(v162 + 80);
    do
    {
      uint64_t v96 = *(v95 - 6);
      uint64_t v97 = *(v95 - 5);
      uint64_t v98 = *(v95 - 4);
      uint64_t v99 = *(v95 - 2);
      char v100 = *((unsigned char *)v95 - 8);
      uint64_t v101 = *v95;
      if (v98 == v89 && *(v95 - 3) == v90)
      {
        uint64_t v85 = v90;
LABEL_38:
        uint64_t v212 = v96;
        uint64_t v213 = v97;
        uint64_t v214 = v89;
        uint64_t v215 = v85;
        uint64_t v216 = v99;
        char v217 = v100;
        uint64_t v218 = v101;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v212, &v219);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_39;
      }
      uint64_t v168 = *(v95 - 6);
      uint64_t v85 = *(v95 - 3);
      uint64_t v103 = v89;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v89 = v98;
        uint64_t v96 = v168;
        goto LABEL_38;
      }
      v95 += 7;
      --v94;
      uint64_t v89 = v103;
    }
    while (v94);
    uint64_t v212 = v168;
    uint64_t v213 = v97;
    uint64_t v214 = v98;
    uint64_t v215 = v85;
    uint64_t v216 = v99;
    char v217 = v100;
    uint64_t v218 = v101;
LABEL_39:
    uint64_t v84 = v160;
LABEL_40:
    if (++v84 != v157) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v201);
  int v82 = v142;
  int v83 = v150;
LABEL_52:
  uint64_t v200 = v198;
  char v104 = v151;
  uint64_t v161 = *(void *)(v198 + 16);
  if (!v161) {
    goto LABEL_69;
  }
  uint64_t v155 = v198 + 32;
  swift_bridgeObjectRetain();
  uint64_t v105 = 0;
  while (2)
  {
    uint64_t v107 = (uint64_t *)(v155 + 56 * v105);
    uint64_t v108 = *v107;
    uint64_t v109 = v107[1];
    uint64_t v110 = v107[2];
    uint64_t v111 = v107[3];
    uint64_t v112 = v107[4];
    char v113 = *((unsigned char *)v107 + 40);
    uint64_t v114 = v107[6];
    v209[0] = v108;
    v209[1] = v109;
    v209[2] = v110;
    v209[3] = v111;
    v209[4] = v112;
    char v210 = v113;
    uint64_t v211 = v114;
    uint64_t v115 = *(void *)(v164 + 16);
    if (!v115) {
      goto LABEL_57;
    }
    uint64_t v163 = v105;
    uint64_t v116 = (void *)(v164 + 80);
    while (2)
    {
      uint64_t v117 = *(v116 - 6);
      uint64_t v118 = *(v116 - 5);
      uint64_t v119 = *(v116 - 4);
      uint64_t v120 = *(v116 - 2);
      char v121 = *((unsigned char *)v116 - 8);
      uint64_t v122 = *v116;
      if (v119 == v110 && *(v116 - 3) == v111)
      {
        uint64_t v106 = v111;
LABEL_55:
        uint64_t v202 = v117;
        uint64_t v203 = v118;
        uint64_t v204 = v110;
        uint64_t v205 = v106;
        uint64_t v206 = v120;
        char v207 = v121;
        uint64_t v208 = v122;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v202, (uint64_t)v209);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_56;
      }
      uint64_t v169 = *(v116 - 6);
      uint64_t v124 = *(v116 - 3);
      uint64_t v125 = v110;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v110 = v119;
        uint64_t v106 = v124;
        uint64_t v117 = v169;
        goto LABEL_55;
      }
      v116 += 7;
      --v115;
      uint64_t v110 = v125;
      if (v115) {
        continue;
      }
      break;
    }
    uint64_t v202 = v169;
    uint64_t v203 = v118;
    uint64_t v204 = v119;
    uint64_t v205 = v124;
    uint64_t v206 = v120;
    char v207 = v121;
    uint64_t v208 = v122;
LABEL_56:
    char v104 = v151;
    uint64_t v105 = v163;
LABEL_57:
    if (++v105 != v161) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v200);
  int v82 = v142;
  int v83 = v150;
LABEL_69:
  specialized Graph.remove(_:)(v143);
  outlined consume of SGDataTypeStorage(v145, v146, v147, v148, v149, v83, v82, v141, v144);
  outlined consume of SGDataTypeStorage(spacea[0], spacea[1], 0, 0, 0, 0, 0, 0, v104);

  swift_release();
  outlined init with take of NodePersonality(&v196, &v199);
  outlined release of NodePersonality(&v199);
  outlined release of [Input]((uint64_t)&v201);
  outlined release of [Input]((uint64_t)&v200);
}

uint64_t specialized closure #1 in OrderedSet.removeSubrange(_:)(uint64_t result, void *a2, uint64_t a3, unint64_t a4, int64_t a5)
{
  if ((a4 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  int64_t v5 = a5;
  uint64_t v6 = a4;
  uint64_t v8 = *(void *)(a3 + 8);
  unint64_t v9 = *(void *)(v8 + 16);
  if (v9 < a4 || (uint64_t)v9 < a5) {
    goto LABEL_16;
  }
  if (a5 < 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  int v12 = (uint64_t *)result;
  unint64_t v13 = a5 - a4;
  if (a5 == a4)
  {
LABEL_13:
    swift_retain();
    specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(v6, v5, v8, v12, a2);
    return swift_release();
  }
  if (a5 > a4)
  {
    swift_retain();
    uint64_t v22 = v6;
    char v14 = (uint64_t *)(v8 + 16 * v6 + 40);
    while (1)
    {
      uint64_t v15 = *(v14 - 1);
      uint64_t v16 = *v14;
      uint64_t v17 = *(void *)(a3 + 8);
      swift_bridgeObjectRetain();
      swift_retain();
      specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v15, v16, v17, v12, (uint64_t)a2);
      char v19 = v18;
      uint64_t v21 = v20;
      unint64_t result = swift_release();
      if (v19) {
        break;
      }
      v14 += 2;
      specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v21, v12, a2, a3);
      swift_bridgeObjectRelease();
      if (!--v13)
      {
        swift_release();
        uint64_t v8 = *(void *)(a3 + 8);
        uint64_t v6 = v22;
        int64_t v5 = a5;
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    *uint64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v7 = a3;
    uint64_t v8 = a2;
    uint64_t v9 = *(void *)(a2 + 16);
    swift_retain();
    swift_retain();
    uint64_t result = swift_retain();
    uint64_t v11 = 0;
    int v12 = (void *)MEMORY[0x263F8EE78];
    uint64_t v26 = v7;
    uint64_t v27 = v8;
    while (v9)
    {
      uint64_t v29 = v6;
      uint64_t v14 = *(void *)(v8 + v11 + 32);
      uint64_t v15 = *(void *)(v8 + v11 + 40);
      uint64_t v16 = *(void *)(v7 + v11 + 32);
      uint64_t v17 = *(unsigned __int8 *)(v7 + v11 + 40);
      swift_bridgeObjectRetain();
      outlined copy of MetalLibrary(v16, v17);
      uint64_t v18 = a4(v14, v15, v16, v17);
      if (v5)
      {
        swift_bridgeObjectRelease();
        outlined consume of MetalLibrary(v16, v17);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        return (uint64_t)v12;
      }
      uint64_t v21 = v18;
      uint64_t v22 = v19;
      uint64_t v23 = v20;
      swift_bridgeObjectRelease();
      uint64_t result = outlined consume of MetalLibrary(v16, v17);
      if (v22)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
          int v12 = (void *)result;
        }
        unint64_t v25 = v12[2];
        unint64_t v24 = v12[3];
        if (v25 >= v24 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v12);
          int v12 = (void *)result;
        }
        uint64_t v12[2] = v25 + 1;
        unint64_t v13 = &v12[3 * v25];
        v13[4] = v21;
        v13[5] = v22;
        v13[6] = v23;
      }
      uint64_t v7 = v26;
      uint64_t v8 = v27;
      --v9;
      v11 += 16;
      uint64_t v6 = v29 - 1;
      uint64_t v5 = 0;
      if (v29 == 1)
      {
        swift_release();
        swift_release();
        swift_release();
        return (uint64_t)v12;
      }
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v3 = a1 + 32;
  uint64_t v5 = *a2;
  uint64_t v4 = (void *)a2[1];
  Swift::String v64 = v4 + 4;
  uint64_t v61 = *a2 + 32;
  long long v62 = (void *)(*a2 + 16);
  uint64_t v58 = a2[2];
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  uint64_t v53 = v4 + 7;
  uint64_t v54 = (void *)MEMORY[0x263F8EE78];
  uint64_t v55 = v5;
  uint64_t v56 = v2;
  unint64_t v57 = v4;
  uint64_t v59 = v3;
LABEL_6:
  uint64_t v7 = v3 + 56 * v6;
  Swift::UInt v9 = *(void *)v7;
  uint64_t v8 = *(void *)(v7 + 8);
  uint64_t v10 = *(void *)(v7 + 16);
  uint64_t v11 = *(void *)(v7 + 24);
  uint64_t v12 = *(void *)(v7 + 32);
  int v13 = *(unsigned __int8 *)(v7 + 40);
  uint64_t v14 = *(void *)(v7 + 48);
  v72[0] = v9;
  v72[1] = v8;
  uint64_t v75 = v8;
  uint64_t v67 = v14;
  uint64_t v68 = v10;
  v72[2] = v10;
  v72[3] = v11;
  v72[4] = v12;
  int v66 = v13;
  char v73 = v13;
  uint64_t v74 = v14;
  uint64_t v15 = v4[2];
  uint64_t v71 = v11;
  if (v5)
  {
    unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v9, (uint64_t)v64, v15, v62, v61);
    if (v17) {
      goto LABEL_5;
    }
    if ((result & 0x8000000000000000) != 0) {
      goto LABEL_67;
    }
  }
  else
  {
    if (!v15) {
      goto LABEL_5;
    }
    if (*v64 == v9)
    {
      unint64_t result = 0;
    }
    else
    {
      if (v15 == 1) {
        goto LABEL_5;
      }
      if (v4[5] == v9)
      {
        unint64_t result = 1;
      }
      else
      {
        if (v15 == 2) {
          goto LABEL_5;
        }
        if (v4[6] == v9)
        {
          unint64_t result = 2;
        }
        else
        {
          uint64_t v50 = 0;
          do
          {
            if (v15 - 3 == v50) {
              goto LABEL_5;
            }
            uint64_t v51 = v53[v50++];
          }
          while (v51 != v9);
          unint64_t result = v50 + 2;
          if (v50 + 2 < 0) {
            goto LABEL_67;
          }
        }
      }
    }
  }
  if (result >= *(void *)(v58 + 16))
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  uint64_t v63 = v12;
  uint64_t v65 = v6;
  uint64_t v18 = (void *)(v58 + 32 + 48 * result);
  uint64_t v20 = v18[3];
  uint64_t v19 = v18[4];
  uint64_t v21 = v18[5];
  uint64_t v22 = *(void *)(v19 + 16);
  if (!v20)
  {
    uint64_t v60 = v18[5];
    if (!v22)
    {
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_retain();
      swift_retain();
LABEL_47:
      swift_release();
      uint64_t v2 = v56;
      uint64_t v3 = v59;
      uint64_t v5 = v55;
      uint64_t v6 = v65;
      goto LABEL_4;
    }
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    uint64_t v28 = v19;
    unint64_t v24 = 0;
    uint64_t v29 = (void *)(v28 + 80);
    while (1)
    {
      if (*(v29 - 6) != v9) {
        goto LABEL_24;
      }
      uint64_t v30 = *(v29 - 4);
      uint64_t v31 = *(v29 - 3);
      char v32 = *((unsigned char *)v29 - 8);
      uint64_t v69 = *(v29 - 2);
      uint64_t v70 = *v29;
      uint64_t v33 = *(uint64_t (**)(uint64_t))(*(void *)*(v29 - 5) + 128);
      swift_retain();
      swift_bridgeObjectRetain();
      if ((v33(v75) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_24;
      }
      if (v30 == v68 && v31 == v71)
      {
        swift_bridgeObjectRelease();
        unint64_t result = swift_release();
        if (v32) {
          goto LABEL_33;
        }
      }
      else
      {
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        unint64_t result = swift_release();
        if ((v35 & 1) == 0) {
          goto LABEL_24;
        }
        if (v32)
        {
LABEL_33:
          char v36 = v66;
          if (v70 != v67) {
            char v36 = 0;
          }
          if (v36) {
            goto LABEL_42;
          }
          goto LABEL_24;
        }
      }
      int v37 = v66 ^ 1;
      if (v69 != v63) {
        int v37 = 0;
      }
      if (v37 == 1 && v70 == v67)
      {
LABEL_42:
        uint64_t v6 = v65;
LABEL_17:
        if (v24 >= *(void *)(v60 + 16)) {
          goto LABEL_68;
        }
        uint64_t v25 = v60 + 56 * v24;
        unint64_t v27 = *(void *)(v25 + 32);
        uint64_t v26 = *(void *)(v25 + 40);
        outlined copy of Output?(v27, v26);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        unint64_t result = swift_release();
        if (!v26)
        {
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v5 = v55;
          uint64_t v2 = v56;
          uint64_t v4 = v57;
          uint64_t v3 = v59;
          goto LABEL_5;
        }
        uint64_t v3 = v59;
        if (v27 == -7)
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v5 = v55;
          uint64_t v2 = v56;
          uint64_t v4 = v57;
          goto LABEL_5;
        }
        if ((v27 & 0x8000000000000000) != 0) {
          goto LABEL_70;
        }
        uint64_t v38 = a2[8];
        if (v27 >= *(void *)(v38 + 16)) {
          goto LABEL_71;
        }
        uint64_t v39 = v38 + 48 * v27;
        unint64_t v40 = *(void *)(v39 + 32);
        uint64_t v41 = *(void *)(v39 + 40);
        uint64_t v42 = *(void *)(v39 + 48);
        uint64_t v43 = *(void *)(v39 + 56);
        uint64_t v44 = *(void *)(v39 + 64);
        char v45 = *(unsigned char *)(v39 + 72);
        outlined copy of NodePersonality(v40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        long long v46 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54[2] + 1, 1, v54);
        }
        uint64_t v4 = v57;
        unint64_t v48 = v46[2];
        unint64_t v47 = v46[3];
        uint64_t v54 = v46;
        if (v48 >= v47 >> 1) {
          uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v47 > 1), v48 + 1, 1, v46);
        }
        _OWORD v54[2] = v48 + 1;
        long long v49 = &v54[6 * v48];
        v49[4] = v40;
        v49[5] = v41;
        v49[6] = v42;
        v49[7] = v43;
        v49[8] = v44;
        *((unsigned char *)v49 + 72) = v45;
        uint64_t v2 = v56;
        uint64_t v3 = v59;
        uint64_t v5 = v55;
        uint64_t v6 = v65;
LABEL_5:
        if (++v6 == v2)
        {
          swift_bridgeObjectRelease();
          return (unint64_t)v54;
        }
        goto LABEL_6;
      }
LABEL_24:
      v29 += 7;
      if (v22 == ++v24) {
        goto LABEL_47;
      }
    }
  }
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v72, v19 + 32, v22, (void *)(v20 + 16), v20 + 32);
  if (v23)
  {
    swift_release();
    swift_release();
    uint64_t v6 = v65;
    uint64_t v3 = v59;
    uint64_t v2 = v56;
LABEL_4:
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    uint64_t v4 = v57;
    goto LABEL_5;
  }
  unint64_t v24 = result;
  uint64_t v60 = v21;
  uint64_t v6 = v65;
  if ((result & 0x8000000000000000) == 0) {
    goto LABEL_17;
  }
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
  return result;
}

{
  unint64_t result;
  uint64_t v4;
  uint64_t v6;
  Swift::UInt v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  unint64_t result = MEMORY[0x263F8EE78];
  char v17 = MEMORY[0x263F8EE78];
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(a1 + 32 + 8 * v6);
    uint64_t v8 = (void *)a2[1];
    Swift::UInt v9 = a2[2];
    uint64_t v10 = v8 + 4;
    uint64_t v11 = v8[2];
    if (!*a2)
    {
      if (!v11) {
        goto LABEL_4;
      }
      if (*v10 == v7)
      {
        unint64_t result = 0;
      }
      else
      {
        if (v11 == 1) {
          goto LABEL_4;
        }
        if (v8[5] == v7)
        {
          unint64_t result = 1;
        }
        else
        {
          if (v11 == 2) {
            goto LABEL_4;
          }
          if (v8[6] != v7)
          {
            int v13 = 0;
            uint64_t v14 = v8 + 7;
            while (v11 - 3 != v13)
            {
              uint64_t v15 = v14[v13++];
              if (v15 == v7)
              {
                unint64_t result = v13 + 2;
                if (v13 + 2 < 0) {
                  goto LABEL_27;
                }
                goto LABEL_22;
              }
            }
            goto LABEL_4;
          }
          unint64_t result = 2;
        }
      }
      goto LABEL_22;
    }
    unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v7, (uint64_t)v10, v11, (void *)(*a2 + 16), *a2 + 32);
    if (v12) {
      goto LABEL_4;
    }
    if ((result & 0x8000000000000000) != 0) {
      break;
    }
LABEL_22:
    if (result >= *(void *)(v9 + 16)) {
      goto LABEL_28;
    }
    uint64_t v16 = swift_unknownObjectRetain();
    MEMORY[0x261184120](v16);
    if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
LABEL_4:
    if (++v6 == v4)
    {
      swift_bridgeObjectRelease();
      return v17;
    }
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, void *))
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  uint64_t v21 = v3;
  do
  {
    uint64_t v26 = v5;
    char v6 = *(unsigned char *)(v3 + v4 + 88);
    uint64_t v7 = *(void *)(v3 + v4 + 56);
    uint64_t v8 = *(void *)(v3 + v4 + 64);
    uint64_t v9 = *(void *)(v3 + v4 + 40);
    uint64_t v11 = *(void *)(v3 + v4 + 32);
    v23[0] = *(void *)(v3 + v4 + 48);
    unint64_t v10 = v23[0];
    v23[1] = v7;
    v23[2] = v8;
    long long v24 = *(_OWORD *)(v3 + v4 + 72);
    char v25 = v6;
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = a2(v11, v9, v23);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14)
    {
      uint64_t v5 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v18 = v5[2];
      unint64_t v17 = v5[3];
      if (v18 >= v17 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v5);
      }
      v5[2] = v18 + 1;
      uint64_t v19 = &v5[3 * v18];
      v19[4] = v12;
      v19[5] = v14;
      v19[6] = v16;
    }
    else
    {
      uint64_t v5 = v26;
    }
    v4 += 64;
    --v2;
    uint64_t v3 = v21;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t specialized GraphCompiler.constantValue(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result >> 61)
  {
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = 1701080942;
    v6._unint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
    swift_allocError();
    *(void *)uint64_t v7 = 0xD00000000000001DLL;
    *(void *)(v7 + 8) = 0x800000025C424B50;
    *(unsigned char *)(v7 + 16) = 1;
    return swift_willThrow();
  }
  else
  {
    char v2 = *(unsigned char *)(result + 80);
    long long v3 = *(_OWORD *)(result + 32);
    *(_OWORD *)a2 = *(_OWORD *)(result + 16);
    *(_OWORD *)(a2 + 16) = v3;
    long long v4 = *(_OWORD *)(result + 64);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(result + 48);
    *(_OWORD *)(a2 + 48) = v4;
    *(unsigned char *)(a2 + 64) = v2;
  }
  return result;
}

void specialized GraphCompiler.floatValue(from:)(unint64_t a1)
{
  if (a1 >> 61)
  {
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = 1701080942;
    v4._unint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
    swift_allocError();
    *(void *)uint64_t v5 = 0xD00000000000001DLL;
    *(void *)(v5 + 8) = 0x800000025C424B50;
    *(unsigned char *)(v5 + 16) = 1;
    swift_willThrow();
  }
  else
  {
    uint64_t v1 = *(void **)(a1 + 16);
    int v2 = *(unsigned __int8 *)(a1 + 80);
    if (v2 != 5)
    {
      uint64_t v14 = *(void *)(a1 + 64);
      *(void *)uint64_t v15 = *(void *)(a1 + 72);
      uint64_t v6 = *(void *)(a1 + 48);
      uint64_t v13 = *(void *)(a1 + 56);
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v9 = *(void **)(a1 + 24);
      outlined copy of SGDataTypeStorage(v1, v9, v8, v7, v6, v13, v14, v15[0], v2);
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._uint64_t countAndFlagsBits = 1701080942;
      v11._unint64_t object = (void *)0xE400000000000000;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
      swift_allocError();
      *(void *)uint64_t v12 = 0xD000000000000013;
      *(void *)(v12 + 8) = 0x800000025C424B70;
      *(unsigned char *)(v12 + 16) = 1;
      swift_willThrow();
      outlined consume of SGDataTypeStorage(v1, v9, v8, v7, v6, v13, v14, v15[0], v2);
    }
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SSsAE_pTg504_s11d82Graph0B8CompilerV11samplerName33_137984365F15B3FD94CB2D26CA095C9FLL3for2inSSAA0aB4F22V_AA0B0VtKFSSAIKXEfU0_AF0E0VAF0eJ0VTf1cn_nTf4ngg_n(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v24 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v5 = v24;
    for (uint64_t i = a1 + 40; ; i += 48)
    {
      unint64_t v10 = *(void *)(i - 8);
      uint64_t v9 = *(void *)i;
      uint64_t v11 = *(void *)(i + 8);
      char v12 = *(unsigned char *)(i + 32);
      v20[0] = v10;
      v20[1] = v9;
      v20[2] = v11;
      long long v21 = *(_OWORD *)(i + 16);
      char v22 = v12;
      outlined copy of NodePersonality(v10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #2 in GraphCompiler.samplerName(for:in:)(v20, a2, &v19, v23);
      if (v3) {
        break;
      }
      uint64_t v3 = 0;
      outlined consume of NodePersonality(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = v23[0];
      uint64_t v14 = v23[1];
      uint64_t v24 = v5;
      unint64_t v16 = *(void *)(v5 + 16);
      unint64_t v15 = *(void *)(v5 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v5 = v24;
      }
      *(void *)(v5 + 16) = v16 + 1;
      uint64_t v17 = v5 + 16 * v16;
      *(void *)(v17 + 32) = v13;
      *(void *)(v17 + 40) = v14;
      if (!--v4) {
        return v5;
      }
    }
    outlined consume of NodePersonality(v10);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SS_AHtsAE_pTg504_s11d152Graph0B8CompilerV19extractSamplerNodes33_137984365F15B3FD94CB2D26CA095C9FLL2in4intoyAA0B0Vz_AA17OrderedDictionaryVySSAA12MetalLibraryAELLOGztKFSS_AA0aB4F11VtAPKXEfU0_AF0eJ0VAF0E0VTf1cn_nTf4ngn_n(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v4 = v3;
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v6)
  {
    uint64_t v33 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t result = v33;
    unint64_t v10 = (unsigned char *)(a1 + 72);
    uint64_t v29 = a2;
    while (1)
    {
      uint64_t v11 = result;
      unint64_t v12 = *((void *)v10 - 5);
      uint64_t v13 = *((void *)v10 - 4);
      uint64_t v14 = *((void *)v10 - 3);
      uint64_t v30 = *((void *)v10 - 1);
      uint64_t v31 = *((void *)v10 - 2);
      char v32 = *v10;
      long long v15 = a3[8];
      long long v16 = a3[9];
      long long v17 = a3[6];
      v35[7] = a3[7];
      v35[8] = v15;
      v36[0] = v16;
      *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)((char *)a3 + 153);
      long long v18 = a3[5];
      v35[4] = a3[4];
      void v35[5] = v18;
      v35[6] = v17;
      long long v19 = a3[1];
      v35[0] = *a3;
      v35[1] = v19;
      long long v20 = a3[3];
      v35[2] = a3[2];
      uint64_t v35[3] = v20;
      swift_bridgeObjectRetain();
      outlined retain of Graph((uint64_t)v35);
      outlined retain of Graph((uint64_t)v35);
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v12);
      uint64_t v37 = v14;
      swift_bridgeObjectRetain();
      unint64_t v21 = specialized Sequence.compactMap<A>(_:)(v13, v35);
      outlined release of Graph((uint64_t)v35);
      swift_bridgeObjectRelease();
      outlined retain of Graph((uint64_t)v35);
      outlined retain of RESurfaceShaderMaterial(a2);
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SSsAE_pTg504_s11d82Graph0B8CompilerV11samplerName33_137984365F15B3FD94CB2D26CA095C9FLL3for2inSSAA0aB4F22V_AA0B0VtKFSSAIKXEfU0_AF0E0VAF0eJ0VTf1cn_nTf4ngg_n(v21, (uint64_t)v35);
      if (v4) {
        break;
      }
      outlined release of RESurfaceShaderMaterial(a2);
      outlined release of Graph((uint64_t)v35);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v22 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v24 = v23;
      swift_bridgeObjectRelease();
      v25._uint64_t countAndFlagsBits = v22;
      v25._unint64_t object = v24;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      outlined release of Graph((uint64_t)v35);
      uint64_t result = v11;
      uint64_t v34 = v11;
      unint64_t v26 = *(void *)(v11 + 16);
      unint64_t v27 = *(void *)(result + 24);
      if (v26 >= v27 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v26 + 1, 1);
        uint64_t result = v34;
      }
      *(void *)(result + 16) = v26 + 1;
      uint64_t v28 = result + (v26 << 6);
      *(void *)(v28 + 32) = 0x5F72656C706D6173;
      *(void *)(v28 + 40) = 0xE800000000000000;
      *(void *)(v28 + 48) = v12;
      *(void *)(v28 + 56) = v13;
      *(void *)(v28 + 64) = v37;
      *(void *)(v28 + 72) = v31;
      uint64_t v4 = 0;
      *(void *)(v28 + 80) = v30;
      v10 += 48;
      *(unsigned char *)(v28 + 88) = v32;
      --v6;
      a2 = v29;
      if (!v6) {
        return result;
      }
    }
    outlined release of RESurfaceShaderMaterial(a2);
    outlined release of Graph((uint64_t)v35);
    swift_bridgeObjectRelease();
    outlined release of Graph((uint64_t)v35);
    outlined consume of NodePersonality(v12);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized GraphCompiler.extract(node:from:withName:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v6 = v4;
  Graph.connectedUpstreamSubgraph(rootedAt:)(a1, (uint64_t)v83);
  uint64_t v7 = v83[0];
  v126[0] = v83[1];
  v126[1] = v83[2];
  v126[2] = v83[3];
  v126[3] = v83[4];
  v126[4] = v83[5];
  unint64_t v8 = MEMORY[0x263F8EE78];
  unint64_t v94 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  specialized Graph.init(id:label:inputs:outputs:)(0, 1886217588, 0xE400000000000000, v8, v8, (uint64_t)&v84);
  uint64_t v69 = *(void *)(v7 + 16);
  if (v69)
  {
    unint64_t v66 = v4;
    uint64_t v68 = v7 + 32;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v71 = v9;
      unint64_t v10 = (void *)(v68 + 48 * v9);
      unint64_t v12 = (void *)*v10;
      uint64_t v11 = v10[1];
      uint64_t v13 = v10[2];
      uint64_t v14 = v10[3];
      int64_t v15 = *(void *)(v11 + 16);
      *(void *)&long long v70 = v11;
      Swift::String v127 = (void *)*v10;
      uint64_t v72 = v14;
      uint64_t v73 = v13;
      if (v15)
      {
        outlined copy of NodePersonality((unint64_t)v12);
        v83[0] = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
        unint64_t v6 = v83[0];
        long long v16 = (uint64_t *)(v11 + 56);
        do
        {
          uint64_t v17 = *(v16 - 2);
          uint64_t v5 = (void *)*(v16 - 1);
          uint64_t v18 = *v16;
          v83[0] = v6;
          unint64_t v20 = *(void *)(v6 + 16);
          unint64_t v19 = *(void *)(v6 + 24);
          swift_retain();
          swift_bridgeObjectRetain();
          if (v20 >= v19 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
            unint64_t v6 = v83[0];
          }
          *(void *)(v6 + 16) = v20 + 1;
          unint64_t v21 = (void *)(v6 + 24 * v20);
          v21[4] = v5;
          v21[5] = v18;
          v21[6] = v17;
          v16 += 7;
          --v15;
        }
        while (v15);
        unint64_t v12 = v127;
        uint64_t v14 = v72;
        uint64_t v13 = v73;
        int64_t v22 = *(void *)(v73 + 16);
        if (!v22)
        {
LABEL_17:
          uint64_t v23 = MEMORY[0x263F8EE78];
          goto LABEL_18;
        }
      }
      else
      {
        outlined copy of NodePersonality((unint64_t)v12);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v6 = MEMORY[0x263F8EE78];
        int64_t v22 = *(void *)(v13 + 16);
        if (!v22) {
          goto LABEL_17;
        }
      }
      v83[0] = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
      uint64_t v23 = v83[0];
      uint64_t v24 = (uint64_t *)(v13 + 56);
      do
      {
        uint64_t v25 = *(v24 - 2);
        uint64_t v5 = (void *)*(v24 - 1);
        uint64_t v26 = *v24;
        v83[0] = v23;
        unint64_t v28 = *(void *)(v23 + 16);
        unint64_t v27 = *(void *)(v23 + 24);
        swift_retain();
        swift_bridgeObjectRetain();
        if (v28 >= v27 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
          uint64_t v23 = v83[0];
        }
        *(void *)(v23 + 16) = v28 + 1;
        uint64_t v29 = (void *)(v23 + 24 * v28);
        v29[4] = v5;
        v29[5] = v26;
        v29[6] = v25;
        v24 += 7;
        --v22;
      }
      while (v22);
      swift_bridgeObjectRelease();
      unint64_t v12 = v127;
      uint64_t v14 = v72;
LABEL_18:
      specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(*((unint64_t *)&v86 + 1), v6, v23, (unint64_t)v12, (uint64_t)&v88, (uint64_t)&v84, v95);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v30 = v94;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v83[0] = v30;
      uint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
      uint64_t v34 = *(void *)(v30 + 16);
      BOOL v35 = (v32 & 1) == 0;
      uint64_t v36 = v34 + v35;
      if (__OFADD__(v34, v35))
      {
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      char v37 = v32;
      if (*(void *)(v30 + 24) >= v36)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
        uint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
        if ((v37 & 1) != (v39 & 1)) {
          goto LABEL_52;
        }
        uint64_t v33 = v38;
      }
      unint64_t v40 = v83[0];
      if (v37) {
        *(void *)(*(void *)(v83[0] + 56) + 8 * v33) = v96;
      }
      else {
        specialized _NativeDictionary._insert(at:key:value:)(v33, v14, v96, v83[0]);
      }
      uint64_t v9 = v71 + 1;
      unint64_t v94 = v40;
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(v95, &v102);
      outlined release of NodePersonality(&v102);
      unint64_t v101 = v95[1];
      outlined release of [Input]((uint64_t)&v101);
      unint64_t v100 = v95[2];
      outlined release of [Input]((uint64_t)&v100);
      outlined consume of NodePersonality((unint64_t)v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v71 + 1 == v69)
      {
        swift_bridgeObjectRelease_n();
        unint64_t v6 = v66;
        goto LABEL_28;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_28:
  unint64_t v12 = v116;
  specialized Sequence.forEach(_:)(v126, (uint64_t *)&v94, (uint64_t)&v84);
  type metadata accessor for UserGraphCompiler();
  uint64_t v41 = swift_allocObject() + 16;
  _s11ShaderGraph04UserB8CompilerC14CompileContextVSgWOi0_((uint64_t)v83);
  outlined init with take of MetalFunctionNode?((uint64_t)v83, v41, (uint64_t *)&demangling cache variable for type metadata for UserGraphCompiler.CompileContext?);
  long long v124 = v92;
  v125[0] = v93[0];
  *(_OWORD *)((char *)v125 + 9) = *(_OWORD *)((char *)v93 + 9);
  long long v120 = v88;
  long long v121 = v89;
  long long v123 = v91;
  long long v122 = v90;
  v119[0] = v84;
  v119[1] = v85;
  v119[3] = v87;
  _OWORD v119[2] = v86;
  type metadata accessor for MetalShaderProgram();
  uint64_t v42 = (void *)swift_allocObject();
  uint64_t v43 = MEMORY[0x263F8EE78];
  v42[2] = MEMORY[0x263F8EE78];
  v42[3] = specialized Dictionary.init(dictionaryLiteral:)(v43);
  v42[4] = v43;
  v42[5] = v43;
  v42[6] = 1;
  outlined retain of Graph((uint64_t)v119);
  uint64_t v5 = (void *)UserGraphCompiler.compile(sourceProgram:into:)(v119, (uint64_t)v42);
  if (v6)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    outlined release of Graph((uint64_t)v119);
    swift_release();
    outlined release of Graph((uint64_t)v119);
LABEL_38:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  swift_release();
  outlined release of Graph((uint64_t)v119);
  unint64_t v44 = v94;
  if (!*(void *)(v94 + 16)) {
    goto LABEL_43;
  }
  uint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(a1 + 24));
  if ((v46 & 1) == 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  unint64_t v47 = *(void *)(*(void *)(v44 + 56) + 8 * v45);
  if (v47 == -7)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if ((v47 & 0x8000000000000000) != 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v47 >= *(void *)(v120 + 16))
  {
LABEL_47:
    __break(1u);
LABEL_48:
    swift_once();
LABEL_40:
    v12[6] = static MetalDataType.void;
    uint64_t v56 = v78;
    uint64_t v57 = v79;
    __swift_project_boxed_opaque_existential_1(v77, v78);
    uint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t))(v57 + 16);
    swift_retain();
    uint64_t v58 = v74(v56, v57);
    uint64_t v59 = v5[6];
    if (!__OFADD__(v59, 1))
    {
      uint64_t v60 = v58;
      v5[6] = v59 + 1;
      type metadata accessor for MetalFunctionDefinitionNode();
      swift_allocObject();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v61 = specialized MetalFunctionDefinitionNode.init(id:argumentTypes:resultType:functionName:specifier:)(v59, (uint64_t)v12, v60, a3, a4, 0, 0);
      swift_release();
      uint64_t v62 = specialized MetalShaderProgram.add<A>(_:)((uint64_t)v61);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, unint64_t))(*(void *)v62 + 240))(0x6863746974735B5BLL, 0xEE005D5D656C6261);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>);
      uint64_t v63 = swift_allocObject();
      *(_OWORD *)(v63 + 16) = v70;
      outlined init with copy of MetalFunctionNode((uint64_t)v77, v63 + 32);
      (*(void (**)(uint64_t))(*(void *)v62 + 288))(v63);
      outlined consume of NodePersonality(v6);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v77);
      v75[8] = v92;
      v76[0] = v93[0];
      *(_OWORD *)((char *)v76 + 9) = *(_OWORD *)((char *)v93 + 9);
      v75[4] = v88;
      v75[5] = v89;
      v75[6] = v90;
      v75[7] = v91;
      v75[0] = v84;
      v75[1] = v85;
      v75[2] = v86;
      v75[3] = v87;
      outlined release of Graph((uint64_t)v75);
      goto LABEL_38;
    }
    __break(1u);
    goto LABEL_50;
  }
  Swift::String v127 = (void *)v44;
  uint64_t v48 = v120 + 48 * v47;
  unint64_t v6 = *(void *)(v48 + 32);
  uint64_t v49 = *(void *)(v48 + 40);
  uint64_t v50 = *(void *)(v48 + 48);
  char v51 = *(unsigned char *)(v48 + 72);
  v116[0] = v6;
  v116[1] = v49;
  v116[2] = v50;
  long long v117 = *(_OWORD *)(v48 + 56);
  char v118 = v51;
  swift_beginAccess();
  outlined init with take of MetalFunctionNode?(v41, (uint64_t)v80, (uint64_t *)&demangling cache variable for type metadata for UserGraphCompiler.CompileContext?);
  outlined init with take of MetalFunctionNode?((uint64_t)v80, (uint64_t)v81, (uint64_t *)&demangling cache variable for type metadata for UserGraphCompiler.CompileContext?);
  if (getEnumTag for IOAttachment((uint64_t)v81) != 1)
  {
    long long v113 = v81[10];
    long long v114 = v81[11];
    uint64_t v115 = v82;
    long long v109 = v81[6];
    long long v110 = v81[7];
    long long v112 = v81[9];
    long long v111 = v81[8];
    long long v105 = v81[2];
    long long v106 = v81[3];
    long long v108 = v81[5];
    long long v107 = v81[4];
    long long v104 = v81[1];
    long long v103 = v81[0];
    outlined copy of NodePersonality(v6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of UserGraphCompiler.CompileContext?(v80, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of UserGraphCompiler.CompileContext?);
    ShaderGraphNode.out.getter((uint64_t)v97);
    uint64_t v52 = UserGraphCompiler.CompileContext.compiledNodeID(for:)((uint64_t)v97);
    char v54 = v53;
    swift_release();
    long long v99 = v98;
    outlined release of String((uint64_t)&v99);
    outlined retain of UserGraphCompiler.CompileContext?(v80, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of UserGraphCompiler.CompileContext?);
    if (v54) {
      goto LABEL_51;
    }
    (*(void (**)(void *__return_ptr, uint64_t))(*v5 + 272))(v77, v52);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, type: MetalDataType)>);
    unint64_t v12 = (void *)swift_allocObject();
    long long v70 = xmmword_25C418EE0;
    *((_OWORD *)v12 + 1) = xmmword_25C418EE0;
    v12[4] = 1684631414;
    v12[5] = 0xE400000000000000;
    if (one-time initialization token for void == -1) {
      goto LABEL_40;
    }
    goto LABEL_48;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #5 in GraphCompiler.extractSamplerNodes(in:into:)(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, _OWORD *a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *a4;
  uint64_t v11 = (void *)a4[1];
  uint64_t v13 = a4[2];
  swift_bridgeObjectRetain();
  uint64_t result = specialized OrderedSet._find(_:)(a1, (uint64_t)a2, v12, v11);
  if (v15) {
    goto LABEL_5;
  }
  unint64_t v16 = result;
  uint64_t v85 = a3;
  uint64_t v86 = v6;
  if (result < 0)
  {
    __break(1u);
    return result;
  }
  unint64_t v17 = *(void *)(v13 + 16);
  swift_bridgeObjectRelease();
  if (v16 >= v17)
  {
    __break(1u);
LABEL_5:
    swift_bridgeObjectRelease();
    long long v18 = a5[8];
    long long v19 = a5[9];
    long long v20 = a5[6];
    v135[7] = a5[7];
    v135[8] = v18;
    v136[0] = v19;
    *(_OWORD *)((char *)v136 + 9) = *(_OWORD *)((char *)a5 + 153);
    long long v21 = a5[5];
    v135[4] = a5[4];
    v135[5] = v21;
    v135[6] = v20;
    long long v22 = a5[1];
    v135[0] = *a5;
    v135[1] = v22;
    long long v23 = a5[3];
    v135[2] = a5[2];
    v135[3] = v23;
    outlined retain of Graph((uint64_t)v135);
    uint64_t v24 = specialized GraphCompiler.extract(node:from:withName:)(a3, (uint64_t)v135, a1, a2);
    uint64_t result = outlined release of Graph((uint64_t)v135);
    if (v6) {
      return result;
    }
    uint64_t v85 = a3;
    uint64_t v86 = 0;
    swift_bridgeObjectRetain();
    specialized OrderedDictionary.subscript.setter(v24, 0, a1, (uint64_t)a2);
  }
  uint64_t v137 = a1;
  uint64_t v96 = (uint64_t)a5;
  uint64_t v25 = *(void *)(v85 + 16);
  uint64_t v111 = v25;
  int64_t v26 = *(void *)(v25 + 16);
  uint64_t v27 = MEMORY[0x263F8EE78];
  int64_t v89 = v26;
  uint64_t v84 = v25;
  if (v26)
  {
    uint64_t v97 = a2;
    uint64_t v100 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    int64_t v28 = v26;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
    uint64_t v27 = v100;
    uint64_t v29 = (uint64_t *)(v25 + 56);
    do
    {
      uint64_t v30 = *(v29 - 2);
      uint64_t v31 = *(v29 - 1);
      uint64_t v32 = *v29;
      unint64_t v34 = *(void *)(v100 + 16);
      unint64_t v33 = *(void *)(v100 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v34 >= v33 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
      }
      *(void *)(v100 + 16) = v34 + 1;
      BOOL v35 = (void *)(v100 + 24 * v34);
      v35[4] = v31;
      void v35[5] = v32;
      v35[6] = v30;
      v29 += 7;
      --v28;
    }
    while (v28);
    outlined release of [Input]((uint64_t)&v111);
    a2 = v97;
  }
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = v137;
  *(void *)(v36 + 24) = a2;
  swift_bridgeObjectRetain();
  ShaderGraphNode.out.getter((uint64_t)v101);
  if (v86)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_deallocUninitializedObject();
  }
  uint64_t v37 = v102;
  long long v110 = v103;
  outlined release of String((uint64_t)&v110);
  *(void *)(v36 + 32) = v37;
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(*(void *)(v96 + 40), MEMORY[0x263F8EE78], v27, v36 | 0x2000000000000000, v96 + 64, v96, &v104);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v109 = v105;
  uint64_t v92 = *(void *)(v105 + 16);
  if (!v92) {
    goto LABEL_32;
  }
  uint64_t v90 = v105 + 32;
  uint64_t v38 = *(void *)(v85 + 8);
  uint64_t v39 = *(void *)(v38 + 16);
  swift_bridgeObjectRetain();
  uint64_t v40 = 0;
  uint64_t v87 = v39;
  long long v88 = (void *)(v38 + 80);
  while (2)
  {
    uint64_t v42 = (uint64_t *)(v90 + 56 * v40);
    uint64_t v43 = *v42;
    uint64_t v44 = v42[1];
    uint64_t v45 = v42[2];
    uint64_t v46 = v42[3];
    uint64_t v47 = v42[4];
    char v48 = *((unsigned char *)v42 + 40);
    uint64_t v49 = v42[6];
    *(void *)&long long v129 = v43;
    *((void *)&v129 + 1) = v44;
    uint64_t v130 = v45;
    uint64_t v131 = v46;
    uint64_t v132 = v47;
    char v133 = v48;
    uint64_t v134 = v49;
    if (!v39) {
      goto LABEL_20;
    }
    uint64_t v94 = v40;
    uint64_t v50 = v88;
    do
    {
      uint64_t v51 = *(v50 - 6);
      uint64_t v52 = *(v50 - 5);
      uint64_t v54 = *(v50 - 4);
      uint64_t v53 = *(v50 - 3);
      uint64_t v55 = *(v50 - 2);
      char v56 = *((unsigned char *)v50 - 8);
      uint64_t v57 = *v50;
      if (v54 == v45 && v53 == v46)
      {
        uint64_t v41 = v46;
LABEL_18:
        uint64_t v122 = v51;
        uint64_t v123 = v52;
        uint64_t v124 = v45;
        uint64_t v125 = v41;
        uint64_t v126 = v55;
        char v127 = v56;
        uint64_t v128 = v57;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v122, &v129);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_19;
      }
      uint64_t v98 = *(v50 - 6);
      uint64_t v137 = *v50;
      uint64_t v41 = v53;
      uint64_t v59 = v45;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v45 = v54;
        uint64_t v57 = v137;
        uint64_t v51 = v98;
        goto LABEL_18;
      }
      v50 += 7;
      --v39;
      uint64_t v45 = v59;
    }
    while (v39);
    uint64_t v122 = v98;
    uint64_t v123 = v52;
    uint64_t v124 = v54;
    uint64_t v125 = v41;
    uint64_t v126 = v55;
    char v127 = v56;
    uint64_t v128 = v137;
LABEL_19:
    uint64_t v39 = v87;
    uint64_t v40 = v94;
LABEL_20:
    if (++v40 != v92) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v109);
LABEL_32:
  uint64_t v108 = v106;
  uint64_t v60 = v85;
  uint64_t v93 = *(void *)(v106 + 16);
  if (!v93) {
    goto LABEL_49;
  }
  uint64_t v91 = v106 + 32;
  swift_bridgeObjectRetain();
  uint64_t v61 = 0;
  int64_t v62 = v89;
  while (2)
  {
    Swift::String v64 = (uint64_t *)(v91 + 56 * v61);
    uint64_t v65 = *v64;
    uint64_t v66 = v64[1];
    uint64_t v67 = v64[2];
    uint64_t v68 = v64[3];
    uint64_t v69 = v64[4];
    char v70 = *((unsigned char *)v64 + 40);
    uint64_t v71 = v64[6];
    v119[0] = v65;
    v119[1] = v66;
    _OWORD v119[2] = v67;
    v119[3] = v68;
    long long v119[4] = v69;
    char v120 = v70;
    uint64_t v121 = v71;
    if (!v62) {
      goto LABEL_37;
    }
    uint64_t v95 = v61;
    uint64_t v72 = (void *)(v84 + 80);
    int64_t v73 = v62;
    while (2)
    {
      uint64_t v74 = *(v72 - 6);
      uint64_t v75 = *(v72 - 5);
      uint64_t v77 = *(v72 - 4);
      uint64_t v76 = *(v72 - 3);
      uint64_t v78 = *(v72 - 2);
      char v79 = *((unsigned char *)v72 - 8);
      uint64_t v80 = *v72;
      if (v77 == v67 && v76 == v68)
      {
        uint64_t v63 = v68;
LABEL_35:
        uint64_t v112 = v74;
        uint64_t v113 = v75;
        uint64_t v114 = v67;
        uint64_t v115 = v63;
        uint64_t v116 = v78;
        char v117 = v79;
        uint64_t v118 = v80;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v112, (uint64_t)v119);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_36;
      }
      uint64_t v99 = *(v72 - 6);
      uint64_t v137 = *v72;
      uint64_t v82 = v76;
      uint64_t v83 = v67;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v67 = v77;
        uint64_t v80 = v137;
        uint64_t v63 = v82;
        uint64_t v74 = v99;
        goto LABEL_35;
      }
      v72 += 7;
      --v73;
      uint64_t v67 = v83;
      if (v73) {
        continue;
      }
      break;
    }
    uint64_t v112 = v99;
    uint64_t v113 = v75;
    uint64_t v114 = v77;
    uint64_t v115 = v82;
    uint64_t v116 = v78;
    char v117 = v79;
    uint64_t v118 = v137;
LABEL_36:
    int64_t v62 = v89;
    uint64_t v61 = v95;
LABEL_37:
    if (++v61 != v93) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v108);
  uint64_t v60 = v85;
LABEL_49:
  specialized Graph.remove(_:)(*(void *)(v60 + 24));
  outlined init with take of NodePersonality(&v104, &v107);
  outlined release of NodePersonality(&v107);
  outlined release of [Input]((uint64_t)&v109);
  return outlined release of [Input]((uint64_t)&v108);
}

uint64_t specialized GraphCompiler.replaceGettersWithFunctionCalls(in:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 64);
  int64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    return v20;
  }
  uint64_t v5 = v3 + 32;
  swift_bridgeObjectRetain_n();
  unint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = v5 + 48 * v6;
    uint64_t v8 = *(void *)(v7 + 24);
    if (v8 != -7) {
      break;
    }
    if ((uint64_t)++v6 >= v4) {
      goto LABEL_10;
    }
LABEL_8:
    if (v6 >= v4)
    {
      __break(1u);
LABEL_10:
      swift_bridgeObjectRelease_n();
      return v20;
    }
  }
  unint64_t v10 = *(void *)v7;
  uint64_t v9 = *(void *)(v7 + 8);
  uint64_t v11 = *(void *)(v7 + 16);
  char v12 = *(unsigned char *)(v7 + 40);
  uint64_t v13 = *(void *)(v7 + 32);
  *(void *)&long long v15 = v10;
  *((void *)&v15 + 1) = v9;
  uint64_t v16 = v11;
  uint64_t v17 = v8;
  uint64_t v18 = v13;
  char v19 = v12;
  outlined copy of NodePersonality(v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  closure #1 in GraphCompiler.replaceGettersWithFunctionCalls(in:)(&v15, a1, &v20);
  if (!v1)
  {
    ++v6;
    outlined consume of NodePersonality(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((uint64_t)v6 >= v4) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  outlined consume of NodePersonality(v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized GraphCompiler.replaceMetalFunctionsWithStitchedNodes(in:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 64);
  unint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = result;
    swift_bridgeObjectRetain();
    int64_t v4 = (unsigned char *)(v1 + 72);
    unint64_t v5 = 1;
    while (1)
    {
      uint64_t v6 = *((void *)v4 - 2);
      if (v6 != -7)
      {
        char v7 = *v4;
        uint64_t v8 = *((void *)v4 - 1);
        uint64_t v10 = *((void *)v4 - 5);
        long long v11 = *((_OWORD *)v4 - 2);
        uint64_t v12 = v6;
        uint64_t v13 = v8;
        char v14 = v7;
        closure #1 in GraphCompiler.replaceMetalFunctionsWithStitchedNodes(in:)((uint64_t)&v10, v3);
      }
      if (v5 >= v2) {
        break;
      }
      v4 += 48;
      if (v5++ >= v2)
      {
        __break(1u);
        break;
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized GraphCompiler.functionGraph(for:)(long long *a1)
{
  type metadata accessor for UserGraphCompiler();
  uint64_t v3 = swift_allocObject();
  _s11ShaderGraph04UserB8CompilerC14CompileContextVSgWOi0_((uint64_t)v26);
  outlined init with take of MetalFunctionNode?((uint64_t)v26, v3 + 16, (uint64_t *)&demangling cache variable for type metadata for UserGraphCompiler.CompileContext?);
  type metadata accessor for MetalShaderProgram();
  int64_t v4 = (void *)swift_allocObject();
  unint64_t v5 = MEMORY[0x263F8EE78];
  v4[2] = MEMORY[0x263F8EE78];
  void v4[3] = specialized Dictionary.init(dictionaryLiteral:)(v5);
  v4[4] = v5;
  v4[5] = v5;
  v4[6] = 1;
  uint64_t v6 = UserGraphCompiler.compile(sourceProgram:into:)(a1, (uint64_t)v4);
  if (v1)
  {
    swift_release();
LABEL_30:
    swift_release();
    return v6;
  }
  swift_release();
  char v7 = MetalShaderProgram.terminalNodes()();
  unint64_t v27 = v5;
  uint64_t v8 = v7[2];
  if (v8)
  {
    long long v22 = v7;
    uint64_t v9 = (uint64_t)(v7 + 4);
    do
    {
      outlined init with copy of MetalFunctionNode(v9, (uint64_t)v25);
      outlined init with copy of MetalFunctionNode((uint64_t)v25, (uint64_t)&v23);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
      type metadata accessor for RESurfaceShaderFunctionNode();
      if ((swift_dynamicCast() & 1) == 0) {
        uint64_t v24 = 0;
      }
      uint64_t v10 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
      if (v24)
      {
        MEMORY[0x261184120](v10);
        if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v9 += 40;
      --v8;
    }
    while (v8);
    unint64_t v5 = v27;
    uint64_t v11 = v22[2];
  }
  else
  {
    uint64_t v11 = 0;
  }
  swift_bridgeObjectRelease();
  if (v5 >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11 == v19)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      if (v11) {
        goto LABEL_17;
      }
      goto LABEL_24;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type GraphCompilerErrors and conformance GraphCompilerErrors();
    swift_allocError();
    *(void *)uint64_t v20 = 0;
    *(void *)(v20 + 8) = 0;
    *(unsigned char *)(v20 + 16) = 3;
    swift_willThrow();
    swift_release();
    goto LABEL_30;
  }
  if (v11 != *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  if (v11)
  {
LABEL_17:
    uint64_t v12 = 4;
    do
    {
      uint64_t v13 = v12 - 4;
      if ((v5 & 0xC000000000000001) != 0)
      {
        uint64_t v14 = MEMORY[0x2611848A0](v12 - 4, v5);
        BOOL v15 = __OFADD__(v13, 1);
        uint64_t v16 = v12 - 3;
        if (v15) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(v5 + 8 * v12);
        swift_retain();
        BOOL v15 = __OFADD__(v13, 1);
        uint64_t v16 = v12 - 3;
        if (v15)
        {
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
      }
      v25[0] = v14;
      closure #2 in GraphCompiler.functionGraph(for:)(v25, v6);
      swift_release();
      ++v12;
    }
    while (v16 != v11);
  }
LABEL_24:
  swift_bridgeObjectRelease();
  uint64_t v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph09RESurfaceD12FunctionNodeCG_AF0gH2IDVs5NeverOTg504_s11d103Graph0B8CompilerV08functionB033_137984365F15B3FD94CB2D26CA095C9FLL3forAA05MetalA7ProgramCAA0B0V_tKFAA14gH73IDVAA09RESurfaceaoP0Ccfu_33_56b5a88cd278ec4ee448dc3b0c4fd19cAnLTf3nnnpk_nTf1cn_n(v5);
  swift_bridgeObjectRelease();
  specialized Set.init<A>(_:)(v17);
  uint64_t v18 = swift_bridgeObjectRelease();
  MEMORY[0x270FA5388](v18);
  (*(void (**)(BOOL (*)(void *)))(*(void *)v6 + 288))(partial apply for closure #3 in GraphCompiler.functionGraph(for:));
  swift_release();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t partial apply for closure #4 in GraphCompiler.compile(for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return closure #4 in GraphCompiler.compile(for:options:)(a1, a2, a3, a4 & 1, *(void *)(v4 + 16), *(void **)(v4 + 24));
}

uint64_t partial apply for closure #5 in GraphCompiler.compile(for:options:)(uint64_t a1)
{
  return closure #5 in GraphCompiler.compile(for:options:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined init with copy of RESurfaceShaderMaterial(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t dispatch thunk of GraphCompilerBackend.compile(program:uniformDefinition:additionalLibraries:options:device:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of GraphCompilerBackend.programName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of GraphCompilerBackend.programName.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of GraphCompilerBackend.programName.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t outlined copy of GraphCompilerErrors(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for GraphCompilerErrors(uint64_t a1)
{
  return outlined consume of GraphCompilerErrors(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of GraphCompilerErrors(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for GraphCompilerErrors(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of GraphCompilerErrors(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for GraphCompilerErrors(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of GraphCompilerErrors(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of GraphCompilerErrors(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for GraphCompilerErrors(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of GraphCompilerErrors(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphCompilerErrors(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphCompilerErrors(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for GraphCompilerErrors(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for GraphCompilerErrors(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GraphCompilerErrors()
{
  return &type metadata for GraphCompilerErrors;
}

ValueMetadata *type metadata accessor for GraphCompiler()
{
  return &type metadata for GraphCompiler;
}

double _s11ShaderGraph04UserB8CompilerC14CompileContextVSgWOi0_(uint64_t a1)
{
  *(void *)(a1 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t outlined copy of UserGraphCompiler.CompileContext?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(a11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(a17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *outlined retain of UserGraphCompiler.CompileContext?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24]);
  return a1;
}

uint64_t outlined consume of UserGraphCompiler.CompileContext?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  if (a2)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of NodePersonality(a11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(a17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of _HashTable.Storage?(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of _HashTable.Storage?(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of MetalLibrary(uint64_t a1, char a2)
{
  if (a2) {
    return swift_unknownObjectRetain();
  }
  else {
    return swift_retain();
  }
}

uint64_t outlined consume of MetalLibrary(uint64_t a1, char a2)
{
  if (a2) {
    return swift_unknownObjectRelease();
  }
  else {
    return swift_release();
  }
}

BOOL partial apply for closure #3 in GraphCompiler.functionGraph(for:)(void *a1)
{
  return closure #3 in GraphCompiler.functionGraph(for:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined copy of (name: String, type: MetalDataType)?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_25C324010()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void *partial apply for closure #3 in GraphCompiler.extractSamplerNodes(in:into:)@<X0>(void *a1@<X8>)
{
  uint64_t result = specialized Sequence.compactMap<A>(_:)(*(void *)(v1 + 16), (uint64_t (*)(uint64_t, uint64_t, void *))partial apply for closure #1 in closure #3 in GraphCompiler.extractSamplerNodes(in:into:));
  *a1 = result;
  return result;
}

unint64_t partial apply for closure #1 in closure #3 in GraphCompiler.extractSamplerNodes(in:into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in closure #3 in GraphCompiler.extractSamplerNodes(in:into:)(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

uint64_t sub_25C3240AC()
{
  outlined consume of SGDataTypeStorage(*(void **)(v0 + 16), *(id *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));
  swift_release();
  return MEMORY[0x270FA0238](v0, 96, 15);
}

uint64_t initializeBufferWithCopyOfBuffer for MetalLibrary(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of MetalLibrary(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for MetalLibrary(uint64_t a1)
{
  return outlined consume of MetalLibrary(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for MetalLibrary(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of MetalLibrary(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of MetalLibrary(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for MetalLibrary(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of MetalLibrary(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetalLibrary(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MetalLibrary(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for MetalLibrary(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for MetalLibrary(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MetalLibrary()
{
  return &type metadata for MetalLibrary;
}

uint64_t OrderedDictionary.description.getter(void (*a1)(void, void, void), unsigned int (*a2)(void, void, void), void (*a3)(char *, char *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  uint64_t v48 = *(void *)(a5 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v49 = v15;
  uint64_t v50 = v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  long long v21 = (char *)&v39 - v20;
  uint64_t v44 = a3;
  uint64_t v53 = a3;
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter()) {
    return 6109787;
  }
  uint64_t v57 = 91;
  unint64_t v58 = 0xE100000000000000;
  uint64_t v53 = (void (*)(char *, char *, uint64_t))v45;
  uint64_t v54 = v46;
  uint64_t v55 = v44;
  uint64_t v56 = 0;
  uint64_t v47 = type metadata accessor for OrderedDictionary.Iterator();
  swift_retain();
  swift_retain();
  swift_retain();
  OrderedDictionary.Iterator.next()(v47, v19);
  uint64_t v24 = v50 + 32;
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
  v23(v21, v19, v49);
  uint64_t v25 = *(void *)(TupleTypeMetadata2 - 8);
  int64_t v26 = *(unsigned int (**)(void, void, void))(v25 + 48);
  uint64_t v45 = (void (*)(void, void, void))(v25 + 48);
  uint64_t v46 = v26;
  unsigned int v27 = v26(v21, 1, TupleTypeMetadata2);
  uint64_t v28 = v48;
  if (v27 != 1)
  {
    uint64_t v29 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v50 = v24;
    uint64_t v44 = v23;
    uint64_t v30 = &v21[v29];
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
    uint64_t v43 = v51 + 32;
    v42(v13, v21, a4);
    uint64_t v31 = v28;
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    uint64_t v41 = v28 + 32;
    v40(v10, v30, a5);
    v52._uint64_t countAndFlagsBits = 0;
    v52._unint64_t object = (void *)0xE000000000000000;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v32._uint64_t countAndFlagsBits = 8250;
    v32._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v32);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    unint64_t v33 = *(void (**)(char *, uint64_t))(v28 + 8);
    uint64_t v48 = v31 + 8;
    v33(v10, a5);
    unint64_t v34 = *(void (**)(char *, uint64_t))(v51 + 8);
    v51 += 8;
    v34(v13, a4);
    OrderedDictionary.Iterator.next()(v47, v19);
    v44(v21, v19, v49);
    if (v46(v21, 1, TupleTypeMetadata2) != 1)
    {
      uint64_t v39 = v21;
      do
      {
        BOOL v35 = &v21[*(int *)(TupleTypeMetadata2 + 48)];
        v42(v13, v21, a4);
        v40(v10, v35, a5);
        v36._uint64_t countAndFlagsBits = 8236;
        v36._unint64_t object = (void *)0xE200000000000000;
        String.append(_:)(v36);
        v52._uint64_t countAndFlagsBits = 0;
        v52._unint64_t object = (void *)0xE000000000000000;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v37._uint64_t countAndFlagsBits = 8250;
        v37._unint64_t object = (void *)0xE200000000000000;
        String.append(_:)(v37);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        String.append(_:)(v52);
        long long v21 = v39;
        swift_bridgeObjectRelease();
        v33(v10, a5);
        v34(v13, a4);
        OrderedDictionary.Iterator.next()(v47, v19);
        v44(v21, v19, v49);
      }
      while (v46(v21, 1, TupleTypeMetadata2) != 1);
    }
  }
  swift_release();
  swift_release();
  swift_release();
  v38._uint64_t countAndFlagsBits = 93;
  v38._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  return v57;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OrderedDictionary<A, B>(uint64_t a1)
{
  return OrderedDictionary.description.getter(*(void (**)(void, void, void))v1, *(unsigned int (**)(void, void, void))(v1 + 8), *(void (**)(char *, char *, uint64_t))(v1 + 16), *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t OrderedSet.description.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a3 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)v25 - v10;
  uint64_t v30 = 91;
  unint64_t v31 = 0xE100000000000000;
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    v25[1] = v9;
    swift_retain();
    swift_retain();
    ContiguousArray.subscript.getter();
    uint64_t v14 = (void (*)(char *, char *, uint64_t))v5[4];
    uint64_t v28 = v5 + 4;
    uint64_t v29 = a2;
    unsigned int v27 = v14;
    v14(v8, v11, a3);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v15 = swift_allocObject();
    long long v26 = xmmword_25C418EE0;
    *(_OWORD *)(v15 + 16) = xmmword_25C418EE0;
    *(void *)(v15 + 56) = a3;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v15 + 32));
    uint64_t v17 = (void (*)(uint64_t *, char *, uint64_t))v5[2];
    v17(boxed_opaque_existential_0, v8, a3);
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = (void (*)(char *, uint64_t))v5[1];
    v18(v8, a3);
    if (v13 != 1)
    {
      uint64_t v19 = 1;
      do
      {
        ContiguousArray.subscript.getter();
        ++v19;
        v27(v8, v11, a3);
        v20._uint64_t countAndFlagsBits = 8236;
        v20._unint64_t object = (void *)0xE200000000000000;
        String.append(_:)(v20);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        uint64_t v21 = swift_allocObject();
        *(_OWORD *)(v21 + 16) = v26;
        *(void *)(v21 + 56) = a3;
        long long v22 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v21 + 32));
        v17(v22, v8, a3);
        print<A>(_:separator:terminator:to:)();
        swift_bridgeObjectRelease();
        v18(v8, a3);
      }
      while (v13 != v19);
    }
    swift_release();
    swift_release();
  }
  v23._uint64_t countAndFlagsBits = 93;
  v23._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  return v30;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OrderedSet<A>(uint64_t a1)
{
  return OrderedSet.description.getter(*v1, v1[1], *(void *)(a1 + 16));
}

Swift::Double __swiftcall _HashTable.UnsafeHandle.debugLoadFactor()()
{
  uint64_t v2 = v0;
  BOOL v3 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, v0, v1) != 0;
  _HashTable.BucketIterator.advance()();
  return (double)v3 / (double)(1 << *v2);
}

void *_HashTable.UnsafeHandle.debugContents()(void *a1, uint64_t a2)
{
  int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (1 << *a1) & ~(1 << *a1 >> 63), 0, MEMORY[0x263F8EE78]);
  uint64_t v13 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a1, a2);
  if (v13)
  {
    uint64_t v5 = -1 << *a1;
    unint64_t v6 = (v5 ^ ~v13) + ((uint64_t)a1[1] >> 6);
    if (v6 >= ~v5) {
      uint64_t v7 = ~v5;
    }
    else {
      uint64_t v7 = 0;
    }
    unint64_t v8 = v6 - v7;
  }
  else
  {
    unint64_t v8 = 0;
  }
  unint64_t v10 = v4[2];
  unint64_t v9 = v4[3];
  if (v10 >= v9 >> 1) {
    int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v4);
  }
  v4[2] = v10 + 1;
  uint64_t v11 = &v4[2 * v10];
  v11[4] = v8;
  *((unsigned char *)v11 + 40) = v13 == 0;
  _HashTable.BucketIterator.advance()();
  return v4;
}

uint64_t _HashTable.Bucket.description.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 41;
  v1._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x402874656B637542;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _HashTable.Bucket()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 41;
  v1._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x402874656B637542;
}

Swift::Int __swiftcall _HashTable.UnsafeHandle.debugOccupiedCount()()
{
  Swift::Int v2 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, v0, v1) != 0;
  _HashTable.BucketIterator.advance()();
  return v2;
}

uint64_t _HashTable.BucketIterator.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v5 = v4;
  uint64_t result = String.count.getter();
  if (result <= 3)
  {
    if (__OFSUB__(4, result))
    {
      __break(1u);
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    uint64_t v30 = MEMORY[0x261184000](32, 0xE100000000000000, 4 - result);
    unint64_t v33 = v7;
    swift_bridgeObjectRetain();
    v8._uint64_t countAndFlagsBits = v3;
    v8._unint64_t object = v5;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = v30;
    uint64_t v5 = v33;
  }
  if (!v1)
  {
    uint64_t v11 = (void *)0xE400000000000000;
    uint64_t v9 = 1818848800;
    goto LABEL_9;
  }
  uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v11 = v10;
  uint64_t result = String.count.getter();
  if (result > 3)
  {
LABEL_9:
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    uint64_t v14 = String.init<A>(_:radix:uppercase:)();
    uint64_t v16 = v15;
    uint64_t result = String.count.getter();
    if (result >= v2)
    {
LABEL_12:
      _StringGuts.grow(_:)(68);
      v19._unint64_t object = (void *)0x800000025C424C30;
      v19._uint64_t countAndFlagsBits = 0xD000000000000016;
      String.append(_:)(v19);
      v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._uint64_t countAndFlagsBits = 0x74656B637562202CLL;
      v21._unint64_t object = (void *)0xEA0000000000203ALL;
      String.append(_:)(v21);
      v22._uint64_t countAndFlagsBits = v3;
      v22._unint64_t object = v5;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._uint64_t countAndFlagsBits = 0x3A65756C6176202CLL;
      v23._unint64_t object = (void *)0xE900000000000020;
      String.append(_:)(v23);
      v24._uint64_t countAndFlagsBits = v9;
      v24._unint64_t object = v11;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._uint64_t countAndFlagsBits = 0x203A73746962202CLL;
      v25._unint64_t object = (void *)0xE800000000000000;
      String.append(_:)(v25);
      v26._uint64_t countAndFlagsBits = v14;
      v26._unint64_t object = v16;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 10272;
      v27._unint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v27);
      v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      v29._uint64_t countAndFlagsBits = 0x29297374696220;
      v29._unint64_t object = (void *)0xE700000000000000;
      String.append(_:)(v29);
      return 0;
    }
    if (!__OFSUB__(v2, result))
    {
      uint64_t v32 = MEMORY[0x261184000](48, 0xE100000000000000, v2 - result);
      BOOL v35 = v17;
      swift_bridgeObjectRetain();
      v18._uint64_t countAndFlagsBits = v14;
      v18._unint64_t object = v16;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = v32;
      uint64_t v16 = v35;
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  if (!__OFSUB__(4, result))
  {
    uint64_t v31 = MEMORY[0x261184000](32, 0xE100000000000000, 4 - result);
    unint64_t v34 = v12;
    swift_bridgeObjectRetain();
    v13._uint64_t countAndFlagsBits = v9;
    v13._unint64_t object = v11;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v31;
    uint64_t v11 = v34;
    goto LABEL_9;
  }
LABEL_15:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_AH2IDVs5NeverOTg504_s11D159Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFAK2IDVAKcfu_33_300d98c1e43c0bc1dedcebf2cdbfb115AkNTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v9;
    int v4 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v6 = *v4;
      v4 += 6;
      uint64_t v5 = v6;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v8 + 1;
      *(void *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AF0F4SpecVs5NeverOTg504_s11d111Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFyAKXEfU0_AA9fG59VAA0M0Vcfu_33_15bdc1b17c00ea157f8d68df2a99b331ApNTf3nnnpk_nTf1cn_nTm(uint64_t a1, uint64_t a2, void (*a3)(BOOL, unint64_t, uint64_t))
{
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
    a3(0, v3, 0);
    uint64_t v4 = v15;
    uint64_t v6 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v8 = *(v6 - 2);
      uint64_t v7 = *(v6 - 1);
      uint64_t v9 = *v6;
      unint64_t v10 = *(void *)(v15 + 16);
      unint64_t v11 = *(void *)(v15 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v10 >= v11 >> 1) {
        a3(v11 > 1, v10 + 1, 1);
      }
      *(void *)(v15 + 16) = v10 + 1;
      uint64_t v12 = (void *)(v15 + 24 * v10);
      v12[4] = v7;
      v12[5] = v9;
      v12[6] = v8;
      v6 += 7;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS_SisAE_pTg508_sSJSis5C131_pIggdzo_SJSisAA_pIegnrzr_TR91_s11ShaderGraph0B0V19resolveSwizzleNodes12nodeDefStoreyAA04NodegH0V_tKF5indexL_3forSiSJ_tKFTf3nnnpf_nTf1cn_n()
{
  uint64_t v1 = String.count.getter();
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v26 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1 & ~(v1 >> 63), 0);
    if (v3 < 0)
    {
      __break(1u);
LABEL_42:
      *(void *)&v24[0] = 0;
      *((void *)&v24[0] + 1) = 0xE000000000000000;
      Character.write<A>(to:)();
      memset(v21, 0, 41);
      uint64_t v22 = 0;
      unint64_t v23 = 0xE000000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)v21);
      outlined init with take of UserGraphError.ErrorType((uint64_t)v21, (uint64_t)v24);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v25 = 0uLL;
      swift_allocError();
      _OWORD *v11 = v24[0];
      long long v12 = v24[4];
      long long v14 = v24[1];
      long long v13 = v24[2];
      v11[3] = v24[3];
      v11[4] = v12;
      v11[1] = v14;
      _OWORD v11[2] = v13;
      long long v15 = v24[8];
      long long v17 = v24[5];
      long long v16 = v24[6];
      v11[7] = v24[7];
      v11[8] = v15;
      v11[5] = v17;
      v11[6] = v16;
      long long v18 = v25;
      long long v20 = v24[9];
      long long v19 = v24[10];
      v11[11] = v24[11];
      v11[12] = v18;
      v11[9] = v20;
      v11[10] = v19;
      swift_willThrow();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v27 = v0;
      uint64_t v2 = v26;
      do
      {
        uint64_t v5 = String.subscript.getter();
        uint64_t v6 = v4;
        if (v5 == 114 && v4 == 0xE100000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
          || v5 == 120 && v6 == 0xE100000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v7 = 0;
        }
        else if (v5 == 103 && v6 == 0xE100000000000000 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        }
               || v5 == 121 && v6 == 0xE100000000000000
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v7 = 1;
        }
        else if (v5 == 98 && v6 == 0xE100000000000000 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        }
               || v5 == 122 && v6 == 0xE100000000000000
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v7 = 2;
        }
        else
        {
          if ((v5 != 97 || v6 != 0xE100000000000000)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v5 != 119 || v6 != 0xE100000000000000)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            goto LABEL_42;
          }
          swift_bridgeObjectRelease();
          uint64_t v7 = 3;
        }
        uint64_t v26 = v2;
        unint64_t v9 = *(void *)(v2 + 16);
        unint64_t v8 = *(void *)(v2 + 24);
        if (v9 >= v8 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
          uint64_t v2 = v26;
        }
        *(void *)(v2 + 16) = v9 + 1;
        *(void *)(v2 + 8 * v9 + 32) = v7;
        String.index(after:)();
        --v3;
      }
      while (v3);
    }
  }
  return v2;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySiGG_11ShaderGraph9InputSpecVs5NeverOTg507_sS2i11f6Graph9hi32VIgyyo_Si6offset_Si7elementtACs5J126OIegnrzr_TR04_s11a79Graph0B0V19resolveSwizzleNodes12nodeDefStoreyAA04NodegH0V_tKFyAA0abI0VKXEfU_AA9cD13VSi_SitXEfU9_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v10 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      if (one-time initialization token for int32 != -1) {
        swift_once();
      }
      uint64_t v5 = static MetalDataType.int32;
      unint64_t v7 = *(void *)(v10 + 16);
      unint64_t v6 = *(void *)(v10 + 24);
      swift_retain();
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      }
      ++v3;
      *(void *)(v10 + 16) = v7 + 1;
      unint64_t v8 = (void *)(v10 + 24 * v7);
      v8[4] = 0x5F7865646E69;
      v8[5] = 0xE600000000000000;
      v8[6] = v5;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Set.contains(_:)(unsigned __int8 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v4 = Hasher._finalize()();
    uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v6 = v4 & ~v5;
    if ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
    {
      uint64_t v7 = ~v5;
      uint64_t v8 = a1;
      while (1)
      {
        unint64_t v9 = 0xE400000000000000;
        uint64_t v10 = 1701736302;
        switch(*(unsigned char *)(*(void *)(a2 + 48) + v6))
        {
          case 1:
            unint64_t v9 = 0xE700000000000000;
            uint64_t v10 = 0x7972616D6D7573;
            break;
          case 2:
            unint64_t v9 = 0xE700000000000000;
            uint64_t v10 = 0x65766968637261;
            break;
          case 3:
            unint64_t v9 = 0xE300000000000000;
            uint64_t v10 = 7630692;
            break;
          case 4:
            uint64_t v10 = 0x62694C6C6174656DLL;
            unint64_t v9 = 0xEC00000079726172;
            break;
          case 5:
            uint64_t v10 = 0x6E69686374697473;
            unint64_t v9 = 0xEE00687061724767;
            break;
          case 6:
            uint64_t v10 = 0x446C616D696E696DLL;
            unint64_t v9 = 0xEA0000000000746FLL;
            break;
          default:
            break;
        }
        unint64_t v11 = 0xE400000000000000;
        uint64_t v12 = 1701736302;
        switch(v8)
        {
          case 1:
            unint64_t v11 = 0xE700000000000000;
            if (v10 == 0x7972616D6D7573) {
              goto LABEL_22;
            }
            goto LABEL_23;
          case 2:
            unint64_t v11 = 0xE700000000000000;
            if (v10 != 0x65766968637261) {
              goto LABEL_23;
            }
            goto LABEL_22;
          case 3:
            unint64_t v11 = 0xE300000000000000;
            if (v10 != 7630692) {
              goto LABEL_23;
            }
            goto LABEL_22;
          case 4:
            unint64_t v11 = 0xEC00000079726172;
            if (v10 != 0x62694C6C6174656DLL) {
              goto LABEL_23;
            }
            goto LABEL_22;
          case 5:
            uint64_t v12 = 0x6E69686374697473;
            unint64_t v11 = 0xEE00687061724767;
            goto LABEL_21;
          case 6:
            unint64_t v11 = 0xEA0000000000746FLL;
            if (v10 != 0x446C616D696E696DLL) {
              goto LABEL_23;
            }
            goto LABEL_22;
          default:
LABEL_21:
            if (v10 != v12) {
              goto LABEL_23;
            }
LABEL_22:
            if (v9 == v11)
            {
              swift_bridgeObjectRelease_n();
              char v13 = 1;
              return v13 & 1;
            }
LABEL_23:
            char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v13) {
              return v13 & 1;
            }
            unint64_t v6 = (v6 + 1) & v7;
            if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
              return v13 & 1;
            }
            break;
        }
      }
    }
  }
  char v13 = 0;
  return v13 & 1;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          long long v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL specialized Set.contains(_:)(Swift::UInt a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v2 = a2;
    Hasher.init(_seed:)();
    Swift::UInt v4 = *(void *)a1;
    Hasher._combine(_:)(*(void *)a1);
    uint64_t v5 = *(void *)(a1 + 8);
    unint64_t v6 = *(void (**)(unsigned char *))(*(void *)v5 + 120);
    swift_retain();
    v6(v33);
    uint64_t v30 = v5;
    swift_release();
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *(void *)(a1 + 24);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t v28 = v8;
    swift_bridgeObjectRelease();
    Swift::UInt v9 = *(void *)(a1 + 32);
    int v27 = *(unsigned __int8 *)(a1 + 40);
    if (v27 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9);
    }
    Swift::UInt v26 = *(void *)(a1 + 48);
    Hasher._combine(_:)(v26);
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v12 = v10 & ~v11;
    uint64_t v13 = v2 + 56;
    if ((*(void *)(v2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
    {
      Swift::UInt v25 = v9;
      uint64_t v14 = ~v11;
      do
      {
        uint64_t v15 = *(void *)(v2 + 48) + 56 * v12;
        if (*(void *)v15 != v4) {
          goto LABEL_8;
        }
        uint64_t v16 = v2;
        uint64_t v17 = *(void *)(v15 + 16);
        uint64_t v18 = *(void *)(v15 + 24);
        uint64_t v29 = *(void *)(v15 + 32);
        char v32 = *(unsigned char *)(v15 + 40);
        uint64_t v31 = *(void *)(v15 + 48);
        long long v19 = *(uint64_t (**)(uint64_t))(**(void **)(v15 + 8) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v19(v30) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v2 = v16;
          goto LABEL_8;
        }
        if (v17 == v7 && v18 == v28)
        {
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v2 = v16;
          if (v32) {
            goto LABEL_17;
          }
        }
        else
        {
          char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v2 = v16;
          if ((v21 & 1) == 0) {
            goto LABEL_8;
          }
          if (v32)
          {
LABEL_17:
            char v22 = v27;
            if (v31 != v26) {
              char v22 = 0;
            }
            if (v22) {
              return 1;
            }
            goto LABEL_8;
          }
        }
        if ((v27 & 1) == 0 && v29 == v25 && v31 == v26) {
          return 1;
        }
LABEL_8:
        unint64_t v12 = (v12 + 1) & v14;
      }
      while (((*(void *)(v13 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
    }
  }
  return 0;
}

uint64_t Graph.splitSharedNodes(nodeDefStore:surfaceShader:geometryModifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized Graph.splitSharedNodes(nodeDefStore:surfaceShader:geometryModifier:)(a4, a5);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.mapStringInputs(nodeDefStore:)(ShaderGraph::NodeDefStore nodeDefStore)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.insertMaterialXDefaultValues(nodeDefStore:)(ShaderGraph::NodeDefStore nodeDefStore)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.resolvingNodegraphImplementations(nodeDefStore:)(ShaderGraph::NodeDefStore nodeDefStore)
{
  rawValue = nodeDefStore.geomPropDefs._rawValue;
  uint64_t v14 = nodeDefStore.implementations._rawValue;
  uint64_t v2 = nodeDefStore.nodeDefs._rawValue;
  unint64_t v3 = *(void *)(*(void *)(v1 + 64) + 16);
  if (v3)
  {
    Swift::UInt v4 = (unsigned char *)(swift_bridgeObjectRetain() + 72);
    unint64_t v5 = 1;
    while (1)
    {
      uint64_t v6 = *((void *)v4 - 2);
      if (v6 != -7)
      {
        char v7 = *v4;
        uint64_t v8 = *((void *)v4 - 1);
        uint64_t v10 = *((void *)v4 - 4);
        uint64_t v9 = *((void *)v4 - 3);
        unint64_t v11 = *((void *)v4 - 5);
        v15[0] = v11;
        v15[1] = v10;
        int v15[2] = v9;
        v15[3] = v6;
        v15[4] = v8;
        char v16 = v7;
        outlined copy of NodePersonality(v11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #1 in Graph.resolvingNodegraphImplementations(nodeDefStore:)(v15, v2, rawValue, v14, v1);
        outlined consume of NodePersonality(v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (v5 >= v3) {
        break;
      }
      v4 += 48;
      if (v5++ >= v3)
      {
        __break(1u);
        break;
      }
    }
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.replaceMultiOutputNodes()()
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.removePassthroughNodes(nodeDefStore:)(ShaderGraph::NodeDefStore nodeDefStore)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.removeEdgesToExplicitlyIgnoredInputs()()
{
  uint64_t v1 = v0[8];
  if (!*(void *)(v1 + 16)) {
    return;
  }
  uint64_t v2 = v0;
  uint64_t v3 = v1 + 32;
  unint64_t v227 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v4 = v3;
  unint64_t v5 = v227;
  unint64_t v6 = 0;
  uint64_t v234 = v0;
  uint64_t v226 = v3;
  do
  {
    char v7 = (unint64_t *)(v4 + 48 * v6);
    if (v7[3] == -7 || *v7 >> 61 != 5) {
      goto LABEL_253;
    }
    unint64_t v230 = *v7;
    unint64_t v231 = v6;
    unint64_t v8 = v7[1];
    outlined copy of NodePersonality(*v7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9._uint64_t countAndFlagsBits = 0x6567616D695F444ELL;
    v9._unint64_t object = (void *)0xE800000000000000;
    Swift::Bool v10 = String.hasPrefix(_:)(v9);
    swift_bridgeObjectRelease();
    if (!v10) {
      goto LABEL_252;
    }
    Swift::Int v11 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of Graph.removeEdgesToExplicitlyIgnoredInputs());
    swift_arrayDestroy();
    uint64_t v260 = *(void *)(v8 + 16);
    if (!v260) {
      goto LABEL_251;
    }
    unint64_t v259 = v8 + 32;
    Swift::Int v257 = v11 + 56;
    swift_bridgeObjectRetain_n();
    uint64_t v12 = 0;
    Swift::Int v235 = v11;
    do
    {
      unint64_t v13 = v259 + 56 * v12;
      Swift::UInt v14 = *(void *)v13;
      uint64_t v15 = *(void *)(v13 + 8);
      uint64_t v16 = *(void *)(v13 + 16);
      uint64_t v17 = *(void *)(v13 + 24);
      uint64_t v18 = *(void *)(v13 + 32);
      int v19 = *(unsigned __int8 *)(v13 + 40);
      uint64_t v20 = *(void *)(v13 + 48);
      *(void *)&long long v265 = *(void *)v13;
      *((void *)&v265 + 1) = v15;
      uint64_t v266 = v16;
      uint64_t v267 = v17;
      uint64_t v268 = v18;
      char v269 = v19;
      uint64_t v270 = v20;
      if (!*(void *)(v11 + 16)) {
        goto LABEL_9;
      }
      uint64_t v254 = v18;
      uint64_t v255 = v20;
      int v256 = v19;
      Swift::UInt v262 = v14;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain_n();
      swift_retain();
      String.hash(into:)();
      uint64_t v21 = v16;
      Swift::Int v22 = Hasher._finalize()();
      uint64_t v23 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v24 = v22 & ~v23;
      if (((*(void *)(v257 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
      {
LABEL_46:
        swift_release();
        swift_bridgeObjectRelease_n();
        goto LABEL_9;
      }
      uint64_t v277 = v15;
      uint64_t v25 = *(void *)(v11 + 48);
      Swift::UInt v26 = (void *)(v25 + 16 * v24);
      BOOL v27 = *v26 == v21 && v26[1] == v17;
      uint64_t v261 = v17;
      uint64_t v258 = v21;
      if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v35 = ~v23;
        unint64_t v36 = (v24 + 1) & v35;
        if (((*(void *)(v257 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0) {
          goto LABEL_46;
        }
        Swift::String v37 = (void *)(v25 + 16 * v36);
        if (*v37 != v21 || v37[1] != v17)
        {
          do
          {
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
            unint64_t v36 = (v36 + 1) & v35;
            if (((*(void *)(v257 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0) {
              goto LABEL_46;
            }
            uint64_t v39 = (void *)(v25 + 16 * v36);
          }
          while (*v39 != v21 || v39[1] != v17);
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v28 = (void *)v2[1];
      uint64_t v29 = v2[2];
      uint64_t v30 = v28 + 4;
      uint64_t v31 = v28[2];
      Swift::UInt v32 = v262;
      if (*v2)
      {
        unint64_t v33 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v262, (uint64_t)v30, v31, (void *)(*v2 + 16), *v2 + 32);
        if (v34) {
          goto LABEL_8;
        }
        if ((v33 & 0x8000000000000000) != 0) {
          goto LABEL_259;
        }
      }
      else
      {
        if (!v31) {
          goto LABEL_8;
        }
        if (*v30 == v262)
        {
          unint64_t v33 = 0;
        }
        else
        {
          if (v31 == 1) {
            goto LABEL_8;
          }
          if (v28[5] == v262)
          {
            unint64_t v33 = 1;
          }
          else
          {
            if (v31 == 2) {
              goto LABEL_8;
            }
            if (v28[6] == v262)
            {
              unint64_t v33 = 2;
            }
            else
            {
              if (v31 == 3)
              {
LABEL_8:
                swift_bridgeObjectRelease();
                swift_release();
                goto LABEL_9;
              }
              if (v28[7] == v262)
              {
                unint64_t v33 = 3;
              }
              else
              {
                uint64_t v41 = 0;
                uint64_t v42 = v28 + 8;
                do
                {
                  if (v31 - 4 == v41) {
                    goto LABEL_8;
                  }
                  uint64_t v43 = v42[v41++];
                }
                while (v43 != v262);
                unint64_t v33 = v41 + 3;
                if (v41 + 3 < 0) {
                  goto LABEL_259;
                }
              }
            }
          }
        }
      }
      if (v33 >= *(void *)(v29 + 16))
      {
        __break(1u);
LABEL_259:
        __break(1u);
LABEL_260:
        __break(1u);
LABEL_261:
        __break(1u);
LABEL_262:
        __break(1u);
LABEL_263:
        __break(1u);
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
        goto LABEL_266;
      }
      uint64_t v44 = (void *)(v29 + 48 * v33);
      uint64_t v45 = v44[5];
      uint64_t v46 = v44[7];
      uint64_t v47 = v44[8];
      uint64_t v237 = v44[4];
      uint64_t v238 = v44[9];
      if (v46)
      {
        uint64_t v48 = *(void *)(v47 + 16);
        swift_retain();
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        unint64_t v49 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v265, v47 + 32, v48, (void *)(v46 + 16), v46 + 32);
        char v51 = v50;
        swift_release();
        if ((v51 & 1) == 0)
        {
          uint64_t v52 = v238;
          if ((v49 & 0x8000000000000000) == 0) {
            goto LABEL_58;
          }
          goto LABEL_260;
        }
        uint64_t v233 = v45;
LABEL_87:
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of Graph.Adjacent?(v237, v233);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v2 = v234;
        Swift::Int v11 = v235;
        goto LABEL_9;
      }
      uint64_t v233 = v44[5];
      if (!*(void *)(v47 + 16))
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        goto LABEL_87;
      }
      uint64_t v246 = *(void *)(v47 + 16);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v69 = v246;
      unint64_t v49 = 0;
      char v70 = (void *)(v47 + 80);
      while (1)
      {
        if (*(v70 - 6) != v32) {
          goto LABEL_66;
        }
        uint64_t v71 = *(v70 - 4);
        uint64_t v72 = *(v70 - 3);
        uint64_t v247 = *(v70 - 2);
        char v73 = *((unsigned char *)v70 - 8);
        uint64_t v74 = *v70;
        uint64_t v75 = *(uint64_t (**)(uint64_t))(*(void *)*(v70 - 5) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v75(v277) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_release();
          Swift::UInt v32 = v262;
          uint64_t v69 = v246;
          goto LABEL_66;
        }
        if (v71 != v258 || v72 != v261)
        {
          char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_release();
          Swift::UInt v32 = v262;
          uint64_t v69 = v246;
          if ((v77 & 1) == 0) {
            goto LABEL_66;
          }
          if ((v73 & 1) == 0) {
            break;
          }
          goto LABEL_75;
        }
        swift_bridgeObjectRelease();
        swift_release();
        Swift::UInt v32 = v262;
        uint64_t v69 = v246;
        if ((v73 & 1) == 0) {
          break;
        }
LABEL_75:
        char v78 = v256;
        if (v74 != v255) {
          char v78 = 0;
        }
        if (v78) {
          goto LABEL_84;
        }
LABEL_66:
        v70 += 7;
        if (v69 == ++v49) {
          goto LABEL_87;
        }
      }
      int v79 = v256 ^ 1;
      if (v247 != v254) {
        int v79 = 0;
      }
      if (v79 != 1 || v74 != v255) {
        goto LABEL_66;
      }
LABEL_84:
      uint64_t v45 = v233;
      uint64_t v52 = v238;
LABEL_58:
      if (v49 >= *(void *)(v52 + 16)) {
        goto LABEL_261;
      }
      uint64_t v53 = (void *)(v52 + 56 * v49);
      uint64_t v54 = v53[5];
      uint64_t v55 = v53[6];
      uint64_t v56 = v53[7];
      uint64_t v57 = v53[9];
      uint64_t v245 = v53[4];
      uint64_t v228 = v53[10];
      uint64_t v229 = v53[8];
      outlined copy of Output?(v245, v54);
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of Graph.Adjacent?(v237, v45);
      if (!v54)
      {
        swift_bridgeObjectRelease();
        swift_release();
        Swift::Int v11 = v235;
        goto LABEL_249;
      }
      *(void *)&long long v271 = v245;
      *((void *)&v271 + 1) = v54;
      uint64_t v272 = v55;
      uint64_t v273 = v56;
      uint64_t v274 = v229;
      char v275 = v57 & 1;
      uint64_t v276 = v228;
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      swift_retain();
      swift_bridgeObjectRetain();
      outlined copy of Output?(v245, v54);
      uint64_t v236 = v54;
      swift_retain();
      swift_bridgeObjectRetain();
      unint64_t v58 = (void (*)(void *, void))specialized OrderedDictionary.subscript.modify(v264, v245);
      uint64_t v60 = v59[1];
      Swift::Int v11 = v235;
      uint64_t v225 = v12;
      if (!v60)
      {
        v58(v264, 0);
        goto LABEL_227;
      }
      uint64_t v61 = v59;
      uint64_t v232 = v58;
      uint64_t v62 = *v59;
      uint64_t v63 = *(void *)(v60 + 16);
      if (*v59)
      {
        swift_retain();
        swift_retain();
        unint64_t v64 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v271, v60 + 32, v63, (void *)(v62 + 16), v62 + 32);
        char v66 = v65;
        uint64_t v68 = v67;
      }
      else
      {
        swift_retain();
        unint64_t v64 = specialized Collection<>.firstIndex(of:)((uint64_t *)&v271, v60 + 32, v63);
        char v66 = v80;
        uint64_t v68 = 0;
      }
      swift_release();
      swift_release();
      if (v66)
      {
        specialized OrderedSet._appendNew(_:in:)(&v271, v68, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
        uint64_t v126 = specialized OrderedSet.init<A>(_:)(MEMORY[0x263F8EE78]);
        uint64_t v128 = v127;
        uint64_t v131 = (void *)v61[2];
        uint64_t v130 = v61 + 2;
        long long v129 = v131;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v130 = v131;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v129[2] + 1, 1);
          long long v129 = (void *)*v130;
        }
        unint64_t v134 = v129[2];
        unint64_t v133 = v129[3];
        if (v134 >= v133 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v133 > 1, v134 + 1, 1);
          long long v129 = (void *)*v130;
        }
        v129[2] = v134 + 1;
        long long v135 = &v129[2 * v134];
        v135[4] = v126;
        v135[5] = v128;
        long long v136 = (void *)*v130;
        unint64_t v137 = *(void *)(*v130 + 16);
        char v138 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v130 = v136;
        if ((v138 & 1) == 0)
        {
          long long v136 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v136);
          *uint64_t v130 = v136;
        }
        Swift::Int v11 = v235;
        Swift::UInt v139 = v262;
        if (!v137) {
          goto LABEL_270;
        }
        if (v137 > v136[2])
        {
LABEL_271:
          __break(1u);
LABEL_272:
          __break(1u);
          goto LABEL_273;
        }
        CGColorRef v140 = &v136[2 * v137 - 2];
        uint64_t v142 = v140[5];
        int v141 = v140 + 5;
        uint64_t v143 = *(void *)(v142 + 16);
        if (!v143)
        {
          unint64_t v155 = 0;
          uint64_t v158 = 0;
          goto LABEL_225;
        }
        uint64_t v224 = v141;
        uint64_t v144 = 0;
        uint64_t v145 = (void *)(swift_retain() + 80);
        uint64_t v146 = 136;
        uint64_t v251 = v143;
        while (1)
        {
          if (*(v145 - 6) == v139)
          {
            uint64_t v147 = *(v145 - 4);
            uint64_t v148 = *(v145 - 3);
            uint64_t v242 = *(v145 - 2);
            char v149 = *((unsigned char *)v145 - 8);
            uint64_t v150 = *v145;
            char v151 = *(uint64_t (**)(uint64_t))(*(void *)*(v145 - 5) + 128);
            swift_retain();
            swift_bridgeObjectRetain();
            if (v151(v277))
            {
              if (v147 == v258 && v148 == v261)
              {
                swift_bridgeObjectRelease();
                swift_release();
                Swift::UInt v139 = v262;
                uint64_t v143 = v251;
                if ((v149 & 1) == 0)
                {
LABEL_176:
                  if ((v256 & 1) == 0 && v242 == v254 && v150 == v255) {
                    goto LABEL_179;
                  }
                  goto LABEL_162;
                }
              }
              else
              {
                char v153 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_release();
                Swift::UInt v139 = v262;
                uint64_t v143 = v251;
                if ((v153 & 1) == 0) {
                  goto LABEL_162;
                }
                if ((v149 & 1) == 0) {
                  goto LABEL_176;
                }
              }
              char v154 = v256;
              if (v150 != v255) {
                char v154 = 0;
              }
              if (v154)
              {
LABEL_179:
                swift_release();
                unint64_t v155 = v144 + 1;
                if (__OFADD__(v144, 1))
                {
LABEL_287:
                  __break(1u);
                  return;
                }
                uint64_t v156 = *v141;
                unint64_t v157 = *(void *)(*v141 + 16);
                uint64_t v158 = v144;
                if (v155 != v157)
                {
                  while (2)
                  {
                    if (v155 >= v157) {
                      goto LABEL_263;
                    }
                    unsigned int v159 = (void *)(v156 + v146);
                    if (*(void *)(v156 + v146 - 48) != v139) {
                      goto LABEL_195;
                    }
                    uint64_t v160 = *(v159 - 4);
                    uint64_t v161 = *(v159 - 3);
                    uint64_t v221 = *(v159 - 2);
                    char v252 = *((unsigned char *)v159 - 8);
                    uint64_t v243 = *v159;
                    uint64_t v162 = *(uint64_t (**)(uint64_t))(*(void *)*(v159 - 5) + 128);
                    swift_retain();
                    swift_bridgeObjectRetain();
                    if ((v162(v277) & 1) == 0)
                    {
                      swift_bridgeObjectRelease();
                      swift_release();
                      Swift::UInt v139 = v262;
                      goto LABEL_195;
                    }
                    if (v160 == v258 && v161 == v261)
                    {
                      swift_bridgeObjectRelease();
                      swift_release();
                      Swift::UInt v139 = v262;
                      if ((v252 & 1) == 0) {
                        goto LABEL_210;
                      }
LABEL_190:
                      char v165 = v256;
                      if (v243 != v255) {
                        char v165 = 0;
                      }
                      if ((v165 & 1) == 0) {
                        goto LABEL_195;
                      }
LABEL_213:
                      unint64_t v166 = v224;
                    }
                    else
                    {
                      char v164 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_release();
                      Swift::UInt v139 = v262;
                      if (v164)
                      {
                        if (v252) {
                          goto LABEL_190;
                        }
LABEL_210:
                        if ((v256 & 1) == 0 && v221 == v254 && v243 == v255) {
                          goto LABEL_213;
                        }
                      }
LABEL_195:
                      unint64_t v166 = v224;
                      if (v155 != v158)
                      {
                        if (v158 < 0) {
                          goto LABEL_281;
                        }
                        unint64_t v167 = *(void *)(v156 + 16);
                        if (v158 >= v167) {
                          goto LABEL_282;
                        }
                        if (v155 >= v167) {
                          goto LABEL_283;
                        }
                        unint64_t v253 = v158;
                        uint64_t v168 = v156 + 32 + 56 * v158;
                        uint64_t v169 = *(void *)(v168 + 24);
                        uint64_t v212 = *(void *)(v168 + 16);
                        uint64_t v214 = *(void *)(v168 + 8);
                        uint64_t v210 = *(void *)(v168 + 32);
                        char v208 = *(unsigned char *)(v168 + 40);
                        uint64_t v206 = *(void *)(v168 + 48);
                        uint64_t v170 = *(v159 - 5);
                        uint64_t v244 = *(v159 - 6);
                        uint64_t v171 = *(v159 - 3);
                        uint64_t v222 = *(v159 - 4);
                        uint64_t v172 = *(v159 - 2);
                        char v173 = *((unsigned char *)v159 - 8);
                        uint64_t v216 = *(void *)v168;
                        uint64_t v218 = *(void *)(v156 + v146);
                        uint64_t v174 = *v224;
                        swift_retain();
                        swift_bridgeObjectRetain();
                        swift_retain();
                        swift_bridgeObjectRetain();
                        char v175 = swift_isUniquelyReferenced_nonNull_native();
                        uint64_t *v224 = v174;
                        if ((v175 & 1) == 0)
                        {
                          uint64_t v174 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v174);
                          uint64_t *v224 = v174;
                        }
                        if (v253 >= *(void *)(v174 + 16)) {
                          goto LABEL_284;
                        }
                        uint64_t v176 = v174 + 56 * v253;
                        *(void *)(v176 + 32) = v244;
                        *(void *)(v176 + 40) = v170;
                        *(void *)(v176 + 48) = v222;
                        *(void *)(v176 + 56) = v171;
                        *(void *)(v176 + 64) = v172;
                        *(unsigned char *)(v176 + 72) = v173;
                        *(void *)(v176 + 80) = v218;
                        swift_bridgeObjectRelease();
                        swift_release();
                        unint64_t v166 = v224;
                        uint64_t v177 = *v224;
                        char v178 = swift_isUniquelyReferenced_nonNull_native();
                        uint64_t *v224 = v177;
                        if ((v178 & 1) == 0)
                        {
                          uint64_t v177 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v177);
                          uint64_t *v224 = v177;
                        }
                        Swift::UInt v139 = v262;
                        if (v155 >= *(void *)(v177 + 16)) {
                          goto LABEL_285;
                        }
                        uint64_t v179 = (void *)(v177 + v146);
                        *(v179 - 6) = v216;
                        *(v179 - 5) = v214;
                        *(v179 - 4) = v212;
                        *(v179 - 3) = v169;
                        *(v179 - 2) = v210;
                        *((unsigned char *)v179 - 8) = v208;
                        void *v179 = v206;
                        swift_bridgeObjectRelease();
                        swift_release();
                        uint64_t v158 = v253;
                      }
                      BOOL v125 = __OFADD__(v158++, 1);
                      if (v125) {
                        goto LABEL_265;
                      }
                    }
                    ++v155;
                    uint64_t v156 = *v166;
                    unint64_t v157 = *(void *)(*v166 + 16);
                    v146 += 56;
                    Swift::Int v11 = v235;
                    if (v155 == v157) {
                      goto LABEL_220;
                    }
                    continue;
                  }
                }
LABEL_219:
                Swift::Int v11 = v235;
LABEL_220:
                if ((uint64_t)v155 < v158)
                {
LABEL_267:
                  __break(1u);
LABEL_268:
                  __break(1u);
LABEL_269:
                  __break(1u);
LABEL_270:
                  __break(1u);
                  goto LABEL_271;
                }
LABEL_225:
                specialized ContiguousArray.replaceSubrange<A>(_:with:)(v158, v155);
                goto LABEL_226;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_release();
              Swift::UInt v139 = v262;
              uint64_t v143 = v251;
            }
          }
LABEL_162:
          v145 += 7;
          ++v144;
          v146 += 56;
          if (v143 == v144)
          {
            swift_release();
            uint64_t v158 = v251;
            unint64_t v155 = *(void *)(*v141 + 16);
            goto LABEL_219;
          }
        }
      }
      unint64_t v81 = (void *)v61[2];
      char v82 = swift_isUniquelyReferenced_nonNull_native();
      v61[2] = v81;
      if ((v82 & 1) == 0)
      {
        unint64_t v81 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v81);
        v61[2] = v81;
      }
      Swift::UInt v83 = v262;
      if ((v64 & 0x8000000000000000) != 0) {
        goto LABEL_268;
      }
      if (v64 >= v81[2]) {
        goto LABEL_269;
      }
      uint64_t v84 = &v81[2 * v64];
      uint64_t v86 = v84[5];
      uint64_t v85 = v84 + 5;
      uint64_t v87 = *(void *)(v86 + 16);
      if (!v87)
      {
        unint64_t v99 = 0;
        uint64_t v102 = 0;
        Swift::Int v11 = v235;
        goto LABEL_223;
      }
      char v223 = v85;
      uint64_t v88 = 0;
      int64_t v89 = (void *)(swift_retain() + 80);
      uint64_t v90 = 136;
      uint64_t v248 = v87;
      while (2)
      {
        if (*(v89 - 6) != v83) {
          goto LABEL_99;
        }
        uint64_t v91 = *(v89 - 4);
        uint64_t v92 = *(v89 - 3);
        uint64_t v239 = *(v89 - 2);
        char v93 = *((unsigned char *)v89 - 8);
        uint64_t v94 = *v89;
        uint64_t v95 = *(uint64_t (**)(uint64_t))(*(void *)*(v89 - 5) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v95(v277) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_release();
          Swift::UInt v83 = v262;
          uint64_t v87 = v248;
          goto LABEL_99;
        }
        if (v91 != v258 || v92 != v261)
        {
          char v97 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_release();
          Swift::UInt v83 = v262;
          uint64_t v87 = v248;
          if (v97)
          {
            if (v93) {
              goto LABEL_108;
            }
LABEL_113:
            if ((v256 & 1) == 0 && v239 == v254 && v94 == v255) {
              goto LABEL_116;
            }
          }
LABEL_99:
          v89 += 7;
          ++v88;
          v90 += 56;
          if (v87 == v88)
          {
            swift_release();
            uint64_t v102 = v248;
            unint64_t v99 = *(void *)(*v85 + 16);
            goto LABEL_215;
          }
          continue;
        }
        break;
      }
      swift_bridgeObjectRelease();
      swift_release();
      Swift::UInt v83 = v262;
      uint64_t v87 = v248;
      if ((v93 & 1) == 0) {
        goto LABEL_113;
      }
LABEL_108:
      char v98 = v256;
      if (v94 != v255) {
        char v98 = 0;
      }
      if ((v98 & 1) == 0) {
        goto LABEL_99;
      }
LABEL_116:
      swift_release();
      unint64_t v99 = v88 + 1;
      if (__OFADD__(v88, 1)) {
        goto LABEL_286;
      }
      uint64_t v100 = *v85;
      unint64_t v101 = *(void *)(*v85 + 16);
      uint64_t v102 = v88;
      if (v99 != v101)
      {
        while (2)
        {
          if (v99 >= v101) {
            goto LABEL_262;
          }
          long long v103 = (void *)(v100 + v90);
          if (*(void *)(v100 + v90 - 48) != v83) {
            goto LABEL_132;
          }
          uint64_t v104 = v102;
          uint64_t v105 = *(v103 - 4);
          uint64_t v106 = *(v103 - 3);
          uint64_t v219 = *(v103 - 2);
          char v249 = *((unsigned char *)v103 - 8);
          uint64_t v240 = *v103;
          unint64_t v107 = *(uint64_t (**)(uint64_t))(*(void *)*(v103 - 5) + 128);
          swift_retain();
          swift_bridgeObjectRetain();
          if ((v107(v277) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_release();
            Swift::UInt v83 = v262;
            uint64_t v102 = v104;
            goto LABEL_132;
          }
          if (v105 == v258 && v106 == v261)
          {
            swift_bridgeObjectRelease();
            swift_release();
            Swift::UInt v83 = v262;
            uint64_t v102 = v104;
            if ((v249 & 1) == 0) {
              goto LABEL_147;
            }
LABEL_127:
            char v110 = v256;
            if (v240 != v255) {
              char v110 = 0;
            }
            if ((v110 & 1) == 0) {
              goto LABEL_132;
            }
LABEL_150:
            uint64_t v111 = v223;
          }
          else
          {
            char v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_release();
            Swift::UInt v83 = v262;
            uint64_t v102 = v104;
            if (v109)
            {
              if (v249) {
                goto LABEL_127;
              }
LABEL_147:
              if ((v256 & 1) == 0 && v219 == v254 && v240 == v255) {
                goto LABEL_150;
              }
            }
LABEL_132:
            uint64_t v111 = v223;
            if (v99 != v102)
            {
              if (v102 < 0) {
                goto LABEL_276;
              }
              unint64_t v112 = *(void *)(v100 + 16);
              if (v102 >= v112) {
                goto LABEL_277;
              }
              if (v99 >= v112) {
                goto LABEL_278;
              }
              unint64_t v250 = v102;
              uint64_t v113 = v100 + 32 + 56 * v102;
              uint64_t v114 = *(void *)(v113 + 24);
              uint64_t v211 = *(void *)(v113 + 16);
              uint64_t v213 = *(void *)(v113 + 8);
              uint64_t v209 = *(void *)(v113 + 32);
              char v207 = *(unsigned char *)(v113 + 40);
              uint64_t v205 = *(void *)(v113 + 48);
              uint64_t v115 = *(v103 - 5);
              uint64_t v241 = *(v103 - 6);
              uint64_t v116 = *(v103 - 3);
              uint64_t v220 = *(v103 - 4);
              uint64_t v117 = *(v103 - 2);
              char v118 = *((unsigned char *)v103 - 8);
              uint64_t v215 = *(void *)v113;
              uint64_t v217 = *(void *)(v100 + v90);
              uint64_t v119 = *v223;
              swift_retain();
              swift_bridgeObjectRetain();
              swift_retain();
              swift_bridgeObjectRetain();
              char v120 = swift_isUniquelyReferenced_nonNull_native();
              *char v223 = v119;
              if ((v120 & 1) == 0)
              {
                uint64_t v119 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v119);
                *char v223 = v119;
              }
              if (v250 >= *(void *)(v119 + 16)) {
                goto LABEL_279;
              }
              uint64_t v121 = v119 + 56 * v250;
              *(void *)(v121 + 32) = v241;
              *(void *)(v121 + 40) = v115;
              *(void *)(v121 + 48) = v220;
              *(void *)(v121 + 56) = v116;
              *(void *)(v121 + 64) = v117;
              *(unsigned char *)(v121 + 72) = v118;
              *(void *)(v121 + 80) = v217;
              swift_bridgeObjectRelease();
              swift_release();
              uint64_t v111 = v223;
              uint64_t v122 = *v223;
              char v123 = swift_isUniquelyReferenced_nonNull_native();
              *char v223 = v122;
              if ((v123 & 1) == 0)
              {
                uint64_t v122 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v122);
                *char v223 = v122;
              }
              Swift::UInt v83 = v262;
              if (v99 >= *(void *)(v122 + 16)) {
                goto LABEL_280;
              }
              uint64_t v124 = (void *)(v122 + v90);
              *(v124 - 6) = v215;
              *(v124 - 5) = v213;
              *(v124 - 4) = v211;
              *(v124 - 3) = v114;
              *(v124 - 2) = v209;
              *((unsigned char *)v124 - 8) = v207;
              *uint64_t v124 = v205;
              swift_bridgeObjectRelease();
              swift_release();
              uint64_t v102 = v250;
            }
            BOOL v125 = __OFADD__(v102++, 1);
            if (v125) {
              goto LABEL_264;
            }
          }
          ++v99;
          uint64_t v100 = *v111;
          unint64_t v101 = *(void *)(*v111 + 16);
          v90 += 56;
          Swift::Int v11 = v235;
          if (v99 == v101) {
            goto LABEL_216;
          }
          continue;
        }
      }
LABEL_215:
      Swift::Int v11 = v235;
LABEL_216:
      if ((uint64_t)v99 < v102)
      {
LABEL_266:
        __break(1u);
        goto LABEL_267;
      }
LABEL_223:
      specialized ContiguousArray.replaceSubrange<A>(_:with:)(v102, v99);
LABEL_226:
      specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
      v232(v264, 0);
      uint64_t v12 = v225;
LABEL_227:
      uint64_t v180 = (void (*)(void *, void))specialized OrderedDictionary.subscript.modify(v264, v262);
      if (!v181[1])
      {
        v180(v264, 0);
        swift_bridgeObjectRelease_n();
        uint64_t v191 = v236;
        swift_release_n();
        swift_bridgeObjectRelease_n();
        swift_release_n();
        goto LABEL_248;
      }
      long long v182 = v181;
      v263 = v180;
      uint64_t v184 = v181[3];
      uint64_t v183 = v181[4];
      uint64_t v185 = *(void *)(v183 + 16);
      swift_retain();
      if (v184)
      {
        swift_retain();
        unint64_t v186 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v265, v183 + 32, v185, (void *)(v184 + 16), v184 + 32);
        char v188 = v187;
        uint64_t v190 = v189;
      }
      else
      {
        unint64_t v186 = specialized Collection<>.firstIndex(of:)((uint64_t *)&v265, v183 + 32, v185);
        char v188 = v192;
        uint64_t v190 = 0;
      }
      swift_release();
      swift_release();
      if (v188)
      {
        specialized OrderedSet._appendNew(_:in:)(&v265, v190, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
        uint64_t v197 = (void *)v182[5];
        unint64_t v196 = v182 + 5;
        unint64_t v195 = v197;
        char v198 = swift_isUniquelyReferenced_nonNull_native();
        *unint64_t v196 = v197;
        if ((v198 & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v195[2] + 1, 1);
          unint64_t v195 = (void *)*v196;
        }
        unint64_t v200 = v195[2];
        unint64_t v199 = v195[3];
        uint64_t v12 = v225;
        if (v200 >= v199 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v199 > 1, v200 + 1, 1);
          unint64_t v195 = (void *)*v196;
        }
        v195[2] = v200 + 1;
        uint64_t v201 = &v195[7 * v200];
        *((_OWORD *)v201 + 2) = 0u;
        *((_OWORD *)v201 + 3) = 0u;
        *((_OWORD *)v201 + 4) = 0u;
        v201[10] = 0;
        long long v193 = (void *)*v196;
        unint64_t v202 = *(void *)(*v196 + 16);
        char v203 = swift_isUniquelyReferenced_nonNull_native();
        *unint64_t v196 = v193;
        if ((v203 & 1) == 0)
        {
          long long v193 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v193);
          *unint64_t v196 = v193;
        }
        uint64_t v191 = v236;
        if (v202)
        {
          if (v202 <= v193[2])
          {
            unint64_t v186 = v202 - 1;
            goto LABEL_247;
          }
        }
        else
        {
LABEL_274:
          __break(1u);
        }
        __break(1u);
LABEL_276:
        __break(1u);
LABEL_277:
        __break(1u);
LABEL_278:
        __break(1u);
LABEL_279:
        __break(1u);
LABEL_280:
        __break(1u);
LABEL_281:
        __break(1u);
LABEL_282:
        __break(1u);
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
        goto LABEL_287;
      }
      long long v193 = (void *)v182[5];
      char v194 = swift_isUniquelyReferenced_nonNull_native();
      v182[5] = v193;
      if ((v194 & 1) == 0)
      {
        long long v193 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v193);
        v182[5] = v193;
      }
      uint64_t v12 = v225;
      uint64_t v191 = v236;
      if ((v186 & 0x8000000000000000) != 0) {
        goto LABEL_272;
      }
      if (v186 >= v193[2])
      {
LABEL_273:
        __break(1u);
        goto LABEL_274;
      }
LABEL_247:
      uint64_t v204 = &v193[7 * v186];
      outlined consume of Input?(v204[4], v204[5]);
      v204[10] = 0;
      *((_OWORD *)v204 + 3) = 0u;
      *((_OWORD *)v204 + 4) = 0u;
      *((_OWORD *)v204 + 2) = 0u;
      v263(v264, 0);
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      Swift::Int v11 = v235;
LABEL_248:
      swift_bridgeObjectRelease();
      outlined consume of Input?(v245, v191);
      swift_bridgeObjectRelease();
      swift_release();
LABEL_249:
      uint64_t v2 = v234;
LABEL_9:
      ++v12;
    }
    while (v12 != v260);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_251:
    swift_bridgeObjectRelease();
LABEL_252:
    outlined consume of NodePersonality(v230);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = v226;
    unint64_t v5 = v227;
    unint64_t v6 = v231;
LABEL_253:
    if ((uint64_t)++v6 >= (uint64_t)v5) {
      goto LABEL_256;
    }
  }
  while (v6 < v5);
  __break(1u);
LABEL_256:
  swift_bridgeObjectRelease_n();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.resolveMaterialXEnums()()
{
  uint64_t v2 = *(void *)(v0 + 64);
  unint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v0;
    uint64_t v5 = v2 + 32;
    swift_bridgeObjectRetain_n();
    unint64_t v6 = 0;
    uint64_t v19 = v5;
    while (1)
    {
      char v7 = (unint64_t *)(v5 + 48 * v6);
      if (v7[3] != -7)
      {
        unint64_t v8 = v7[1];
        uint64_t v9 = *(void *)(v8 + 16);
        if (v9)
        {
          unint64_t v10 = *v7;
          unint64_t v11 = v7[2];
          swift_bridgeObjectRetain_n();
          unint64_t v27 = v11;
          swift_bridgeObjectRetain();
          unint64_t v20 = v10;
          outlined copy of NodePersonality(v10);
          uint64_t v12 = (void *)(v8 + 80);
          while (1)
          {
            uint64_t v13 = *v12;
            char v14 = *((unsigned char *)v12 - 8);
            uint64_t v16 = *(v12 - 3);
            uint64_t v15 = *(v12 - 2);
            uint64_t v18 = *(v12 - 5);
            uint64_t v17 = *(v12 - 4);
            *(void *)&long long v21 = *(v12 - 6);
            *((void *)&v21 + 1) = v18;
            uint64_t v22 = v17;
            uint64_t v23 = v16;
            uint64_t v24 = v15;
            char v25 = v14;
            uint64_t v26 = v13;
            swift_retain();
            swift_bridgeObjectRetain();
            closure #1 in closure #1 in Graph.resolveMaterialXEnums()(&v21, v4);
            if (v1) {
              goto LABEL_12;
            }
            v12 += 7;
            swift_bridgeObjectRelease();
            swift_release();
            if (!--v9)
            {
              swift_bridgeObjectRelease_n();
              outlined consume of NodePersonality(v20);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v5 = v19;
              break;
            }
          }
        }
      }
      if ((uint64_t)++v6 >= (uint64_t)v3) {
        break;
      }
      if (v6 >= v3)
      {
        __break(1u);
LABEL_12:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of NodePersonality(v20);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
    }
    swift_bridgeObjectRelease_n();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.resolveSwizzleNodes(nodeDefStore:)(ShaderGraph::NodeDefStore nodeDefStore)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.resolveEnvironmentRadianceNode()()
{
}

uint64_t Graph.replaceMultiOutputNodes()(void (*a1)(void *, uint64_t))
{
  uint64_t v17 = a1;
  uint64_t result = *(void *)(v1 + 64);
  int64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v5 = v1;
    uint64_t v6 = result + 32;
    swift_bridgeObjectRetain_n();
    unint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = v6 + 48 * v7;
      uint64_t v9 = *(void *)(v8 + 24);
      if (v9 == -7)
      {
        if ((uint64_t)++v7 >= v4) {
          return swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        unint64_t v11 = *(void *)v8;
        uint64_t v10 = *(void *)(v8 + 8);
        uint64_t v12 = *(void *)(v8 + 16);
        char v13 = *(unsigned char *)(v8 + 40);
        uint64_t v14 = *(void *)(v8 + 32);
        v15[0] = v11;
        v15[1] = v10;
        int v15[2] = v12;
        v15[3] = v9;
        v15[4] = v14;
        char v16 = v13;
        outlined copy of NodePersonality(v11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v17(v15, v5);
        if (v2)
        {
          outlined consume of NodePersonality(v11);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        ++v7;
        outlined consume of NodePersonality(v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((uint64_t)v7 >= v4) {
          return swift_bridgeObjectRelease_n();
        }
      }
      if (v7 >= v4)
      {
        __break(1u);
        return swift_bridgeObjectRelease_n();
      }
    }
  }
  return result;
}

uint64_t Graph.transformGeomPropValueNodes(surface:geometryModifier:nodeDefStore:)(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  return specialized Graph.transformGeomPropValueNodes(surface:geometryModifier:nodeDefStore:)(a3, a4);
}

uint64_t Graph.insertParamsInputs(surface:geometryModifier:nodeDefStore:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of MetalFunctionNode?(a2, (uint64_t)&v7, &demangling cache variable for type metadata for ShaderGraphNode?);
  unint64_t v5 = v7;
  uint64_t result = specialized Graph.insertParamsInputs(surface:type:nodeDefStore:)(a1, 0);
  if (!v2)
  {
    uint64_t result = outlined init with take of MetalFunctionNode?(a2, (uint64_t)&v8, &demangling cache variable for type metadata for ShaderGraphNode?);
    if (*((void *)&v8 + 1))
    {
      long long v10 = v8;
      v11[0] = v9[0];
      *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)((char *)v9 + 9);
      outlined copy of NodePersonality(v5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Graph.insertParamsInputs(surface:type:nodeDefStore:)((uint64_t)&v10, 1);
      return outlined release of ShaderGraphNode?(a2, (void (*)(void, void, void, void, void, void))outlined consume of ShaderGraphNode?);
    }
  }
  return result;
}

uint64_t Graph.rewireUniformInputs(customUniformsType:)(uint64_t a1)
{
  uint64_t v3 = v1;
  unint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v6 = specialized _ArrayProtocol.filter(_:)(v5, (long long *)v3);
  uint64_t v7 = v2;
  swift_bridgeObjectRelease();
  uint64_t v84 = *(void *)(v6 + 16);
  if (!v84) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v95 = v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_25C418EE0;
  *(void *)(v8 + 32) = 7632239;
  *(void *)(v8 + 40) = 0xE300000000000000;
  *(void *)(v8 + 48) = a1;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 12580;
  *(void *)(v9 + 24) = 0xE200000000000000;
  unint64_t v10 = v9 | 0x6000000000000000;
  unint64_t v11 = *(void *)(v3 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v11, MEMORY[0x263F8EE78], v8, v10, v3 + 64, v3, &v119);
  unint64_t v12 = v119;
  uint64_t v13 = v120;
  uint64_t v14 = v121;
  uint64_t v15 = v122;
  uint64_t v75 = v123;
  char v74 = v124;
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t result = swift_deallocClassInstance();
  uint64_t v156 = v14;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_59;
  }
  uint64_t v73 = v15;
  uint64_t v17 = *(void **)(v6 + 56);
  uint64_t v96 = *(void *)(v14 + 16);
  if (!v96)
  {
    swift_bridgeObjectRetain_n();
    swift_retain();
LABEL_52:
    outlined init with take of NodePersonality(&v119, &v131);
    uint64_t v130 = v120;
    unint64_t v99 = v12;
    *(void *)&long long v100 = v13;
    *((void *)&v100 + 1) = v14;
    uint64_t v101 = v73;
    uint64_t v102 = v75;
    char v103 = v74;
    uint64_t v104 = 7632239;
    unint64_t v105 = 0xE300000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v99);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v99, (uint64_t)&v106);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v118 = 0uLL;
    swift_allocError();
    *uint64_t v60 = v106;
    long long v61 = v110;
    long long v62 = v108;
    long long v63 = v107;
    v60[3] = v109;
    v60[4] = v61;
    v60[1] = v63;
    v60[2] = v62;
    long long v64 = v114;
    long long v65 = v112;
    long long v66 = v111;
    v60[7] = v113;
    v60[8] = v64;
    v60[5] = v66;
    v60[6] = v65;
    long long v67 = v118;
    long long v68 = v116;
    long long v69 = v115;
    v60[11] = v117;
    v60[12] = v67;
    v60[9] = v69;
    v60[10] = v68;
    outlined retain of [Input]((uint64_t)&v156);
    outlined retain of NodePersonality(&v131);
    outlined retain of [Input]((uint64_t)&v130);
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    outlined release of NodePersonality(&v131);
    uint64_t v59 = &v130;
LABEL_53:
    outlined release of [Input]((uint64_t)v59);
    return outlined release of [Input]((uint64_t)&v156);
  }
  uint64_t v70 = v13;
  unint64_t v71 = v12;
  uint64_t v91 = *(void *)(v6 + 40);
  uint64_t v92 = v7;
  unint64_t v81 = v6 + 32;
  uint64_t v88 = *(void *)(v6 + 80);
  char v87 = *(unsigned char *)(v6 + 72);
  unint64_t v83 = v6;
  uint64_t v85 = *(void *)(v6 + 32);
  uint64_t v86 = *(void *)(v6 + 64);
  uint64_t v18 = *(void *)(v6 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v72 = (void *)(v14 + 136);
  uint64_t v19 = 1;
  for (i = v14; ; uint64_t v14 = i)
  {
    unint64_t v89 = v19;
    uint64_t v90 = v18;
    uint64_t v21 = *(void *)(v14 + 32);
    uint64_t v20 = *(void *)(v14 + 40);
    uint64_t v22 = *(void *)(v14 + 48);
    unint64_t v23 = *(void *)(v14 + 56);
    uint64_t v24 = *(void *)(v14 + 64);
    char v25 = *(unsigned char *)(v14 + 72);
    uint64_t v26 = *(void *)(v14 + 80);
    BOOL v27 = v22 == 7632239 && v23 == 0xE300000000000000;
    char v93 = v17;
    if (!v27) {
      break;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t v23 = 0xE300000000000000;
    swift_bridgeObjectRetain();
    uint64_t v22 = 7632239;
    uint64_t v28 = v20;
LABEL_25:
    uint64_t v149 = v21;
    uint64_t v150 = v28;
    uint64_t v151 = v22;
    unint64_t v152 = v23;
    uint64_t v153 = v24;
    char v154 = v25;
    uint64_t v155 = v26;
    Output.getProperty(_:_:)(v95, v18, v17, &v125);
    if (v92)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(&v119, &v142);
      outlined release of NodePersonality(&v142);
      uint64_t v141 = v120;
      uint64_t v59 = &v141;
      goto LABEL_53;
    }
    uint64_t v92 = 0;
    long long v80 = v126;
    uint64_t v78 = v127;
    unint64_t v79 = v125;
    uint64_t v77 = v128;
    char v76 = v129;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v34 = *((void *)&v126 + 1);
    uint64_t v140 = *((void *)&v126 + 1);
    uint64_t v98 = *(void *)(*((void *)&v126 + 1) + 16);
    if (!v98) {
      goto LABEL_50;
    }
    uint64_t v35 = *(void *)(*((void *)&v126 + 1) + 32);
    uint64_t v36 = *(void *)(*((void *)&v126 + 1) + 40);
    uint64_t v37 = *(void *)(*((void *)&v126 + 1) + 48);
    unint64_t v38 = *(void *)(*((void *)&v126 + 1) + 56);
    uint64_t v39 = *(void *)(*((void *)&v126 + 1) + 64);
    char v40 = *(unsigned char *)(*((void *)&v126 + 1) + 72);
    uint64_t v41 = *(void *)(*((void *)&v126 + 1) + 80);
    if (v37 == 7632239 && v38 == 0xE300000000000000)
    {
      uint64_t v42 = *(void *)(*((void *)&v126 + 1) + 32);
      swift_retain();
      unint64_t v38 = 0xE300000000000000;
      swift_bridgeObjectRetain();
      uint64_t v37 = 7632239;
    }
    else
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        if (v98 != 1)
        {
          uint64_t v44 = (void *)(v34 + 136);
          uint64_t v45 = 1;
          while (1)
          {
            uint64_t v46 = v45 + 1;
            if (__OFADD__(v45, 1)) {
              goto LABEL_57;
            }
            uint64_t v47 = *(v44 - 6);
            uint64_t v36 = *(v44 - 5);
            uint64_t v37 = *(v44 - 4);
            unint64_t v38 = *(v44 - 3);
            uint64_t v94 = *(v44 - 2);
            char v40 = *((unsigned char *)v44 - 8);
            uint64_t v41 = *v44;
            if (v37 == 7632239 && v38 == 0xE300000000000000) {
              break;
            }
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if (result)
            {
              uint64_t v42 = v47;
              swift_retain();
              swift_bridgeObjectRetain();
              goto LABEL_47;
            }
            v44 += 7;
            ++v45;
            if (v46 == v98) {
              goto LABEL_50;
            }
          }
          uint64_t v42 = *(v44 - 6);
          swift_retain();
          unint64_t v38 = 0xE300000000000000;
          swift_bridgeObjectRetain();
          uint64_t v37 = 7632239;
LABEL_47:
          uint64_t v39 = v94;
          goto LABEL_32;
        }
LABEL_50:
        outlined init with take of NodePersonality(&v125, &v135);
        uint64_t v134 = v126;
        unint64_t v99 = v79;
        long long v100 = v80;
        uint64_t v101 = v78;
        uint64_t v102 = v77;
        char v103 = v76;
        uint64_t v104 = 7632239;
        unint64_t v105 = 0xE300000000000000;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v99);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v99, (uint64_t)&v106);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        long long v118 = 0uLL;
        swift_allocError();
        *unint64_t v49 = v106;
        long long v50 = v110;
        long long v51 = v108;
        long long v52 = v107;
        v49[3] = v109;
        v49[4] = v50;
        v49[1] = v52;
        v49[2] = v51;
        long long v53 = v114;
        long long v54 = v112;
        long long v55 = v111;
        v49[7] = v113;
        v49[8] = v53;
        v49[5] = v55;
        v49[6] = v54;
        long long v56 = v118;
        long long v57 = v116;
        long long v58 = v115;
        v49[11] = v117;
        v49[12] = v56;
        v49[9] = v58;
        v49[10] = v57;
        outlined retain of [Input]((uint64_t)&v140);
        outlined retain of NodePersonality(&v135);
        outlined retain of [Input]((uint64_t)&v134);
        swift_willThrow();
        swift_bridgeObjectRelease();
        outlined release of NodePersonality(&v135);
        outlined release of [Input]((uint64_t)&v134);
        outlined release of [Input]((uint64_t)&v140);
        swift_bridgeObjectRelease();
        swift_release();
        outlined init with take of NodePersonality(&v119, &v133);
        outlined release of NodePersonality(&v133);
        uint64_t v132 = v120;
        uint64_t v59 = &v132;
        goto LABEL_53;
      }
      uint64_t v42 = v35;
      swift_retain();
      swift_bridgeObjectRetain();
    }
LABEL_32:
    v143[0] = v85;
    v143[1] = v91;
    v143[2] = v90;
    v143[3] = v93;
    v143[4] = v86;
    char v144 = v87 & 1;
    uint64_t v145 = v88;
    v146[0] = v42;
    v146[1] = v36;
    v146[2] = v37;
    v146[3] = v38;
    v146[4] = v39;
    char v147 = v40;
    uint64_t v148 = v41;
    Graph.moveEdges(from:to:)((uint64_t)v143, (uint64_t)v146);
    swift_bridgeObjectRelease();
    swift_release();
    outlined init with take of NodePersonality(&v125, &v139);
    outlined release of NodePersonality(&v139);
    uint64_t v138 = v126;
    outlined release of [Input]((uint64_t)&v138);
    outlined release of [Input]((uint64_t)&v140);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = v83;
    if (v89 == v84)
    {
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(&v119, &v137);
      outlined release of NodePersonality(&v137);
      uint64_t v136 = v120;
      outlined release of [Input]((uint64_t)&v136);
      return outlined release of [Input]((uint64_t)&v156);
    }
    if (v89 >= *(void *)(v83 + 16)) {
      goto LABEL_58;
    }
    uint64_t v19 = v89 + 1;
    unint64_t v43 = v81 + 56 * v89;
    uint64_t v88 = *(void *)(v43 + 48);
    char v87 = *(unsigned char *)(v43 + 40);
    uint64_t v17 = *(void **)(v43 + 24);
    uint64_t v18 = *(void *)(v43 + 16);
    uint64_t v85 = *(void *)v43;
    uint64_t v86 = *(void *)(v43 + 32);
    uint64_t v91 = *(void *)(v43 + 8);
    swift_retain();
    swift_bridgeObjectRetain();
  }
  uint64_t v28 = *(void *)(v14 + 40);
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    goto LABEL_25;
  }
  if (v96 == 1)
  {
LABEL_51:
    swift_bridgeObjectRetain();
    uint64_t v14 = i;
    uint64_t v13 = v70;
    unint64_t v12 = v71;
    goto LABEL_52;
  }
  uint64_t v29 = 1;
  uint64_t v30 = v72;
  while (1)
  {
    uint64_t v31 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    uint64_t v32 = *(v30 - 5);
    uint64_t v97 = *(v30 - 6);
    uint64_t v22 = *(v30 - 4);
    unint64_t v23 = *(v30 - 3);
    uint64_t v24 = *(v30 - 2);
    char v25 = *((unsigned char *)v30 - 8);
    uint64_t v26 = *v30;
    if (v22 == 7632239 && v23 == 0xE300000000000000)
    {
      uint64_t v17 = v93;
      swift_bridgeObjectRetain();
      uint64_t v28 = v32;
      swift_retain();
      unint64_t v23 = 0xE300000000000000;
      swift_bridgeObjectRetain();
      uint64_t v22 = 7632239;
LABEL_24:
      uint64_t v18 = v90;
      uint64_t v21 = v97;
      goto LABEL_25;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result)
    {
      uint64_t v17 = v93;
      swift_bridgeObjectRetain();
      uint64_t v28 = v32;
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_24;
    }
    v30 += 7;
    ++v29;
    if (v31 == v96) {
      goto LABEL_51;
    }
  }
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

uint64_t Graph.resolveMaterialXNodeDefs(connectedTo:nodeDefStore:shaderType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7 = v6;
  uint64_t v8 = v5;
  unint64_t v10 = v37;
  if (a5)
  {
    if (one-time initialization token for realitykit_geometryModifier != -1) {
      swift_once();
    }
    unint64_t v11 = &static MaterialXTarget.realitykit_geometryModifier;
    goto LABEL_7;
  }
  if (one-time initialization token for realitykit_surfaceShader != -1) {
    goto LABEL_28;
  }
  while (1)
  {
    unint64_t v11 = &static MaterialXTarget.realitykit_surfaceShader;
LABEL_7:
    uint64_t v12 = *v11;
    long long v13 = v8[9];
    v10[8] = v8[8];
    v10[9] = v13;
    *(_OWORD *)((char *)v10 + 153) = *(_OWORD *)((char *)v8 + 153);
    long long v14 = v8[5];
    v10[4] = v8[4];
    v10[5] = v14;
    long long v15 = v8[7];
    v10[6] = v8[6];
    v10[7] = v15;
    long long v16 = v8[1];
    v37[0] = *v8;
    v37[1] = v16;
    long long v17 = v8[3];
    _OWORD v10[2] = v8[2];
    v10[3] = v17;
    swift_retain();
    outlined retain of Graph((uint64_t)v37);
    Graph.connectedUpstreamSubgraph(rootedAt:)(a1, (uint64_t)&v34);
    uint64_t v18 = v34;
    outlined release of Graph((uint64_t)v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_AH2IDVs5NeverOTg504_s11D159Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFAK2IDVAKcfu_33_300d98c1e43c0bc1dedcebf2cdbfb115AkNTf3nnnpk_nTf1cn_nTm(v18);
    unint64_t v10 = (_OWORD *)v7;
    swift_bridgeObjectRelease();
    a1 = specialized Set.init<A>(_:)(v19);
    swift_bridgeObjectRelease();
    uint64_t v7 = *((void *)v8 + 8);
    int64_t v20 = *(void *)(v7 + 16);
    if (!v20) {
      break;
    }
    uint64_t v41 = v7 + 56;
    swift_bridgeObjectRetain_n();
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    while (v22 < v20)
    {
      uint64_t v23 = 48 * v22;
      if (*(void *)(v41 + 48 * v22) == -7)
      {
        if ((uint64_t)(v22 + 1) >= v20) {
          goto LABEL_23;
        }
        uint64_t v24 = 48 * v22++;
        while (1)
        {
          if (*(void *)(v7 + 104 + v24) != -7)
          {
            uint64_t v23 = v24 + 48;
            goto LABEL_18;
          }
          uint64_t v25 = v22 + 1;
          if (__OFADD__(v22, 1)) {
            break;
          }
          ++v22;
          v24 += 48;
          if (v25 >= v20) {
            goto LABEL_23;
          }
        }
        __break(1u);
        break;
      }
LABEL_18:
      uint64_t v26 = (long long *)(v7 + 32 + v23);
      long long v27 = *v26;
      long long v28 = v26[1];
      *(_OWORD *)&v36[9] = *(long long *)((char *)v26 + 25);
      long long v35 = v27;
      *(_OWORD *)uint64_t v36 = v28;
      outlined init with take of NodePersonality(&v35, &v38);
      uint64_t v39 = *((void *)&v35 + 1);
      v40[0] = *(void *)v36;
      if (__OFADD__(v21++, 1)) {
        goto LABEL_27;
      }
      outlined retain of NodePersonality(&v38);
      outlined retain of [Input]((uint64_t)&v39);
      outlined retain of [Input]((uint64_t)v40);
      specialized closure #1 in Graph.resolveMaterialXNodeDefs(connectedTo:nodeDefStore:shaderType:)((uint64_t *)&v35, a2, a3, a4, a1, v12, (uint64_t)v8);
      outlined release of NodePersonality(&v38);
      outlined release of [Input]((uint64_t)&v39);
      outlined release of [Input]((uint64_t)v40);
      if (v10)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease_n();
      }
      if ((uint64_t)++v22 >= v20) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    swift_once();
  }
  swift_bridgeObjectRetain_n();
LABEL_23:
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t *a5, uint64_t *a6, void **a7, void **a8)
{
  uint64_t v222 = a4;
  uint64_t v135 = *(void *)(a1 + 16);
  if (!v135) {
    goto LABEL_100;
  }
  uint64_t v134 = *(void *)(a2 + 16);
  if (!v134) {
    goto LABEL_100;
  }
  uint64_t v132 = *(void *)(a3 + 16);
  if (!v132) {
    goto LABEL_100;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v158 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v174 = *(void *)(a1 + 48);
  unsigned __int8 v170 = *(unsigned char *)(a1 + 72);
  uint64_t v131 = a1 + 32;
  uint64_t v163 = *(void *)(a1 + 64);
  uint64_t v167 = *(void *)(a1 + 80);
  uint64_t v130 = a2 + 32;
  uint64_t v153 = *(void *)(a2 + 80);
  char v10 = *(unsigned char *)(a2 + 72);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  uint64_t v133 = a3 + 32;
  uint64_t v15 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v16 = v15;
  uint64_t v17 = v8;
  uint64_t v18 = v14;
  uint64_t v19 = v12;
  uint64_t v20 = v163;
  uint64_t v21 = v167;
  char v22 = v10;
  unsigned __int8 v23 = v170;
  uint64_t v24 = v153;
  uint64_t v25 = v11;
  uint64_t v26 = v9;
  Swift::UInt v27 = v158;
  uint64_t v28 = 0;
  uint64_t v215 = v158;
  uint64_t v216 = v17;
  uint64_t v217 = v174;
  uint64_t v218 = v26;
  uint64_t v219 = v163;
  unsigned __int8 v220 = v170;
  uint64_t v221 = v167;
  uint64_t v195 = v16;
  uint64_t v196 = v13;
  uint64_t v197 = v14;
  uint64_t v198 = v25;
  uint64_t v29 = 1;
  uint64_t v199 = v19;
  char v200 = v22;
  uint64_t v201 = v153;
LABEL_5:
  uint64_t v149 = v16;
  uint64_t v150 = v18;
  uint64_t v151 = v19;
  char v152 = v22;
  uint64_t v154 = v24;
  uint64_t v155 = v13;
  uint64_t v156 = v25;
  uint64_t v30 = v133 + 56 * v28;
  uint64_t v31 = *(void *)(v30 + 8);
  uint64_t v32 = v29;
  uint64_t v34 = *(void *)(v30 + 16);
  uint64_t v33 = *(void *)(v30 + 24);
  uint64_t v35 = *(void *)(v30 + 32);
  char v36 = *(unsigned char *)(v30 + 40);
  uint64_t v37 = *(void *)(v30 + 48);
  v207[0] = *(void *)v30;
  v207[1] = v31;
  v207[2] = v34;
  v207[3] = v33;
  v207[4] = v35;
  char v208 = v36;
  uint64_t v209 = v37;
  v176[0] = v27;
  v176[1] = v17;
  v176[2] = v174;
  v176[3] = v26;
  v176[4] = v20;
  char v177 = v23 & 1;
  uint64_t v178 = v21;
  uint64_t v179 = v16;
  uint64_t v180 = v13;
  uint64_t v181 = v18;
  uint64_t v182 = v25;
  uint64_t v183 = v19;
  char v184 = v22 & 1;
  uint64_t v185 = v24;
  uint64_t v147 = v34;
  uint64_t v148 = v207[0];
  uint64_t v186 = v207[0];
  uint64_t v157 = v33;
  uint64_t v159 = v31;
  uint64_t v187 = v31;
  uint64_t v188 = v34;
  uint64_t v189 = v33;
  uint64_t v146 = v35;
  uint64_t v190 = v35;
  char v145 = v36;
  char v191 = v36;
  uint64_t v144 = v37;
  uint64_t v192 = v37;
  long long v38 = v222[5];
  v193[4] = v222[4];
  v193[5] = v38;
  long long v39 = v222[3];
  v193[2] = v222[2];
  v193[3] = v39;
  *(_OWORD *)((char *)v194 + 9) = *(_OWORD *)((char *)v222 + 153);
  long long v40 = v222[9];
  v193[8] = v222[8];
  v194[0] = v40;
  long long v41 = v222[7];
  v193[6] = v222[6];
  v193[7] = v41;
  long long v42 = v222[1];
  v193[0] = *v222;
  v193[1] = v42;
  uint64_t v43 = v42;
  uint64_t v44 = (void *)(*((void *)&v193[0] + 1) + 32);
  uint64_t v45 = *(void *)(*((void *)&v193[0] + 1) + 16);
  uint64_t v139 = v32;
  uint64_t v140 = v26;
  if (*(void *)&v193[0])
  {
    unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v27, (uint64_t)v44, v45, (void *)(*(void *)&v193[0] + 16), *(void *)&v193[0] + 32);
    if ((v47 & 1) == 0)
    {
      if ((result & 0x8000000000000000) != 0) {
        goto LABEL_99;
      }
      goto LABEL_12;
    }
LABEL_44:
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of (Input, (Input, Input))((uint64_t)v176);
    outlined retain of Graph((uint64_t)v193);
LABEL_45:
    uint64_t v56 = MEMORY[0x263F8EE78];
LABEL_46:
    outlined release of Graph((uint64_t)v193);
    uint64_t v168 = *(void *)(v56 + 16);
    if (!v168)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_89;
    }
    uint64_t v165 = v56 + 32;
    swift_bridgeObjectRetain();
    uint64_t v67 = 0;
    while (1)
    {
      long long v69 = (long long *)(v165 + 112 * v67);
      long long v71 = v69[5];
      long long v70 = v69[6];
      long long v72 = v69[4];
      long long v211 = v69[3];
      long long v212 = v72;
      long long v213 = v71;
      long long v214 = v70;
      long long v73 = *v69;
      long long v74 = v69[2];
      v210[1] = v69[1];
      v210[2] = v74;
      v210[0] = v73;
      uint64_t v75 = *a5;
      Swift::UInt v76 = *((void *)&v211 + 1);
      long long v77 = v212;
      uint64_t v78 = v71;
      char v79 = v214;
      uint64_t v202 = *((void *)&v211 + 1);
      long long v203 = v212;
      long long v204 = v71;
      uint64_t v172 = *((void *)&v214 + 1);
      uint64_t v175 = *((void *)&v71 + 1);
      char v205 = v214;
      uint64_t v206 = *((void *)&v214 + 1);
      if (*(void *)(v75 + 16))
      {
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v76);
        Swift::Int v80 = Hasher._finalize()();
        uint64_t v81 = -1 << *(unsigned char *)(v75 + 32);
        unint64_t v82 = v80 & ~v81;
        uint64_t v83 = v75 + 56;
        if ((*(void *)(v75 + 56 + ((v82 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v82))
        {
          uint64_t v84 = *(void *)(v75 + 48);
          if (*(void *)(v84 + 8 * v82) == v76)
          {
            BOOL v85 = 1;
            goto LABEL_60;
          }
          uint64_t v86 = ~v81;
          unint64_t v87 = (v82 + 1) & v86;
          if ((*(void *)(v83 + ((v87 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v87))
          {
            do
            {
              uint64_t v88 = *(void *)(v84 + 8 * v87);
              BOOL v85 = v88 == v76;
              if (v88 == v76) {
                break;
              }
              unint64_t v87 = (v87 + 1) & v86;
            }
            while (((*(void *)(v83 + ((v87 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v87) & 1) != 0);
            goto LABEL_60;
          }
        }
      }
      BOOL v85 = 0;
LABEL_60:
      uint64_t v89 = *a6;
      if (!*(void *)(*a6 + 16)) {
        goto LABEL_68;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v76);
      Swift::Int v90 = Hasher._finalize()();
      uint64_t v91 = -1 << *(unsigned char *)(v89 + 32);
      unint64_t v92 = v90 & ~v91;
      uint64_t v93 = v89 + 56;
      if (((*(void *)(v89 + 56 + ((v92 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v92) & 1) == 0) {
        goto LABEL_68;
      }
      uint64_t v94 = *(void *)(v89 + 48);
      if (*(void *)(v94 + 8 * v92) == v76)
      {
        BOOL v95 = 1;
        goto LABEL_69;
      }
      uint64_t v96 = ~v91;
      unint64_t v97 = (v92 + 1) & v96;
      if ((*(void *)(v93 + ((v97 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v97))
      {
        do
        {
          uint64_t v98 = *(void *)(v94 + 8 * v97);
          BOOL v95 = v98 == v76;
          if (v98 == v76) {
            break;
          }
          unint64_t v97 = (v97 + 1) & v96;
        }
        while (((*(void *)(v93 + ((v97 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v97) & 1) != 0);
      }
      else
      {
LABEL_68:
        BOOL v95 = 0;
      }
LABEL_69:
      outlined retain of Edge((uint64_t)v210);
      Graph.remove(_:)((uint64_t)v210);
      if (v85)
      {
        if (v95)
        {
          unint64_t v99 = *a7;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *a7 = v99;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v99[2] + 1, 1, v99);
            *a7 = v99;
          }
          unint64_t v102 = v99[2];
          unint64_t v101 = v99[3];
          uint64_t v104 = v155;
          uint64_t v103 = v156;
          uint64_t v105 = v154;
          char v106 = v152;
          uint64_t v108 = v150;
          uint64_t v107 = v151;
          uint64_t v109 = v149;
          if (v102 >= v101 >> 1)
          {
            unint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v101 > 1), v102 + 1, 1, v99);
            uint64_t v109 = v149;
            uint64_t v108 = v150;
            uint64_t v107 = v151;
            char v106 = v152;
            uint64_t v105 = v154;
            uint64_t v104 = v155;
            uint64_t v103 = v156;
            *a7 = v99;
          }
          v99[2] = v102 + 1;
          long long v110 = &v99[14 * v102];
          v110[4] = v109;
          v110[5] = v104;
          v110[6] = v108;
          v110[7] = v103;
          v110[8] = v107;
          *((unsigned char *)v110 + 72) = v106 & 1;
          v110[10] = v105;
          v110[11] = v76;
          *((_OWORD *)v110 + 6) = v77;
          uint64_t v110[14] = v78;
          v110[15] = v175;
          *((unsigned char *)v110 + 128) = v79;
          v110[17] = v172;
          long long v111 = *a8;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          char v112 = swift_isUniquelyReferenced_nonNull_native();
          *a8 = v111;
          if ((v112 & 1) == 0)
          {
            long long v111 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v111[2] + 1, 1, v111);
            *a8 = v111;
          }
          unint64_t v114 = v111[2];
          unint64_t v113 = v111[3];
          if (v114 >= v113 >> 1)
          {
            long long v111 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v113 > 1), v114 + 1, 1, v111);
            *a8 = v111;
          }
          v111[2] = v114 + 1;
          long long v115 = &v111[14 * v114];
          v115[4] = v148;
          v115[5] = v159;
          v115[6] = v147;
          v115[7] = v157;
          char v115[8] = v146;
          *((unsigned char *)v115 + 72) = v145;
          v115[10] = v144;
          v115[11] = v76;
          *((_OWORD *)v115 + 6) = v77;
          v115[14] = v78;
          v115[15] = v175;
          *((unsigned char *)v115 + 128) = v79;
          v115[17] = v172;
          goto LABEL_50;
        }
        long long v68 = &v195;
      }
      else
      {
        if (!v95)
        {
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v116 = type metadata accessor for Logger();
          __swift_project_value_buffer(v116, (uint64_t)logger);
          long long v117 = Logger.logObject.getter();
          os_log_type_t v118 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v117, v118))
          {
            unint64_t v119 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v119 = 0;
            _os_log_impl(&dword_25C27E000, v117, v118, "Edge destination node isn't a surface node or geometry modifier node.", v119, 2u);
            MEMORY[0x261185880](v119, -1, -1);
          }

          goto LABEL_50;
        }
        long long v68 = v207;
      }
      Graph.connect(_:to:)((uint64_t)v68, (unint64_t)&v202);
LABEL_50:
      ++v67;
      outlined release of Edge((uint64_t)v210);
      if (v67 == v168)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
LABEL_89:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        outlined release of (Input, (Input, Input))((uint64_t)v176);
        if (v139 == v135 || v139 == v134 || v139 == v132) {
          goto LABEL_101;
        }
        uint64_t v120 = v131 + 56 * v139;
        uint64_t v17 = *(void *)(v120 + 8);
        uint64_t v160 = *(void *)v120;
        uint64_t v26 = *(void *)(v120 + 24);
        uint64_t v174 = *(void *)(v120 + 16);
        uint64_t v166 = *(void *)(v120 + 32);
        unsigned __int8 v173 = *(unsigned char *)(v120 + 40);
        uint64_t v169 = *(void *)(v120 + 48);
        uint64_t v121 = (uint64_t *)(v130 + 56 * v139);
        uint64_t v122 = v121[6];
        char v123 = *((unsigned char *)v121 + 40);
        uint64_t v25 = v121[3];
        uint64_t v124 = v121[4];
        uint64_t v13 = v121[1];
        uint64_t v125 = v121[2];
        uint64_t v126 = *v121;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v16 = v126;
        uint64_t v18 = v125;
        uint64_t v19 = v124;
        uint64_t v20 = v166;
        uint64_t v21 = v169;
        char v22 = v123;
        unsigned __int8 v23 = v173;
        uint64_t v24 = v122;
        uint64_t v28 = v139;
        uint64_t v29 = v139 + 1;
        Swift::UInt v27 = v160;
        uint64_t v215 = v160;
        uint64_t v216 = v17;
        uint64_t v217 = v174;
        uint64_t v218 = v26;
        uint64_t v219 = v166;
        unsigned __int8 v220 = v173;
        uint64_t v221 = v169;
        uint64_t v195 = v16;
        uint64_t v196 = v13;
        uint64_t v197 = v125;
        uint64_t v198 = v25;
        uint64_t v199 = v19;
        char v200 = v22;
        uint64_t v201 = v122;
        goto LABEL_5;
      }
    }
  }
  if (!v45) {
    goto LABEL_44;
  }
  if (*v44 == v27)
  {
    unint64_t result = 0;
  }
  else
  {
    if (v45 == 1) {
      goto LABEL_44;
    }
    if (*(void *)(*((void *)&v193[0] + 1) + 40) != v27)
    {
      if (v45 != 2)
      {
        if (*(void *)(*((void *)&v193[0] + 1) + 48) == v27)
        {
          unint64_t result = 2;
        }
        else
        {
          uint64_t v127 = 0;
          do
          {
            if (v45 - 3 == v127) {
              goto LABEL_44;
            }
            uint64_t v128 = *(void *)(*((void *)&v193[0] + 1) + 56 + 8 * v127++);
          }
          while (v128 != v27);
          unint64_t result = v127 + 2;
          if (v127 + 2 < 0)
          {
LABEL_99:
            __break(1u);
LABEL_100:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_101:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
        }
        goto LABEL_12;
      }
      goto LABEL_44;
    }
    unint64_t result = 1;
  }
LABEL_12:
  if (result >= *(void *)(v43 + 16))
  {
    __break(1u);
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  uint64_t v48 = v21;
  unint64_t v49 = (void *)(v43 + 48 * result);
  uint64_t v51 = v49[4];
  uint64_t v50 = v49[5];
  uint64_t v52 = v49[6];
  uint64_t v137 = *(void *)(v50 + 16);
  if (v51)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of (Input, (Input, Input))((uint64_t)v176);
    outlined retain of Graph((uint64_t)v193);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v215, v50 + 32, v137, (void *)(v51 + 16), v51 + 32);
    if ((v53 & 1) == 0)
    {
      unint64_t v54 = result;
      if ((result & 0x8000000000000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_103;
    }
    swift_release();
    swift_release();
    goto LABEL_39;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  outlined retain of (Input, (Input, Input))((uint64_t)v176);
  outlined retain of Graph((uint64_t)v193);
  swift_retain();
  uint64_t v129 = v52;
  swift_retain();
  uint64_t v141 = v17;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v57 = v137;
  if (!v137)
  {
LABEL_37:
    swift_release();
LABEL_39:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_45;
  }
  uint64_t v164 = v20;
  unsigned __int8 v171 = v23;
  unint64_t v54 = 0;
  long long v58 = (void *)(v50 + 80);
  while (1)
  {
    if (*(v58 - 6) != v27) {
      goto LABEL_21;
    }
    uint64_t v59 = v57;
    Swift::UInt v60 = v27;
    uint64_t v61 = *(v58 - 4);
    uint64_t v62 = *(v58 - 3);
    char v63 = *((unsigned char *)v58 - 8);
    uint64_t v136 = *(v58 - 2);
    uint64_t v138 = *v58;
    long long v64 = *(uint64_t (**)(uint64_t))(*(void *)*(v58 - 5) + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((v64(v141) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      Swift::UInt v27 = v60;
      uint64_t v57 = v59;
      goto LABEL_21;
    }
    if (v61 != v174 || v62 != v140)
    {
      char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      unint64_t result = swift_release();
      Swift::UInt v27 = v60;
      uint64_t v57 = v59;
      if ((v66 & 1) == 0) {
        goto LABEL_21;
      }
      if ((v63 & 1) == 0) {
        break;
      }
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    unint64_t result = swift_release();
    Swift::UInt v27 = v60;
    uint64_t v57 = v59;
    if ((v63 & 1) == 0) {
      break;
    }
LABEL_30:
    if ((v171 & (v138 == v48)) != 0) {
      goto LABEL_36;
    }
LABEL_21:
    v58 += 7;
    if (v57 == ++v54) {
      goto LABEL_37;
    }
  }
  if ((v171 & 1) != 0 || v136 != v164 || v138 != v48) {
    goto LABEL_21;
  }
LABEL_36:
  uint64_t v52 = v129;
LABEL_16:
  if (v54 < *(void *)(v52 + 16))
  {
    uint64_t v55 = *(void *)(v52 + 16 * v54 + 40);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v56 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v55, &v215);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_46;
  }
LABEL_104:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t *a5, uint64_t *a6, void **a7, void **a8)
{
  uint64_t v9 = v8;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 && *(void *)(a2 + 16) && *(void *)(a3 + 16))
  {
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v54 = *(void *)(a2 + 16);
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v60 = *(void *)(a1 + 32);
    uint64_t v62 = *(void *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 64);
    char v15 = *(unsigned char *)(a1 + 72);
    uint64_t v58 = *(void *)(a1 + 80);
    uint64_t v63 = *(void *)(a2 + 80);
    char v56 = *(unsigned char *)(a2 + 72);
    uint64_t v16 = *(void *)(a2 + 56);
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v49 = *(void *)(a2 + 48);
    uint64_t v51 = *(void *)(a2 + 64);
    uint64_t v47 = *(void *)(a2 + 32);
    uint64_t v52 = *(void *)(a3 + 16);
    swift_bridgeObjectRetain();
    uint64_t v39 = a2;
    uint64_t v18 = v16;
    uint64_t v19 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v20 = v47;
    uint64_t v21 = v49;
    uint64_t v22 = v51;
    char v23 = v56;
    uint64_t v25 = v58;
    uint64_t v24 = v60;
    uint64_t v26 = 0;
    uint64_t v77 = v11 - 1;
    uint64_t v53 = v52 - 1;
    for (uint64_t i = v54 - 1; ; --i)
    {
      uint64_t v28 = *(void *)(a3 + v26 + 32);
      uint64_t v27 = *(void *)(a3 + v26 + 40);
      uint64_t v29 = *(void *)(a3 + v26 + 48);
      uint64_t v30 = *(void *)(a3 + v26 + 56);
      uint64_t v31 = *(void *)(a3 + v26 + 64);
      char v32 = *(unsigned char *)(a3 + v26 + 72);
      uint64_t v33 = *(void *)(a3 + v26 + 80);
      *(void *)&long long v66 = v24;
      *((void *)&v66 + 1) = v12;
      *(void *)&long long v67 = v62;
      *((void *)&v67 + 1) = v13;
      *(void *)&long long v68 = v14;
      BYTE8(v68) = v15 & 1;
      *(void *)&long long v69 = v25;
      *((void *)&v69 + 1) = v20;
      *(void *)&long long v70 = v19;
      *((void *)&v70 + 1) = v21;
      *(void *)&long long v71 = v18;
      *((void *)&v71 + 1) = v22;
      LOBYTE(v72) = v23 & 1;
      *((void *)&v72 + 1) = v63;
      *(void *)&long long v73 = v28;
      *((void *)&v73 + 1) = v27;
      *(void *)&long long v74 = v29;
      *((void *)&v74 + 1) = v30;
      *(void *)&long long v75 = v31;
      BYTE8(v75) = v32;
      uint64_t v76 = v33;
      v64[8] = v74;
      v64[9] = v75;
      uint64_t v65 = v33;
      v64[4] = v70;
      v64[5] = v71;
      v64[6] = v72;
      v64[7] = v73;
      v64[0] = v66;
      v64[1] = v67;
      v64[2] = v68;
      v64[3] = v69;
      swift_retain();
      swift_bridgeObjectRetain();
      closure #2 in closure #2 in Graph.splitSharedNodes(nodeDefStore:surfaceShader:geometryModifier:)((uint64_t)v64, a4, a5, a6, a7, a8);
      outlined release of (Input, (Input, Input))((uint64_t)&v66);
      if (v9 || !v77 || !i || !v53) {
        break;
      }
      uint64_t v12 = *(void *)(a1 + v26 + 96);
      uint64_t v13 = *(void *)(a1 + v26 + 112);
      uint64_t v61 = *(void *)(a1 + v26 + 88);
      uint64_t v62 = *(void *)(a1 + v26 + 104);
      uint64_t v50 = *(void *)(a1 + v26 + 120);
      char v48 = *(unsigned char *)(a1 + v26 + 128);
      uint64_t v59 = *(void *)(a1 + v26 + 136);
      uint64_t v63 = *(void *)(v39 + v26 + 136);
      char v57 = *(unsigned char *)(v39 + v26 + 128);
      uint64_t v35 = *(void *)(v39 + v26 + 112);
      uint64_t v34 = *(void *)(v39 + v26 + 120);
      uint64_t v19 = *(void *)(v39 + v26 + 96);
      uint64_t v36 = *(void *)(v39 + v26 + 104);
      uint64_t v37 = *(void *)(v39 + v26 + 88);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v20 = v37;
      uint64_t v21 = v36;
      uint64_t v22 = v34;
      char v23 = v57;
      uint64_t v25 = v59;
      uint64_t v24 = v61;
      uint64_t v14 = v50;
      uint64_t v9 = 0;
      char v15 = v48;
      v26 += 56;
      --v77;
      --v53;
      uint64_t v18 = v35;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

double Graph.insertGetParams(type:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C418EE0;
  *(void *)(inited + 32) = 7632239;
  *(void *)(inited + 40) = 0xE300000000000000;
  *(void *)(inited + 48) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 12324;
  *(void *)(v6 + 24) = 0xE200000000000000;
  unint64_t v7 = v6 | 0x6000000000000000;
  unint64_t v8 = *(void *)(v2 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v8, MEMORY[0x263F8EE78], inited, v7, v2 + 64, v2, (unint64_t *)&v11);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  long long v9 = v12[0];
  *a2 = v11;
  a2[1] = v9;
  double result = *(double *)((char *)v12 + 9);
  *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v12 + 9);
  return result;
}

BOOL ShaderGraphNode.isGetTextureNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0xD000000000000013, (void *)0x800000025C421DA0);
}

BOOL ShaderGraphNode.isMaterialXImageNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0x6567616D695F444ELL, (void *)0xE800000000000000);
}

BOOL ShaderGraphNode.isMaterialXCubeimageNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0xD000000000000017, (void *)0x800000025C421D80);
}

BOOL ShaderGraphNode.isRealityKitImageNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0xD000000000000014, (void *)0x800000025C421D60);
}

unint64_t Graph.transformModernRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v11 = a5;
  uint64_t v64 = a3;
  uint64_t v65 = a4;
  uint64_t v12 = a1;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  char v15 = (char *)v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(char **)(v13 + 16);
  uint64_t v16 = v13 + 16;
  long long v74 = v17;
  ((void (*)(char *, uint64_t *, uint64_t))v17)(v15, v12, v18);
  uint64_t v93 = v15;
  uint64_t v19 = *(void *)(Sequence.filter(_:)() + 16);
  if (v19)
  {
    uint64_t v69 = v7;
    uint64_t v70 = v16;
    long long v71 = v12;
    uint64_t v72 = v11;
    uint64_t v73 = a6;
    uint64_t v20 = *(void **)(v9 + 64);
    uint64_t v68 = swift_bridgeObjectRetain();
    uint64_t v21 = (unint64_t *)(v68 + 56);
    while (1)
    {
      unint64_t v22 = *(v21 - 3);
      unint64_t v23 = *v21;
      outlined copy of NodePersonality(v22);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        if ((v23 & 0x8000000000000000) != 0) {
          goto LABEL_9;
        }
      }
      else
      {
        unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v20);
        uint64_t v20 = (void *)result;
        if ((v23 & 0x8000000000000000) != 0)
        {
LABEL_9:
          __break(1u);
LABEL_10:
          swift_bridgeObjectRelease_n();
          *(void *)(v9 + 64) = v20;
          uint64_t v11 = v72;
          uint64_t v12 = v71;
          uint64_t v8 = v69;
          goto LABEL_12;
        }
      }
      if (v23 >= v20[2]) {
        break;
      }
      v21 += 6;
      uint64_t v25 = &v20[6 * v23];
      unint64_t v26 = v25[4];
      v25[4] = 0xE000000000000008;
      outlined consume of NodePersonality(v26);
      outlined consume of NodePersonality(v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v19) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_12:
    ((void (*)(char *, uint64_t *, uint64_t))v74)(v93, v12, v11);
    uint64_t v27 = Sequence.filter(_:)();
    uint64_t v28 = v8;
    uint64_t v29 = *(void *)(v27 + 16);
    if (v29)
    {
      uint64_t v30 = v27 + 40;
      long long v71 = &v78;
      v63[1] = v27;
      swift_bridgeObjectRetain();
      long long v74 = (char *)(v29 - 1);
      uint64_t v66 = v9;
      while (1)
      {
        uint64_t v31 = *(void *)v30;
        uint64_t v32 = *(void *)(v30 + 8);
        char v33 = *(unsigned char *)(v30 + 32);
        uint64_t v88 = *(char **)(v30 - 8);
        uint64_t v89 = v31;
        uint64_t v90 = v32;
        long long v91 = *(_OWORD *)(v30 + 16);
        char v92 = v33;
        uint64_t v93 = v88;
        outlined copy of NodePersonality((unint64_t)v88);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v34 = v28;
        ShaderGraphNode.out.getter((uint64_t)v77);
        if (v28)
        {
          outlined consume of NodePersonality((unint64_t)v93);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }
        long long v35 = *(_OWORD *)(v9 + 144);
        v75[8] = *(_OWORD *)(v9 + 128);
        v76[0] = v35;
        *(_OWORD *)((char *)v76 + 9) = *(_OWORD *)(v9 + 153);
        long long v36 = *(_OWORD *)(v9 + 80);
        v75[4] = *(_OWORD *)(v9 + 64);
        v75[5] = v36;
        long long v37 = *(_OWORD *)(v9 + 112);
        v75[6] = *(_OWORD *)(v9 + 96);
        v75[7] = v37;
        long long v38 = *(_OWORD *)(v9 + 16);
        v75[0] = *(_OWORD *)v9;
        v75[1] = v38;
        long long v39 = *(_OWORD *)(v9 + 48);
        v75[2] = *(_OWORD *)(v9 + 32);
        v75[3] = v39;
        uint64_t v40 = v38;
        unint64_t result = specialized OrderedSet._find(_:)(v77[0], *(uint64_t *)&v75[0], *((void **)&v75[0] + 1));
        uint64_t v72 = v30;
        uint64_t v73 = v32;
        if (v41)
        {
          outlined retain of Graph((uint64_t)v75);
          uint64_t v48 = MEMORY[0x263F8EE78];
        }
        else
        {
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
          if (result >= *(void *)(v40 + 16)) {
            goto LABEL_34;
          }
          long long v42 = (void *)(v40 + 48 * result);
          uint64_t v43 = v42[4];
          uint64_t v44 = v42[5];
          uint64_t v45 = v42[6];
          long long v81 = *(_OWORD *)v71;
          outlined retain of Graph((uint64_t)v75);
          swift_retain();
          swift_retain();
          swift_retain();
          outlined retain of String((uint64_t)&v81);
          swift_retain();
          specialized OrderedDictionary.subscript.getter((uint64_t)v77, v43, v44, v45);
          uint64_t v47 = v46;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          outlined release of String((uint64_t)&v81);
          if (v47)
          {
            swift_retain();
            outlined retain of String((uint64_t)&v81);
            uint64_t v48 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v47, v77);
            swift_release();
            outlined release of String((uint64_t)&v81);
            uint64_t v28 = v34;
            swift_release();
            swift_release();
          }
          else
          {
            uint64_t v48 = MEMORY[0x263F8EE78];
            uint64_t v28 = v34;
          }
        }
        outlined release of Graph((uint64_t)v75);
        if (*(void *)(v48 + 16))
        {
          uint64_t v49 = *(void *)(v48 + 40);
          uint64_t v50 = *(void *)(v48 + 56);
          uint64_t v51 = *(void *)(v48 + 88);
          uint64_t v52 = *(void *)(v48 + 96);
          uint64_t v53 = *(void *)(v48 + 104);
          uint64_t v54 = *(void *)(v48 + 112);
          uint64_t v55 = *(void *)(v48 + 120);
          LODWORD(v70) = *(unsigned __int8 *)(v48 + 128);
          uint64_t v56 = *(void *)(v48 + 136);
          uint64_t v68 = v49;
          uint64_t v69 = v56;
          swift_retain();
          uint64_t v67 = v50;
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          unint64_t result = swift_bridgeObjectRelease();
          v85[0] = v51;
          v85[1] = v52;
          v85[2] = v53;
          v85[3] = v54;
          v85[4] = v55;
          char v86 = v70;
          uint64_t v87 = v69;
          if (!*(void *)(v31 + 16)) {
            goto LABEL_32;
          }
          uint64_t v57 = *(void *)(v31 + 40);
          uint64_t v58 = *(void *)(v31 + 48);
          uint64_t v59 = *(void *)(v31 + 56);
          uint64_t v60 = *(void *)(v31 + 64);
          char v61 = *(unsigned char *)(v31 + 72);
          uint64_t v62 = *(void *)(v31 + 80);
          v82[0] = *(void *)(v31 + 32);
          v82[1] = v57;
          void v82[2] = v58;
          v82[3] = v59;
          v82[4] = v60;
          char v83 = v61;
          uint64_t v84 = v62;
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v9 = v66;
          Graph.convertFilenameInput(_:movingTo:textureAssignments:customUniformsType:)(v82, (unint64_t)v85, v64, v65);
          swift_release();
          long long v80 = *(_OWORD *)v71;
          outlined release of String((uint64_t)&v80);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          outlined consume of NodePersonality((unint64_t)v93);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();
          long long v79 = *(_OWORD *)v71;
          outlined release of String((uint64_t)&v79);
          outlined consume of NodePersonality((unint64_t)v93);
          swift_bridgeObjectRelease();
          uint64_t v9 = v66;
        }
        swift_bridgeObjectRelease();
        if (!v74) {
          return swift_bridgeObjectRelease_n();
        }
        uint64_t v30 = v72 + 48;
        --v74;
      }
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

unint64_t Graph.transformMaterialXImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v342 = a3;
  uint64_t v343 = a4;
  uint64_t v326 = type metadata accessor for Logger();
  unint64_t v522 = *(void *)(v326 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v326);
  long long v325 = (char *)&v309 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v309 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v341 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v309 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a5);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v350 = v14;
  uint64_t v351 = AssociatedTypeWitness;
  uint64_t v348 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v17 = (void *)*((void *)&v371 + 1);
  if (!*((void *)&v371 + 1)) {
    return (*(uint64_t (**)(char *, uint64_t))(v341 + 8))(v350, v351);
  }
  unint64_t v18 = v371;
  uint64_t v19 = v372;
  long long v336 = (long long *)&v394;
  v338 = (long long *)&v392;
  v339 = (long long *)&v385;
  uint64_t v20 = *((void *)&v372 + 1);
  uint64_t v21 = v373;
  unint64_t v22 = BYTE8(v373);
  uint64_t v333 = v410;
  v334 = (long long *)&v401;
  long long v318 = (void (**)(char *, uint64_t))(v522 + 8);
  long long v319 = (void (**)(char *, uint64_t, uint64_t))(v522 + 16);
  unint64_t v335 = 0x800000025C421E10;
  *(void *)&long long v16 = 136315138;
  long long v317 = v16;
  uint64_t v316 = MEMORY[0x263F8EE58] + 8;
  uint64_t v23 = v356;
  while (1)
  {
    unint64_t v516 = v18;
    v517 = v17;
    uint64_t v357 = v19;
    uint64_t v518 = v19;
    uint64_t v519 = v20;
    uint64_t v520 = v21;
    char v521 = v22 & 1;
    if (v18 >> 61 != 5) {
      goto LABEL_6;
    }
    unint64_t v349 = v18;
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = 0x6567616D695F444ELL;
    v24._unint64_t object = (void *)0xE800000000000000;
    Swift::Bool v25 = String.hasPrefix(_:)(v24);
    swift_bridgeObjectRelease();
    if (v25) {
      break;
    }
LABEL_5:
    unint64_t v18 = v349;
LABEL_6:
    outlined consume of NodePersonality(v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v17 = (void *)*((void *)&v371 + 1);
    unint64_t v18 = v371;
    uint64_t v20 = *((void *)&v372 + 1);
    uint64_t v19 = v372;
    uint64_t v21 = v373;
    unint64_t v22 = BYTE8(v373);
    if (!*((void *)&v371 + 1)) {
      return (*(uint64_t (**)(char *, uint64_t))(v341 + 8))(v350, v351);
    }
  }
  ShaderGraphNode.out.getter((uint64_t)v384);
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v341 + 8))(v350, v351);
LABEL_280:
    outlined consume of NodePersonality(v349);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v26 = v384[1];
  long long v459 = *v339;
  uint64_t v27 = outlined release of String((uint64_t)&v459);
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 144))(v27);
  swift_release();
  if (!v28)
  {
    ShaderGraphNode.out.getter((uint64_t)v403);
    v361._uint64_t countAndFlagsBits = v349;
    v361._unint64_t object = v17;
    uint64_t v362 = v357;
    uint64_t v363 = v20;
    uint64_t v364 = v21;
    char v365 = v22 & 1;
    long long v366 = v403[0];
    long long v367 = v403[1];
    uint64_t v368 = v404;
    char v369 = v405;
    uint64_t v370 = v406;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi2_((uint64_t)&v361);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v361, (uint64_t)&v371);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v383 = 0uLL;
    swift_allocError();
    *uint64_t v237 = v371;
    long long v238 = v375;
    long long v240 = v372;
    long long v239 = v373;
    v237[3] = v374;
    v237[4] = v238;
    v237[1] = v240;
    v237[2] = v239;
    long long v241 = v379;
    long long v243 = v376;
    long long v242 = v377;
    v237[7] = v378;
    v237[8] = v241;
    v237[5] = v243;
    v237[6] = v242;
    long long v244 = v383;
    long long v246 = v380;
    long long v245 = v381;
    v237[11] = v382;
    v237[12] = v244;
    v237[9] = v246;
    v237[10] = v245;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v341 + 8))(v350, v351);
  }
  specialized ShaderGraphNode.metalTextureType.getter(v349);
  uint64_t v29 = swift_retain();
  uint64_t v340 = v28;
  Graph.insertImageNode(metalTextureType:resultType:)(v29, v28, &v386);
  Swift::String v328 = v386;
  uint64_t v329 = v387;
  uint64_t v330 = v388;
  uint64_t v331 = v389;
  int v332 = v390;
  swift_release();
  ShaderGraphNode.out.getter((uint64_t)v391);
  ShaderGraphNode.out.getter((uint64_t)v393);
  Graph.moveEdges(from:to:)((uint64_t)v391, (uint64_t)v393);
  swift_release();
  v458[0] = *v336;
  outlined release of String((uint64_t)v458);
  swift_release();
  long long v457 = *v338;
  outlined release of String((uint64_t)&v457);
  *(void *)&long long v371 = 0;
  *((void *)&v371 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  *(void *)&long long v371 = 0xD000000000000018;
  *((void *)&v371 + 1) = v335;
  uint64_t v360 = v20;
  v361._uint64_t countAndFlagsBits = 1701080942;
  v361._unint64_t object = (void *)0xE400000000000000;
  v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  String.append(_:)(v361);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 39;
  v31._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  specialized Graph.insertCreateSampler(label:)(&v395);
  Swift::String v321 = v395;
  uint64_t v322 = v396;
  uint64_t v323 = v397;
  uint64_t v324 = v398;
  int v32 = v399;
  swift_bridgeObjectRelease();
  ShaderGraphNode.out.getter((uint64_t)v400);
  int v320 = v32;
  unint64_t object = v386._object;
  specialized Sequence.first(where:)((uint64_t)v386._object, 115, 0xE100000000000000, v402);
  uint64_t v23 = 0;
  outlined init with take of MetalFunctionNode?((uint64_t)v402, (uint64_t)v407, (uint64_t *)&demangling cache variable for type metadata for Input?);
  if (!*((void *)&v407[0] + 1))
  {
    outlined init with take of NodePersonality(&v386, v456);
    uint64_t v455 = v387;
    Swift::String v361 = v328;
    uint64_t v362 = v329;
    uint64_t v363 = v330;
    uint64_t v364 = v331;
    char v365 = v332;
    *(void *)&long long v366 = 115;
    *((void *)&v366 + 1) = 0xE100000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v361, (uint64_t)&v371);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v383 = 0uLL;
    swift_allocError();
    *uint64_t v217 = v371;
    long long v218 = v375;
    long long v220 = v372;
    long long v219 = v373;
    v217[3] = v374;
    v217[4] = v218;
    v217[1] = v220;
    v217[2] = v219;
    long long v221 = v379;
    long long v223 = v376;
    long long v222 = v377;
    v217[7] = v378;
    v217[8] = v221;
    v217[5] = v223;
    v217[6] = v222;
    long long v224 = v383;
    long long v226 = v380;
    long long v225 = v381;
    v217[11] = v382;
    v217[12] = v224;
    v217[9] = v226;
    v217[10] = v225;
    swift_bridgeObjectRetain();
    outlined retain of NodePersonality(v456);
    outlined retain of [Input]((uint64_t)&v455);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v341 + 8))(v350, v351);
    swift_release();
    long long v454 = *v334;
    outlined release of String((uint64_t)&v454);
    outlined init with take of NodePersonality(&v395, &v453);
    outlined release of NodePersonality(&v453);
    v452 = v395._object;
    outlined release of [Input]((uint64_t)&v452);
    uint64_t v451 = v396;
    outlined release of [Input]((uint64_t)&v451);
    outlined release of NodePersonality(v456);
    swift_bridgeObjectRelease();
    outlined release of [Input]((uint64_t)&v455);
    swift_release();
    goto LABEL_280;
  }
  long long v409 = v407[0];
  v410[0] = v407[1];
  v410[1] = v407[2];
  uint64_t v411 = v408;
  Graph.connect(_:to:)((uint64_t)v400, (unint64_t)&v409);
  swift_release();
  long long v412 = *v333;
  outlined release of String((uint64_t)&v412);
  swift_release();
  long long v450 = *v334;
  outlined release of String((uint64_t)&v450);
  uint64_t v345 = v17[2];
  if (!v345)
  {
LABEL_4:
    outlined init with take of NodePersonality(&v395, &v417);
    outlined release of NodePersonality(&v417);
    v416 = v395._object;
    outlined release of [Input]((uint64_t)&v416);
    uint64_t v415 = v396;
    outlined release of [Input]((uint64_t)&v415);
    outlined init with take of NodePersonality(&v386, &v414);
    outlined release of NodePersonality(&v414);
    swift_bridgeObjectRelease();
    uint64_t v413 = v387;
    outlined release of [Input]((uint64_t)&v413);
    swift_release();
    goto LABEL_5;
  }
  v346 = v17 + 4;
  swift_bridgeObjectRetain();
  v347 = v17;
  unint64_t v34 = 0;
  long long v327 = object + 17;
  v344 = object;
  while (1)
  {
    if (v34 >= v347[2])
    {
      __break(1u);
LABEL_290:
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_291;
    }
    long long v35 = &v346[7 * v34];
    uint64_t v37 = *v35;
    uint64_t v36 = v35[1];
    uint64_t v39 = v35[2];
    uint64_t v38 = v35[3];
    uint64_t v40 = v35[4];
    char v41 = *((unsigned char *)v35 + 40);
    uint64_t v42 = v35[6];
    v460[0] = v37;
    unint64_t v359 = v36;
    v460[1] = v36;
    v460[2] = v39;
    v460[3] = v38;
    v460[4] = v40;
    char v461 = v41;
    uint64_t v462 = v42;
    BOOL v43 = v39 == 1701603686 && v38 == 0xE400000000000000;
    unint64_t v522 = v38;
    unint64_t v352 = v34;
    if (v43 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      unint64_t v358 = object[2];
      if (v358)
      {
        uint64_t v356 = v23;
        uint64_t v45 = object[4];
        unint64_t v44 = object[5];
        uint64_t v46 = object[6];
        uint64_t v47 = object[8];
        char v48 = *((unsigned char *)object + 72);
        unint64_t v49 = object[10];
        if (v46 == 1701603686 && object[7] == 0xE400000000000000)
        {
          unint64_t v50 = object[10];
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          unint64_t v49 = v50;
          swift_bridgeObjectRetain();
          uint64_t v51 = 0xE400000000000000;
          uint64_t v52 = 1701603686;
LABEL_58:
          v463[0] = v45;
          v463[1] = v44;
          v463[2] = v52;
          v463[3] = v51;
          v463[4] = v47;
          char v464 = v48;
          unint64_t v465 = v49;
          unint64_t v22 = v44;
          uint64_t v73 = v356;
          Graph.convertFilenameInput(_:movingTo:textureAssignments:customUniformsType:)(v460, (unint64_t)v463, v342, v343);
          uint64_t v23 = v73;
          if (v73)
          {
            swift_bridgeObjectRelease();
            swift_release();
            outlined init with take of NodePersonality(&v395, &v427);
            outlined release of NodePersonality(&v427);
            v426 = v395._object;
            outlined release of [Input]((uint64_t)&v426);
            uint64_t v425 = v396;
            outlined release of [Input]((uint64_t)&v425);
            outlined init with take of NodePersonality(&v386, &v424);
            outlined release of NodePersonality(&v424);
            swift_bridgeObjectRelease();
            uint64_t v423 = v387;
            outlined release of [Input]((uint64_t)&v423);
            swift_bridgeObjectRelease();
            goto LABEL_272;
          }
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_60;
        }
        LODWORD(v354) = *((unsigned __int8 *)object + 72);
        uint64_t v52 = v46;
        if (_stringCompareWithSmolCheck(_:_:expecting:)())
        {
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          uint64_t v51 = swift_bridgeObjectRetain();
          char v48 = v354;
          goto LABEL_58;
        }
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        if (v358 != 1)
        {
          uint64_t v60 = 1;
          char v61 = v327;
          while (1)
          {
            uint64_t v62 = v60 + 1;
            if (__OFADD__(v60, 1)) {
              break;
            }
            uint64_t v45 = *(v61 - 6);
            unint64_t v44 = *(v61 - 5);
            uint64_t v64 = *(v61 - 4);
            uint64_t v63 = *(v61 - 3);
            uint64_t v47 = *(v61 - 2);
            char v48 = *((unsigned char *)v61 - 8);
            unint64_t v354 = *v61;
            if (v64 == 1701603686 && v63 == 0xE400000000000000)
            {
              swift_retain();
              swift_bridgeObjectRetain();
              unint64_t object = v344;
              swift_bridgeObjectRelease_n();
              uint64_t v51 = 0xE400000000000000;
              uint64_t v52 = 1701603686;
              unint64_t v49 = v354;
              goto LABEL_58;
            }
            uint64_t v353 = v45;
            uint64_t v66 = v63;
            if (_stringCompareWithSmolCheck(_:_:expecting:)())
            {
              swift_retain();
              swift_bridgeObjectRetain();
              unint64_t object = v344;
              swift_bridgeObjectRelease_n();
              uint64_t v51 = v66;
              uint64_t v45 = v353;
              unint64_t v49 = v354;
              uint64_t v52 = v64;
              goto LABEL_58;
            }
            v61 += 7;
            ++v60;
            if (v62 == v358) {
              goto LABEL_44;
            }
          }
          __break(1u);
LABEL_288:
          outlined release of [Input]((uint64_t)&v440);
          outlined release of [Input]((uint64_t)&v440);
          unint64_t v22 = 0x7365726464615F73;
          goto LABEL_291;
        }
LABEL_44:
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_retain();
        swift_bridgeObjectRetain();
      }
      outlined init with take of NodePersonality(&v386, &v422);
      uint64_t v421 = v387;
      Swift::String v361 = v328;
      uint64_t v362 = v329;
      uint64_t v363 = v330;
      uint64_t v364 = v331;
      char v365 = v332;
      *(void *)&long long v366 = 1701603686;
      *((void *)&v366 + 1) = 0xE400000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v361, (uint64_t)&v371);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v383 = 0uLL;
      swift_allocError();
      *char v207 = v371;
      long long v208 = v375;
      long long v210 = v372;
      long long v209 = v373;
      v207[3] = v374;
      v207[4] = v208;
      v207[1] = v210;
      v207[2] = v209;
      long long v211 = v379;
      long long v213 = v376;
      long long v212 = v377;
      v207[7] = v378;
      v207[8] = v211;
      void v207[5] = v213;
      v207[6] = v212;
      long long v214 = v383;
      long long v216 = v380;
      long long v215 = v381;
      v207[11] = v382;
      v207[12] = v214;
      v207[9] = v216;
      v207[10] = v215;
      swift_bridgeObjectRetain();
      outlined retain of NodePersonality(&v422);
      outlined retain of [Input]((uint64_t)&v421);
      swift_willThrow();
      outlined init with take of NodePersonality(&v395, &v420);
      outlined release of NodePersonality(&v420);
      v419 = v395._object;
      outlined release of [Input]((uint64_t)&v419);
      uint64_t v418 = v396;
      outlined release of [Input]((uint64_t)&v418);
      outlined release of NodePersonality(&v422);
      swift_bridgeObjectRelease();
      outlined release of [Input]((uint64_t)&v421);
      swift_bridgeObjectRelease();
      goto LABEL_272;
    }
    BOOL v53 = v39 == 0x746C7561666564 && v522 == 0xE700000000000000;
    if (v53 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      unint64_t v354 = object[2];
      if (v354)
      {
        unint64_t v54 = object[4];
        unint64_t v55 = object[5];
        uint64_t v56 = object[6];
        unint64_t v57 = object[7];
        uint64_t v58 = object[8];
        unint64_t v22 = *((unsigned __int8 *)object + 72);
        unint64_t v59 = object[10];
        if (v56 == 0x56746C7561666564 && v57 == 0xEA00000000006C61)
        {
          unint64_t v358 = v59;
          unint64_t v57 = 0xEA00000000006C61;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v56 = 0x56746C7561666564;
LABEL_88:
          *(void *)&long long v466 = v54;
          *((void *)&v466 + 1) = v55;
          uint64_t v467 = v56;
          unint64_t v468 = v57;
          uint64_t v469 = v58;
          char v470 = v22;
          unint64_t v471 = v358;
          Graph.moveEdge(from:to:)((uint64_t)v460, &v466);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          unint64_t object = v344;
          goto LABEL_61;
        }
        unint64_t v337 = v55;
        uint64_t v353 = 0xEA00000000006C61;
        if (_stringCompareWithSmolCheck(_:_:expecting:)())
        {
          unint64_t v358 = v59;
          swift_retain();
          swift_bridgeObjectRetain();
          unint64_t v55 = v337;
          swift_retain();
          swift_bridgeObjectRetain();
          goto LABEL_88;
        }
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        if (v354 != 1)
        {
          uint64_t v356 = v23;
          uint64_t v74 = 1;
          long long v75 = v327;
          while (1)
          {
            uint64_t v76 = v74 + 1;
            if (__OFADD__(v74, 1)) {
              break;
            }
            unint64_t v54 = *(v75 - 5);
            unint64_t v337 = *(v75 - 6);
            uint64_t v56 = *(v75 - 4);
            unint64_t v57 = *(v75 - 3);
            uint64_t v58 = *(v75 - 2);
            unint64_t v22 = *((unsigned __int8 *)v75 - 8);
            unint64_t v358 = *v75;
            if (v56 == 0x56746C7561666564 && v57 == v353)
            {
              unint64_t v57 = v353;
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease_n();
              unint64_t v55 = v54;
              uint64_t v56 = 0x56746C7561666564;
LABEL_87:
              uint64_t v23 = v356;
              unint64_t v54 = v337;
              goto LABEL_88;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)())
            {
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease_n();
              unint64_t v55 = v54;
              goto LABEL_87;
            }
            v75 += 7;
            ++v74;
            if (v76 == v354) {
              goto LABEL_276;
            }
          }
          __break(1u);
LABEL_296:
          unint64_t v509 = v22;
          unint64_t v510 = v358;
          uint64_t v511 = v56;
          unint64_t v512 = v54;
          unint64_t v513 = v354;
          char v514 = v76;
          v515 = v75;
LABEL_297:
          Swift::String v361 = v321;
          uint64_t v362 = v322;
          uint64_t v363 = v323;
          uint64_t v364 = v324;
          char v365 = v320;
          *(void *)&long long v366 = 0x746C69665F67616DLL;
          *((void *)&v366 + 1) = 0xEA00000000007265;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
          outlined init with take of UserGraphError.ErrorType((uint64_t)&v361, (uint64_t)&v371);
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          long long v383 = 0uLL;
          swift_allocError();
          *uint64_t v268 = v371;
          long long v269 = v375;
          long long v271 = v372;
          long long v270 = v373;
          v268[3] = v374;
          v268[4] = v269;
          v268[1] = v271;
          v268[2] = v270;
          long long v272 = v379;
          long long v274 = v376;
          long long v273 = v377;
          v268[7] = v378;
          v268[8] = v272;
          v268[5] = v274;
          v268[6] = v273;
          long long v275 = v383;
          long long v277 = v380;
          long long v276 = v381;
          v268[11] = v382;
          v268[12] = v275;
          v268[9] = v277;
          v268[10] = v276;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_willThrow();
          outlined init with take of NodePersonality(&v386, &v445);
          outlined release of NodePersonality(&v445);
          swift_bridgeObjectRelease();
          uint64_t v444 = v387;
          outlined release of [Input]((uint64_t)&v444);
          goto LABEL_293;
        }
LABEL_276:
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_retain();
        swift_bridgeObjectRetain();
      }
      outlined init with take of NodePersonality(&v386, &v432);
      uint64_t v431 = v387;
      Swift::String v361 = v328;
      uint64_t v362 = v329;
      uint64_t v363 = v330;
      uint64_t v364 = v331;
      char v365 = v332;
      *(void *)&long long v366 = 0x56746C7561666564;
      *((void *)&v366 + 1) = 0xEA00000000006C61;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v361, (uint64_t)&v371);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v383 = 0uLL;
      swift_allocError();
      _OWORD *v227 = v371;
      long long v228 = v375;
      long long v230 = v372;
      long long v229 = v373;
      v227[3] = v374;
      v227[4] = v228;
      v227[1] = v230;
      v227[2] = v229;
      long long v231 = v379;
      long long v233 = v376;
      long long v232 = v377;
      v227[7] = v378;
      v227[8] = v231;
      v227[5] = v233;
      v227[6] = v232;
      long long v234 = v383;
      long long v236 = v380;
      long long v235 = v381;
      v227[11] = v382;
      v227[12] = v234;
      v227[9] = v236;
      v227[10] = v235;
      swift_bridgeObjectRetain();
      outlined retain of NodePersonality(&v432);
      outlined retain of [Input]((uint64_t)&v431);
      swift_willThrow();
      outlined init with take of NodePersonality(&v395, &v430);
      outlined release of NodePersonality(&v430);
      v429 = v395._object;
      outlined release of [Input]((uint64_t)&v429);
      uint64_t v428 = v396;
      outlined release of [Input]((uint64_t)&v428);
      outlined release of NodePersonality(&v432);
      swift_bridgeObjectRelease();
      outlined release of [Input]((uint64_t)&v431);
      swift_bridgeObjectRelease();
      goto LABEL_272;
    }
    BOOL v67 = v39 == 0x64726F6F63786574 && v522 == 0xE800000000000000;
    if (!v67 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      BOOL v78 = v39 == 0x7373657264646175 && v522 == 0xEC00000065646F6DLL;
      uint64_t v356 = v23;
      if (v78 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        unint64_t v22 = 0x7365726464615F73;
        long long v79 = (char *)v395._object;
        v440 = v395._object;
        uint64_t v353 = *((void *)v395._object + 2);
        if (!v353) {
          goto LABEL_290;
        }
        uint64_t v80 = *((void *)v395._object + 5);
        unint64_t v358 = *((void *)v395._object + 4);
        uint64_t v82 = *((void *)v395._object + 6);
        unint64_t v81 = *((void *)v395._object + 7);
        unint64_t v354 = *((void *)v395._object + 8);
        char v83 = *((unsigned char *)v395._object + 72);
        uint64_t v84 = *((void *)v395._object + 10);
        if (v82 == 0x7365726464615F73 && v81 == 0xE900000000000073)
        {
          outlined retain of [Input]((uint64_t)&v440);
          uint64_t v82 = 0x7365726464615F73;
          unint64_t v22 = v359;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          unint64_t v81 = 0xE900000000000073;
        }
        else
        {
          LODWORD(v337) = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined retain of [Input]((uint64_t)&v440);
          swift_retain();
          swift_bridgeObjectRetain();
          if ((v337 & 1) == 0)
          {
            unint64_t result = outlined retain of [Input]((uint64_t)&v440);
            if (v353 != 1)
            {
              uint64_t v98 = v79 + 136;
              uint64_t v99 = 1;
              while (1)
              {
                uint64_t v100 = v99 + 1;
                if (__OFADD__(v99, 1)) {
                  goto LABEL_305;
                }
                uint64_t v80 = *(v98 - 5);
                unint64_t v358 = *(v98 - 6);
                uint64_t v101 = *(v98 - 4);
                unint64_t v81 = *(v98 - 3);
                unint64_t v354 = *(v98 - 2);
                char v83 = *((unsigned char *)v98 - 8);
                uint64_t v84 = *v98;
                if (v101 == 0x7365726464615F73 && v81 == 0xE900000000000073)
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  outlined release of [Input]((uint64_t)&v440);
                  unint64_t v81 = 0xE900000000000073;
                  unint64_t v22 = v359;
                  uint64_t v82 = 0x7365726464615F73;
                  goto LABEL_138;
                }
                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if (result)
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  outlined release of [Input]((uint64_t)&v440);
                  uint64_t v82 = v101;
                  goto LABEL_137;
                }
                v98 += 7;
                ++v99;
                if (v100 == v353) {
                  goto LABEL_288;
                }
              }
            }
            outlined release of [Input]((uint64_t)&v440);
            outlined release of [Input]((uint64_t)&v440);
LABEL_291:
            Swift::String v361 = v321;
            uint64_t v362 = v322;
            uint64_t v363 = v323;
            uint64_t v364 = v324;
            char v365 = v320;
            *(void *)&long long v366 = v22;
            *((void *)&v366 + 1) = 0xE900000000000073;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
            outlined init with take of UserGraphError.ErrorType((uint64_t)&v361, (uint64_t)&v371);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            long long v383 = 0uLL;
            swift_allocError();
            *Swift::Int v257 = v371;
            long long v258 = v375;
            long long v260 = v372;
            long long v259 = v373;
            void v257[3] = v374;
            v257[4] = v258;
            v257[1] = v260;
            v257[2] = v259;
            long long v261 = v379;
            long long v263 = v376;
            long long v262 = v377;
            v257[7] = v378;
            v257[8] = v261;
            v257[5] = v263;
            v257[6] = v262;
            long long v264 = v383;
            long long v266 = v380;
            long long v265 = v381;
            v257[11] = v382;
            v257[12] = v264;
            v257[9] = v266;
            v257[10] = v265;
            swift_willThrow();
            outlined init with take of NodePersonality(&v386, &v439);
            outlined release of NodePersonality(&v439);
            swift_bridgeObjectRelease();
            uint64_t v438 = v387;
            uint64_t v267 = &v438;
            goto LABEL_292;
          }
          swift_retain();
          swift_bridgeObjectRetain();
LABEL_137:
          unint64_t v22 = v359;
        }
LABEL_138:
        outlined release of [Input]((uint64_t)&v440);
        *(void *)&long long v478 = v358;
        *((void *)&v478 + 1) = v80;
        uint64_t v479 = v82;
        unint64_t v480 = v81;
        unint64_t v481 = v354;
        char v482 = v83;
        uint64_t v483 = v84;
        Graph.moveEdge(from:to:)((uint64_t)v460, &v478);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_139;
      }
      if (v39 == 0x7373657264646176 && v522 == 0xEC00000065646F6DLL
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        long long v91 = (char *)v395._object;
        v443 = v395._object;
        uint64_t v315 = *((void *)v395._object + 2);
        if (!v315)
        {
          swift_retain();
          swift_bridgeObjectRetain();
          goto LABEL_302;
        }
        unint64_t v92 = *((void *)v395._object + 4);
        uint64_t v314 = *((void *)v395._object + 5);
        uint64_t v93 = *((void *)v395._object + 6);
        unint64_t v94 = *((void *)v395._object + 7);
        uint64_t v95 = *((void *)v395._object + 8);
        int v96 = *((unsigned __int8 *)v395._object + 72);
        unint64_t v358 = *((void *)v395._object + 10);
        if (v93 == 0x7365726464615F74 && v94 == 0xE900000000000073)
        {
          LODWORD(v337) = v96;
          uint64_t v353 = v95;
          unint64_t v354 = v92;
          outlined retain of [Input]((uint64_t)&v443);
          unint64_t v22 = v359;
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v97 = v314;
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v93 = 0x7365726464615F74;
          unint64_t v94 = 0xE900000000000073;
        }
        else
        {
          uint64_t v103 = v95;
          char v104 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined retain of [Input]((uint64_t)&v443);
          swift_retain();
          swift_bridgeObjectRetain();
          if ((v104 & 1) == 0)
          {
            unint64_t result = outlined retain of [Input]((uint64_t)&v443);
            if (v315 != 1)
            {
              long long v111 = (unint64_t *)(v91 + 136);
              uint64_t v112 = 1;
              do
              {
                uint64_t v113 = v112 + 1;
                if (__OFADD__(v112, 1)) {
                  goto LABEL_306;
                }
                unint64_t v114 = *(v111 - 6);
                uint64_t v97 = *(v111 - 5);
                uint64_t v93 = *(v111 - 4);
                unint64_t v94 = *(v111 - 3);
                uint64_t v353 = *(v111 - 2);
                unint64_t v354 = v114;
                LODWORD(v337) = *((unsigned __int8 *)v111 - 8);
                unint64_t v358 = *v111;
                if (v93 == 0x7365726464615F74 && v94 == 0xE900000000000073)
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  outlined release of [Input]((uint64_t)&v443);
                  unint64_t v94 = 0xE900000000000073;
                  uint64_t v93 = 0x7365726464615F74;
                  goto LABEL_171;
                }
                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if (result)
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  outlined release of [Input]((uint64_t)&v443);
                  goto LABEL_171;
                }
                v111 += 7;
                ++v112;
              }
              while (v113 != v315);
            }
            outlined release of [Input]((uint64_t)&v443);
            outlined release of [Input]((uint64_t)&v443);
LABEL_302:
            Swift::String v361 = v321;
            uint64_t v362 = v322;
            uint64_t v363 = v323;
            uint64_t v364 = v324;
            char v365 = v320;
            *(void *)&long long v366 = 0x7365726464615F74;
            *((void *)&v366 + 1) = 0xE900000000000073;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
            outlined init with take of UserGraphError.ErrorType((uint64_t)&v361, (uint64_t)&v371);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            long long v383 = 0uLL;
            swift_allocError();
            *unint64_t v299 = v371;
            long long v300 = v375;
            long long v302 = v372;
            long long v301 = v373;
            v299[3] = v374;
            v299[4] = v300;
            v299[1] = v302;
            v299[2] = v301;
            long long v303 = v379;
            long long v305 = v376;
            long long v304 = v377;
            v299[7] = v378;
            v299[8] = v303;
            v299[5] = v305;
            v299[6] = v304;
            long long v306 = v383;
            long long v308 = v380;
            long long v307 = v381;
            v299[11] = v382;
            v299[12] = v306;
            v299[9] = v308;
            v299[10] = v307;
            swift_willThrow();
            outlined init with take of NodePersonality(&v386, &v442);
            outlined release of NodePersonality(&v442);
            swift_bridgeObjectRelease();
            uint64_t v441 = v387;
            uint64_t v267 = &v441;
LABEL_292:
            outlined release of [Input]((uint64_t)v267);
LABEL_293:
            swift_bridgeObjectRelease();
            goto LABEL_272;
          }
          LODWORD(v337) = v96;
          uint64_t v353 = v103;
          unint64_t v354 = v92;
          uint64_t v97 = v314;
          swift_retain();
          swift_bridgeObjectRetain();
LABEL_171:
          unint64_t object = v344;
          unint64_t v22 = v359;
        }
        outlined release of [Input]((uint64_t)&v443);
        *(void *)&long long v484 = v354;
        *((void *)&v484 + 1) = v97;
        uint64_t v485 = v93;
        unint64_t v486 = v94;
        uint64_t v487 = v353;
        char v488 = v337;
        unint64_t v489 = v358;
        Graph.moveEdge(from:to:)((uint64_t)v460, &v484);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v23 = v356;
        goto LABEL_61;
      }
      if ((v39 != 0x79747265746C6966 || v522 != 0xEA00000000006570)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if ((v39 != 0x726579616CLL || v522 != 0xE500000000000000)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          && (v39 != 0x6E6172656D617266 || v522 != 0xEA00000000006567)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v39 == 0x66666F656D617266 && v522 == 0xEB00000000746573
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
            || v39 == 0x646E65656D617266 && v522 == 0xEE006E6F69746361
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            unint64_t object = v344;
          }
          else
          {
            uint64_t v200 = one-time initialization token for logger;
            swift_retain();
            swift_bridgeObjectRetain();
            if (v200 != -1) {
              swift_once();
            }
            uint64_t v201 = v326;
            uint64_t v202 = __swift_project_value_buffer(v326, (uint64_t)logger);
            (*v319)(v325, v202, v201);
            swift_retain_n();
            swift_bridgeObjectRetain_n();
            long long v203 = Logger.logObject.getter();
            os_log_type_t v204 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v203, v204))
            {
              uint64_t v205 = swift_slowAlloc();
              uint64_t v206 = swift_slowAlloc();
              *(void *)&long long v371 = v206;
              *(_DWORD *)uint64_t v205 = v317;
              unint64_t v22 = v522;
              swift_bridgeObjectRetain();
              *(void *)(v205 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v22, (uint64_t *)&v371);
              swift_release_n();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_25C27E000, v203, v204, "Ignoring unexpected image node input '%s'", (uint8_t *)v205, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x261185880](v206, -1, -1);
              MEMORY[0x261185880](v205, -1, -1);
              swift_bridgeObjectRelease();
              swift_release();
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_release_n();
            }
            (*v318)(v325, v326);
            unint64_t object = v344;
          }
        }
        goto LABEL_62;
      }
      uint64_t v105 = *((void *)v395._object + 2);
      if (!v105) {
        goto LABEL_297;
      }
      unint64_t v337 = (unint64_t)v395._object;
      char v106 = (void **)((char *)v395._object + 80);
      uint64_t v353 = (uint64_t)v395._object + 80;
      while (1)
      {
        Swift::UInt v107 = (Swift::UInt)*(v106 - 6);
        unint64_t v358 = (unint64_t)*(v106 - 5);
        uint64_t v56 = (uint64_t)*(v106 - 4);
        unint64_t v108 = (unint64_t)*(v106 - 3);
        unint64_t v109 = (unint64_t)*(v106 - 2);
        LOBYTE(v76) = *((unsigned char *)v106 - 8);
        long long v75 = *v106;
        if (v56 == 0x746C69665F67616DLL && v108 == 0xEA00000000007265)
        {
          unint64_t v116 = 0xEA00000000007265;
          goto LABEL_165;
        }
        unint64_t v354 = (unint64_t)*(v106 - 2);
        unint64_t v22 = v107;
        unint64_t v54 = v108;
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          break;
        }
        v106 += 7;
        if (!--v105) {
          goto LABEL_296;
        }
      }
      unint64_t v116 = v54;
      Swift::UInt v107 = v22;
      unint64_t v109 = v354;
LABEL_165:
      unint64_t v509 = v107;
      unint64_t v510 = v358;
      uint64_t v511 = v56;
      unint64_t v512 = v116;
      unint64_t v513 = v109;
      char v514 = v76;
      v515 = v75;
      uint64_t v118 = *v355;
      long long v117 = (void *)v355[1];
      unint64_t v119 = (void *)v355[2];
      uint64_t v120 = v117 + 4;
      uint64_t v121 = v117[2];
      unint64_t v354 = v116;
      if (v118)
      {
        unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v107, (uint64_t)v120, v121, (void *)(v118 + 16), v118 + 32);
        if ((v122 & 1) == 0)
        {
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_308;
          }
LABEL_184:
          if (result >= v119[2]) {
            goto LABEL_307;
          }
          char v123 = &v119[6 * result];
          uint64_t v125 = v123[7];
          uint64_t v124 = v123[8];
          uint64_t v126 = v123[9];
          uint64_t v314 = *(void *)(v124 + 16);
          uint64_t v315 = v124 + 32;
          uint64_t v313 = v126;
          if (v125)
          {
            long long v311 = (void *)(v125 + 32);
            long long v312 = (void *)(v125 + 16);
            swift_retain_n();
            swift_bridgeObjectRetain_n();
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            swift_retain();
            unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v509, v315, v314, v312, (uint64_t)v311);
            if (v127)
            {
LABEL_193:
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              goto LABEL_195;
            }
          }
          else
          {
            swift_retain_n();
            swift_bridgeObjectRetain_n();
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            unint64_t result = specialized Collection<>.firstIndex(of:)((uint64_t *)&v509, v315, v314);
            if (v128) {
              goto LABEL_193;
            }
          }
          long long v312 = v119;
          uint64_t v314 = (uint64_t)v117;
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_315;
          }
          if (result >= *(void *)(v313 + 16)) {
            goto LABEL_316;
          }
          uint64_t v129 = (void *)(v313 + 56 * result);
          uint64_t v130 = v129[4];
          uint64_t v131 = v129[5];
          uint64_t v315 = v129[7];
          outlined copy of Output?(v130, v131);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          if (v131)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_211;
          }
          long long v117 = (void *)v314;
          unint64_t v119 = v312;
LABEL_195:
          unint64_t result = specialized OrderedSet._find(_:)(v37, v118, v117);
          if ((v132 & 1) == 0)
          {
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_310;
            }
            if (result >= v119[2]) {
              goto LABEL_309;
            }
            uint64_t v133 = &v119[6 * result];
            uint64_t v135 = v133[7];
            uint64_t v134 = v133[8];
            uint64_t v136 = v133[9];
            uint64_t v137 = *(void *)(v134 + 16);
            if (v135)
            {
              swift_retain();
              swift_bridgeObjectRetain();
              swift_retain();
              swift_retain();
              swift_retain();
              unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v460, v134 + 32, v137, (void *)(v135 + 16), v135 + 32);
              if (v138)
              {
LABEL_208:
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                goto LABEL_210;
              }
            }
            else
            {
              swift_retain();
              swift_bridgeObjectRetain();
              swift_retain();
              swift_retain();
              unint64_t result = specialized Collection<>.firstIndex(of:)(v460, v134 + 32, v137);
              if (v139) {
                goto LABEL_208;
              }
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_317;
            }
            if (result >= *(void *)(v136 + 16)) {
              goto LABEL_318;
            }
            uint64_t v140 = (void *)(v136 + 56 * result);
            uint64_t v141 = v140[4];
            uint64_t v142 = v140[5];
            uint64_t v143 = v140[7];
            uint64_t v144 = (void *)v140[8];
            uint64_t v145 = v140[9];
            uint64_t v146 = v140[10];
            long long v312 = (void *)v140[6];
            uint64_t v313 = v141;
            long long v311 = v144;
            uint64_t v314 = v145;
            uint64_t v315 = v146;
            outlined copy of Output?(v141, v142);
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            if (v142)
            {
              v506[0] = v313;
              v506[1] = v142;
              v506[2] = v312;
              v506[3] = v143;
              v506[4] = v311;
              char v507 = v314 & 1;
              uint64_t v508 = v315;
              swift_retain();
              swift_release();
              Graph.connect(_:to:)((uint64_t)v506, (unint64_t)&v509);
              swift_bridgeObjectRelease();
              swift_release();
            }
          }
          swift_bridgeObjectRelease();
LABEL_210:
          swift_release();
LABEL_211:
          uint64_t v147 = *(void *)(v337 + 16);
          uint64_t v148 = (void *)v353;
          if (!v147)
          {
LABEL_298:
            Swift::String v361 = v321;
            uint64_t v362 = v322;
            uint64_t v363 = v323;
            uint64_t v364 = v324;
            char v365 = v320;
            *(void *)&long long v366 = 0x746C69665F70696DLL;
            *((void *)&v366 + 1) = 0xEA00000000007265;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
            outlined init with take of UserGraphError.ErrorType((uint64_t)&v361, (uint64_t)&v371);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            long long v383 = 0uLL;
            swift_allocError();
            *uint64_t v278 = v371;
            long long v279 = v375;
            long long v281 = v372;
            long long v280 = v373;
            v278[3] = v374;
            v278[4] = v279;
            v278[1] = v281;
            v278[2] = v280;
            long long v282 = v379;
            long long v284 = v376;
            long long v283 = v377;
            v278[7] = v378;
            v278[8] = v282;
            v278[5] = v284;
            v278[6] = v283;
            long long v285 = v383;
            long long v287 = v380;
            long long v286 = v381;
            v278[11] = v382;
            v278[12] = v285;
            v278[9] = v287;
            v278[10] = v286;
            swift_willThrow();
            outlined init with take of NodePersonality(&v386, &v447);
            outlined release of NodePersonality(&v447);
            swift_bridgeObjectRelease();
            uint64_t v446 = v387;
            uint64_t v288 = &v446;
            goto LABEL_300;
          }
          while (1)
          {
            uint64_t v149 = *(v148 - 6);
            unint64_t v358 = *(v148 - 5);
            uint64_t v151 = *(v148 - 4);
            unint64_t v150 = *(v148 - 3);
            unint64_t v152 = *(v148 - 2);
            char v153 = *((unsigned char *)v148 - 8);
            uint64_t v154 = *v148;
            if (v151 == 0x746C69665F70696DLL && v150 == 0xEA00000000007265)
            {
              unint64_t v157 = 0xEA00000000007265;
              goto LABEL_221;
            }
            unint64_t v354 = *(v148 - 2);
            uint64_t v156 = v149;
            unint64_t v157 = v150;
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
            v148 += 7;
            if (!--v147)
            {
              uint64_t v499 = v156;
              unint64_t v500 = v358;
              uint64_t v501 = v151;
              unint64_t v502 = v157;
              unint64_t v503 = v354;
              char v504 = v153;
              uint64_t v505 = v154;
              goto LABEL_298;
            }
          }
          uint64_t v149 = v156;
          unint64_t v152 = v354;
LABEL_221:
          uint64_t v499 = v149;
          unint64_t v500 = v358;
          uint64_t v501 = v151;
          unint64_t v502 = v157;
          unint64_t v503 = v152;
          char v504 = v153;
          uint64_t v505 = v154;
          uint64_t v159 = *v355;
          uint64_t v158 = (void *)v355[1];
          uint64_t v160 = (void *)v355[2];
          unint64_t result = specialized OrderedSet._find(_:)(v149, *v355, v158);
          unint64_t v354 = v157;
          if (v161)
          {
            swift_retain();
            swift_bridgeObjectRetain();
            goto LABEL_234;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_312;
          }
          uint64_t v315 = (uint64_t)v158;
          if (result >= v160[2]) {
            goto LABEL_311;
          }
          uint64_t v162 = &v160[6 * result];
          uint64_t v163 = v162[7];
          uint64_t v164 = v162[8];
          uint64_t v165 = v162[9];
          uint64_t v314 = v164 + 32;
          uint64_t v166 = *(void *)(v164 + 16);
          long long v312 = v160;
          uint64_t v313 = v166;
          if (v163)
          {
            uint64_t v310 = v163 + 32;
            long long v311 = (void *)(v163 + 16);
            swift_retain_n();
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v167 = v165;
            swift_retain();
            swift_retain();
            unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v499, v314, v313, v311, v310);
            if (v168)
            {
LABEL_233:
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              uint64_t v158 = (void *)v315;
              uint64_t v160 = v312;
              goto LABEL_234;
            }
          }
          else
          {
            swift_retain_n();
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v167 = v165;
            swift_retain();
            unint64_t result = specialized Collection<>.firstIndex(of:)(&v499, v314, v313);
            if (v169) {
              goto LABEL_233;
            }
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_320;
          }
          if (result >= *(void *)(v167 + 16)) {
            goto LABEL_319;
          }
          unsigned __int8 v170 = (void *)(v167 + 56 * result);
          uint64_t v171 = v170[4];
          uint64_t v172 = v170[5];
          unint64_t v358 = v170[7];
          outlined copy of Output?(v171, v172);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          uint64_t v158 = (void *)v315;
          uint64_t v160 = v312;
          if (v172)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
LABEL_248:
            uint64_t v188 = *(void *)(v337 + 16);
            uint64_t v189 = (unint64_t *)v353;
            if (!v188)
            {
LABEL_299:
              Swift::String v361 = v321;
              uint64_t v362 = v322;
              uint64_t v363 = v323;
              uint64_t v364 = v324;
              char v365 = v320;
              *(void *)&long long v366 = 0x746C69665F6E696DLL;
              *((void *)&v366 + 1) = 0xEA00000000007265;
              _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
              outlined init with take of UserGraphError.ErrorType((uint64_t)&v361, (uint64_t)&v371);
              lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
              long long v383 = 0uLL;
              swift_allocError();
              *uint64_t v289 = v371;
              long long v290 = v375;
              long long v292 = v372;
              long long v291 = v373;
              v289[3] = v374;
              v289[4] = v290;
              v289[1] = v292;
              v289[2] = v291;
              long long v293 = v379;
              long long v295 = v376;
              long long v294 = v377;
              v289[7] = v378;
              v289[8] = v293;
              v289[5] = v295;
              v289[6] = v294;
              long long v296 = v383;
              long long v298 = v380;
              long long v297 = v381;
              v289[11] = v382;
              v289[12] = v296;
              v289[9] = v298;
              v289[10] = v297;
              swift_willThrow();
              outlined init with take of NodePersonality(&v386, &v449);
              outlined release of NodePersonality(&v449);
              swift_bridgeObjectRelease();
              uint64_t v448 = v387;
              uint64_t v288 = &v448;
LABEL_300:
              outlined release of [Input]((uint64_t)v288);
              swift_bridgeObjectRelease();
LABEL_272:
              swift_release();
              swift_release();
              outlined consume of NodePersonality(v349);
              swift_bridgeObjectRelease();
LABEL_273:
              swift_bridgeObjectRelease_n();
              return (*(uint64_t (**)(char *, uint64_t))(v341 + 8))(v350, v351);
            }
            while (1)
            {
              uint64_t v191 = *(v189 - 6);
              uint64_t v190 = *(v189 - 5);
              uint64_t v192 = *(v189 - 4);
              uint64_t v193 = *(v189 - 2);
              char v194 = *((unsigned char *)v189 - 8);
              uint64_t v195 = v189;
              unint64_t v22 = *v189;
              if (v192 == 0x746C69665F6E696DLL && *(v189 - 3) == 0xEA00000000007265)
              {
                unint64_t v197 = 0xEA00000000007265;
                goto LABEL_258;
              }
              unint64_t v358 = *(v189 - 3);
              if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                break;
              }
              uint64_t v189 = v195 + 7;
              if (!--v188)
              {
                *(void *)&long long v490 = v191;
                *((void *)&v490 + 1) = v190;
                uint64_t v491 = v192;
                unint64_t v492 = v358;
                uint64_t v493 = v193;
                char v494 = v194;
                unint64_t v495 = v22;
                goto LABEL_299;
              }
            }
            unint64_t v197 = v358;
LABEL_258:
            *(void *)&long long v490 = v191;
            *((void *)&v490 + 1) = v190;
            uint64_t v491 = v192;
            unint64_t v492 = v197;
            uint64_t v493 = v193;
            char v494 = v194;
            unint64_t v495 = v22;
            swift_retain();
            swift_bridgeObjectRetain();
            Graph.moveEdge(from:to:)((uint64_t)v460, &v490);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
LABEL_139:
            swift_release();
            uint64_t v23 = v356;
            unint64_t object = v344;
            goto LABEL_61;
          }
LABEL_234:
          unint64_t result = specialized OrderedSet._find(_:)(v37, v159, v158);
          if (v173) {
            goto LABEL_245;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_313;
          }
          if (result >= v160[2]) {
            goto LABEL_314;
          }
          uint64_t v174 = &v160[6 * result];
          uint64_t v176 = v174[7];
          uint64_t v175 = v174[8];
          uint64_t v177 = v174[9];
          uint64_t v178 = *(void *)(v175 + 16);
          if (v176)
          {
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            swift_retain();
            unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v460, v175 + 32, v178, (void *)(v176 + 16), v176 + 32);
            if (v179)
            {
LABEL_246:
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              swift_release();
              goto LABEL_247;
            }
          }
          else
          {
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            unint64_t result = specialized Collection<>.firstIndex(of:)(v460, v175 + 32, v178);
            if (v180) {
              goto LABEL_246;
            }
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_321;
          }
          if (result >= *(void *)(v177 + 16)) {
            goto LABEL_322;
          }
          uint64_t v181 = (void *)(v177 + 56 * result);
          uint64_t v182 = v181[4];
          uint64_t v183 = v181[5];
          uint64_t v184 = v181[7];
          uint64_t v185 = (void *)v181[8];
          uint64_t v186 = v181[9];
          unint64_t v187 = v181[10];
          uint64_t v313 = v181[6];
          uint64_t v314 = v182;
          long long v312 = v185;
          uint64_t v315 = v186;
          unint64_t v358 = v187;
          outlined copy of Output?(v182, v183);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          if (!v183)
          {
LABEL_245:
            swift_bridgeObjectRelease();
          }
          else
          {
            v496[0] = v314;
            v496[1] = v183;
            v496[2] = v313;
            v496[3] = v184;
            v496[4] = v312;
            char v497 = v315 & 1;
            unint64_t v498 = v358;
            swift_retain();
            swift_release();
            Graph.connect(_:to:)((uint64_t)v496, (unint64_t)&v499);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
          }
LABEL_247:
          swift_release();
          goto LABEL_248;
        }
      }
      else if (v121)
      {
        if (*v120 == v107)
        {
          unint64_t result = 0;
          goto LABEL_184;
        }
        if (v121 != 1)
        {
          if (v117[5] == v107)
          {
            unint64_t result = 1;
            goto LABEL_184;
          }
          if (v121 != 2)
          {
            if (v117[6] == v107)
            {
              unint64_t result = 2;
              goto LABEL_184;
            }
            uint64_t v198 = 0;
            while (v121 - 3 != v198)
            {
              uint64_t v199 = v117[v198++ + 7];
              if (v199 == v107)
              {
                unint64_t result = v198 + 2;
                if (((v198 + 2) & 0x8000000000000000) == 0) {
                  goto LABEL_184;
                }
                goto LABEL_308;
              }
            }
          }
        }
      }
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_195;
    }
    uint64_t v353 = object[2];
    if (!v353)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_286;
    }
    uint64_t v68 = object[5];
    unint64_t v358 = object[4];
    uint64_t v69 = object[6];
    unint64_t v70 = object[7];
    unint64_t v354 = object[8];
    char v71 = *((unsigned char *)object + 72);
    unint64_t v22 = object[10];
    uint64_t v72 = 0x64726F6F63786574;
    if (v69 != 0x64726F6F63786574 || v70 != 0xE800000000000000) {
      break;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v70 = 0xE800000000000000;
LABEL_110:
    *(void *)&long long v472 = v358;
    *((void *)&v472 + 1) = v68;
    uint64_t v473 = v72;
    unint64_t v474 = v70;
    unint64_t v475 = v354;
    char v476 = v71;
    unint64_t v477 = v22;
    Graph.moveEdge(from:to:)((uint64_t)v460, &v472);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_60:
    swift_release();
LABEL_61:
    unint64_t v34 = v352;
LABEL_62:
    if (++v34 == v345)
    {
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v72 = v69;
    goto LABEL_110;
  }
  swift_bridgeObjectRetain_n();
  swift_retain();
  unint64_t result = swift_bridgeObjectRetain();
  if (v353 == 1)
  {
LABEL_284:
    swift_bridgeObjectRelease_n();
LABEL_286:
    outlined init with take of NodePersonality(&v386, &v437);
    uint64_t v436 = v387;
    Swift::String v361 = v328;
    uint64_t v362 = v329;
    uint64_t v363 = v330;
    uint64_t v364 = v331;
    char v365 = v332;
    *(void *)&long long v366 = 0x64726F6F63786574;
    *((void *)&v366 + 1) = 0xE800000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v361);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v361, (uint64_t)&v371);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v383 = 0uLL;
    swift_allocError();
    *uint64_t v247 = v371;
    long long v248 = v375;
    long long v250 = v372;
    long long v249 = v373;
    v247[3] = v374;
    v247[4] = v248;
    v247[1] = v250;
    v247[2] = v249;
    long long v251 = v379;
    long long v253 = v376;
    long long v252 = v377;
    v247[7] = v378;
    v247[8] = v251;
    v247[5] = v253;
    v247[6] = v252;
    long long v254 = v383;
    long long v256 = v380;
    long long v255 = v381;
    v247[11] = v382;
    v247[12] = v254;
    v247[9] = v256;
    v247[10] = v255;
    swift_bridgeObjectRetain();
    outlined retain of NodePersonality(&v437);
    outlined retain of [Input]((uint64_t)&v436);
    swift_willThrow();
    outlined init with take of NodePersonality(&v395, &v435);
    outlined release of NodePersonality(&v435);
    v434 = v395._object;
    outlined release of [Input]((uint64_t)&v434);
    uint64_t v433 = v396;
    outlined release of [Input]((uint64_t)&v433);
    outlined release of NodePersonality(&v437);
    swift_bridgeObjectRelease();
    outlined release of [Input]((uint64_t)&v436);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined consume of NodePersonality(v349);
    swift_bridgeObjectRelease();
    goto LABEL_273;
  }
  uint64_t v356 = v23;
  uint64_t v86 = 1;
  uint64_t v87 = v327;
  while (1)
  {
    uint64_t v88 = v86 + 1;
    if (__OFADD__(v86, 1)) {
      break;
    }
    uint64_t v68 = *(v87 - 5);
    unint64_t v358 = *(v87 - 6);
    uint64_t v89 = *(v87 - 4);
    unint64_t v70 = *(v87 - 3);
    unint64_t v354 = *(v87 - 2);
    char v71 = *((unsigned char *)v87 - 8);
    unint64_t v22 = *v87;
    if (v89 == 0x64726F6F63786574 && v70 == 0xE800000000000000)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      unint64_t object = v344;
      swift_bridgeObjectRelease_n();
      unint64_t v70 = 0xE800000000000000;
      uint64_t v23 = v356;
      uint64_t v72 = 0x64726F6F63786574;
      goto LABEL_110;
    }
    unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      unint64_t object = v344;
      swift_bridgeObjectRelease_n();
      uint64_t v72 = v89;
      uint64_t v23 = v356;
      goto LABEL_110;
    }
    v87 += 7;
    ++v86;
    if (v88 == v353) {
      goto LABEL_284;
    }
  }
  __break(1u);
LABEL_305:
  __break(1u);
LABEL_306:
  __break(1u);
LABEL_307:
  __break(1u);
LABEL_308:
  __break(1u);
LABEL_309:
  __break(1u);
LABEL_310:
  __break(1u);
LABEL_311:
  __break(1u);
LABEL_312:
  __break(1u);
LABEL_313:
  __break(1u);
LABEL_314:
  __break(1u);
LABEL_315:
  __break(1u);
LABEL_316:
  __break(1u);
LABEL_317:
  __break(1u);
LABEL_318:
  __break(1u);
LABEL_319:
  __break(1u);
LABEL_320:
  __break(1u);
LABEL_321:
  __break(1u);
LABEL_322:
  __break(1u);
  return result;
}

uint64_t Graph.transformMaterialXCubeimageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x270FA5388](a1);
  long long v286 = v1;
  uint64_t v287 = v2;
  uint64_t v5 = v4;
  uint64_t v271 = v6;
  uint64_t v272 = v7;
  uint64_t v8 = v3;
  uint64_t v9 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v11 = (char *)&v249 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v284 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v249 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v8, v5);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v15 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v288 = v14;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v17 = (void *)*((void *)&v298 + 1);
  if (!*((void *)&v298 + 1)) {
    return (*(uint64_t (**)(char *, uint64_t))(v284 + 8))(v288, v15);
  }
  unint64_t v18 = v298;
  unint64_t v19 = v299;
  long long v274 = (long long *)&v312;
  uint64_t v20 = *((void *)&v299 + 1);
  uint64_t v21 = v300;
  Swift::Int v257 = v374;
  int v22 = BYTE8(v300);
  long long v260 = v356;
  long long v261 = v370;
  uint64_t v23 = v361;
  long long v258 = v346;
  long long v259 = v351;
  long long v255 = v341;
  long long v256 = (long long *)&v332;
  long long v253 = (long long *)&v337;
  long long v254 = (long long *)&v335;
  long long v283 = (void *)0x800000025C421D80;
  unint64_t v273 = 0x800000025C421DF0;
  uint64_t v276 = AssociatedConformanceWitness;
  while (1)
  {
    unint64_t v436 = v18;
    unint64_t v437 = v17;
    unint64_t v438 = v19;
    uint64_t v439 = v20;
    uint64_t v440 = v21;
    char v441 = v22 & 1;
    if (v18 >> 61 != 5) {
      goto LABEL_3;
    }
    int v280 = v22;
    uint64_t v281 = v21;
    uint64_t v285 = v20;
    swift_bridgeObjectRetain();
    v24._char countAndFlagsBits = 0xD000000000000017;
    v24._unint64_t object = v283;
    Swift::Bool v25 = String.hasPrefix(_:)(v24);
    swift_bridgeObjectRelease();
    if (!v25) {
      goto LABEL_3;
    }
    long long v251 = v23;
    uint64_t v26 = v287;
    ShaderGraphNode.out.getter((uint64_t)v311);
    if (v26)
    {
      (*(void (**)(char *, uint64_t))(v284 + 8))(v288, v15);
      outlined consume of NodePersonality(v18);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v279 = v15;
    uint64_t v27 = v311[1];
    long long v435 = *v274;
    uint64_t v28 = outlined release of String((uint64_t)&v435);
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 144))(v28);
    swift_release();
    uint64_t v275 = v29;
    if (!v29)
    {
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi34_((uint64_t)&v291);
      *(void *)&long long v298 = 0;
      *((void *)&v298 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      *(void *)&long long v298 = 0xD000000000000025;
      *((void *)&v298 + 1) = 0x800000025C421DC0;
      v290._char countAndFlagsBits = 1701080942;
      v290._unint64_t object = (void *)0xE400000000000000;
      uint64_t v289 = v285;
      v185._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v185);
      swift_bridgeObjectRelease();
      String.append(_:)(v290);
      swift_bridgeObjectRelease();
      v186._char countAndFlagsBits = 39;
      v186._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v186);
      long long v187 = v298;
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v291, (uint64_t)&v298);
      long long v310 = v187;
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      swift_allocError();
      *uint64_t v188 = v298;
      long long v189 = v302;
      long long v191 = v299;
      long long v190 = v300;
      v188[3] = v301;
      v188[4] = v189;
      v188[1] = v191;
      v188[2] = v190;
      long long v192 = v306;
      long long v194 = v303;
      long long v193 = v304;
      v188[7] = v305;
      v188[8] = v192;
      void v188[5] = v194;
      v188[6] = v193;
      long long v195 = v310;
      long long v197 = v307;
      long long v196 = v308;
      v188[11] = v309;
      v188[12] = v195;
      v188[9] = v197;
      v188[10] = v196;
      swift_willThrow();
      outlined consume of NodePersonality(v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v284 + 8))(v288, v279);
    }
    *(void *)&long long v298 = 0;
    *((void *)&v298 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    *(void *)&long long v298 = 0xD00000000000001CLL;
    *((void *)&v298 + 1) = v273;
    v291._char countAndFlagsBits = 1701080942;
    v291._unint64_t object = (void *)0xE400000000000000;
    v290._char countAndFlagsBits = v285;
    v30._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    String.append(_:)(v291);
    swift_bridgeObjectRelease();
    v31._char countAndFlagsBits = 39;
    v31._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v31);
    specialized Graph.insertCreateSampler(label:)(&v313);
    Swift::String v268 = v313;
    unint64_t v269 = v314;
    uint64_t v270 = v315;
    uint64_t v32 = v316;
    int v33 = v317;
    swift_bridgeObjectRelease();
    uint64_t v34 = v17[2];
    if (!v34)
    {
LABEL_86:
      v291._char countAndFlagsBits = v18;
      v291._unint64_t object = v17;
      unint64_t v292 = v19;
      uint64_t v293 = v285;
      uint64_t v294 = v281;
      char countAndFlagsBits = v280 & 1;
      uint64_t v296 = 0x79747265746C6966;
      unint64_t v297 = 0xEA00000000006570;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v291);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v291, (uint64_t)&v298);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v310 = 0uLL;
      swift_allocError();
      *char v123 = v298;
      long long v124 = v302;
      long long v126 = v299;
      long long v125 = v300;
      unint64_t v123[3] = v301;
      v123[4] = v124;
      v123[1] = v126;
      v123[2] = v125;
      long long v127 = v306;
      long long v129 = v303;
      long long v128 = v304;
      v123[7] = v305;
      v123[8] = v127;
      void v123[5] = v129;
      v123[6] = v128;
      long long v130 = v310;
      long long v132 = v307;
      long long v131 = v308;
      v123[11] = v309;
      v123[12] = v130;
      v123[9] = v132;
      v123[10] = v131;
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v18);
      swift_bridgeObjectRetain();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v284 + 8))(v288, v279);
      outlined init with take of NodePersonality(&v313, &v386);
      outlined release of NodePersonality(&v386);
      unint64_t object = v313._object;
      outlined release of [Input]((uint64_t)&object);
      unint64_t v384 = v314;
      uint64_t v133 = &v384;
      goto LABEL_87;
    }
    uint64_t v266 = v32;
    LODWORD(v267) = v33;
    uint64_t v287 = 0;
    unint64_t v277 = v19;
    unint64_t v278 = v18;
    long long v282 = v17;
    long long v35 = v17 + 10;
    long long v252 = v17 + 10;
    while (1)
    {
      uint64_t v37 = *(v35 - 6);
      uint64_t v36 = *(v35 - 5);
      uint64_t v39 = *(v35 - 4);
      unint64_t v38 = *(v35 - 3);
      uint64_t v40 = *(v35 - 2);
      char v41 = *((unsigned char *)v35 - 8);
      uint64_t v42 = *v35;
      if (v39 == 0x79747265746C6966 && v38 == 0xEA00000000006570)
      {
        unint64_t v46 = 0xEA00000000006570;
        goto LABEL_19;
      }
      uint64_t v503 = *v35;
      uint64_t v44 = v36;
      unint64_t v45 = v38;
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        break;
      }
      v35 += 7;
      if (!--v34)
      {
        uint64_t v456 = v37;
        uint64_t v457 = v44;
        uint64_t v458 = v39;
        unint64_t v459 = v45;
        uint64_t v460 = v40;
        char v461 = v41;
        uint64_t v462 = v503;
        unint64_t v19 = v277;
        unint64_t v18 = v278;
        uint64_t v17 = v282;
        goto LABEL_86;
      }
    }
    uint64_t v36 = v44;
    unint64_t v46 = v45;
    uint64_t v42 = v503;
LABEL_19:
    uint64_t v456 = v37;
    uint64_t v457 = v36;
    uint64_t v458 = v39;
    unint64_t v459 = v46;
    uint64_t v460 = v40;
    char v461 = v41;
    uint64_t v462 = v42;
    uint64_t v47 = (char *)v313._object;
    v434 = v313._object;
    uint64_t v48 = *((void *)v313._object + 2);
    uint64_t v263 = v36;
    swift_retain();
    unint64_t v262 = v46;
    swift_bridgeObjectRetain();
    if (!v48)
    {
LABEL_88:
      outlined init with take of NodePersonality(&v313, &v388);
      unint64_t v387 = v314;
      Swift::String v291 = v268;
      unint64_t v292 = v269;
      uint64_t v293 = v270;
      uint64_t v294 = v266;
      char countAndFlagsBits = v267;
      uint64_t v296 = 0x746C69665F67616DLL;
      unint64_t v297 = 0xEA00000000007265;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v291);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v291, (uint64_t)&v298);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v310 = 0uLL;
      swift_allocError();
      *uint64_t v134 = v298;
      long long v135 = v302;
      long long v137 = v299;
      long long v136 = v300;
      v134[3] = v301;
      v134[4] = v135;
      v134[1] = v137;
      v134[2] = v136;
      long long v138 = v306;
      long long v140 = v303;
      long long v139 = v304;
      v134[7] = v305;
      v134[8] = v138;
      v134[5] = v140;
      v134[6] = v139;
      long long v141 = v310;
      long long v143 = v307;
      long long v142 = v308;
      v134[11] = v309;
      v134[12] = v141;
      v134[9] = v143;
      v134[10] = v142;
      outlined retain of [Input]((uint64_t)&v434);
      outlined retain of NodePersonality(&v388);
      outlined retain of [Input]((uint64_t)&v387);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v284 + 8))(v288, v279);
      swift_bridgeObjectRelease();
      swift_release();
      outlined release of NodePersonality(&v388);
      outlined release of [Input]((uint64_t)&v434);
      outlined release of [Input]((uint64_t)&v387);
      swift_release();
      outlined consume of NodePersonality(v278);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    unint64_t v49 = v47 + 80;
    long long v264 = v47 + 80;
    long long v265 = v47;
    while (1)
    {
      uint64_t v50 = *(v49 - 6);
      uint64_t v503 = *(v49 - 5);
      uint64_t v51 = *(v49 - 4);
      uint64_t v52 = *(v49 - 2);
      char v53 = *((unsigned char *)v49 - 8);
      uint64_t v54 = *v49;
      if (v51 == 0x746C69665F67616DLL && *(v49 - 3) == 0xEA00000000007265) {
        break;
      }
      unint64_t v56 = *(v49 - 3);
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_29;
      }
      v49 += 7;
      if (!--v48)
      {
        uint64_t v486 = v50;
        uint64_t v487 = v503;
        uint64_t v488 = v51;
        unint64_t v489 = v56;
        uint64_t v490 = v52;
        char v491 = v53;
        uint64_t v492 = v54;
        goto LABEL_88;
      }
    }
    unint64_t v56 = 0xEA00000000007265;
LABEL_29:
    uint64_t v486 = v50;
    uint64_t v487 = v503;
    uint64_t v488 = v51;
    unint64_t v489 = v56;
    uint64_t v490 = v52;
    char v491 = v53;
    uint64_t v492 = v54;
    long long v57 = v286[8];
    long long v58 = v286[9];
    long long v59 = v286[6];
    long long v500 = v286[7];
    long long v501 = v57;
    v502[0] = v58;
    *(_OWORD *)((char *)v502 + 9) = *(long long *)((char *)v286 + 153);
    long long v60 = v286[5];
    long long v497 = v286[4];
    long long v498 = v60;
    long long v499 = v59;
    long long v61 = v286[1];
    long long v493 = *v286;
    long long v494 = v61;
    long long v62 = v286[3];
    long long v495 = v286[2];
    long long v496 = v62;
    swift_retain();
    swift_bridgeObjectRetain();
    Graph.edge(to:)((uint64_t)&v486, v318);
    outlined init with take of MetalFunctionNode?((uint64_t)v318, (uint64_t)v368, &demangling cache variable for type metadata for Edge?);
    if (v368[1])
    {
      outlined release of Edge?(v318);
      uint64_t v63 = v279;
      uint64_t v64 = v288;
      uint64_t v65 = v265;
    }
    else
    {
      Graph.edge(to:)((uint64_t)&v456, v319);
      outlined init with take of MetalFunctionNode?((uint64_t)v319, (uint64_t)v366, &demangling cache variable for type metadata for Edge?);
      uint64_t v63 = v279;
      uint64_t v64 = v288;
      uint64_t v65 = v265;
      if (*((void *)&v366[0] + 1))
      {
        long long v369 = v366[0];
        v370[0] = v366[1];
        v370[1] = v366[2];
        uint64_t v371 = v367;
        long long v372 = *v261;
        swift_retain();
        outlined retain of String((uint64_t)&v372);
        outlined release of Edge?(v319);
        Graph.connect(_:to:)((uint64_t)&v369, (unint64_t)&v486);
        swift_release();
        outlined release of String((uint64_t)&v372);
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v66 = v65[2];
    if (!v66)
    {
LABEL_89:
      outlined init with take of NodePersonality(&v313, &v390);
      unint64_t v389 = v314;
      Swift::String v291 = v268;
      unint64_t v292 = v269;
      uint64_t v293 = v270;
      uint64_t v294 = v266;
      char countAndFlagsBits = v267;
      uint64_t v296 = 0x746C69665F70696DLL;
      unint64_t v297 = 0xEA00000000007265;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v291);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v291, (uint64_t)&v298);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v310 = 0uLL;
      swift_allocError();
      _OWORD *v144 = v298;
      long long v145 = v302;
      long long v147 = v299;
      long long v146 = v300;
      v144[3] = v301;
      v144[4] = v145;
      v144[1] = v147;
      v144[2] = v146;
      long long v148 = v306;
      long long v150 = v303;
      long long v149 = v304;
      v144[7] = v305;
      v144[8] = v148;
      v144[5] = v150;
      v144[6] = v149;
      long long v151 = v310;
      long long v153 = v307;
      long long v152 = v308;
      v144[11] = v309;
      v144[12] = v151;
      v144[9] = v153;
      v144[10] = v152;
      outlined retain of [Input]((uint64_t)&v434);
      outlined retain of NodePersonality(&v390);
      outlined retain of [Input]((uint64_t)&v389);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v284 + 8))(v64, v63);
      swift_bridgeObjectRelease();
      swift_release();
      outlined release of NodePersonality(&v390);
      outlined release of [Input]((uint64_t)&v434);
      outlined release of [Input]((uint64_t)&v389);
      swift_release();
      outlined consume of NodePersonality(v278);
      goto LABEL_93;
    }
    BOOL v67 = v264;
    while (1)
    {
      uint64_t v68 = *(v67 - 6);
      uint64_t v503 = *(v67 - 5);
      uint64_t v69 = *(v67 - 4);
      uint64_t v70 = *(v67 - 2);
      char v71 = *((unsigned char *)v67 - 8);
      uint64_t v72 = *v67;
      if (v69 == 0x746C69665F70696DLL && *(v67 - 3) == 0xEA00000000007265) {
        break;
      }
      unint64_t v74 = *(v67 - 3);
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_43;
      }
      v67 += 7;
      if (!--v66)
      {
        uint64_t v469 = v68;
        uint64_t v470 = v503;
        uint64_t v471 = v69;
        unint64_t v472 = v74;
        uint64_t v473 = v70;
        char v474 = v71;
        uint64_t v475 = v72;
        uint64_t v63 = v279;
        uint64_t v64 = v288;
        goto LABEL_89;
      }
    }
    unint64_t v74 = 0xEA00000000007265;
LABEL_43:
    uint64_t v469 = v68;
    uint64_t v470 = v503;
    uint64_t v471 = v69;
    unint64_t v472 = v74;
    uint64_t v473 = v70;
    char v474 = v71;
    uint64_t v475 = v72;
    long long v75 = v286[6];
    long long v483 = v286[7];
    long long v76 = v286[9];
    long long v484 = v286[8];
    v485[0] = v76;
    *(_OWORD *)((char *)v485 + 9) = *(long long *)((char *)v286 + 153);
    long long v77 = v286[5];
    long long v480 = v286[4];
    long long v481 = v77;
    long long v482 = v75;
    long long v78 = v286[1];
    long long v476 = *v286;
    long long v477 = v78;
    long long v79 = v286[3];
    long long v478 = v286[2];
    long long v479 = v79;
    swift_retain();
    swift_bridgeObjectRetain();
    Graph.edge(to:)((uint64_t)&v469, v320);
    outlined init with take of MetalFunctionNode?((uint64_t)v320, (uint64_t)v365, &demangling cache variable for type metadata for Edge?);
    unint64_t v80 = v278;
    if (v365[1])
    {
      outlined release of Edge?(v320);
      unint64_t v81 = v288;
    }
    else
    {
      Graph.edge(to:)((uint64_t)&v456, v321);
      outlined init with take of MetalFunctionNode?((uint64_t)v321, (uint64_t)v363, &demangling cache variable for type metadata for Edge?);
      unint64_t v81 = v288;
      if (*((void *)&v363[0] + 1))
      {
        long long v373 = v363[0];
        v374[0] = v363[1];
        v374[1] = v363[2];
        uint64_t v375 = v364;
        long long v376 = *v257;
        swift_retain();
        outlined retain of String((uint64_t)&v376);
        outlined release of Edge?(v321);
        Graph.connect(_:to:)((uint64_t)&v373, (unint64_t)&v469);
        swift_release();
        outlined release of String((uint64_t)&v376);
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v82 = v265[2];
    if (!v82)
    {
LABEL_90:
      outlined init with take of NodePersonality(&v313, &v392);
      unint64_t v391 = v314;
      Swift::String v291 = v268;
      unint64_t v292 = v269;
      uint64_t v293 = v270;
      uint64_t v294 = v266;
      char countAndFlagsBits = v267;
      uint64_t v296 = 0x746C69665F6E696DLL;
      unint64_t v297 = 0xEA00000000007265;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v291);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v291, (uint64_t)&v298);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v310 = 0uLL;
      swift_allocError();
      _OWORD *v154 = v298;
      long long v155 = v302;
      long long v157 = v299;
      long long v156 = v300;
      v154[3] = v301;
      v154[4] = v155;
      v154[1] = v157;
      v154[2] = v156;
      long long v158 = v306;
      long long v160 = v303;
      long long v159 = v304;
      v154[7] = v305;
      v154[8] = v158;
      v154[5] = v160;
      v154[6] = v159;
      long long v161 = v310;
      long long v163 = v307;
      long long v162 = v308;
      v154[11] = v309;
      v154[12] = v161;
      v154[9] = v163;
      v154[10] = v162;
      outlined retain of [Input]((uint64_t)&v434);
      outlined retain of NodePersonality(&v392);
      outlined retain of [Input]((uint64_t)&v391);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v284 + 8))(v81, v279);
      swift_bridgeObjectRelease();
      swift_release();
      outlined release of NodePersonality(&v392);
      outlined release of [Input]((uint64_t)&v434);
      outlined release of [Input]((uint64_t)&v391);
      swift_release();
      outlined consume of NodePersonality(v80);
      goto LABEL_93;
    }
    char v83 = v264;
    while (1)
    {
      uint64_t v85 = *(v83 - 6);
      uint64_t v84 = *(v83 - 5);
      uint64_t v86 = *(v83 - 4);
      unint64_t v87 = *(v83 - 3);
      uint64_t v88 = *(v83 - 2);
      char v89 = *((unsigned char *)v83 - 8);
      uint64_t v90 = v83;
      uint64_t v91 = *v83;
      if (v86 == 0x746C69665F6E696DLL && v87 == 0xEA00000000007265)
      {
        unint64_t v87 = 0xEA00000000007265;
        goto LABEL_58;
      }
      uint64_t v503 = *v83;
      uint64_t v93 = v84;
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        break;
      }
      char v83 = v90 + 7;
      if (!--v82)
      {
        *(void *)&long long v463 = v85;
        *((void *)&v463 + 1) = v93;
        uint64_t v464 = v86;
        unint64_t v465 = v87;
        uint64_t v466 = v88;
        char v467 = v89;
        uint64_t v468 = v503;
        unint64_t v80 = v278;
        unint64_t v81 = v288;
        goto LABEL_90;
      }
    }
    uint64_t v84 = v93;
    uint64_t v91 = v503;
LABEL_58:
    *(void *)&long long v463 = v85;
    *((void *)&v463 + 1) = v84;
    uint64_t v464 = v86;
    unint64_t v465 = v87;
    uint64_t v466 = v88;
    char v467 = v89;
    uint64_t v468 = v91;
    swift_retain();
    swift_bridgeObjectRetain();
    Graph.moveEdge(from:to:)((uint64_t)&v456, &v463);
    swift_bridgeObjectRelease();
    swift_release();
    specialized ShaderGraphNode.metalTextureType.getter(v278);
    uint64_t v94 = swift_retain();
    Graph.insertCubeimageNode(metalTextureType:resultType:)(v94, v275, &v322);
    long long v264 = (void *)*((void *)&v322 + 1);
    uint64_t v250 = v322;
    long long v265 = v323;
    uint64_t v266 = v324;
    uint64_t v267 = v325;
    LODWORD(v268._countAndFlagsBits) = v326;
    swift_release();
    uint64_t v95 = v282[2];
    int v96 = v252;
    if (!v95)
    {
LABEL_91:
      unint64_t v164 = v278;
      v291._char countAndFlagsBits = v278;
      v291._unint64_t object = v282;
      unint64_t v292 = v277;
      uint64_t v293 = v285;
      uint64_t v294 = v281;
      char countAndFlagsBits = v280 & 1;
      uint64_t v296 = 1701603686;
      unint64_t v297 = 0xE400000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v291);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v291, (uint64_t)&v298);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v310 = 0uLL;
      swift_allocError();
      *uint64_t v165 = v298;
      long long v166 = v302;
      long long v168 = v299;
      long long v167 = v300;
      v165[3] = v301;
      v165[4] = v166;
      v165[1] = v168;
      v165[2] = v167;
      long long v169 = v306;
      long long v171 = v303;
      long long v170 = v304;
      v165[7] = v305;
      v165[8] = v169;
      v165[5] = v171;
      v165[6] = v170;
      long long v172 = v310;
      long long v174 = v307;
      long long v173 = v308;
      v165[11] = v309;
      v165[12] = v172;
      v165[9] = v174;
      v165[10] = v173;
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v164);
      swift_bridgeObjectRetain();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v284 + 8))(v288, v279);
      outlined init with take of NodePersonality(&v322, &v397);
      outlined release of NodePersonality(&v397);
      uint64_t v396 = *((void *)&v322 + 1);
      outlined release of [Input]((uint64_t)&v396);
      Swift::String v395 = v323;
      outlined release of [Input]((uint64_t)&v395);
      swift_bridgeObjectRelease();
      swift_release();
      outlined init with take of NodePersonality(&v313, &v394);
      outlined release of NodePersonality(&v394);
      outlined release of [Input]((uint64_t)&v434);
      unint64_t v393 = v314;
      outlined release of [Input]((uint64_t)&v393);
      swift_release();
      outlined consume of NodePersonality(v164);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    while (1)
    {
      uint64_t v98 = *(v96 - 6);
      uint64_t v97 = (void *)*(v96 - 5);
      uint64_t v100 = *(v96 - 4);
      unint64_t v99 = *(v96 - 3);
      uint64_t v101 = *(v96 - 2);
      char v102 = *((unsigned char *)v96 - 8);
      uint64_t v103 = *v96;
      if (v100 == 1701603686 && v99 == 0xE400000000000000)
      {
        unint64_t v108 = 0xE400000000000000;
        goto LABEL_68;
      }
      uint64_t v503 = *v96;
      uint64_t v105 = v97;
      char v106 = v96;
      unint64_t v107 = v99;
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        break;
      }
      int v96 = v106 + 7;
      if (!--v95)
      {
        uint64_t v442 = v98;
        v443 = v105;
        uint64_t v444 = v100;
        unint64_t v445 = v107;
        uint64_t v446 = v101;
        char v447 = v102;
        uint64_t v448 = v503;
        goto LABEL_91;
      }
    }
    uint64_t v97 = v105;
    unint64_t v108 = v107;
    uint64_t v103 = v503;
LABEL_68:
    uint64_t v442 = v98;
    v443 = v97;
    uint64_t v444 = v100;
    unint64_t v445 = v108;
    uint64_t v446 = v101;
    char v447 = v102;
    uint64_t v448 = v103;
    uint64_t v109 = *((void *)&v322 + 1);
    uint64_t v110 = *(void *)(*((void *)&v322 + 1) + 16);
    swift_retain();
    unint64_t v269 = v108;
    swift_bridgeObjectRetain();
    if (!v110)
    {
LABEL_92:
      outlined init with take of NodePersonality(&v322, &v401);
      v400 = v323;
      v291._char countAndFlagsBits = v250;
      v291._unint64_t object = v264;
      unint64_t v292 = (unint64_t)v265;
      uint64_t v293 = v266;
      uint64_t v294 = v267;
      char countAndFlagsBits = v268._countAndFlagsBits;
      uint64_t v296 = 1701603686;
      unint64_t v297 = 0xE400000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v291);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v291, (uint64_t)&v298);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v310 = 0uLL;
      swift_allocError();
      _OWORD *v175 = v298;
      long long v176 = v302;
      long long v178 = v299;
      long long v177 = v300;
      v175[3] = v301;
      v175[4] = v176;
      v175[1] = v178;
      v175[2] = v177;
      long long v179 = v306;
      long long v181 = v303;
      long long v180 = v304;
      v175[7] = v305;
      v175[8] = v179;
      v175[5] = v181;
      v175[6] = v180;
      long long v182 = v310;
      long long v184 = v307;
      long long v183 = v308;
      v175[11] = v309;
      v175[12] = v182;
      v175[9] = v184;
      v175[10] = v183;
      swift_bridgeObjectRetain();
      outlined retain of NodePersonality(&v401);
      outlined retain of [Input]((uint64_t)&v400);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v284 + 8))(v288, v279);
      swift_bridgeObjectRelease();
      swift_release();
      outlined release of NodePersonality(&v401);
      swift_bridgeObjectRelease();
      outlined release of [Input]((uint64_t)&v400);
      swift_bridgeObjectRelease();
      swift_release();
      outlined init with take of NodePersonality(&v313, &v399);
      outlined release of NodePersonality(&v399);
      outlined release of [Input]((uint64_t)&v434);
      unint64_t v398 = v314;
      outlined release of [Input]((uint64_t)&v398);
      swift_release();
      outlined consume of NodePersonality(v278);
      goto LABEL_93;
    }
    v268._unint64_t object = v97;
    uint64_t v270 = v109;
    long long v111 = (void *)(v109 + 80);
    while (1)
    {
      uint64_t v112 = *(v111 - 6);
      uint64_t v503 = *(v111 - 5);
      uint64_t v113 = *(v111 - 4);
      uint64_t v114 = *(v111 - 2);
      char v115 = *((unsigned char *)v111 - 8);
      uint64_t v116 = *v111;
      if (v113 == 1701603686 && *(v111 - 3) == 0xE400000000000000) {
        break;
      }
      unint64_t v118 = *(v111 - 3);
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_78;
      }
      v111 += 7;
      if (!--v110)
      {
        uint64_t v449 = v112;
        uint64_t v450 = v503;
        uint64_t v451 = v113;
        unint64_t v452 = v118;
        uint64_t v453 = v114;
        char v454 = v115;
        uint64_t v455 = v116;
        goto LABEL_92;
      }
    }
    unint64_t v118 = 0xE400000000000000;
LABEL_78:
    uint64_t v119 = v270;
    uint64_t v449 = v112;
    uint64_t v450 = v503;
    uint64_t v451 = v113;
    unint64_t v452 = v118;
    uint64_t v453 = v114;
    char v454 = v115;
    uint64_t v455 = v116;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v120 = v287;
    Graph.convertFilenameInput(_:movingTo:textureAssignments:customUniformsType:)(&v442, (unint64_t)&v449, v271, v272);
    if (v120) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v121 = v282;
    specialized Sequence.first(where:)((uint64_t)v282, 0x746C7561666564, 0xE700000000000000, v327);
    outlined init with take of MetalFunctionNode?((uint64_t)v327, (uint64_t)v358, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (!*((void *)&v358[0] + 1))
    {
      unint64_t v198 = v278;
      v291._char countAndFlagsBits = v278;
      v291._unint64_t object = v121;
      unint64_t v292 = v277;
      uint64_t v293 = v285;
      uint64_t v294 = v281;
      char countAndFlagsBits = v280 & 1;
      uint64_t v296 = 0x746C7561666564;
      unint64_t v297 = 0xE700000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v291);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v291, (uint64_t)&v298);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v310 = 0uLL;
      swift_allocError();
      *uint64_t v199 = v298;
      long long v200 = v302;
      long long v202 = v299;
      long long v201 = v300;
      v199[3] = v301;
      v199[4] = v200;
      v199[1] = v202;
      v199[2] = v201;
      long long v203 = v306;
      long long v205 = v303;
      long long v204 = v304;
      v199[7] = v305;
      v199[8] = v203;
      v199[5] = v205;
      v199[6] = v204;
      long long v206 = v310;
      long long v208 = v307;
      long long v207 = v308;
      v199[11] = v309;
      v199[12] = v206;
      v199[9] = v208;
      v199[10] = v207;
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v198);
      swift_bridgeObjectRetain();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v284 + 8))(v288, v279);
      outlined init with take of NodePersonality(&v322, &v429);
      outlined release of NodePersonality(&v429);
      swift_bridgeObjectRelease();
      uint64_t v428 = v323;
      outlined release of [Input]((uint64_t)&v428);
      swift_bridgeObjectRelease();
      swift_release();
      outlined init with take of NodePersonality(&v313, &v427);
      outlined release of NodePersonality(&v427);
      outlined release of [Input]((uint64_t)&v434);
      unint64_t v426 = v314;
      outlined release of [Input]((uint64_t)&v426);
      swift_release();
      outlined consume of NodePersonality(v198);
      goto LABEL_93;
    }
    long long v360 = v358[0];
    v361[0] = v358[1];
    v361[1] = v358[2];
    uint64_t v362 = v359;
    specialized Sequence.first(where:)(v119, 0x56746C7561666564, 0xEA00000000006C61, v328);
    outlined init with take of MetalFunctionNode?((uint64_t)v328, (uint64_t)v353, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (!*((void *)&v353[0] + 1))
    {
      outlined init with take of NodePersonality(&v322, &v425);
      unint64_t v424 = v323;
      v291._char countAndFlagsBits = v250;
      v291._unint64_t object = v264;
      unint64_t v292 = (unint64_t)v265;
      uint64_t v293 = v266;
      uint64_t v294 = v267;
      char countAndFlagsBits = v268._countAndFlagsBits;
      uint64_t v296 = 0x56746C7561666564;
      unint64_t v297 = 0xEA00000000006C61;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v291);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v291, (uint64_t)&v298);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v310 = 0uLL;
      swift_allocError();
      _OWORD *v209 = v298;
      long long v210 = v302;
      long long v212 = v299;
      long long v211 = v300;
      v209[3] = v301;
      v209[4] = v210;
      v209[1] = v212;
      v209[2] = v211;
      long long v213 = v306;
      long long v215 = v303;
      long long v214 = v304;
      v209[7] = v305;
      v209[8] = v213;
      void v209[5] = v215;
      v209[6] = v214;
      long long v216 = v310;
      long long v218 = v307;
      long long v217 = v308;
      v209[11] = v309;
      v209[12] = v216;
      v209[9] = v218;
      v209[10] = v217;
      swift_bridgeObjectRetain();
      outlined retain of NodePersonality(&v425);
      outlined retain of [Input]((uint64_t)&v424);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v284 + 8))(v288, v279);
      swift_release();
      long long v378 = *v251;
      outlined release of String((uint64_t)&v378);
      outlined release of NodePersonality(&v425);
      swift_bridgeObjectRelease();
      outlined release of [Input]((uint64_t)&v424);
      swift_bridgeObjectRelease();
      swift_release();
      outlined init with take of NodePersonality(&v313, &v423);
      outlined release of NodePersonality(&v423);
      outlined release of [Input]((uint64_t)&v434);
      unint64_t v422 = v314;
      outlined release of [Input]((uint64_t)&v422);
      swift_release();
      outlined consume of NodePersonality(v278);
      goto LABEL_93;
    }
    long long v355 = v353[0];
    v356[0] = v353[1];
    v356[1] = v353[2];
    uint64_t v357 = v354;
    Graph.moveEdge(from:to:)((uint64_t)&v360, &v355);
    swift_release();
    long long v379 = *v260;
    outlined release of String((uint64_t)&v379);
    swift_release();
    uint64_t v23 = v251;
    long long v377 = *v251;
    outlined release of String((uint64_t)&v377);
    specialized Sequence.first(where:)((uint64_t)v121, 0x64726F6F63786574, 0xE800000000000000, v329);
    outlined init with take of MetalFunctionNode?((uint64_t)v329, (uint64_t)v348, (uint64_t *)&demangling cache variable for type metadata for Input?);
    unint64_t v18 = v278;
    uint64_t v15 = v279;
    if (!*((void *)&v348[0] + 1))
    {
      v291._char countAndFlagsBits = v278;
      v291._unint64_t object = v121;
      unint64_t v292 = v277;
      uint64_t v293 = v285;
      uint64_t v294 = v281;
      char countAndFlagsBits = v280 & 1;
      uint64_t v296 = 0x64726F6F63786574;
      unint64_t v297 = 0xE800000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v291);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v291, (uint64_t)&v298);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v310 = 0uLL;
      swift_allocError();
      *long long v219 = v298;
      long long v220 = v302;
      long long v222 = v299;
      long long v221 = v300;
      v219[3] = v301;
      v219[4] = v220;
      v219[1] = v222;
      v219[2] = v221;
      long long v223 = v306;
      long long v225 = v303;
      long long v224 = v304;
      v219[7] = v305;
      v219[8] = v223;
      v219[5] = v225;
      v219[6] = v224;
      long long v226 = v310;
      long long v228 = v307;
      long long v227 = v308;
      v219[11] = v309;
      v219[12] = v226;
      v219[9] = v228;
      v219[10] = v227;
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v18);
      swift_bridgeObjectRetain();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v284 + 8))(v288, v15);
      outlined init with take of NodePersonality(&v322, &v421);
      outlined release of NodePersonality(&v421);
      swift_bridgeObjectRelease();
      unint64_t v420 = v323;
      outlined release of [Input]((uint64_t)&v420);
      swift_bridgeObjectRelease();
      swift_release();
      outlined init with take of NodePersonality(&v313, &v419);
      outlined release of NodePersonality(&v419);
      outlined release of [Input]((uint64_t)&v434);
      unint64_t v418 = v314;
      uint64_t v133 = &v418;
      goto LABEL_87;
    }
    long long v350 = v348[0];
    v351[0] = v348[1];
    v351[1] = v348[2];
    uint64_t v352 = v349;
    specialized Sequence.first(where:)(v119, 0x64726F6F63786574, 0xE800000000000000, v330);
    outlined init with take of MetalFunctionNode?((uint64_t)v330, (uint64_t)v343, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (!*((void *)&v343[0] + 1))
    {
      outlined init with take of NodePersonality(&v322, &v417);
      v416 = v323;
      v291._char countAndFlagsBits = v250;
      v291._unint64_t object = v264;
      unint64_t v292 = (unint64_t)v265;
      uint64_t v293 = v266;
      uint64_t v294 = v267;
      char countAndFlagsBits = v268._countAndFlagsBits;
      uint64_t v296 = 0x64726F6F63786574;
      unint64_t v297 = 0xE800000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v291);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v291, (uint64_t)&v298);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v310 = 0uLL;
      swift_allocError();
      *long long v229 = v298;
      long long v230 = v302;
      long long v232 = v299;
      long long v231 = v300;
      v229[3] = v301;
      v229[4] = v230;
      v229[1] = v232;
      v229[2] = v231;
      long long v233 = v306;
      long long v235 = v303;
      long long v234 = v304;
      v229[7] = v305;
      v229[8] = v233;
      v229[5] = v235;
      v229[6] = v234;
      long long v236 = v310;
      long long v238 = v307;
      long long v237 = v308;
      v229[11] = v309;
      v229[12] = v236;
      v229[9] = v238;
      v229[10] = v237;
      swift_bridgeObjectRetain();
      outlined retain of NodePersonality(&v417);
      outlined retain of [Input]((uint64_t)&v416);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v284 + 8))(v288, v15);
      swift_release();
      long long v381 = *v259;
      outlined release of String((uint64_t)&v381);
      outlined release of NodePersonality(&v417);
      swift_bridgeObjectRelease();
      outlined release of [Input]((uint64_t)&v416);
      swift_bridgeObjectRelease();
      swift_release();
      outlined init with take of NodePersonality(&v313, &v415);
      outlined release of NodePersonality(&v415);
      outlined release of [Input]((uint64_t)&v434);
      unint64_t v414 = v314;
      uint64_t v133 = &v414;
      goto LABEL_87;
    }
    long long v345 = v343[0];
    v346[0] = v343[1];
    v346[1] = v343[2];
    uint64_t v347 = v344;
    Graph.moveEdge(from:to:)((uint64_t)&v350, &v345);
    swift_release();
    long long v382 = *v258;
    outlined release of String((uint64_t)&v382);
    swift_release();
    long long v380 = *v259;
    outlined release of String((uint64_t)&v380);
    ShaderGraphNode.out.getter((uint64_t)v331);
    specialized Sequence.first(where:)(v270, 0x72656C706D6173, 0xE700000000000000, v333);
    outlined init with take of MetalFunctionNode?((uint64_t)v333, (uint64_t)v338, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (!*((void *)&v338[0] + 1))
    {
      outlined init with take of NodePersonality(&v322, v413);
      long long v412 = v323;
      v291._char countAndFlagsBits = v250;
      v291._unint64_t object = v264;
      unint64_t v292 = (unint64_t)v265;
      uint64_t v293 = v266;
      uint64_t v294 = v267;
      char countAndFlagsBits = v268._countAndFlagsBits;
      uint64_t v296 = 0x72656C706D6173;
      unint64_t v297 = 0xE700000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v291);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v291, (uint64_t)&v298);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v310 = 0uLL;
      swift_allocError();
      *long long v239 = v298;
      long long v240 = v302;
      long long v242 = v299;
      long long v241 = v300;
      v239[3] = v301;
      v239[4] = v240;
      v239[1] = v242;
      v239[2] = v241;
      long long v243 = v306;
      long long v245 = v303;
      long long v244 = v304;
      v239[7] = v305;
      v239[8] = v243;
      v239[5] = v245;
      v239[6] = v244;
      long long v246 = v310;
      long long v248 = v307;
      long long v247 = v308;
      v239[11] = v309;
      v239[12] = v246;
      v239[9] = v248;
      v239[10] = v247;
      swift_bridgeObjectRetain();
      outlined retain of NodePersonality(v413);
      outlined retain of [Input]((uint64_t)&v412);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v284 + 8))(v288, v15);
      swift_release();
      long long v411 = *v256;
      outlined release of String((uint64_t)&v411);
      outlined release of NodePersonality(v413);
      swift_bridgeObjectRelease();
      outlined release of [Input]((uint64_t)&v412);
      swift_bridgeObjectRelease();
      swift_release();
      outlined init with take of NodePersonality(&v313, &v410);
      outlined release of NodePersonality(&v410);
      outlined release of [Input]((uint64_t)&v434);
      unint64_t v409 = v314;
      uint64_t v133 = &v409;
LABEL_87:
      outlined release of [Input]((uint64_t)v133);
      swift_release();
      outlined consume of NodePersonality(v18);
LABEL_93:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    long long v340 = v338[0];
    v341[0] = v338[1];
    v341[1] = v338[2];
    uint64_t v342 = v339;
    Graph.connect(_:to:)((uint64_t)v331, (unint64_t)&v340);
    swift_release();
    long long v383 = *v255;
    outlined release of String((uint64_t)&v383);
    swift_release();
    long long v408 = *v256;
    outlined release of String((uint64_t)&v408);
    ShaderGraphNode.out.getter((uint64_t)v334);
    ShaderGraphNode.out.getter((uint64_t)v336);
    uint64_t v287 = 0;
    Graph.moveEdges(from:to:)((uint64_t)v334, (uint64_t)v336);
    swift_release();
    v407[0] = *v253;
    outlined release of String((uint64_t)v407);
    swift_release();
    long long v406 = *v254;
    outlined release of String((uint64_t)&v406);
    outlined init with take of NodePersonality(&v322, &v405);
    outlined release of NodePersonality(&v405);
    swift_bridgeObjectRelease();
    uint64_t v404 = v323;
    outlined release of [Input]((uint64_t)&v404);
    swift_bridgeObjectRelease();
    swift_release();
    outlined init with take of NodePersonality(&v313, &v403);
    outlined release of NodePersonality(&v403);
    outlined release of [Input]((uint64_t)&v434);
    unint64_t v402 = v314;
    outlined release of [Input]((uint64_t)&v402);
    swift_release();
LABEL_3:
    outlined consume of NodePersonality(v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v17 = (void *)*((void *)&v298 + 1);
    unint64_t v18 = v298;
    uint64_t v20 = *((void *)&v299 + 1);
    unint64_t v19 = v299;
    uint64_t v21 = v300;
    int v22 = BYTE8(v300);
    if (!*((void *)&v298 + 1)) {
      return (*(uint64_t (**)(char *, uint64_t))(v284 + 8))(v288, v15);
    }
  }
  (*(void (**)(char *, uint64_t))(v284 + 8))(v288, v279);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined init with take of NodePersonality(&v322, &v433);
  outlined release of NodePersonality(&v433);
  swift_bridgeObjectRelease();
  unint64_t v432 = v323;
  outlined release of [Input]((uint64_t)&v432);
  swift_bridgeObjectRelease();
  swift_release();
  outlined init with take of NodePersonality(&v313, &v431);
  outlined release of NodePersonality(&v431);
  outlined release of [Input]((uint64_t)&v434);
  unint64_t v430 = v314;
  outlined release of [Input]((uint64_t)&v430);
  swift_release();
  outlined consume of NodePersonality(v278);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Graph.transformRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *))(v3 + 16))((char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = Sequence.filter(_:)();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = v4;
    for (uint64_t i = v4 + 40; ; i += 48)
    {
      unint64_t v8 = *(void *)(i - 8);
      uint64_t v7 = *(void *)i;
      uint64_t v9 = *(void *)(i + 8);
      char v10 = *(unsigned char *)(i + 32);
      v12[0] = v8;
      v12[1] = v7;
      _OWORD v12[2] = v9;
      long long v13 = *(_OWORD *)(i + 16);
      char v14 = v10;
      outlined copy of NodePersonality(v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #1 in Graph.transformRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)((uint64_t)v12);
      if (v1) {
        break;
      }
      outlined consume of NodePersonality(v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    outlined consume of NodePersonality(v8);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t *ShaderGraphNode.realityKitBackgroundBlurNodes.unsafeMutableAddressor()
{
  if (one-time initialization token for realityKitBackgroundBlurNodes != -1) {
    swift_once();
  }
  return &static ShaderGraphNode.realityKitBackgroundBlurNodes;
}

unint64_t specialized MutableCollection.swapAt(_:_:)(unint64_t result, unint64_t a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *(void **)v2;
      unint64_t v5 = *(void *)(*(void *)v2 + 16);
      if (v5 > result)
      {
        if (v5 > a2)
        {
          uint64_t v7 = &v4[2 * result + 4];
          uint64_t v8 = *v7;
          uint64_t v9 = v7[1];
          char v10 = &v4[2 * a2 + 4];
          uint64_t v11 = *v10;
          uint64_t v12 = v10[1];
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          unint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
            uint64_t v4 = (void *)result;
          }
          if (v4[2] > v3)
          {
            long long v13 = &v4[2 * v3 + 4];
            *long long v13 = v11;
            v13[1] = v12;
            swift_release();
            unint64_t result = swift_release();
            if (v4[2] > a2)
            {
              char v14 = &v4[2 * a2 + 4];
              *char v14 = v8;
              v14[1] = v9;
              swift_release();
              unint64_t result = swift_release();
              *(void *)uint64_t v2 = v4;
              return result;
            }
LABEL_15:
            __break(1u);
            return result;
          }
LABEL_14:
          __break(1u);
          goto LABEL_15;
        }
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (result != a2)
  {
    unint64_t v3 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *v2;
      unint64_t v5 = *(void *)(*v2 + 16);
      if (v5 > result)
      {
        if (v5 > a2)
        {
          uint64_t v20 = v2;
          uint64_t v7 = (uint64_t *)(v4 + 32 + 48 * result);
          uint64_t v8 = *v7;
          uint64_t v9 = v7[1];
          char v10 = v7[2];
          uint64_t v11 = v7[3];
          uint64_t v12 = v7[4];
          long long v13 = (uint64_t *)(v4 + 32 + 48 * a2);
          uint64_t v23 = *v13;
          Swift::String v24 = v7[5];
          uint64_t v26 = v13[1];
          Swift::Bool v25 = v13[2];
          uint64_t v15 = v13[4];
          char v14 = v13[5];
          int v22 = v13[3];
          swift_retain();
          uint64_t v21 = v15;
          long long v16 = v8;
          uint64_t v17 = v4;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          unint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
            uint64_t v17 = result;
          }
          if (*(void *)(v17 + 16) > v3)
          {
            unint64_t v18 = (void *)(v17 + 32 + 48 * v3);
            *unint64_t v18 = v23;
            v18[1] = v26;
            v18[2] = v25;
            v18[3] = v22;
            v18[4] = v21;
            v18[5] = v14;
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            unint64_t result = swift_release();
            if (*(void *)(v17 + 16) > a2)
            {
              unint64_t v19 = (void *)(v17 + 32 + 48 * a2);
              char *v19 = v16;
              v19[1] = v9;
              v19[2] = v10;
              v19[3] = v11;
              v19[4] = v12;
              v19[5] = v24;
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              unint64_t result = swift_release();
              *uint64_t v20 = v17;
              return result;
            }
LABEL_15:
            __break(1u);
            return result;
          }
LABEL_14:
          __break(1u);
          goto LABEL_15;
        }
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t specialized OrderedSet._regenerateHashTable()()
{
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

uint64_t specialized OrderedSet._regenerateHashTable()(uint64_t (*a1)(uint64_t, int64_t, void, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  if (*v1)
  {
    swift_beginAccess();
    uint64_t v5 = *(void *)(v3 + 24) & 0x3FLL;
    unint64_t v6 = *(void *)(v4 + 16);
    if (v5) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = *(void *)(v4 + 16);
  }
  if (v6 < 0x10)
  {
    uint64_t v7 = 0;
    goto LABEL_11;
  }
LABEL_7:
  int64_t v8 = specialized static _HashTable.scale(forCapacity:)(v6);
  if (v5 <= v8) {
    int64_t v9 = v8;
  }
  else {
    int64_t v9 = v5;
  }
  uint64_t v7 = a1(v4, v9, 0, v5);
LABEL_11:
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.insertConversionFromFloatColorToHalfColor(for:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = v1;
  if ((unint64_t)a1._rawValue >> 62) {
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = ((unint64_t)a1._rawValue & 0xC000000000000001) != 0
         ? (id)MEMORY[0x2611848A0](v6 - 4, a1._rawValue)
         : *((id *)a1._rawValue + v6);
      int64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      id v10 = v7;
      closure #1 in Graph.insertConversionFromFloatColorToHalfColor(for:)((uint64_t *)&v10, v3);
      if (v2)
      {
        swift_bridgeObjectRelease();

        return;
      }

      ++v6;
      if (v9 == v5) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
}

uint64_t specialized OrderedSet.init<A>(_:)(uint64_t a1)
{
  uint64_t v3 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  uint64_t v4 = specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)((uint64_t)&v10, a1, 0, 1, v3);
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = v10;
  if (v10 == v5) {
    return v4;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v5 < v10)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t result = specialized _copyCollectionToContiguousArray<A>(_:)(a1, v1, 0, (2 * v6) | 1);
    goto LABEL_9;
  }
  uint64_t v1 = a1 + 32;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v7 = swift_dynamicCastClass();
  if (!v7)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = MEMORY[0x263F8EE78];
  }
  uint64_t v8 = *(void *)(v7 + 16);
  swift_release();
  if (v8 != v6) {
    goto LABEL_14;
  }
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t result = MEMORY[0x263F8EE78];
  }
LABEL_9:
  uint64_t v11 = v4;
  uint64_t v12 = result;
  if (*(void *)(a1 + 16) >= v5)
  {
    swift_retain();
    specialized OrderedSet.append<A>(contentsOf:)(a1, v1, v6, (2 * v5) | 1);
    swift_bridgeObjectRelease();
    swift_release();
    return v11;
  }
  __break(1u);
  return result;
}

{
  return specialized OrderedSet.init<A>(_:)(a1, specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:), (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (void (*)(uint64_t, uint64_t, unint64_t, uint64_t))specialized OrderedSet.append<A>(contentsOf:));
}

{
  return specialized OrderedSet.init<A>(_:)(a1, specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:), (uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (void (*)(uint64_t, uint64_t, unint64_t, uint64_t))specialized OrderedSet.append<A>(contentsOf:));
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;

  uint64_t v3 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  uint64_t v4 = specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)(&v11, a1, 0, 1, v3);
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = v11;
  if (v11 == v5) {
    return (uint64_t)v4;
  }
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v5 < v11)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v9 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, v1, 0, (2 * v6) | 1);
    goto LABEL_9;
  }
  uint64_t v1 = a1 + 32;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  uint64_t v7 = swift_dynamicCastClass();
  if (!v7)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = MEMORY[0x263F8EE78];
  }
  uint64_t v8 = *(void *)(v7 + 16);
  swift_release();
  if (v8 != v6) {
    goto LABEL_14;
  }
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
  }
LABEL_9:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v12 = v4;
  long long v13 = v9;
  if (*(void *)(a1 + 16) >= v5)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    specialized OrderedSet.append<A>(contentsOf:)(a1, v1, v6, (2 * v5) | 1);
    swift_bridgeObjectRelease_n();
    swift_release();
    return (uint64_t)v12;
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet.init<A>(_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(BOOL, unint64_t, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, void, uint64_t), void (*a5)(uint64_t, uint64_t, unint64_t, uint64_t))
{
  uint64_t v10 = a2();
  uint64_t v11 = specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)((uint64_t)&v18, a1, 0, 1, v10, a3);
  unint64_t v12 = *(void *)(a1 + 16);
  unint64_t v13 = v18;
  if (v18 == v12) {
    return v11;
  }
  if ((v18 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v12 < v18)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    swift_release();
    uint64_t v16 = a4(a1, v5, 0, (2 * v13) | 1);
    goto LABEL_9;
  }
  uint64_t v5 = a1 + 32;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_retain_n();
  uint64_t v14 = swift_dynamicCastClass();
  if (!v14)
  {
    swift_release();
    uint64_t v14 = MEMORY[0x263F8EE78];
  }
  uint64_t v15 = *(void *)(v14 + 16);
  swift_release();
  if (v15 != v13) {
    goto LABEL_14;
  }
  uint64_t v16 = swift_dynamicCastClass();
  if (!v16)
  {
    swift_release();
    uint64_t v16 = MEMORY[0x263F8EE78];
  }
LABEL_9:
  uint64_t result = swift_release();
  uint64_t v19 = v11;
  uint64_t v20 = v16;
  if (*(void *)(a1 + 16) >= v12)
  {
    swift_retain();
    swift_retain();
    a5(a1, v5, v13, (2 * v12) | 1);
    swift_release_n();
    swift_release();
    return v19;
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet.init<A>(_:)(unint64_t a1)
{
  uint64_t v4 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)((uint64_t)&v34, a1, 0, 1, v4, (unint64_t *)type metadata accessor for SGEdge, (uint64_t (*)(void))type metadata accessor for SGEdge);
  uint64_t v6 = v5;
  unint64_t v7 = a1 >> 62;
  if (a1 >> 62)
  {
    if ((a1 & 0x8000000000000000) != 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v9 = v34;
    if (v34 == v8)
    {
      unint64_t v30 = swift_bridgeObjectRetain();
      specialized _copyCollectionToContiguousArray<A>(_:)(v30);
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    if ((v34 & 0x8000000000000000) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v31 < 0)
      {
        __break(1u);
        return result;
      }
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v10 >= v9) {
        goto LABEL_7;
      }
      goto LABEL_44;
    }
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v9 = v34;
  if (v34 == v8)
  {
    swift_bridgeObjectRetain();
LABEL_4:
    swift_bridgeObjectRelease();
    return v6;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v34 < 0) {
    goto LABEL_45;
  }
  if (v8 < v34)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_7:
  unint64_t v11 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0 && v9)
  {
    type metadata accessor for SGEdge();
    Swift::Int v12 = 0;
    do
    {
      Swift::Int v13 = v12 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v12);
      Swift::Int v12 = v13;
    }
    while (v9 != v13);
  }
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.subscript.getter();
    uint64_t v14 = v15;
    uint64_t v2 = v16;
    unint64_t v1 = v17;
    swift_bridgeObjectRelease();
    if ((v1 & 1) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v14 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    unint64_t v1 = (2 * v9) | 1;
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
  }
  uint64_t v32 = v14;
  unint64_t v33 = a1 & 0xC000000000000001;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v19 = swift_dynamicCastClass();
  if (!v19)
  {
    swift_unknownObjectRelease();
    uint64_t v19 = MEMORY[0x263F8EE78];
  }
  uint64_t v20 = *(void *)(v19 + 16);
  swift_release();
  if (__OFSUB__(v1 >> 1, v2)) {
    goto LABEL_49;
  }
  if (v20 != (v1 >> 1) - v2) {
    goto LABEL_50;
  }
  uint64_t v18 = swift_dynamicCastClass();
  unint64_t v11 = a1 & 0xC000000000000001;
  if (!v18)
  {
    swift_unknownObjectRelease();
    uint64_t v18 = MEMORY[0x263F8EE78];
  }
  while (1)
  {
    swift_unknownObjectRelease();
    uint64_t v35 = v6;
    uint64_t v36 = v18;
    if (v8 < v9)
    {
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v7)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
    }
    if (v10 < v8) {
      goto LABEL_47;
    }
    if (!v11) {
      goto LABEL_31;
    }
    if (v9 < v8) {
      break;
    }
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    swift_unknownObjectRelease();
    uint64_t v14 = v32;
    unint64_t v11 = v33;
LABEL_15:
    uint64_t v18 = specialized _copyCollectionToContiguousArray<A>(_:)(v10, v14, v2, v1);
  }
  type metadata accessor for SGEdge();
  Swift::Int v21 = v9;
  do
  {
    Swift::Int v22 = v21 + 1;
    _ArrayBuffer._typeCheckSlowPath(_:)(v21);
    Swift::Int v21 = v22;
  }
  while (v8 != v22);
LABEL_31:
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.subscript.getter();
    uint64_t v24 = v26;
    uint64_t v9 = v27;
    unint64_t v25 = v28;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = a1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v24 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    unint64_t v25 = (2 * v8) | 1;
    swift_bridgeObjectRetain();
  }
  specialized OrderedSet.append<A>(contentsOf:)(v23, v24, v9, v25);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v35;
}

{
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v4 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)((uint64_t)&v34, a1, 0, 1, v4, (unint64_t *)type metadata accessor for SGNode, (uint64_t (*)(void))type metadata accessor for SGNode);
  uint64_t v6 = v5;
  unint64_t v7 = a1 >> 62;
  if (a1 >> 62)
  {
    if ((a1 & 0x8000000000000000) != 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v9 = v34;
    if (v34 == v8)
    {
      unint64_t v30 = swift_bridgeObjectRetain();
      specialized _copyCollectionToContiguousArray<A>(_:)(v30);
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    if ((v34 & 0x8000000000000000) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v31 < 0)
      {
        __break(1u);
        return result;
      }
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v10 >= v9) {
        goto LABEL_7;
      }
      goto LABEL_44;
    }
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v9 = v34;
  if (v34 == v8)
  {
    swift_bridgeObjectRetain();
LABEL_4:
    swift_bridgeObjectRelease();
    return v6;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v34 < 0) {
    goto LABEL_45;
  }
  if (v8 < v34)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_7:
  unint64_t v11 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0 && v9)
  {
    type metadata accessor for SGNode();
    Swift::Int v12 = 0;
    do
    {
      Swift::Int v13 = v12 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v12);
      Swift::Int v12 = v13;
    }
    while (v9 != v13);
  }
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.subscript.getter();
    uint64_t v14 = v15;
    uint64_t v2 = v16;
    unint64_t v1 = v17;
    swift_bridgeObjectRelease();
    if ((v1 & 1) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v14 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    unint64_t v1 = (2 * v9) | 1;
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
  }
  uint64_t v32 = v14;
  unint64_t v33 = a1 & 0xC000000000000001;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v19 = swift_dynamicCastClass();
  if (!v19)
  {
    swift_unknownObjectRelease();
    uint64_t v19 = MEMORY[0x263F8EE78];
  }
  uint64_t v20 = *(void *)(v19 + 16);
  swift_release();
  if (__OFSUB__(v1 >> 1, v2)) {
    goto LABEL_49;
  }
  if (v20 != (v1 >> 1) - v2) {
    goto LABEL_50;
  }
  uint64_t v18 = swift_dynamicCastClass();
  unint64_t v11 = a1 & 0xC000000000000001;
  if (!v18)
  {
    swift_unknownObjectRelease();
    uint64_t v18 = MEMORY[0x263F8EE78];
  }
  while (1)
  {
    swift_unknownObjectRelease();
    uint64_t v35 = v6;
    uint64_t v36 = v18;
    if (v8 < v9)
    {
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v7)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
    }
    if (v10 < v8) {
      goto LABEL_47;
    }
    if (!v11) {
      goto LABEL_31;
    }
    if (v9 < v8) {
      break;
    }
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    swift_unknownObjectRelease();
    uint64_t v14 = v32;
    unint64_t v11 = v33;
LABEL_15:
    uint64_t v18 = specialized _copyCollectionToContiguousArray<A>(_:)(v10, v14, v2, v1);
  }
  type metadata accessor for SGNode();
  Swift::Int v21 = v9;
  do
  {
    Swift::Int v22 = v21 + 1;
    _ArrayBuffer._typeCheckSlowPath(_:)(v21);
    Swift::Int v21 = v22;
  }
  while (v8 != v22);
LABEL_31:
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.subscript.getter();
    uint64_t v24 = v26;
    uint64_t v9 = v27;
    unint64_t v25 = v28;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = a1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v24 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    unint64_t v25 = (2 * v8) | 1;
    swift_bridgeObjectRetain();
  }
  specialized OrderedSet.append<A>(contentsOf:)(v23, v24, v9, v25);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v35;
}

uint64_t specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)(uint64_t result, uint64_t a2, int64_t a3, char a4, uint64_t a5)
{
  unint64_t v6 = *(void *)(a2 + 16);
  unint64_t v33 = (void *)result;
  if (v6 < 0x10)
  {
    int64_t v9 = 0;
  }
  else
  {
    double v7 = ceil((double)(uint64_t)v6 / 0.75);
    if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (v7 <= -9.22337204e18)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    if (v7 >= 9.22337204e18)
    {
LABEL_58:
      __break(1u);
      return result;
    }
    if ((uint64_t)(v6 + 1) > (uint64_t)v7) {
      uint64_t v8 = v6 + 1;
    }
    else {
      uint64_t v8 = (uint64_t)v7;
    }
    int64_t v9 = 64 - __clz(v8 - 1);
  }
  if (v9 <= a3) {
    int64_t v10 = a3;
  }
  else {
    int64_t v10 = v9;
  }
  if ((a4 & 1) == 0) {
    int64_t v9 = v10;
  }
  if (v9 <= a5) {
    unint64_t v11 = a5;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v11 > 4)
  {
    uint64_t v31 = specialized _HashTable.init(scale:reservedScale:)(v11, a5);
    specialized _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)(&v43, a2, (uint64_t *)(v31 + 16), v31 + 32);
    *unint64_t v33 = v43;
    return v31;
  }
  if (v6 < 2) {
    goto LABEL_53;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0, MEMORY[0x263F8EE78]);
  Swift::Int v12 = (void *)result;
  uint64_t v13 = 0;
  unint64_t v32 = v6;
  do
  {
    if (v13 == v6)
    {
      __break(1u);
      goto LABEL_56;
    }
    uint64_t v14 = a2 + 32 + 56 * v13;
    uint64_t v16 = *(void *)v14;
    uint64_t v15 = *(void *)(v14 + 8);
    uint64_t v39 = *(void *)(v14 + 16);
    uint64_t v40 = *(void *)(v14 + 24);
    char v38 = *(unsigned char *)(v14 + 40);
    uint64_t v36 = *(void *)(v14 + 32);
    uint64_t v37 = *(void *)(v14 + 48);
    uint64_t v17 = v12[2];
    if (v17)
    {
      uint64_t v35 = v13;
      swift_bridgeObjectRetain_n();
      uint64_t v42 = v15;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v34 = v12;
      uint64_t v18 = v12 + 10;
      while (1)
      {
        if (*(v18 - 6) != v16) {
          goto LABEL_25;
        }
        uint64_t v19 = v16;
        uint64_t v20 = *(v18 - 4);
        uint64_t v21 = *(v18 - 3);
        uint64_t v41 = *(v18 - 2);
        char v22 = *((unsigned char *)v18 - 8);
        uint64_t v23 = *v18;
        uint64_t v24 = *(uint64_t (**)(uint64_t))(*(void *)*(v18 - 5) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v24(v42) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v16 = v19;
          goto LABEL_25;
        }
        if (v20 == v39 && v21 == v40)
        {
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v16 = v19;
          if ((v22 & 1) == 0) {
            goto LABEL_39;
          }
        }
        else
        {
          char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v16 = v19;
          if ((v26 & 1) == 0) {
            goto LABEL_25;
          }
          if ((v22 & 1) == 0)
          {
LABEL_39:
            if ((v38 & 1) == 0 && v41 == v36 && v23 == v37) {
              goto LABEL_52;
            }
            goto LABEL_25;
          }
        }
        char v27 = v38;
        if (v23 != v37) {
          char v27 = 0;
        }
        if (v27)
        {
LABEL_52:
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease_n();
          uint64_t v31 = 0;
          *unint64_t v33 = v35;
          return v31;
        }
LABEL_25:
        v18 += 7;
        if (!--v17)
        {
          Swift::Int v12 = v34;
          swift_bridgeObjectRelease_n();
          unint64_t v6 = v32;
          uint64_t v13 = v35;
          uint64_t v15 = v42;
          goto LABEL_45;
        }
      }
    }
    swift_retain();
    swift_bridgeObjectRetain();
LABEL_45:
    swift_retain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::Int v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    }
    unint64_t v29 = v12[2];
    unint64_t v28 = v12[3];
    if (v29 >= v28 >> 1) {
      Swift::Int v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v12);
    }
    ++v13;
    _OWORD v12[2] = v29 + 1;
    unint64_t v30 = &v12[7 * v29];
    v30[4] = v16;
    v30[5] = v15;
    v30[6] = v39;
    v30[7] = v40;
    v30[8] = v36;
    *((unsigned char *)v30 + 72) = v38;
    v30[10] = v37;
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
  }
  while (v13 != v6);
  swift_bridgeObjectRelease();
LABEL_53:
  uint64_t v31 = 0;
  *unint64_t v33 = v6;
  return v31;
}

uint64_t specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)(uint64_t result, uint64_t a2, int64_t a3, char a4, uint64_t a5, uint64_t (*a6)(BOOL, unint64_t, uint64_t, uint64_t))
{
  unint64_t v7 = *(void *)(a2 + 16);
  uint64_t v35 = (void *)result;
  if (v7 < 0x10)
  {
    int64_t v10 = 0;
  }
  else
  {
    double v8 = ceil((double)(uint64_t)v7 / 0.75);
    if ((~*(void *)&v8 & 0x7FF0000000000000) == 0)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (v8 <= -9.22337204e18)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    if (v8 >= 9.22337204e18)
    {
LABEL_58:
      __break(1u);
      return result;
    }
    if ((uint64_t)(v7 + 1) > (uint64_t)v8) {
      uint64_t v9 = v7 + 1;
    }
    else {
      uint64_t v9 = (uint64_t)v8;
    }
    int64_t v10 = 64 - __clz(v9 - 1);
  }
  if (v10 <= a3) {
    int64_t v11 = a3;
  }
  else {
    int64_t v11 = v10;
  }
  if ((a4 & 1) == 0) {
    int64_t v10 = v11;
  }
  if (v10 <= a5) {
    unint64_t v12 = a5;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12 > 4)
  {
    uint64_t v32 = specialized _HashTable.init(scale:reservedScale:)(v12, a5);
    specialized _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)(&v45, a2, (uint64_t *)(v32 + 16), v32 + 32);
    *uint64_t v35 = v45;
    return v32;
  }
  if (v7 < 2) {
    goto LABEL_53;
  }
  uint64_t result = a6(0, v7, 0, MEMORY[0x263F8EE78]);
  uint64_t v13 = result;
  uint64_t v14 = 0;
  unint64_t v34 = v7;
  do
  {
    if (v14 == v7)
    {
      __break(1u);
      goto LABEL_56;
    }
    uint64_t v15 = a2 + 32 + 56 * v14;
    uint64_t v17 = *(void *)v15;
    uint64_t v16 = *(void *)(v15 + 8);
    uint64_t v41 = *(void *)(v15 + 16);
    uint64_t v42 = *(void *)(v15 + 24);
    char v40 = *(unsigned char *)(v15 + 40);
    uint64_t v38 = *(void *)(v15 + 32);
    uint64_t v39 = *(void *)(v15 + 48);
    uint64_t v18 = *(void *)(v13 + 16);
    if (v18)
    {
      uint64_t v37 = v14;
      uint64_t v44 = *(void *)(v15 + 8);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v36 = v13;
      uint64_t v19 = (void *)(v13 + 80);
      while (1)
      {
        if (*(v19 - 6) != v17) {
          goto LABEL_25;
        }
        uint64_t v20 = v17;
        uint64_t v21 = *(v19 - 4);
        uint64_t v22 = *(v19 - 3);
        uint64_t v43 = *(v19 - 2);
        char v23 = *((unsigned char *)v19 - 8);
        uint64_t v24 = *v19;
        unint64_t v25 = *(uint64_t (**)(uint64_t))(*(void *)*(v19 - 5) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v25(v44) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v17 = v20;
          goto LABEL_25;
        }
        if (v21 == v41 && v22 == v42)
        {
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v17 = v20;
          if ((v23 & 1) == 0) {
            goto LABEL_39;
          }
        }
        else
        {
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v17 = v20;
          if ((v27 & 1) == 0) {
            goto LABEL_25;
          }
          if ((v23 & 1) == 0)
          {
LABEL_39:
            if ((v40 & 1) == 0 && v43 == v38 && v24 == v39) {
              goto LABEL_52;
            }
            goto LABEL_25;
          }
        }
        char v28 = v40;
        if (v24 != v39) {
          char v28 = 0;
        }
        if (v28)
        {
LABEL_52:
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease_n();
          uint64_t v32 = 0;
          *uint64_t v35 = v37;
          return v32;
        }
LABEL_25:
        v19 += 7;
        if (!--v18)
        {
          uint64_t v13 = v36;
          swift_bridgeObjectRelease();
          unint64_t v7 = v34;
          uint64_t v16 = v44;
          goto LABEL_45;
        }
      }
    }
    swift_retain();
    swift_bridgeObjectRetain();
LABEL_45:
    swift_retain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = a6(0, *(void *)(v13 + 16) + 1, 1, v13);
    }
    unint64_t v30 = *(void *)(v13 + 16);
    unint64_t v29 = *(void *)(v13 + 24);
    if (v30 >= v29 >> 1) {
      uint64_t v13 = a6(v29 > 1, v30 + 1, 1, v13);
    }
    ++v14;
    *(void *)(v13 + 16) = v30 + 1;
    uint64_t v31 = v13 + 56 * v30;
    *(void *)(v31 + 32) = v17;
    *(void *)(v31 + 40) = v16;
    *(void *)(v31 + 48) = v41;
    *(void *)(v31 + 56) = v42;
    *(void *)(v31 + 64) = v38;
    *(unsigned char *)(v31 + 72) = v40;
    *(void *)(v31 + 80) = v39;
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
  }
  while (v14 != v7);
  swift_bridgeObjectRelease();
LABEL_53:
  uint64_t v32 = 0;
  *uint64_t v35 = v7;
  return v32;
}

unint64_t *specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)(unint64_t *result, uint64_t a2, int64_t a3, char a4, uint64_t a5)
{
  unint64_t v6 = result;
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7 < 0x10)
  {
    int64_t v10 = 0;
LABEL_10:
    if (v10 <= a3) {
      int64_t v11 = a3;
    }
    else {
      int64_t v11 = v10;
    }
    if ((a4 & 1) == 0) {
      int64_t v10 = v11;
    }
    if (v10 <= a5) {
      unint64_t v12 = a5;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12 > 4)
    {
      uint64_t v13 = specialized _HashTable.init(scale:reservedScale:)(v12, a5);
      specialized _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)((uint64_t *)&v21, a2, (uint64_t *)(v13 + 16), v13 + 32);
      *unint64_t v6 = v21;
      return (unint64_t *)v13;
    }
    if (v7 < 2)
    {
LABEL_20:
      uint64_t v13 = 0;
      *unint64_t v6 = v7;
      return (unint64_t *)v13;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a2 + 16), 0, MEMORY[0x263F8EE78]);
    uint64_t v14 = result;
    unint64_t v15 = 0;
    while (v15 != v7)
    {
      unint64_t v16 = *(void *)(a2 + 32 + 8 * v15);
      unint64_t v17 = v14[2];
      if (v17)
      {
        if (v14[4] == v16) {
          goto LABEL_37;
        }
        if (v17 != 1)
        {
          if (v14[5] == v16)
          {
LABEL_37:
            swift_bridgeObjectRelease();
            uint64_t v13 = 0;
            *unint64_t v6 = v15;
            return (unint64_t *)v13;
          }
          if (v17 != 2)
          {
            uint64_t v18 = 6;
            while (1)
            {
              uint64_t v19 = v18 - 3;
              if (__OFADD__(v18 - 4, 1)) {
                break;
              }
              if (v14[v18] == v16) {
                goto LABEL_37;
              }
              ++v18;
              if (v19 == v17) {
                goto LABEL_33;
              }
            }
            __break(1u);
            break;
          }
        }
      }
LABEL_33:
      unint64_t v20 = v14[3];
      if (v17 >= v20 >> 1)
      {
        uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v17 + 1, 1, v14);
        uint64_t v14 = result;
      }
      ++v15;
      v14[2] = v17 + 1;
      v14[v17 + 4] = v16;
      if (v15 == v7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    __break(1u);
    goto LABEL_41;
  }
  double v8 = ceil((double)(uint64_t)v7 / 0.75);
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v8 < 9.22337204e18)
  {
    if ((uint64_t)(v7 + 1) > (uint64_t)v8) {
      uint64_t v9 = v7 + 1;
    }
    else {
      uint64_t v9 = (uint64_t)v8;
    }
    int64_t v10 = 64 - __clz(v9 - 1);
    goto LABEL_10;
  }
LABEL_43:
  __break(1u);
  return result;
}

void specialized static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)(uint64_t a1, unint64_t a2, unint64_t a3, char a4, uint64_t a5, unint64_t *a6, uint64_t (*a7)(void))
{
  LOBYTE(v9) = a4;
  uint64_t v13 = a2 >> 62;
  if (a2 >> 62)
  {
LABEL_62:
    swift_bridgeObjectRetain();
    int64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    int64_t v14 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  int64_t v15 = specialized static _HashTable.scale(forCapacity:)(v14);
  if (v9) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = (id *)a3;
  }
  if ((uint64_t)v16 <= v15) {
    unint64_t v16 = (id *)v15;
  }
  if ((uint64_t)v16 <= a5) {
    uint64_t v17 = a5;
  }
  else {
    uint64_t v17 = (uint64_t)v16;
  }
  if (v17 > 4)
  {
    uint64_t v19 = specialized _HashTable.init(scale:reservedScale:)(v17, a5);
    specialized _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)(&v34, a2, (Swift::Int *)(v19 + 16), v19 + 32, (void (*)(void))a6);
    *(void *)a1 = v34;
    return;
  }
  if (v14 < 2)
  {
    if (!v13)
    {
      uint64_t v18 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_57:
      *(void *)a1 = v18;
      return;
    }
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
LABEL_56:
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  unint64_t v34 = MEMORY[0x263F8EE78];
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v14, 0);
  a6 = &v34;
  specialized Array._endMutation()();
  if (v13)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v20 = a7;
    if (v18 < 0) {
      goto LABEL_64;
    }
  }
  else
  {
    uint64_t v18 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t v20 = a7;
  }
  if (!v18) {
    goto LABEL_56;
  }
  a5 = 0;
  uint64_t v32 = v18;
  uint64_t v31 = (void *)a1;
  while (1)
  {
    if (a5 == v18) {
      goto LABEL_60;
    }
    if ((a2 & 0xC000000000000001) != 0)
    {
      id v21 = (id)MEMORY[0x2611848A0](a5, a2);
      goto LABEL_27;
    }
    if ((unint64_t)a5 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      break;
    }
    id v21 = *(id *)(a2 + 32 + 8 * a5);
LABEL_27:
    uint64_t v9 = v21;
    a3 = v34;
    if (v34 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v22)
      {
LABEL_50:
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v22 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v22) {
        goto LABEL_50;
      }
    }
    uint64_t v13 = a3 & 0xC000000000000001;
    if ((a3 & 0xC000000000000001) != 0) {
      id v23 = (id)MEMORY[0x2611848A0](0, a3);
    }
    else {
      id v23 = *(id *)(a3 + 32);
    }
    uint64_t v24 = v23;
    a6 = (unint64_t *)v20(0);
    char v25 = static NSObject.== infix(_:_:)();

    if (v25)
    {
LABEL_58:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *uint64_t v31 = a5;
      return;
    }
    if (v22 != 1)
    {
      if (v13)
      {
        MEMORY[0x2611848A0](1, a3);
        char v26 = static NSObject.== infix(_:_:)();
        swift_unknownObjectRelease();
        if (v26) {
          goto LABEL_58;
        }
        if (v22 != 2)
        {
          a1 = 2;
          while (1)
          {
            MEMORY[0x2611848A0](a1, a3);
            uint64_t v27 = a1 + 1;
            if (__OFADD__(a1, 1)) {
              break;
            }
            uint64_t v13 = static NSObject.== infix(_:_:)();
            swift_unknownObjectRelease();
            if (v13) {
              goto LABEL_58;
            }
            ++a1;
            if (v27 == v22) {
              goto LABEL_48;
            }
          }
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
      }
      else
      {
        id v28 = *(id *)(a3 + 40);
        a1 = static NSObject.== infix(_:_:)();

        if (a1) {
          goto LABEL_58;
        }
        if (v22 != 2)
        {
          uint64_t v13 = 6;
          while (1)
          {
            uint64_t v29 = v13 - 3;
            if (__OFADD__(v13 - 4, 1)) {
              goto LABEL_61;
            }
            id v30 = *(id *)(a3 + 8 * v13);
            a1 = static NSObject.== infix(_:_:)();

            if (a1) {
              goto LABEL_58;
            }
            ++v13;
            if (v29 == v22)
            {
LABEL_48:
              swift_bridgeObjectRelease();
              a1 = (uint64_t)v31;
              unint64_t v20 = a7;
              goto LABEL_51;
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    a1 = (uint64_t)v31;
LABEL_51:
    a3 = v9;
    MEMORY[0x261184120]();
    uint64_t v9 = *(void **)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((unint64_t)v9 >= *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    ++a5;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    a6 = &v34;
    specialized Array._endMutation()();

    uint64_t v18 = v32;
    if (a5 == v32) {
      goto LABEL_56;
    }
  }
  __break(1u);
LABEL_64:
  __break(1u);
}

Swift::Int specialized _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  Hasher.init(_seed:)();
  Swift::UInt v9 = *(void *)a1;
  Hasher._combine(_:)(*(void *)a1);
  uint64_t v10 = *(void *)(a1 + 8);
  int64_t v11 = *(void (**)(void *))(*(void *)v10 + 120);
  swift_retain();
  v11(v46);
  uint64_t v44 = v10;
  swift_release();
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  uint64_t v43 = v12;
  String.hash(into:)();
  uint64_t v42 = v13;
  swift_bridgeObjectRelease();
  Swift::UInt v14 = *(void *)(a1 + 32);
  int v40 = *(unsigned __int8 *)(a1 + 40);
  if (v40 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  Swift::UInt v41 = *(void *)(a1 + 48);
  Hasher._combine(_:)(v41);
  Swift::Int result = Hasher._finalize()();
  uint64_t v16 = 1 << *a4;
  unint64_t v17 = v16 - 1;
  if (__OFSUB__(v16, 1))
  {
    __break(1u);
  }
  else
  {
    Swift::Int v18 = v17 & result;
    uint64_t v19 = _HashTable.UnsafeHandle._startIterator(bucket:)(v17 & result, a4, a5);
    v46[0] = a4;
    v46[1] = a5;
    v46[2] = v18;
    uint64_t v47 = v19;
    uint64_t v48 = v20;
    uint64_t v49 = v21;
    char v50 = 0;
    if (v19)
    {
      Swift::UInt v39 = v14;
      unint64_t v22 = (v19 ^ v17) + ((uint64_t)a4[1] >> 6);
      if (v22 >= v17) {
        unint64_t v23 = v17;
      }
      else {
        unint64_t v23 = 0;
      }
      for (unint64_t i = v22 - v23; ; unint64_t i = v37 - v38)
      {
        uint64_t v25 = a2 + 56 * i;
        if (*(void *)v25 != v9) {
          goto LABEL_30;
        }
        uint64_t v26 = *(void *)(v25 + 16);
        uint64_t v27 = *(void *)(v25 + 24);
        uint64_t v45 = *(void *)(v25 + 32);
        char v28 = *(unsigned char *)(v25 + 40);
        uint64_t v29 = *(void *)(v25 + 48);
        id v30 = *(uint64_t (**)(uint64_t))(**(void **)(v25 + 8) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v30(v44) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_30;
        }
        if (v26 == v43 && v27 == v42)
        {
          swift_bridgeObjectRelease();
          swift_release();
          if (v28) {
            goto LABEL_18;
          }
        }
        else
        {
          char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_release();
          if ((v32 & 1) == 0) {
            goto LABEL_30;
          }
          if (v28)
          {
LABEL_18:
            char v33 = v40;
            if (v29 != v41) {
              char v33 = 0;
            }
            if (v33) {
              return i;
            }
            goto LABEL_30;
          }
        }
        int v34 = v40 ^ 1;
        if (v45 != v39) {
          int v34 = 0;
        }
        if (v34 == 1 && v29 == v41) {
          return i;
        }
LABEL_30:
        _HashTable.BucketIterator.advance()();
        if (!v47) {
          return 0;
        }
        uint64_t v36 = -1 << *(void *)v46[0];
        unint64_t v37 = (v36 ^ ~v47) + (*(uint64_t *)(v46[0] + 8) >> 6);
        if (v37 >= ~v36) {
          uint64_t v38 = ~v36;
        }
        else {
          uint64_t v38 = 0;
        }
      }
    }
    return 0;
  }
  return result;
}

{
  Swift::UInt v9;
  uint64_t v10;
  void (*v11)(void *);
  uint64_t v12;
  uint64_t v13;
  Swift::UInt v14;
  Swift::Int result;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  char v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  Swift::UInt v38;
  Swift::UInt v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void v45[3];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  Hasher.init(_seed:)();
  Swift::UInt v9 = *(void *)a1;
  Hasher._combine(_:)(*(void *)a1);
  uint64_t v10 = *(void *)(a1 + 8);
  int64_t v11 = *(void (**)(void *))(*(void *)v10 + 120);
  swift_retain();
  v11(v45);
  uint64_t v44 = v10;
  swift_release();
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  uint64_t v42 = v12;
  String.hash(into:)();
  Swift::UInt v41 = v13;
  swift_bridgeObjectRelease();
  Swift::UInt v14 = *(void *)(a1 + 32);
  int v40 = *(unsigned __int8 *)(a1 + 40);
  if (v40 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  Swift::UInt v39 = *(void *)(a1 + 48);
  Hasher._combine(_:)(v39);
  Swift::Int result = Hasher._finalize()();
  uint64_t v16 = 1 << *a4;
  unint64_t v17 = v16 - 1;
  if (__OFSUB__(v16, 1))
  {
    __break(1u);
  }
  else
  {
    Swift::Int v18 = v17 & result;
    uint64_t v19 = _HashTable.UnsafeHandle._startIterator(bucket:)(v17 & result, a4, a5);
    v45[0] = a4;
    v45[1] = a5;
    v45[2] = v18;
    unint64_t v46 = v19;
    uint64_t v47 = v20;
    uint64_t v48 = v21;
    uint64_t v49 = 0;
    if (v19)
    {
      uint64_t v38 = v14;
      unint64_t v22 = (v19 ^ v17) + ((uint64_t)a4[1] >> 6);
      if (v22 >= v17) {
        unint64_t v23 = v17;
      }
      else {
        unint64_t v23 = 0;
      }
      for (unint64_t i = v22 - v23; ; unint64_t i = v35 - v36)
      {
        uint64_t v25 = a2 + 56 * i;
        if (*(void *)v25 != v9) {
          goto LABEL_23;
        }
        uint64_t v26 = *(void *)(v25 + 16);
        uint64_t v27 = *(void *)(v25 + 24);
        uint64_t v43 = *(void *)(v25 + 32);
        char v28 = *(unsigned char *)(v25 + 40);
        uint64_t v29 = *(void *)(v25 + 48);
        id v30 = *(uint64_t (**)(uint64_t))(**(void **)(v25 + 8) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v30(v44) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_23;
        }
        if (v26 == v42 && v27 == v41)
        {
          swift_bridgeObjectRelease();
          swift_release();
          if ((v28 & 1) == 0) {
            goto LABEL_29;
          }
        }
        else
        {
          char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_release();
          if ((v32 & 1) == 0) {
            goto LABEL_23;
          }
          if ((v28 & 1) == 0)
          {
LABEL_29:
            if ((v40 & 1) == 0 && v43 == v38 && v29 == v39) {
              return i;
            }
            goto LABEL_23;
          }
        }
        char v33 = v40;
        if (v29 != v39) {
          char v33 = 0;
        }
        if (v33) {
          return i;
        }
LABEL_23:
        _HashTable.BucketIterator.advance()();
        if (!v46) {
          return 0;
        }
        int v34 = -1 << *(void *)v45[0];
        uint64_t v35 = (v34 ^ ~v46) + (*(uint64_t *)(v45[0] + 8) >> 6);
        if (v35 >= ~v34) {
          uint64_t v36 = ~v34;
        }
        else {
          uint64_t v36 = 0;
        }
      }
    }
    return 0;
  }
  return result;
}

{
  uint64_t v9;
  void *v10;
  id v11;
  Swift::Int result;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t i;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30[8];
  void *v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  Hasher.init(_seed:)();
  Swift::UInt v9 = MEMORY[0x261185960](a1);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    Hasher._combine(_:)(1u);
    int64_t v11 = v10;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int result = Hasher._finalize()();
  uint64_t v13 = 1 << *a4;
  Swift::UInt v14 = v13 - 1;
  if (__OFSUB__(v13, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = v14 & result;
  uint64_t v16 = _HashTable.UnsafeHandle._startIterator(bucket:)(v14 & result, a4, a5);
  uint64_t v31 = a4;
  char v32 = a5;
  char v33 = v15;
  int v34 = v16;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  unint64_t v37 = 0;
  if (!v16) {
    return 0;
  }
  uint64_t v19 = (v16 ^ v14) + ((uint64_t)a4[1] >> 6);
  if (v19 >= v14) {
    uint64_t v20 = v14;
  }
  else {
    uint64_t v20 = 0;
  }
  for (unint64_t i = v19 - v20; ; unint64_t i = v28 - v29)
  {
    outlined init with copy of WeakBox<SGEdge>(a2 + 8 * i, (uint64_t)v30);
    unint64_t v22 = (void *)MEMORY[0x261185960](v30);
    unint64_t v23 = MEMORY[0x261185960](a1);
    uint64_t v24 = (void *)v23;
    if (!v22) {
      break;
    }
    if (!v23)
    {
      uint64_t v24 = v22;
      goto LABEL_17;
    }
    type metadata accessor for SGEdge();
    uint64_t v25 = v22;
    uint64_t v26 = static NSObject.== infix(_:_:)();

    if (v26) {
      goto LABEL_25;
    }
LABEL_18:
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
    _HashTable.BucketIterator.advance()();
    if (!v34) {
      return 0;
    }
    uint64_t v27 = -1 << *v31;
    char v28 = (v27 ^ ~v34) + ((uint64_t)v31[1] >> 6);
    if (v28 >= ~v27) {
      uint64_t v29 = ~v27;
    }
    else {
      uint64_t v29 = 0;
    }
  }
  if (v23)
  {
LABEL_17:

    goto LABEL_18;
  }
LABEL_25:
  outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  return i;
}

{
  Swift::Int result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int result = Hasher._finalize()();
  int64_t v11 = 1 << *a4;
  uint64_t v12 = v11 - 1;
  if (__OFSUB__(v11, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = _HashTable.UnsafeHandle._startIterator(bucket:)(v12 & result, a4, a5);
    uint64_t v24 = a4;
    uint64_t v25 = v13;
    if (!v13) {
      return 0;
    }
    Swift::UInt v14 = (v13 ^ v12) + ((uint64_t)a4[1] >> 6);
    if (v14 >= v12) {
      int64_t v15 = v12;
    }
    else {
      int64_t v15 = 0;
    }
    uint64_t v16 = v14 - v15;
    unint64_t v17 = *(void *)(a3 + 16);
    if (v14 - v15 >= v17)
    {
LABEL_18:
      __break(1u);
    }
    else
    {
      Swift::Int v18 = a3 + 32;
      while (1)
      {
        uint64_t v19 = (void *)(v18 + 16 * v16);
        uint64_t v20 = *v19 == a1 && v19[1] == a2;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        _HashTable.BucketIterator.advance()();
        if (!v25) {
          return 0;
        }
        uint64_t v21 = -1 << *v24;
        unint64_t v22 = (v21 ^ ~v25) + ((uint64_t)v24[1] >> 6);
        if (v22 >= ~v21) {
          unint64_t v23 = ~v21;
        }
        else {
          unint64_t v23 = 0;
        }
        uint64_t v16 = v22 - v23;
        if (v22 - v23 >= v17) {
          goto LABEL_18;
        }
      }
    }
    return v16;
  }
  return result;
}

Swift::Int specialized _HashTable.UnsafeHandle._find<A>(_:in:)(Swift::UInt a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int result = Hasher._finalize()();
  uint64_t v10 = 1 << *a4;
  unint64_t v11 = v10 - 1;
  if (__OFSUB__(v10, 1))
  {
    __break(1u);
  }
  else
  {
    Swift::Int result = _HashTable.UnsafeHandle._startIterator(bucket:)(v11 & result, a4, a5);
    Swift::Int v17 = result;
    if (result)
    {
      unint64_t v12 = (result ^ v11) + ((uint64_t)a4[1] >> 6);
      unint64_t v13 = v12 >= v11 ? v11 : 0;
      Swift::Int result = v12 - v13;
      if (*(void *)(a2 + 8 * (v12 - v13)) != a1)
      {
        while (1)
        {
          _HashTable.BucketIterator.advance()();
          if (!v17) {
            break;
          }
          uint64_t v14 = -1 << *a4;
          unint64_t v15 = (v14 ^ ~v17) + ((uint64_t)a4[1] >> 6);
          if (v15 >= ~v14) {
            uint64_t v16 = ~v14;
          }
          else {
            uint64_t v16 = 0;
          }
          Swift::Int result = v15 - v16;
          if (*(void *)(a2 + 8 * (v15 - v16)) == a1) {
            return result;
          }
        }
        return 0;
      }
    }
  }
  return result;
}

Swift::Int specialized _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int result = Hasher._finalize()();
  uint64_t v12 = 1 << *a5;
  unint64_t v13 = v12 - 1;
  if (__OFSUB__(v12, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = _HashTable.UnsafeHandle._startIterator(bucket:)(v13 & result, a5, a6);
    uint64_t v25 = v14;
    if (!v14) {
      return 0;
    }
    unint64_t v15 = (v14 ^ v13) + ((uint64_t)a5[1] >> 6);
    if (v15 >= v13) {
      unint64_t v16 = v13;
    }
    else {
      unint64_t v16 = 0;
    }
    unint64_t v17 = v15 - v16;
    Swift::Int v18 = (void *)(a3 + 16 * (v15 - v16));
    BOOL v19 = *v18 == a1 && v18[1] == a2;
    if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      while (1)
      {
        _HashTable.BucketIterator.advance()();
        if (!v25) {
          break;
        }
        uint64_t v20 = -1 << *a5;
        unint64_t v21 = (v20 ^ ~v25) + ((uint64_t)a5[1] >> 6);
        if (v21 >= ~v20) {
          uint64_t v22 = ~v20;
        }
        else {
          uint64_t v22 = 0;
        }
        unint64_t v17 = v21 - v22;
        unint64_t v23 = (void *)(a3 + 16 * (v21 - v22));
        BOOL v24 = *v23 == a1 && v23[1] == a2;
        if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          return v17;
        }
      }
      return 0;
    }
    return v17;
  }
  return result;
}

uint64_t specialized _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = *a4;
  uint64_t result = static Hasher._hash(seed:_:)();
  unint64_t v11 = (1 << v9) - 1;
  if (__OFSUB__(1 << v9, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = _HashTable.UnsafeHandle._startIterator(bucket:)(v11 & result, a4, a5);
    uint64_t v17 = result;
    if (result)
    {
      unint64_t v12 = (result ^ v11) + (a4[1] >> 6);
      uint64_t v13 = v12 >= v11 ? (1 << v9) - 1 : 0;
      uint64_t result = v12 - v13;
      if (*(void *)(a2 + 8 * (v12 - v13)) != a1)
      {
        while (1)
        {
          _HashTable.BucketIterator.advance()();
          if (!v17) {
            break;
          }
          uint64_t v14 = -1 << *a4;
          unint64_t v15 = (v14 ^ ~v17) + (a4[1] >> 6);
          if (v15 >= ~v14) {
            uint64_t v16 = ~v14;
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t result = v15 - v16;
          if (*(void *)(a2 + 8 * (v15 - v16)) == a1) {
            return result;
          }
        }
        return 0;
      }
    }
  }
  return result;
}

Swift::Int specialized _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Int *a4, uint64_t a5)
{
  Swift::Int result = NSObject._rawHashValue(seed:)(*a4);
  uint64_t v9 = 1 << *a4;
  unint64_t v10 = v9 - 1;
  if (__OFSUB__(v9, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = _HashTable.UnsafeHandle._startIterator(bucket:)(v10 & result, a4, a5);
    uint64_t v22 = a4;
    uint64_t v23 = v11;
    if (!v11) {
      return 0;
    }
    unint64_t v12 = (v11 ^ v10) + (a4[1] >> 6);
    if (v12 >= v10) {
      unint64_t v13 = v10;
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v14 = v12 - v13;
    type metadata accessor for SGNode();
    id v15 = *(id *)(a2 + 8 * v14);
    char v16 = static NSObject.== infix(_:_:)();

    if ((v16 & 1) == 0)
    {
      while (1)
      {
        _HashTable.BucketIterator.advance()();
        if (!v23) {
          break;
        }
        uint64_t v17 = -1 << *v22;
        unint64_t v18 = (v17 ^ ~v23) + (v22[1] >> 6);
        if (v18 >= ~v17) {
          uint64_t v19 = ~v17;
        }
        else {
          uint64_t v19 = 0;
        }
        unint64_t v14 = v18 - v19;
        id v20 = *(id *)(a2 + 8 * (v18 - v19));
        char v21 = static NSObject.== infix(_:_:)();

        if (v21) {
          return v14;
        }
      }
      return 0;
    }
    return v14;
  }
  return result;
}

Swift::Int specialized _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a3 & 1);
  String.hash(into:)();
  Swift::Int result = Hasher._finalize()();
  uint64_t v14 = 1 << *a6;
  unint64_t v15 = v14 - 1;
  if (__OFSUB__(v14, 1))
  {
    __break(1u);
    return result;
  }
  uint64_t v16 = _HashTable.UnsafeHandle._startIterator(bucket:)(v15 & result, a6, a7);
  uint64_t v26 = v16;
  if (!v16) {
    return 0;
  }
  int v17 = a3 & 1;
  unint64_t v18 = (v16 ^ v15) + ((uint64_t)a6[1] >> 6);
  if (v18 >= v15) {
    unint64_t v19 = v15;
  }
  else {
    unint64_t v19 = 0;
  }
  for (unint64_t i = v18 - v19; ; unint64_t i = v24 - v25)
  {
    uint64_t v21 = a4 + 24 * i;
    if (*(unsigned char *)(v21 + 16))
    {
      if (!v17) {
        goto LABEL_16;
      }
    }
    else if (v17)
    {
      goto LABEL_16;
    }
    BOOL v22 = *(void *)v21 == a1 && *(void *)(v21 + 8) == a2;
    if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return i;
    }
LABEL_16:
    _HashTable.BucketIterator.advance()();
    if (!v26) {
      break;
    }
    uint64_t v23 = -1 << *a6;
    unint64_t v24 = (v23 ^ ~v26) + ((uint64_t)a6[1] >> 6);
    if (v24 >= ~v23) {
      uint64_t v25 = ~v23;
    }
    else {
      uint64_t v25 = 0;
    }
  }
  return 0;
}

uint64_t specialized _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v69 = *(void *)(a2 + 16);
  if (!v69)
  {
LABEL_58:
    *a1 = v69;
    return 1;
  }
  uint64_t v4 = 0;
  uint64_t v68 = a2 + 32;
  while (1)
  {
    uint64_t v5 = v68 + 56 * v4;
    Swift::UInt v6 = *(void *)v5;
    uint64_t v7 = *(void *)(v5 + 8);
    long long v58 = (uint64_t *)(v5 + 8);
    long long v57 = (uint64_t *)(v5 + 16);
    Swift::UInt v8 = *(void *)(v5 + 32);
    int v9 = *(unsigned __int8 *)(v5 + 40);
    uint64_t v61 = v5;
    Swift::UInt v10 = *(void *)(v5 + 48);
    unint64_t v55 = (uint64_t *)(v5 + 48);
    unint64_t v56 = (uint64_t *)(v5 + 32);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v6);
    uint64_t v11 = *(void (**)(char *))(*(void *)v7 + 120);
    swift_retain();
    swift_bridgeObjectRetain();
    v11(v70);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v9 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v8);
    }
    Hasher._combine(_:)(v10);
    Swift::Int v12 = Hasher._finalize()();
    unint64_t v13 = a3;
    uint64_t v14 = 1 << *a3;
    BOOL v15 = __OFSUB__(v14, 1);
    uint64_t v16 = v14 - 1;
    if (v15) {
      goto LABEL_64;
    }
    uint64_t v52 = v4;
    Swift::Int v17 = v16 & v12;
    uint64_t v18 = _HashTable.UnsafeHandle._startIterator(bucket:)(v16 & v12, a3, a4);
    unint64_t v20 = v19;
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    swift_release();
    char v71 = a3;
    uint64_t v72 = a4;
    int v23 = 0;
    if (v18) {
      break;
    }
LABEL_3:
    char v77 = v23;
    Swift::Int v73 = v17;
    uint64_t v74 = 0;
    unint64_t v75 = v20;
    uint64_t v76 = v22;
    _HashTable.BucketIterator.currentValue.setter(v52, 0);
    uint64_t v4 = v52 + 1;
    if (v52 + 1 == v69) {
      goto LABEL_58;
    }
  }
  unint64_t v24 = (void *)v61;
  uint64_t v25 = *a3;
  while (1)
  {
    uint64_t v26 = -1 << v25;
    unint64_t v27 = (v26 ^ ~v18) + (v13[1] >> 6);
    uint64_t v28 = v27 >= ~v26 ? ~v26 : 0;
    unint64_t v29 = v27 - v28;
    if (v29 >= v69) {
      break;
    }
    uint64_t v30 = v68 + 56 * v29;
    if (*(void *)v30 == *v24)
    {
      unint64_t v67 = v20;
      uint64_t v31 = *(void *)(v30 + 16);
      uint64_t v32 = *(void *)(v30 + 24);
      char v65 = *(unsigned char *)(v30 + 40);
      int v66 = v23;
      uint64_t v33 = *v58;
      uint64_t v34 = *v57;
      uint64_t v35 = v57[1];
      uint64_t v53 = *v56;
      uint64_t v54 = *(void *)(v30 + 32);
      char v64 = *(unsigned char *)(v61 + 40);
      uint64_t v62 = *v55;
      uint64_t v63 = *(void *)(v30 + 48);
      uint64_t v36 = *(uint64_t (**)(uint64_t))(**(void **)(v30 + 8) + 128);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      if (v36(v33))
      {
        if (v31 == v34 && v32 == v35)
        {
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_release();
          unint64_t v13 = a3;
          unint64_t v24 = (void *)v61;
          unint64_t v20 = v67;
          int v23 = v66;
          if (v65)
          {
LABEL_22:
            char v39 = v64;
            if (v63 != v62) {
              char v39 = 0;
            }
            if (v39)
            {
LABEL_57:
              uint64_t result = 0;
              *a1 = v52;
              return result;
            }
            goto LABEL_27;
          }
          goto LABEL_51;
        }
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        unint64_t v13 = a3;
        unint64_t v24 = (void *)v61;
        unint64_t v20 = v67;
        int v23 = v66;
        if (v38)
        {
          if (v65) {
            goto LABEL_22;
          }
LABEL_51:
          if ((v64 & 1) == 0 && v54 == v53 && v63 == v62) {
            goto LABEL_57;
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        unint64_t v13 = a3;
        unint64_t v24 = (void *)v61;
        unint64_t v20 = v67;
        int v23 = v66;
      }
    }
LABEL_27:
    ++v17;
    uint64_t v25 = *v13;
    uint64_t v40 = *v13 & 0x3F;
    uint64_t v41 = 1 << *v13;
    if (v17 == v41)
    {
      if (v23) {
        goto LABEL_65;
      }
      Swift::Int v17 = 0;
      int v23 = 1;
    }
    if (v22 >= v40)
    {
      BOOL v15 = __OFSUB__(v22, v40);
      v22 -= v40;
      if (v15) {
        goto LABEL_60;
      }
      uint64_t v18 = (v41 - 1) & v20;
      v20 >>= v40;
      if (!v18) {
        goto LABEL_3;
      }
    }
    else
    {
      uint64_t v42 = (v17 * v40) >> 6;
      if (v22)
      {
        if (__OFADD__(v40 << v40, 64)) {
          goto LABEL_63;
        }
        uint64_t v43 = (v40 << v40) + 126;
        if ((v40 << v40) + 64 >= 1) {
          uint64_t v43 = (v40 << v40) + 63;
        }
        if (v42 + 1 == v43 >> 6) {
          uint64_t v42 = 0;
        }
        else {
          ++v42;
        }
      }
      uint64_t v44 = v40 - v22;
      if (__OFSUB__(v40, v22)) {
        goto LABEL_61;
      }
      BOOL v45 = v42 == 2 && v40 == 5;
      uint64_t v46 = 64;
      if (v45) {
        uint64_t v46 = 32;
      }
      BOOL v15 = __OFSUB__(v46, v44);
      uint64_t v47 = v46 - v44;
      if (v15) {
        goto LABEL_62;
      }
      unint64_t v48 = *(void *)(a4 + 8 * v42);
      uint64_t v18 = ((v48 << v22) | v20) & (v41 - 1);
      unint64_t v20 = v48 >> v44;
      uint64_t v22 = v47;
      if (!v18) {
        goto LABEL_3;
      }
    }
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t result;

  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v7 = 0;
    Swift::UInt v8 = a2 + 32;
    while (1)
    {
      int v9 = *a3;
      Swift::UInt v10 = static Hasher._hash(seed:_:)();
      uint64_t v11 = (1 << v9) - 1;
      if (__OFSUB__(1 << v9, 1)) {
        break;
      }
      Swift::Int v12 = v11 & v10;
      unint64_t v13 = _HashTable.UnsafeHandle._startIterator(bucket:)(v11 & v10, a3, a4);
      uint64_t v16 = 0;
      if (v13)
      {
        Swift::Int v17 = v9 & 0x3F;
        uint64_t v18 = __OFADD__(v17 << v17, 64);
        unint64_t v19 = (v17 << v17) + 126;
        if ((v17 << v17) + 64 >= 1) {
          unint64_t v19 = (v17 << v17) + 63;
        }
        unint64_t v20 = v19 >> 6;
        uint64_t v21 = v14;
        while (1)
        {
          uint64_t v22 = (a3[1] >> 6) + (v13 ^ v11);
          int v23 = v22 >= v11 ? (1 << v9) - 1 : 0;
          unint64_t v24 = v22 - v23;
          if (v24 >= v4) {
            break;
          }
          if (*(void *)(v8 + 8 * v24) == *(void *)(v8 + 8 * v7))
          {
            uint64_t result = 0;
            *a1 = v7;
            return result;
          }
          if (++v12 == 1 << v9)
          {
            if (v16) {
              goto LABEL_47;
            }
            Swift::Int v12 = 0;
            uint64_t v16 = 1;
          }
          if (v15 >= v17)
          {
            unint64_t v29 = __OFSUB__(v15, v17);
            v15 -= v17;
            if (v29) {
              goto LABEL_42;
            }
            uint64_t v32 = v21 >> v17;
          }
          else
          {
            uint64_t v25 = (uint64_t)(v12 * v17) >> 6;
            if (v15)
            {
              if (v18) {
                goto LABEL_45;
              }
              if (v25 + 1 == v20) {
                uint64_t v25 = 0;
              }
              else {
                ++v25;
              }
            }
            uint64_t v26 = v17 - v15;
            if (__OFSUB__(v17, v15)) {
              goto LABEL_43;
            }
            unint64_t v27 = v25 == 2 && v17 == 5;
            if (v27) {
              uint64_t v28 = 32;
            }
            else {
              uint64_t v28 = 64;
            }
            unint64_t v29 = __OFSUB__(v28, v26);
            uint64_t v30 = v28 - v26;
            if (v29) {
              goto LABEL_44;
            }
            uint64_t v31 = *(void *)(a4 + 8 * v25);
            v21 |= v31 << v15;
            uint64_t v32 = v31 >> v26;
            BOOL v15 = v30;
          }
          unint64_t v13 = v21 & v11;
          unint64_t v27 = (v21 & v11) == 0;
          uint64_t v21 = v32;
          if (v27) {
            goto LABEL_3;
          }
        }
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        break;
      }
LABEL_3:
      _HashTable.BucketIterator.currentValue.setter(v7++, 0);
      if (v7 == v4) {
        goto LABEL_39;
      }
    }
    __break(1u);
LABEL_47:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_39:
    *a1 = v4;
    return 1;
  }
  return result;
}

uint64_t specialized _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)(void *a1, unint64_t a2, Swift::Int *a3, uint64_t a4, void (*a5)(void))
{
  if (a2 >> 62) {
    goto LABEL_56;
  }
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  do
  {
    if (!v7)
    {
LABEL_47:
      *a1 = v7;
      return 1;
    }
    unint64_t v8 = 0;
    unint64_t v47 = a2 & 0xC000000000000001;
    unint64_t v44 = a2 + 32;
    uint64_t v42 = v7;
    while (v8 != v7)
    {
      if (v47)
      {
        id v9 = (id)MEMORY[0x2611848A0](v8, a2);
      }
      else
      {
        if (v8 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_58;
        }
        id v9 = *(id *)(v44 + 8 * v8);
      }
      Swift::UInt v10 = v9;
      Swift::Int v11 = NSObject._rawHashValue(seed:)(*a3);
      uint64_t v12 = 1 << *a3;
      BOOL v13 = __OFSUB__(v12, 1);
      uint64_t v14 = v12 - 1;
      if (v13) {
        goto LABEL_55;
      }
      Swift::Int v15 = v14 & v11;
      uint64_t v16 = _HashTable.UnsafeHandle._startIterator(bucket:)(v14 & v11, a3, a4);
      unint64_t v18 = v17;
      uint64_t v20 = v19;

      char v21 = 0;
      if (v16)
      {
        Swift::Int v22 = *a3;
        while (1)
        {
          while (1)
          {
            uint64_t v23 = -1 << v22;
            unint64_t v24 = (v23 ^ ~v16) + (a3[1] >> 6);
            uint64_t v25 = v24 >= ~v23 ? ~v23 : 0;
            unint64_t v26 = v24 - v25;
            if (v47)
            {
              id v27 = (id)MEMORY[0x2611848A0](v26, a2);
              id v28 = (id)MEMORY[0x2611848A0](v8, a2);
            }
            else
            {
              if ((v26 & 0x8000000000000000) != 0) {
                goto LABEL_51;
              }
              if (v26 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_52;
              }
              unint64_t v29 = *(void **)(v44 + 8 * v8);
              id v27 = *(id *)(v44 + 8 * v26);
              id v28 = v29;
            }
            uint64_t v30 = v28;
            a5(0);
            char v31 = static NSObject.== infix(_:_:)();

            if (v31)
            {
              uint64_t result = 0;
              *a1 = v8;
              return result;
            }
            ++v15;
            Swift::Int v22 = *a3;
            uint64_t v32 = *a3 & 0x3F;
            uint64_t v33 = 1 << *a3;
            if (v15 == v33)
            {
              if (v21) {
                goto LABEL_59;
              }
              Swift::Int v15 = 0;
              char v21 = 1;
            }
            if (v20 >= v32) {
              break;
            }
            uint64_t v34 = (v15 * v32) >> 6;
            if (v20)
            {
              if (__OFADD__(v32 << v32, 64)) {
                goto LABEL_53;
              }
              uint64_t v35 = (v32 << v32) + 126;
              if ((v32 << v32) + 64 >= 1) {
                uint64_t v35 = (v32 << v32) + 63;
              }
              if (v34 + 1 == v35 >> 6) {
                uint64_t v34 = 0;
              }
              else {
                ++v34;
              }
            }
            uint64_t v36 = v32 - v20;
            if (__OFSUB__(v32, v20)) {
              goto LABEL_49;
            }
            BOOL v37 = v34 == 2 && v32 == 5;
            uint64_t v38 = 64;
            if (v37) {
              uint64_t v38 = 32;
            }
            BOOL v13 = __OFSUB__(v38, v36);
            uint64_t v39 = v38 - v36;
            if (v13) {
              goto LABEL_50;
            }
            unint64_t v40 = *(void *)(a4 + 8 * v34);
            uint64_t v16 = ((v40 << v20) | v18) & (v33 - 1);
            unint64_t v18 = v40 >> v36;
            uint64_t v20 = v39;
            if (!v16) {
              goto LABEL_5;
            }
          }
          BOOL v13 = __OFSUB__(v20, v32);
          v20 -= v32;
          if (v13) {
            break;
          }
          uint64_t v16 = (v33 - 1) & v18;
          v18 >>= v32;
          if (!v16) {
            goto LABEL_5;
          }
        }
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        break;
      }
LABEL_5:
      _HashTable.BucketIterator.currentValue.setter(v8++, 0);
      uint64_t v7 = v42;
      if (v8 == v42) {
        goto LABEL_47;
      }
    }
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  while ((v7 & 0x8000000000000000) == 0);
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double Graph.insertConstantValue(type:valueString:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C418EE0;
  *(void *)(inited + 32) = 7632239;
  *(void *)(inited + 40) = 0xE300000000000000;
  *(void *)(inited + 48) = a1;
  unint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(unsigned char *)(v10 + 80) = 6;
  *(void *)(v10 + 88) = a1;
  unint64_t v11 = *(void *)(v4 + 40);
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v11, MEMORY[0x263F8EE78], inited, v10, v4 + 64, v4, (unint64_t *)&v14);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  long long v12 = v15[0];
  *a4 = v14;
  a4[1] = v12;
  double result = *(double *)((char *)v15 + 9);
  *(_OWORD *)((char *)a4 + 25) = *(_OWORD *)((char *)v15 + 9);
  return result;
}

void *one-time initialization function for passthroughNodeNames()
{
  double result = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for passthroughNodeNames);
  passthroughNodeNames._rawValue = result;
  return result;
}

uint64_t one-time initialization function for validLODOptionsSets()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Set<String>>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_25C41BFA0;
  *(void *)(v0 + 32) = MEMORY[0x263F8EE88];
  uint64_t v1 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for validLODOptionsSets);
  swift_arrayDestroy();
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #1 of one-time initialization function for validLODOptionsSets);
  swift_arrayDestroy();
  *(void *)(v0 + 48) = v2;
  uint64_t v3 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #2 of one-time initialization function for validLODOptionsSets);
  swift_arrayDestroy();
  *(void *)(v0 + 56) = v3;
  uint64_t v4 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #3 of one-time initialization function for validLODOptionsSets);
  swift_arrayDestroy();
  *(void *)(v0 + 64) = v4;
  uint64_t v5 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #4 of one-time initialization function for validLODOptionsSets);
  swift_arrayDestroy();
  *(void *)(v0 + 72) = v5;
  uint64_t v6 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #5 of one-time initialization function for validLODOptionsSets);
  swift_arrayDestroy();
  *(void *)(v0 + 80) = v6;
  uint64_t v7 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #6 of one-time initialization function for validLODOptionsSets);
  swift_arrayDestroy();
  *(void *)(v0 + 88) = v7;
  uint64_t v8 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #7 of one-time initialization function for validLODOptionsSets);
  uint64_t result = swift_arrayDestroy();
  *(void *)(v0 + 96) = v8;
  validLODOptionsSets._rawValue = (void *)v0;
  return result;
}

uint64_t ShaderGraphNode.metalTextureType.getter()
{
  specialized ShaderGraphNode.metalTextureType.getter(*v0);
  return swift_retain();
}

double Graph.insertImageNode(metalTextureType:resultType:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C41BFB0;
  *(void *)(inited + 32) = 1701603686;
  *(void *)(inited + 40) = 0xE400000000000000;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = 0x56746C7561666564;
  *(void *)(inited + 64) = 0xEA00000000006C61;
  *(void *)(inited + 72) = a2;
  uint64_t v8 = one-time initialization token for float2;
  swift_retain();
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = static MetalDataType.float2;
  *(void *)(inited + 80) = 0x64726F6F63786574;
  *(void *)(inited + 88) = 0xE800000000000000;
  *(void *)(inited + 96) = v9;
  uint64_t v10 = one-time initialization token for sampler;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = static MetalDataType.sampler;
  *(void *)(inited + 104) = 115;
  *(void *)(inited + 112) = 0xE100000000000000;
  *(void *)(inited + 120) = v11;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  uint64_t v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_25C418EE0;
  *(void *)(v12 + 32) = 7632239;
  *(void *)(v12 + 40) = 0xE300000000000000;
  *(void *)(v12 + 48) = a2;
  uint64_t v13 = swift_allocObject();
  swift_retain();
  swift_retain();
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  *(void *)&long long v21 = 0xD000000000000011;
  *((void *)&v21 + 1) = 0x800000025C424C50;
  uint64_t v15 = *(void *)(a2 + 24);
  long long v14 = *(void **)(a2 + 32);
  swift_bridgeObjectRetain();
  v16._char countAndFlagsBits = v15;
  v16._unint64_t object = v14;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  *(void *)(v13 + 16) = 0xD000000000000011;
  *(void *)(v13 + 24) = 0x800000025C424C50;
  *(void *)(v13 + 32) = a2;
  unint64_t v17 = *(void *)(v4 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v17, inited, v12, v13 | 0x2000000000000000, v4 + 64, v4, (unint64_t *)&v21);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_setDeallocating();
  swift_arrayDestroy();
  long long v18 = v22[0];
  *a3 = v21;
  a3[1] = v18;
  double result = *(double *)((char *)v22 + 9);
  *(_OWORD *)((char *)a3 + 25) = *(_OWORD *)((char *)v22 + 9);
  return result;
}

double Graph.insertCreateSampler(label:)@<D0>(_OWORD *a1@<X8>)
{
  specialized Graph.insertCreateSampler(label:)(&v4);
  long long v2 = v5[0];
  *a1 = v4;
  a1[1] = v2;
  double result = *(double *)((char *)v5 + 9);
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)v5 + 9);
  return result;
}

void Graph.convertFilenameInput(_:movingTo:textureAssignments:customUniformsType:)(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t)v4;
  unint64_t v132 = a4;
  uint64_t v9 = (void *)a1[3];
  long long v10 = *v4;
  long long v119 = v4[1];
  long long v118 = v10;
  long long v11 = v4[2];
  long long v12 = v4[3];
  long long v13 = v4[4];
  long long v123 = v4[5];
  long long v122 = v13;
  long long v120 = v11;
  long long v121 = v12;
  long long v14 = v4[6];
  long long v15 = v4[7];
  *(_OWORD *)((char *)v126 + 9) = *(long long *)((char *)v4 + 153);
  long long v16 = v4[8];
  v126[0] = v4[9];
  long long v125 = v16;
  *(_OWORD *)long long v124 = v14;
  *(_OWORD *)&v124[16] = v15;
  unint64_t v17 = *a1;
  unint64_t v18 = specialized OrderedSet._find(_:)(*a1, v118, *((void **)&v118 + 1));
  if (v19) {
    return;
  }
  if ((v18 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v18 >= *(void *)(v119 + 16))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v73 = a2;
  uint64_t v76 = v5;
  uint64_t v20 = (void *)(v119 + 48 * v18);
  uint64_t v21 = v20[7];
  uint64_t v22 = v20[8];
  uint64_t v23 = v20[9];
  uint64_t v74 = a1[2];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized OrderedDictionary.subscript.getter((uint64_t)a1, v21, v22, v23, v84);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined init with take of MetalFunctionNode?((uint64_t)v84, (uint64_t)&v107, &demangling cache variable for type metadata for Output??);
  if (v108 == 1) {
    return;
  }
  if (!v108)
  {
    outlined release of Output??(v84);
    return;
  }
  if (v107 == -7)
  {
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  if ((v107 & 0x8000000000000000) != 0) {
    goto LABEL_33;
  }
  if (v107 >= *(void *)(v122 + 16))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v71 = v122;
  uint64_t v70 = v122 + 32;
  uint64_t v24 = v122 + 32 + 48 * v107;
  uint64_t v26 = *(void *)(v24 + 8);
  uint64_t v27 = *(void *)(v24 + 16);
  char v28 = *(unsigned char *)(v24 + 40);
  v127[0] = *(void *)v24;
  unint64_t v25 = v127[0];
  v127[1] = v26;
  v127[2] = v27;
  long long v128 = *(_OWORD *)(v24 + 24);
  char v129 = v28;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v25);
  swift_bridgeObjectRelease();
  unint64_t v29 = (void *)v25;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if (!(v25 >> 61) && *(unsigned char *)(v25 + 80) == 6)
  {
    uint64_t v30 = *(void **)(v25 + 16);
    char v31 = (void *)v29[3];
    uint64_t v33 = v29[4];
    uint64_t v32 = v29[5];
    uint64_t v34 = v29[6];
    uint64_t v35 = v29[7];
    uint64_t v75 = v29[8];
    *(void *)uint64_t v72 = v29[9];
    swift_bridgeObjectRetain();
    Graph.insertGetTexture(_:textureAssignments:customUniformsType:)((uint64_t)v30, v31, a3, v132, &v85);
    if (v76)
    {
      outlined consume of NodePersonality((unint64_t)v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of SGDataTypeStorage(v30, v31, v33, v32, v34, v35, v75, v72[0], 6);
      return;
    }
    unint64_t v80 = v87;
    unint64_t v77 = v88;
    LODWORD(v132) = v89;
    int v46 = v32;
    uint64_t v47 = *((void *)&v85 + 1);
    int v48 = v34;
    unint64_t v49 = v85;
    int v50 = v35;
    unint64_t v51 = v86;
    outlined consume of SGDataTypeStorage(v30, v31, v33, v46, v48, v50, v75, v72[0], 6);
    goto LABEL_30;
  }
  long long v130 = v123;
  v131[0] = *(_OWORD *)v124;
  *(_OWORD *)((char *)v131 + 9) = *(_OWORD *)&v124[9];
  if (specialized static ShaderGraphNode.== infix(_:_:)((uint64_t)v127, (uint64_t)&v130))
  {
    Graph.edge(to:)((uint64_t)a1, v90);
    outlined init with take of MetalFunctionNode?((uint64_t)v90, (uint64_t)v103, &demangling cache variable for type metadata for Edge?);
    if (v104)
    {
      uint64_t v79 = v105;
      uint64_t v36 = v106;
      unint64_t v37 = *((void *)&v120 + 1);
      swift_bridgeObjectRetain();
      outlined release of Edge?(v90);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_25C418EE0;
      *(void *)(v38 + 32) = 7632239;
      uint64_t v39 = v132;
      *(void *)(v38 + 40) = 0xE300000000000000;
      *(void *)(v38 + 48) = v39;
      uint64_t v40 = swift_allocObject();
      *(void *)(v40 + 16) = 12580;
      *(void *)(v40 + 24) = 0xE200000000000000;
      unint64_t v41 = v40 | 0x6000000000000000;
      swift_retain();
      specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v37, MEMORY[0x263F8EE78], v38, v41, v6 + 64, v6, &v91);
      swift_release();
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      ShaderGraphNode.out.getter((uint64_t)v94);
      if (!v76)
      {
        outlined init with take of NodePersonality(&v91, &v113);
        outlined release of NodePersonality(&v113);
        uint64_t v112 = v92;
        outlined release of [Input]((uint64_t)&v112);
        uint64_t v111 = v93;
        outlined release of [Input]((uint64_t)&v111);
        Output.getProperty(_:_:)(v6, v79, v36, &v96);
        uint64_t v47 = *((void *)&v96 + 1);
        unint64_t v49 = v96;
        unint64_t v51 = v97;
        unint64_t v77 = v99;
        unint64_t v80 = v98;
        LODWORD(v132) = v100;
        swift_release();
        long long v110 = v95;
        outlined release of String((uint64_t)&v110);
        swift_bridgeObjectRelease();
LABEL_30:
        v116[1] = v49;
        v116[2] = v47;
        void v116[3] = v51;
        v116[4] = v80;
        v116[5] = v77;
        char v117 = v132;
        outlined copy of NodePersonality(v49);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        ShaderGraphNode.out.getter((uint64_t)v101);
        Graph.connect(_:to:)((uint64_t)v101, v73);
        outlined consume of ShaderGraphNode?(v49, v47);
        outlined consume of NodePersonality((unint64_t)v29);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        long long v109 = v102;
        outlined release of String((uint64_t)&v109);
        outlined consume of NodePersonality(v49);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      outlined init with take of NodePersonality(&v91, v116);
      outlined release of NodePersonality(v116);
      uint64_t v115 = v92;
      outlined release of [Input]((uint64_t)&v115);
      uint64_t v114 = v93;
      outlined release of [Input]((uint64_t)&v114);
      outlined consume of NodePersonality((unint64_t)v29);
      swift_bridgeObjectRelease();
LABEL_29:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    if (v17 == -7)
    {
      unint64_t v42 = 0;
      uint64_t v43 = 0;
      unint64_t v132 = 0;
      unint64_t v44 = (void *)0xED00002165646F6ELL;
      uint64_t v45 = 0x20676E697373696DLL;
LABEL_28:
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)v81);
      *(void *)&v82[0] = 0;
      *((void *)&v82[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(58);
      v55._unint64_t object = (void *)0x800000025C424C70;
      v55._char countAndFlagsBits = 0xD00000000000002BLL;
      String.append(_:)(v55);
      swift_bridgeObjectRetain();
      v56._char countAndFlagsBits = v74;
      v56._unint64_t object = v9;
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      v57._char countAndFlagsBits = 0x646F6E206E6F2027;
      v57._unint64_t object = (void *)0xEB00000000203A65;
      String.append(_:)(v57);
      v58._char countAndFlagsBits = v45;
      v58._unint64_t object = v44;
      String.append(_:)(v58);
      swift_bridgeObjectRelease();
      long long v59 = v82[0];
      outlined init with take of UserGraphError.ErrorType((uint64_t)v81, (uint64_t)v82);
      long long v83 = v59;
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      swift_allocError();
      *long long v60 = v82[0];
      long long v61 = v82[4];
      long long v63 = v82[1];
      long long v62 = v82[2];
      v60[3] = v82[3];
      v60[4] = v61;
      v60[1] = v63;
      v60[2] = v62;
      long long v64 = v82[8];
      long long v66 = v82[5];
      long long v65 = v82[6];
      v60[7] = v82[7];
      v60[8] = v64;
      v60[5] = v66;
      v60[6] = v65;
      long long v67 = v83;
      long long v69 = v82[9];
      long long v68 = v82[10];
      v60[11] = v82[11];
      v60[12] = v67;
      v60[9] = v69;
      v60[10] = v68;
      swift_willThrow();
      outlined consume of ShaderGraphNode?(v42, v43);
      outlined consume of NodePersonality((unint64_t)v29);
      goto LABEL_29;
    }
    if ((v17 & 0x8000000000000000) == 0)
    {
      if (v17 < *(void *)(v71 + 16))
      {
        uint64_t v52 = (unint64_t *)(v70 + 48 * v17);
        unint64_t v42 = *v52;
        uint64_t v43 = v52[1];
        unint64_t v53 = v52[3];
        unint64_t v132 = v52[4];
        *(void *)&v82[0] = 1701080942;
        *((void *)&v82[0] + 1) = 0xE400000000000000;
        v81[0] = v53;
        outlined copy of NodePersonality(v42);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v42);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v54._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v54);
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v42);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v44 = (void *)0xE400000000000000;
        uint64_t v45 = 1701080942;
        goto LABEL_28;
      }
      goto LABEL_36;
    }
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    return;
  }
  outlined consume of NodePersonality(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t implicit closure #1 in Graph.transformMaterialXImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

double Graph.insertCubeimageNode(metalTextureType:resultType:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C41BFB0;
  *(void *)(inited + 32) = 1701603686;
  *(void *)(inited + 40) = 0xE400000000000000;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = 0x56746C7561666564;
  *(void *)(inited + 64) = 0xEA00000000006C61;
  *(void *)(inited + 72) = a2;
  uint64_t v8 = one-time initialization token for float3;
  swift_retain();
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = static MetalDataType.float3;
  *(void *)(inited + 80) = 0x64726F6F63786574;
  *(void *)(inited + 88) = 0xE800000000000000;
  *(void *)(inited + 96) = v9;
  uint64_t v10 = one-time initialization token for sampler;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = static MetalDataType.sampler;
  *(void *)(inited + 104) = 0x72656C706D6173;
  *(void *)(inited + 112) = 0xE700000000000000;
  *(void *)(inited + 120) = v11;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  uint64_t v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_25C418EE0;
  *(void *)(v12 + 32) = 7632239;
  *(void *)(v12 + 40) = 0xE300000000000000;
  *(void *)(v12 + 48) = a2;
  uint64_t v13 = swift_allocObject();
  swift_retain();
  swift_retain();
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  *(void *)&long long v21 = 0xD000000000000015;
  *((void *)&v21 + 1) = 0x800000025C424CA0;
  uint64_t v15 = *(void *)(a2 + 24);
  long long v14 = *(void **)(a2 + 32);
  swift_bridgeObjectRetain();
  v16._char countAndFlagsBits = v15;
  v16._unint64_t object = v14;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  *(void *)(v13 + 16) = 0xD000000000000015;
  *(void *)(v13 + 24) = 0x800000025C424CA0;
  *(void *)(v13 + 32) = a2;
  unint64_t v17 = *(void *)(v4 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v17, inited, v12, v13 | 0x2000000000000000, v4 + 64, v4, (unint64_t *)&v21);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_setDeallocating();
  swift_arrayDestroy();
  long long v18 = v22[0];
  *a3 = v21;
  a3[1] = v18;
  double result = *(double *)((char *)v22 + 9);
  *(_OWORD *)((char *)a3 + 25) = *(_OWORD *)((char *)v22 + 9);
  return result;
}

BOOL specialized implicit closure #1 in Graph.transformRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(void *a1)
{
  if (*a1 >> 61 != 5) {
    return 0;
  }
  swift_bridgeObjectRetain();
  v1._unint64_t object = (void *)0x800000025C421D60;
  v1._char countAndFlagsBits = 0xD000000000000014;
  Swift::Bool v2 = String.hasPrefix(_:)(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t closure #1 in Graph.transformRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1);
  uint64_t v4 = v3;
  uint64_t v304 = v5;
  uint64_t v7 = v6;
  uint64_t v8 = (long long *)v2;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v569 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v259 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v12 = v8[1];
  long long v496 = *v8;
  v497[0] = v12;
  *(_OWORD *)((char *)v497 + 9) = *(long long *)((char *)v8 + 25);
  *(void *)&long long v331 = 0;
  *((void *)&v331 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  *(void *)&long long v331 = 0xD000000000000014;
  *((void *)&v331 + 1) = 0x800000025C424F60;
  uint64_t v13 = *((void *)&v497[0] + 1);
  v324._char countAndFlagsBits = 1701080942;
  v324._uint64_t object = (void *)0xE400000000000000;
  *(void *)&v321[0] = *((void *)&v497[0] + 1);
  v14._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  String.append(_:)(v324);
  swift_bridgeObjectRelease();
  v15._char countAndFlagsBits = 39;
  v15._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  specialized Graph.insertCreateSampler(label:)(&v344);
  swift_bridgeObjectRelease();
  Graph.insertSampleTexture(for:)((uint64_t *)&v496, &v346);
  if (v1)
  {
    outlined init with take of NodePersonality(&v344, &v495);
    Swift::String v16 = (unint64_t *)&v495;
LABEL_3:
    outlined release of NodePersonality(v16);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v299 = v4;
  uint64_t v295 = v13;
  uint64_t v296 = v11;
  uint64_t v297 = v9;
  Swift::String v18 = v346;
  uint64_t v19 = v347;
  uint64_t v20 = v348;
  uint64_t v21 = v349;
  int v22 = v350;
  ShaderGraphNode.out.getter((uint64_t)v351);
  int v292 = v22;
  Swift::String v288 = v18;
  uint64_t v289 = v19;
  uint64_t v290 = v20;
  uint64_t v291 = v21;
  uint64_t object = (uint64_t)v346._object;
  specialized Sequence.first(where:)((uint64_t)v346._object, 0x72656C706D6173, 0xE700000000000000, v352);
  long long v301 = 0;
  outlined init with take of MetalFunctionNode?((uint64_t)v352, (uint64_t)v427, (uint64_t *)&demangling cache variable for type metadata for Input?);
  if (!*((void *)&v427[0] + 1))
  {
    outlined init with take of NodePersonality(&v346, v494);
    uint64_t v493 = v347;
    Swift::String v324 = v288;
    uint64_t v325 = v289;
    uint64_t v326 = v290;
    uint64_t v327 = v291;
    char v328 = v292;
    uint64_t v329 = 0x72656C706D6173;
    unint64_t v330 = 0xE700000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v324);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v324, (uint64_t)&v331);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v343 = 0uLL;
    swift_allocError();
    _OWORD *v181 = v331;
    long long v182 = v335;
    long long v184 = v332;
    long long v183 = v333;
    v181[3] = v334;
    v181[4] = v182;
    v181[1] = v184;
    void v181[2] = v183;
    long long v185 = v339;
    long long v187 = v336;
    long long v186 = v337;
    v181[7] = v338;
    v181[8] = v185;
    v181[5] = v187;
    v181[6] = v186;
    long long v188 = v343;
    long long v190 = v340;
    long long v189 = v341;
    v181[11] = v342;
    v181[12] = v188;
    v181[9] = v190;
    v181[10] = v189;
    swift_bridgeObjectRetain();
    outlined retain of NodePersonality(v494);
    outlined retain of [Input]((uint64_t)&v493);
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    outlined release of NodePersonality(v494);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of NodePersonality(&v344, &v492);
    Swift::String v16 = (unint64_t *)&v492;
    goto LABEL_3;
  }
  uint64_t v294 = object;
  v429[0] = v427[0];
  v429[1] = v427[1];
  v429[2] = v427[2];
  uint64_t v430 = v428;
  uint64_t v309 = v7;
  Graph.connect(_:to:)((uint64_t)v351, (unint64_t)v429);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v323 = MEMORY[0x263F8EE88];
  uint64_t v24 = *((void *)&v496 + 1);
  uint64_t v308 = specialized Array._getCount()(*((void *)&v496 + 1));
  if (!v308)
  {
    unint64_t v305 = 0;
    uint64_t v293 = 0;
    uint64_t v320 = 0;
    int v287 = 0;
    unint64_t v277 = 0;
    uint64_t v278 = 0;
    uint64_t v280 = 0;
    uint64_t v281 = 0;
    uint64_t v275 = 0;
    uint64_t v276 = 0;
    int v279 = 0;
    unint64_t v283 = 0;
    uint64_t v284 = 0;
    uint64_t v286 = 0;
    uint64_t v282 = 0;
    int v285 = 0;
    goto LABEL_297;
  }
  unint64_t v25 = v511;
  uint64_t v307 = v24 + 32;
  unint64_t v262 = (void (**)(char *, uint64_t))(v569 + 8);
  uint64_t v263 = (void (**)(char *, uint64_t, uint64_t))(v569 + 16);
  p_uint64_t object = &v324._object;
  long long v264 = &v399;
  long long v265 = &v407;
  uint64_t v267 = &v387;
  Swift::String v268 = &v379;
  unint64_t v269 = &v371;
  uint64_t v270 = &v363;
  swift_bridgeObjectRetain();
  unint64_t v26 = 0;
  uint64_t v293 = 0;
  uint64_t v273 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v287 = 0;
  unint64_t v277 = 0;
  uint64_t v278 = 0;
  uint64_t v280 = 0;
  uint64_t v281 = 0;
  uint64_t v275 = 0;
  uint64_t v276 = 0;
  int v279 = 0;
  unint64_t v283 = 0;
  uint64_t v284 = 0;
  uint64_t v286 = 0;
  uint64_t v282 = 0;
  int v285 = 0;
  uint64_t v29 = 0;
  uint64_t v271 = (void *)(v294 + 136);
  long long v274 = xmmword_25C41BFC0;
  long long v272 = xmmword_25C418EE0;
  long long v260 = xmmword_25C41BFD0;
  v259[1] = MEMORY[0x263F8EE58] + 8;
  uint64_t v266 = 0xE900000000000070;
  uint64_t v30 = v24;
  uint64_t v306 = v24;
  while (1)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v29, 1, v30);
    uint64_t v31 = v307 + 56 * v29;
    Swift::UInt v33 = *(void *)v31;
    uint64_t v32 = *(void *)(v31 + 8);
    uint64_t v35 = *(void *)(v31 + 16);
    uint64_t v34 = *(void *)(v31 + 24);
    uint64_t v36 = *(void *)(v31 + 32);
    int v37 = *(unsigned __int8 *)(v31 + 40);
    uint64_t v38 = *(void *)(v31 + 48);
    *(void *)&long long v518 = v33;
    uint64_t v569 = v32;
    *((void *)&v518 + 1) = v32;
    uint64_t v316 = v35;
    *(void *)&long long v519 = v35;
    uint64_t v319 = v34;
    *((void *)&v519 + 1) = v34;
    LODWORD(v312) = v37;
    BYTE8(v520) = v37;
    uint64_t v311 = v36;
    *(void *)&long long v520 = v36;
    uint64_t v314 = v38;
    uint64_t v521 = v38;
    BOOL v39 = __OFADD__(v29, 1);
    uint64_t v40 = v29 + 1;
    if (v39)
    {
      __break(1u);
      goto LABEL_325;
    }
    uint64_t v317 = v40;
    uint64_t v318 = v28;
    long long v41 = *(_OWORD *)(v309 + 80);
    v321[4] = *(_OWORD *)(v309 + 64);
    v321[5] = v41;
    long long v42 = *(_OWORD *)(v309 + 48);
    v321[2] = *(_OWORD *)(v309 + 32);
    v321[3] = v42;
    *(_OWORD *)((char *)v322 + 9) = *(_OWORD *)(v309 + 153);
    long long v43 = *(_OWORD *)(v309 + 144);
    v321[8] = *(_OWORD *)(v309 + 128);
    v322[0] = v43;
    long long v44 = *(_OWORD *)(v309 + 112);
    v321[6] = *(_OWORD *)(v309 + 96);
    v321[7] = v44;
    long long v45 = *(_OWORD *)(v309 + 16);
    v321[0] = *(_OWORD *)v309;
    v321[1] = v45;
    uint64_t object = *(void *)&v321[0];
    int v46 = (void *)(*((void *)&v321[0] + 1) + 32);
    uint64_t v47 = v45;
    uint64_t v320 = v27;
    if (!*(void *)&v321[0]) {
      break;
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v33);
    Swift::Int v48 = Hasher._finalize()();
    uint64_t v49 = 1 << *(void *)(object + 16);
    BOOL v39 = __OFSUB__(v49, 1);
    uint64_t v50 = v49 - 1;
    if (v39)
    {
      __break(1u);
LABEL_328:
      swift_bridgeObjectRetain_n();
      goto LABEL_329;
    }
    v51.value = _HashTable.UnsafeHandle.startFind(_:)((uint64_t)&v331, v50 & v48, (void *)(object + 16), object + 32);
    if (!v51.is_nil)
    {
      uint64_t v27 = v320;
      while (v46[v51.value] != v33)
      {
        Swift::Int_optional v51 = _HashTable.BucketIterator.findNext()();
        if (v51.is_nil) {
          goto LABEL_19;
        }
      }
      goto LABEL_35;
    }
    uint64_t v27 = v320;
LABEL_19:
    swift_bridgeObjectRetain_n();
    swift_retain();
    outlined retain of Graph((uint64_t)v321);
    uint64_t v28 = v318;
LABEL_100:
    outlined release of Graph((uint64_t)v321);
    swift_release();
    swift_bridgeObjectRelease_n();
LABEL_101:
    uint64_t v29 = v317;
LABEL_102:
    uint64_t v30 = v306;
    if (v29 == v308)
    {
      uint64_t v320 = v27;
      unint64_t v305 = v26;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v293)
      {
        unint64_t v191 = v305;
        unint64_t v505 = v305;
        uint64_t v506 = v293;
        uint64_t v507 = v273;
        uint64_t v508 = v320;
        uint64_t v509 = v28;
        char v510 = v287 & 1;
        outlined copy of NodePersonality(v305);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        long long v192 = v301;
        ShaderGraphNode.subscript.getter(0x6E696D5F646F6CLL, 0xE700000000000000, (uint64_t)v415);
        long long v301 = v192;
        if (v192)
        {
          outlined consume of NodePersonality(v191);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of ShaderGraphNode?(v277, v280);
          outlined consume of ShaderGraphNode?(v283, v286);
          outlined init with take of NodePersonality(&v346, &v443);
          outlined release of NodePersonality(&v443);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined init with take of NodePersonality(&v344, &v442);
          outlined release of NodePersonality(&v442);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of NodePersonality(v191);
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        uint64_t v318 = v28;
        long long v194 = *(_OWORD *)(v309 + 144);
        long long v516 = *(_OWORD *)(v309 + 128);
        v517[0] = v194;
        *(_OWORD *)((char *)v517 + 9) = *(_OWORD *)(v309 + 153);
        long long v195 = *(_OWORD *)(v309 + 80);
        long long v512 = *(_OWORD *)(v309 + 64);
        long long v513 = v195;
        long long v196 = *(_OWORD *)(v309 + 96);
        long long v515 = *(_OWORD *)(v309 + 112);
        long long v514 = v196;
        long long v197 = *(_OWORD *)(v309 + 16);
        v511[0] = *(_OWORD *)v309;
        v511[1] = v197;
        long long v198 = *(_OWORD *)(v309 + 32);
        v511[3] = *(_OWORD *)(v309 + 48);
        v511[2] = v198;
        outlined retain of Graph((uint64_t)v511);
        Graph.edge(to:)((uint64_t)v415, v416);
        uint64_t v199 = v416[0];
        outlined init with take of MetalFunctionNode?((uint64_t)v416, (uint64_t)v426, &demangling cache variable for type metadata for Edge?);
        if (!v426[1])
        {
LABEL_303:
          outlined release of Graph((uint64_t)v511);
          if (one-time initialization token for float != -1) {
            swift_once();
          }
          uint64_t v200 = static MetalDataType.float;
          uint64_t v201 = specialized static Array._allocateUninitialized(_:)(0);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
          uint64_t v202 = swift_allocObject();
          *(_OWORD *)(v202 + 16) = v272;
          *(void *)(v202 + 32) = 7632239;
          *(void *)(v202 + 40) = 0xE300000000000000;
          *(void *)(v202 + 48) = v200;
          unint64_t v203 = swift_allocObject();
          *(_OWORD *)(v203 + 16) = 0u;
          *(_OWORD *)(v203 + 32) = 0u;
          *(_OWORD *)(v203 + 48) = 0u;
          *(_OWORD *)(v203 + 64) = 0u;
          *(unsigned char *)(v203 + 80) = 5;
          *(void *)(v203 + 88) = v200;
          uint64_t v204 = v309;
          unint64_t v205 = *(void *)(v309 + 40);
          swift_retain_n();
          specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v205, v201, v202, v203, v204 + 64, v204, v417);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          long long v206 = v301;
          ShaderGraphNode.out.getter((uint64_t)v418);
          long long v207 = v206;
          if (!v206)
          {
            Graph.connect(_:to:)((uint64_t)v418, (unint64_t)v415);
            swift_release();
            swift_bridgeObjectRelease();
            outlined init with take of NodePersonality(v417, &v438);
            outlined release of NodePersonality(&v438);
            swift_bridgeObjectRelease();
            unint64_t v212 = v305;
            goto LABEL_309;
          }
          unint64_t v208 = v305;
          outlined consume of NodePersonality(v305);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of ShaderGraphNode?(v277, v280);
          outlined consume of ShaderGraphNode?(v283, v286);
          outlined init with take of NodePersonality(&v346, &v441);
          outlined release of NodePersonality(&v441);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined init with take of NodePersonality(&v344, &v440);
          outlined release of NodePersonality(&v440);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined init with take of NodePersonality(v417, &v439);
          outlined release of NodePersonality(&v439);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          unint64_t v209 = v208;
LABEL_311:
          outlined consume of NodePersonality(v209);
          goto LABEL_312;
        }
        if (v199 == -7)
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_303;
        }
        uint64_t v210 = v512;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v199, 1, v512);
        unint64_t v211 = *(void *)(v210 + 48 * v199 + 32);
        outlined copy of NodePersonality(v211);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        outlined release of Graph((uint64_t)v511);
        long long v207 = v301;
        outlined consume of NodePersonality(v211);
        swift_bridgeObjectRelease();
        unint64_t v212 = v305;
LABEL_309:
        swift_bridgeObjectRelease();
        ShaderGraphNode.subscript.getter(0x78616D5F646F6CLL, 0xE700000000000000, (uint64_t)v419);
        if (v207)
        {
          outlined consume of NodePersonality(v212);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of ShaderGraphNode?(v277, v280);
          outlined consume of ShaderGraphNode?(v283, v286);
          outlined init with take of NodePersonality(&v346, &v437);
          outlined release of NodePersonality(&v437);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined init with take of NodePersonality(&v344, &v436);
          outlined release of NodePersonality(&v436);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          unint64_t v209 = v212;
          goto LABEL_311;
        }
        unint64_t v25 = 0;
        long long v213 = *(_OWORD *)(v309 + 144);
        long long v503 = *(_OWORD *)(v309 + 128);
        v504[0] = v213;
        *(_OWORD *)((char *)v504 + 9) = *(_OWORD *)(v309 + 153);
        long long v214 = *(_OWORD *)(v309 + 80);
        long long v499 = *(_OWORD *)(v309 + 64);
        long long v500 = v214;
        long long v215 = *(_OWORD *)(v309 + 96);
        long long v502 = *(_OWORD *)(v309 + 112);
        long long v501 = v215;
        long long v216 = *(_OWORD *)(v309 + 16);
        v498[0] = *(_OWORD *)v309;
        v498[1] = v216;
        long long v217 = *(_OWORD *)(v309 + 32);
        v498[3] = *(_OWORD *)(v309 + 48);
        v498[2] = v217;
        outlined retain of Graph((uint64_t)v498);
        Graph.edge(to:)((uint64_t)v419, v420);
        uint64_t object = v420[0];
        outlined init with take of MetalFunctionNode?((uint64_t)v420, (uint64_t)v425, &demangling cache variable for type metadata for Edge?);
        if (v425[1])
        {
          if (object == -7)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_316;
          }
LABEL_325:
          long long v301 = v25;
          uint64_t v236 = v499;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(object, 1, v499);
          unint64_t v237 = *(void *)(v236 + 48 * object + 32);
          outlined copy of NodePersonality(v237);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          outlined release of Graph((uint64_t)v498);
          outlined consume of NodePersonality(v237);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of NodePersonality(v305);
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_316:
          outlined release of Graph((uint64_t)v498);
          if (one-time initialization token for float != -1) {
            swift_once();
          }
          uint64_t v218 = static MetalDataType.float;
          uint64_t v219 = specialized static Array._allocateUninitialized(_:)(0);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
          uint64_t v220 = swift_allocObject();
          *(_OWORD *)(v220 + 16) = v272;
          *(void *)(v220 + 32) = 7632239;
          *(void *)(v220 + 40) = 0xE300000000000000;
          *(void *)(v220 + 48) = v218;
          unint64_t v221 = swift_allocObject();
          *(void *)(v221 + 16) = 1232348144;
          *(_OWORD *)(v221 + 24) = 0u;
          *(_OWORD *)(v221 + 40) = 0u;
          *(_OWORD *)(v221 + 56) = 0u;
          *(void *)(v221 + 72) = 0;
          *(unsigned char *)(v221 + 80) = 5;
          *(void *)(v221 + 88) = v218;
          uint64_t v222 = v309;
          unint64_t v223 = *(void *)(v309 + 40);
          swift_retain_n();
          specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v223, v219, v220, v221, v222 + 64, v222, v421);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          ShaderGraphNode.out.getter((uint64_t)v422);
          long long v301 = 0;
          Graph.connect(_:to:)((uint64_t)v422, (unint64_t)v419);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of NodePersonality(v305);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          outlined init with take of NodePersonality(v421, v435);
          outlined release of NodePersonality(v435);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v293 = 0;
      }
LABEL_297:
      outlined init with take of NodePersonality(&v346, &v434);
      uint64_t v433 = v347;
      swift_bridgeObjectRetain();
      outlined retain of NodePersonality(&v434);
      outlined retain of [Input]((uint64_t)&v433);
      long long v193 = v301;
      ShaderGraphNode.out.getter((uint64_t)v423);
      if (v193)
      {
        outlined consume of ShaderGraphNode?(v305, v293);
        outlined consume of ShaderGraphNode?(v277, v280);
        outlined consume of ShaderGraphNode?(v283, v286);
        outlined release of NodePersonality(&v434);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined init with take of NodePersonality(&v344, &v432);
        outlined release of NodePersonality(&v432);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of NodePersonality(&v434);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      ShaderGraphNode.out.getter((uint64_t)v424);
      Graph.moveEdges(from:to:)((uint64_t)v423, (uint64_t)v424);
      outlined consume of ShaderGraphNode?(v305, v293);
      outlined consume of ShaderGraphNode?(v277, v280);
      outlined consume of ShaderGraphNode?(v283, v286);
      outlined release of NodePersonality(&v434);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(&v344, v431);
      outlined release of NodePersonality(v431);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      outlined release of NodePersonality(&v434);
      goto LABEL_312;
    }
  }
  uint64_t v52 = *(void *)(*((void *)&v321[0] + 1) + 16);
  if (!v52)
  {
    uint64_t v28 = v318;
LABEL_22:
    swift_bridgeObjectRetain_n();
    swift_retain();
    outlined retain of Graph((uint64_t)v321);
    goto LABEL_100;
  }
  if (*v46 == v33)
  {
    v51.value = 0;
    goto LABEL_36;
  }
  uint64_t v28 = v318;
  if (v52 == 1) {
    goto LABEL_22;
  }
  if (*(void *)(*((void *)&v321[0] + 1) + 40) == v33)
  {
    v51.value = 1;
    goto LABEL_36;
  }
  if (v52 == 2) {
    goto LABEL_22;
  }
  if (*(void *)(*((void *)&v321[0] + 1) + 48) == v33)
  {
    v51.value = 2;
    goto LABEL_36;
  }
  if (v52 == 3) {
    goto LABEL_22;
  }
  if (*(void *)(*((void *)&v321[0] + 1) + 56) == v33)
  {
    v51.value = 3;
    goto LABEL_36;
  }
  uint64_t v53 = 0;
  uint64_t v54 = v52 - 4;
  do
  {
    if (v54 == v53) {
      goto LABEL_22;
    }
    uint64_t v55 = *(void *)(*((void *)&v321[0] + 1) + 64 + 8 * v53++);
  }
  while (v55 != v33);
  v51.value = v53 + 3;
LABEL_35:
  if (v51.value < 0) {
    goto LABEL_331;
  }
LABEL_36:
  if (v51.value >= *(void *)(v47 + 16))
  {
    __break(1u);
LABEL_331:
    __break(1u);
    goto LABEL_332;
  }
  Swift::String v56 = (void *)(v47 + 48 * v51.value);
  uint64_t v58 = v56[7];
  uint64_t v57 = v56[8];
  long long v59 = (_OWORD *)v56[9];
  uint64_t object = *(void *)(v57 + 16);
  unint64_t v305 = v26;
  uint64_t v302 = v57;
  long long v303 = v59;
  if (v58)
  {
    uint64_t v60 = object;
    uint64_t object = v58 + 16;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    outlined retain of Graph((uint64_t)v321);
    swift_retain();
    swift_retain();
    swift_retain();
    Swift::Int v61 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v518, v57 + 32, v60, (void *)(v58 + 16), v58 + 32);
    if ((v62 & 1) == 0)
    {
      unint64_t v63 = v61;
      long long v64 = v301;
      uint64_t v27 = v320;
      uint64_t v65 = v569;
      if ((v61 & 0x8000000000000000) == 0) {
        goto LABEL_40;
      }
LABEL_332:
      __break(1u);
LABEL_333:
      __break(1u);
LABEL_334:
      outlined init with take of NodePersonality(&v344, &v454);
      outlined release of NodePersonality(&v454);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of ShaderGraphNode?(v283, v286);
      outlined consume of ShaderGraphNode?(v277, v280);
      outlined consume of ShaderGraphNode?(v305, v293);
      swift_bridgeObjectRelease();
      swift_release();
      outlined init with take of NodePersonality(&v346, &v453);
      outlined release of NodePersonality(&v453);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v300 = v58;
    uint64_t v27 = v320;
    goto LABEL_98;
  }
  uint64_t v300 = 0;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  outlined retain of Graph((uint64_t)v321);
  if (!object)
  {
    swift_retain();
    swift_retain();
LABEL_98:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    unint64_t v26 = v305;
LABEL_99:
    uint64_t v28 = v318;
    unint64_t v25 = v511;
    goto LABEL_100;
  }
  LODWORD(v298) = v312 ^ 1;
  swift_retain();
  swift_retain();
  unint64_t v63 = 0;
  unsigned __int8 v89 = (uint64_t *)(v57 + 80);
  while (1)
  {
    if (*(v89 - 6) != v33) {
      goto LABEL_77;
    }
    uint64_t v90 = *(v89 - 5);
    uint64_t v91 = *(v89 - 4);
    uint64_t v92 = *(v89 - 3);
    uint64_t v310 = *(v89 - 2);
    LODWORD(v315) = *((unsigned __int8 *)v89 - 8);
    uint64_t v313 = *v89;
    uint64_t v93 = *(uint64_t (**)(uint64_t))(*(void *)v90 + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((v93(v569) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v27 = v320;
      goto LABEL_77;
    }
    if (v91 != v316 || v92 != v319)
    {
      char v95 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v27 = v320;
      if ((v95 & 1) == 0) {
        goto LABEL_77;
      }
      if ((v315 & 1) == 0) {
        break;
      }
      goto LABEL_86;
    }
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v27 = v320;
    if ((v315 & 1) == 0) {
      break;
    }
LABEL_86:
    char v96 = v312;
    if (v313 != v314) {
      char v96 = 0;
    }
    if (v96) {
      goto LABEL_95;
    }
LABEL_77:
    v89 += 7;
    if (object == ++v63) {
      goto LABEL_98;
    }
  }
  int v97 = v298;
  if (v310 != v311) {
    int v97 = 0;
  }
  if (v97 != 1 || v313 != v314) {
    goto LABEL_77;
  }
LABEL_95:
  long long v64 = v301;
  unint64_t v26 = v305;
  uint64_t v65 = v569;
LABEL_40:
  long long v301 = v64;
  uint64_t object = (uint64_t)v303;
  if (v63 >= *((void *)v303 + 2)) {
    goto LABEL_333;
  }
  long long v66 = (char *)v303 + 56 * v63;
  uint64_t v67 = *((void *)v66 + 5);
  outlined copy of Output?(*((void *)v66 + 4), v67);
  Swift::Int v68 = v319;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (!v67) {
    goto LABEL_99;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  outlined release of Graph((uint64_t)v321);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v69 = swift_allocObject();
  uint64_t v70 = (void *)v69;
  *(_OWORD *)(v69 + 16) = v274;
  *(void *)(v69 + 32) = 1935763810;
  *(void *)(v69 + 40) = 0xE400000000000000;
  *(void *)(v69 + 48) = 0x6C6576656CLL;
  *(void *)(v69 + 56) = 0xE500000000000000;
  *(void *)(v69 + 64) = 0x746E656964617267;
  *(void *)(v69 + 72) = 0xEA00000000006432;
  *(void *)(v69 + 80) = 0x746E656964617267;
  *(void *)(v69 + 88) = 0xEA00000000006433;
  uint64_t v71 = v316;
  BOOL v72 = v316 == 1935763810 && v68 == 0xE400000000000000;
  char v73 = v72;
  strcpy((char *)(v69 + 96), "min_lod_clamp");
  *(_WORD *)(v69 + 110) = -4864;
  uint64_t v74 = v68;
  if (!v72)
  {
    char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v71 = v316;
    if ((v75 & 1) == 0 && (v316 != 0x6C6576656CLL || v68 != 0xE500000000000000))
    {
      char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v71 = v316;
      if ((v76 & 1) == 0 && (v70[8] != v316 || v70[9] != v68))
      {
        char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v71 = v316;
        if ((v77 & 1) == 0 && (v70[10] != v316 || v70[11] != v68))
        {
          char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v71 = v316;
          if ((v78 & 1) == 0 && (v70[12] != v316 || v70[13] != v68))
          {
            char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v71 = v316;
            if ((v79 & 1) == 0) {
              goto LABEL_110;
            }
          }
        }
      }
    }
  }
  Swift::Int v80 = v71;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((Swift::Int *)&v331, v80, v68);
  swift_bridgeObjectRelease();
  if (one-time initialization token for validLODOptionsSets != -1) {
    swift_once();
  }
  uint64_t v81 = v323;
  uint64_t v82 = specialized Array._getCount()(validLODOptionsSets._rawValue);
  if (!v82)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_105:
    uint64_t v29 = v317;
LABEL_106:
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v26 = v305;
    uint64_t v28 = v318;
    uint64_t v27 = v320;
    unint64_t v25 = v511;
    goto LABEL_102;
  }
  uint64_t v83 = v82;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v84 = swift_bridgeObjectRetain();
  uint64_t object = specialized static Set.== infix(_:_:)(v84, v81);
  swift_bridgeObjectRelease();
  if (object) {
    goto LABEL_109;
  }
  if (v83 == 1) {
    goto LABEL_105;
  }
  uint64_t v85 = swift_bridgeObjectRetain();
  uint64_t object = specialized static Set.== infix(_:_:)(v85, v81);
  swift_bridgeObjectRelease();
  if (object)
  {
LABEL_108:
    uint64_t v74 = v319;
LABEL_109:
    swift_bridgeObjectRelease();
LABEL_110:
    swift_bridgeObjectRelease();
    if (v316 == 1701603686 && v74 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v98 = v294;
      uint64_t v315 = specialized Array._getCount()(v294);
      if (!v315)
      {
        swift_bridgeObjectRetain_n();
LABEL_320:
        swift_bridgeObjectRelease_n();
        outlined init with take of NodePersonality(&v346, &v446);
        uint64_t v445 = v347;
        Swift::String v324 = v288;
        uint64_t v325 = v289;
        uint64_t v326 = v290;
        uint64_t v327 = v291;
        char v328 = v292;
        uint64_t v329 = 0x65727574786574;
        unint64_t v330 = 0xE700000000000000;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v324);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v324, (uint64_t)&v331);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        long long v343 = 0uLL;
        swift_allocError();
        _OWORD *v224 = v331;
        long long v225 = v335;
        long long v227 = v332;
        long long v226 = v333;
        v224[3] = v334;
        v224[4] = v225;
        v224[1] = v227;
        v224[2] = v226;
        long long v228 = v339;
        long long v230 = v336;
        long long v229 = v337;
        v224[7] = v338;
        v224[8] = v228;
        v224[5] = v230;
        v224[6] = v229;
        long long v231 = v343;
        long long v233 = v340;
        long long v232 = v341;
        v224[11] = v342;
        v224[12] = v231;
        v224[9] = v233;
        v224[10] = v232;
        swift_bridgeObjectRetain();
        outlined retain of NodePersonality(&v446);
        outlined retain of [Input]((uint64_t)&v445);
        swift_willThrow();
        outlined init with take of NodePersonality(&v344, &v444);
        outlined release of NodePersonality(&v444);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ShaderGraphNode?(v283, v286);
        outlined consume of ShaderGraphNode?(v277, v280);
        outlined consume of ShaderGraphNode?(v305, v293);
        swift_bridgeObjectRelease();
        swift_release();
        long long v234 = &v446;
        goto LABEL_321;
      }
      uint64_t object = *(void *)(v98 + 40);
      uint64_t v316 = *(void *)(v98 + 32);
      uint64_t v99 = *(void *)(v98 + 48);
      unint64_t v100 = *(void *)(v98 + 56);
      uint64_t v101 = *(void *)(v98 + 64);
      char v102 = *(unsigned char *)(v98 + 72);
      uint64_t v103 = *(void *)(v98 + 80);
      if (v99 == 0x65727574786574 && v100 == 0xE700000000000000)
      {
        swift_bridgeObjectRetain_n();
        swift_retain();
        unint64_t v100 = 0xE700000000000000;
        swift_bridgeObjectRetain();
        uint64_t v99 = 0x65727574786574;
        uint64_t v104 = v316;
      }
      else
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          swift_bridgeObjectRetain_n();
          if (v315 != 1)
          {
            uint64_t v111 = 1;
            uint64_t v112 = v271;
            while (1)
            {
              unint64_t v113 = (v111 + 1);
              if (__OFADD__(v111, 1)) {
                break;
              }
              uint64_t v114 = *(v112 - 5);
              uint64_t v316 = *(v112 - 6);
              uint64_t v99 = *(v112 - 4);
              unint64_t v100 = *(v112 - 3);
              uint64_t v314 = *(v112 - 2);
              char v102 = *((unsigned char *)v112 - 8);
              uint64_t v103 = *v112;
              if (v99 == 0x65727574786574 && v100 == 0xE700000000000000)
              {
                uint64_t object = v114;
                swift_retain();
                unint64_t v100 = 0xE700000000000000;
                swift_bridgeObjectRetain();
                uint64_t v99 = 0x65727574786574;
LABEL_148:
                uint64_t v104 = v316;
                uint64_t v101 = v314;
                goto LABEL_149;
              }
              if (_stringCompareWithSmolCheck(_:_:expecting:)())
              {
                uint64_t object = v114;
                swift_retain();
                swift_bridgeObjectRetain();
                goto LABEL_148;
              }
              v112 += 7;
              ++v111;
              if (v113 == v315) {
                goto LABEL_320;
              }
            }
            __break(1u);
            goto LABEL_336;
          }
          goto LABEL_320;
        }
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v104 = v316;
      }
LABEL_149:
      v522[0] = v104;
      v522[1] = object;
      v522[2] = v99;
      v522[3] = v100;
      char v523 = v102;
      v522[4] = v101;
      uint64_t v524 = v103;
      swift_bridgeObjectRelease_n();
      long long v118 = v301;
      Graph.convertFilenameInput(_:movingTo:textureAssignments:customUniformsType:)((uint64_t *)&v518, (unint64_t)v522, v304, v299);
      uint64_t v28 = v318;
      long long v301 = v118;
      if (v118)
      {
        swift_bridgeObjectRelease();
        swift_release();
        outlined init with take of NodePersonality(&v344, &v448);
        outlined release of NodePersonality(&v448);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ShaderGraphNode?(v283, v286);
        outlined consume of ShaderGraphNode?(v277, v280);
        outlined consume of ShaderGraphNode?(v305, v293);
        swift_bridgeObjectRelease();
        swift_release();
        outlined init with take of NodePersonality(&v346, &v447);
        long long v235 = (unint64_t *)&v447;
        goto LABEL_323;
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      unint64_t v26 = v305;
      goto LABEL_151;
    }
    uint64_t v29 = v317;
    if (v316 == 0x64726F6F63786574 && v74 == 0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v105 = v294;
      uint64_t v315 = specialized Array._getCount()(v294);
      if (!v315) {
        goto LABEL_328;
      }
      uint64_t object = *(void *)(v105 + 32);
      uint64_t v106 = *(void *)(v105 + 40);
      uint64_t v107 = *(void *)(v105 + 48);
      unint64_t v108 = *(void *)(v105 + 56);
      uint64_t v109 = *(void *)(v105 + 64);
      char v110 = *(unsigned char *)(v105 + 72);
      uint64_t v316 = *(void *)(v105 + 80);
      if (v107 == 0x64726F6F63 && v108 == 0xE500000000000000)
      {
        swift_bridgeObjectRetain_n();
        swift_retain();
        unint64_t v108 = 0xE500000000000000;
        swift_bridgeObjectRetain();
        uint64_t v107 = 0x64726F6F63;
      }
      else
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          swift_bridgeObjectRetain_n();
          if (v315 != 1)
          {
            uint64_t v119 = 1;
            long long v120 = v271;
            while (1)
            {
              long long v121 = (v119 + 1);
              if (__OFADD__(v119, 1)) {
                break;
              }
              uint64_t v106 = *(v120 - 5);
              uint64_t v314 = *(v120 - 6);
              uint64_t v107 = *(v120 - 4);
              unint64_t v108 = *(v120 - 3);
              uint64_t v109 = *(v120 - 2);
              char v110 = *((unsigned char *)v120 - 8);
              uint64_t v316 = *v120;
              if (v107 == 0x64726F6F63 && v108 == 0xE500000000000000)
              {
                swift_retain();
                unint64_t v108 = 0xE500000000000000;
                swift_bridgeObjectRetain();
                uint64_t v107 = 0x64726F6F63;
LABEL_169:
                unint64_t v25 = v511;
                uint64_t object = v314;
                goto LABEL_139;
              }
              if (_stringCompareWithSmolCheck(_:_:expecting:)())
              {
                swift_retain();
                swift_bridgeObjectRetain();
                goto LABEL_169;
              }
              v120 += 7;
              ++v119;
              if (v121 == v315) {
                goto LABEL_329;
              }
            }
            __break(1u);
LABEL_339:
            outlined init with take of NodePersonality(&v344, &v460);
            outlined release of NodePersonality(&v460);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of ShaderGraphNode?(v283, v286);
            outlined consume of ShaderGraphNode?(v277, v280);
            outlined consume of ShaderGraphNode?(v305, v293);
            swift_bridgeObjectRelease();
            swift_release();
            outlined init with take of NodePersonality(&v346, &v459);
            long long v234 = (unint64_t *)&v459;
LABEL_321:
            outlined release of NodePersonality(v234);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_312:
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
LABEL_329:
          swift_bridgeObjectRelease_n();
          outlined init with take of NodePersonality(&v346, &v451);
          uint64_t v450 = v347;
          Swift::String v324 = v288;
          uint64_t v325 = v289;
          uint64_t v326 = v290;
          uint64_t v327 = v291;
          char v328 = v292;
          uint64_t v329 = 0x64726F6F63;
          unint64_t v330 = 0xE500000000000000;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v324);
          outlined init with take of UserGraphError.ErrorType((uint64_t)&v324, (uint64_t)&v331);
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          long long v343 = 0uLL;
          swift_allocError();
          *long long v238 = v331;
          long long v239 = v335;
          long long v241 = v332;
          long long v240 = v333;
          v238[3] = v334;
          v238[4] = v239;
          v238[1] = v241;
          v238[2] = v240;
          long long v242 = v339;
          long long v244 = v336;
          long long v243 = v337;
          v238[7] = v338;
          v238[8] = v242;
          v238[5] = v244;
          v238[6] = v243;
          long long v245 = v343;
          long long v247 = v340;
          long long v246 = v341;
          v238[11] = v342;
          v238[12] = v245;
          v238[9] = v247;
          v238[10] = v246;
          swift_bridgeObjectRetain();
          outlined retain of NodePersonality(&v451);
          outlined retain of [Input]((uint64_t)&v450);
          swift_willThrow();
          outlined init with take of NodePersonality(&v344, &v449);
          outlined release of NodePersonality(&v449);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of ShaderGraphNode?(v283, v286);
          outlined consume of ShaderGraphNode?(v277, v280);
          outlined consume of ShaderGraphNode?(v305, v293);
          swift_bridgeObjectRelease();
          swift_release();
          long long v234 = &v451;
          goto LABEL_321;
        }
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      unint64_t v25 = v511;
LABEL_139:
      *(void *)&long long v525 = object;
      *((void *)&v525 + 1) = v106;
      uint64_t v526 = v107;
      unint64_t v527 = v108;
      char v529 = v110;
      uint64_t v528 = v109;
      uint64_t v530 = v316;
      swift_bridgeObjectRelease_n();
      Graph.moveEdge(from:to:)((uint64_t)&v518, &v525);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      unint64_t v26 = v305;
      uint64_t v28 = v318;
      uint64_t v27 = v320;
      goto LABEL_101;
    }
    if (v316 == 0x6C6576656CLL && v74 == 0xE500000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v116 = (uint64_t)v301;
      ShaderGraphNode.subscript.getter(0x6C6576656CLL, 0xE500000000000000, (uint64_t)&v353);
      uint64_t object = v116;
      uint64_t v28 = v318;
      uint64_t v27 = v320;
      unint64_t v25 = v511;
      if (v116) {
        goto LABEL_334;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
      uint64_t v117 = swift_allocObject();
      *(_OWORD *)(v117 + 16) = v272;
      *(void *)(v117 + 32) = 28265;
      *(void *)(v117 + 40) = 0xE200000000000000;
      *(void *)(v117 + 48) = v65;
      swift_retain();
      specialized Input.prependFunction(_:label:arguments:in:)(0x6C6576656CLL, 0xE500000000000000, v117, v309, v354);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      ShaderGraphNode.subscript.getter(28265, 0xE200000000000000, (uint64_t)v355);
      long long v301 = 0;
      Graph.moveEdge(from:to:)((uint64_t)&v518, v355);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(v354, v452);
      outlined release of NodePersonality(v452);
      swift_bridgeObjectRelease();
      goto LABEL_145;
    }
    uint64_t v28 = v318;
    uint64_t v27 = v320;
    if (v73 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)())
    {
      swift_bridgeObjectRelease();
      long long v123 = v301;
      ShaderGraphNode.subscript.getter(1935763810, 0xE400000000000000, (uint64_t)&v356);
      if (v123) {
        goto LABEL_337;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
      uint64_t v124 = swift_allocObject();
      *(_OWORD *)(v124 + 16) = v272;
      *(void *)(v124 + 32) = 28265;
      *(void *)(v124 + 40) = 0xE200000000000000;
      *(void *)(v124 + 48) = v65;
      swift_retain();
      specialized Input.prependFunction(_:label:arguments:in:)(1935763810, 0xE400000000000000, v124, v309, v357);
      uint64_t object = 0;
      unint64_t v25 = v511;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      ShaderGraphNode.subscript.getter(28265, 0xE200000000000000, (uint64_t)v358);
      long long v301 = 0;
      Graph.moveEdge(from:to:)((uint64_t)&v518, v358);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(v357, v455);
      outlined release of NodePersonality(v455);
      swift_bridgeObjectRelease();
LABEL_145:
      swift_bridgeObjectRelease();
      unint64_t v26 = v305;
      goto LABEL_102;
    }
    if (v316 == 0x5F646F6C5F6E696DLL && v319 == 0xED0000706D616C63
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      long long v125 = v301;
      ShaderGraphNode.subscript.getter(0x5F646F6C5F6E696DLL, 0xED0000706D616C63, (uint64_t)&v359);
      if (v125) {
        goto LABEL_339;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
      uint64_t v126 = swift_allocObject();
      *(_OWORD *)(v126 + 16) = v272;
      *(void *)(v126 + 32) = 28265;
      *(void *)(v126 + 40) = 0xE200000000000000;
      *(void *)(v126 + 48) = v65;
      swift_retain();
      specialized Input.prependFunction(_:label:arguments:in:)(0x5F646F6C5F6E696DLL, 0xED0000706D616C63, v126, v309, v360);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      ShaderGraphNode.subscript.getter(28265, 0xE200000000000000, (uint64_t)v361);
      long long v301 = 0;
      Graph.moveEdge(from:to:)((uint64_t)&v518, v361);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(v360, v458);
      outlined release of NodePersonality(v458);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v26 = v305;
      goto LABEL_152;
    }
    if (v316 == 0x746E656964617267 && v319 == 0xEC000000785F6432
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (v286)
      {
        v285 &= 1u;
      }
      else
      {
        long long v127 = v301;
        ShaderGraphNode.subscript.getter(0x746E656964617267, 0xE800000000000000, (uint64_t)&v362);
        long long v301 = v127;
        if (v127)
        {
          outlined init with take of NodePersonality(&v344, &v464);
          outlined release of NodePersonality(&v464);
          swift_bridgeObjectRelease();
          uint64_t v270 = (uint64_t *)v345;
          uint64_t v249 = (unint64_t *)&v463;
LABEL_342:
          swift_bridgeObjectRelease();
          unint64_t v250 = v277;
          uint64_t v251 = v280;
          goto LABEL_343;
        }
        Input.prependCreateGradient2DNode(in:)(v309, &v364);
        long long v301 = 0;
        swift_release();
        swift_bridgeObjectRelease();
        int v285 = v368;
        uint64_t v281 = v366;
        uint64_t v282 = v367;
        uint64_t v286 = *((void *)&v364 + 1);
        unint64_t v283 = v364;
        uint64_t v284 = v365;
      }
      unint64_t v531 = v283;
      uint64_t v532 = v286;
      uint64_t v533 = v284;
      uint64_t v534 = v281;
      uint64_t v535 = v282;
      char v536 = v285;
      outlined copy of NodePersonality(v283);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      long long v128 = v301;
      ShaderGraphNode.subscript.getter(2019840100, 0xE400000000000000, (uint64_t)v369);
      if (v128)
      {
        outlined init with take of NodePersonality(&v344, v462);
        outlined release of NodePersonality(v462);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v248 = v283;
        outlined consume of NodePersonality(v283);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v248);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ShaderGraphNode?(v277, v280);
        outlined consume of ShaderGraphNode?(v305, v293);
        swift_bridgeObjectRelease();
        swift_release();
        outlined init with take of NodePersonality(&v346, &v461);
        long long v235 = (unint64_t *)&v461;
        goto LABEL_323;
      }
      outlined consume of NodePersonality(v283);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Graph.moveEdge(from:to:)((uint64_t)&v518, v369);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      goto LABEL_184;
    }
    if (v316 == 0x746E656964617267 && v319 == 0xEC000000795F6432
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (v286)
      {
        v285 &= 1u;
      }
      else
      {
        char v129 = v301;
        ShaderGraphNode.subscript.getter(0x746E656964617267, 0xE800000000000000, (uint64_t)&v370);
        long long v301 = v129;
        if (v129)
        {
          outlined init with take of NodePersonality(&v344, &v468);
          outlined release of NodePersonality(&v468);
          swift_bridgeObjectRelease();
          unint64_t v269 = (uint64_t *)v345;
          uint64_t v249 = (unint64_t *)&v467;
          goto LABEL_342;
        }
        Input.prependCreateGradient2DNode(in:)(v309, &v372);
        long long v301 = 0;
        swift_release();
        swift_bridgeObjectRelease();
        int v285 = v376;
        uint64_t v281 = v374;
        uint64_t v282 = v375;
        uint64_t v286 = *((void *)&v372 + 1);
        unint64_t v283 = v372;
        uint64_t v284 = v373;
      }
      unint64_t v537 = v283;
      uint64_t v538 = v286;
      uint64_t v539 = v284;
      uint64_t v540 = v281;
      uint64_t v541 = v282;
      char v542 = v285;
      outlined copy of NodePersonality(v283);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      long long v130 = v301;
      ShaderGraphNode.subscript.getter(2036617316, 0xE400000000000000, (uint64_t)v377);
      if (v130)
      {
        outlined init with take of NodePersonality(&v344, v466);
        outlined release of NodePersonality(v466);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v254 = v283;
        outlined consume of NodePersonality(v283);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v254);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ShaderGraphNode?(v277, v280);
        outlined consume of ShaderGraphNode?(v305, v293);
        swift_bridgeObjectRelease();
        swift_release();
        outlined init with take of NodePersonality(&v346, &v465);
        long long v235 = (unint64_t *)&v465;
        goto LABEL_323;
      }
      outlined consume of NodePersonality(v283);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Graph.moveEdge(from:to:)((uint64_t)&v518, v377);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      goto LABEL_184;
    }
    if (v316 == 0x746E656964617267 && v319 == 0xEC000000785F6433
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (v280)
      {
        v279 &= 1u;
      }
      else
      {
        long long v131 = v301;
        ShaderGraphNode.subscript.getter(0x746E656964617267, 0xE800000000000000, (uint64_t)&v378);
        long long v301 = v131;
        if (v131)
        {
          outlined init with take of NodePersonality(&v344, &v472);
          outlined release of NodePersonality(&v472);
          swift_bridgeObjectRelease();
          Swift::String v268 = (uint64_t *)v345;
          uint64_t v249 = (unint64_t *)&v471;
          goto LABEL_349;
        }
        Input.prependCreateGradient3DNode(in:)(v309, &v380);
        long long v301 = 0;
        swift_release();
        swift_bridgeObjectRelease();
        int v279 = v384;
        uint64_t v275 = v382;
        uint64_t v276 = v383;
        uint64_t v280 = *((void *)&v380 + 1);
        unint64_t v277 = v380;
        uint64_t v278 = v381;
      }
      unint64_t v543 = v277;
      uint64_t v544 = v280;
      uint64_t v545 = v278;
      uint64_t v546 = v275;
      uint64_t v547 = v276;
      char v548 = v279;
      outlined copy of NodePersonality(v277);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v132 = v301;
      ShaderGraphNode.subscript.getter(2019840100, 0xE400000000000000, (uint64_t)v385);
      if (v132)
      {
        outlined init with take of NodePersonality(&v344, v470);
        outlined release of NodePersonality(v470);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v255 = v277;
        outlined consume of NodePersonality(v277);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ShaderGraphNode?(v283, v286);
        outlined consume of NodePersonality(v255);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ShaderGraphNode?(v305, v293);
        swift_bridgeObjectRelease();
        swift_release();
        outlined init with take of NodePersonality(&v346, &v469);
        long long v235 = (unint64_t *)&v469;
        goto LABEL_323;
      }
      outlined consume of NodePersonality(v277);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Graph.moveEdge(from:to:)((uint64_t)&v518, v385);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      goto LABEL_184;
    }
    if (v316 == 0x746E656964617267 && v319 == 0xEC000000795F6433
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (v280)
      {
        v279 &= 1u;
      }
      else
      {
        uint64_t v133 = v301;
        ShaderGraphNode.subscript.getter(0x746E656964617267, 0xE800000000000000, (uint64_t)&v386);
        long long v301 = v133;
        if (v133)
        {
          outlined init with take of NodePersonality(&v344, &v476);
          outlined release of NodePersonality(&v476);
          swift_bridgeObjectRelease();
          uint64_t v267 = (uint64_t *)v345;
          uint64_t v249 = (unint64_t *)&v475;
LABEL_349:
          swift_bridgeObjectRelease();
          unint64_t v250 = v283;
          uint64_t v251 = v286;
LABEL_343:
          outlined consume of ShaderGraphNode?(v250, v251);
          unint64_t v252 = v305;
          uint64_t v253 = v293;
          goto LABEL_344;
        }
        Input.prependCreateGradient3DNode(in:)(v309, &v388);
        long long v301 = 0;
        swift_release();
        swift_bridgeObjectRelease();
        int v279 = v392;
        uint64_t v275 = v390;
        uint64_t v276 = v391;
        uint64_t v280 = *((void *)&v388 + 1);
        unint64_t v277 = v388;
        uint64_t v278 = v389;
      }
      unint64_t v549 = v277;
      uint64_t v550 = v280;
      uint64_t v551 = v278;
      uint64_t v552 = v275;
      uint64_t v553 = v276;
      char v554 = v279;
      outlined copy of NodePersonality(v277);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v134 = v301;
      ShaderGraphNode.subscript.getter(2036617316, 0xE400000000000000, (uint64_t)v393);
      if (v134)
      {
        outlined init with take of NodePersonality(&v344, v474);
        outlined release of NodePersonality(v474);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v256 = v277;
        outlined consume of NodePersonality(v277);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ShaderGraphNode?(v283, v286);
        outlined consume of NodePersonality(v256);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ShaderGraphNode?(v305, v293);
        swift_bridgeObjectRelease();
        swift_release();
        outlined init with take of NodePersonality(&v346, &v473);
        long long v235 = (unint64_t *)&v473;
        goto LABEL_323;
      }
      outlined consume of NodePersonality(v277);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Graph.moveEdge(from:to:)((uint64_t)&v518, v393);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      goto LABEL_184;
    }
    if (v316 == 0x746C7561666564 && v319 == 0xE700000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      long long v135 = v301;
      ShaderGraphNode.subscript.getter(v316, v319, (uint64_t)v394);
      if (v135)
      {
        outlined init with take of NodePersonality(&v344, &v478);
        outlined release of NodePersonality(&v478);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ShaderGraphNode?(v283, v286);
        outlined consume of ShaderGraphNode?(v277, v280);
        outlined consume of ShaderGraphNode?(v305, v293);
        swift_bridgeObjectRelease_n();
        swift_release();
        outlined init with take of NodePersonality(&v346, &v477);
        long long v234 = (unint64_t *)&v477;
        goto LABEL_321;
      }
      swift_bridgeObjectRelease();
      Graph.moveEdge(from:to:)((uint64_t)&v518, v394);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      goto LABEL_184;
    }
    if (v316 == 0x73696E615F78616DLL && v319 == 0xEE0079706F72746FLL
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      long long v136 = v301;
      ShaderGraphNode.subscript.getter(0x73696E615F78616DLL, 0xEE0079706F72746FLL, (uint64_t)&v395);
      if (v136)
      {
        outlined init with take of NodePersonality(&v344, &v481);
        outlined release of NodePersonality(&v481);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ShaderGraphNode?(v283, v286);
        outlined consume of ShaderGraphNode?(v277, v280);
        outlined consume of ShaderGraphNode?(v305, v293);
        swift_bridgeObjectRelease();
        swift_release();
        outlined init with take of NodePersonality(&v346, &v480);
        long long v234 = (unint64_t *)&v480;
        goto LABEL_321;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
      uint64_t v137 = swift_allocObject();
      *(_OWORD *)(v137 + 16) = v272;
      *(void *)(v137 + 32) = 28265;
      *(void *)(v137 + 40) = 0xE200000000000000;
      *(void *)(v137 + 48) = v569;
      swift_retain();
      specialized Input.prependFunction(_:label:arguments:in:)(0x73696E615F78616DLL, 0xEE0079706F72746FLL, v137, v309, v396);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      ShaderGraphNode.subscript.getter(28265, 0xE200000000000000, (uint64_t)v397);
      Graph.moveEdge(from:to:)((uint64_t)&v518, v397);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(v396, v479);
      outlined release of NodePersonality(v479);
      swift_bridgeObjectRelease();
      goto LABEL_184;
    }
    if (v316 == 0x6E696D5F646F6CLL && v319 == 0xE700000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (v293)
      {
        v287 &= 1u;
      }
      else
      {
        long long v138 = v301;
        ShaderGraphNode.subscript.getter(0x6D616C635F646F6CLL, v266, (uint64_t)&v398);
        long long v301 = v138;
        if (v138)
        {
          outlined init with take of NodePersonality(&v344, &v485);
          outlined release of NodePersonality(&v485);
          swift_bridgeObjectRelease();
          long long v264 = (uint64_t *)v345;
          uint64_t v249 = (unint64_t *)&v484;
          goto LABEL_357;
        }
        Input.prependCreateLODClampNode(in:)(v309, &v400);
        long long v301 = 0;
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v318 = v403;
        int v287 = v404;
        uint64_t v320 = v402;
        uint64_t v273 = v401;
        uint64_t v293 = *((void *)&v400 + 1);
        unint64_t v305 = v400;
      }
      unint64_t v555 = v305;
      uint64_t v556 = v293;
      uint64_t v557 = v273;
      uint64_t v558 = v320;
      uint64_t v559 = v318;
      char v560 = v287;
      outlined copy of NodePersonality(v305);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      long long v139 = v301;
      ShaderGraphNode.subscript.getter(0x6E696D5F646F6CLL, 0xE700000000000000, (uint64_t)v405);
      if (v139)
      {
        outlined init with take of NodePersonality(&v344, v483);
        outlined release of NodePersonality(v483);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v257 = v305;
        outlined consume of NodePersonality(v305);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ShaderGraphNode?(v283, v286);
        outlined consume of ShaderGraphNode?(v277, v280);
        outlined consume of NodePersonality(v257);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined init with take of NodePersonality(&v346, &v482);
        long long v235 = (unint64_t *)&v482;
        goto LABEL_323;
      }
      unint64_t v26 = v305;
      outlined consume of NodePersonality(v305);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Graph.moveEdge(from:to:)((uint64_t)&v518, v405);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      if ((v316 != 0x78616D5F646F6CLL || v319 != 0xE700000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if ((v316 != 0x64726F6F63 || v319 != 0xE500000000000000)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          && (v316 != 0x7365726464615F73 || v319 != 0xE900000000000073))
        {
          uint64_t v142 = v316;
          uint64_t v143 = v319;
          char v144 = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL v145 = v142 == 0x7365726464615F74 && v143 == 0xE900000000000073;
          BOOL v146 = v145;
          if ((v144 & 1) == 0
            && !v146
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v316 != 0x635F726564726F62 || v319 != 0xEC000000726F6C6FLL)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v316 != 0x746C69665F67616DLL || v319 != 0xEA00000000007265))
          {
            uint64_t v147 = v316;
            uint64_t v148 = v319;
            char v149 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL v150 = v147 == 0x746C69665F6E696DLL && v148 == 0xEA00000000007265;
            BOOL v151 = v150;
            if ((v149 & 1) == 0 && !v151)
            {
              uint64_t v152 = v316;
              uint64_t v153 = v319;
              char v154 = _stringCompareWithSmolCheck(_:_:expecting:)();
              BOOL v155 = v152 == 0x746C69665F70696DLL && v153 == 0xEA00000000007265;
              BOOL v156 = v155;
              if ((v154 & 1) == 0
                && !v156
                && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
                && (v316 != 0x5F657261706D6F63 || v319 != 0xEC000000636E7566)
                && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                swift_bridgeObjectRelease();
                if (one-time initialization token for logger != -1) {
                  swift_once();
                }
                uint64_t v158 = v297;
                uint64_t v159 = __swift_project_value_buffer(v297, (uint64_t)logger);
                (*v263)(v296, v159, v158);
                uint64_t v160 = swift_allocObject();
                long long v161 = v519;
                *(_OWORD *)(v160 + 16) = v518;
                *(_OWORD *)(v160 + 32) = v161;
                *(_OWORD *)(v160 + 48) = v520;
                *(void *)(v160 + 64) = v521;
                uint64_t v162 = v160;
                uint64_t v314 = v160;
                outlined init with take of NodePersonality(&v496, &v567);
                uint64_t v310 = *(void *)&v497[0];
                v568[0] = *(void *)&v497[0];
                long long v163 = (_OWORD *)swift_allocObject();
                long long v164 = v497[0];
                v163[1] = v496;
                v163[2] = v164;
                *(_OWORD *)((char *)v163 + 41) = *(_OWORD *)((char *)v497 + 9);
                uint64_t v165 = swift_allocObject();
                *(void *)(v165 + 16) = partial apply for implicit closure #8 in closure #1 in Graph.transformRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:);
                *(void *)(v165 + 24) = v163;
                uint64_t v166 = v165;
                uint64_t v313 = v165;
                swift_bridgeObjectRetain();
                swift_retain();
                swift_bridgeObjectRetain();
                outlined retain of NodePersonality(&v567);
                outlined retain of [Input]((uint64_t)v568);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_retain();
                outlined retain of NodePersonality(&v567);
                outlined retain of [Input]((uint64_t)v568);
                long long v303 = v163;
                swift_retain();
                uint64_t v315 = Logger.logObject.getter();
                LODWORD(v312) = static os_log_type_t.error.getter();
                uint64_t v311 = swift_allocObject();
                *(unsigned char *)(v311 + 16) = 32;
                uint64_t v167 = swift_allocObject();
                *(unsigned char *)(v167 + 16) = 8;
                uint64_t v168 = swift_allocObject();
                *(void *)(v168 + 16) = protocol witness for XMLNode.name.getter in conformance XMLParserDelegate.StringNode;
                *(void *)(v168 + 24) = v162;
                uint64_t v169 = swift_allocObject();
                *(void *)(v169 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
                *(void *)(v169 + 24) = v168;
                uint64_t object = swift_allocObject();
                *(unsigned char *)(object + 16) = 32;
                uint64_t v170 = swift_allocObject();
                *(unsigned char *)(v170 + 16) = 8;
                uint64_t v171 = swift_allocObject();
                *(void *)(v171 + 16) = partial apply for specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
                *(void *)(v171 + 24) = v166;
                uint64_t v172 = swift_allocObject();
                *(void *)(v172 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                *(void *)(v172 + 24) = v171;
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>);
                uint64_t v173 = swift_allocObject();
                *(_OWORD *)(v173 + 16) = v260;
                uint64_t v174 = v311;
                *(void *)(v173 + 32) = partial apply for closure #1 in OSLogArguments.append(_:);
                *(void *)(v173 + 40) = v174;
                *(void *)(v173 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
                *(void *)(v173 + 56) = v167;
                *(void *)(v173 + 64) = partial apply for closure #1 in OSLogArguments.append(_:);
                *(void *)(v173 + 72) = v169;
                *(void *)(v173 + 80) = closure #1 in OSLogArguments.append(_:)partial apply;
                *(void *)(v173 + 88) = object;
                *(void *)(v173 + 96) = closure #1 in OSLogArguments.append(_:)partial apply;
                *(void *)(v173 + 104) = v170;
                *(void *)(v173 + 112) = closure #1 in OSLogArguments.append(_:)partial apply;
                *(void *)(v173 + 120) = v172;
                swift_retain();
                uint64_t v302 = v168;
                swift_retain();
                swift_retain();
                uint64_t v298 = v171;
                swift_retain();
                swift_retain();
                swift_retain();
                uint64_t v300 = v169;
                swift_retain();
                swift_retain();
                swift_retain();
                swift_retain();
                swift_bridgeObjectRelease();
                os_log_type_t v175 = v312;
                if (os_log_type_enabled(v315, (os_log_type_t)v312))
                {
                  uint64_t object = swift_slowAlloc();
                  uint64_t v312 = swift_slowAlloc();
                  *(void *)&long long v331 = v312;
                  *(_WORD *)uint64_t object = 514;
                  *(unsigned char *)(object + 2) = 32;
                  swift_release();
                  *(unsigned char *)(object + 3) = 8;
                  swift_release();
                  unint64_t v176 = v319;
                  swift_bridgeObjectRetain();
                  v324._char countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v316, v176, (uint64_t *)&v331);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  *(unsigned char *)(object + 12) = 32;
                  swift_release();
                  *(unsigned char *)(object + 13) = 8;
                  swift_release();
                  uint64_t v177 = ShaderGraphNode.ID.description.getter();
                  v324._char countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v177, v178, (uint64_t *)&v331);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  outlined release of NodePersonality(&v567);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  long long v179 = v315;
                  _os_log_impl(&dword_25C27E000, v315, v175, "Ignoring unexpected input '%s' on node '%s'", (uint8_t *)object, 0x16u);
                  uint64_t v180 = v312;
                  swift_arrayDestroy();
                  MEMORY[0x261185880](v180, -1, -1);
                  MEMORY[0x261185880](object, -1, -1);
                  swift_bridgeObjectRelease();
                  swift_release();
                }
                else
                {
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_bridgeObjectRelease_n();
                  swift_release_n();
                  outlined release of NodePersonality(&v567);

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                (*v262)(v296, v297);
                goto LABEL_185;
              }
            }
          }
        }
        long long v157 = v301;
        ShaderGraphNode.subscript.getter(v316, v319, (uint64_t)v414);
        if (v157)
        {
          outlined init with take of NodePersonality(&v344, &v491);
          outlined release of NodePersonality(&v491);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of ShaderGraphNode?(v283, v286);
          outlined consume of ShaderGraphNode?(v277, v280);
          outlined consume of ShaderGraphNode?(v305, v293);
          swift_bridgeObjectRelease_n();
          swift_release();
          outlined init with take of NodePersonality(&v346, &v490);
          long long v234 = (unint64_t *)&v490;
          goto LABEL_321;
        }
        swift_bridgeObjectRelease();
        Graph.moveEdge(from:to:)((uint64_t)&v518, v414);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
LABEL_184:
        swift_bridgeObjectRelease();
        long long v301 = 0;
LABEL_185:
        unint64_t v26 = v305;
LABEL_186:
        uint64_t v28 = v318;
LABEL_151:
        uint64_t v27 = v320;
LABEL_152:
        unint64_t v25 = v511;
        goto LABEL_101;
      }
      swift_bridgeObjectRelease();
      if (v293)
      {
        v287 &= 1u;
      }
      else
      {
        long long v140 = v301;
        ShaderGraphNode.subscript.getter(0x6D616C635F646F6CLL, v266, (uint64_t)&v406);
        long long v301 = v140;
        if (v140)
        {
          outlined init with take of NodePersonality(&v344, &v489);
          outlined release of NodePersonality(&v489);
          swift_bridgeObjectRelease();
          long long v265 = (uint64_t *)v345;
          uint64_t v249 = (unint64_t *)&v488;
LABEL_357:
          swift_bridgeObjectRelease();
          outlined consume of ShaderGraphNode?(v283, v286);
          unint64_t v252 = v277;
          uint64_t v253 = v280;
LABEL_344:
          outlined consume of ShaderGraphNode?(v252, v253);
          swift_bridgeObjectRelease();
          swift_release();
          outlined init with take of NodePersonality(&v346, v249);
          long long v235 = v249;
          goto LABEL_323;
        }
        Input.prependCreateLODClampNode(in:)(v309, &v408);
        long long v301 = 0;
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v318 = v411;
        int v287 = v412;
        uint64_t v320 = v410;
        uint64_t v273 = v409;
        uint64_t v293 = *((void *)&v408 + 1);
        unint64_t v305 = v408;
      }
      unint64_t v561 = v305;
      uint64_t v562 = v293;
      uint64_t v563 = v273;
      uint64_t v564 = v320;
      uint64_t v565 = v318;
      char v566 = v287;
      outlined copy of NodePersonality(v305);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      long long v141 = v301;
      ShaderGraphNode.subscript.getter(0x78616D5F646F6CLL, 0xE700000000000000, (uint64_t)v413);
      if (v141)
      {
        outlined init with take of NodePersonality(&v344, v487);
        outlined release of NodePersonality(v487);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v258 = v305;
        outlined consume of NodePersonality(v305);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ShaderGraphNode?(v283, v286);
        outlined consume of ShaderGraphNode?(v277, v280);
        outlined consume of NodePersonality(v258);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined init with take of NodePersonality(&v346, &v486);
        long long v235 = (unint64_t *)&v486;
        goto LABEL_323;
      }
      unint64_t v26 = v305;
      outlined consume of NodePersonality(v305);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Graph.moveEdge(from:to:)((uint64_t)&v518, v413);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    long long v301 = 0;
    goto LABEL_186;
  }
  uint64_t v29 = v317;
  if (v83 == 2) {
    goto LABEL_106;
  }
  uint64_t v86 = 6;
  while (1)
  {
    uint64_t v87 = v86 - 3;
    if (__OFADD__(v86 - 4, 1)) {
      break;
    }
    uint64_t v88 = swift_bridgeObjectRetain();
    uint64_t object = specialized static Set.== infix(_:_:)(v88, v81);
    swift_bridgeObjectRelease();
    if (object)
    {
      uint64_t v65 = v569;
      goto LABEL_108;
    }
    ++v86;
    uint64_t v29 = v317;
    if (v87 == v83) {
      goto LABEL_106;
    }
  }
LABEL_336:
  __break(1u);
LABEL_337:
  outlined init with take of NodePersonality(&v344, &v457);
  outlined release of NodePersonality(&v457);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ShaderGraphNode?(v283, v286);
  outlined consume of ShaderGraphNode?(v277, v280);
  outlined consume of ShaderGraphNode?(v305, v293);
  swift_bridgeObjectRelease();
  swift_release();
  outlined init with take of NodePersonality(&v346, &v456);
  long long v235 = (unint64_t *)&v456;
LABEL_323:
  outlined release of NodePersonality(v235);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Graph.insertSampleTexture(for:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v6 = *a1;
  long long v104 = *(_OWORD *)(a1 + 1);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  char v9 = *((unsigned char *)a1 + 40);
  ShaderGraphNode.out.getter((uint64_t)v118);
  if (v3)
  {

    ShaderGraphNode.out.getter((uint64_t)v131);
    long long v101 = v131[1];
    long long v102 = v131[0];
    uint64_t v10 = v132;
    char v11 = v133;
    uint64_t v12 = v134;
    outlined init with take of NodePersonality(a1, v154);
    uint64_t v13 = a1[1];
    uint64_t v152 = a1[2];
    uint64_t v153 = v13;
    uint64_t v106 = v6;
    long long v107 = v104;
    uint64_t v108 = v7;
    uint64_t v109 = v8;
    char v110 = v9 & 1;
    long long v111 = v102;
    long long v112 = v101;
    uint64_t v113 = v10;
    char v114 = v11;
    uint64_t v115 = v12;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi2_((uint64_t)&v106);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v106, (uint64_t)v116);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v117 = 0uLL;
    Swift::String v14 = (void *)swift_allocError();
    _OWORD *v15 = v116[0];
    long long v16 = v116[4];
    long long v18 = v116[1];
    long long v17 = v116[2];
    v15[3] = v116[3];
    v15[4] = v16;
    v15[1] = v18;
    _OWORD v15[2] = v17;
    long long v19 = v116[8];
    long long v21 = v116[5];
    long long v20 = v116[6];
    v15[7] = v116[7];
    v15[8] = v19;
    void v15[5] = v21;
    v15[6] = v20;
    long long v22 = v117;
    long long v24 = v116[9];
    long long v23 = v116[10];
    v15[11] = v116[11];
    v15[12] = v22;
    v15[9] = v24;
    v15[10] = v23;
    outlined retain of NodePersonality(v154);
    outlined retain of [Input]((uint64_t)&v153);
    outlined retain of [Input]((uint64_t)&v152);
    swift_willThrow();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)logger);
    id v26 = v14;
    id v27 = v14;
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 138412290;
      id v32 = v14;
      uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&v116[0] = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v31 = v33;

      _os_log_impl(&dword_25C27E000, v28, v29, "%@", v30, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261185880](v31, -1, -1);
      MEMORY[0x261185880](v30, -1, -1);
    }
    else
    {
    }
    return swift_willThrow();
  }
  else
  {
    uint64_t v103 = v2;
    uint64_t v34 = v119;
    long long v151 = v120;
    outlined release of String((uint64_t)&v151);
    uint64_t v35 = specialized ShaderGraphNode.metalTextureType.getter(*a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_25C41BFB0;
    uint64_t v37 = one-time initialization token for sampler;
    swift_retain();
    if (v37 != -1) {
      swift_once();
    }
    uint64_t v105 = a2;
    uint64_t v38 = static MetalDataType.sampler;
    *(void *)(v36 + 32) = 0x72656C706D6173;
    *(void *)(v36 + 40) = 0xE700000000000000;
    *(void *)(v36 + 48) = v38;
    *(void *)(v36 + 56) = 0x65727574786574;
    *(void *)(v36 + 64) = 0xE700000000000000;
    *(void *)(v36 + 72) = v35;
    *(void *)(v36 + 80) = 0x746C7561666564;
    *(void *)(v36 + 88) = 0xE700000000000000;
    *(void *)(v36 + 96) = v34;
    uint64_t v39 = one-time initialization token for float2;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v39 != -1) {
      swift_once();
    }
    uint64_t v40 = static MetalDataType.float2;
    *(void *)(v36 + 104) = 0x64726F6F63;
    *(void *)(v36 + 112) = 0xE500000000000000;
    *(void *)(v36 + 120) = v40;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_25C418EE0;
    uint64_t v42 = one-time initialization token for texture2d_half;
    swift_retain();
    if (v42 != -1) {
      swift_once();
    }
    long long v43 = *(uint64_t (**)(uint64_t))(*(void *)v35 + 128);
    uint64_t v44 = swift_retain();
    char v45 = v43(v44);
    swift_release();
    unint64_t v46 = 0xD000000000000018;
    if ((v45 & 1) == 0) {
      unint64_t v46 = 0xD000000000000019;
    }
    unint64_t v47 = 0x800000025C424CC0;
    if (v45) {
      unint64_t v47 = 0x800000025C424CE0;
    }
    *(void *)(v41 + 32) = v46;
    *(void *)(v41 + 40) = v47;
    uint64_t v48 = a1[1];
    specialized Sequence.first(where:)(v48, 1935763810, 0xE400000000000000, v121);
    outlined release of Input?(v121);
    outlined init with take of MetalFunctionNode?((uint64_t)v121, (uint64_t)v149, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (v150)
    {
      if (one-time initialization token for bias != -1) {
        swift_once();
      }
      uint64_t v49 = static MetalDataType.bias;
      swift_retain();
      uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v52 = v50[2];
      unint64_t v51 = v50[3];
      if (v52 >= v51 >> 1) {
        uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v51 > 1), v52 + 1, 1, v50);
      }
      v50[2] = v52 + 1;
      uint64_t v53 = &v50[3 * v52];
      v53[4] = 1935763810;
      v53[5] = 0xE400000000000000;
      v53[6] = v49;
      unint64_t v55 = *(void *)(v41 + 16);
      unint64_t v54 = *(void *)(v41 + 24);
      if (v55 >= v54 >> 1) {
        uint64_t v41 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v54 > 1), v55 + 1, 1, (void *)v41);
      }
      *(void *)(v41 + 16) = v55 + 1;
      uint64_t v56 = v41 + 16 * v55;
      *(void *)(v56 + 32) = 1935763810;
      *(void *)(v56 + 40) = 0xE400000000000000;
    }
    else
    {
      uint64_t v50 = (void *)MEMORY[0x263F8EE78];
    }
    specialized Sequence.first(where:)(v48, 0x6C6576656CLL, 0xE500000000000000, v122);
    outlined release of Input?(v122);
    outlined init with take of MetalFunctionNode?((uint64_t)v122, (uint64_t)v147, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (v148)
    {
      if (one-time initialization token for level != -1) {
        swift_once();
      }
      uint64_t v58 = static MetalDataType.level;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
      }
      unint64_t v60 = v50[2];
      unint64_t v59 = v50[3];
      if (v60 >= v59 >> 1) {
        uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v59 > 1), v60 + 1, 1, v50);
      }
      v50[2] = v60 + 1;
      Swift::Int v61 = &v50[3 * v60];
      v61[4] = 0x6C6576656CLL;
      v61[5] = 0xE500000000000000;
      v61[6] = v58;
      unint64_t v63 = *(void *)(v41 + 16);
      unint64_t v62 = *(void *)(v41 + 24);
      if (v63 >= v62 >> 1) {
        uint64_t v41 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v62 > 1), v63 + 1, 1, (void *)v41);
      }
      *(void *)(v41 + 16) = v63 + 1;
      uint64_t v64 = v41 + 16 * v63;
      *(void *)(v64 + 32) = 6582124;
      *(void *)(v64 + 40) = 0xE300000000000000;
    }
    specialized Sequence.first(where:)(v48, 0x746E656964617267, 0xEC000000785F6432, v123);
    outlined release of Input?(v123);
    outlined init with take of MetalFunctionNode?((uint64_t)v123, (uint64_t)v145, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (v146)
    {
      specialized Sequence.first(where:)(v48, 0x746E656964617267, 0xEC000000795F6432, v124);
      outlined release of Input?(v124);
      outlined init with take of MetalFunctionNode?((uint64_t)v124, (uint64_t)v143, (uint64_t *)&demangling cache variable for type metadata for Input?);
      if (v144)
      {
        if (one-time initialization token for gradient2d != -1) {
          swift_once();
        }
        uint64_t v65 = static MetalDataType.gradient2d;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
        }
        unint64_t v67 = v50[2];
        unint64_t v66 = v50[3];
        if (v67 >= v66 >> 1) {
          uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v66 > 1), v67 + 1, 1, v50);
        }
        v50[2] = v67 + 1;
        Swift::Int v68 = &v50[3 * v67];
        v68[4] = 0x746E656964617267;
        v68[5] = 0xE800000000000000;
        v68[6] = v65;
        unint64_t v70 = *(void *)(v41 + 16);
        unint64_t v69 = *(void *)(v41 + 24);
        if (v70 >= v69 >> 1) {
          uint64_t v41 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v69 > 1), v70 + 1, 1, (void *)v41);
        }
        *(void *)(v41 + 16) = v70 + 1;
        uint64_t v71 = v41 + 16 * v70;
        *(void *)(v71 + 32) = 0x746E656964617267;
        *(void *)(v71 + 40) = 0xEA00000000006432;
      }
    }
    specialized Sequence.first(where:)(v48, 0x746E656964617267, 0xEC000000785F6433, v125);
    outlined release of Input?(v125);
    outlined init with take of MetalFunctionNode?((uint64_t)v125, (uint64_t)v141, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (v142)
    {
      specialized Sequence.first(where:)(v48, 0x746E656964617267, 0xEC000000795F6433, v126);
      outlined release of Input?(v126);
      outlined init with take of MetalFunctionNode?((uint64_t)v126, (uint64_t)v139, (uint64_t *)&demangling cache variable for type metadata for Input?);
      if (v140)
      {
        specialized Sequence.first(where:)(v48, 0x746E656964617267, 0xEC0000007A5F6433, v127);
        outlined release of Input?(v127);
        outlined init with take of MetalFunctionNode?((uint64_t)v127, (uint64_t)v137, (uint64_t *)&demangling cache variable for type metadata for Input?);
        if (v138)
        {
          if (one-time initialization token for gradient2d != -1) {
            swift_once();
          }
          uint64_t v72 = static MetalDataType.gradient2d;
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
          }
          unint64_t v74 = v50[2];
          unint64_t v73 = v50[3];
          if (v74 >= v73 >> 1) {
            uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v73 > 1), v74 + 1, 1, v50);
          }
          v50[2] = v74 + 1;
          char v75 = &v50[3 * v74];
          v75[4] = 0x746E656964617267;
          v75[5] = 0xE800000000000000;
          v75[6] = v72;
          unint64_t v77 = *(void *)(v41 + 16);
          unint64_t v76 = *(void *)(v41 + 24);
          if (v77 >= v76 >> 1) {
            uint64_t v41 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v76 > 1), v77 + 1, 1, (void *)v41);
          }
          *(void *)(v41 + 16) = v77 + 1;
          uint64_t v78 = v41 + 16 * v77;
          *(void *)(v78 + 32) = 0x746E656964617267;
          *(void *)(v78 + 40) = 0xEA00000000006433;
        }
      }
    }
    specialized Sequence.first(where:)(v48, 0x5F646F6C5F6E696DLL, 0xED0000706D616C63, v128);
    outlined release of Input?(v128);
    uint64_t isUniquelyReferenced_nonNull_native = outlined init with take of MetalFunctionNode?((uint64_t)v128, (uint64_t)v135, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (v136)
    {
      if (one-time initialization token for min_lod_clamp != -1) {
        swift_once();
      }
      uint64_t v80 = static MetalDataType.min_lod_clamp;
      swift_retain();
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
        uint64_t v50 = (void *)isUniquelyReferenced_nonNull_native;
      }
      unint64_t v82 = v50[2];
      unint64_t v81 = v50[3];
      if (v82 >= v81 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v81 > 1), v82 + 1, 1, v50);
        uint64_t v50 = (void *)isUniquelyReferenced_nonNull_native;
      }
      v50[2] = v82 + 1;
      uint64_t v83 = (char *)&v50[3 * v82];
      strcpy(v83 + 32, "min_lod_clamp");
      *((_WORD *)v83 + 23) = -4864;
      *((void *)v83 + 6) = v80;
      unint64_t v85 = *(void *)(v41 + 16);
      unint64_t v84 = *(void *)(v41 + 24);
      if (v85 >= v84 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v84 > 1), v85 + 1, 1, (void *)v41);
        uint64_t v41 = isUniquelyReferenced_nonNull_native;
      }
      *(void *)(v41 + 16) = v85 + 1;
      uint64_t v86 = v41 + 16 * v85;
      strcpy((char *)(v86 + 32), "min_lod_clamp");
      *(_WORD *)(v86 + 46) = -4864;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 144))(isUniquelyReferenced_nonNull_native);
    if (result)
    {
      uint64_t v88 = *(void *)(result + 24);
      uint64_t v87 = *(void *)(result + 32);
      swift_bridgeObjectRetain();
      swift_release();
      unint64_t v90 = *(void *)(v41 + 16);
      unint64_t v89 = *(void *)(v41 + 24);
      if (v90 >= v89 >> 1) {
        uint64_t v41 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v89 > 1), v90 + 1, 1, (void *)v41);
      }
      *(void *)(v41 + 16) = v90 + 1;
      uint64_t v91 = v41 + 16 * v90;
      *(void *)(v91 + 32) = v88;
      *(void *)(v91 + 40) = v87;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
      uint64_t v92 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v94 = v93;
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)((uint64_t)v50);
      uint64_t v95 = v36;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
      uint64_t v96 = swift_allocObject();
      *(_OWORD *)(v96 + 16) = xmmword_25C418EE0;
      *(void *)(v96 + 32) = 7632239;
      *(void *)(v96 + 40) = 0xE300000000000000;
      *(void *)(v96 + 48) = v34;
      uint64_t v97 = swift_allocObject();
      *(void *)&v116[0] = v92;
      *((void *)&v116[0] + 1) = v94;
      swift_retain();
      *(void *)(v97 + 16) = String.init<A>(_:)();
      *(void *)(v97 + 24) = v98;
      *(void *)(v97 + 32) = v34;
      unint64_t v99 = *(void *)(v103 + 40);
      swift_retain();
      specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v99, v95, v96, v97 | 0x2000000000000000, v103 + 64, v103, (unint64_t *)&v129);
      swift_release();
      swift_release();
      swift_release();
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      uint64_t result = swift_bridgeObjectRelease();
      long long v100 = v130[0];
      *uint64_t v105 = v129;
      v105[1] = v100;
      *(_OWORD *)((char *)v105 + 25) = *(_OWORD *)((char *)v130 + 9);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

double Input.prependUnaryFunction(_:argumentType:in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C418EE0;
  *(void *)(inited + 32) = 28265;
  *(void *)(inited + 40) = 0xE200000000000000;
  *(void *)(inited + 48) = a3;
  swift_retain();
  specialized Input.prependFunction(_:label:arguments:in:)(a1, a2, inited, a4, &v14);
  swift_setDeallocating();
  swift_arrayDestroy();
  if (!v5)
  {
    long long v13 = v15[0];
    *a5 = v14;
    a5[1] = v13;
    double result = *(double *)((char *)v15 + 9);
    *(_OWORD *)((char *)a5 + 25) = *(_OWORD *)((char *)v15 + 9);
  }
  return result;
}

double Input.prependCreateGradient2DNode(in:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return Input.prependCreateGradient2DNode(in:)(a1, &one-time initialization token for float2, &static MetalDataType.float2, 0xEA00000000006432, (uint64_t)one-time initialization function for float2, a2);
}

double Input.prependCreateGradient3DNode(in:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return Input.prependCreateGradient2DNode(in:)(a1, &one-time initialization token for float3, &static MetalDataType.float3, 0xEA00000000006433, (uint64_t)one-time initialization function for float3, a2);
}

double Input.prependCreateGradient2DNode(in:)@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v18 = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C418EF0;
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t v13 = *a3;
  *(void *)(inited + 32) = 2019840100;
  *(void *)(inited + 40) = 0xE400000000000000;
  *(void *)(inited + 48) = v13;
  *(void *)(inited + 56) = 2036617316;
  *(void *)(inited + 64) = 0xE400000000000000;
  *(void *)(inited + 72) = v13;
  swift_retain_n();
  specialized Input.prependFunction(_:label:arguments:in:)(0x746E656964617267, a4, inited, a1, &v16);
  swift_setDeallocating();
  swift_arrayDestroy();
  if (!v6)
  {
    long long v15 = v17[0];
    *a6 = v16;
    a6[1] = v15;
    double result = *(double *)((char *)v17 + 9);
    *(_OWORD *)((char *)a6 + 25) = *(_OWORD *)((char *)v17 + 9);
  }
  return result;
}

double Input.prependCreateLODClampNode(in:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C418EF0;
  if (one-time initialization token for float != -1) {
    swift_once();
  }
  uint64_t v6 = static MetalDataType.float;
  *(void *)(inited + 32) = 0x6E696D5F646F6CLL;
  *(void *)(inited + 40) = 0xE700000000000000;
  *(void *)(inited + 48) = v6;
  *(void *)(inited + 56) = 0x78616D5F646F6CLL;
  *(void *)(inited + 64) = 0xE700000000000000;
  *(void *)(inited + 72) = v6;
  swift_retain_n();
  specialized Input.prependFunction(_:label:arguments:in:)(0x6D616C635F646F6CLL, 0xE900000000000070, inited, a1, &v9);
  swift_setDeallocating();
  swift_arrayDestroy();
  if (!v2)
  {
    long long v8 = v10[0];
    *a2 = v9;
    a2[1] = v8;
    double result = *(double *)((char *)v10 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v10 + 9);
  }
  return result;
}

double Graph.insertConstantValue(type:value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C418EE0;
  *(void *)(inited + 32) = 7632239;
  *(void *)(inited + 40) = 0xE300000000000000;
  *(void *)(inited + 48) = a1;
  unint64_t v8 = swift_allocObject();
  outlined init with take of SGDataTypeStorage(a2, v8 + 16);
  *(void *)(v8 + 88) = a1;
  unint64_t v9 = *(void *)(v3 + 40);
  swift_retain_n();
  outlined retain of SGDataTypeStorage(a2);
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v9, MEMORY[0x263F8EE78], inited, v8, v3 + 64, v3, (unint64_t *)&v12);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  long long v10 = v13[0];
  *a3 = v12;
  a3[1] = v10;
  double result = *(double *)((char *)v13 + 9);
  *(_OWORD *)((char *)a3 + 25) = *(_OWORD *)((char *)v13 + 9);
  return result;
}

uint64_t closure #1 in Graph.transformModernRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = v2 - 1;
    uint64_t v4 = v1 + 56;
    do
    {
      uint64_t v5 = v3;
      uint64_t v6 = *(void *)(v4 - 16);
      uint64_t v7 = one-time initialization token for sampler;
      swift_retain();
      swift_bridgeObjectRetain();
      if (v7 != -1) {
        swift_once();
      }
      char v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 128))(static MaterialXDataType.sampler);
      swift_bridgeObjectRelease();
      swift_release();
      if (v8) {
        break;
      }
      uint64_t v3 = v5 - 1;
      v4 += 56;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

BOOL closure #3 in Graph.transformModernRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(void *a1)
{
  if (*a1 >> 61 != 5) {
    return 0;
  }
  swift_bridgeObjectRetain();
  v1._uint64_t object = (void *)0x800000025C421DA0;
  v1._char countAndFlagsBits = 0xD000000000000013;
  Swift::Bool v2 = String.hasPrefix(_:)(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t closure #1 in closure #1 in Graph.mapStringInputs(nodeDefStore:)(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  BOOL v7 = *a2 == 0x636170736D6F7266 && v6 == 0xE900000000000065;
  if (v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || (v5 == 0x65636170736F74 ? (BOOL v8 = v6 == 0xE700000000000000) : (BOOL v8 = 0),
        v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    *a3 = 1;
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = one-time initialization token for space;
    swift_bridgeObjectRetain();
    if (v10 != -1) {
      swift_once();
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v9;
}

uint64_t closure #3 in closure #1 in Graph.mapStringInputs(nodeDefStore:)(long long *a1, uint64_t a2)
{
  long long v5 = *a1;
  long long v6 = a1[1];
  long long v7 = a1[2];
  uint64_t v122 = *((void *)a1 + 6);
  v121[1] = v6;
  v121[2] = v7;
  v121[0] = v5;
  long long v8 = v6;
  BOOL v9 = (void)v6 == 0x636170736D6F7266 && *((void *)&v6 + 1) == 0xE900000000000065;
  if (!v9
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && ((void)v8 != 0x65636170736F74 || *((void *)&v8 + 1) != 0xE700000000000000))
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0) {
      return result;
    }
  }
  uint64_t v96 = v2;
  long long v12 = *(_OWORD *)(a2 + 128);
  long long v13 = *(_OWORD *)(a2 + 144);
  long long v14 = *(_OWORD *)(a2 + 96);
  long long v150 = *(_OWORD *)(a2 + 112);
  long long v151 = v12;
  v152[0] = v13;
  *(_OWORD *)((char *)v152 + 9) = *(_OWORD *)(a2 + 153);
  long long v15 = *(_OWORD *)(a2 + 80);
  long long v147 = *(_OWORD *)(a2 + 64);
  long long v148 = v15;
  long long v149 = v14;
  long long v16 = *(_OWORD *)(a2 + 16);
  v146[0] = *(_OWORD *)a2;
  v146[1] = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  v146[2] = *(_OWORD *)(a2 + 32);
  v146[3] = v17;
  outlined retain of Graph((uint64_t)v146);
  uint64_t v18 = v146;
  Graph.edge(to:)((uint64_t)v121, v100);
  unint64_t v19 = v100[0];
  outlined init with take of MetalFunctionNode?((uint64_t)v100, (uint64_t)v109, &demangling cache variable for type metadata for Edge?);
  if (!v110)
  {
LABEL_14:
    outlined release of Graph((uint64_t)v146);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_25C418EE0;
    if (one-time initialization token for string != -1) {
      swift_once();
    }
    uint64_t v21 = static MaterialXDataType.string;
    *(void *)(v20 + 32) = 7632239;
    *(void *)(v20 + 40) = 0xE300000000000000;
    *(void *)(v20 + 48) = v21;
    unint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_25C41BFE0;
    *(_OWORD *)(v22 + 32) = 0u;
    *(_OWORD *)(v22 + 48) = 0u;
    *(_OWORD *)(v22 + 64) = 0u;
    *(unsigned char *)(v22 + 80) = 6;
    *(void *)(v22 + 88) = v21;
    unint64_t v23 = *(void *)(a2 + 40);
    swift_retain_n();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v23, MEMORY[0x263F8EE78], v20, v22, a2 + 64, a2, &v101);
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    ShaderGraphNode.out.getter((uint64_t)v104);
    if (v96)
    {
      outlined init with take of NodePersonality(&v101, &v117);
      outlined release of NodePersonality(&v117);
      uint64_t v116 = v102;
      outlined release of [Input]((uint64_t)&v116);
      uint64_t v115 = v103;
      long long v24 = &v115;
    }
    else
    {
      Graph.connect(_:to:)((uint64_t)v104, (unint64_t)v121);
      swift_release();
      long long v114 = v105;
      outlined release of String((uint64_t)&v114);
      outlined init with take of NodePersonality(&v101, &v113);
      outlined release of NodePersonality(&v113);
      uint64_t v112 = v102;
      outlined release of [Input]((uint64_t)&v112);
      uint64_t v111 = v103;
      long long v24 = &v111;
    }
    return outlined release of [Input]((uint64_t)v24);
  }
  if (v19 == -7)
  {
    outlined release of Edge?(v100);
    goto LABEL_14;
  }
  if ((v19 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v19 < *(void *)(v147 + 16))
  {
    uint64_t v25 = (void *)(v147 + 48 * v19);
    unint64_t v27 = v25[4];
    uint64_t v26 = v25[5];
    uint64_t v28 = v25[6];
    uint64_t v86 = v25[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v27);
    outlined release of Edge?(v100);
    outlined release of Graph((uint64_t)v146);
    if (v27 >> 61)
    {
      outlined consume of NodePersonality(v27);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v88 = v28;
    if (*(unsigned char *)(v27 + 80) == 6)
    {
      unint64_t v85 = v27;
      if (!*(void *)(v27 + 16) && *(void *)(v27 + 24) == 0xE000000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v87 = v26;
        int64_t v29 = *(void *)(v28 + 16);
        uint64_t v18 = (_OWORD *)MEMORY[0x263F8EE78];
        uint64_t v95 = a2;
        if (v29)
        {
          uint64_t v99 = MEMORY[0x263F8EE78];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
          uint64_t v18 = (_OWORD *)v99;
          uint64_t v30 = (uint64_t *)(v28 + 56);
          do
          {
            uint64_t v32 = *(v30 - 2);
            uint64_t v31 = *(v30 - 1);
            uint64_t v33 = *v30;
            unint64_t v35 = *(void *)(v99 + 16);
            unint64_t v34 = *(void *)(v99 + 24);
            swift_retain();
            swift_bridgeObjectRetain();
            if (v35 >= v34 >> 1) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
            }
            *(void *)(v99 + 16) = v35 + 1;
            uint64_t v36 = (void *)(v99 + 24 * v35);
            v36[4] = v31;
            v36[5] = v33;
            v36[6] = v32;
            v30 += 7;
            --v29;
          }
          while (v29);
          swift_bridgeObjectRelease();
          a2 = v95;
        }
        unint64_t v3 = swift_allocObject();
        *(_OWORD *)(v3 + 16) = xmmword_25C41BFE0;
        *(_OWORD *)(v3 + 32) = 0u;
        *(_OWORD *)(v3 + 48) = 0u;
        *(_OWORD *)(v3 + 64) = 0u;
        *(unsigned char *)(v3 + 80) = 6;
        if (one-time initialization token for string == -1) {
          goto LABEL_37;
        }
        goto LABEL_76;
      }
      unint64_t v37 = v27;
    }
    else
    {
      unint64_t v37 = v27;
    }
    outlined consume of NodePersonality(v37);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_76:
  swift_once();
LABEL_37:
  *(void *)(v3 + 88) = static MaterialXDataType.string;
  unint64_t v38 = *(void *)(a2 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v38, MEMORY[0x263F8EE78], (uint64_t)v18, v3, a2 + 64, a2, &v106);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v120 = v107;
  uint64_t v39 = v87;
  uint64_t v91 = *(void *)(v107 + 16);
  if (!v91) {
    goto LABEL_54;
  }
  uint64_t v89 = v107 + 32;
  swift_bridgeObjectRetain();
  uint64_t v40 = 0;
  while (2)
  {
    uint64_t v42 = (uint64_t *)(v89 + 56 * v40);
    uint64_t v43 = *v42;
    uint64_t v44 = v42[1];
    uint64_t v45 = v42[2];
    uint64_t v46 = v42[3];
    uint64_t v47 = v42[4];
    char v48 = *((unsigned char *)v42 + 40);
    uint64_t v49 = v42[6];
    *(void *)&long long v140 = v43;
    *((void *)&v140 + 1) = v44;
    uint64_t v141 = v45;
    uint64_t v142 = v46;
    uint64_t v143 = v47;
    char v144 = v48;
    uint64_t v145 = v49;
    uint64_t v50 = *(void *)(v39 + 16);
    if (!v50) {
      goto LABEL_42;
    }
    uint64_t v93 = v40;
    unint64_t v51 = (void *)(v87 + 80);
    do
    {
      uint64_t v52 = *(v51 - 6);
      uint64_t v53 = *(v51 - 5);
      uint64_t v55 = *(v51 - 4);
      uint64_t v54 = *(v51 - 3);
      uint64_t v56 = *(v51 - 2);
      char v57 = *((unsigned char *)v51 - 8);
      uint64_t v58 = *v51;
      if (v55 == v45 && v54 == v46)
      {
        uint64_t v41 = v46;
LABEL_40:
        uint64_t v133 = v52;
        uint64_t v134 = v53;
        uint64_t v135 = v45;
        uint64_t v136 = v41;
        uint64_t v137 = v56;
        char v138 = v57;
        uint64_t v139 = v58;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v133, &v140);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_41;
      }
      uint64_t v97 = *(v51 - 6);
      uint64_t v153 = *v51;
      uint64_t v60 = v53;
      uint64_t v41 = v54;
      uint64_t v61 = v45;
      uint64_t v62 = v46;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v45 = v55;
        uint64_t v53 = v60;
        uint64_t v58 = v153;
        uint64_t v52 = v97;
        goto LABEL_40;
      }
      v51 += 7;
      --v50;
      uint64_t v46 = v62;
      uint64_t v45 = v61;
    }
    while (v50);
    uint64_t v133 = v97;
    uint64_t v134 = v60;
    uint64_t v135 = v55;
    uint64_t v136 = v41;
    uint64_t v137 = v56;
    char v138 = v57;
    uint64_t v139 = v153;
LABEL_41:
    uint64_t v39 = v87;
    uint64_t v40 = v93;
LABEL_42:
    if (++v40 != v91) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v120);
LABEL_54:
  uint64_t v119 = v108;
  uint64_t v92 = *(void *)(v108 + 16);
  if (!v92) {
    goto LABEL_71;
  }
  uint64_t v90 = v108 + 32;
  swift_bridgeObjectRetain();
  uint64_t v63 = 0;
  uint64_t v64 = v88;
  while (2)
  {
    unint64_t v66 = (uint64_t *)(v90 + 56 * v63);
    uint64_t v67 = *v66;
    uint64_t v68 = v66[1];
    uint64_t v69 = v66[2];
    uint64_t v70 = v66[3];
    uint64_t v71 = v66[4];
    char v72 = *((unsigned char *)v66 + 40);
    uint64_t v73 = v66[6];
    v130[0] = v67;
    v130[1] = v68;
    _OWORD v130[2] = v69;
    v130[3] = v70;
    v130[4] = v71;
    char v131 = v72;
    uint64_t v132 = v73;
    uint64_t v74 = *(void *)(v64 + 16);
    if (!v74) {
      goto LABEL_59;
    }
    uint64_t v94 = v63;
    char v75 = (void *)(v88 + 80);
    while (2)
    {
      uint64_t v76 = *(v75 - 6);
      uint64_t v77 = *(v75 - 5);
      uint64_t v79 = *(v75 - 4);
      uint64_t v78 = *(v75 - 3);
      uint64_t v80 = *(v75 - 2);
      char v81 = *((unsigned char *)v75 - 8);
      uint64_t v82 = *v75;
      if (v79 == v69 && v78 == v70)
      {
        uint64_t v65 = v70;
LABEL_57:
        uint64_t v123 = v76;
        uint64_t v124 = v77;
        uint64_t v125 = v69;
        uint64_t v126 = v65;
        uint64_t v127 = v80;
        char v128 = v81;
        uint64_t v129 = v82;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v123, (uint64_t)v130);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_58;
      }
      uint64_t v98 = *(v75 - 6);
      uint64_t v153 = *v75;
      uint64_t v65 = v78;
      uint64_t v84 = v69;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v69 = v79;
        uint64_t v82 = v153;
        uint64_t v76 = v98;
        goto LABEL_57;
      }
      v75 += 7;
      --v74;
      uint64_t v69 = v84;
      if (v74) {
        continue;
      }
      break;
    }
    uint64_t v123 = v98;
    uint64_t v124 = v77;
    uint64_t v125 = v79;
    uint64_t v126 = v65;
    uint64_t v127 = v80;
    char v128 = v81;
    uint64_t v129 = v153;
LABEL_58:
    uint64_t v64 = v88;
    uint64_t v63 = v94;
LABEL_59:
    if (++v63 != v92) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v119);
LABEL_71:
  specialized Graph.remove(_:)(v86);
  outlined consume of NodePersonality(v85);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of NodePersonality(&v106, &v118);
  outlined release of NodePersonality(&v118);
  outlined release of [Input]((uint64_t)&v120);
  long long v24 = &v119;
  return outlined release of [Input]((uint64_t)v24);
}

void closure #1 in Graph.resolvingNodegraphImplementations(nodeDefStore:)(uint64_t *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  long long v6 = v5;
  long long v239 = a3;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NodeDef.Implementation?);
  MEMORY[0x270FA5388](v11 - 8);
  long long v13 = (char *)&v164 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for NodeDef.Implementation.Kind(0);
  MEMORY[0x270FA5388](v14);
  long long v16 = (_OWORD *)((char *)&v164 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *a1;
  if ((unint64_t)*a1 >> 61 != 5 || !a2[2]) {
    return;
  }
  os_log_type_t v175 = a4;
  uint64_t v18 = a1[2];
  uint64_t v170 = a1[1];
  uint64_t v171 = v18;
  uint64_t v169 = a1[3];
  uint64_t v19 = v17 & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v21 = *(void *)(v19 + 24);
  swift_bridgeObjectRetain();
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
  if ((v23 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
  long long v24 = (_OWORD *)(a2[7] + 144 * v22);
  v199[0] = *v24;
  long long v25 = v24[4];
  long long v27 = v24[1];
  long long v26 = v24[2];
  v199[3] = v24[3];
  v199[4] = v25;
  v199[1] = v27;
  v199[2] = v26;
  long long v28 = v24[8];
  long long v30 = v24[5];
  long long v29 = v24[6];
  v199[7] = v24[7];
  v199[8] = v28;
  v199[5] = v30;
  v199[6] = v29;
  outlined retain of NodeDef((uint64_t)v199);
  swift_bridgeObjectRelease();
  uint64_t v31 = v175;
  uint64_t v32 = v175[2];
  uint64_t v172 = a5;
  uint64_t v173 = v6;
  if (v32)
  {
    long long v33 = v199[0];
    swift_bridgeObjectRetain();
    unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v33, *((uint64_t *)&v33 + 1));
    if (v35)
    {
      uint64_t v36 = *(void *)(v31[7] + 8 * v34);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v36 = MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v36 = MEMORY[0x263F8EE78];
  }
  outlined release of NodeDef((uint64_t)v199);
  uint64_t v37 = *(void *)(v36 + 16);
  uint64_t v38 = type metadata accessor for NodeDef.Implementation(0);
  uint64_t v39 = *(void *)(v38 - 8);
  if (v37)
  {
    outlined init with copy of NodeDef.Implementation.Kind(v36+ ((*(unsigned __int8 *)(*(void *)(v38 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v38 - 8) + 80)), (uint64_t)v13, type metadata accessor for NodeDef.Implementation);
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v40 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v13, v40, 1, v38);
  swift_bridgeObjectRelease();
  int v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48))(v13, 1, v38);
  uint64_t v42 = v172;
  if (v41 == 1)
  {
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for NodeDef.Implementation?);
    return;
  }
  outlined init with copy of NodeDef.Implementation.Kind((uint64_t)v13, (uint64_t)v16, type metadata accessor for NodeDef.Implementation.Kind);
  outlined destroy of NodeDef.Implementation((uint64_t)v13, type metadata accessor for NodeDef.Implementation);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of NodeDef.Implementation((uint64_t)v16, type metadata accessor for NodeDef.Implementation.Kind);
    return;
  }
  long long v43 = v16[7];
  long long v44 = v16[9];
  long long v197 = v16[8];
  v198[0] = v44;
  *(_OWORD *)((char *)v198 + 9) = *(_OWORD *)((char *)v16 + 153);
  long long v45 = v16[3];
  long long v46 = v16[5];
  long long v193 = v16[4];
  long long v194 = v46;
  long long v47 = v16[5];
  long long v48 = v16[7];
  long long v195 = v16[6];
  long long v196 = v48;
  long long v49 = v16[1];
  v190[0] = *v16;
  v190[1] = v49;
  long long v50 = v16[3];
  long long v52 = *v16;
  long long v51 = v16[1];
  long long v191 = v16[2];
  long long v192 = v50;
  long long v53 = v16[9];
  long long v188 = v197;
  v189[0] = v53;
  *(_OWORD *)((char *)v189 + 9) = *(_OWORD *)((char *)v16 + 153);
  long long v184 = v193;
  long long v185 = v47;
  long long v186 = v195;
  long long v187 = v43;
  long long v180 = v52;
  long long v181 = v51;
  long long v182 = v191;
  long long v183 = v45;
  outlined retain of Graph((uint64_t)v190);
  v240.nodeDefs._rawValue = a2;
  v240.geomPropDefs._rawValue = v239;
  v240.implementations._rawValue = v175;
  Graph.resolvingNodegraphImplementations(nodeDefStore:)(v240);
  uint64_t v55 = v54;
  if (v54)
  {
    long long v214 = v188;
    v215[0] = v189[0];
    *(_OWORD *)((char *)v215 + 9) = *(_OWORD *)((char *)v189 + 9);
    long long v210 = v184;
    long long v211 = v185;
    long long v213 = v187;
    long long v212 = v186;
    long long v206 = v180;
    long long v207 = v181;
    long long v209 = v183;
    long long v208 = v182;
    outlined release of Graph((uint64_t)&v206);
    outlined release of Graph((uint64_t)v190);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_25C418EE0;
    *(void *)&v178[0] = 0;
    *((void *)&v178[0] + 1) = 0xE000000000000000;
    v57._char countAndFlagsBits = 0x20524F525245;
    v57._uint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v57);
    *(void *)&v176[0] = v54;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    long long v58 = v178[0];
    *(void *)(v56 + 56) = MEMORY[0x263F8D310];
    *(_OWORD *)(v56 + 32) = v58;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();

    return;
  }
  uint64_t v59 = v170;
  int64_t v60 = *(void *)(v170 + 16);
  uint64_t v173 = 0;
  if (v60)
  {
    *(void *)&long long v206 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60, 0);
    uint64_t v61 = (void *)v206;
    uint64_t v62 = (uint64_t *)(v59 + 56);
    do
    {
      uint64_t v63 = *(v62 - 2);
      uint64_t v64 = *(v62 - 1);
      uint64_t v65 = *v62;
      *(void *)&long long v206 = v61;
      unint64_t v67 = v61[2];
      unint64_t v66 = v61[3];
      swift_retain();
      swift_bridgeObjectRetain();
      if (v67 >= v66 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
        uint64_t v61 = (void *)v206;
      }
      v61[2] = v67 + 1;
      uint64_t v68 = &v61[3 * v67];
      v68[4] = v64;
      v68[5] = v65;
      v68[6] = v63;
      v62 += 7;
      --v60;
    }
    while (v60);
    long long v239 = v61;
    swift_bridgeObjectRelease();
    uint64_t v42 = v172;
    uint64_t v55 = v173;
  }
  else
  {
    long long v239 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v69 = v171;
  int64_t v70 = *(void *)(v171 + 16);
  uint64_t v71 = MEMORY[0x263F8EE78];
  if (v70)
  {
    *(void *)&long long v206 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v70, 0);
    uint64_t v71 = v206;
    char v72 = (uint64_t *)(v69 + 56);
    do
    {
      uint64_t v73 = *(v72 - 2);
      uint64_t v74 = *(v72 - 1);
      uint64_t v75 = *v72;
      *(void *)&long long v206 = v71;
      unint64_t v77 = *(void *)(v71 + 16);
      unint64_t v76 = *(void *)(v71 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v77 >= v76 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v76 > 1, v77 + 1, 1);
        uint64_t v71 = v206;
      }
      *(void *)(v71 + 16) = v77 + 1;
      uint64_t v78 = (void *)(v71 + 24 * v77);
      v78[4] = v74;
      v78[5] = v75;
      v78[6] = v73;
      v72 += 7;
      --v70;
    }
    while (v70);
    swift_bridgeObjectRelease();
    uint64_t v42 = v172;
    uint64_t v55 = v173;
  }
  uint64_t v79 = swift_allocObject();
  long long v80 = v189[0];
  v178[8] = v188;
  v179[0] = v189[0];
  *(_OWORD *)((char *)v179 + 9) = *(_OWORD *)((char *)v189 + 9);
  long long v81 = v184;
  long long v82 = v185;
  v178[4] = v184;
  v178[5] = v185;
  long long v84 = v186;
  long long v83 = v187;
  v178[6] = v186;
  v178[7] = v187;
  long long v85 = v180;
  long long v86 = v181;
  v178[0] = v180;
  v178[1] = v181;
  long long v88 = v182;
  long long v87 = v183;
  v178[2] = v182;
  v178[3] = v183;
  *(_OWORD *)(v79 + 144) = v188;
  *(_OWORD *)(v79 + 160) = v80;
  *(_OWORD *)(v79 + 169) = *(_OWORD *)((char *)v189 + 9);
  *(_OWORD *)(v79 + 80) = v81;
  *(_OWORD *)(v79 + 96) = v82;
  *(_OWORD *)(v79 + 112) = v84;
  *(_OWORD *)(v79 + 128) = v83;
  *(_OWORD *)(v79 + 16) = v85;
  *(_OWORD *)(v79 + 32) = v86;
  *(_OWORD *)(v79 + 48) = v88;
  *(_OWORD *)(v79 + 64) = v87;
  unint64_t v89 = v79 | 0xC000000000000000;
  unint64_t v90 = *(void *)(v42 + 40);
  outlined retain of Graph((uint64_t)v178);
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v90, (uint64_t)v239, v71, v89, v42 + 64, v42, &v200);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v205 = v201;
  uint64_t v167 = *(void *)(v201 + 16);
  if (!v167) {
    goto LABEL_50;
  }
  uint64_t v165 = (void *)(v201 + 32);
  swift_bridgeObjectRetain();
  uint64_t v91 = 0;
  uint64_t v92 = v170;
  long long v164 = (void *)(v170 + 80);
  while (2)
  {
    uint64_t v94 = &v165[7 * v91];
    uint64_t v95 = *v94;
    uint64_t v96 = v94[1];
    uint64_t v97 = v94[2];
    uint64_t v98 = (void *)v94[3];
    uint64_t v99 = v94[4];
    char v100 = *((unsigned char *)v94 + 40);
    uint64_t v101 = v94[6];
    *(void *)&long long v233 = v95;
    *((void *)&v233 + 1) = v96;
    uint64_t v234 = v97;
    long long v235 = v98;
    uint64_t v236 = v99;
    char v237 = v100;
    uint64_t v238 = v101;
    uint64_t v102 = *(void *)(v92 + 16);
    if (!v102) {
      goto LABEL_38;
    }
    uint64_t v166 = v96;
    uint64_t v168 = v91;
    uint64_t v103 = v164;
    do
    {
      uint64_t v104 = *(v103 - 6);
      uint64_t v105 = *(v103 - 5);
      uint64_t v107 = *(v103 - 4);
      unint64_t v106 = (void *)*(v103 - 3);
      uint64_t v108 = (void *)*(v103 - 2);
      char v109 = *((unsigned char *)v103 - 8);
      uint64_t v110 = *v103;
      if (v107 == v97 && v106 == v98)
      {
        uint64_t v93 = v98;
LABEL_36:
        uint64_t v226 = v104;
        uint64_t v227 = v105;
        uint64_t v228 = v97;
        long long v229 = v93;
        long long v230 = v108;
        char v231 = v109;
        uint64_t v232 = v110;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v42 = v172;
        Graph.moveEdge(from:to:)((uint64_t)&v226, &v233);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v55 = v173;
        goto LABEL_37;
      }
      uint64_t v174 = *(v103 - 6);
      os_log_type_t v175 = v108;
      long long v239 = v106;
      uint64_t v112 = v97;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v97 = v107;
        uint64_t v93 = v239;
        uint64_t v104 = v174;
        uint64_t v108 = v175;
        goto LABEL_36;
      }
      v103 += 7;
      --v102;
      uint64_t v97 = v112;
    }
    while (v102);
    uint64_t v55 = v173;
    uint64_t v226 = v174;
    uint64_t v227 = v105;
    uint64_t v228 = v107;
    long long v229 = v239;
    long long v230 = v175;
    char v231 = v109;
    uint64_t v232 = v110;
    uint64_t v42 = v172;
LABEL_37:
    uint64_t v92 = v170;
    uint64_t v91 = v168;
LABEL_38:
    if (++v91 != v167) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v205);
LABEL_50:
  uint64_t v204 = v202;
  uint64_t v113 = v171;
  uint64_t v168 = *(void *)(v202 + 16);
  if (!v168) {
    goto LABEL_67;
  }
  uint64_t v114 = v42;
  uint64_t v166 = v202 + 32;
  swift_bridgeObjectRetain();
  uint64_t v115 = 0;
  uint64_t v165 = (void *)(v113 + 80);
  while (2)
  {
    unint64_t v117 = (uint64_t *)(v166 + 56 * v115);
    uint64_t v118 = *v117;
    uint64_t v119 = v117[1];
    uint64_t v120 = v117[2];
    long long v121 = (void *)v117[3];
    uint64_t v122 = v117[4];
    char v123 = *((unsigned char *)v117 + 40);
    uint64_t v124 = v117[6];
    v223[0] = v118;
    v223[1] = v119;
    v223[2] = v120;
    v223[3] = v121;
    v223[4] = v122;
    char v224 = v123;
    uint64_t v225 = v124;
    uint64_t v125 = *(void *)(v113 + 16);
    if (!v125) {
      goto LABEL_55;
    }
    uint64_t v167 = v119;
    uint64_t v170 = v115;
    uint64_t v126 = v165;
    while (2)
    {
      uint64_t v127 = *(v126 - 6);
      uint64_t v128 = *(v126 - 5);
      uint64_t v130 = *(v126 - 4);
      uint64_t v129 = (void *)*(v126 - 3);
      char v131 = (void *)*(v126 - 2);
      char v132 = *((unsigned char *)v126 - 8);
      uint64_t v133 = *v126;
      if (v130 == v120 && v129 == v121)
      {
        uint64_t v116 = v121;
LABEL_53:
        uint64_t v216 = v127;
        uint64_t v217 = v128;
        uint64_t v218 = v120;
        uint64_t v219 = v116;
        uint64_t v220 = v131;
        char v221 = v132;
        uint64_t v222 = v133;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v114 = v172;
        Graph.moveEdges(from:to:)((uint64_t)&v216, (uint64_t)v223);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v55 = v173;
        goto LABEL_54;
      }
      uint64_t v174 = *(v126 - 6);
      os_log_type_t v175 = v131;
      long long v239 = v129;
      uint64_t v135 = v120;
      uint64_t v136 = v121;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v120 = v130;
        uint64_t v116 = v239;
        uint64_t v127 = v174;
        char v131 = v175;
        goto LABEL_53;
      }
      v126 += 7;
      --v125;
      long long v121 = v136;
      uint64_t v120 = v135;
      if (v125) {
        continue;
      }
      break;
    }
    uint64_t v55 = v173;
    uint64_t v216 = v174;
    uint64_t v217 = v128;
    uint64_t v218 = v130;
    uint64_t v219 = v239;
    uint64_t v220 = v175;
    char v221 = v132;
    uint64_t v222 = v133;
    uint64_t v114 = v172;
LABEL_54:
    uint64_t v115 = v170;
    uint64_t v113 = v171;
LABEL_55:
    if (++v115 != v168) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v204);
  uint64_t v42 = v114;
LABEL_67:
  specialized Graph.remove(_:)(v169);
  if (one-time initialization token for debugMode != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v137 = static DebugConfig.debugMode;
  if (*(void *)(static DebugConfig.debugMode + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v138 = Hasher._finalize()();
    uint64_t v139 = -1 << *(unsigned char *)(v137 + 32);
    unint64_t v140 = v138 & ~v139;
    if (((*(void *)(v137 + 56 + ((v140 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v140) & 1) == 0) {
      goto LABEL_75;
    }
    uint64_t v141 = ~v139;
    while (1)
    {
      switch(*(unsigned char *)(*(void *)(v137 + 48) + v140))
      {
        case 3:
          swift_bridgeObjectRelease();
          goto LABEL_79;
        default:
          char v142 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v142)
          {
LABEL_79:
            swift_bridgeObjectRelease();
            long long v143 = *(_OWORD *)(v42 + 144);
            long long v214 = *(_OWORD *)(v42 + 128);
            v215[0] = v143;
            *(_OWORD *)((char *)v215 + 9) = *(_OWORD *)(v42 + 153);
            long long v144 = *(_OWORD *)(v42 + 80);
            long long v210 = *(_OWORD *)(v42 + 64);
            long long v211 = v144;
            long long v145 = *(_OWORD *)(v42 + 96);
            long long v213 = *(_OWORD *)(v42 + 112);
            long long v212 = v145;
            long long v146 = *(_OWORD *)(v42 + 16);
            long long v206 = *(_OWORD *)v42;
            long long v207 = v146;
            long long v147 = *(_OWORD *)(v42 + 32);
            long long v209 = *(_OWORD *)(v42 + 48);
            long long v208 = v147;
            outlined retain of Graph((uint64_t)&v206);
            createDotText(representing:)((uint64_t)&v206);
            if (v55)
            {
              outlined release of Graph((uint64_t)&v206);
              if (one-time initialization token for logger != -1) {
                swift_once();
              }
              uint64_t v150 = type metadata accessor for Logger();
              __swift_project_value_buffer(v150, (uint64_t)logger);
              id v151 = v55;
              id v152 = v55;
              uint64_t v153 = Logger.logObject.getter();
              os_log_type_t v154 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v153, v154))
              {
                BOOL v155 = (uint8_t *)swift_slowAlloc();
                uint64_t v156 = swift_slowAlloc();
                *(void *)&v176[0] = v156;
                *(_DWORD *)BOOL v155 = 136315138;
                swift_getErrorValue();
                uint64_t v157 = Error.localizedDescription.getter();
                uint64_t v203 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v157, v158, (uint64_t *)v176);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();

                _os_log_impl(&dword_25C27E000, v153, v154, "%s", v155, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x261185880](v156, -1, -1);
                MEMORY[0x261185880](v155, -1, -1);
              }
              else
              {
              }
              goto LABEL_76;
            }
            uint64_t v159 = v148;
            uint64_t v160 = v149;
            outlined release of Graph((uint64_t)&v206);
            *(void *)&v176[0] = 0;
            *((void *)&v176[0] + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(25);
            uint64_t v162 = *(void *)(v42 + 24);
            uint64_t v161 = *(void *)(v42 + 32);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)&v176[0] = v162;
            *((void *)&v176[0] + 1) = v161;
            v163._uint64_t object = (void *)0x800000025C4255C0;
            v163._char countAndFlagsBits = 0xD000000000000017;
            String.append(_:)(v163);
            specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v159, v160, *(uint64_t *)&v176[0], *((void **)&v176[0] + 1), 7630692, 0xE300000000000000);
            swift_bridgeObjectRelease();
LABEL_75:
            swift_bridgeObjectRelease();
            goto LABEL_76;
          }
          unint64_t v140 = (v140 + 1) & v141;
          if (((*(void *)(v137 + 56 + ((v140 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v140) & 1) == 0) {
            goto LABEL_75;
          }
          break;
      }
    }
  }
LABEL_76:
  Graph.hoist(_:)(&v200);
  outlined init with take of NodePersonality(&v200, &v203);
  outlined release of NodePersonality((unint64_t *)&v203);
  outlined release of [Input]((uint64_t)&v205);
  outlined release of [Input]((uint64_t)&v204);
  outlined release of Graph((uint64_t)v190);
  v176[8] = v188;
  v177[0] = v189[0];
  *(_OWORD *)((char *)v177 + 9) = *(_OWORD *)((char *)v189 + 9);
  v176[4] = v184;
  void v176[5] = v185;
  v176[6] = v186;
  v176[7] = v187;
  v176[0] = v180;
  v176[1] = v181;
  v176[2] = v182;
  v176[3] = v183;
  outlined release of Graph((uint64_t)v176);
}

BOOL ShaderGraphNode.isMaterialXSwizzleNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0x7A7A6977735F444ELL, (void *)0xEA0000000000656CLL);
}

void closure #1 in Graph.resolveSwizzleNodes(nodeDefStore:)(long long *a1, _OWORD *a2, uint64_t a3, void (*a4)(char *, uint64_t))
{
  uint64_t v462 = a3;
  uint64_t v463 = a4;
  uint64_t v6 = type metadata accessor for CharacterSet();
  uint64_t v464 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  BOOL v9 = (char *)v427 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)v427 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v427 - v13;
  long long v603 = *a1;
  v604[0] = a1[1];
  *(_OWORD *)((char *)v604 + 9) = *(long long *)((char *)a1 + 25);
  unint64_t v15 = *((void *)a1 + 1);
  unint64_t v465 = *(void *)a1;
  unint64_t v466 = v15;
  uint64_t v16 = *((void *)a1 + 3);
  uint64_t v467 = *((void *)a1 + 2);
  uint64_t v468 = v16;
  uint64_t v632 = *((void *)a1 + 4);
  int v17 = *((unsigned __int8 *)a1 + 40);
  *(_OWORD *)((char *)v613 + 9) = *(_OWORD *)((char *)a2 + 153);
  long long v18 = a2[9];
  v612[8] = a2[8];
  v613[0] = v18;
  long long v19 = a2[7];
  v612[6] = a2[6];
  v612[7] = v19;
  long long v20 = a2[5];
  v612[4] = a2[4];
  v612[5] = v20;
  long long v21 = a2[1];
  v612[0] = *a2;
  v612[1] = v21;
  long long v22 = a2[3];
  v612[2] = a2[2];
  v612[3] = v22;
  outlined retain of Graph((uint64_t)v612);
  uint64_t v23 = v469;
  ShaderGraphNode.out.getter((uint64_t)v499);
  if (v23)
  {
    outlined release of Graph((uint64_t)v612);
    return;
  }
  uint64_t v456 = v9;
  unint64_t v457 = v12;
  *(void *)&long long v469 = 0;
  int v461 = v17;
  uint64_t v459 = v6;
  unint64_t v460 = a2;
  uint64_t v458 = v14;
  unint64_t v24 = Graph.edges(from:)((uint64_t)v499);
  swift_release();
  long long v592 = v499[1];
  outlined release of String((uint64_t)&v592);
  outlined release of Graph((uint64_t)v612);
  uint64_t v25 = *(void *)(v24 + 16);
  swift_bridgeObjectRelease();
  if (v25)
  {
    long long v26 = (void *)*((void *)&v603 + 1);
    uint64_t v27 = v469;
    specialized Sequence.first(where:)(*((uint64_t *)&v603 + 1), 0x736C656E6E616863, 0xE800000000000000, v500);
    outlined init with take of MetalFunctionNode?((uint64_t)v500, (uint64_t)v520, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (!*((void *)&v520[0] + 1))
    {
      outlined init with take of NodePersonality(&v603, &v614);
      uint64_t v615 = *(void *)&v604[0];
      unint64_t v472 = v465;
      unint64_t v473 = v466;
      uint64_t v474 = v467;
      uint64_t v475 = v468;
      uint64_t v476 = v632;
      char v477 = v461;
      uint64_t v479 = 0x736C656E6E616863;
      unint64_t v480 = 0xE800000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v472);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v498 = 0uLL;
      swift_allocError();
      *long long v46 = v486;
      long long v47 = v490;
      long long v49 = v487;
      long long v48 = v488;
      void v46[3] = v489;
      v46[4] = v47;
      v46[1] = v49;
      v46[2] = v48;
      long long v50 = v494;
      long long v52 = v491;
      long long v51 = v492;
      v46[7] = v493;
      v46[8] = v50;
      v46[5] = v52;
      v46[6] = v51;
      long long v53 = v498;
      long long v55 = v495;
      long long v54 = v496;
      v46[11] = v497;
      v46[12] = v53;
      v46[9] = v55;
      v46[10] = v54;
      swift_bridgeObjectRetain();
      outlined retain of NodePersonality(&v614);
      outlined retain of [Input]((uint64_t)&v615);
      swift_willThrow();
      return;
    }
    long long v522 = v520[0];
    long long v523 = v520[1];
    long long v524 = v520[2];
    uint64_t v525 = v521;
    long long v28 = v460[9];
    long long v610 = v460[8];
    v611[0] = v28;
    *(_OWORD *)((char *)v611 + 9) = *(_OWORD *)((char *)v460 + 153);
    long long v29 = v460[5];
    long long v606 = v460[4];
    long long v607 = v29;
    long long v30 = v460[7];
    long long v608 = v460[6];
    long long v609 = v30;
    long long v31 = v460[1];
    v605[0] = *v460;
    v605[1] = v31;
    long long v32 = v460[3];
    v605[2] = v460[2];
    v605[3] = v32;
    outlined retain of Graph((uint64_t)v605);
    Graph.edge(to:)((uint64_t)&v522, v501);
    unint64_t v33 = v501[0];
    outlined init with take of MetalFunctionNode?((uint64_t)v501, (uint64_t)v519, &demangling cache variable for type metadata for Edge?);
    char v34 = v461;
    uint64_t v35 = v632;
    if (!v519[1])
    {
LABEL_8:
      outlined release of Graph((uint64_t)v605);
      unint64_t v472 = 0xD000000000000018;
      unint64_t v473 = 0x800000025C425260;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi4_((uint64_t)&v472);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v498 = 0uLL;
      swift_allocError();
      *uint64_t v36 = v486;
      long long v37 = v490;
      long long v39 = v487;
      long long v38 = v488;
      _OWORD v36[3] = v489;
      v36[4] = v37;
      v36[1] = v39;
      v36[2] = v38;
      long long v40 = v494;
      long long v42 = v491;
      long long v41 = v492;
      v36[7] = v493;
      v36[8] = v40;
      v36[5] = v42;
      v36[6] = v41;
      long long v43 = v498;
      long long v45 = v495;
      long long v44 = v496;
      v36[11] = v497;
      v36[12] = v43;
      v36[9] = v45;
      v36[10] = v44;
      swift_willThrow();
      swift_release();
      long long v526 = v523;
      outlined release of String((uint64_t)&v526);
      return;
    }
    if (v33 == -7)
    {
      outlined release of Edge?(v501);
      goto LABEL_8;
    }
    if ((v33 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v33 < *(void *)(v606 + 16))
    {
      uint64_t v56 = (void *)(v606 + 48 * v33);
      unint64_t v58 = v56[4];
      uint64_t v57 = v56[5];
      uint64_t v59 = v56[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v58);
      outlined release of Edge?(v501);
      outlined release of Graph((uint64_t)v605);
      if (v58 >> 61)
      {
        outlined init with take of NodePersonality(&v603, &v616);
        uint64_t v617 = *(void *)&v604[0];
        unint64_t v472 = v465;
        unint64_t v473 = v466;
        uint64_t v474 = v467;
        uint64_t v475 = v468;
        uint64_t v476 = v35;
        char v477 = v34;
        char v478 = 0;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi31_((uint64_t)&v472);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        long long v498 = 0uLL;
        swift_allocError();
        *uint64_t v68 = v486;
        long long v69 = v490;
        long long v71 = v487;
        long long v70 = v488;
        v68[3] = v489;
        v68[4] = v69;
        v68[1] = v71;
        v68[2] = v70;
        long long v72 = v494;
        long long v74 = v491;
        long long v73 = v492;
        v68[7] = v493;
        v68[8] = v72;
        v68[5] = v74;
        v68[6] = v73;
        long long v75 = v498;
        long long v77 = v495;
        long long v76 = v496;
        v68[11] = v497;
        v68[12] = v75;
        v68[9] = v77;
        v68[10] = v76;
        swift_bridgeObjectRetain();
        outlined retain of NodePersonality(&v616);
        outlined retain of [Input]((uint64_t)&v617);
        swift_willThrow();
        outlined consume of NodePersonality(v58);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        long long v527 = v523;
        outlined release of String((uint64_t)&v527);
        return;
      }
      uint64_t v448 = (uint64_t)v26;
      uint64_t v449 = v59;
      uint64_t v450 = v57;
      int64_t v60 = *(void **)(v58 + 16);
      uint64_t v61 = *(void *)(v58 + 32);
      uint64_t v62 = *(void *)(v58 + 40);
      uint64_t v63 = *(void *)(v58 + 48);
      uint64_t v64 = *(void *)(v58 + 56);
      uint64_t v66 = *(void *)(v58 + 64);
      uint64_t v65 = *(void *)(v58 + 72);
      int v67 = *(unsigned __int8 *)(v58 + 80);
      char v426 = *(unsigned char *)(v58 + 80);
      id v452 = *(id *)(v58 + 24);
      unint64_t v453 = v60;
      uint64_t v454 = v61;
      uint64_t v455 = v63;
      uint64_t v451 = v62;
      outlined copy of SGDataTypeStorage(v60, v452, v61, v62, v63, v64, v66, v65, v426);
      ShaderGraphNode.out.getter((uint64_t)v502);
      if (v27)
      {
        outlined consume of SGDataTypeStorage(v453, v452, v454, v451, v455, v64, v66, v65, v67);
        outlined consume of NodePersonality(v58);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        long long v546 = v523;
        outlined release of String((uint64_t)&v546);
        return;
      }
      LODWORD(v469) = v67;
      unint64_t v444 = v58;
      uint64_t v445 = v65;
      uint64_t v446 = v66;
      uint64_t v447 = v64;
      uint64_t v78 = v502[0];
      unint64_t v79 = v502[1];
      uint64_t v80 = v503;
      uint64_t v439 = v504;
      uint64_t v440 = *((void *)&v503 + 1);
      int v438 = v505;
      uint64_t v437 = v506;
      specialized Sequence.first(where:)(v448, 28265, 0xE200000000000000, v507);
      uint64_t v441 = 0;
      outlined init with take of MetalFunctionNode?((uint64_t)v507, (uint64_t)&v511, (uint64_t *)&demangling cache variable for type metadata for Input?);
      uint64_t v81 = *((void *)&v511 + 1);
      if (!*((void *)&v511 + 1))
      {
        outlined init with take of NodePersonality(&v603, &v618);
        uint64_t v619 = *(void *)&v604[0];
        unint64_t v472 = v465;
        unint64_t v473 = v466;
        uint64_t v474 = v467;
        uint64_t v475 = v468;
        uint64_t v476 = v632;
        char v477 = v461;
        uint64_t v479 = 28265;
        unint64_t v480 = 0xE200000000000000;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v472);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        long long v498 = 0uLL;
        swift_allocError();
        *uint64_t v99 = v486;
        long long v100 = v490;
        long long v102 = v487;
        long long v101 = v488;
        v99[3] = v489;
        v99[4] = v100;
        v99[1] = v102;
        v99[2] = v101;
        long long v103 = v494;
        long long v105 = v491;
        long long v104 = v492;
        v99[7] = v493;
        v99[8] = v103;
        v99[5] = v105;
        void v99[6] = v104;
        long long v106 = v498;
        long long v108 = v495;
        long long v107 = v496;
        v99[11] = v497;
        v99[12] = v106;
        v99[9] = v108;
        v99[10] = v107;
        swift_bridgeObjectRetain();
        outlined retain of NodePersonality(&v618);
        outlined retain of [Input]((uint64_t)&v619);
        swift_willThrow();
        swift_release();
        long long v591 = v503;
        outlined release of String((uint64_t)&v591);
        outlined consume of SGDataTypeStorage(v453, v452, v454, v451, v455, v447, v446, v445, v469);
        outlined consume of NodePersonality(v444);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        long long v528 = v523;
        outlined release of String((uint64_t)&v528);
        return;
      }
      uint64_t v435 = v80;
      unint64_t v442 = &v503;
      unint64_t v443 = v79;
      long long v515 = v511;
      long long v516 = v512;
      long long v517 = v513;
      uint64_t v518 = v514;
      uint64_t v82 = *((void *)&v511 + 1);
      char v83 = v469;
      if (v469 != 6)
      {
        uint64_t v109 = v446;
        uint64_t v110 = v447;
        outlined init with take of NodePersonality(&v603, &v620);
        uint64_t v621 = *(void *)&v604[0];
        uint64_t v111 = v453;
        *(void *)&long long v486 = v453;
        uint64_t v436 = v82;
        int v113 = v451;
        id v112 = v452;
        *((void *)&v486 + 1) = v452;
        *(void *)&long long v487 = v454;
        *((void *)&v487 + 1) = v451;
        int v114 = v455;
        *(void *)&long long v488 = v455;
        *((void *)&v488 + 1) = v110;
        int v115 = v110;
        *(void *)&long long v489 = v109;
        LODWORD(v110) = v445;
        *((void *)&v489 + 1) = v445;
        LOBYTE(v490) = v83;
        swift_bridgeObjectRetain();
        uint64_t v116 = v112;
        LODWORD(v112) = v454;
        outlined copy of SGDataTypeStorage(v111, v116, v454, v113, v114, v115, v109, v110, v83);
        swift_retain();
        swift_retain();
        outlined retain of NodePersonality(&v620);
        outlined retain of [Input]((uint64_t)&v621);
        uint64_t v117 = String.init<A>(describing:)();
        unint64_t v472 = v465;
        unint64_t v473 = v466;
        uint64_t v474 = v467;
        uint64_t v475 = v468;
        uint64_t v476 = v632;
        char v477 = v461;
        uint64_t v479 = v117;
        unint64_t v480 = v118;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v472);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        long long v498 = 0uLL;
        swift_allocError();
        *uint64_t v119 = v486;
        long long v120 = v490;
        long long v122 = v487;
        long long v121 = v488;
        v119[3] = v489;
        long long v119[4] = v120;
        v119[1] = v122;
        _OWORD v119[2] = v121;
        long long v123 = v494;
        long long v125 = v491;
        long long v124 = v492;
        v119[7] = v493;
        v119[8] = v123;
        void v119[5] = v125;
        v119[6] = v124;
        long long v126 = v498;
        long long v128 = v495;
        long long v127 = v496;
        v119[11] = v497;
        v119[12] = v126;
        v119[9] = v128;
        v119[10] = v127;
        swift_willThrow();
        swift_release_n();
        long long v549 = v516;
        outlined release of String((uint64_t)&v549);
        swift_release_n();
        long long v590 = *v442;
        outlined release of String((uint64_t)&v590);
        outlined consume of SGDataTypeStorage(v453, v452, (int)v112, v113, v455, v447, v109, v110, v469);
        outlined consume of NodePersonality(v444);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        long long v529 = v523;
        outlined release of String((uint64_t)&v529);
        return;
      }
      uint64_t v434 = v514;
      uint64_t v428 = v78;
      uint64_t v429 = v511;
      uint64_t v432 = *((void *)&v512 + 1);
      uint64_t v433 = v512;
      uint64_t v431 = v513;
      int v430 = BYTE8(v513);
      id v84 = v452;
      long long v85 = v453;
      int v86 = v454;
      int v87 = v451;
      int v88 = v445;
      outlined copy of SGDataTypeStorage(v453, v452, v454, v451, v455, v447, v446, v445, 6);
      swift_retain();
      swift_retain();
      if ((unint64_t)(String.count.getter() - 5) < 0xFFFFFFFFFFFFFFFCLL)
      {
        outlined init with take of NodePersonality(&v603, &v622);
        uint64_t v623 = *(void *)&v604[0];
        unint64_t v472 = v465;
        unint64_t v473 = v466;
        uint64_t v474 = v467;
        uint64_t v475 = v468;
        uint64_t v476 = v632;
        char v477 = v461;
        uint64_t v479 = (uint64_t)v85;
        unint64_t v480 = (unint64_t)v84;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v472);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        long long v498 = 0uLL;
        swift_allocError();
        *unint64_t v89 = v486;
        long long v90 = v490;
        long long v92 = v487;
        long long v91 = v488;
        v89[3] = v489;
        v89[4] = v90;
        v89[1] = v92;
        v89[2] = v91;
        long long v93 = v494;
        long long v95 = v491;
        long long v94 = v492;
        v89[7] = v493;
        v89[8] = v93;
        v89[5] = v95;
        v89[6] = v94;
        long long v96 = v498;
        long long v98 = v495;
        long long v97 = v496;
        v89[11] = v497;
        v89[12] = v96;
        v89[9] = v98;
        v89[10] = v97;
        swift_bridgeObjectRetain();
        outlined retain of NodePersonality(&v622);
        outlined retain of [Input]((uint64_t)&v623);
        swift_willThrow();
        swift_release_n();
        long long v550 = v516;
        outlined release of String((uint64_t)&v550);
        swift_release_n();
        long long v568 = *v442;
        outlined release of String((uint64_t)&v568);
        outlined consume of SGDataTypeStorage(v85, v84, v86, v87, v455, v447, v446, v88, 6);
        outlined consume of NodePersonality(v444);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        long long v530 = v523;
        outlined release of String((uint64_t)&v530);
        return;
      }
      v427[0] = v81;
      uint64_t v436 = v82;
      uint64_t v129 = v458;
      CharacterSet.init(charactersIn:)();
      uint64_t v130 = v464;
      *(void *)&long long v469 = *(void *)(v464 + 16);
      char v131 = v456;
      uint64_t v132 = v459;
      ((void (*)(char *, char *, uint64_t))v469)(v456, v129, v459);
      v427[2] = lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
      uint64_t v133 = v457;
      dispatch thunk of SetAlgebra.intersection(_:)();
      v427[1] = lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet((unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
      LODWORD(v462) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v134 = *(void (**)(char *, uint64_t))(v130 + 8);
      v134(v133, v132);
      ((void (*)(char *, char *, uint64_t))v469)(v131, v129, v132);
      dispatch thunk of SetAlgebra.intersection(_:)();
      char v135 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v463 = v134;
      v134(v133, v132);
      if ((v462 & 1) == 0 && (v135 & 1) == 0)
      {
        outlined init with take of NodePersonality(&v603, &v630);
        v631[0] = *(void *)&v604[0];
        unint64_t v472 = v465;
        unint64_t v473 = v466;
        uint64_t v474 = v467;
        uint64_t v475 = v468;
        uint64_t v476 = v632;
        char v477 = v461;
        id v136 = v452;
        uint64_t v137 = v453;
        uint64_t v479 = (uint64_t)v453;
        unint64_t v480 = (unint64_t)v452;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v472);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        long long v498 = 0uLL;
        swift_allocError();
        *Swift::Int v138 = v486;
        long long v139 = v490;
        long long v141 = v487;
        long long v140 = v488;
        v138[3] = v489;
        v138[4] = v139;
        v138[1] = v141;
        v138[2] = v140;
        long long v142 = v494;
        long long v144 = v491;
        long long v143 = v492;
        v138[7] = v493;
        v138[8] = v142;
        v138[5] = v144;
        v138[6] = v143;
        long long v145 = v498;
        long long v147 = v495;
        long long v146 = v496;
        v138[11] = v497;
        v138[12] = v145;
        v138[9] = v147;
        v138[10] = v146;
        swift_bridgeObjectRetain();
        outlined retain of NodePersonality(&v630);
        outlined retain of [Input]((uint64_t)v631);
        swift_willThrow();
        swift_release();
        long long v545 = v523;
        outlined release of String((uint64_t)&v545);
        outlined consume of NodePersonality(v444);
        swift_release();
        swift_release_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v589 = *v442;
        outlined release of String((uint64_t)&v589);
        swift_release();
        long long v565 = v516;
        outlined release of String((uint64_t)&v565);
        outlined consume of SGDataTypeStorage(v137, v136, v454, v451, v455, v447, v446, v445, 6);
        v463(v129, v132);
        return;
      }
      id v149 = v452;
      uint64_t v148 = v453;
      uint64_t v150 = v441;
      uint64_t v151 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS_SisAE_pTg508_sSJSis5C131_pIggdzo_SJSisAA_pIegnrzr_TR91_s11ShaderGraph0B0V19resolveSwizzleNodes12nodeDefStoreyAA04NodegH0V_tKF5indexL_3forSiSJ_tKFTf3nnnpf_nTf1cn_n();
      int v152 = v445;
      int v153 = v454;
      *(void *)&long long v469 = v150;
      uint64_t v464 = v130 + 8;
      if (v150)
      {
        int v154 = v447;
        swift_release();
        long long v547 = v523;
        outlined release of String((uint64_t)&v547);
        swift_release();
        int v155 = v153;
        int v156 = v451;
        int v157 = v455;
        int v158 = v446;
        outlined consume of SGDataTypeStorage(v148, v149, v155, v451, v455, v154, v446, v152, 6);
        swift_release_n();
        long long v566 = v516;
        outlined release of String((uint64_t)&v566);
        swift_release();
        long long v588 = *v442;
        outlined release of String((uint64_t)&v588);
        outlined consume of NodePersonality(v444);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v463(v458, v459);
        outlined consume of SGDataTypeStorage(v148, v149, v454, v156, v157, v154, v158, v445, 6);
        return;
      }
      uint64_t v462 = v151;
      uint64_t v159 = (*(uint64_t (**)(void))(*(void *)v436 + 144))();
      uint64_t v160 = one-time initialization token for float;
      swift_retain();
      if (v160 != -1) {
        swift_once();
      }
      long long v26 = v453;
      if (v159)
      {
        char v161 = MetalDataType.isEqual(to:)();
        swift_release();
        if (v161)
        {
          uint64_t v162 = swift_release();
          unint64_t v470 = 0xD00000000000001ELL;
          unint64_t v471 = 0x800000025C4253E0;
          uint64_t v163 = *(void *)(v462 + 16);
          if (!v163) {
            goto LABEL_160;
          }
          if (*(uint64_t *)(v462 + 32) > 0)
          {
LABEL_33:
            long long v164 = v26;
            int v165 = v451;
            int v166 = v455;
            int v167 = v446;
            int v168 = v447;
            int v169 = v445;
            outlined consume of SGDataTypeStorage(v164, v452, v454, v451, v455, v447, v446, v445, 6);
            swift_bridgeObjectRelease();
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v472);
            outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
            *(void *)&long long v498 = 0xD000000000000030;
            *((void *)&v498 + 1) = 0x800000025C4252A0;
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            swift_allocError();
            _OWORD *v170 = v486;
            long long v171 = v490;
            long long v173 = v487;
            long long v172 = v488;
            v170[3] = v489;
            v170[4] = v171;
            v170[1] = v173;
            v170[2] = v172;
            long long v174 = v494;
            long long v176 = v491;
            long long v175 = v492;
            v170[7] = v493;
            v170[8] = v174;
            v170[5] = v176;
            v170[6] = v175;
            long long v177 = v498;
            long long v179 = v495;
            long long v178 = v496;
            v170[11] = v497;
            v170[12] = v177;
            v170[9] = v179;
            v170[10] = v178;
            swift_willThrow();
            swift_release();
            long long v531 = v523;
            outlined release of String((uint64_t)&v531);
            outlined consume of NodePersonality(v444);
            swift_release();
            swift_release_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            long long v577 = *v442;
            outlined release of String((uint64_t)&v577);
            swift_release();
            long long v551 = v516;
            long long v180 = &v551;
            goto LABEL_230;
          }
          if (v163 == 1) {
            goto LABEL_160;
          }
          uint64_t v197 = 5;
          while (1)
          {
            uint64_t v198 = v197 - 3;
            if (__OFADD__(v197 - 4, 1)) {
              break;
            }
            if (*(uint64_t *)(v462 + 8 * v197) > 0) {
              goto LABEL_33;
            }
            ++v197;
            if (v198 == v163) {
              goto LABEL_160;
            }
          }
          __break(1u);
          goto LABEL_68;
        }
      }
      uint64_t v181 = one-time initialization token for float2;
      swift_retain();
      if (v181 == -1)
      {
        if (!v159) {
          goto LABEL_55;
        }
      }
      else
      {
        swift_once();
        if (!v159) {
          goto LABEL_55;
        }
      }
      char v182 = MetalDataType.isEqual(to:)();
      swift_release();
      if (v182)
      {
        a2 = (_OWORD *)0xD000000000000030;
        uint64_t v162 = swift_release();
        unint64_t v470 = 0xD00000000000001FLL;
        unint64_t v471 = 0x800000025C4253C0;
        uint64_t v183 = *(void *)(v462 + 16);
        if (!v183) {
          goto LABEL_160;
        }
        if (*(uint64_t *)(v462 + 32) <= 1)
        {
          if (v183 == 1) {
            goto LABEL_160;
          }
          uint64_t v184 = 5;
          while (1)
          {
            uint64_t v185 = v184 - 3;
            if (__OFADD__(v184 - 4, 1)) {
              break;
            }
            if (*(uint64_t *)(v462 + 8 * v184) > 1) {
              goto LABEL_47;
            }
            ++v184;
            if (v185 == v183) {
              goto LABEL_160;
            }
          }
LABEL_68:
          __break(1u);
          goto LABEL_69;
        }
LABEL_47:
        long long v186 = v26;
        int v165 = v451;
        int v166 = v455;
        int v167 = v446;
        int v168 = v447;
        int v169 = v445;
        outlined consume of SGDataTypeStorage(v186, v452, v454, v451, v455, v447, v446, v445, 6);
        swift_bridgeObjectRelease();
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v472);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
        *(void *)&long long v498 = a2;
        *((void *)&v498 + 1) = 0x800000025C4252A0;
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        swift_allocError();
        *long long v187 = v486;
        long long v188 = v490;
        long long v190 = v487;
        long long v189 = v488;
        v187[3] = v489;
        v187[4] = v188;
        v187[1] = v190;
        v187[2] = v189;
        long long v191 = v494;
        long long v193 = v491;
        long long v192 = v492;
        v187[7] = v493;
        v187[8] = v191;
        v187[5] = v193;
        v187[6] = v192;
        long long v194 = v498;
        long long v196 = v495;
        long long v195 = v496;
        v187[11] = v497;
        v187[12] = v194;
        v187[9] = v196;
        v187[10] = v195;
        swift_willThrow();
        swift_release();
        long long v532 = v523;
        outlined release of String((uint64_t)&v532);
        outlined consume of NodePersonality(v444);
        swift_release();
        swift_release_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v578 = *v442;
        outlined release of String((uint64_t)&v578);
        swift_release();
        long long v552 = v516;
        long long v180 = &v552;
        goto LABEL_230;
      }
LABEL_55:
      uint64_t v199 = one-time initialization token for float3;
      swift_retain();
      if (v199 == -1)
      {
        if (!v159) {
          goto LABEL_70;
        }
LABEL_57:
        char v200 = MetalDataType.isEqual(to:)();
        swift_release();
        if (v200)
        {
          uint64_t v162 = swift_release();
          unint64_t v470 = 0xD00000000000001FLL;
          unint64_t v471 = 0x800000025C4253A0;
          uint64_t v201 = *(void *)(v462 + 16);
          if (!v201) {
            goto LABEL_160;
          }
          if (*(uint64_t *)(v462 + 32) > 2)
          {
LABEL_66:
            uint64_t v204 = v26;
            int v165 = v451;
            int v166 = v455;
            int v167 = v446;
            int v168 = v447;
            int v169 = v445;
            outlined consume of SGDataTypeStorage(v204, v452, v454, v451, v455, v447, v446, v445, 6);
            swift_bridgeObjectRelease();
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v472);
            outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
            *(void *)&long long v498 = 0xD000000000000030;
            *((void *)&v498 + 1) = 0x800000025C4252A0;
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            swift_allocError();
            *uint64_t v205 = v486;
            long long v206 = v490;
            long long v208 = v487;
            long long v207 = v488;
            v205[3] = v489;
            v205[4] = v206;
            v205[1] = v208;
            v205[2] = v207;
            long long v209 = v494;
            long long v211 = v491;
            long long v210 = v492;
            v205[7] = v493;
            v205[8] = v209;
            v205[5] = v211;
            v205[6] = v210;
            long long v212 = v498;
            long long v214 = v495;
            long long v213 = v496;
            v205[11] = v497;
            v205[12] = v212;
            v205[9] = v214;
            v205[10] = v213;
            swift_willThrow();
            swift_release();
            long long v533 = v523;
            outlined release of String((uint64_t)&v533);
            outlined consume of NodePersonality(v444);
            swift_release();
            swift_release_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            long long v579 = *v442;
            outlined release of String((uint64_t)&v579);
            swift_release();
            long long v553 = v516;
            long long v180 = &v553;
            goto LABEL_230;
          }
          if (v201 == 1) {
            goto LABEL_160;
          }
          uint64_t v202 = 5;
          while (1)
          {
            uint64_t v203 = v202 - 3;
            if (__OFADD__(v202 - 4, 1)) {
              break;
            }
            if (*(uint64_t *)(v462 + 8 * v202) > 2) {
              goto LABEL_66;
            }
            ++v202;
            if (v203 == v201) {
              goto LABEL_160;
            }
          }
          __break(1u);
          goto LABEL_83;
        }
LABEL_70:
        uint64_t v215 = one-time initialization token for float4;
        swift_retain();
        if (v215 == -1)
        {
          if (!v159) {
            goto LABEL_84;
          }
LABEL_72:
          char v216 = MetalDataType.isEqual(to:)();
          swift_release();
          if (v216)
          {
            uint64_t v162 = swift_release();
            unint64_t v470 = 0xD00000000000001FLL;
            unint64_t v471 = 0x800000025C425380;
            uint64_t v217 = *(void *)(v462 + 16);
            if (!v217) {
              goto LABEL_160;
            }
            if (*(uint64_t *)(v462 + 32) > 3)
            {
LABEL_81:
              uint64_t v220 = v26;
              int v165 = v451;
              int v166 = v455;
              int v167 = v446;
              int v168 = v447;
              int v169 = v445;
              outlined consume of SGDataTypeStorage(v220, v452, v454, v451, v455, v447, v446, v445, 6);
              swift_bridgeObjectRelease();
              _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v472);
              outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
              *(void *)&long long v498 = 0xD000000000000030;
              *((void *)&v498 + 1) = 0x800000025C4252A0;
              lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
              swift_allocError();
              *char v221 = v486;
              long long v222 = v490;
              long long v224 = v487;
              long long v223 = v488;
              v221[3] = v489;
              v221[4] = v222;
              v221[1] = v224;
              v221[2] = v223;
              long long v225 = v494;
              long long v227 = v491;
              long long v226 = v492;
              v221[7] = v493;
              v221[8] = v225;
              v221[5] = v227;
              v221[6] = v226;
              long long v228 = v498;
              long long v230 = v495;
              long long v229 = v496;
              v221[11] = v497;
              v221[12] = v228;
              v221[9] = v230;
              v221[10] = v229;
              swift_willThrow();
              swift_release();
              long long v534 = v523;
              outlined release of String((uint64_t)&v534);
              outlined consume of NodePersonality(v444);
              swift_release();
              swift_release_n();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              long long v580 = *v442;
              outlined release of String((uint64_t)&v580);
              swift_release();
              long long v554 = v516;
              long long v180 = &v554;
              goto LABEL_230;
            }
            if (v217 == 1) {
              goto LABEL_160;
            }
            uint64_t v218 = 5;
            while (1)
            {
              uint64_t v219 = v218 - 3;
              if (__OFADD__(v218 - 4, 1)) {
                break;
              }
              if (*(uint64_t *)(v462 + 8 * v218) > 3) {
                goto LABEL_81;
              }
              ++v218;
              if (v219 == v217) {
                goto LABEL_160;
              }
            }
            __break(1u);
            goto LABEL_97;
          }
LABEL_84:
          uint64_t v231 = one-time initialization token for half;
          swift_retain();
          if (v231 == -1)
          {
            if (!v159) {
              goto LABEL_98;
            }
LABEL_86:
            char v232 = MetalDataType.isEqual(to:)();
            swift_release();
            if (v232)
            {
              uint64_t v162 = swift_release();
              unint64_t v470 = 0xD00000000000001DLL;
              unint64_t v471 = 0x800000025C425360;
              uint64_t v233 = *(void *)(v462 + 16);
              if (!v233) {
                goto LABEL_160;
              }
              if (*(uint64_t *)(v462 + 32) > 0)
              {
LABEL_89:
                uint64_t v234 = v26;
                int v165 = v451;
                int v166 = v455;
                int v167 = v446;
                int v168 = v447;
                int v169 = v445;
                outlined consume of SGDataTypeStorage(v234, v452, v454, v451, v455, v447, v446, v445, 6);
                swift_bridgeObjectRelease();
                _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v472);
                outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
                *(void *)&long long v498 = 0xD000000000000030;
                *((void *)&v498 + 1) = 0x800000025C4252A0;
                lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                swift_allocError();
                *long long v235 = v486;
                long long v236 = v490;
                long long v238 = v487;
                long long v237 = v488;
                v235[3] = v489;
                v235[4] = v236;
                v235[1] = v238;
                v235[2] = v237;
                long long v239 = v494;
                long long v241 = v491;
                long long v240 = v492;
                v235[7] = v493;
                v235[8] = v239;
                v235[5] = v241;
                v235[6] = v240;
                long long v242 = v498;
                long long v244 = v495;
                long long v243 = v496;
                v235[11] = v497;
                v235[12] = v242;
                v235[9] = v244;
                v235[10] = v243;
                swift_willThrow();
                swift_release();
                long long v535 = v523;
                outlined release of String((uint64_t)&v535);
                outlined consume of NodePersonality(v444);
                swift_release();
                swift_release_n();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                long long v581 = *v442;
                outlined release of String((uint64_t)&v581);
                swift_release();
                long long v555 = v516;
                long long v180 = &v555;
                goto LABEL_230;
              }
              if (v233 == 1) {
                goto LABEL_160;
              }
              uint64_t v245 = 5;
              while (1)
              {
                uint64_t v246 = v245 - 3;
                if (__OFADD__(v245 - 4, 1)) {
                  break;
                }
                if (*(uint64_t *)(v462 + 8 * v245) > 0) {
                  goto LABEL_89;
                }
                ++v245;
                if (v246 == v233) {
                  goto LABEL_160;
                }
              }
              __break(1u);
LABEL_124:
              __break(1u);
              goto LABEL_125;
            }
LABEL_98:
            uint64_t v247 = one-time initialization token for half2;
            swift_retain();
            if (v247 == -1)
            {
              if (!v159) {
                goto LABEL_111;
              }
            }
            else
            {
              swift_once();
              if (!v159) {
                goto LABEL_111;
              }
            }
            char v248 = MetalDataType.isEqual(to:)();
            swift_release();
            if (v248)
            {
              uint64_t v162 = swift_release();
              unint64_t v470 = 0xD00000000000001ELL;
              unint64_t v471 = 0x800000025C425340;
              uint64_t v249 = *(void *)(v462 + 16);
              if (!v249) {
                goto LABEL_160;
              }
              if (*(uint64_t *)(v462 + 32) > 1)
              {
LABEL_109:
                unint64_t v252 = v26;
                int v165 = v451;
                int v166 = v455;
                int v167 = v446;
                int v168 = v447;
                int v169 = v445;
                outlined consume of SGDataTypeStorage(v252, v452, v454, v451, v455, v447, v446, v445, 6);
                swift_bridgeObjectRelease();
                _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v472);
                outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
                *(void *)&long long v498 = 0xD000000000000030;
                *((void *)&v498 + 1) = 0x800000025C4252A0;
                lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                swift_allocError();
                *uint64_t v253 = v486;
                long long v254 = v490;
                long long v256 = v487;
                long long v255 = v488;
                v253[3] = v489;
                v253[4] = v254;
                v253[1] = v256;
                v253[2] = v255;
                long long v257 = v494;
                long long v259 = v491;
                long long v258 = v492;
                v253[7] = v493;
                v253[8] = v257;
                v253[5] = v259;
                v253[6] = v258;
                long long v260 = v498;
                long long v262 = v495;
                long long v261 = v496;
                v253[11] = v497;
                v253[12] = v260;
                v253[9] = v262;
                v253[10] = v261;
                swift_willThrow();
                swift_release();
                long long v536 = v523;
                outlined release of String((uint64_t)&v536);
                outlined consume of NodePersonality(v444);
                swift_release();
                swift_release_n();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                long long v582 = *v442;
                outlined release of String((uint64_t)&v582);
                swift_release();
                long long v556 = v516;
                long long v180 = &v556;
                goto LABEL_230;
              }
              if (v249 == 1) {
                goto LABEL_160;
              }
              uint64_t v250 = 5;
              while (1)
              {
                uint64_t v251 = v250 - 3;
                if (__OFADD__(v250 - 4, 1)) {
                  goto LABEL_124;
                }
                if (*(uint64_t *)(v462 + 8 * v250) > 1) {
                  goto LABEL_109;
                }
                ++v250;
                if (v251 == v249) {
                  goto LABEL_160;
                }
              }
            }
LABEL_111:
            uint64_t v263 = one-time initialization token for half3;
            swift_retain();
            if (v263 == -1)
            {
              if (!v159) {
                goto LABEL_126;
              }
LABEL_113:
              char v264 = MetalDataType.isEqual(to:)();
              swift_release();
              if (v264)
              {
                uint64_t v162 = swift_release();
                unint64_t v470 = 0xD00000000000001ELL;
                unint64_t v471 = 0x800000025C425320;
                uint64_t v265 = *(void *)(v462 + 16);
                if (!v265) {
                  goto LABEL_160;
                }
                if (*(uint64_t *)(v462 + 32) > 2)
                {
LABEL_122:
                  Swift::String v268 = v26;
                  int v165 = v451;
                  int v166 = v455;
                  int v167 = v446;
                  int v168 = v447;
                  int v169 = v445;
                  outlined consume of SGDataTypeStorage(v268, v452, v454, v451, v455, v447, v446, v445, 6);
                  swift_bridgeObjectRelease();
                  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v472);
                  outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
                  *(void *)&long long v498 = 0xD000000000000030;
                  *((void *)&v498 + 1) = 0x800000025C4252A0;
                  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                  swift_allocError();
                  *unint64_t v269 = v486;
                  long long v270 = v490;
                  long long v272 = v487;
                  long long v271 = v488;
                  v269[3] = v489;
                  v269[4] = v270;
                  v269[1] = v272;
                  v269[2] = v271;
                  long long v273 = v494;
                  long long v275 = v491;
                  long long v274 = v492;
                  v269[7] = v493;
                  v269[8] = v273;
                  v269[5] = v275;
                  v269[6] = v274;
                  long long v276 = v498;
                  long long v278 = v495;
                  long long v277 = v496;
                  v269[11] = v497;
                  v269[12] = v276;
                  v269[9] = v278;
                  v269[10] = v277;
                  swift_willThrow();
                  swift_release();
                  long long v537 = v523;
                  outlined release of String((uint64_t)&v537);
                  outlined consume of NodePersonality(v444);
                  swift_release();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  long long v583 = *v442;
                  outlined release of String((uint64_t)&v583);
                  swift_release();
                  long long v557 = v516;
                  long long v180 = &v557;
                  goto LABEL_230;
                }
                if (v265 == 1) {
                  goto LABEL_160;
                }
                uint64_t v266 = 5;
                while (1)
                {
                  uint64_t v267 = v266 - 3;
                  if (__OFADD__(v266 - 4, 1)) {
                    break;
                  }
                  if (*(uint64_t *)(v462 + 8 * v266) > 2) {
                    goto LABEL_122;
                  }
                  ++v266;
                  if (v267 == v265) {
                    goto LABEL_160;
                  }
                }
                __break(1u);
                goto LABEL_139;
              }
LABEL_126:
              uint64_t v279 = one-time initialization token for half4;
              swift_retain();
              if (v279 == -1)
              {
                if (!v159) {
                  goto LABEL_140;
                }
LABEL_128:
                char v280 = MetalDataType.isEqual(to:)();
                swift_release();
                if (v280)
                {
                  uint64_t v162 = swift_release();
                  unint64_t v470 = 0xD00000000000001ELL;
                  unint64_t v471 = 0x800000025C425300;
                  uint64_t v281 = *(void *)(v462 + 16);
                  if (!v281) {
                    goto LABEL_160;
                  }
                  if (*(uint64_t *)(v462 + 32) > 3)
                  {
LABEL_137:
                    uint64_t v284 = v26;
                    int v165 = v451;
                    int v166 = v455;
                    int v167 = v446;
                    int v168 = v447;
                    int v169 = v445;
                    outlined consume of SGDataTypeStorage(v284, v452, v454, v451, v455, v447, v446, v445, 6);
                    swift_bridgeObjectRelease();
                    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v472);
                    outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
                    *(void *)&long long v498 = 0xD000000000000030;
                    *((void *)&v498 + 1) = 0x800000025C4252A0;
                    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                    swift_allocError();
                    _OWORD *v285 = v486;
                    long long v286 = v490;
                    long long v288 = v487;
                    long long v287 = v488;
                    v285[3] = v489;
                    v285[4] = v286;
                    v285[1] = v288;
                    v285[2] = v287;
                    long long v289 = v494;
                    long long v291 = v491;
                    long long v290 = v492;
                    v285[7] = v493;
                    v285[8] = v289;
                    v285[5] = v291;
                    v285[6] = v290;
                    long long v292 = v498;
                    long long v294 = v495;
                    long long v293 = v496;
                    v285[11] = v497;
                    v285[12] = v292;
                    v285[9] = v294;
                    v285[10] = v293;
                    swift_willThrow();
                    swift_release();
                    long long v538 = v523;
                    outlined release of String((uint64_t)&v538);
                    outlined consume of NodePersonality(v444);
                    swift_release();
                    swift_release_n();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    long long v584 = *v442;
                    outlined release of String((uint64_t)&v584);
                    swift_release();
                    long long v558 = v516;
                    long long v180 = &v558;
                    goto LABEL_230;
                  }
                  if (v281 == 1) {
                    goto LABEL_160;
                  }
                  uint64_t v282 = 5;
                  while (1)
                  {
                    uint64_t v283 = v282 - 3;
                    if (__OFADD__(v282 - 4, 1)) {
                      break;
                    }
                    if (*(uint64_t *)(v462 + 8 * v282) > 3) {
                      goto LABEL_137;
                    }
                    ++v282;
                    if (v283 == v281) {
                      goto LABEL_160;
                    }
                  }
                  __break(1u);
                  goto LABEL_153;
                }
LABEL_140:
                uint64_t v295 = one-time initialization token for color3;
                swift_retain();
                if (v295 == -1)
                {
                  if (!v159) {
                    goto LABEL_154;
                  }
LABEL_142:
                  char v296 = MetalDataType.isEqual(to:)();
                  swift_release();
                  if (v296)
                  {
                    uint64_t v162 = swift_release();
                    unint64_t v470 = 0xD00000000000001FLL;
                    unint64_t v471 = 0x800000025C4252E0;
                    uint64_t v297 = *(void *)(v462 + 16);
                    if (v297)
                    {
                      if (*(uint64_t *)(v462 + 32) <= 2)
                      {
                        if (v297 == 1) {
                          goto LABEL_160;
                        }
                        uint64_t v298 = 5;
                        while (1)
                        {
                          uint64_t v299 = v298 - 3;
                          if (__OFADD__(v298 - 4, 1))
                          {
                            __break(1u);
                            goto LABEL_223;
                          }
                          if (*(uint64_t *)(v462 + 8 * v298) > 2) {
                            break;
                          }
                          ++v298;
                          if (v299 == v297) {
                            goto LABEL_160;
                          }
                        }
                      }
                      uint64_t v300 = v26;
                      int v165 = v451;
                      int v166 = v455;
                      int v167 = v446;
                      int v168 = v447;
                      int v169 = v445;
                      outlined consume of SGDataTypeStorage(v300, v452, v454, v451, v455, v447, v446, v445, 6);
                      swift_bridgeObjectRelease();
                      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v472);
                      outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
                      *(void *)&long long v498 = 0xD000000000000030;
                      *((void *)&v498 + 1) = 0x800000025C4252A0;
                      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                      swift_allocError();
                      *long long v301 = v486;
                      long long v302 = v490;
                      long long v304 = v487;
                      long long v303 = v488;
                      v301[3] = v489;
                      v301[4] = v302;
                      v301[1] = v304;
                      v301[2] = v303;
                      long long v305 = v494;
                      long long v307 = v491;
                      long long v306 = v492;
                      v301[7] = v493;
                      v301[8] = v305;
                      v301[5] = v307;
                      v301[6] = v306;
                      long long v308 = v498;
                      long long v310 = v495;
                      long long v309 = v496;
                      v301[11] = v497;
                      v301[12] = v308;
                      v301[9] = v310;
                      v301[10] = v309;
                      swift_willThrow();
                      swift_release();
                      long long v539 = v523;
                      outlined release of String((uint64_t)&v539);
                      outlined consume of NodePersonality(v444);
                      swift_release();
                      swift_release_n();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      long long v585 = *v442;
                      outlined release of String((uint64_t)&v585);
                      swift_release();
                      long long v559 = v516;
                      long long v180 = &v559;
                      goto LABEL_230;
                    }
LABEL_160:
                    uint64_t v159 = (*(uint64_t (**)(uint64_t))(*(void *)v443 + 144))(v162);
                    if (v159 && (MetalDataType.isEqual(to:)() & 1) != 0)
                    {
                      swift_release();
                      uint64_t v313 = 0x74616F6C66;
                      unint64_t v314 = 0xE500000000000000;
LABEL_163:
                      String.append(_:)(*(Swift::String *)&v313);
                      uint64_t v315 = 1;
                      while (1)
                      {
                        int v341 = v447;
                        int v343 = v454;
                        int v342 = v455;
                        int v344 = v451;
                        if (*(void *)(v462 + 16) != v315)
                        {
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          outlined init with take of NodePersonality(&v603, &v628);
                          uint64_t v629 = *(void *)&v604[0];
                          unint64_t v472 = v465;
                          unint64_t v473 = v466;
                          uint64_t v474 = v467;
                          uint64_t v475 = v468;
                          uint64_t v476 = v632;
                          char v477 = v461;
                          uint64_t v479 = (uint64_t)v26;
                          id v370 = v452;
                          unint64_t v480 = (unint64_t)v452;
                          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v472);
                          outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
                          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                          long long v498 = 0uLL;
                          swift_allocError();
                          *uint64_t v371 = v486;
                          long long v372 = v490;
                          long long v374 = v487;
                          long long v373 = v488;
                          v371[3] = v489;
                          v371[4] = v372;
                          v371[1] = v374;
                          v371[2] = v373;
                          long long v375 = v494;
                          long long v377 = v491;
                          long long v376 = v492;
                          v371[7] = v493;
                          v371[8] = v375;
                          v371[5] = v377;
                          v371[6] = v376;
                          long long v378 = v498;
                          long long v380 = v495;
                          long long v379 = v496;
                          v371[11] = v497;
                          v371[12] = v378;
                          v371[9] = v380;
                          v371[10] = v379;
                          swift_bridgeObjectRetain();
                          outlined retain of NodePersonality(&v628);
                          outlined retain of [Input]((uint64_t)&v629);
                          swift_willThrow();
                          swift_release();
                          long long v544 = v523;
                          outlined release of String((uint64_t)&v544);
                          outlined consume of NodePersonality(v444);
                          swift_release();
                          swift_release_n();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          long long v575 = *v442;
                          outlined release of String((uint64_t)&v575);
                          swift_release();
                          long long v564 = v516;
                          outlined release of String((uint64_t)&v564);
                          uint64_t v381 = v453;
                          id v382 = v370;
                          int v383 = v343;
                          int v384 = v344;
                          int v385 = v342;
                          int v386 = v341;
                          int v387 = v446;
LABEL_196:
                          int v388 = v445;
                          goto LABEL_231;
                        }
                        outlined consume of SGDataTypeStorage(v26, v452, v454, v451, v455, v447, v446, v445, 6);
                        uint64_t v345 = v436;
                        swift_retain();
                        uint64_t v346 = swift_bridgeObjectRetain();
                        uint64_t v347 = v469;
                        uint64_t v348 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySiGG_11ShaderGraph9InputSpecVs5NeverOTg507_sS2i11f6Graph9hi32VIgyyo_Si6offset_Si7elementtACs5J126OIegnrzr_TR04_s11a79Graph0B0V19resolveSwizzleNodes12nodeDefStoreyAA04NodegH0V_tKFyAA0abI0VKXEfU_AA9cD13VSi_SitXEfU9_Tf3nnnpf_nTf1cn_n(v346);
                        uint64_t v632 = v347;
                        swift_bridgeObjectRelease();
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
                        uint64_t v349 = swift_allocObject();
                        long long v469 = xmmword_25C418EE0;
                        *(_OWORD *)(v349 + 16) = xmmword_25C418EE0;
                        *(void *)(v349 + 32) = 0x726F74636576;
                        *(void *)(v349 + 40) = 0xE600000000000000;
                        *(void *)(v349 + 48) = v345;
                        *(void *)&long long v486 = v349;
                        unint64_t v350 = v443;
                        swift_retain();
                        swift_retain();
                        specialized Array.append<A>(contentsOf:)(v348);
                        long long v26 = (void *)v486;
                        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
                        uint64_t v159 = swift_allocObject();
                        *(_OWORD *)(v159 + 16) = v469;
                        *(void *)(v159 + 32) = 7632239;
                        *(void *)(v159 + 40) = 0xE300000000000000;
                        *(void *)(v159 + 48) = v350;
                        uint64_t v351 = swift_allocObject();
                        unint64_t v352 = v471;
                        *(void *)(v351 + 16) = v470;
                        *(void *)(v351 + 24) = v352;
                        *(void *)(v351 + 32) = v350;
                        unint64_t v353 = v351 | 0x2000000000000000;
                        uint64_t v354 = (uint64_t)v460;
                        unint64_t v355 = *((void *)v460 + 5);
                        swift_retain_n();
                        specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v355, (uint64_t)v26, v159, v353, v354 + 64, v354, &v508);
                        swift_release();
                        swift_setDeallocating();
                        swift_arrayDestroy();
                        swift_deallocClassInstance();
                        swift_bridgeObjectRelease();
                        uint64_t v356 = v509;
                        uint64_t v574 = v509;
                        if (!*(void *)(v509 + 16)) {
                          break;
                        }
                        uint64_t v357 = *(void *)(v509 + 40);
                        uint64_t v358 = *(void *)(v509 + 48);
                        uint64_t v159 = *(void *)(v509 + 56);
                        uint64_t v359 = *(void *)(v509 + 64);
                        char v360 = *(unsigned char *)(v509 + 72);
                        uint64_t v361 = *(void *)(v509 + 80);
                        *(void *)&long long v597 = *(void *)(v509 + 32);
                        *((void *)&v597 + 1) = v357;
                        uint64_t v598 = v358;
                        uint64_t v599 = v159;
                        uint64_t v600 = v359;
                        char v601 = v360;
                        uint64_t v602 = v361;
                        swift_retain();
                        swift_bridgeObjectRetain();
                        Graph.moveEdge(from:to:)((uint64_t)&v515, &v597);
                        swift_bridgeObjectRelease();
                        swift_release();
                        uint64_t v573 = v510;
                        if (!*(void *)(v510 + 16)) {
                          goto LABEL_200;
                        }
                        uint64_t v362 = *(void *)(v510 + 40);
                        uint64_t v363 = *(void *)(v510 + 48);
                        uint64_t v159 = *(void *)(v510 + 56);
                        uint64_t v364 = *(void *)(v510 + 64);
                        char v365 = *(unsigned char *)(v510 + 72);
                        uint64_t v366 = *(void *)(v510 + 80);
                        v594[0] = *(void *)(v510 + 32);
                        v594[1] = v362;
                        v594[2] = v363;
                        v594[3] = v159;
                        v594[4] = v364;
                        char v595 = v365;
                        uint64_t v596 = v366;
                        swift_retain();
                        swift_bridgeObjectRetain();
                        Graph.moveEdges(from:to:)((uint64_t)v502, (uint64_t)v594);
                        swift_bridgeObjectRelease();
                        uint64_t v367 = swift_release();
                        uint64_t v368 = *(void *)(v356 + 16);
                        if (v368)
                        {
                          v593[0] = v462;
                          v593[1] = v356;
                          v593[2] = v356 + 32;
                          v593[3] = 1;
                          v593[4] = (2 * v368) | 1;
                          MEMORY[0x270FA5388](v367);
                          outlined retain of [Input]((uint64_t)&v574);
                          uint64_t v369 = v632;
                          specialized Sequence.forEach(_:)(v593, (void (*)(uint64_t, _OWORD *))partial apply for closure #12 in closure #1 in Graph.resolveSwizzleNodes(nodeDefStore:));
                          *(void *)&long long v469 = v369;
                          if (v369)
                          {
                            swift_release();
                            long long v548 = v523;
                            outlined release of String((uint64_t)&v548);
                            outlined init with take of NodePersonality(&v508, &v572);
                            outlined release of NodePersonality(&v572);
                            outlined release of [Input]((uint64_t)&v574);
                            outlined release of [Input]((uint64_t)&v573);
                            outlined consume of NodePersonality(v444);
                            swift_release_n();
                            swift_release_n();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            long long v571 = *v442;
                            outlined release of String((uint64_t)&v571);
                            swift_release();
                            long long v567 = v516;
                            outlined release of String((uint64_t)&v567);
                            outlined consume of SGDataTypeStorage(v453, v452, v454, v451, v455, v447, v446, v445, 6);
                            swift_bridgeObjectRelease();
                            outlined release of [Input]((uint64_t)&v574);
                            v463(v458, v459);
                          }
                          else
                          {
                            swift_release();
                            long long v543 = v523;
                            outlined release of String((uint64_t)&v543);
                            outlined init with take of NodePersonality(&v508, &v570);
                            outlined release of NodePersonality(&v570);
                            outlined release of [Input]((uint64_t)&v574);
                            outlined release of [Input]((uint64_t)&v573);
                            outlined consume of NodePersonality(v444);
                            swift_release_n();
                            swift_release_n();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            long long v569 = *v442;
                            outlined release of String((uint64_t)&v569);
                            swift_release();
                            long long v563 = v516;
                            outlined release of String((uint64_t)&v563);
                            outlined consume of SGDataTypeStorage(v453, v452, v454, v451, v455, v447, v446, v445, 6);
                            swift_bridgeObjectRelease();
                            outlined release of [Input]((uint64_t)&v574);
                            v463(v458, v459);
                          }
                          return;
                        }
LABEL_201:
                        __break(1u);
LABEL_202:
                        swift_once();
                        if (v159)
                        {
LABEL_185:
                          char v338 = MetalDataType.isEqual(to:)();
                          swift_release();
                          if (v338)
                          {
                            swift_release();
                            uint64_t v339 = 0x3474616F6C66;
LABEL_187:
                            unint64_t v340 = 0xE600000000000000;
                            goto LABEL_188;
                          }
                        }
LABEL_203:
                        uint64_t v389 = one-time initialization token for half;
                        swift_retain();
                        if (v389 == -1)
                        {
                          if (v159) {
                            goto LABEL_205;
                          }
                        }
                        else
                        {
                          swift_once();
                          if (v159)
                          {
LABEL_205:
                            char v390 = MetalDataType.isEqual(to:)();
                            swift_release();
                            if (v390)
                            {
                              swift_release();
                              uint64_t v313 = 1718378856;
                              unint64_t v314 = 0xE400000000000000;
                              goto LABEL_163;
                            }
                          }
                        }
                        uint64_t v391 = one-time initialization token for half2;
                        swift_retain();
                        if (v391 == -1)
                        {
                          if (!v159) {
                            goto LABEL_213;
                          }
LABEL_210:
                          char v392 = MetalDataType.isEqual(to:)();
                          swift_release();
                          if ((v392 & 1) == 0) {
                            goto LABEL_213;
                          }
                          swift_release();
                          uint64_t v318 = 0x32666C6168;
                          unint64_t v319 = 0xE500000000000000;
LABEL_168:
                          String.append(_:)(*(Swift::String *)&v318);
                          uint64_t v315 = 2;
                        }
                        else
                        {
                          swift_once();
                          if (v159) {
                            goto LABEL_210;
                          }
LABEL_213:
                          uint64_t v393 = one-time initialization token for half3;
                          swift_retain();
                          if (v393 == -1)
                          {
                            if (v159) {
                              goto LABEL_215;
                            }
                          }
                          else
                          {
                            swift_once();
                            if (v159)
                            {
LABEL_215:
                              char v394 = MetalDataType.isEqual(to:)();
                              swift_release();
                              if (v394)
                              {
                                swift_release();
                                uint64_t v335 = 0x33666C6168;
                                unint64_t v336 = 0xE500000000000000;
                                goto LABEL_181;
                              }
                            }
                          }
                          uint64_t v395 = one-time initialization token for half4;
                          swift_retain();
                          if (v395 == -1)
                          {
                            if (!v159) {
                              goto LABEL_224;
                            }
LABEL_220:
                            char v396 = MetalDataType.isEqual(to:)();
                            swift_release();
                            if ((v396 & 1) == 0) {
                              goto LABEL_224;
                            }
                            swift_release();
                            uint64_t v339 = 0x34666C6168;
                            unint64_t v340 = 0xE500000000000000;
LABEL_188:
                            String.append(_:)(*(Swift::String *)&v339);
                            uint64_t v315 = 4;
                          }
                          else
                          {
LABEL_223:
                            swift_once();
                            if (v159) {
                              goto LABEL_220;
                            }
LABEL_224:
                            uint64_t v397 = one-time initialization token for color3;
                            swift_retain();
                            if (v397 == -1)
                            {
                              if (!v159) {
                                goto LABEL_234;
                              }
                            }
                            else
                            {
LABEL_233:
                              swift_once();
                              if (!v159)
                              {
LABEL_234:
                                if (one-time initialization token for color4 == -1)
                                {
                                  if (!v159) {
                                    goto LABEL_239;
                                  }
                                }
                                else
                                {
                                  swift_once();
                                  if (!v159)
                                  {
LABEL_239:
                                    swift_bridgeObjectRelease();
                                    uint64_t v411 = v26;
                                    int v412 = v451;
                                    int v413 = v455;
                                    int v414 = v446;
                                    int v415 = v447;
                                    outlined consume of SGDataTypeStorage(v411, v452, v454, v451, v455, v447, v446, v445, 6);
                                    swift_bridgeObjectRelease();
                                    outlined init with take of NodePersonality(&v603, &v626);
                                    uint64_t v627 = *(void *)&v604[0];
                                    long long v576 = *v442;
                                    unint64_t v472 = v465;
                                    unint64_t v473 = v466;
                                    uint64_t v474 = v467;
                                    uint64_t v475 = v468;
                                    uint64_t v476 = v632;
                                    char v477 = v461;
                                    uint64_t v479 = v428;
                                    unint64_t v480 = v443;
                                    uint64_t v481 = v435;
                                    uint64_t v482 = v440;
                                    uint64_t v483 = v439;
                                    char v484 = v438;
                                    uint64_t v485 = v437;
                                    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi33_((uint64_t)&v472);
                                    outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
                                    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                                    long long v498 = 0uLL;
                                    swift_allocError();
                                    _OWORD *v416 = v486;
                                    long long v417 = v490;
                                    long long v419 = v487;
                                    long long v418 = v488;
                                    v416[3] = v489;
                                    v416[4] = v417;
                                    v416[1] = v419;
                                    v416[2] = v418;
                                    long long v420 = v494;
                                    long long v422 = v491;
                                    long long v421 = v492;
                                    v416[7] = v493;
                                    v416[8] = v420;
                                    v416[5] = v422;
                                    v416[6] = v421;
                                    long long v423 = v498;
                                    long long v425 = v495;
                                    long long v424 = v496;
                                    v416[11] = v497;
                                    v416[12] = v423;
                                    v416[9] = v425;
                                    v416[10] = v424;
                                    swift_bridgeObjectRetain();
                                    swift_retain();
                                    outlined retain of NodePersonality(&v626);
                                    outlined retain of [Input]((uint64_t)&v627);
                                    outlined retain of String((uint64_t)&v576);
                                    swift_willThrow();
                                    swift_release();
                                    long long v542 = v523;
                                    outlined release of String((uint64_t)&v542);
                                    outlined consume of NodePersonality(v444);
                                    swift_release();
                                    swift_release_n();
                                    swift_bridgeObjectRelease();
                                    swift_bridgeObjectRelease();
                                    outlined release of String((uint64_t)&v576);
                                    swift_release();
                                    long long v562 = v516;
                                    outlined release of String((uint64_t)&v562);
                                    id v382 = v452;
                                    uint64_t v381 = v453;
                                    int v383 = v454;
                                    int v384 = v412;
                                    int v385 = v413;
                                    int v386 = v415;
                                    int v387 = v414;
                                    goto LABEL_196;
                                  }
                                }
                                char v410 = MetalDataType.isEqual(to:)();
                                swift_release();
                                if ((v410 & 1) == 0) {
                                  goto LABEL_239;
                                }
                                uint64_t v339 = 0x34726F6C6F63;
                                goto LABEL_187;
                              }
                            }
                            char v398 = MetalDataType.isEqual(to:)();
                            swift_release();
                            if ((v398 & 1) == 0) {
                              goto LABEL_234;
                            }
                            swift_release();
                            uint64_t v335 = 0x33726F6C6F63;
LABEL_180:
                            unint64_t v336 = 0xE600000000000000;
LABEL_181:
                            String.append(_:)(*(Swift::String *)&v335);
                            uint64_t v315 = 3;
                          }
                        }
                      }
                      __break(1u);
LABEL_200:
                      __break(1u);
                      goto LABEL_201;
                    }
                    uint64_t v316 = one-time initialization token for float2;
                    swift_retain();
                    if (v316 == -1)
                    {
                      if (!v159) {
                        goto LABEL_176;
                      }
                    }
                    else
                    {
                      swift_once();
                      if (!v159) {
                        goto LABEL_176;
                      }
                    }
                    char v317 = MetalDataType.isEqual(to:)();
                    swift_release();
                    if (v317)
                    {
                      swift_release();
                      uint64_t v318 = 0x3274616F6C66;
                      unint64_t v319 = 0xE600000000000000;
                      goto LABEL_168;
                    }
LABEL_176:
                    uint64_t v333 = one-time initialization token for float3;
                    swift_retain();
                    if (v333 == -1)
                    {
                      if (!v159) {
                        goto LABEL_183;
                      }
                    }
                    else
                    {
                      swift_once();
                      if (!v159) {
                        goto LABEL_183;
                      }
                    }
                    char v334 = MetalDataType.isEqual(to:)();
                    swift_release();
                    if (v334)
                    {
                      swift_release();
                      uint64_t v335 = 0x3374616F6C66;
                      goto LABEL_180;
                    }
LABEL_183:
                    uint64_t v337 = one-time initialization token for float4;
                    swift_retain();
                    if (v337 != -1) {
                      goto LABEL_202;
                    }
                    if (!v159) {
                      goto LABEL_203;
                    }
                    goto LABEL_185;
                  }
LABEL_154:
                  if (one-time initialization token for color4 == -1)
                  {
                    if (!v159) {
                      goto LABEL_229;
                    }
                  }
                  else
                  {
                    swift_once();
                    if (!v159) {
                      goto LABEL_229;
                    }
                  }
                  char v311 = MetalDataType.isEqual(to:)();
                  uint64_t v162 = swift_release();
                  if (v311)
                  {
                    unint64_t v470 = 0xD00000000000001FLL;
                    unint64_t v471 = 0x800000025C425280;
                    uint64_t v312 = *(void *)(v462 + 16);
                    if (v312)
                    {
                      if (*(uint64_t *)(v462 + 32) <= 3)
                      {
                        if (v312 == 1) {
                          goto LABEL_160;
                        }
                        uint64_t v320 = 5;
                        while (1)
                        {
                          uint64_t v321 = v320 - 3;
                          if (__OFADD__(v320 - 4, 1))
                          {
                            __break(1u);
                            goto LABEL_233;
                          }
                          if (*(uint64_t *)(v462 + 8 * v320) > 3) {
                            break;
                          }
                          ++v320;
                          if (v321 == v312) {
                            goto LABEL_160;
                          }
                        }
                      }
                      long long v322 = v26;
                      int v165 = v451;
                      int v166 = v455;
                      int v167 = v446;
                      int v168 = v447;
                      int v169 = v445;
                      outlined consume of SGDataTypeStorage(v322, v452, v454, v451, v455, v447, v446, v445, 6);
                      swift_bridgeObjectRelease();
                      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v472);
                      outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
                      *(void *)&long long v498 = 0xD000000000000030;
                      *((void *)&v498 + 1) = 0x800000025C4252A0;
                      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                      swift_allocError();
                      *uint64_t v323 = v486;
                      long long v324 = v490;
                      long long v326 = v487;
                      long long v325 = v488;
                      v323[3] = v489;
                      v323[4] = v324;
                      v323[1] = v326;
                      v323[2] = v325;
                      long long v327 = v494;
                      long long v329 = v491;
                      long long v328 = v492;
                      v323[7] = v493;
                      v323[8] = v327;
                      v323[5] = v329;
                      v323[6] = v328;
                      long long v330 = v498;
                      long long v332 = v495;
                      long long v331 = v496;
                      v323[11] = v497;
                      v323[12] = v330;
                      v323[9] = v332;
                      v323[10] = v331;
                      swift_willThrow();
                      swift_release();
                      long long v540 = v523;
                      outlined release of String((uint64_t)&v540);
                      outlined consume of NodePersonality(v444);
                      swift_release();
                      swift_release_n();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      long long v586 = *v442;
                      outlined release of String((uint64_t)&v586);
                      swift_release();
                      long long v560 = v516;
                      long long v180 = &v560;
LABEL_230:
                      outlined release of String((uint64_t)v180);
                      id v382 = v452;
                      uint64_t v381 = v453;
                      int v383 = v454;
                      int v384 = v165;
                      int v385 = v166;
                      int v386 = v168;
                      int v387 = v167;
                      int v388 = v169;
LABEL_231:
                      outlined consume of SGDataTypeStorage(v381, v382, v383, v384, v385, v386, v387, v388, 6);
                      v463(v458, v459);
                      return;
                    }
                    goto LABEL_160;
                  }
LABEL_229:
                  uint64_t v399 = v26;
                  int v165 = v451;
                  int v166 = v455;
                  int v167 = v446;
                  int v168 = v447;
                  int v169 = v445;
                  outlined consume of SGDataTypeStorage(v399, v452, v454, v451, v455, v447, v446, v445, 6);
                  swift_bridgeObjectRelease();
                  outlined init with take of NodePersonality(&v603, &v624);
                  uint64_t v625 = *(void *)&v604[0];
                  long long v561 = v516;
                  unint64_t v472 = v465;
                  unint64_t v473 = v466;
                  uint64_t v474 = v467;
                  uint64_t v475 = v468;
                  uint64_t v476 = v632;
                  char v477 = v461;
                  uint64_t v479 = v429;
                  unint64_t v480 = v427[0];
                  uint64_t v481 = v433;
                  uint64_t v482 = v432;
                  uint64_t v483 = v431;
                  char v484 = v430;
                  uint64_t v485 = v434;
                  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi32_((uint64_t)&v472);
                  outlined init with take of UserGraphError.ErrorType((uint64_t)&v472, (uint64_t)&v486);
                  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                  long long v498 = 0uLL;
                  swift_allocError();
                  _OWORD *v400 = v486;
                  long long v401 = v490;
                  long long v403 = v487;
                  long long v402 = v488;
                  v400[3] = v489;
                  v400[4] = v401;
                  v400[1] = v403;
                  v400[2] = v402;
                  long long v404 = v494;
                  long long v406 = v491;
                  long long v405 = v492;
                  v400[7] = v493;
                  v400[8] = v404;
                  v400[5] = v406;
                  v400[6] = v405;
                  long long v407 = v498;
                  long long v409 = v495;
                  long long v408 = v496;
                  v400[11] = v497;
                  v400[12] = v407;
                  v400[9] = v409;
                  v400[10] = v408;
                  swift_bridgeObjectRetain();
                  swift_retain();
                  outlined retain of NodePersonality(&v624);
                  outlined retain of [Input]((uint64_t)&v625);
                  outlined retain of String((uint64_t)&v561);
                  swift_willThrow();
                  swift_release();
                  long long v541 = v523;
                  outlined release of String((uint64_t)&v541);
                  outlined consume of NodePersonality(v444);
                  swift_release();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  long long v587 = *v442;
                  outlined release of String((uint64_t)&v587);
                  swift_release();
                  long long v180 = &v561;
                  goto LABEL_230;
                }
LABEL_153:
                swift_once();
                if (!v159) {
                  goto LABEL_154;
                }
                goto LABEL_142;
              }
LABEL_139:
              swift_once();
              if (!v159) {
                goto LABEL_140;
              }
              goto LABEL_128;
            }
LABEL_125:
            swift_once();
            if (!v159) {
              goto LABEL_126;
            }
            goto LABEL_113;
          }
LABEL_97:
          swift_once();
          if (!v159) {
            goto LABEL_98;
          }
          goto LABEL_86;
        }
LABEL_83:
        swift_once();
        if (!v159) {
          goto LABEL_84;
        }
        goto LABEL_72;
      }
LABEL_69:
      swift_once();
      if (!v159) {
        goto LABEL_70;
      }
      goto LABEL_57;
    }
    __break(1u);
    goto LABEL_47;
  }
}

uint64_t closure #12 in closure #1 in Graph.resolveSwizzleNodes(nodeDefStore:)(Swift::Int a1, unint64_t a2)
{
  uint64_t result = Graph.constantIntegerNode(for:)(a1, &v5);
  if (!v2)
  {
    ShaderGraphNode.out.getter((uint64_t)v7);
    Graph.connect(_:to:)((uint64_t)v7, a2);
    swift_release();
    long long v12 = v8;
    outlined release of String((uint64_t)&v12);
    outlined init with take of NodePersonality(&v5, &v11);
    outlined release of NodePersonality(&v11);
    uint64_t v10 = *((void *)&v5 + 1);
    outlined release of [Input]((uint64_t)&v10);
    uint64_t v9 = v6;
    return outlined release of [Input]((uint64_t)&v9);
  }
  return result;
}

uint64_t Graph.constantIntegerNode(for:)@<X0>(Swift::Int a1@<X0>, _OWORD *a2@<X8>)
{
  Swift::String v5 = constantFunction(for:)(a1);
  uint64_t result = v5._countAndFlagsBits;
  if (!v6)
  {
    if (one-time initialization token for int32 != -1) {
      swift_once();
    }
    uint64_t v7 = static MetalDataType.int32;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25C418EE0;
    *(void *)(inited + 32) = 7632239;
    *(void *)(inited + 40) = 0xE300000000000000;
    *(void *)(inited + 48) = v7;
    uint64_t v9 = swift_allocObject();
    *(Swift::String *)(v9 + 16) = v5;
    *(void *)(v9 + 32) = v7;
    unint64_t v10 = v9 | 0x2000000000000000;
    unint64_t v11 = *(void *)(v2 + 40);
    swift_retain_n();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v11, MEMORY[0x263F8EE78], inited, v10, v2 + 64, v2, (unint64_t *)&v13);
    swift_release();
    swift_release();
    swift_setDeallocating();
    uint64_t result = swift_arrayDestroy();
    long long v12 = v14[0];
    *a2 = v13;
    a2[1] = v12;
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v14 + 9);
  }
  return result;
}

double Graph.insertGetCustomUniformsStruct(type:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C418EE0;
  *(void *)(inited + 32) = 7632239;
  *(void *)(inited + 40) = 0xE300000000000000;
  *(void *)(inited + 48) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 12580;
  *(void *)(v6 + 24) = 0xE200000000000000;
  unint64_t v7 = v6 | 0x6000000000000000;
  unint64_t v8 = *(void *)(v2 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v8, MEMORY[0x263F8EE78], inited, v7, v2 + 64, v2, (unint64_t *)&v11);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  long long v9 = v12[0];
  *a2 = v11;
  a2[1] = v9;
  double result = *(double *)((char *)v12 + 9);
  *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v12 + 9);
  return result;
}

uint64_t Output.getProperty(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v9 = v4[1];
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)v9 + 88))();
  specialized Sequence.first(where:)(v10, a2, (uint64_t)a3, v89);
  swift_bridgeObjectRelease();
  outlined init with take of MetalFunctionNode?((uint64_t)v89, (uint64_t)&v91, &demangling cache variable for type metadata for DataTypeProperty?);
  if (*((void *)&v91 + 1))
  {
    int64_t v60 = a4;
    uint64_t v61 = (uint64_t)v4;
    long long v94 = v91;
    uint64_t v11 = v92;
    uint64_t v66 = v93;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_25C418EE0;
    *(void *)(v12 + 32) = 28265;
    uint64_t v102 = v12 + 32;
    *(void *)(v12 + 40) = 0xE200000000000000;
    *(void *)(v12 + 48) = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_25C418EE0;
    *(void *)(v13 + 32) = 7632239;
    *(void *)(v13 + 40) = 0xE300000000000000;
    *(void *)(v13 + 48) = v11;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a2;
    *(void *)(v14 + 24) = a3;
    unint64_t v67 = v14 | 0x8000000000000000;
    unint64_t v15 = *(void *)(a1 + 40);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v15, v12, v13, v67, a1 + 64, a1, (unint64_t *)v90);
    long long v68 = *(_OWORD *)&v90[8];
    uint64_t v62 = *(void *)v90;
    uint64_t v64 = *(void *)&v90[32];
    uint64_t v65 = *(void *)&v90[24];
    char v63 = v90[40];
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v16 = *(void *)(v68 + 16);
    if (v16)
    {
      int v17 = (void *)(v68 + 80);
      while (1)
      {
        uint64_t v19 = *(v17 - 6);
        uint64_t v18 = *(v17 - 5);
        uint64_t v21 = *(v17 - 4);
        unint64_t v20 = *(v17 - 3);
        uint64_t v22 = *(v17 - 2);
        char v23 = *((unsigned char *)v17 - 8);
        uint64_t v24 = *v17;
        if (v21 == 28265 && v20 == 0xE200000000000000) {
          break;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          goto LABEL_13;
        }
        v17 += 7;
        if (!--v16) {
          goto LABEL_10;
        }
      }
      unint64_t v20 = 0xE200000000000000;
LABEL_13:
      v99[0] = v19;
      v99[1] = v18;
      v99[2] = v21;
      v99[3] = v20;
      v99[4] = v22;
      char v100 = v23;
      uint64_t v101 = v24;
      swift_retain();
      swift_bridgeObjectRetain();
      Graph.connect(_:to:)(v61, (unint64_t)v99);
      swift_bridgeObjectRelease();
      swift_release();
      long long v95 = v94;
      outlined release of String((uint64_t)&v95);
      swift_release();
      uint64_t v96 = v66;
      uint64_t result = outlined release of [Input]((uint64_t)&v96);
      long long v59 = *(_OWORD *)&v90[16];
      *int64_t v60 = *(_OWORD *)v90;
      v60[1] = v59;
      *(_OWORD *)((char *)v60 + 25) = *(_OWORD *)&v90[25];
    }
    else
    {
LABEL_10:
      uint64_t v69 = v62;
      long long v70 = v68;
      uint64_t v71 = v65;
      uint64_t v72 = v64;
      char v73 = v63;
      uint64_t v74 = 28265;
      unint64_t v75 = 0xE200000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v69);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v69, (uint64_t)&v76);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v88 = 0uLL;
      swift_allocError();
      *long long v26 = v76;
      long long v27 = v80;
      long long v29 = v77;
      long long v28 = v78;
      v26[3] = v79;
      v26[4] = v27;
      v26[1] = v29;
      v26[2] = v28;
      long long v30 = v84;
      long long v32 = v81;
      long long v31 = v82;
      v26[7] = v83;
      v26[8] = v30;
      v26[5] = v32;
      v26[6] = v31;
      long long v33 = v88;
      long long v35 = v85;
      long long v34 = v86;
      v26[11] = v87;
      v26[12] = v33;
      v26[9] = v35;
      v26[10] = v34;
      swift_willThrow();
      long long v97 = v94;
      outlined release of String((uint64_t)&v97);
      swift_release();
      uint64_t v98 = v66;
      return outlined release of [Input]((uint64_t)&v98);
    }
  }
  else
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi45_((uint64_t)&v69);
    *(void *)&long long v76 = 0;
    *((void *)&v76 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v37._char countAndFlagsBits = 0x79747265706F7250;
    v37._uint64_t object = (void *)0xEA00000000002720;
    String.append(_:)(v37);
    v38._char countAndFlagsBits = a2;
    v38._uint64_t object = a3;
    String.append(_:)(v38);
    v39._uint64_t object = (void *)0x800000025C424D00;
    v39._char countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v39);
    uint64_t v41 = v4[2];
    long long v40 = (void *)v4[3];
    swift_bridgeObjectRetain();
    v42._char countAndFlagsBits = v41;
    v42._uint64_t object = v40;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43._char countAndFlagsBits = 0x7420687469772027;
    v43._uint64_t object = (void *)0xED00002720657079;
    String.append(_:)(v43);
    long long v44 = *(uint64_t (**)(uint64_t))(*(void *)v9 + 136);
    uint64_t v45 = swift_retain();
    v46._char countAndFlagsBits = v44(v45);
    String.append(_:)(v46);
    swift_release();
    swift_bridgeObjectRelease();
    v47._char countAndFlagsBits = 39;
    v47._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v47);
    long long v48 = v76;
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v69, (uint64_t)&v76);
    long long v88 = v48;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *long long v49 = v76;
    long long v50 = v80;
    long long v52 = v77;
    long long v51 = v78;
    v49[3] = v79;
    v49[4] = v50;
    v49[1] = v52;
    v49[2] = v51;
    long long v53 = v84;
    long long v55 = v81;
    long long v54 = v82;
    v49[7] = v83;
    v49[8] = v53;
    v49[5] = v55;
    v49[6] = v54;
    long long v56 = v88;
    long long v58 = v85;
    long long v57 = v86;
    v49[11] = v87;
    v49[12] = v56;
    v49[9] = v58;
    v49[10] = v57;
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #1 in Graph.resolveEnvironmentRadianceNode()(uint64_t result, uint64_t a2)
{
  unint64_t v3 = *(void *)result;
  if (*(void *)result >> 61 != 5) {
    return result;
  }
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v6 = *(void *)(result + 24);
  uint64_t v7 = *(void *)(result + 32);
  char v8 = *(unsigned char *)(result + 40);
  if (*(void *)((v3 & 0x1FFFFFFFFFFFFFFFLL) + 0x10) != 0xD000000000000022
    || *(void *)((v3 & 0x1FFFFFFFFFFFFFFFLL) + 0x18) != 0x800000025C425180)
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0) {
      return result;
    }
  }
  unint64_t v190 = v3;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_25C41BFD0;
  if (one-time initialization token for surface_parameters_private != -1) {
    swift_once();
  }
  uint64_t v186 = v2;
  uint64_t v11 = static MetalDataType.re.surface_parameters_private;
  *(void *)(v10 + 32) = 0x736D61726170;
  *(void *)(v10 + 40) = 0xE600000000000000;
  *(void *)(v10 + 48) = v11;
  uint64_t v12 = one-time initialization token for color3;
  swift_retain();
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v187 = v7;
  uint64_t v196 = v4;
  uint64_t v13 = static MetalDataType.color3;
  *(void *)(v10 + 56) = 0x6F6C6F4365736162;
  *(void *)(v10 + 64) = 0xE900000000000072;
  *(void *)(v10 + 72) = v13;
  uint64_t v14 = one-time initialization token for half;
  swift_retain();
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v378 = v9;
  char v189 = v8;
  uint64_t v15 = static MetalDataType.half;
  *(void *)(v10 + 80) = 0x73656E6867756F72;
  *(void *)(v10 + 88) = 0xE900000000000073;
  *(void *)(v10 + 96) = v15;
  *(void *)(v10 + 104) = 0x72616C7563657073;
  *(void *)(v10 + 112) = 0xE800000000000000;
  *(void *)(v10 + 120) = v15;
  *(void *)(v10 + 128) = 0x63696C6C6174656DLL;
  *(void *)(v10 + 136) = 0xE800000000000000;
  *(void *)(v10 + 144) = v15;
  uint64_t v16 = one-time initialization token for float3;
  swift_retain_n();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = static MetalDataType.float3;
  *(void *)(v10 + 152) = 0x6C616D726F6ELL;
  *(void *)(v10 + 160) = 0xE600000000000000;
  *(void *)(v10 + 168) = v17;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_25C418EE0;
  uint64_t v19 = one-time initialization token for EnvironmentRadianceResult;
  swift_retain();
  if (v19 != -1) {
    swift_once();
  }
  uint64_t v192 = v6;
  uint64_t v193 = v5;
  uint64_t v20 = static MetalDataType.re.EnvironmentRadianceResult;
  *(void *)(v18 + 32) = 7632239;
  *(void *)(v18 + 40) = 0xE300000000000000;
  *(void *)(v18 + 48) = v20;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = 0xD00000000000002ALL;
  *(void *)(v21 + 24) = 0x800000025C4251B0;
  *(void *)(v21 + 32) = v20;
  unint64_t v22 = v21 | 0x2000000000000000;
  unint64_t v23 = *(void *)(a2 + 40);
  swift_retain_n();
  uint64_t v197 = a2 + 64;
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v23, v10, v18, v22, a2 + 64, a2, &v221);
  unint64_t v181 = v221;
  long long v182 = v222;
  uint64_t v183 = v223;
  uint64_t v184 = v224;
  char v185 = v225;
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_25C418EE0;
  *(void *)(v24 + 32) = 28265;
  uint64_t v25 = static MetalDataType.re.EnvironmentRadianceResult;
  *(void *)(v24 + 40) = 0xE200000000000000;
  *(void *)(v24 + 48) = v25;
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_25C418EE0;
  uint64_t v27 = one-time initialization token for half3;
  swift_retain();
  if (v27 != -1) {
    swift_once();
  }
  uint64_t v28 = static MetalDataType.half3;
  *(void *)(v26 + 32) = 7632239;
  *(void *)(v26 + 40) = 0xE300000000000000;
  *(void *)(v26 + 48) = v28;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = 0xD000000000000029;
  *(void *)(v29 + 24) = 0x800000025C4251E0;
  *(void *)(v29 + 32) = v28;
  unint64_t v30 = v29 | 0x2000000000000000;
  unint64_t v31 = *(void *)(a2 + 40);
  swift_retain_n();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v31, v24, v26, v30, v197, a2, &v226);
  long long v180 = v227;
  unint64_t v176 = v226;
  uint64_t v178 = v229;
  uint64_t v179 = v228;
  char v177 = v230;
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_25C418EE0;
  uint64_t v33 = static MetalDataType.re.EnvironmentRadianceResult;
  *(void *)(v32 + 32) = 28265;
  *(void *)(v32 + 40) = 0xE200000000000000;
  *(void *)(v32 + 48) = v33;
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_25C418EE0;
  uint64_t v35 = static MetalDataType.half3;
  *(void *)(v34 + 32) = 7632239;
  *(void *)(v34 + 40) = 0xE300000000000000;
  *(void *)(v34 + 48) = v35;
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = 0xD00000000000002ALL;
  *(void *)(v36 + 24) = 0x800000025C425210;
  *(void *)(v36 + 32) = v35;
  unint64_t v37 = v36 | 0x2000000000000000;
  unint64_t v38 = *(void *)(a2 + 40);
  swift_retain_n();
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v38, v32, v34, v37, v197, a2, &v231);
  long long v194 = v232;
  unint64_t v174 = v231;
  uint64_t v39 = v233;
  uint64_t v40 = v234;
  char v175 = v235;
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v41 = v196;
  uint64_t v42 = *(void *)(v196 + 16);
  if (!v42)
  {
LABEL_26:
    unint64_t v201 = v190;
    *(void *)&long long v202 = v193;
    *((void *)&v202 + 1) = v41;
    uint64_t v203 = v192;
    uint64_t v204 = v187;
    char v205 = v189;
    unint64_t v206 = 0x5265737566666964;
    unint64_t v207 = 0xEF65636E61696461;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v201);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v201, (uint64_t)&v208);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v220 = 0uLL;
    swift_allocError();
    *long long v52 = v208;
    long long v53 = v212;
    long long v55 = v209;
    long long v54 = v210;
    v52[3] = v211;
    v52[4] = v53;
    v52[1] = v55;
    v52[2] = v54;
    long long v56 = v216;
    long long v58 = v213;
    long long v57 = v214;
    v52[7] = v215;
    v52[8] = v56;
    v52[5] = v58;
    v52[6] = v57;
    long long v59 = v220;
    long long v61 = v217;
    long long v60 = v218;
    v52[11] = v219;
    v52[12] = v59;
    v52[9] = v61;
    v52[10] = v60;
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v190);
    swift_bridgeObjectRetain();
    swift_willThrow();
    outlined init with take of NodePersonality(&v231, &v263);
    outlined release of NodePersonality(&v263);
    uint64_t v262 = v232;
    outlined release of [Input]((uint64_t)&v262);
    uint64_t v261 = *((void *)&v232 + 1);
    outlined release of [Input]((uint64_t)&v261);
    outlined init with take of NodePersonality(&v226, &v260);
    outlined release of NodePersonality(&v260);
    uint64_t v259 = v227;
    outlined release of [Input]((uint64_t)&v259);
    uint64_t v258 = *((void *)&v227 + 1);
    outlined release of [Input]((uint64_t)&v258);
    outlined init with take of NodePersonality(&v221, &v257);
    outlined release of NodePersonality(&v257);
    uint64_t v256 = v222;
    outlined release of [Input]((uint64_t)&v256);
    uint64_t v255 = *((void *)&v222 + 1);
    uint64_t v62 = &v255;
    return outlined release of [Input]((uint64_t)v62);
  }
  uint64_t v172 = v40;
  uint64_t v173 = v39;
  Swift::String v43 = (void *)(v196 + 80);
  while (1)
  {
    uint64_t v44 = *(v43 - 6);
    uint64_t v45 = *(v43 - 5);
    uint64_t v46 = *(v43 - 4);
    unint64_t v47 = *(v43 - 3);
    uint64_t v48 = *(v43 - 2);
    char v49 = *((unsigned char *)v43 - 8);
    uint64_t v50 = *v43;
    if (v46 == 0x5265737566666964 && v47 == 0xEF65636E61696461) {
      break;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      goto LABEL_28;
    }
    v43 += 7;
    if (!--v42)
    {
      uint64_t v371 = v44;
      uint64_t v372 = v45;
      uint64_t v373 = v46;
      unint64_t v374 = v47;
      uint64_t v375 = v48;
      char v376 = v49;
      uint64_t v377 = v50;
      uint64_t v41 = v196;
      goto LABEL_26;
    }
  }
  unint64_t v47 = 0xEF65636E61696461;
LABEL_28:
  uint64_t v371 = v44;
  uint64_t v372 = v45;
  uint64_t v373 = v46;
  unint64_t v374 = v47;
  uint64_t v375 = v48;
  char v376 = v49;
  uint64_t v377 = v50;
  uint64_t v63 = v196;
  uint64_t v64 = *(void *)(v196 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  if (!v64)
  {
LABEL_35:
    unint64_t v201 = v190;
    *(void *)&long long v202 = v193;
    *((void *)&v202 + 1) = v63;
    uint64_t v203 = v192;
    uint64_t v204 = v187;
    char v205 = v189;
    unint64_t v206 = 0xD000000000000010;
    unint64_t v207 = 0x800000025C425240;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v201);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v201, (uint64_t)&v208);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v220 = 0uLL;
    swift_allocError();
    *uint64_t v72 = v208;
    long long v73 = v212;
    long long v75 = v209;
    long long v74 = v210;
    v72[3] = v211;
    v72[4] = v73;
    v72[1] = v75;
    int v72[2] = v74;
    long long v76 = v216;
    long long v78 = v213;
    long long v77 = v214;
    v72[7] = v215;
    v72[8] = v76;
    void v72[5] = v78;
    v72[6] = v77;
    long long v79 = v220;
    long long v81 = v217;
    long long v80 = v218;
    v72[11] = v219;
    v72[12] = v79;
    v72[9] = v81;
    v72[10] = v80;
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v190);
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    outlined init with take of NodePersonality(&v231, &v272);
    outlined release of NodePersonality(&v272);
    uint64_t v271 = v232;
    outlined release of [Input]((uint64_t)&v271);
    uint64_t v270 = *((void *)&v232 + 1);
    outlined release of [Input]((uint64_t)&v270);
    outlined init with take of NodePersonality(&v226, &v269);
    outlined release of NodePersonality(&v269);
    uint64_t v268 = v227;
    outlined release of [Input]((uint64_t)&v268);
    uint64_t v267 = *((void *)&v227 + 1);
    outlined release of [Input]((uint64_t)&v267);
    outlined init with take of NodePersonality(&v221, &v266);
    outlined release of NodePersonality(&v266);
    uint64_t v265 = v222;
    outlined release of [Input]((uint64_t)&v265);
    uint64_t v264 = *((void *)&v222 + 1);
    uint64_t v62 = &v264;
    return outlined release of [Input]((uint64_t)v62);
  }
  uint64_t v65 = (void *)(v196 + 80);
  while (1)
  {
    uint64_t v66 = *(v65 - 6);
    uint64_t v378 = *(v65 - 5);
    uint64_t v67 = *(v65 - 4);
    uint64_t v68 = *(v65 - 2);
    char v69 = *((unsigned char *)v65 - 8);
    uint64_t v70 = *v65;
    if (v67 == 0xD000000000000010 && *(v65 - 3) == 0x800000025C425240)
    {
      unint64_t v82 = 0x800000025C425240;
      goto LABEL_38;
    }
    unint64_t v71 = *(v65 - 3);
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      break;
    }
    v65 += 7;
    if (!--v64)
    {
      uint64_t v364 = v66;
      uint64_t v365 = v378;
      uint64_t v366 = v67;
      unint64_t v367 = v71;
      uint64_t v368 = v68;
      char v369 = v69;
      uint64_t v370 = v70;
      uint64_t v63 = v196;
      goto LABEL_35;
    }
  }
  unint64_t v82 = v71;
LABEL_38:
  uint64_t v364 = v66;
  uint64_t v365 = v378;
  uint64_t v366 = v67;
  unint64_t v367 = v82;
  uint64_t v368 = v68;
  char v369 = v69;
  uint64_t v370 = v70;
  swift_retain();
  swift_bridgeObjectRetain();
  ShaderGraphNode.out.getter((uint64_t)v236);
  if (v186)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    outlined init with take of NodePersonality(&v231, &v340);
    outlined release of NodePersonality(&v340);
    uint64_t v339 = v232;
    outlined release of [Input]((uint64_t)&v339);
    uint64_t v338 = *((void *)&v232 + 1);
    outlined release of [Input]((uint64_t)&v338);
    outlined init with take of NodePersonality(&v226, &v337);
    outlined release of NodePersonality(&v337);
    uint64_t v336 = v227;
    outlined release of [Input]((uint64_t)&v336);
    uint64_t v335 = *((void *)&v227 + 1);
    outlined release of [Input]((uint64_t)&v335);
    outlined init with take of NodePersonality(&v221, &v334);
    outlined release of NodePersonality(&v334);
    uint64_t v333 = v222;
    outlined release of [Input]((uint64_t)&v333);
    uint64_t v332 = *((void *)&v222 + 1);
    uint64_t v62 = &v332;
    return outlined release of [Input]((uint64_t)v62);
  }
  uint64_t v83 = a2;
  Graph.moveEdges(from:to:)((uint64_t)&v371, (uint64_t)v236);
  swift_release();
  long long v331 = v237;
  outlined release of String((uint64_t)&v331);
  ShaderGraphNode.out.getter((uint64_t)v238);
  Graph.moveEdges(from:to:)((uint64_t)&v364, (uint64_t)v238);
  swift_release();
  long long v330 = v239;
  outlined release of String((uint64_t)&v330);
  uint64_t v170 = *(void *)(v193 + 16);
  if (!v170)
  {
LABEL_58:
    uint64_t v105 = static MetalDataType.re.surface_parameters_private;
    uint64_t v106 = swift_allocObject();
    *(_OWORD *)(v106 + 16) = xmmword_25C418EE0;
    *(void *)(v106 + 32) = 7632239;
    *(void *)(v106 + 40) = 0xE300000000000000;
    *(void *)(v106 + 48) = v105;
    uint64_t v107 = swift_allocObject();
    *(void *)(v107 + 16) = 12324;
    *(void *)(v107 + 24) = 0xE200000000000000;
    unint64_t v108 = v107 | 0x6000000000000000;
    unint64_t v109 = *(void *)(v83 + 40);
    swift_retain();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v109, MEMORY[0x263F8EE78], v106, v108, v197, v83, &v240);
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    ShaderGraphNode.out.getter((uint64_t)v243);
    uint64_t v320 = v222;
    uint64_t v121 = *(void *)(v222 + 16);
    if (v121)
    {
      long long v122 = (void *)(v222 + 80);
      while (1)
      {
        uint64_t v123 = *(v122 - 6);
        uint64_t v200 = *(v122 - 5);
        uint64_t v124 = *(v122 - 4);
        unint64_t v125 = *(v122 - 3);
        uint64_t v126 = *(v122 - 2);
        char v127 = *((unsigned char *)v122 - 8);
        uint64_t v128 = *v122;
        if (v124 == 0x736D61726170 && v125 == 0xE600000000000000) {
          break;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          goto LABEL_71;
        }
        v122 += 7;
        if (!--v121)
        {
          uint64_t v348 = v123;
          uint64_t v349 = v200;
          uint64_t v350 = v124;
          unint64_t v351 = v125;
          uint64_t v352 = v126;
          char v353 = v127;
          uint64_t v354 = v128;
          goto LABEL_69;
        }
      }
      unint64_t v125 = 0xE600000000000000;
LABEL_71:
      uint64_t v348 = v123;
      uint64_t v349 = v200;
      uint64_t v350 = v124;
      unint64_t v351 = v125;
      uint64_t v352 = v126;
      char v353 = v127;
      uint64_t v354 = v128;
      swift_retain();
      swift_bridgeObjectRetain();
      Graph.connect(_:to:)((uint64_t)v243, (unint64_t)&v348);
      ShaderGraphNode.out.getter((uint64_t)v245);
      uint64_t v319 = v227;
      uint64_t v140 = *(void *)(v227 + 16);
      if (v140)
      {
        long long v141 = (void *)(v227 + 80);
        while (1)
        {
          uint64_t v142 = *(v141 - 6);
          uint64_t v143 = *(v141 - 5);
          uint64_t v144 = *(v141 - 4);
          uint64_t v145 = *(v141 - 2);
          char v198 = *((unsigned char *)v141 - 8);
          uint64_t v199 = *v141;
          if (v144 == 28265 && *(v141 - 3) == 0xE200000000000000) {
            break;
          }
          unint64_t v147 = *(v141 - 3);
          if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
            goto LABEL_82;
          }
          v141 += 7;
          if (!--v140)
          {
            uint64_t v341 = v142;
            uint64_t v342 = v143;
            uint64_t v343 = v144;
            unint64_t v344 = v147;
            uint64_t v345 = v145;
            char v346 = v198;
            uint64_t v347 = v199;
            goto LABEL_80;
          }
        }
        unint64_t v147 = 0xE200000000000000;
LABEL_82:
        uint64_t v341 = v142;
        uint64_t v342 = v143;
        uint64_t v343 = v144;
        unint64_t v344 = v147;
        uint64_t v345 = v145;
        char v346 = v198;
        uint64_t v347 = v199;
        uint64_t v158 = v232;
        swift_retain();
        swift_bridgeObjectRetain();
        specialized Sequence.first(where:)(v158, 28265, 0xE200000000000000, v247);
        outlined init with take of MetalFunctionNode?((uint64_t)v247, (uint64_t)v248, (uint64_t *)&demangling cache variable for type metadata for Input?);
        if (*((void *)&v248[0] + 1))
        {
          long long v250 = v248[0];
          long long v251 = v248[1];
          long long v252 = v248[2];
          uint64_t v253 = v249;
          Graph.connect(_:to:)((uint64_t)v245, (unint64_t)&v341);
          Graph.connect(_:to:)((uint64_t)v245, (unint64_t)&v250);
          specialized Graph.remove(_:)(v192);
          swift_release();
          long long v254 = v251;
          outlined release of String((uint64_t)&v254);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          long long v307 = v246;
          outlined release of String((uint64_t)&v307);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          long long v306 = v244;
          outlined release of String((uint64_t)&v306);
          outlined init with take of NodePersonality(&v240, &v305);
          outlined release of NodePersonality(&v305);
          uint64_t v304 = v241;
          outlined release of [Input]((uint64_t)&v304);
          uint64_t v303 = v242;
          outlined release of [Input]((uint64_t)&v303);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          outlined init with take of NodePersonality(&v231, &v302);
          outlined release of NodePersonality(&v302);
          swift_bridgeObjectRelease();
          uint64_t v301 = *((void *)&v232 + 1);
          outlined release of [Input]((uint64_t)&v301);
          outlined init with take of NodePersonality(&v226, &v300);
          outlined release of NodePersonality(&v300);
          outlined release of [Input]((uint64_t)&v319);
          uint64_t v299 = *((void *)&v227 + 1);
          outlined release of [Input]((uint64_t)&v299);
          outlined init with take of NodePersonality(&v221, &v298);
          outlined release of NodePersonality(&v298);
          outlined release of [Input]((uint64_t)&v320);
          uint64_t v297 = *((void *)&v222 + 1);
          return outlined release of [Input]((uint64_t)&v297);
        }
        outlined init with take of NodePersonality(&v231, &v318);
        uint64_t v317 = *((void *)&v232 + 1);
        unint64_t v201 = v174;
        long long v202 = v194;
        uint64_t v203 = v173;
        uint64_t v204 = v172;
        char v205 = v175;
        unint64_t v206 = 28265;
        unint64_t v207 = 0xE200000000000000;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v201);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v201, (uint64_t)&v208);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        long long v220 = 0uLL;
        swift_allocError();
        *uint64_t v159 = v208;
        long long v160 = v212;
        long long v162 = v209;
        long long v161 = v210;
        v159[3] = v211;
        v159[4] = v160;
        v159[1] = v162;
        v159[2] = v161;
        long long v163 = v216;
        long long v165 = v213;
        long long v164 = v214;
        v159[7] = v215;
        v159[8] = v163;
        v159[5] = v165;
        v159[6] = v164;
        long long v166 = v220;
        long long v168 = v217;
        long long v167 = v218;
        v159[11] = v219;
        v159[12] = v166;
        v159[9] = v168;
        v159[10] = v167;
        swift_bridgeObjectRetain();
        outlined retain of NodePersonality(&v318);
        outlined retain of [Input]((uint64_t)&v317);
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        long long v316 = v246;
        outlined release of String((uint64_t)&v316);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        long long v315 = v244;
        outlined release of String((uint64_t)&v315);
        outlined init with take of NodePersonality(&v240, &v314);
        outlined release of NodePersonality(&v314);
        uint64_t v313 = v241;
        outlined release of [Input]((uint64_t)&v313);
        uint64_t v312 = v242;
        outlined release of [Input]((uint64_t)&v312);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        outlined release of NodePersonality(&v318);
        swift_bridgeObjectRelease();
        outlined release of [Input]((uint64_t)&v317);
        outlined init with take of NodePersonality(&v226, &v311);
        outlined release of NodePersonality(&v311);
        outlined release of [Input]((uint64_t)&v319);
        uint64_t v310 = *((void *)&v227 + 1);
        outlined release of [Input]((uint64_t)&v310);
        outlined init with take of NodePersonality(&v221, &v309);
        outlined release of NodePersonality(&v309);
        outlined release of [Input]((uint64_t)&v320);
        uint64_t v308 = *((void *)&v222 + 1);
        uint64_t v62 = &v308;
      }
      else
      {
LABEL_80:
        outlined init with take of NodePersonality(&v226, &v296);
        uint64_t v295 = *((void *)&v227 + 1);
        unint64_t v201 = v176;
        long long v202 = v180;
        uint64_t v203 = v179;
        uint64_t v204 = v178;
        char v205 = v177;
        unint64_t v206 = 28265;
        unint64_t v207 = 0xE200000000000000;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v201);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v201, (uint64_t)&v208);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        long long v220 = 0uLL;
        swift_allocError();
        *uint64_t v148 = v208;
        long long v149 = v212;
        long long v151 = v209;
        long long v150 = v210;
        v148[3] = v211;
        v148[4] = v149;
        v148[1] = v151;
        v148[2] = v150;
        long long v152 = v216;
        long long v154 = v213;
        long long v153 = v214;
        v148[7] = v215;
        v148[8] = v152;
        v148[5] = v154;
        v148[6] = v153;
        long long v155 = v220;
        long long v157 = v217;
        long long v156 = v218;
        v148[11] = v219;
        v148[12] = v155;
        v148[9] = v157;
        v148[10] = v156;
        outlined retain of [Input]((uint64_t)&v319);
        outlined retain of NodePersonality(&v296);
        outlined retain of [Input]((uint64_t)&v295);
        swift_willThrow();
        swift_release();
        long long v294 = v246;
        outlined release of String((uint64_t)&v294);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        long long v293 = v244;
        outlined release of String((uint64_t)&v293);
        outlined init with take of NodePersonality(&v240, &v292);
        outlined release of NodePersonality(&v292);
        uint64_t v291 = v241;
        outlined release of [Input]((uint64_t)&v291);
        uint64_t v290 = v242;
        outlined release of [Input]((uint64_t)&v290);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        outlined init with take of NodePersonality(&v231, &v289);
        outlined release of NodePersonality(&v289);
        uint64_t v288 = v232;
        outlined release of [Input]((uint64_t)&v288);
        uint64_t v287 = *((void *)&v232 + 1);
        outlined release of [Input]((uint64_t)&v287);
        outlined release of NodePersonality(&v296);
        outlined release of [Input]((uint64_t)&v319);
        outlined release of [Input]((uint64_t)&v295);
        outlined init with take of NodePersonality(&v221, &v286);
        outlined release of NodePersonality(&v286);
        outlined release of [Input]((uint64_t)&v320);
        uint64_t v285 = *((void *)&v222 + 1);
        uint64_t v62 = &v285;
      }
    }
    else
    {
LABEL_69:
      outlined init with take of NodePersonality(&v221, &v284);
      uint64_t v283 = *((void *)&v222 + 1);
      unint64_t v201 = v181;
      long long v202 = v182;
      uint64_t v203 = v183;
      uint64_t v204 = v184;
      char v205 = v185;
      unint64_t v206 = 0x736D61726170;
      unint64_t v207 = 0xE600000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v201);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v201, (uint64_t)&v208);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v220 = 0uLL;
      swift_allocError();
      *uint64_t v130 = v208;
      long long v131 = v212;
      long long v133 = v209;
      long long v132 = v210;
      v130[3] = v211;
      v130[4] = v131;
      v130[1] = v133;
      _OWORD v130[2] = v132;
      long long v134 = v216;
      long long v136 = v213;
      long long v135 = v214;
      v130[7] = v215;
      v130[8] = v134;
      void v130[5] = v136;
      v130[6] = v135;
      long long v137 = v220;
      long long v139 = v217;
      long long v138 = v218;
      v130[11] = v219;
      v130[12] = v137;
      v130[9] = v139;
      v130[10] = v138;
      outlined retain of [Input]((uint64_t)&v320);
      outlined retain of NodePersonality(&v284);
      outlined retain of [Input]((uint64_t)&v283);
      swift_willThrow();
      swift_release();
      long long v282 = v244;
      outlined release of String((uint64_t)&v282);
      outlined init with take of NodePersonality(&v240, &v281);
      outlined release of NodePersonality(&v281);
      uint64_t v280 = v241;
      outlined release of [Input]((uint64_t)&v280);
      uint64_t v279 = v242;
      outlined release of [Input]((uint64_t)&v279);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      outlined init with take of NodePersonality(&v231, &v278);
      outlined release of NodePersonality(&v278);
      uint64_t v277 = v232;
      outlined release of [Input]((uint64_t)&v277);
      uint64_t v276 = *((void *)&v232 + 1);
      outlined release of [Input]((uint64_t)&v276);
      outlined init with take of NodePersonality(&v226, &v275);
      outlined release of NodePersonality(&v275);
      uint64_t v274 = v227;
      outlined release of [Input]((uint64_t)&v274);
      uint64_t v273 = *((void *)&v227 + 1);
      outlined release of [Input]((uint64_t)&v273);
      outlined release of NodePersonality(&v284);
      outlined release of [Input]((uint64_t)&v320);
      uint64_t v62 = &v283;
    }
    return outlined release of [Input]((uint64_t)v62);
  }
  uint64_t v84 = v193 + 32;
  uint64_t v85 = v222;
  uint64_t v329 = v222;
  swift_bridgeObjectRetain_n();
  uint64_t v86 = 0;
  long long v171 = (void *)(v85 + 80);
  uint64_t v169 = v85;
  while (1)
  {
    uint64_t v87 = v84 + 56 * v86;
    unint64_t v88 = *(void *)(v87 + 16);
    unint64_t v89 = *(void *)(v87 + 24);
    uint64_t v90 = *(void *)(v87 + 48);
    char v91 = *(unsigned char *)(v87 + 40);
    uint64_t v92 = *(void *)(v87 + 32);
    uint64_t v93 = *(void *)(v87 + 8);
    v355[0] = *(void *)v87;
    v355[1] = v93;
    v355[2] = v88;
    long long v355[3] = v89;
    v355[4] = v92;
    char v356 = v91;
    uint64_t v357 = v90;
    uint64_t v94 = *(void *)(v85 + 16);
    if (!v94) {
      break;
    }
    uint64_t v188 = v86 + 1;
    long long v95 = v171;
    while (1)
    {
      uint64_t v96 = *(v95 - 6);
      uint64_t v97 = *(v95 - 5);
      unint64_t v98 = *(v95 - 4);
      uint64_t v99 = *(v95 - 2);
      char v100 = *((unsigned char *)v95 - 8);
      uint64_t v101 = *v95;
      if (v98 == v88 && *(v95 - 3) == v89)
      {
        unint64_t v103 = v89;
        goto LABEL_56;
      }
      uint64_t v191 = *(v95 - 6);
      unint64_t v103 = *(v95 - 3);
      unint64_t v104 = v88;
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        break;
      }
      v95 += 7;
      --v94;
      unint64_t v88 = v104;
      if (!v94)
      {
        *(void *)&long long v358 = v191;
        *((void *)&v358 + 1) = v97;
        unint64_t v359 = v98;
        unint64_t v360 = v103;
        uint64_t v361 = v99;
        char v362 = v100;
        uint64_t v363 = v101;
        goto LABEL_59;
      }
    }
    unint64_t v88 = v98;
    uint64_t v96 = v191;
LABEL_56:
    *(void *)&long long v358 = v96;
    *((void *)&v358 + 1) = v97;
    unint64_t v359 = v88;
    unint64_t v360 = v103;
    uint64_t v361 = v99;
    char v362 = v100;
    uint64_t v363 = v101;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    Graph.moveEdge(from:to:)((uint64_t)v355, &v358);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v85 = v169;
    uint64_t v86 = v188;
    uint64_t v84 = v193 + 32;
    if (v188 == v170)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v83 = a2;
      goto LABEL_58;
    }
  }
LABEL_59:
  unint64_t v110 = v88;
  swift_bridgeObjectRetain();
  outlined init with take of NodePersonality(&v221, &v328);
  uint64_t v327 = *((void *)&v222 + 1);
  unint64_t v201 = v181;
  long long v202 = v182;
  uint64_t v203 = v183;
  uint64_t v204 = v184;
  char v205 = v185;
  unint64_t v206 = v110;
  unint64_t v207 = v89;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v201);
  outlined init with take of UserGraphError.ErrorType((uint64_t)&v201, (uint64_t)&v208);
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  long long v220 = 0uLL;
  swift_allocError();
  *uint64_t v111 = v208;
  long long v112 = v212;
  long long v114 = v209;
  long long v113 = v210;
  v111[3] = v211;
  v111[4] = v112;
  v111[1] = v114;
  v111[2] = v113;
  long long v115 = v216;
  long long v117 = v213;
  long long v116 = v214;
  v111[7] = v215;
  char v111[8] = v115;
  v111[5] = v117;
  v111[6] = v116;
  long long v118 = v220;
  long long v120 = v217;
  long long v119 = v218;
  v111[11] = v219;
  v111[12] = v118;
  v111[9] = v120;
  v111[10] = v119;
  outlined retain of [Input]((uint64_t)&v329);
  outlined retain of NodePersonality(&v328);
  outlined retain of [Input]((uint64_t)&v327);
  swift_willThrow();
  swift_bridgeObjectRelease();
  outlined init with take of NodePersonality(&v231, &v326);
  outlined release of NodePersonality(&v326);
  uint64_t v325 = v232;
  outlined release of [Input]((uint64_t)&v325);
  uint64_t v324 = *((void *)&v232 + 1);
  outlined release of [Input]((uint64_t)&v324);
  outlined init with take of NodePersonality(&v226, &v323);
  outlined release of NodePersonality(&v323);
  uint64_t v322 = v227;
  outlined release of [Input]((uint64_t)&v322);
  uint64_t v321 = *((void *)&v227 + 1);
  outlined release of [Input]((uint64_t)&v321);
  swift_bridgeObjectRelease();
  swift_release();
  outlined release of NodePersonality(&v328);
  outlined release of [Input]((uint64_t)&v329);
  outlined release of [Input]((uint64_t)&v327);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t swizzleFunction #1 (for:) in Graph.replaceMultiOutputNodes()(uint64_t a1)
{
  if (one-time initialization token for float2 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 0xD000000000000024;
  }
  if (one-time initialization token for float3 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 0xD000000000000024;
  }
  if (one-time initialization token for float4 != -1) {
    swift_once();
  }
  if (MetalDataType.isEqual(to:)()) {
    return 0xD000000000000024;
  }
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)v16);
  *(void *)&v17[0] = 0;
  *((void *)&v17[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  uint64_t v3 = swift_bridgeObjectRelease();
  *(void *)&v17[0] = 0xD000000000000029;
  *((void *)&v17[0] + 1) = 0x800000025C425500;
  v4._char countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  long long v5 = v17[0];
  outlined init with take of UserGraphError.ErrorType((uint64_t)v16, (uint64_t)v17);
  long long v18 = v5;
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  swift_allocError();
  *uint64_t v6 = v17[0];
  long long v7 = v17[4];
  long long v9 = v17[1];
  long long v8 = v17[2];
  v6[3] = v17[3];
  v6[4] = v7;
  v6[1] = v9;
  v6[2] = v8;
  long long v10 = v17[8];
  long long v12 = v17[5];
  long long v11 = v17[6];
  v6[7] = v17[7];
  v6[8] = v10;
  v6[5] = v12;
  v6[6] = v11;
  long long v13 = v18;
  long long v15 = v17[9];
  long long v14 = v17[10];
  v6[11] = v17[11];
  v6[12] = v13;
  v6[9] = v15;
  v6[10] = v14;
  return swift_willThrow();
}

uint64_t closure #1 in Graph.replaceMultiOutputNodes()(uint64_t result, _OWORD *a2)
{
  if (*(void *)result >> 61 != 5) {
    return result;
  }
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = *(void *)(result + 16);
  uint64_t v6 = *(void *)((*(void *)result & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  uint64_t v7 = *(void *)((*(void *)result & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  if (v6 == 0xD000000000000014 && v7 == 0x800000025C425460
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (one-time initialization token for float2 != -1) {
      swift_once();
    }
    long long v8 = &static MetalDataType.float2;
  }
  else if (v6 == 0xD000000000000013 && v7 == 0x800000025C425480 {
         || ((char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 == 0xD000000000000014)
  }
           ? (BOOL v10 = v7 == 0x800000025C4254A0)
           : (BOOL v10 = 0),
             !v10 ? (char v11 = 0) : (char v11 = 1),
             (v9 & 1) != 0 || (v11 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (one-time initialization token for float3 != -1) {
      swift_once();
    }
    long long v8 = &static MetalDataType.float3;
  }
  else
  {
    if (v6 != 0xD000000000000013 || v7 != 0x800000025C4254C0)
    {
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v40 = v6 == 0xD000000000000014 && v7 == 0x800000025C4254E0;
      BOOL v41 = v40;
      if ((v39 & 1) == 0 && !v41)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          return result;
        }
      }
    }
    if (one-time initialization token for float4 != -1) {
      swift_once();
    }
    long long v8 = &static MetalDataType.float4;
  }
  uint64_t v12 = *v8;
  uint64_t v13 = swift_retain();
  uint64_t v14 = swizzleFunction #1 (for:) in Graph.replaceMultiOutputNodes()(v13);
  if (v2) {
    return swift_release();
  }
  uint64_t v16 = v15;
  if (!*(void *)(v4 + 16))
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v53 = v14;
  uint64_t v17 = *(void *)(v4 + 40);
  uint64_t v18 = *(void *)(v4 + 48);
  uint64_t v19 = *(void *)(v4 + 56);
  uint64_t v20 = *(void *)(v4 + 64);
  char v21 = *(unsigned char *)(v4 + 72);
  uint64_t v22 = *(void *)(v4 + 80);
  v48[0] = *(void *)(v4 + 32);
  v48[1] = v17;
  v48[2] = v18;
  v48[3] = v19;
  v48[4] = v20;
  char v49 = v21;
  uint64_t v50 = v22;
  long long v23 = a2[9];
  v51[8] = a2[8];
  v52[0] = v23;
  *(_OWORD *)((char *)v52 + 9) = *(_OWORD *)((char *)a2 + 153);
  long long v24 = a2[5];
  v51[4] = a2[4];
  void v51[5] = v24;
  long long v25 = a2[7];
  v51[6] = a2[6];
  v51[7] = v25;
  long long v26 = a2[3];
  v51[2] = a2[2];
  v51[3] = v26;
  long long v27 = a2[1];
  v51[0] = *a2;
  v51[1] = v27;
  swift_retain();
  swift_bridgeObjectRetain();
  outlined retain of Graph((uint64_t)v51);
  Graph.edge(to:)((uint64_t)v48, v42);
  outlined release of Graph((uint64_t)v51);
  outlined init with take of MetalFunctionNode?((uint64_t)v42, (uint64_t)v43, &demangling cache variable for type metadata for Edge?);
  if (!*((void *)&v43[0] + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  v44[4] = v43[4];
  v44[5] = v43[5];
  v44[6] = v43[6];
  v44[0] = v43[0];
  v44[1] = v43[1];
  v44[2] = v43[2];
  v44[3] = v43[3];
  Graph.remove(_:)((uint64_t)v44);
  uint64_t v28 = v5;
  uint64_t v29 = *(void *)(v5 + 16);
  if (v29)
  {
    uint64_t v30 = v16;
    swift_bridgeObjectRetain_n();
    Swift::Int v31 = 0;
    uint64_t v32 = (void *)(v28 + 80);
    do
    {
      uint64_t v33 = *(v32 - 5);
      uint64_t v34 = *(v32 - 4);
      uint64_t v35 = *(v32 - 3);
      uint64_t v36 = *(v32 - 2);
      char v37 = *((unsigned char *)v32 - 8);
      uint64_t v38 = *v32;
      v45[0] = *(v32 - 6);
      v45[1] = v33;
      v45[2] = v34;
      v45[3] = v35;
      v45[4] = v36;
      char v46 = v37;
      uint64_t v47 = v38;
      swift_retain();
      swift_bridgeObjectRetain();
      closure #1 in closure #1 in Graph.replaceMultiOutputNodes()(v31, (uint64_t)v45, (uint64_t)a2, v12, v53, v30, (uint64_t)v44);
      v32 += 7;
      ++v31;
      swift_bridgeObjectRelease();
      swift_release();
    }
    while (v29 != v31);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return (uint64_t)outlined release of Edge?(v42);
}

uint64_t closure #1 in closure #1 in Graph.replaceMultiOutputNodes()(Swift::Int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = Graph.constantIntegerNode(for:)(a1, &v45);
  if (!v7)
  {
    ShaderGraphNode.out.getter((uint64_t)v47);
    uint64_t v43 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 32) = 28265;
    *(_OWORD *)(inited + 16) = xmmword_25C418EF0;
    *(void *)(inited + 40) = 0xE200000000000000;
    *(void *)(inited + 48) = a4;
    uint64_t v16 = one-time initialization token for int32;
    swift_retain();
    if (v16 != -1) {
      swift_once();
    }
    uint64_t v17 = static MetalDataType.int32;
    *(void *)(inited + 56) = 0x7865646E69;
    *(void *)(inited + 64) = 0xE500000000000000;
    *(void *)(inited + 72) = v17;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    uint64_t v18 = swift_initStackObject();
    *(_OWORD *)(v18 + 16) = xmmword_25C418EE0;
    uint64_t v19 = one-time initialization token for float;
    swift_retain();
    if (v19 != -1) {
      swift_once();
    }
    uint64_t v20 = static MetalDataType.float;
    *(void *)(v18 + 32) = 7632239;
    *(void *)(v18 + 40) = 0xE300000000000000;
    *(void *)(v18 + 48) = v20;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = a5;
    *(void *)(v21 + 24) = a6;
    *(void *)(v21 + 32) = v20;
    unint64_t v44 = v21 | 0x2000000000000000;
    unint64_t v22 = *(void *)(a3 + 40);
    swift_retain_n();
    swift_bridgeObjectRetain();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v22, inited, v18, v44, a3 + 64, a3, &v49);
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_setDeallocating();
    uint64_t result = swift_arrayDestroy();
    long long v23 = *(_OWORD *)(a7 + 16);
    v59[0] = *(_OWORD *)a7;
    v59[1] = v23;
    v59[2] = *(_OWORD *)(a7 + 32);
    uint64_t v60 = *(void *)(a7 + 48);
    uint64_t v24 = v50;
    uint64_t v58 = v50;
    if (*(void *)(v50 + 16))
    {
      uint64_t v25 = *(void *)(v50 + 40);
      uint64_t v26 = *(void *)(v50 + 48);
      uint64_t v27 = *(void *)(v50 + 56);
      uint64_t v28 = *(void *)(v50 + 64);
      char v29 = *(unsigned char *)(v50 + 72);
      uint64_t v30 = *(void *)(v50 + 80);
      v67[0] = *(void *)(v50 + 32);
      v67[1] = v25;
      v67[2] = v26;
      v67[3] = v27;
      v67[4] = v28;
      char v68 = v29;
      uint64_t v69 = v30;
      swift_retain();
      swift_bridgeObjectRetain();
      Graph.connect(_:to:)((uint64_t)v59, (unint64_t)v67);
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      if (*(void *)(v24 + 16) >= 2uLL)
      {
        uint64_t v31 = *(void *)(v24 + 96);
        uint64_t v32 = *(void *)(v24 + 104);
        uint64_t v33 = *(void *)(v24 + 112);
        uint64_t v34 = *(void *)(v24 + 120);
        char v35 = *(unsigned char *)(v24 + 128);
        uint64_t v36 = *(void *)(v24 + 136);
        v64[0] = *(void *)(v24 + 88);
        v64[1] = v31;
        v64[2] = v32;
        v64[3] = v33;
        v64[4] = v34;
        char v65 = v35;
        uint64_t v66 = v36;
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.connect(_:to:)((uint64_t)v47, (unint64_t)v64);
        swift_bridgeObjectRelease();
        uint64_t result = swift_release();
        uint64_t v57 = v51;
        if (*(void *)(v51 + 16))
        {
          uint64_t v37 = *(void *)(v51 + 40);
          uint64_t v38 = *(void *)(v51 + 48);
          uint64_t v39 = *(void *)(v51 + 56);
          uint64_t v40 = *(void *)(v51 + 64);
          char v41 = *(unsigned char *)(v51 + 72);
          uint64_t v42 = *(void *)(v51 + 80);
          v61[0] = *(void *)(v51 + 32);
          v61[1] = v37;
          v61[2] = v38;
          v61[3] = v39;
          v61[4] = v40;
          char v62 = v41;
          uint64_t v63 = v42;
          swift_retain();
          swift_bridgeObjectRetain();
          Graph.moveEdges(from:to:)(v43, (uint64_t)v61);
          swift_release();
          long long v56 = v48;
          outlined release of String((uint64_t)&v56);
          outlined init with take of NodePersonality(&v45, &v55);
          outlined release of NodePersonality(&v55);
          uint64_t v54 = *((void *)&v45 + 1);
          outlined release of [Input]((uint64_t)&v54);
          uint64_t v53 = v46;
          outlined release of [Input]((uint64_t)&v53);
          outlined init with take of NodePersonality(&v49, &v52);
          outlined release of NodePersonality(&v52);
          outlined release of [Input]((uint64_t)&v58);
          outlined release of [Input]((uint64_t)&v57);
          swift_bridgeObjectRelease();
          return swift_release();
        }
LABEL_13:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> constantFunction(for:)(Swift::Int a1)
{
  unint64_t v3 = 0xD000000000000026;
  uint64_t v4 = (void *)0x800000025C424DB0;
  switch(a1)
  {
    case 0:
      break;
    case 1:
      uint64_t v5 = "ND_appleinternal_constant_one_integer";
      goto LABEL_5;
    case 2:
      uint64_t v5 = "ND_appleinternal_constant_two_integer";
LABEL_5:
      uint64_t v4 = (void *)((unint64_t)(v5 - 32) | 0x8000000000000000);
      unint64_t v3 = 0xD000000000000025;
      break;
    case 3:
      unint64_t v3 = 0xD000000000000027;
      uint64_t v4 = (void *)0x800000025C424D20;
      break;
    default:
      *(void *)&v21[0] = a1;
      memset(v18, 0, 41);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v20 = v6;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)v18);
      outlined init with take of UserGraphError.ErrorType((uint64_t)v18, (uint64_t)v21);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v22 = 0uLL;
      swift_allocError();
      *uint64_t v7 = v21[0];
      long long v8 = v21[4];
      long long v10 = v21[1];
      long long v9 = v21[2];
      v7[3] = v21[3];
      v7[4] = v8;
      v7[1] = v10;
      v7[2] = v9;
      long long v11 = v21[8];
      long long v13 = v21[5];
      long long v12 = v21[6];
      v7[7] = v21[7];
      unsigned char v7[8] = v11;
      v7[5] = v13;
      v7[6] = v12;
      long long v14 = v22;
      long long v16 = v21[9];
      long long v15 = v21[10];
      v7[11] = v21[11];
      v7[12] = v14;
      v7[9] = v16;
      v7[10] = v15;
      unint64_t v3 = swift_willThrow();
      break;
  }
  result._uint64_t object = v4;
  result._char countAndFlagsBits = v3;
  return result;
}

unint64_t *closure #2 in Graph.splitSharedNodes(nodeDefStore:surfaceShader:geometryModifier:)(unint64_t *result, uint64_t a2, uint64_t *a3, uint64_t *a4, void **a5, void **a6)
{
  unint64_t v6 = *result;
  if (*result != 0xE000000000000000)
  {
    uint64_t v10 = result[2];
    uint64_t v40 = result[3];
    uint64_t v11 = result[1];
    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AF0F4SpecVs5NeverOTg504_s11d111Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFyAKXEfU0_AA9fG59VAA0M0Vcfu_33_15bdc1b17c00ea157f8d68df2a99b331ApNTf3nnnpk_nTf1cn_nTm(v12, (uint64_t)v46, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
    swift_bridgeObjectRelease();
    uint64_t v14 = swift_bridgeObjectRetain();
    char v41 = a6;
    uint64_t v38 = a5;
    uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AF0F4SpecVs5NeverOTg504_s11d111Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFyAKXEfU0_AA9fG59VAA0M0Vcfu_33_15bdc1b17c00ea157f8d68df2a99b331ApNTf3nnnpk_nTf1cn_nTm(v14, (uint64_t)v45, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
    swift_bridgeObjectRelease();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(*(void *)(a2 + 40), v13, v15, v6, a2 + 64, a2, v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Set._Variant.insert(_:)((Swift::UInt *)v56, v47[3]);
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AF0F4SpecVs5NeverOTg504_s11d111Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFyAKXEfU0_AA9fG59VAA0M0Vcfu_33_15bdc1b17c00ea157f8d68df2a99b331ApNTf3nnnpk_nTf1cn_nTm(v16, (uint64_t)v44, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
    swift_bridgeObjectRelease();
    uint64_t v18 = swift_bridgeObjectRetain();
    uint64_t v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AF0F4SpecVs5NeverOTg504_s11d111Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFyAKXEfU0_AA9fG59VAA0M0Vcfu_33_15bdc1b17c00ea157f8d68df2a99b331ApNTf3nnnpk_nTf1cn_nTm(v18, (uint64_t)v43, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
    swift_bridgeObjectRelease();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(*(void *)(a2 + 40), v17, v19, v6, a2 + 64, a2, v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Set._Variant.insert(_:)((Swift::UInt *)v56, v48[3]);
    uint64_t v20 = v47[2];
    uint64_t v21 = v48[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v10, v20, v21, (_OWORD *)a2, a3, a4, v38, v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v47[1];
    uint64_t v23 = v48[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v11, v22, v23, (_OWORD *)a2, a3, a4, v38, v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = *v38;
    uint64_t v25 = (*v38)[2];
    if (v25)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = v24 + 11;
      do
      {
        long long v27 = *(_OWORD *)(v26 - 5);
        v54[0] = *(_OWORD *)(v26 - 7);
        v54[1] = v27;
        _OWORD v54[2] = *(_OWORD *)(v26 - 3);
        uint64_t v55 = *(v26 - 1);
        long long v28 = *((_OWORD *)v26 + 1);
        v56[0] = *(_OWORD *)v26;
        v56[1] = v28;
        _OWORD v56[2] = *((_OWORD *)v26 + 2);
        uint64_t v57 = v26[6];
        Graph.connect(_:to:)((uint64_t)v54, (unint64_t)v56);
        v26 += 14;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease();
    }
    char v29 = *v41;
    uint64_t v30 = (*v41)[2];
    if (v30)
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = v29 + 11;
      do
      {
        long long v32 = *(_OWORD *)(v31 - 5);
        v50[0] = *(_OWORD *)(v31 - 7);
        v50[1] = v32;
        v50[2] = *(_OWORD *)(v31 - 3);
        uint64_t v51 = *(v31 - 1);
        long long v33 = *((_OWORD *)v31 + 1);
        v52[0] = *(_OWORD *)v31;
        v52[1] = v33;
        v52[2] = *((_OWORD *)v31 + 2);
        uint64_t v53 = v31[6];
        Graph.connect(_:to:)((uint64_t)v50, (unint64_t)v52);
        v31 += 14;
        --v30;
      }
      while (v30);
      swift_bridgeObjectRelease();
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v35 = *v38;
    if (isUniquelyReferenced_nonNull_native)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, v35[2]);
    }
    else
    {
      *uint64_t v38 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, v35[3] >> 1);
      swift_bridgeObjectRelease();
    }
    int v36 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v37 = *v41;
    if (v36)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, v37[2]);
    }
    else
    {
      *char v41 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, v37[3] >> 1);
      swift_bridgeObjectRelease();
    }
    specialized Graph.remove(_:)(v40);
    outlined init with take of NodePersonality(v48, &v58);
    outlined release of NodePersonality(&v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of NodePersonality(v47, &v49);
    outlined release of NodePersonality(&v49);
    swift_bridgeObjectRelease();
    return (unint64_t *)swift_bridgeObjectRelease();
  }
  return result;
}

void closure #2 in closure #2 in Graph.splitSharedNodes(nodeDefStore:surfaceShader:geometryModifier:)(uint64_t a1, _OWORD *a2, uint64_t *a3, uint64_t *a4, void **a5, void **a6)
{
  long long v7 = *(_OWORD *)(a1 + 144);
  long long v98 = *(_OWORD *)(a1 + 128);
  long long v99 = v7;
  uint64_t v100 = *(void *)(a1 + 160);
  long long v8 = *(_OWORD *)(a1 + 80);
  long long v94 = *(_OWORD *)(a1 + 64);
  long long v95 = v8;
  long long v9 = *(_OWORD *)(a1 + 112);
  long long v96 = *(_OWORD *)(a1 + 96);
  long long v97 = v9;
  long long v10 = *(_OWORD *)(a1 + 16);
  v91[0] = *(_OWORD *)a1;
  v91[1] = v10;
  long long v11 = *(_OWORD *)(a1 + 48);
  long long v92 = *(_OWORD *)(a1 + 32);
  long long v93 = v11;
  v85[0] = v91[0];
  v85[1] = v10;
  uint64_t v86 = v92;
  char v87 = BYTE8(v92);
  uint64_t v88 = v11;
  uint64_t v12 = v94;
  uint64_t v13 = v95;
  uint64_t v14 = *((void *)&v97 + 1);
  uint64_t v15 = *((void *)&v98 + 1);
  uint64_t v50 = *((void *)&v94 + 1);
  uint64_t v51 = *((void *)&v11 + 1);
  uint64_t v76 = *((void *)&v11 + 1);
  long long v77 = v94;
  uint64_t v49 = *((void *)&v95 + 1);
  long long v78 = v95;
  char v48 = v96;
  char v79 = v96;
  uint64_t v47 = *((void *)&v96 + 1);
  uint64_t v80 = *((void *)&v96 + 1);
  uint64_t v56 = v98;
  uint64_t v57 = v97;
  v81[0] = v97;
  v81[1] = v98;
  uint64_t v55 = v99;
  uint64_t v82 = v99;
  char v54 = BYTE8(v99);
  char v83 = BYTE8(v99);
  uint64_t v53 = v100;
  uint64_t v84 = v100;
  long long v16 = a2[1];
  v89[0] = *a2;
  v89[1] = v16;
  long long v17 = a2[2];
  long long v18 = a2[3];
  long long v19 = a2[5];
  v89[4] = a2[4];
  v89[5] = v19;
  v89[2] = v17;
  v89[3] = v18;
  long long v20 = a2[6];
  long long v21 = a2[7];
  *(_OWORD *)((char *)v90 + 9) = *(_OWORD *)((char *)a2 + 153);
  long long v22 = a2[9];
  v89[8] = a2[8];
  v90[0] = v22;
  void v89[6] = v20;
  v89[7] = v21;
  outlined retain of (Input, (Input, Input))((uint64_t)v91);
  outlined retain of Graph((uint64_t)v89);
  Graph.edge(to:)((uint64_t)v85, v62);
  outlined release of Graph((uint64_t)v89);
  outlined init with take of MetalFunctionNode?((uint64_t)v62, (uint64_t)v63, &demangling cache variable for type metadata for Edge?);
  if (!*((void *)&v63[0] + 1))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_14:
    swift_release();
    return;
  }
  uint64_t v59 = v14;
  uint64_t v60 = v13;
  long long v68 = v63[4];
  long long v69 = v63[5];
  long long v70 = v63[6];
  long long v64 = v63[0];
  long long v65 = v63[1];
  long long v66 = v63[2];
  long long v67 = v63[3];
  Graph.remove(_:)((uint64_t)&v64);
  uint64_t v23 = *a3;
  long long v71 = v64;
  long long v72 = v65;
  long long v73 = v66;
  uint64_t v24 = v67;
  uint64_t v74 = v67;
  long long v25 = v64;
  long long v26 = v65;
  uint64_t v27 = v66;
  char v46 = BYTE8(v66);
  Swift::UInt v28 = v64;
  BOOL v29 = specialized Set.contains(_:)(v64, v23);
  BOOL v30 = specialized Set.contains(_:)(v28, *a4);
  if (v29)
  {
    if (v30)
    {
      long long v75 = v72;
      uint64_t v31 = *a5;
      swift_retain();
      outlined retain of String((uint64_t)&v75);
      swift_retain();
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a5 = v31;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        *a5 = v31;
      }
      unint64_t v34 = v31[2];
      unint64_t v33 = v31[3];
      if (v34 >= v33 >> 1)
      {
        uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v31);
        *a5 = v31;
      }
      v31[2] = v34 + 1;
      char v35 = &v31[14 * v34];
      *((_OWORD *)v35 + 2) = v25;
      *((_OWORD *)v35 + 3) = v26;
      v35[8] = v27;
      *((unsigned char *)v35 + 72) = v46;
      v35[10] = v24;
      v35[11] = v51;
      v35[12] = v12;
      v35[13] = v50;
      v35[14] = v60;
      v35[15] = v49;
      *((unsigned char *)v35 + 128) = v48;
      v35[17] = v47;
      int v36 = *a6;
      swift_retain();
      outlined retain of String((uint64_t)&v75);
      swift_retain();
      swift_bridgeObjectRetain();
      char v37 = swift_isUniquelyReferenced_nonNull_native();
      *a6 = v36;
      if ((v37 & 1) == 0)
      {
        int v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
        *a6 = v36;
      }
      unint64_t v39 = v36[2];
      unint64_t v38 = v36[3];
      if (v39 >= v38 >> 1)
      {
        int v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v36);
        *a6 = v36;
      }
      v36[2] = v39 + 1;
      uint64_t v40 = &v36[14 * v39];
      *((_OWORD *)v40 + 2) = v25;
      *((_OWORD *)v40 + 3) = v26;
      v40[8] = v27;
      *((unsigned char *)v40 + 72) = v46;
      v40[10] = v24;
      v40[11] = v57;
      v40[12] = v59;
      v40[13] = v56;
      v40[14] = v15;
      v40[15] = v55;
      *((unsigned char *)v40 + 128) = v54;
      v40[17] = v53;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    char v41 = &v76;
LABEL_18:
    Graph.connect(_:to:)((uint64_t)&v71, (unint64_t)v41);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_19:
    swift_release();
    outlined release of Edge?(v62);
    return;
  }
  if (v30)
  {
    char v41 = (uint64_t *)v81;
    goto LABEL_18;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v42 = type metadata accessor for Logger();
  __swift_project_value_buffer(v42, (uint64_t)logger);
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    long long v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v45 = 0;
    _os_log_impl(&dword_25C27E000, v43, v44, "Edge destination node isn't a surface node or geometry modifier node.", v45, 2u);
    MEMORY[0x261185880](v45, -1, -1);

    swift_bridgeObjectRelease();
    swift_release();
    outlined release of Edge?(v62);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined release of Edge?(v62);
}

uint64_t closure #1 in Graph.insertConversionFromFloatColorToHalfColor(for:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 96);
  unint64_t v3 = (uint64_t *)(*a1 + OBJC_IVAR___SGInput_name);
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  uint64_t v6 = *(void *)(v2 + 16);
  if (!v6)
  {
LABEL_10:
    uint64_t v15 = *(void *)(a2 + 88);
    char v17 = *(unsigned char *)(a2 + 120);
    unint64_t v95 = *(void *)(a2 + 80);
    unint64_t v16 = v95;
    uint64_t v96 = v15;
    uint64_t v97 = v2;
    long long v98 = *(_OWORD *)(a2 + 104);
    char v99 = v17;
    uint64_t v100 = v4;
    unint64_t v101 = v5;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v95);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v95, (uint64_t)&v102);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v114 = 0uLL;
    swift_allocError();
    *long long v18 = v102;
    long long v19 = v106;
    long long v21 = v103;
    long long v20 = v104;
    _OWORD v18[3] = v105;
    v18[4] = v19;
    v18[1] = v21;
    v18[2] = v20;
    long long v22 = v110;
    long long v24 = v107;
    long long v23 = v108;
    v18[7] = v109;
    v18[8] = v22;
    v18[5] = v24;
    v18[6] = v23;
    long long v25 = v114;
    long long v27 = v111;
    long long v26 = v112;
    v18[11] = v113;
    v18[12] = v25;
    v18[9] = v27;
    v18[10] = v26;
    outlined copy of NodePersonality(v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  unint64_t v89 = (uint64_t *)(*a1 + OBJC_IVAR___SGInput_name);
  uint64_t v91 = *a1;
  uint64_t v92 = a2;
  long long v7 = (void *)(v2 + 80);
  while (1)
  {
    uint64_t v93 = *(v7 - 6);
    uint64_t v8 = *(v7 - 4);
    uint64_t v126 = *(v7 - 5);
    uint64_t v9 = *(v7 - 2);
    char v10 = *((unsigned char *)v7 - 8);
    uint64_t v11 = *v7;
    if (v8 == v4 && *(v7 - 3) == v5) {
      break;
    }
    uint64_t v13 = v4;
    unint64_t v14 = v5;
    unint64_t v5 = *(v7 - 3);
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      goto LABEL_12;
    }
    v7 += 7;
    --v6;
    unint64_t v5 = v14;
    uint64_t v4 = v13;
    if (!v6)
    {
      a2 = v92;
      uint64_t v2 = *(void *)(v92 + 96);
      uint64_t v4 = *v89;
      unint64_t v5 = v89[1];
      goto LABEL_10;
    }
  }
  uint64_t v8 = v4;
LABEL_12:
  v117[0] = v93;
  v117[1] = v126;
  v117[2] = v8;
  v117[3] = v5;
  v117[4] = v9;
  char v118 = v10;
  uint64_t v119 = v11;
  BOOL v29 = (void *)(v91 + OBJC_IVAR___SGInput_type);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_beginAccess();
  if (*v29 == 41)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_25C418EE0;
    if (one-time initialization token for float3 != -1) {
      swift_once();
    }
    uint64_t v42 = static MaterialXDataType.float3;
    *(void *)(v30 + 32) = 28265;
    *(void *)(v30 + 40) = 0xE200000000000000;
    *(void *)(v30 + 48) = v42;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_25C418EE0;
    uint64_t v43 = one-time initialization token for color3;
    swift_retain();
    if (v43 != -1) {
      swift_once();
    }
    uint64_t v44 = static MaterialXDataType.color3;
    *(void *)(v32 + 32) = 7632239;
    *(void *)(v32 + 40) = 0xE300000000000000;
    *(void *)(v32 + 48) = v44;
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = 0xD000000000000019;
    *(void *)(v45 + 24) = 0x800000025C424F40;
    unint64_t v36 = v45 | 0xA000000000000000;
    uint64_t v37 = v92;
    unint64_t v38 = *(void *)(v92 + 40);
    uint64_t v39 = v92 + 64;
    swift_retain();
    uint64_t v40 = v115;
    char v41 = (unint64_t *)v115;
  }
  else
  {
    if (*v29 != 44)
    {
LABEL_43:
      swift_bridgeObjectRelease();
      return swift_release();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_25C418EE0;
    if (one-time initialization token for float4 != -1) {
      swift_once();
    }
    uint64_t v31 = static MaterialXDataType.float4;
    *(void *)(v30 + 32) = 28265;
    *(void *)(v30 + 40) = 0xE200000000000000;
    *(void *)(v30 + 48) = v31;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_25C418EE0;
    uint64_t v33 = one-time initialization token for color4;
    swift_retain();
    if (v33 != -1) {
      swift_once();
    }
    uint64_t v34 = static MaterialXDataType.color4;
    *(void *)(v32 + 32) = 7632239;
    *(void *)(v32 + 40) = 0xE300000000000000;
    *(void *)(v32 + 48) = v34;
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = 0xD000000000000019;
    *(void *)(v35 + 24) = 0x800000025C424F20;
    unint64_t v36 = v35 | 0xA000000000000000;
    uint64_t v37 = v92;
    unint64_t v38 = *(void *)(v92 + 40);
    uint64_t v39 = v92 + 64;
    swift_retain();
    uint64_t v40 = v116;
    char v41 = (unint64_t *)v116;
  }
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v38, v30, v32, v36, v39, v37, v41);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  char v86 = v40[40];
  long long v85 = *(_OWORD *)(v40 + 24);
  uint64_t v88 = *((void *)v40 + 2);
  uint64_t v90 = *((void *)v40 + 1);
  unint64_t v87 = *(void *)v40;
  uint64_t v46 = *(void *)(v88 + 16);
  if (!v46)
  {
LABEL_32:
    unint64_t v95 = v87;
    uint64_t v96 = v90;
    uint64_t v97 = v88;
    long long v98 = v85;
    char v99 = v86;
    uint64_t v100 = 7632239;
    unint64_t v101 = 0xE300000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v95);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v95, (uint64_t)&v102);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v114 = 0uLL;
    swift_allocError();
    _OWORD *v55 = v102;
    long long v56 = v106;
    long long v58 = v103;
    long long v57 = v104;
    v55[3] = v105;
    v55[4] = v56;
    v55[1] = v58;
    _OWORD v55[2] = v57;
    long long v59 = v110;
    long long v61 = v107;
    long long v60 = v108;
    v55[7] = v109;
    v55[8] = v59;
    v55[5] = v61;
    v55[6] = v60;
    long long v62 = v114;
    long long v64 = v111;
    long long v63 = v112;
    v55[11] = v113;
    v55[12] = v62;
    v55[9] = v64;
    v55[10] = v63;
    swift_willThrow();
    goto LABEL_43;
  }
  uint64_t v47 = (void *)(v88 + 80);
  while (1)
  {
    uint64_t v48 = *(v47 - 6);
    uint64_t v94 = *(v47 - 5);
    uint64_t v49 = *(v47 - 4);
    unint64_t v50 = *(v47 - 3);
    uint64_t v51 = *(v47 - 2);
    char v52 = *((unsigned char *)v47 - 8);
    uint64_t v53 = *v47;
    if (v49 == 7632239 && v50 == 0xE300000000000000) {
      break;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      goto LABEL_34;
    }
    v47 += 7;
    if (!--v46) {
      goto LABEL_32;
    }
  }
  unint64_t v50 = 0xE300000000000000;
LABEL_34:
  v123[0] = v48;
  v123[1] = v94;
  v123[2] = v49;
  unint64_t v123[3] = v50;
  v123[4] = v51;
  char v124 = v52;
  uint64_t v125 = v53;
  uint64_t v65 = *(void *)(v90 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  if (!v65)
  {
LABEL_42:
    unint64_t v95 = v87;
    uint64_t v96 = v90;
    uint64_t v97 = v88;
    long long v98 = v85;
    char v99 = v86;
    uint64_t v100 = 28265;
    unint64_t v101 = 0xE200000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v95);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v95, (uint64_t)&v102);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v114 = 0uLL;
    swift_allocError();
    *long long v75 = v102;
    long long v76 = v106;
    long long v78 = v103;
    long long v77 = v104;
    v75[3] = v105;
    v75[4] = v76;
    v75[1] = v78;
    v75[2] = v77;
    long long v79 = v110;
    long long v81 = v107;
    long long v80 = v108;
    v75[7] = v109;
    v75[8] = v79;
    v75[5] = v81;
    v75[6] = v80;
    long long v82 = v114;
    long long v84 = v111;
    long long v83 = v112;
    v75[11] = v113;
    v75[12] = v82;
    _OWORD v75[9] = v84;
    v75[10] = v83;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_43;
  }
  long long v66 = (void *)(v90 + 80);
  while (1)
  {
    uint64_t v68 = *(v66 - 6);
    uint64_t v67 = *(v66 - 5);
    uint64_t v69 = *(v66 - 4);
    unint64_t v70 = *(v66 - 3);
    uint64_t v71 = *(v66 - 2);
    char v72 = *((unsigned char *)v66 - 8);
    uint64_t v73 = *v66;
    if (v69 == 28265 && v70 == 0xE200000000000000) {
      break;
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      goto LABEL_45;
    }
    v66 += 7;
    if (!--v65) {
      goto LABEL_42;
    }
  }
  unint64_t v70 = 0xE200000000000000;
LABEL_45:
  v120[0] = v68;
  v120[1] = v67;
  _OWORD v120[2] = v69;
  v120[3] = v70;
  v120[4] = v71;
  char v121 = v72;
  uint64_t v122 = v73;
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.moveEdges(from:to:)((uint64_t)v117, (uint64_t)v123);
  Graph.connect(_:to:)((uint64_t)v117, (unint64_t)v120);
  outlined consume of NodePersonality(v87);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in Graph.resolveMaterialXEnums()(long long *a1, uint64_t a2)
{
  long long v4 = a1[1];
  long long v218 = *a1;
  long long v219 = v4;
  long long v220 = a1[2];
  unint64_t v5 = *((void *)a1 + 6);
  unint64_t v221 = v5;
  uint64_t v7 = *(void *)a1;
  uint64_t v6 = *((void *)a1 + 1);
  uint64_t v8 = *((void *)a1 + 3);
  uint64_t v174 = *((void *)a1 + 4);
  *(void *)type = *((void *)a1 + 2);
  char log = *((unsigned char *)a1 + 40);
  uint64_t v9 = type metadata accessor for MaterialXDataType();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v171 = v7;
    uint64_t v11 = *(void **)(result + 24);
    if (v11)
    {
      uint64_t v170 = v8;
      long long v12 = *(_OWORD *)(a2 + 144);
      v232[8] = *(_OWORD *)(a2 + 128);
      v233[0] = v12;
      *(_OWORD *)((char *)v233 + 9) = *(_OWORD *)(a2 + 153);
      long long v13 = *(_OWORD *)(a2 + 80);
      v232[4] = *(_OWORD *)(a2 + 64);
      void v232[5] = v13;
      long long v14 = *(_OWORD *)(a2 + 96);
      v232[7] = *(_OWORD *)(a2 + 112);
      v232[6] = v14;
      long long v15 = *(_OWORD *)(a2 + 16);
      v232[0] = *(_OWORD *)a2;
      v232[1] = v15;
      long long v16 = *(_OWORD *)(a2 + 32);
      v232[3] = *(_OWORD *)(a2 + 48);
      v232[2] = v16;
      swift_retain();
      swift_bridgeObjectRetain();
      outlined retain of Graph((uint64_t)v232);
      Graph.edge(to:)((uint64_t)&v218, v199);
      outlined init with take of MetalFunctionNode?((uint64_t)v199, (uint64_t)&v205, &demangling cache variable for type metadata for Edge?);
      uint64_t v17 = v206;
      if (!v206)
      {
        outlined release of Graph((uint64_t)v232);
        goto LABEL_7;
      }
      unint64_t v18 = v205;
      uint64_t v167 = v207;
      uint64_t v168 = v6;
      unint64_t v19 = v208;
      char v164 = v210;
      uint64_t v165 = v209;
      uint64_t v166 = v211;
      swift_retain();
      swift_bridgeObjectRetain();
      outlined release of Edge?(v199);
      outlined release of Graph((uint64_t)v232);
      if (v18 == -7)
      {
        swift_bridgeObjectRelease();
        swift_release();
LABEL_7:
        swift_release();
        return swift_bridgeObjectRelease();
      }
      unint64_t v163 = v19;
      if ((v18 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else
      {
        uint64_t v162 = v2;
        uint64_t v20 = *(void *)(a2 + 64);
        if (v18 < *(void *)(v20 + 16))
        {
          uint64_t v21 = v20 + 48 * v18;
          unint64_t v19 = *(void *)(v21 + 32);
          unint64_t v169 = *(void *)(v21 + 40);
          if (v19 >> 61)
          {
            outlined copy of NodePersonality(v19);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_release();
            swift_bridgeObjectRelease();
            outlined consume of NodePersonality(v19);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          uint64_t v161 = *(void *)(v21 + 48);
          uint64_t v158 = *(void *)(v21 + 56);
          uint64_t v159 = *(void *)(v21 + 64);
          char v160 = *(unsigned char *)(v21 + 72);
          uint64_t v22 = swift_dynamicCastClass();
          if (!v22)
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return swift_release();
          }
          uint64_t v157 = v17;
          if (*(unsigned char *)(v19 + 80) == 6)
          {
            uint64_t v23 = *(void *)(v19 + 16);
            long long v24 = *(void **)(v22 + 24);
            *(void *)long long v151 = *(void *)(v19 + 64);
            long long v152 = (void *)v23;
            *(void *)long long v150 = *(void *)(v19 + 72);
            uint64_t v153 = *(void *)(v19 + 56);
            *(void *)long long v154 = *(void *)(v19 + 40);
            *(void *)long long v155 = *(void *)(v19 + 48);
            *(void *)long long v156 = *(void *)(v19 + 32);
            if (v24)
            {
              uint64_t v25 = *(void *)(v19 + 24);
              if ((specialized static Array<A>.== infix(_:_:)(v11, v24) & 1) == 0)
              {
                swift_retain();
                outlined copy of NodePersonality(v19);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_retain();
                uint64_t v66 = MEMORY[0x263F8D310];
                uint64_t v67 = MEMORY[0x261184160](v11, MEMORY[0x263F8D310]);
                uint64_t v69 = v68;
                swift_bridgeObjectRelease();
                *(void *)&long long v186 = v67;
                *((void *)&v186 + 1) = v69;
                v70._char countAndFlagsBits = 540877088;
                v70._uint64_t object = (void *)0xE400000000000000;
                String.append(_:)(v70);
                v71._char countAndFlagsBits = MEMORY[0x261184160](v24, v66);
                String.append(_:)(v71);
                swift_bridgeObjectRelease();
                long long v72 = v186;
                if (one-time initialization token for logger != -1) {
                  swift_once();
                }
                uint64_t v73 = type metadata accessor for Logger();
                __swift_project_value_buffer(v73, (uint64_t)logger);
                swift_bridgeObjectRetain_n();
                uint64_t v74 = Logger.logObject.getter();
                os_log_type_t v75 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v74, v75))
                {
                  long long v76 = (uint8_t *)swift_slowAlloc();
                  unint64_t v77 = v19;
                  uint64_t v78 = swift_slowAlloc();
                  *(void *)&long long v186 = v78;
                  *(_DWORD *)long long v76 = 136315138;
                  swift_bridgeObjectRetain();
                  uint64_t v178 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, *((unint64_t *)&v72 + 1), (uint64_t *)&v186);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease_n();
                  _os_log_impl(&dword_25C27E000, v74, v75, "%s", v76, 0xCu);
                  swift_arrayDestroy();
                  uint64_t v79 = v78;
                  unint64_t v19 = v77;
                  MEMORY[0x261185880](v79, -1, -1);
                  MEMORY[0x261185880](v76, -1, -1);
                }
                else
                {

                  swift_bridgeObjectRelease_n();
                }
                _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v178);
                outlined init with take of UserGraphError.ErrorType((uint64_t)&v178, (uint64_t)&v186);
                long long v198 = v72;
                lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                swift_allocError();
                *uint64_t v88 = v186;
                long long v89 = v190;
                long long v91 = v187;
                long long v90 = v188;
                v88[3] = v189;
                v88[4] = v89;
                v88[1] = v91;
                v88[2] = v90;
                long long v92 = v194;
                long long v94 = v191;
                long long v93 = v192;
                v88[7] = v193;
                v88[8] = v92;
                v88[5] = v94;
                v88[6] = v93;
                long long v95 = v198;
                long long v97 = v195;
                long long v96 = v196;
                v88[11] = v197;
                v88[12] = v95;
                _OWORD v88[9] = v97;
                v88[10] = v96;
                swift_willThrow();
                swift_release_n();
                outlined consume of NodePersonality(v19);
LABEL_57:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_58;
              }
              long long v26 = (void *)v25;
              char v148 = specialized Sequence<>.contains(_:)((uint64_t)v152, v25, v11);
              swift_retain();
              outlined copy of NodePersonality(v19);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_retain();
              int v27 = v150[0];
              outlined copy of SGDataTypeStorage(v152, v26, v156[0], v154[0], v155[0], v153, v151[0], v150[0], 6);
              swift_bridgeObjectRelease();
              if ((v148 & 1) == 0)
              {
                uint64_t v178 = v19;
                unint64_t v179 = v169;
                uint64_t v180 = v161;
                uint64_t v181 = v158;
                uint64_t v182 = v159;
                char v183 = v160;
                uint64_t v184 = v152;
                char v185 = v26;
                _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v178);
                outlined init with take of UserGraphError.ErrorType((uint64_t)&v178, (uint64_t)&v186);
                lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                long long v198 = 0uLL;
                swift_allocError();
                *Swift::UInt v28 = v186;
                long long v29 = v190;
                long long v31 = v187;
                long long v30 = v188;
                v28[3] = v189;
                v28[4] = v29;
                v28[1] = v31;
                void v28[2] = v30;
                long long v32 = v194;
                long long v34 = v191;
                long long v33 = v192;
                v28[7] = v193;
                v28[8] = v32;
                v28[5] = v34;
                v28[6] = v33;
                long long v35 = v198;
                long long v37 = v195;
                long long v36 = v196;
                v28[11] = v197;
                v28[12] = v35;
                v28[9] = v37;
                v28[10] = v36;
                outlined copy of NodePersonality(v19);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_willThrow();
                swift_release_n();
                outlined consume of NodePersonality(v19);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_58:
                swift_release();
                swift_bridgeObjectRelease();
                return swift_release();
              }
            }
            else
            {
              uint64_t v55 = *(void **)(v19 + 24);
              specialized Sequence<>.contains(_:)(v23, (uint64_t)v55, v11);
              swift_retain();
              outlined copy of NodePersonality(v19);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_retain();
              long long v56 = (void *)v23;
              int v27 = v150[0];
              outlined copy of SGDataTypeStorage(v56, v55, v156[0], v154[0], v155[0], v153, v151[0], v150[0], 6);
              long long v26 = v55;
              if ((v147 & 1) == 0)
              {
                if (one-time initialization token for logger != -1) {
                  swift_once();
                }
                uint64_t v80 = type metadata accessor for Logger();
                __swift_project_value_buffer(v80, (uint64_t)logger);
                outlined copy of SGDataTypeStorage(v152, v55, v156[0], v154[0], v155[0], v153, v151[0], v150[0], 6);
                swift_bridgeObjectRetain();
                outlined copy of SGDataTypeStorage(v152, v55, v156[0], v154[0], v155[0], v153, v151[0], v150[0], 6);
                long long v81 = Logger.logObject.getter();
                os_log_type_t typea = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v81, typea))
                {
                  loga = v81;
                  uint64_t v82 = swift_slowAlloc();
                  uint64_t v175 = swift_slowAlloc();
                  *(void *)&long long v186 = v175;
                  *(_DWORD *)uint64_t v82 = 136315394;
                  swift_bridgeObjectRetain();
                  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v152, (unint64_t)v26, (uint64_t *)&v186);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  outlined consume of SGDataTypeStorage(v152, v26, v156[0], v154[0], v155[0], v153, v151[0], v150[0], 6);
                  outlined consume of SGDataTypeStorage(v152, v26, v156[0], v154[0], v155[0], v153, v151[0], v150[0], 6);
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v82 + 12) = 2080;
                  uint64_t v83 = swift_bridgeObjectRetain();
                  uint64_t v84 = MEMORY[0x261184160](v83, MEMORY[0x263F8D310]);
                  long long v85 = v152;
                  unint64_t v87 = v86;
                  swift_bridgeObjectRelease();
                  uint64_t v178 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v87, (uint64_t *)&v186);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_25C27E000, loga, typea, "Enum value %s not a memeber of enum set %s", (uint8_t *)v82, 0x16u);
                  swift_arrayDestroy();
                  MEMORY[0x261185880](v175, -1, -1);
                  MEMORY[0x261185880](v82, -1, -1);
                }
                else
                {
                  outlined consume of SGDataTypeStorage(v152, v26, v156[0], v154[0], v155[0], v153, v151[0], v150[0], 6);
                  outlined consume of SGDataTypeStorage(v152, v26, v156[0], v154[0], v155[0], v153, v151[0], v150[0], 6);

                  swift_bridgeObjectRelease_n();
                  long long v85 = v152;
                }
                uint64_t v178 = v19;
                unint64_t v179 = v169;
                uint64_t v180 = v161;
                uint64_t v181 = v158;
                uint64_t v182 = v159;
                char v183 = v160;
                uint64_t v184 = v85;
                char v185 = v26;
                _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_((uint64_t)&v178);
                outlined init with take of UserGraphError.ErrorType((uint64_t)&v178, (uint64_t)&v186);
                lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                long long v198 = 0uLL;
                swift_allocError();
                *long long v108 = v186;
                long long v109 = v190;
                long long v111 = v187;
                long long v110 = v188;
                v108[3] = v189;
                v108[4] = v109;
                v108[1] = v111;
                v108[2] = v110;
                long long v112 = v194;
                long long v114 = v191;
                long long v113 = v192;
                v108[7] = v193;
                v108[8] = v112;
                v108[5] = v114;
                v108[6] = v113;
                long long v115 = v198;
                long long v117 = v195;
                long long v116 = v196;
                v108[11] = v197;
                v108[12] = v115;
                v108[9] = v117;
                v108[10] = v116;
                outlined copy of NodePersonality(v19);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_willThrow();
                swift_release_n();
                outlined consume of NodePersonality(v19);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_58;
              }
              swift_bridgeObjectRelease();
            }
            long long v57 = v26;
            uint64_t v58 = MaterialXDataType.asMetalDataType.getter();
            if (v58)
            {
              uint64_t v59 = v58;
              unint64_t v149 = v19;
              v60._char countAndFlagsBits = (uint64_t)v152;
              v60._uint64_t object = v57;
              Swift::String_optional v61 = MetalDataType.convertEnumConstant(_:)(v60);
              if (v61.value._object)
              {
                outlined consume of SGDataTypeStorage(v152, v57, v156[0], v154[0], v155[0], v153, v151[0], v27, 6);
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
                uint64_t v62 = v59;
                uint64_t v63 = swift_allocObject();
                *(_OWORD *)(v63 + 16) = xmmword_25C418EE0;
                *(void *)(v63 + 32) = 7632239;
                *(void *)(v63 + 40) = 0xE300000000000000;
                *(void *)(v63 + 48) = v62;
                unint64_t v64 = swift_allocObject();
                *(Swift::String_optional *)(v64 + 16) = v61;
                *(_OWORD *)(v64 + 32) = 0u;
                *(_OWORD *)(v64 + 48) = 0u;
                *(_OWORD *)(v64 + 64) = 0u;
                *(unsigned char *)(v64 + 80) = 6;
                *(void *)(v64 + 88) = v62;
                unint64_t v65 = *(void *)(a2 + 40);
                swift_retain_n();
                swift_bridgeObjectRetain();
                specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v65, MEMORY[0x263F8EE78], v63, v64, a2 + 64, a2, &v200);
                swift_release();
                swift_setDeallocating();
                swift_arrayDestroy();
                swift_deallocClassInstance();
                swift_bridgeObjectRelease();
                long long v234 = v219;
                v222[0] = v18;
                v222[1] = v157;
                v222[2] = v167;
                v222[3] = v163;
                v222[4] = v165;
                char v223 = v164 & 1;
                uint64_t v224 = v166;
                uint64_t v225 = v171;
                uint64_t v226 = v168;
                uint64_t v227 = *(void *)type;
                uint64_t v228 = v170;
                uint64_t v229 = v174;
                char v230 = log;
                unint64_t v231 = v5;
                swift_retain();
                swift_retain();
                swift_bridgeObjectRetain();
                outlined retain of String((uint64_t)&v234);
                Graph.remove(_:)((uint64_t)v222);
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                ShaderGraphNode.out.getter((uint64_t)v203);
                if (!v162)
                {
                  Graph.connect(_:to:)((uint64_t)v203, (unint64_t)&v218);
                  swift_release();
                  swift_release();
                  long long v215 = v204;
                  outlined release of String((uint64_t)&v215);
                  outlined init with take of NodePersonality(&v200, &v214);
                  outlined release of NodePersonality(&v214);
                  uint64_t v213 = v201;
                  outlined release of [Input]((uint64_t)&v213);
                  uint64_t v212 = v202;
                  outlined release of [Input]((uint64_t)&v212);
                  swift_release_n();
                  swift_release();
                  outlined consume of NodePersonality(v19);
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_bridgeObjectRelease();
                  return swift_bridgeObjectRelease();
                }
                outlined init with take of NodePersonality(&v200, &v235);
                outlined release of NodePersonality(&v235);
                uint64_t v217 = v201;
                outlined release of [Input]((uint64_t)&v217);
                uint64_t v216 = v202;
                outlined release of [Input]((uint64_t)&v216);
                swift_release_n();
                swift_release();
                outlined consume of NodePersonality(v19);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_58;
              }
              _StringGuts.grow(_:)(39);
              swift_bridgeObjectRelease();
              *(void *)&long long v186 = 0xD000000000000012;
              *((void *)&v186 + 1) = 0x800000025C425400;
              v118._char countAndFlagsBits = (uint64_t)v152;
              v118._uint64_t object = v57;
              String.append(_:)(v118);
              outlined consume of SGDataTypeStorage(v152, v57, v156[0], v154[0], v155[0], v153, v151[0], v27, 6);
              v119._char countAndFlagsBits = 0xD000000000000013;
              v119._uint64_t object = (void *)0x800000025C425440;
              String.append(_:)(v119);
              long long v120 = v186;
              if (one-time initialization token for logger != -1) {
                swift_once();
              }
              uint64_t v121 = type metadata accessor for Logger();
              __swift_project_value_buffer(v121, (uint64_t)logger);
              swift_bridgeObjectRetain_n();
              uint64_t v122 = Logger.logObject.getter();
              os_log_type_t v123 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v122, v123))
              {
                char v124 = (uint8_t *)swift_slowAlloc();
                uint64_t v125 = swift_slowAlloc();
                *(void *)&long long v186 = v125;
                *(_DWORD *)char v124 = 136315138;
                swift_bridgeObjectRetain();
                uint64_t v178 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, *((unint64_t *)&v120 + 1), (uint64_t *)&v186);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl(&dword_25C27E000, v122, v123, "%s", v124, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x261185880](v125, -1, -1);
                MEMORY[0x261185880](v124, -1, -1);
              }
              else
              {

                swift_bridgeObjectRelease_n();
              }
              _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v178);
              outlined init with take of UserGraphError.ErrorType((uint64_t)&v178, (uint64_t)&v186);
              long long v198 = v120;
              lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
              swift_allocError();
              *long long v137 = v186;
              long long v138 = v190;
              long long v140 = v187;
              long long v139 = v188;
              v137[3] = v189;
              v137[4] = v138;
              v137[1] = v140;
              v137[2] = v139;
              long long v141 = v194;
              long long v143 = v191;
              long long v142 = v192;
              v137[7] = v193;
              char v137[8] = v141;
              v137[5] = v143;
              v137[6] = v142;
              long long v144 = v198;
              long long v146 = v195;
              long long v145 = v196;
              v137[11] = v197;
              v137[12] = v144;
              v137[9] = v146;
              v137[10] = v145;
              swift_willThrow();
              swift_release_n();
              swift_release();
              unint64_t v136 = v149;
            }
            else
            {
              outlined consume of SGDataTypeStorage(v152, v26, v156[0], v154[0], v155[0], v153, v151[0], v27, 6);
              _StringGuts.grow(_:)(39);
              swift_bridgeObjectRelease();
              *(void *)&long long v186 = 0xD000000000000012;
              *((void *)&v186 + 1) = 0x800000025C425400;
              v98._char countAndFlagsBits = MaterialXDataType.description.getter();
              String.append(_:)(v98);
              swift_bridgeObjectRelease();
              v99._char countAndFlagsBits = 0xD000000000000013;
              v99._uint64_t object = (void *)0x800000025C425420;
              String.append(_:)(v99);
              long long v100 = v186;
              if (one-time initialization token for logger != -1) {
                swift_once();
              }
              uint64_t v101 = type metadata accessor for Logger();
              __swift_project_value_buffer(v101, (uint64_t)logger);
              swift_bridgeObjectRetain_n();
              long long v102 = Logger.logObject.getter();
              os_log_type_t v103 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v102, v103))
              {
                long long v104 = (uint8_t *)swift_slowAlloc();
                unint64_t v105 = v19;
                uint64_t v106 = swift_slowAlloc();
                *(void *)&long long v186 = v106;
                *(_DWORD *)long long v104 = 136315138;
                swift_bridgeObjectRetain();
                uint64_t v178 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, *((unint64_t *)&v100 + 1), (uint64_t *)&v186);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl(&dword_25C27E000, v102, v103, "%s", v104, 0xCu);
                swift_arrayDestroy();
                uint64_t v107 = v106;
                unint64_t v19 = v105;
                MEMORY[0x261185880](v107, -1, -1);
                MEMORY[0x261185880](v104, -1, -1);
              }
              else
              {

                swift_bridgeObjectRelease_n();
              }
              _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v178);
              outlined init with take of UserGraphError.ErrorType((uint64_t)&v178, (uint64_t)&v186);
              long long v198 = v100;
              lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
              swift_allocError();
              *uint64_t v126 = v186;
              long long v127 = v190;
              long long v129 = v187;
              long long v128 = v188;
              v126[3] = v189;
              v126[4] = v127;
              v126[1] = v129;
              _OWORD v126[2] = v128;
              long long v130 = v194;
              long long v132 = v191;
              long long v131 = v192;
              uint64_t v126[7] = v193;
              v126[8] = v130;
              v126[5] = v132;
              v126[6] = v131;
              long long v133 = v198;
              long long v135 = v195;
              long long v134 = v196;
              v126[11] = v197;
              v126[12] = v133;
              v126[9] = v135;
              v126[10] = v134;
              swift_willThrow();
              swift_release_n();
              unint64_t v136 = v19;
            }
            outlined consume of NodePersonality(v136);
            goto LABEL_57;
          }
          swift_retain();
          outlined copy of NodePersonality(v19);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRelease();
          uint64_t v178 = 0;
          unint64_t v179 = 0xE000000000000000;
          *(void *)&long long v186 = v19;
          *((void *)&v186 + 1) = v169;
          *(void *)&long long v187 = v161;
          *((void *)&v187 + 1) = v158;
          *(void *)&long long v188 = v159;
          BYTE8(v188) = v160;
          _print_unlocked<A, B>(_:_:)();
          uint64_t v9 = 0;
          unint64_t v5 = 0xE000000000000000;
          if (one-time initialization token for logger == -1)
          {
LABEL_21:
            uint64_t v38 = type metadata accessor for Logger();
            __swift_project_value_buffer(v38, (uint64_t)logger);
            swift_bridgeObjectRetain();
            uint64_t v39 = Logger.logObject.getter();
            os_log_type_t v40 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v39, v40))
            {
              char v41 = (uint8_t *)swift_slowAlloc();
              unint64_t v42 = v19;
              uint64_t v43 = swift_slowAlloc();
              *(void *)&long long v186 = v43;
              *(_DWORD *)char v41 = 136315138;
              swift_bridgeObjectRetain();
              uint64_t v178 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v5, (uint64_t *)&v186);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_25C27E000, v39, v40, "enum value isn't a string %s", v41, 0xCu);
              swift_arrayDestroy();
              uint64_t v44 = v43;
              unint64_t v19 = v42;
              MEMORY[0x261185880](v44, -1, -1);
              MEMORY[0x261185880](v41, -1, -1);
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v178);
            outlined init with take of UserGraphError.ErrorType((uint64_t)&v178, (uint64_t)&v186);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            long long v198 = 0uLL;
            swift_allocError();
            *uint64_t v45 = v186;
            long long v46 = v190;
            long long v48 = v187;
            long long v47 = v188;
            v45[3] = v189;
            v45[4] = v46;
            v45[1] = v48;
            v45[2] = v47;
            long long v49 = v194;
            long long v51 = v191;
            long long v50 = v192;
            v45[7] = v193;
            unsigned char v45[8] = v49;
            void v45[5] = v51;
            v45[6] = v50;
            long long v52 = v198;
            long long v54 = v195;
            long long v53 = v196;
            v45[11] = v197;
            v45[12] = v52;
            v45[9] = v54;
            v45[10] = v53;
            swift_willThrow();
            swift_release_n();
            outlined consume of NodePersonality(v19);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_58;
          }
LABEL_61:
          swift_once();
          goto LABEL_21;
        }
      }
      __break(1u);
      goto LABEL_61;
    }
  }
  return result;
}

double Graph.insertGeomPropGetter(_:outputType:nodeDefStore:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  specialized Graph.insertGeomPropGetter(_:outputType:nodeDefStore:)(a1, a2, a3, &v8);
  if (!v4)
  {
    long long v7 = v9[0];
    *a4 = v8;
    a4[1] = v7;
    double result = *(double *)((char *)v9 + 9);
    *(_OWORD *)((char *)a4 + 25) = *(_OWORD *)((char *)v9 + 9);
  }
  return result;
}

uint64_t Graph.insertParamsInputs(surface:type:nodeDefStore:)(uint64_t a1, char a2)
{
  return specialized Graph.insertParamsInputs(surface:type:nodeDefStore:)(a1, a2 & 1);
}

uint64_t closure #1 in Graph.insertParamsInputs(surface:type:nodeDefStore:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void **a7)
{
  unint64_t v12 = *(void *)a1;
  uint64_t v11 = *(int64_t **)(a1 + 8);
  long long v13 = *(void **)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 32);
  LODWORD(v121) = *(unsigned __int8 *)(a1 + 40);
  Swift::UInt v103 = *(void *)(a1 + 24);
  uint64_t result = specialized Set.contains(_:)(v103, a2);
  if ((result & 1) == 0 || (v12 & 0xE000000000000000) != 0xA000000000000000) {
    return result;
  }
  uint64_t v112 = v14;
  unint64_t v115 = v12;
  unint64_t v105 = v13;
  uint64_t v106 = v11;
  uint64_t v16 = *(void *)((v12 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  uint64_t v17 = *(void *)((v12 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  uint64_t v18 = one-time initialization token for realityKitParamGetterFuncs;
  swift_bridgeObjectRetain();
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v19 = static ShaderGraphNode.realityKitParamGetterFuncs;
  swift_bridgeObjectRetain();
  char v20 = specialized Set.contains(_:)(v16, v17, v19);
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  *(void *)&v124[0] = v16;
  *((void *)&v124[0] + 1) = v17;
  swift_bridgeObjectRetain();
  v21._char countAndFlagsBits = 95;
  v21._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v22._char countAndFlagsBits = a3;
  v22._uint64_t object = a4;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  long long v107 = v124[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  uint64_t inited = swift_initStackObject();
  uint64_t v24 = inited;
  *(_OWORD *)(inited + 16) = xmmword_25C418EE0;
  *(void *)(inited + 32) = 12324;
  *(void *)(inited + 40) = 0xE200000000000000;
  *(void *)(inited + 48) = a5;
  uint64_t v25 = v106;
  int64_t v26 = v106[2];
  long long v102 = a7;
  if (v26)
  {
    uint64_t v104 = inited;
    *(void *)&v124[0] = MEMORY[0x263F8EE78];
    swift_retain_n();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
    uint64_t v27 = *(void *)&v124[0];
    Swift::UInt v28 = v106 + 7;
    do
    {
      uint64_t v30 = *(v28 - 2);
      uint64_t v29 = *(v28 - 1);
      uint64_t v31 = *v28;
      *(void *)&v124[0] = v27;
      unint64_t v33 = *(void *)(v27 + 16);
      unint64_t v32 = *(void *)(v27 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        uint64_t v27 = *(void *)&v124[0];
      }
      *(void *)(v27 + 16) = v33 + 1;
      long long v34 = (void *)(v27 + 24 * v33);
      v34[4] = v29;
      v34[5] = v31;
      v34[6] = v30;
      v28 += 7;
      --v26;
    }
    while (v26);
    uint64_t v25 = v106;
    swift_bridgeObjectRelease();
    uint64_t v24 = v104;
  }
  else
  {
    swift_retain_n();
    uint64_t v27 = MEMORY[0x263F8EE78];
  }
  *(void *)&v124[0] = v24;
  specialized Array.append<A>(contentsOf:)(v27);
  uint64_t v35 = v24;
  if (v105[2] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v122[0] = v115;
    v122[1] = v25;
    v122[2] = v105;
    v122[3] = v103;
    v122[4] = v112;
    char v123 = v121;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi30_((uint64_t)v122);
    *(void *)&v124[0] = 0;
    *((void *)&v124[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v115);
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    *(void *)&v124[0] = 0xD000000000000029;
    *((void *)&v124[0] + 1) = 0x800000025C425130;
    swift_bridgeObjectRetain_n();
    v67._char countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v68 = v124[0];
    outlined init with take of UserGraphError.ErrorType((uint64_t)v122, (uint64_t)v124);
    long long v125 = v68;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *uint64_t v69 = v124[0];
    long long v70 = v124[4];
    long long v72 = v124[1];
    long long v71 = v124[2];
    v69[3] = v124[3];
    v69[4] = v70;
    v69[1] = v72;
    v69[2] = v71;
    long long v73 = v124[8];
    long long v75 = v124[5];
    long long v74 = v124[6];
    v69[7] = v124[7];
    v69[8] = v73;
    v69[5] = v75;
    v69[6] = v74;
    long long v76 = v125;
    long long v78 = v124[9];
    long long v77 = v124[10];
    v69[11] = v124[11];
    v69[12] = v76;
    v69[9] = v78;
    v69[10] = v77;
    swift_willThrow();
    return swift_release();
  }
  int64_t v36 = v105[5];
  *(void *)&v124[0] = MEMORY[0x263F8EE78];
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  uint64_t v37 = *(void *)&v124[0];
  uint64_t v38 = v105[5];
  uint64_t v39 = v105[6];
  uint64_t v40 = v105[7];
  unint64_t v42 = *(void *)(*(void *)&v124[0] + 16);
  unint64_t v41 = *(void *)(*(void *)&v124[0] + 24);
  LOBYTE(v43) = (_BYTE)v105;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v42 >= v41 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
    uint64_t v37 = *(void *)&v124[0];
  }
  *(void *)(v37 + 16) = v42 + 1;
  uint64_t v44 = (void *)(v37 + 24 * v42);
  v44[4] = v39;
  v44[5] = v40;
  v44[6] = v38;
  swift_bridgeObjectRelease();
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = v107;
  *(void *)(v45 + 32) = v36;
  unint64_t v46 = v45 | 0x2000000000000000;
  uint64_t v47 = a6;
  unint64_t v48 = *(void *)(a6 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v48, v35, v37, v46, a6 + 64, a6, &v126);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  long long v49 = v127;
  long long v154 = v127;
  uint64_t v113 = v127[2];
  uint64_t v101 = v127;
  if (!v113) {
    goto LABEL_35;
  }
  long long v108 = v127 + 4;
  swift_bridgeObjectRetain();
  uint64_t v50 = 0;
  long long v51 = v106;
  while (2)
  {
    long long v52 = &v108[7 * v50];
    uint64_t v53 = *v52;
    uint64_t v54 = v52[1];
    unint64_t v55 = v52[2];
    uint64_t v56 = v52[3];
    uint64_t v57 = v52[4];
    char v58 = *((unsigned char *)v52 + 40);
    uint64_t v59 = v52[6];
    *(void *)&long long v148 = v53;
    *((void *)&v148 + 1) = v54;
    unint64_t v149 = v55;
    uint64_t v150 = v56;
    uint64_t v151 = v57;
    char v152 = v58;
    uint64_t v153 = v59;
    int64_t v36 = v51[2];
    if (!v36) {
      goto LABEL_22;
    }
    uint64_t v110 = v54;
    uint64_t v116 = v50;
    Swift::String v60 = v106 + 10;
    do
    {
      uint64_t v61 = *(v60 - 6);
      uint64_t v62 = *(v60 - 5);
      unint64_t v42 = *(v60 - 4);
      uint64_t v63 = *(v60 - 2);
      uint64_t v47 = *((unsigned __int8 *)v60 - 8);
      unint64_t v64 = *v60;
      if (v42 == v55 && *(v60 - 3) == v56)
      {
        uint64_t v43 = v56;
LABEL_20:
        uint64_t v141 = v61;
        uint64_t v142 = v62;
        unint64_t v143 = v55;
        uint64_t v144 = v43;
        uint64_t v145 = v63;
        char v146 = v47;
        unint64_t v147 = v64;
        uint64_t v35 = v110;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v141, &v148);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_21;
      }
      uint64_t v119 = *(v60 - 6);
      unint64_t v121 = *v60;
      uint64_t v35 = *(v60 - 5);
      uint64_t v43 = *(v60 - 3);
      unint64_t v66 = v55;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        unint64_t v55 = v42;
        uint64_t v61 = v119;
        unint64_t v64 = v121;
        goto LABEL_20;
      }
      v60 += 7;
      --v36;
      unint64_t v55 = v66;
    }
    while (v36);
    uint64_t v141 = v119;
    uint64_t v142 = v62;
    unint64_t v143 = v42;
    uint64_t v144 = v43;
    uint64_t v145 = v63;
    char v146 = v47;
    unint64_t v147 = v121;
LABEL_21:
    long long v51 = v106;
    uint64_t v50 = v116;
LABEL_22:
    if (++v50 != v113) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v154);
  long long v49 = v101;
LABEL_35:
  uint64_t v130 = v128;
  uint64_t v79 = v105;
  uint64_t v114 = *(void *)(v128 + 16);
  if (!v114) {
    goto LABEL_52;
  }
  uint64_t v109 = v128 + 32;
  swift_bridgeObjectRetain();
  uint64_t v80 = 0;
  while (2)
  {
    uint64_t v82 = (uint64_t *)(v109 + 56 * v80);
    uint64_t v83 = *v82;
    uint64_t v84 = v82[1];
    uint64_t v85 = v82[2];
    unint64_t v86 = v82[3];
    uint64_t v87 = v82[4];
    char v88 = *((unsigned char *)v82 + 40);
    uint64_t v89 = v82[6];
    v138[0] = v83;
    v138[1] = v84;
    v138[2] = v85;
    v138[3] = v86;
    v138[4] = v87;
    char v139 = v88;
    uint64_t v140 = v89;
    int64_t v36 = v79[2];
    if (!v36) {
      goto LABEL_40;
    }
    uint64_t v111 = v84;
    uint64_t v117 = v80;
    long long v90 = v105 + 10;
    while (2)
    {
      uint64_t v91 = *(v90 - 6);
      uint64_t v43 = *(v90 - 5);
      uint64_t v92 = *(v90 - 4);
      uint64_t v47 = *(v90 - 2);
      char v93 = *((unsigned char *)v90 - 8);
      uint64_t v35 = *v90;
      if (v92 == v85 && *(v90 - 3) == v86)
      {
        unint64_t v81 = v86;
        unint64_t v42 = v86;
LABEL_38:
        uint64_t v131 = v91;
        uint64_t v132 = v43;
        uint64_t v133 = v85;
        unint64_t v134 = v81;
        uint64_t v135 = v47;
        char v136 = v93;
        uint64_t v137 = v35;
        uint64_t v35 = v111;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v131, (uint64_t)v138);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_39;
      }
      uint64_t v120 = *(v90 - 6);
      unint64_t v121 = *(v90 - 3);
      uint64_t v95 = v85;
      unint64_t v42 = v86;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v85 = v92;
        uint64_t v91 = v120;
        unint64_t v81 = v121;
        goto LABEL_38;
      }
      v90 += 7;
      --v36;
      unint64_t v86 = v42;
      uint64_t v85 = v95;
      if (v36) {
        continue;
      }
      break;
    }
    uint64_t v131 = v120;
    uint64_t v132 = v43;
    uint64_t v133 = v92;
    unint64_t v134 = v121;
    uint64_t v135 = v47;
    char v136 = v93;
    uint64_t v137 = v35;
LABEL_39:
    uint64_t v79 = v105;
    uint64_t v80 = v117;
LABEL_40:
    if (++v80 != v114) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v130);
  long long v49 = v101;
LABEL_52:
  uint64_t v96 = a6;
  specialized Graph.remove(_:)(v103);
  if (v49[2])
  {
    uint64_t v35 = v49[5];
    unint64_t v121 = v49[4];
    uint64_t v47 = v49[6];
    uint64_t v96 = v49[7];
    unint64_t v42 = v49[8];
    LOBYTE(v43) = *((unsigned char *)v49 + 72);
    int64_t v36 = v49[10];
    long long v49 = *v102;
    swift_retain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *long long v102 = v49;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_54;
    }
  }
  else
  {
    __break(1u);
  }
  long long v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
  *long long v102 = v49;
LABEL_54:
  unint64_t v99 = v49[2];
  unint64_t v98 = v49[3];
  if (v99 >= v98 >> 1)
  {
    long long v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v98 > 1), v99 + 1, 1, v49);
    *long long v102 = v49;
  }
  v49[2] = v99 + 1;
  long long v100 = &v49[7 * v99];
  v100[4] = v121;
  void v100[5] = v35;
  v100[6] = v47;
  v100[7] = v96;
  v100[8] = v42;
  *((unsigned char *)v100 + 72) = v43;
  v100[10] = v36;
  swift_release();
  swift_release();
  outlined init with take of NodePersonality(&v126, &v129);
  outlined release of NodePersonality(&v129);
  outlined release of [Input]((uint64_t)&v154);
  outlined release of [Input]((uint64_t)&v130);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t Graph.materialXImageNodes.getter()
{
  return Graph.materialXImageNodes.getter(0x6567616D695F444ELL, (void *)0xE800000000000000);
}

uint64_t Graph.materialXTiledimageNodes.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v25 = v1;
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    uint64_t v4 = v1 + 56;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v6 = 0;
    uint64_t v7 = result + 104;
    uint64_t v8 = MEMORY[0x263F8EE78];
    uint64_t v24 = v4;
    while (v6 < v2)
    {
      uint64_t v9 = 48 * v6;
      if (*(void *)(v4 + 48 * v6) == -7)
      {
        if ((uint64_t)(v6 + 1) >= v2)
        {
LABEL_22:
          outlined release of [Input]((uint64_t)&v25);
          return v8;
        }
        uint64_t v10 = 48 * v6++;
        while (1)
        {
          if (*(void *)(v7 + v10) != -7)
          {
            uint64_t v9 = v10 + 48;
            goto LABEL_15;
          }
          uint64_t v11 = v6 + 1;
          if (__OFADD__(v6, 1)) {
            break;
          }
          ++v6;
          v10 += 48;
          if (v11 >= v2) {
            goto LABEL_22;
          }
        }
        __break(1u);
        break;
      }
LABEL_15:
      uint64_t v12 = v3 + v9;
      unint64_t v13 = *(void *)v12;
      if (*(void *)v12 >> 61 == 5)
      {
        uint64_t v14 = *(void *)(v12 + 8);
        uint64_t v15 = *(void *)(v12 + 16);
        long long v23 = *(_OWORD *)(v12 + 24);
        char v22 = *(unsigned char *)(v12 + 40);
        outlined copy of NodePersonality(v13);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v16._char countAndFlagsBits = 0x64656C69745F444ELL;
        v16._uint64_t object = (void *)0xED00006567616D69;
        Swift::Bool v17 = String.hasPrefix(_:)(v16);
        swift_bridgeObjectRelease();
        if (v17)
        {
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v21 = v3;
          if ((result & 1) == 0) {
            uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1);
          }
          unint64_t v19 = *(void *)(v8 + 16);
          unint64_t v18 = *(void *)(v8 + 24);
          if (v19 >= v18 >> 1) {
            uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          }
          *(void *)(v8 + 16) = v19 + 1;
          uint64_t v20 = v8 + 48 * v19;
          *(void *)(v20 + 32) = v13;
          *(void *)(v20 + 40) = v14;
          *(void *)(v20 + 48) = v15;
          *(_OWORD *)(v20 + 56) = v23;
          *(unsigned char *)(v20 + 72) = v22;
          uint64_t v3 = v21;
        }
        else
        {
          outlined consume of NodePersonality(v13);
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
        }
        uint64_t v4 = v24;
      }
      if ((uint64_t)++v6 >= v2) {
        goto LABEL_22;
      }
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

BOOL ShaderGraphNode.isMaterialXTiledimageNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0x64656C69745F444ELL, (void *)0xED00006567616D69);
}

BOOL ShaderGraphNode.isMaterialXSwizzleNode.getter(uint64_t a1, void *a2)
{
  outlined init with take of NodePersonality(v2, &v8);
  outlined init with take of NodePersonality(&v8, &v9);
  if (v9 >> 61 == 5)
  {
    v9 &= 0x1FFFFFFFFFFFFFFFuLL;
    swift_bridgeObjectRetain();
    v5._char countAndFlagsBits = a1;
    v5._uint64_t object = a2;
    Swift::Bool v6 = String.hasPrefix(_:)(v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    return 0;
  }
  return v6;
}

uint64_t Graph.materialXCubeimageNodes.getter()
{
  return Graph.materialXImageNodes.getter(0xD000000000000017, (void *)0x800000025C421D80);
}

uint64_t Graph.materialXImageNodes.getter(uint64_t a1, void *a2)
{
  v25._char countAndFlagsBits = a1;
  v25._uint64_t object = a2;
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v26 = v3;
  int64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    uint64_t v6 = v3 + 56;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v8 = 0;
    uint64_t v9 = result + 104;
    uint64_t v10 = MEMORY[0x263F8EE78];
    uint64_t v24 = v6;
    while (v8 < v4)
    {
      uint64_t v11 = 48 * v8;
      if (*(void *)(v6 + 48 * v8) == -7)
      {
        if ((uint64_t)(v8 + 1) >= v4)
        {
LABEL_22:
          outlined release of [Input]((uint64_t)&v26);
          return v10;
        }
        uint64_t v12 = 48 * v8++;
        while (1)
        {
          if (*(void *)(v9 + v12) != -7)
          {
            uint64_t v11 = v12 + 48;
            goto LABEL_15;
          }
          uint64_t v13 = v8 + 1;
          if (__OFADD__(v8, 1)) {
            break;
          }
          ++v8;
          v12 += 48;
          if (v13 >= v4) {
            goto LABEL_22;
          }
        }
        __break(1u);
        break;
      }
LABEL_15:
      uint64_t v14 = v5 + v11;
      unint64_t v15 = *(void *)v14;
      if (*(void *)v14 >> 61 == 5)
      {
        uint64_t v16 = *(void *)(v14 + 8);
        uint64_t v17 = *(void *)(v14 + 16);
        long long v23 = *(_OWORD *)(v14 + 24);
        char v22 = *(unsigned char *)(v14 + 40);
        outlined copy of NodePersonality(v15);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        Swift::Bool v18 = String.hasPrefix(_:)(v25);
        swift_bridgeObjectRelease();
        if (v18)
        {
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0) {
            uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1);
          }
          unint64_t v20 = *(void *)(v10 + 16);
          unint64_t v19 = *(void *)(v10 + 24);
          if (v20 >= v19 >> 1) {
            uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          }
          *(void *)(v10 + 16) = v20 + 1;
          uint64_t v21 = v10 + 48 * v20;
          *(void *)(v21 + 32) = v15;
          *(void *)(v21 + 40) = v16;
          *(void *)(v21 + 48) = v17;
          *(_OWORD *)(v21 + 56) = v23;
          *(unsigned char *)(v21 + 72) = v22;
        }
        else
        {
          outlined consume of NodePersonality(v15);
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
        }
        uint64_t v6 = v24;
      }
      if ((uint64_t)++v8 >= v4) {
        goto LABEL_22;
      }
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

BOOL ShaderGraphNode.isModernRealityKitTextureNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0xD000000000000014, (void *)0x800000025C424DE0);
}

BOOL ShaderGraphNode.isRealityKit2DImageArrayNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0xD00000000000001DLL, (void *)0x800000025C424E00);
}

BOOL ShaderGraphNode.isRealityKit3DImageNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0xD000000000000018, (void *)0x800000025C424E20);
}

BOOL ShaderGraphNode.isModernRealityKitTextureCubeNode.getter()
{
  return ShaderGraphNode.isMaterialXSwizzleNode.getter(0xD000000000000018, (void *)0x800000025C424E40);
}

uint64_t one-time initialization function for realityKitSurfaceParamNodes()
{
  uint64_t result = Set.init(minimumCapacity:)();
  static ShaderGraphNode.realityKitSurfaceParamNodes = result;
  return result;
}

uint64_t *ShaderGraphNode.realityKitSurfaceParamNodes.unsafeMutableAddressor()
{
  if (one-time initialization token for realityKitSurfaceParamNodes != -1) {
    swift_once();
  }
  return &static ShaderGraphNode.realityKitSurfaceParamNodes;
}

uint64_t static ShaderGraphNode.realityKitSurfaceParamNodes.getter()
{
  return static ShaderGraphNode.realityKitSurfaceParamNodes.getter(&one-time initialization token for realityKitSurfaceParamNodes);
}

uint64_t static ShaderGraphNode.realityKitSurfaceParamNodes.setter(uint64_t a1)
{
  return static ShaderGraphNode.realityKitSurfaceParamNodes.setter(a1, &one-time initialization token for realityKitSurfaceParamNodes, &static ShaderGraphNode.realityKitSurfaceParamNodes);
}

uint64_t (*static ShaderGraphNode.realityKitSurfaceParamNodes.modify())()
{
  if (one-time initialization token for realityKitSurfaceParamNodes != -1) {
    swift_once();
  }
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t one-time initialization function for realityKitBackgroundBlurNodes()
{
  uint64_t v0 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for realityKitBackgroundBlurNodes);
  uint64_t result = swift_arrayDestroy();
  static ShaderGraphNode.realityKitBackgroundBlurNodes = v0;
  return result;
}

uint64_t static ShaderGraphNode.realityKitBackgroundBlurNodes.getter()
{
  return static ShaderGraphNode.realityKitSurfaceParamNodes.getter(&one-time initialization token for realityKitBackgroundBlurNodes);
}

uint64_t static ShaderGraphNode.realityKitBackgroundBlurNodes.setter(uint64_t a1)
{
  return static ShaderGraphNode.realityKitSurfaceParamNodes.setter(a1, &one-time initialization token for realityKitBackgroundBlurNodes, &static ShaderGraphNode.realityKitBackgroundBlurNodes);
}

uint64_t (*static ShaderGraphNode.realityKitBackgroundBlurNodes.modify())()
{
  if (one-time initialization token for realityKitBackgroundBlurNodes != -1) {
    swift_once();
  }
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t one-time initialization function for realityKitLightSpillNodes()
{
  uint64_t v0 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for realityKitLightSpillNodes);
  uint64_t result = swift_arrayDestroy();
  static ShaderGraphNode.realityKitLightSpillNodes = v0;
  return result;
}

uint64_t *ShaderGraphNode.realityKitLightSpillNodes.unsafeMutableAddressor()
{
  if (one-time initialization token for realityKitLightSpillNodes != -1) {
    swift_once();
  }
  return &static ShaderGraphNode.realityKitLightSpillNodes;
}

uint64_t static ShaderGraphNode.realityKitLightSpillNodes.getter()
{
  return static ShaderGraphNode.realityKitSurfaceParamNodes.getter(&one-time initialization token for realityKitLightSpillNodes);
}

uint64_t static ShaderGraphNode.realityKitLightSpillNodes.setter(uint64_t a1)
{
  return static ShaderGraphNode.realityKitSurfaceParamNodes.setter(a1, &one-time initialization token for realityKitLightSpillNodes, &static ShaderGraphNode.realityKitLightSpillNodes);
}

uint64_t (*static ShaderGraphNode.realityKitLightSpillNodes.modify())()
{
  if (one-time initialization token for realityKitLightSpillNodes != -1) {
    swift_once();
  }
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t one-time initialization function for realityKitHoverStateNodes()
{
  uint64_t v0 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for realityKitHoverStateNodes);
  uint64_t result = swift_arrayDestroy();
  static ShaderGraphNode.realityKitHoverStateNodes = v0;
  return result;
}

uint64_t *ShaderGraphNode.realityKitHoverStateNodes.unsafeMutableAddressor()
{
  if (one-time initialization token for realityKitHoverStateNodes != -1) {
    swift_once();
  }
  return &static ShaderGraphNode.realityKitHoverStateNodes;
}

uint64_t static ShaderGraphNode.realityKitHoverStateNodes.getter()
{
  return static ShaderGraphNode.realityKitSurfaceParamNodes.getter(&one-time initialization token for realityKitHoverStateNodes);
}

uint64_t static ShaderGraphNode.realityKitSurfaceParamNodes.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static ShaderGraphNode.realityKitHoverStateNodes.setter(uint64_t a1)
{
  return static ShaderGraphNode.realityKitSurfaceParamNodes.setter(a1, &one-time initialization token for realityKitHoverStateNodes, &static ShaderGraphNode.realityKitHoverStateNodes);
}

uint64_t static ShaderGraphNode.realityKitSurfaceParamNodes.setter(uint64_t a1, void *a2, void *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static ShaderGraphNode.realityKitHoverStateNodes.modify())()
{
  if (one-time initialization token for realityKitHoverStateNodes != -1) {
    swift_once();
  }
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

uint64_t one-time initialization function for realityKitParamGetterFuncs()
{
  uint64_t result = closure #1 in variable initialization expression of static ShaderGraphNode.realityKitParamGetterFuncs();
  static ShaderGraphNode.realityKitParamGetterFuncs = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static ShaderGraphNode.realityKitParamGetterFuncs()
{
  if (one-time initialization token for realityKitGeometryGetterFuncs != -1) {
    swift_once();
  }
  uint64_t v0 = realityKitGeometryGetterFuncs;
  uint64_t v1 = one-time initialization token for realityKitSurfaceGetterFuncs;
  swift_bridgeObjectRetain();
  if (v1 != -1) {
    swift_once();
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = specialized Set.union<A>(_:)(v2, v0);
  if (one-time initialization token for realityKitSurfaceParamNodes != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = specialized Set.union<A>(_:)(v4, v3);
  if (one-time initialization token for realityKitBackgroundBlurNodes != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = specialized Set.union<A>(_:)(v6, v5);
  if (one-time initialization token for realityKitLightSpillNodes != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = specialized Set.union<A>(_:)(v8, v7);
  if (one-time initialization token for realityKitHoverStateNodes != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v10 = swift_bridgeObjectRetain();
  return specialized Set.union<A>(_:)(v10, v9);
}

double Graph.getArgument(name:type:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C418EE0;
  *(void *)(inited + 32) = 7632239;
  *(void *)(inited + 40) = 0xE300000000000000;
  *(void *)(inited + 48) = a3;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  unint64_t v11 = v10 | 0x6000000000000000;
  unint64_t v12 = *(void *)(v4 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v12, MEMORY[0x263F8EE78], inited, v11, v4 + 64, v4, (unint64_t *)&v15);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  long long v13 = v16[0];
  *a4 = v15;
  a4[1] = v13;
  double result = *(double *)((char *)v16 + 9);
  *(_OWORD *)((char *)a4 + 25) = *(_OWORD *)((char *)v16 + 9);
  return result;
}

uint64_t Graph.insertGetTexture(_:textureAssignments:customUniformsType:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  if (!*(void *)(a3 + 16)) {
    goto LABEL_6;
  }
  uint64_t v10 = v6;
  uint64_t v11 = v5;
  swift_bridgeObjectRetain();
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_((uint64_t)&v42);
    *(void *)&v43[0] = 0;
    *((void *)&v43[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    *(void *)&v43[0] = 0xD00000000000002CLL;
    *((void *)&v43[0] + 1) = 0x800000025C424E60;
    v23._char countAndFlagsBits = a1;
    v23._uint64_t object = a2;
    String.append(_:)(v23);
    uint64_t v26 = 39;
    unint64_t v27 = 0xE100000000000000;
    goto LABEL_8;
  }
  unint64_t v41 = a5;
  uint64_t v16 = (uint64_t *)(*(void *)(a3 + 56) + 24 * v14);
  uint64_t v17 = (void *)v16[1];
  uint64_t v59 = *v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_25C418EE0;
  *(void *)(v18 + 32) = 7632239;
  *(void *)(v18 + 40) = 0xE300000000000000;
  *(void *)(v18 + 48) = a4;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 12580;
  *(void *)(v19 + 24) = 0xE200000000000000;
  unint64_t v20 = v19 | 0x6000000000000000;
  unint64_t v21 = *(void *)(v11 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v21, MEMORY[0x263F8EE78], v18, v20, v11 + 64, v11, &v45);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  ShaderGraphNode.out.getter((uint64_t)v48);
  if (!v10)
  {
    outlined init with take of NodePersonality(&v45, &v55);
    outlined release of NodePersonality(&v55);
    uint64_t v54 = v46;
    outlined release of [Input]((uint64_t)&v54);
    uint64_t v53 = v47;
    outlined release of [Input]((uint64_t)&v53);
    Output.getProperty(_:_:)(v11, v59, v17, &v50);
    swift_bridgeObjectRelease();
    swift_release();
    long long v52 = v49;
    uint64_t result = outlined release of String((uint64_t)&v52);
    long long v40 = v51[0];
    *unint64_t v41 = v50;
    v41[1] = v40;
    *(_OWORD *)((char *)v41 + 25) = *(_OWORD *)((char *)v51 + 9);
    return result;
  }

  outlined init with take of NodePersonality(&v45, v58);
  outlined release of NodePersonality(v58);
  uint64_t v57 = v46;
  outlined release of [Input]((uint64_t)&v57);
  uint64_t v56 = v47;
  outlined release of [Input]((uint64_t)&v56);
  uint64_t v22 = v59;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_((uint64_t)&v42);
  *(void *)&v43[0] = 0;
  *((void *)&v43[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(51);
  v24._char countAndFlagsBits = 0xD00000000000002FLL;
  v24._uint64_t object = (void *)0x800000025C424E90;
  String.append(_:)(v24);
  v25._char countAndFlagsBits = v22;
  v25._uint64_t object = v17;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  uint64_t v26 = 11815;
  unint64_t v27 = 0xE200000000000000;
LABEL_8:
  String.append(_:)(*(Swift::String *)&v26);
  long long v28 = v43[0];
  outlined init with take of UserGraphError.ErrorType((uint64_t)&v42, (uint64_t)v43);
  long long v44 = v28;
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  swift_allocError();
  *uint64_t v29 = v43[0];
  long long v30 = v43[4];
  long long v31 = v43[2];
  long long v32 = v43[1];
  v29[3] = v43[3];
  v29[4] = v30;
  v29[1] = v32;
  v29[2] = v31;
  long long v33 = v43[8];
  long long v34 = v43[6];
  long long v35 = v43[5];
  v29[7] = v43[7];
  v29[8] = v33;
  v29[5] = v35;
  v29[6] = v34;
  long long v36 = v44;
  long long v37 = v43[10];
  long long v38 = v43[9];
  v29[11] = v43[11];
  v29[12] = v36;
  v29[9] = v38;
  v29[10] = v37;
  return swift_willThrow();
}

double Input.prependFunction(_:label:arguments:in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, _OWORD *a5@<X8>)
{
  double result = specialized Input.prependFunction(_:label:arguments:in:)(a1, a2, a3, a4, &v9);
  if (!v5)
  {
    long long v8 = v10[0];
    *a5 = v9;
    a5[1] = v8;
    double result = *(double *)((char *)v10 + 9);
    *(_OWORD *)((char *)a5 + 25) = *(_OWORD *)((char *)v10 + 9);
  }
  return result;
}

double Output.appendUnaryFunction(_:resultType:in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C418EE0;
  uint64_t v38 = v5;
  uint64_t v11 = *(void *)(v5 + 8);
  *(void *)(inited + 32) = 28265;
  uint64_t v58 = inited + 32;
  *(void *)(inited + 40) = 0xE200000000000000;
  *(void *)(inited + 48) = v11;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  uint64_t v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_25C418EE0;
  *(void *)(v12 + 32) = 7632239;
  *(void *)(v12 + 40) = 0xE300000000000000;
  *(void *)(v12 + 48) = a3;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  *(void *)(v13 + 32) = a3;
  unint64_t v14 = v13 | 0x2000000000000000;
  unint64_t v15 = *(void *)(a4 + 40);
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v15, inited, v12, v14, a4 + 64, a4, (unint64_t *)v54);
  long long v44 = *(_OWORD *)&v54[8];
  uint64_t v40 = *(void *)v54;
  uint64_t v42 = *(void *)&v54[32];
  uint64_t v43 = *(void *)&v54[24];
  char v41 = v54[40];
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v16 = *(void *)(v44 + 16);
  if (v16)
  {
    uint64_t v17 = (void *)(v44 + 80);
    while (1)
    {
      uint64_t v19 = *(v17 - 6);
      uint64_t v18 = *(v17 - 5);
      uint64_t v21 = *(v17 - 4);
      unint64_t v20 = *(v17 - 3);
      uint64_t v22 = *(v17 - 2);
      char v23 = *((unsigned char *)v17 - 8);
      uint64_t v24 = *v17;
      if (v21 == 28265 && v20 == 0xE200000000000000) {
        break;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_11;
      }
      v17 += 7;
      if (!--v16) {
        goto LABEL_9;
      }
    }
    unint64_t v20 = 0xE200000000000000;
LABEL_11:
    v55[0] = v19;
    v55[1] = v18;
    _OWORD v55[2] = v21;
    v55[3] = v20;
    v55[4] = v22;
    char v56 = v23;
    uint64_t v57 = v24;
    swift_retain();
    swift_bridgeObjectRetain();
    Graph.connect(_:to:)(v38, (unint64_t)v55);
    swift_bridgeObjectRelease();
    swift_release();
    long long v37 = *(_OWORD *)&v54[16];
    *a5 = *(_OWORD *)v54;
    a5[1] = v37;
    double result = *(double *)&v54[25];
    *(_OWORD *)((char *)a5 + 25) = *(_OWORD *)&v54[25];
  }
  else
  {
LABEL_9:
    uint64_t v45 = v40;
    long long v46 = v44;
    uint64_t v47 = v43;
    uint64_t v48 = v42;
    char v49 = v41;
    uint64_t v50 = 28265;
    unint64_t v51 = 0xE200000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v45);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v45, (uint64_t)v52);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v53 = 0uLL;
    swift_allocError();
    *uint64_t v26 = v52[0];
    long long v27 = v52[4];
    long long v29 = v52[1];
    long long v28 = v52[2];
    v26[3] = v52[3];
    v26[4] = v27;
    v26[1] = v29;
    v26[2] = v28;
    long long v30 = v52[8];
    long long v32 = v52[5];
    long long v31 = v52[6];
    v26[7] = v52[7];
    v26[8] = v30;
    v26[5] = v32;
    v26[6] = v31;
    long long v33 = v53;
    long long v35 = v52[9];
    long long v34 = v52[10];
    v26[11] = v52[11];
    v26[12] = v33;
    v26[9] = v35;
    v26[10] = v34;
    swift_willThrow();
  }
  return result;
}

unint64_t specialized OrderedDictionary.subscript.modify(void *a1, uint64_t a2)
{
  uint64_t v5 = malloc(0x58uLL);
  *a1 = v5;
  v5[6] = a2;
  v5[7] = v2;
  unint64_t v6 = specialized OrderedSet._find(_:)(a2, *(void *)v2, *(void **)(v2 + 8));
  uint64_t v8 = v7;
  v5[8] = v6;
  *((unsigned char *)v5 + 80) = v9;
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  if (v9) {
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(v2 + 16);
  uint64_t v10 = (uint64_t *)(v2 + 16);
  unint64_t result = specialized MutableCollection.swapAt(_:_:)(v6, *(void *)(v11 + 16) - 1);
  uint64_t v13 = *v10;
  if (*(void *)(*v10 + 16))
  {
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v13);
      uint64_t v13 = result;
    }
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      uint64_t v15 = v14 - 1;
      uint64_t v16 = v13 + 48 * v15;
      uint64_t v17 = *(void *)(v16 + 48);
      uint64_t v18 = *(void *)(v16 + 56);
      long long v19 = *(_OWORD *)(v16 + 64);
      long long v20 = *(_OWORD *)(v16 + 32);
      *(void *)(v13 + 16) = v15;
      *uint64_t v10 = v13;
      outlined consume of Graph.Adjacent?(0, 0);
      *(_OWORD *)uint64_t v5 = v20;
      _OWORD v5[2] = v17;
      v5[3] = v18;
      *((_OWORD *)v5 + 2) = v19;
LABEL_7:
      v5[9] = v8;
      return (unint64_t)OrderedDictionary.subscript.modifyspecialized ;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void OrderedDictionary.subscript.modifyspecialized (uint64_t **a1)
{
  uint64_t v1 = *a1;
  specialized $defer #1 <A, B>() in OrderedDictionary.subscript.modify((*a1)[8], (*a1)[10] & 1, v1, v1[7], v1[9], v1[6]);
  outlined consume of Graph.Adjacent?(*v1, v1[1]);
  free(v1);
}

unint64_t specialized OrderedDictionary.subscript.modify(void *a1, uint64_t *a2)
{
  uint64_t v5 = malloc(0x40uLL);
  *a1 = v5;
  _OWORD v5[2] = a2;
  v5[3] = v2;
  uint64_t v7 = *v2;
  uint64_t v6 = v2[1];
  uint64_t v8 = v6 + 32;
  uint64_t v9 = *(void *)(v6 + 16);
  if (*v2)
  {
    swift_retain();
    Swift::Int v10 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)a2, v8, v9, (void *)(v7 + 16), v7 + 32);
    char v12 = v11;
    uint64_t v14 = v13;
    swift_release();
    v5[1] = 0;
    uint64_t v15 = (char *)(v5 + 1);
    void *v5 = 0;
    if ((v12 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_9:
    char v25 = 1;
    goto LABEL_10;
  }
  Swift::Int v10 = specialized Collection<>.firstIndex(of:)(a2, v6 + 32, *(void *)(v6 + 16));
  uint64_t v14 = 0;
  v5[1] = 0;
  uint64_t v15 = (char *)(v5 + 1);
  void *v5 = 0;
  if (v26) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v17 = v2[2];
  uint64_t v16 = v2 + 2;
  unint64_t result = specialized MutableCollection.swapAt(_:_:)(v10, *(void *)(v17 + 16) - 1);
  long long v19 = (void *)*v16;
  if (*(void *)(*v16 + 16))
  {
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v19);
      long long v19 = (void *)result;
    }
    uint64_t v20 = v19[2];
    if (v20)
    {
      uint64_t v21 = v20 - 1;
      uint64_t v22 = &v19[2 * v21];
      uint64_t v23 = v22[4];
      uint64_t v24 = v22[5];
      v19[2] = v21;
      *uint64_t v16 = v19;
      outlined consume of OrderedSet<Input>?(0, v5[1]);
      char v25 = 0;
      void *v5 = v23;
      v5[1] = v24;
LABEL_10:
      v5[5] = v10;
      v5[6] = v14;
      *((unsigned char *)v5 + 56) = v25;
      v5[4] = v15;
      return (unint64_t)OrderedDictionary.subscript.modifyspecialized ;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void OrderedDictionary.subscript.modifyspecialized (uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(uint64_t **)(*a1 + 32);
  specialized $defer #1 <A, B>() in OrderedDictionary.subscript.modify(*(void *)(*a1 + 40), *(unsigned char *)(v1 + 56), (uint64_t *)v1, *(void *)(v1 + 24), *(void *)(v1 + 48), *(long long **)(v1 + 16));
  outlined consume of OrderedSet<Input>?(*(void *)v1, *v2);
  free((void *)v1);
}

unint64_t specialized OrderedSet._appendNew(_:in:)(uint64_t a1, uint64_t a2)
{
  return specialized OrderedSet._appendNew(_:in:)(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned char v18[24];

  uint64_t v3 = v2;
  outlined init with copy of WeakBox<SGEdge>(a1, (uint64_t)v18);
  uint64_t v7 = v2[1];
  uint64_t v5 = v2 + 1;
  uint64_t v6 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v5 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
    uint64_t v6 = *v5;
  }
  Swift::Int v10 = *(void *)(v6 + 16);
  uint64_t v9 = *(void *)(v6 + 24);
  if (v10 >= v9 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
    uint64_t v6 = *v5;
  }
  *(void *)(v6 + 16) = v10 + 1;
  unint64_t result = outlined init with take of MetalFunctionNode?((uint64_t)v18, v6 + 8 * v10 + 32, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  v3[1] = v6;
  char v12 = *(void *)(v6 + 16);
  uint64_t v13 = *v3;
  if (*v3)
  {
    swift_beginAccess();
    if (specialized static _HashTable.maximumCapacity(forScale:)(*(void *)(v13 + 16) & 0x3FLL) >= v12)
    {
      unint64_t result = swift_isUniquelyReferenced_native();
      uint64_t v14 = *v3;
      if (!result)
      {
        if (!v14)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        uint64_t v14 = _HashTable.copy()((void *)*v3);
        unint64_t result = swift_release();
        *uint64_t v3 = v14;
      }
      if (v14)
      {
        uint64_t v16 = *(void *)(v14 + 16);
        uint64_t v15 = (void *)(v14 + 16);
        uint64_t v17 = *(void *)(*v5 + 16) + ~((uint64_t)v15[1] >> 6);
        return _HashTable.UnsafeHandle.subscript.setter((-1 << v16) ^ ~(((v17 >> 63) & ~(-1 << v16)) + v17), a2, v15, (uint64_t)(v15 + 2));
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((unint64_t)v12 < 0x10)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v3 = v2;
  uint64_t v8 = v2[1];
  uint64_t v6 = v2 + 1;
  uint64_t v7 = v8;
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v6 = v8;
  if ((result & 1) == 0)
  {
    unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
    uint64_t v7 = *v6;
  }
  char v11 = *(void *)(v7 + 16);
  Swift::Int v10 = *(void *)(v7 + 24);
  if (v11 >= v10 >> 1)
  {
    unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
    uint64_t v7 = *v6;
  }
  *(void *)(v7 + 16) = v11 + 1;
  *(void *)(v7 + 8 * v11 + 32) = a1;
  v3[1] = v7;
  char v12 = *v3;
  if (*v3)
  {
    swift_beginAccess();
    if (specialized static _HashTable.maximumCapacity(forScale:)(*(void *)(v12 + 16) & 0x3FLL) > (uint64_t)v11)
    {
      unint64_t result = swift_isUniquelyReferenced_native();
      uint64_t v13 = *v3;
      if (!result)
      {
        if (!v13)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        uint64_t v13 = _HashTable.copy()((void *)*v3);
        unint64_t result = swift_release();
        *uint64_t v3 = v13;
      }
      if (v13)
      {
        uint64_t v15 = *(void *)(v13 + 16);
        uint64_t v14 = (void *)(v13 + 16);
        uint64_t v16 = *(void *)(*v6 + 16) + ~((uint64_t)v14[1] >> 6);
        return _HashTable.UnsafeHandle.subscript.setter((-1 << v15) ^ ~(((v16 >> 63) & ~(-1 << v15)) + v16), a2, v14, (uint64_t)(v14 + 2));
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if (v11 < 0xF)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized OrderedSet._appendNew(_:in:)(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

unint64_t specialized OrderedSet._appendNew(_:in:)(long long *a1, uint64_t a2)
{
  return specialized OrderedSet._appendNew(_:in:)(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized OrderedSet._appendNew(_:in:)(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

unint64_t specialized OrderedSet._appendNew(_:in:)(long long *a1, uint64_t a2, uint64_t (*a3)(BOOL, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, int64_t, void, uint64_t))
{
  uint64_t v7 = v4;
  long long v26 = a1[1];
  uint64_t v12 = v4[1];
  Swift::Int v10 = v4 + 1;
  uint64_t v11 = v12;
  swift_retain();
  outlined retain of String((uint64_t)&v26);
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *Swift::Int v10 = v12;
  if ((result & 1) == 0)
  {
    unint64_t result = a3(0, *(void *)(v11 + 16) + 1, 1);
    uint64_t v11 = *v10;
  }
  unint64_t v15 = *(void *)(v11 + 16);
  unint64_t v14 = *(void *)(v11 + 24);
  if (v15 >= v14 >> 1)
  {
    unint64_t result = a3(v14 > 1, v15 + 1, 1);
    uint64_t v11 = *v10;
  }
  *(void *)(v11 + 16) = v15 + 1;
  unint64_t v16 = v11 + 56 * v15;
  long long v17 = *a1;
  long long v18 = a1[1];
  long long v19 = a1[2];
  *(void *)(v16 + 80) = *((void *)a1 + 6);
  *(_OWORD *)(v16 + 48) = v18;
  *(_OWORD *)(v16 + 64) = v19;
  *(_OWORD *)(v16 + 32) = v17;
  v7[1] = v11;
  uint64_t v20 = *(void *)(v11 + 16);
  uint64_t v21 = *v7;
  if (*v7)
  {
    swift_beginAccess();
    if (specialized static _HashTable.maximumCapacity(forScale:)(*(void *)(v21 + 16) & 0x3FLL) >= v20)
    {
      unint64_t result = swift_isUniquelyReferenced_native();
      uint64_t v22 = *v7;
      if (!result)
      {
        if (!v22)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        uint64_t v22 = _HashTable.copy()((void *)*v7);
        unint64_t result = swift_release();
        *uint64_t v7 = v22;
      }
      if (v22)
      {
        uint64_t v24 = *(void *)(v22 + 16);
        uint64_t v23 = (void *)(v22 + 16);
        uint64_t v25 = *(void *)(*v10 + 16) + ~((uint64_t)v23[1] >> 6);
        return _HashTable.UnsafeHandle.subscript.setter((-1 << v24) ^ ~(((v25 >> 63) & ~(-1 << v24)) + v25), a2, v23, (uint64_t)(v23 + 2));
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((unint64_t)v20 < 0x10)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()(a4);
}

unint64_t specialized OrderedSet._appendNew(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v10 = v3[1];
  uint64_t v8 = v3 + 1;
  uint64_t v9 = v10;
  swift_bridgeObjectRetain();
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v8 = v10;
  if ((result & 1) == 0)
  {
    unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
    uint64_t v9 = *v8;
  }
  unint64_t v13 = *(void *)(v9 + 16);
  unint64_t v12 = *(void *)(v9 + 24);
  if (v13 >= v12 >> 1)
  {
    unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
    uint64_t v9 = *v8;
  }
  *(void *)(v9 + 16) = v13 + 1;
  unint64_t v14 = v9 + 16 * v13;
  *(void *)(v14 + 32) = a1;
  *(void *)(v14 + 40) = a2;
  v4[1] = v9;
  uint64_t v15 = *(void *)(v9 + 16);
  uint64_t v16 = *v4;
  if (*v4)
  {
    swift_beginAccess();
    if (specialized static _HashTable.maximumCapacity(forScale:)(*(void *)(v16 + 16) & 0x3FLL) >= v15)
    {
      unint64_t result = swift_isUniquelyReferenced_native();
      uint64_t v17 = *v4;
      if (!result)
      {
        if (!v17)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        uint64_t v17 = _HashTable.copy()((void *)*v4);
        unint64_t result = swift_release();
        *uint64_t v4 = v17;
      }
      if (v17)
      {
        uint64_t v19 = *(void *)(v17 + 16);
        long long v18 = (void *)(v17 + 16);
        uint64_t v20 = *(void *)(*v8 + 16) + ~((uint64_t)v18[1] >> 6);
        return _HashTable.UnsafeHandle.subscript.setter((-1 << v19) ^ ~(((v20 >> 63) & ~(-1 << v19)) + v20), a3, v18, (uint64_t)(v18 + 2));
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((unint64_t)v15 < 0x10)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

unint64_t specialized OrderedSet._appendNew(_:in:)(void *a1, uint64_t a2)
{
  return specialized OrderedSet._appendNew(_:in:)(a1, a2, (uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

unint64_t specialized OrderedSet._appendNew(_:in:)(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t, int64_t, void, uint64_t))
{
  uint64_t v5 = v3;
  uint64_t v7 = v3 + 1;
  id v8 = a1;
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  unint64_t result = specialized ContiguousArray._endMutation()();
  uint64_t v10 = *v5;
  uint64_t v11 = *(void *)(v5[1] + 16);
  if (*v5)
  {
    swift_beginAccess();
    if (specialized static _HashTable.maximumCapacity(forScale:)(*(void *)(v10 + 16) & 0x3FLL) >= v11)
    {
      unint64_t result = swift_isUniquelyReferenced_native();
      uint64_t v12 = *v5;
      if (!result)
      {
        if (!v12)
        {
LABEL_12:
          __break(1u);
          return result;
        }
        uint64_t v12 = _HashTable.copy()((void *)*v5);
        unint64_t result = swift_release();
        uint64_t *v5 = v12;
      }
      if (v12)
      {
        uint64_t v14 = *(void *)(v12 + 16);
        unint64_t v13 = (void *)(v12 + 16);
        uint64_t v15 = *(void *)(*v7 + 16) + ~((uint64_t)v13[1] >> 6);
        return _HashTable.UnsafeHandle.subscript.setter((-1 << v14) ^ ~(((v15 >> 63) & ~(-1 << v14)) + v15), a2, v13, (uint64_t)(v13 + 2));
      }
      __break(1u);
      goto LABEL_12;
    }
  }
  else if ((unint64_t)v11 < 0x10)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()(a3);
}

unint64_t specialized OrderedSet._appendNew(_:in:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v12 = v4[1];
  uint64_t v10 = v4 + 1;
  uint64_t v11 = v12;
  outlined copy of TextureSource();
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v10 = v12;
  if ((result & 1) == 0)
  {
    unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
    uint64_t v11 = *v10;
  }
  unint64_t v15 = *(void *)(v11 + 16);
  unint64_t v14 = *(void *)(v11 + 24);
  if (v15 >= v14 >> 1)
  {
    unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
    uint64_t v11 = *v10;
  }
  *(void *)(v11 + 16) = v15 + 1;
  unint64_t v16 = v11 + 24 * v15;
  *(void *)(v16 + 32) = a1;
  *(void *)(v16 + 40) = a2;
  *(unsigned char *)(v16 + 48) = a3 & 1;
  v5[1] = v11;
  uint64_t v17 = *(void *)(v11 + 16);
  uint64_t v18 = *v5;
  if (*v5)
  {
    swift_beginAccess();
    if (specialized static _HashTable.maximumCapacity(forScale:)(*(void *)(v18 + 16) & 0x3FLL) >= v17)
    {
      unint64_t result = swift_isUniquelyReferenced_native();
      uint64_t v19 = *v5;
      if (!result)
      {
        if (!v19)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        uint64_t v19 = _HashTable.copy()((void *)*v5);
        unint64_t result = swift_release();
        uint64_t *v5 = v19;
      }
      if (v19)
      {
        uint64_t v21 = *(void *)(v19 + 16);
        uint64_t v20 = (void *)(v19 + 16);
        uint64_t v22 = *(void *)(*v10 + 16) + ~((uint64_t)v20[1] >> 6);
        return _HashTable.UnsafeHandle.subscript.setter((-1 << v21) ^ ~(((v22 >> 63) & ~(-1 << v21)) + v22), a4, v20, (uint64_t)(v20 + 2));
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((unint64_t)v17 < 0x10)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()((uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

unint64_t specialized OrderedSet._appendNew(_:in:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(BOOL, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, int64_t, void, uint64_t))
{
  uint64_t v7 = v4;
  uint64_t v12 = v4[1];
  uint64_t v10 = v4 + 1;
  uint64_t v11 = v12;
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v10 = v12;
  if ((result & 1) == 0)
  {
    unint64_t result = a3(0, *(void *)(v11 + 16) + 1, 1);
    uint64_t v11 = *v10;
  }
  unint64_t v15 = *(void *)(v11 + 16);
  unint64_t v14 = *(void *)(v11 + 24);
  if (v15 >= v14 >> 1)
  {
    unint64_t result = a3(v14 > 1, v15 + 1, 1);
    uint64_t v11 = *v10;
  }
  *(void *)(v11 + 16) = v15 + 1;
  *(void *)(v11 + 8 * v15 + 32) = a1;
  v7[1] = v11;
  uint64_t v16 = *(void *)(v11 + 16);
  uint64_t v17 = *v7;
  if (*v7)
  {
    swift_beginAccess();
    if (specialized static _HashTable.maximumCapacity(forScale:)(*(void *)(v17 + 16) & 0x3FLL) >= v16)
    {
      unint64_t result = swift_isUniquelyReferenced_native();
      uint64_t v18 = *v7;
      if (!result)
      {
        if (!v18)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        uint64_t v18 = _HashTable.copy()((void *)*v7);
        unint64_t result = swift_release();
        *uint64_t v7 = v18;
      }
      if (v18)
      {
        uint64_t v20 = *(void *)(v18 + 16);
        uint64_t v19 = (void *)(v18 + 16);
        uint64_t v21 = *(void *)(*v10 + 16) + ~((uint64_t)v19[1] >> 6);
        return _HashTable.UnsafeHandle.subscript.setter((-1 << v20) ^ ~(((v21 >> 63) & ~(-1 << v20)) + v21), a2, v19, (uint64_t)(v19 + 2));
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((unint64_t)v16 < 0x10)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()(a4);
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *a1;
    uint64_t v6 = (uint64_t *)(a2 + 24);
    uint64_t v16 = a3;
    uint64_t v17 = *a1;
    do
    {
      if (*(v6 - 3) == v5)
      {
        uint64_t v7 = *(v6 - 1);
        uint64_t v8 = *v6;
        uint64_t v19 = v6[1];
        char v18 = *((unsigned char *)v6 + 16);
        uint64_t v9 = v6[3];
        uint64_t v10 = a1[1];
        uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)*(v6 - 2) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if (v11(v10))
        {
          uint64_t v12 = v9;
          if (v7 == a1[2] && v8 == a1[3])
          {
            swift_bridgeObjectRelease();
            swift_release();
            a3 = v16;
            uint64_t v5 = v17;
          }
          else
          {
            char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_release();
            a3 = v16;
            uint64_t v5 = v17;
            if ((v13 & 1) == 0) {
              goto LABEL_4;
            }
          }
          char v14 = *((unsigned char *)a1 + 40);
          if (v18)
          {
            if (!*((unsigned char *)a1 + 40)) {
              goto LABEL_4;
            }
          }
          else
          {
            if (v19 != a1[4]) {
              char v14 = 1;
            }
            if (v14) {
              goto LABEL_4;
            }
          }
          if (v12 == a1[6]) {
            return v4;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();
          a3 = v16;
          uint64_t v5 = v17;
        }
      }
LABEL_4:
      v6 += 7;
      ++v4;
    }
    while (a3 != v4);
  }
  return 0;
}

void specialized Collection<>.firstIndex(of:)(uint64_t a1, unint64_t a2)
{
}

{
  specialized Collection<>.firstIndex(of:)(a1, a2, (uint64_t (*)(void))type metadata accessor for SGNode);
}

void specialized Collection<>.firstIndex(of:)(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v6 = (id)MEMORY[0x2611848A0](0, a2);
      }
      else
      {
        if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v6 = *(id *)(a2 + 32);
      }
      uint64_t v7 = v6;
      a3 = (uint64_t (*)(void))a3(0);
      char v8 = static NSObject.== infix(_:_:)();

      if ((v8 & 1) == 0)
      {
        for (uint64_t i = 0; ; ++i)
        {
          unint64_t v13 = i + 1;
          if (__OFADD__(i, 1)) {
            break;
          }
          if (v13 == v5) {
            return;
          }
          if ((a2 & 0xC000000000000001) != 0)
          {
            id v10 = (id)MEMORY[0x2611848A0](i + 1, a2);
          }
          else
          {
            if ((v13 & 0x8000000000000000) != 0) {
              goto LABEL_18;
            }
            if (v13 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_19;
            }
            id v10 = *(id *)(a2 + 32 + 8 * v13);
          }
          uint64_t v11 = v10;
          char v12 = static NSObject.== infix(_:_:)();

          if (v12) {
            return;
          }
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v5) {
          continue;
        }
      }
      return;
    }
  }
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == a1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = v2 - 1;
  while (v5 != result)
  {
    uint64_t v6 = *(void *)(a2 + 40 + 8 * result++);
    if (v6 == a1) {
      return result;
    }
  }
  return 0;
}

int64_t specialized $defer #1 <A, B>() in OrderedDictionary.subscript.modify(int64_t result, char a2, uint64_t *a3, uint64_t a4, uint64_t a5, long long *a6)
{
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  if (a2)
  {
    if (!v9) {
      return result;
    }
    swift_retain();
    swift_retain();
    specialized OrderedSet._appendNew(_:in:)(a6, a5, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
    uint64_t v20 = *(void *)(a4 + 16);
    char v18 = (uint64_t *)(a4 + 16);
    uint64_t v19 = v20;
    swift_retain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *char v18 = v20;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1);
      uint64_t v19 = *v18;
    }
    unint64_t v23 = *(void *)(v19 + 16);
    unint64_t v22 = *(void *)(v19 + 24);
    if (v23 >= v22 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      uint64_t v19 = *v18;
    }
    *(void *)(v19 + 16) = v23 + 1;
    uint64_t v24 = v19 + 16 * v23;
    *(void *)(v24 + 32) = v8;
    *(void *)(v24 + 40) = v9;
    goto LABEL_14;
  }
  unint64_t v10 = result;
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(a4 + 16);
    uint64_t v12 = *(void *)(a4 + 16);
    outlined copy of OrderedSet<Input>?(*a3, a3[1]);
    swift_retain();
    swift_retain();
    char v13 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t *v11 = v12;
    if ((v13 & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1);
      uint64_t v12 = *v11;
    }
    unint64_t v15 = *(void *)(v12 + 16);
    unint64_t v14 = *(void *)(v12 + 24);
    if (v15 >= v14 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      uint64_t v12 = *v11;
    }
    *(void *)(v12 + 16) = v15 + 1;
    uint64_t v16 = v12 + 16 * v15;
    *(void *)(v16 + 32) = v8;
    *(void *)(v16 + 40) = v9;
    specialized MutableCollection.swapAt(_:_:)(v10, *(void *)(*v11 + 16) - 1);
LABEL_14:
    swift_release();
    return swift_release();
  }
  uint64_t v25 = (uint64_t *)(a4 + 16);
  if (*(void *)(*(void *)(a4 + 16) + 16) > result)
  {
    uint64_t v26 = specialized ContiguousArray.remove(at:)(result);
    uint64_t v28 = v27;
    uint64_t v29 = *v25;
    swift_retain();
    swift_retain();
    char v30 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v25 = v29;
    if ((v30 & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1);
      uint64_t v29 = *v25;
    }
    unint64_t v31 = *(void *)(v29 + 16);
    unint64_t v32 = *(void *)(v29 + 24);
    unint64_t v33 = v31 + 1;
    if (v31 >= v32 >> 1)
    {
      unint64_t v35 = v31 + 1;
      unint64_t v36 = v31;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v31 + 1, 1);
      unint64_t v31 = v36;
      unint64_t v33 = v35;
      uint64_t v29 = *v25;
    }
    *(void *)(v29 + 16) = v33;
    uint64_t v34 = v29 + 16 * v31;
    *(void *)(v34 + 32) = v26;
    *(void *)(v34 + 40) = v28;
    swift_release();
    swift_release();
  }
  specialized OrderedSet._removeExistingMember(at:in:)(v10, a5, (uint64_t)v37);
  swift_release();
  long long v39 = v38;
  return outlined release of String((uint64_t)&v39);
}

int64_t specialized $defer #1 <A, B>() in OrderedDictionary.subscript.modify(int64_t result, char a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  uint64_t v10 = a3[2];
  uint64_t v11 = a3[3];
  uint64_t v12 = a3[4];
  uint64_t v13 = a3[5];
  if (a2)
  {
    if (!v9) {
      return result;
    }
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    specialized OrderedSet._appendNew(_:in:)(a6, a5, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(uint64_t, int64_t, void, uint64_t))specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
    uint64_t v24 = *(void *)(a4 + 16);
    unint64_t v22 = (uint64_t *)(a4 + 16);
    uint64_t v23 = v24;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v22 = v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v23 + 16) + 1, 1);
      uint64_t v23 = *v22;
    }
    unint64_t v27 = *(void *)(v23 + 16);
    unint64_t v26 = *(void *)(v23 + 24);
    if (v27 >= v26 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
      uint64_t v23 = *v22;
    }
    *(void *)(v23 + 16) = v27 + 1;
    uint64_t v28 = (void *)(v23 + 48 * v27);
    v28[4] = v8;
    v28[5] = v9;
    v28[6] = v10;
    v28[7] = v11;
    v28[8] = v12;
    v28[9] = v13;
    goto LABEL_14;
  }
  int64_t v14 = result;
  if (v9)
  {
    unint64_t v15 = (uint64_t *)(a4 + 16);
    uint64_t v16 = *(void *)(a4 + 16);
    outlined copy of Graph.Adjacent?(*a3, a3[1]);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    char v17 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t *v15 = v16;
    unint64_t v39 = v14;
    if ((v17 & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1);
      uint64_t v16 = *v15;
    }
    unint64_t v19 = *(void *)(v16 + 16);
    unint64_t v18 = *(void *)(v16 + 24);
    if (v19 >= v18 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      uint64_t v16 = *v15;
    }
    *(void *)(v16 + 16) = v19 + 1;
    uint64_t v20 = (void *)(v16 + 48 * v19);
    v20[4] = v8;
    v20[5] = v9;
    v20[6] = v10;
    v20[7] = v11;
    v20[8] = v12;
    v20[9] = v13;
    specialized MutableCollection.swapAt(_:_:)(v39, *(void *)(*v15 + 16) - 1);
LABEL_14:
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  uint64_t v29 = (uint64_t *)(a4 + 16);
  if (*(void *)(*(void *)(a4 + 16) + 16) > result)
  {
    int64_t v30 = result;
    specialized ContiguousArray.remove(at:)(result, (uint64_t)&v40);
    long long v47 = v40;
    uint64_t v31 = *(void *)&v41[24];
    uint64_t v46 = *(void *)v41;
    outlined init with take of MetalFunctionNode?((uint64_t)&v47, (uint64_t)v49, &demangling cache variable for type metadata for _HashTable.Storage?);
    uint64_t v48 = *((void *)&v47 + 1);
    long long v43 = *(_OWORD *)&v41[8];
    uint64_t v42 = v31;
    outlined init with take of MetalFunctionNode?((uint64_t)&v43, (uint64_t)v45, &demangling cache variable for type metadata for _HashTable.Storage?);
    uint64_t v44 = *((void *)&v43 + 1);
    uint64_t v32 = *v29;
    outlined retain of _HashTable.Storage?((uint64_t)v49);
    outlined retain of _HashTable.Storage?((uint64_t)&v48);
    outlined retain of _HashTable.Storage?((uint64_t)&v46);
    outlined retain of _HashTable.Storage?((uint64_t)v45);
    outlined retain of _HashTable.Storage?((uint64_t)&v44);
    outlined retain of _HashTable.Storage?((uint64_t)&v42);
    char v33 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v29 = v32;
    if ((v33 & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v32 + 16) + 1, 1);
      uint64_t v32 = *v29;
    }
    unint64_t v35 = *(void *)(v32 + 16);
    unint64_t v34 = *(void *)(v32 + 24);
    if (v35 >= v34 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
      uint64_t v32 = *v29;
    }
    *(void *)(v32 + 16) = v35 + 1;
    unint64_t v36 = (_OWORD *)(v32 + 48 * v35);
    long long v37 = v40;
    long long v38 = *(_OWORD *)&v41[16];
    _OWORD v36[3] = *(_OWORD *)v41;
    v36[4] = v38;
    v36[2] = v37;
    outlined release of _HashTable.Storage?((uint64_t)v49);
    outlined release of _HashTable.Storage?((uint64_t)&v48);
    outlined release of _HashTable.Storage?((uint64_t)&v46);
    outlined release of _HashTable.Storage?((uint64_t)v45);
    outlined release of _HashTable.Storage?((uint64_t)&v44);
    outlined release of _HashTable.Storage?((uint64_t)&v42);
    int64_t v14 = v30;
  }
  return specialized OrderedSet._removeExistingMember(at:in:)(v14, a5);
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = 2 * a2;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
}

uint64_t specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, char a2)
{
  unint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v2 = v5;
  uint64_t v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = MEMORY[0x2611848B0](v7, v9, a2 & 1, v5);
  uint64_t *v2 = result;
  return result;
}

void (*specialized Array.subscript.read(void (**a1)(void **a1), unint64_t a2, uint64_t a3))(void **a1)
{
  uint64_t result = (void (*)(void **))malloc(0x38uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a3 + 16) > a2)
  {
    uint64_t v7 = result;
    uint64_t v8 = a3 + 56 * a2;
    uint64_t v10 = *(void *)(v8 + 32);
    uint64_t v9 = *(void *)(v8 + 40);
    uint64_t v11 = *(void *)(v8 + 48);
    uint64_t v12 = *(void *)(v8 + 56);
    uint64_t v13 = *(void *)(v8 + 64);
    char v14 = *(unsigned char *)(v8 + 72);
    uint64_t v15 = *(void *)(v8 + 80);
    *(void *)uint64_t v7 = v10;
    *((void *)v7 + 1) = v9;
    *((void *)v7 + 2) = v11;
    *((void *)v7 + 3) = v12;
    *((void *)v7 + 4) = v13;
    *((unsigned char *)v7 + 40) = v14;
    *((void *)v7 + 6) = v15;
    swift_retain();
    swift_bridgeObjectRetain();
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (void **a1)
{
  uint64_t v1 = *a1;
  swift_release();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a3 + 16) > a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = a3 + 16 * a2;
    uint64_t v5 = *(void *)(v4 + 40);
    *(void *)uint64_t v3 = *(void *)(v4 + 32);
    *((void *)v3 + 1) = v5;
    swift_bridgeObjectRetain();
    return destroy for IOAttachment;
  }
  __break(1u);
  return result;
}

{
  uint64_t (*v3)();
  id v4;

  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = (id)MEMORY[0x2611848A0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x2611848A0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_unknownObjectRetain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x2611848A0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x2611848A0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_unknownObjectRetain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x2611848A0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x2611848A0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_unknownObjectRelease();
}

{
  return swift_release();
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    unint64_t v18 = a4;
    uint64_t v7 = (uint64_t *)(result + 80);
    while (1)
    {
      uint64_t v8 = *(v7 - 5);
      uint64_t v20 = *(v7 - 6);
      uint64_t v9 = *(v7 - 4);
      uint64_t v10 = *(v7 - 3);
      uint64_t v19 = *(v7 - 2);
      uint64_t v11 = *((unsigned __int8 *)v7 - 8);
      uint64_t v12 = *v7;
      if (v9 == a2 && v10 == a3) {
        break;
      }
      uint64_t v14 = a2;
      uint64_t v15 = a3;
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_12;
      }
      v7 += 7;
      --v4;
      a3 = v15;
      a2 = v14;
      if (!v4)
      {
        uint64_t v16 = 0;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v17 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        a4 = v18;
        goto LABEL_13;
      }
    }
    uint64_t v9 = a2;
    uint64_t v10 = a3;
LABEL_12:
    uint64_t v4 = v8;
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    a4 = v18;
    uint64_t v16 = v20;
    uint64_t v17 = v19;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v17 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
LABEL_13:
  *a4 = v16;
  a4[1] = v4;
  a4[2] = v9;
  a4[3] = v10;
  a4[4] = v17;
  a4[5] = v11;
  a4[6] = v12;
  return result;
}

{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v17 = a4;
    uint64_t v7 = (uint64_t *)(result + 72);
    while (1)
    {
      uint64_t v8 = *(v7 - 5);
      uint64_t v9 = *(v7 - 4);
      uint64_t v11 = *(v7 - 3);
      uint64_t v10 = *(v7 - 2);
      unint64_t v18 = *((unsigned __int8 *)v7 - 8);
      uint64_t v12 = *v7;
      if (v8 == a2 && v9 == a3) {
        break;
      }
      uint64_t v14 = a2;
      uint64_t v15 = a3;
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_12;
      }
      v7 += 6;
      --v4;
      a3 = v15;
      a2 = v14;
      if (!v4)
      {
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        uint64_t v11 = 0;
        uint64_t v10 = 0;
        uint64_t v16 = 0;
        uint64_t v12 = 0;
        a4 = v17;
        goto LABEL_13;
      }
    }
    uint64_t v8 = a2;
    uint64_t v9 = a3;
LABEL_12:
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    a4 = v17;
    uint64_t v16 = v18;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    uint64_t v16 = 0;
    uint64_t v12 = 0;
  }
LABEL_13:
  *a4 = v8;
  a4[1] = v9;
  a4[2] = v11;
  a4[3] = v10;
  a4[4] = v16;
  a4[5] = v12;
  return result;
}

unint64_t specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MaterialXTarget>);
      uint64_t result = static _SetStorage.allocate(capacity:)();
      unint64_t v3 = result;
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v5) {
        return v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  unint64_t v3 = MEMORY[0x263F8EE88];
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return v3;
  }
LABEL_9:
  unint64_t v7 = v3 + 56;
  uint64_t v41 = v5;
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t result = MEMORY[0x2611848A0](v8, v1);
        BOOL v9 = __OFADD__(v8++, 1);
        if (v9)
        {
          __break(1u);
          goto LABEL_35;
        }
        uint64_t v10 = (void *)result;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v11 = v10[4];
        swift_retain();
        specialized Optional<A>.hash(into:)((uint64_t)v42, v11);
        swift_release();
        uint64_t result = Hasher._finalize()();
        uint64_t v12 = -1 << *(unsigned char *)(v3 + 32);
        unint64_t v13 = result & ~v12;
        unint64_t v14 = v13 >> 6;
        uint64_t v15 = *(void *)(v7 + 8 * (v13 >> 6));
        uint64_t v16 = 1 << v13;
        if (((1 << v13) & v15) != 0) {
          break;
        }
LABEL_19:
        *(void *)(v7 + 8 * v14) = v16 | v15;
        *(void *)(*(void *)(v3 + 48) + 8 * v13) = v10;
        uint64_t v22 = *(void *)(v3 + 16);
        BOOL v9 = __OFADD__(v22, 1);
        uint64_t v23 = v22 + 1;
        if (v9) {
          goto LABEL_36;
        }
        *(void *)(v3 + 16) = v23;
        if (v8 == v41) {
          return v3;
        }
      }
      uint64_t v17 = (void *)swift_retain();
      BOOL v18 = specialized static MaterialXTarget.== infix(_:_:)(v17, v10);
      uint64_t result = swift_release();
      if (!v18)
      {
        uint64_t v19 = ~v12;
        do
        {
          unint64_t v13 = (v13 + 1) & v19;
          unint64_t v14 = v13 >> 6;
          uint64_t v15 = *(void *)(v7 + 8 * (v13 >> 6));
          uint64_t v16 = 1 << v13;
          if ((v15 & (1 << v13)) == 0) {
            goto LABEL_19;
          }
          uint64_t v20 = (void *)swift_retain();
          BOOL v21 = specialized static MaterialXTarget.== infix(_:_:)(v20, v10);
          uint64_t result = swift_release();
        }
        while (!v21);
      }
      swift_unknownObjectRelease();
      if (v8 == v41) {
        return v3;
      }
    }
  }
  uint64_t v24 = 0;
  unint64_t v40 = v1 + 32;
  uint64_t v25 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v24 != v25)
  {
    unint64_t v26 = *(void **)(v40 + 8 * v24);
    Hasher.init(_seed:)();
    swift_retain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v27 = v26[4];
    swift_retain();
    specialized Optional<A>.hash(into:)((uint64_t)v42, v27);
    swift_release();
    uint64_t result = Hasher._finalize()();
    uint64_t v28 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    uint64_t v31 = *(void *)(v7 + 8 * (v29 >> 6));
    uint64_t v32 = 1 << v29;
    if (((1 << v29) & v31) != 0)
    {
      char v33 = (void *)swift_retain();
      BOOL v34 = specialized static MaterialXTarget.== infix(_:_:)(v33, v26);
      uint64_t result = swift_release();
      if (v34)
      {
LABEL_23:
        uint64_t result = swift_release();
        goto LABEL_24;
      }
      uint64_t v35 = ~v28;
      while (1)
      {
        unint64_t v29 = (v29 + 1) & v35;
        unint64_t v30 = v29 >> 6;
        uint64_t v31 = *(void *)(v7 + 8 * (v29 >> 6));
        uint64_t v32 = 1 << v29;
        if ((v31 & (1 << v29)) == 0) {
          break;
        }
        unint64_t v36 = (void *)swift_retain();
        BOOL v37 = specialized static MaterialXTarget.== infix(_:_:)(v36, v26);
        uint64_t result = swift_release();
        if (v37) {
          goto LABEL_23;
        }
      }
    }
    *(void *)(v7 + 8 * v30) = v32 | v31;
    *(void *)(*(void *)(v3 + 48) + 8 * v29) = v26;
    uint64_t v38 = *(void *)(v3 + 16);
    BOOL v9 = __OFADD__(v38, 1);
    uint64_t v39 = v38 + 1;
    if (v9) {
      goto LABEL_37;
    }
    *(void *)(v3 + 16) = v39;
LABEL_24:
    if (++v24 == v41) {
      return v3;
    }
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

Swift::Int specialized _ArrayProtocol.filter(_:)(Swift::Int result, uint64_t *a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    Swift::Int v19 = result + 32;
    uint64_t v4 = MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v5 = v3 <= v2 ? v2 : v3;
      while (1)
      {
        if (v3 == v5)
        {
          __break(1u);
          return result;
        }
        uint64_t v6 = v3++;
        uint64_t v7 = *a2;
        if (*(void *)(*a2 + 16))
        {
          Swift::Int v8 = v19 + 48 * v6;
          unint64_t v9 = *(void *)v8;
          uint64_t v10 = *(void *)(v8 + 8);
          uint64_t v11 = *(void *)(v8 + 16);
          long long v22 = *(_OWORD *)(v8 + 24);
          char v20 = *(unsigned char *)(v8 + 40);
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v22);
          uint64_t result = Hasher._finalize()();
          uint64_t v12 = -1 << *(unsigned char *)(v7 + 32);
          unint64_t v13 = result & ~v12;
          if ((*(void *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13)) {
            break;
          }
        }
LABEL_6:
        if (v3 == v2) {
          return v4;
        }
      }
      uint64_t v14 = *(void *)(v7 + 48);
      if (*(void *)(v14 + 8 * v13) != (void)v22) {
        break;
      }
LABEL_14:
      outlined copy of NodePersonality(v9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1);
      }
      unint64_t v17 = *(void *)(v4 + 16);
      unint64_t v16 = *(void *)(v4 + 24);
      if (v17 >= v16 >> 1) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      }
      *(void *)(v4 + 16) = v17 + 1;
      uint64_t v18 = v4 + 48 * v17;
      *(void *)(v18 + 32) = v9;
      *(void *)(v18 + 40) = v10;
      *(void *)(v18 + 48) = v11;
      *(_OWORD *)(v18 + 56) = v22;
      *(unsigned char *)(v18 + 72) = v20;
      if (v3 == v2) {
        return v4;
      }
    }
    uint64_t v15 = ~v12;
    while (1)
    {
      unint64_t v13 = (v13 + 1) & v15;
      if (((*(void *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
        goto LABEL_6;
      }
      if (*(void *)(v14 + 8 * v13) == (void)v22) {
        goto LABEL_14;
      }
    }
  }
  return MEMORY[0x263F8EE78];
}

unint64_t specialized _ArrayProtocol.filter(_:)(unint64_t result, long long *a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v3 = a2;
  unint64_t v4 = 0;
  unint64_t v59 = result + 32;
  uint64_t v5 = MEMORY[0x263F8EE78];
  unint64_t v57 = *(void *)(result + 16);
LABEL_3:
  uint64_t v54 = v5;
  if (v4 <= v2) {
    unint64_t v6 = v2;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v60 = v6;
  while (1)
  {
    if (v4 == v60)
    {
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    unint64_t v7 = v59 + 56 * v4;
    Swift::UInt v8 = *(void *)v7;
    uint64_t v9 = *(void *)(v7 + 8);
    uint64_t v10 = *(void *)(v7 + 16);
    uint64_t v11 = *(void *)(v7 + 24);
    uint64_t v12 = *(void *)(v7 + 32);
    char v13 = *(unsigned char *)(v7 + 40);
    uint64_t v14 = *(void *)(v7 + 48);
    *(void *)&long long v79 = v8;
    *((void *)&v79 + 1) = v9;
    uint64_t v65 = v10;
    *(void *)&long long v80 = v10;
    *((void *)&v80 + 1) = v11;
    uint64_t v61 = v12;
    uint64_t v62 = v14;
    *(void *)&long long v81 = v12;
    char v63 = v13;
    BYTE8(v81) = v13;
    uint64_t v82 = v14;
    long long v15 = v3[1];
    long long v68 = *v3;
    long long v69 = v15;
    long long v16 = v3[2];
    long long v17 = v3[3];
    long long v18 = v3[5];
    long long v72 = v3[4];
    long long v73 = v18;
    long long v70 = v16;
    long long v71 = v17;
    long long v19 = v3[6];
    long long v20 = v3[7];
    *(_OWORD *)((char *)v77 + 9) = *(long long *)((char *)v3 + 153);
    long long v21 = v3[9];
    long long v76 = v3[8];
    v77[0] = v21;
    long long v74 = v19;
    long long v75 = v20;
    uint64_t v22 = v69;
    uint64_t v23 = (void *)(*((void *)&v68 + 1) + 32);
    uint64_t v24 = *(void *)(*((void *)&v68 + 1) + 16);
    if (!(void)v68) {
      break;
    }
    uint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v8, (uint64_t)v23, v24, (void *)(v68 + 16), v68 + 32);
    if ((v25 & 1) == 0)
    {
      if ((result & 0x8000000000000000) != 0) {
        goto LABEL_70;
      }
      goto LABEL_15;
    }
LABEL_49:
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v34 = MEMORY[0x263F8EE78];
LABEL_50:
    ++v4;
    uint64_t v44 = *(void *)(v34 + 16);
    swift_bridgeObjectRelease();
    if (v44)
    {
      uint64_t v5 = v54;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v78 = v54;
      unint64_t v47 = v4;
      if ((result & 1) == 0)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v54 + 16) + 1, 1);
        uint64_t v5 = v78;
      }
      unint64_t v49 = *(void *)(v5 + 16);
      unint64_t v48 = *(void *)(v5 + 24);
      if (v49 >= v48 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
        uint64_t v5 = v78;
      }
      *(void *)(v5 + 16) = v49 + 1;
      uint64_t v50 = v5 + 56 * v49;
      long long v51 = v79;
      long long v52 = v80;
      long long v53 = v81;
      *(void *)(v50 + 80) = v82;
      *(_OWORD *)(v50 + 48) = v52;
      *(_OWORD *)(v50 + 64) = v53;
      *(_OWORD *)(v50 + 32) = v51;
      unint64_t v4 = v47;
      if (v47 == v2) {
        return v5;
      }
      goto LABEL_3;
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    if (v4 == v2) {
      return v54;
    }
  }
  if (!v24) {
    goto LABEL_49;
  }
  if (*v23 == v8)
  {
    uint64_t result = 0;
    goto LABEL_15;
  }
  if (v24 == 1) {
    goto LABEL_49;
  }
  if (*(void *)(*((void *)&v68 + 1) + 40) == v8)
  {
    uint64_t result = 1;
    goto LABEL_15;
  }
  if (v24 == 2) {
    goto LABEL_49;
  }
  if (*(void *)(*((void *)&v68 + 1) + 48) == v8)
  {
    uint64_t result = 2;
  }
  else
  {
    uint64_t v45 = 0;
    do
    {
      if (v24 - 3 == v45) {
        goto LABEL_49;
      }
      uint64_t v46 = *(void *)(*((void *)&v68 + 1) + 56 + 8 * v45++);
    }
    while (v46 != v8);
    uint64_t result = v45 + 2;
    if (v45 + 2 < 0) {
      goto LABEL_70;
    }
  }
LABEL_15:
  if (result >= *(void *)(v22 + 16)) {
    goto LABEL_69;
  }
  unint64_t v26 = (void *)(v22 + 48 * result);
  uint64_t v28 = v26[4];
  uint64_t v27 = v26[5];
  uint64_t v29 = v26[6];
  uint64_t v30 = *(void *)(v27 + 16);
  uint64_t v83 = v9;
  if (v28)
  {
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined retain of Graph((uint64_t)&v68);
    uint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v79, v27 + 32, v30, (void *)(v28 + 16), v28 + 32);
    if ((v31 & 1) == 0)
    {
      unint64_t v32 = result;
      uint64_t v58 = v29;
      unint64_t v2 = v57;
      if ((result & 0x8000000000000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_71;
    }
    swift_release();
    swift_release();
    unint64_t v2 = v57;
    goto LABEL_44;
  }
  unint64_t v56 = v4;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain();
  uint64_t v58 = v29;
  swift_retain();
  outlined retain of Graph((uint64_t)&v68);
  if (!v30)
  {
LABEL_42:
    swift_release();
    unint64_t v3 = a2;
    unint64_t v4 = v56;
    unint64_t v2 = v57;
LABEL_44:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    outlined release of Graph((uint64_t)&v68);
    uint64_t v34 = MEMORY[0x263F8EE78];
    goto LABEL_50;
  }
  uint64_t v35 = v30;
  unint64_t v32 = 0;
  unint64_t v36 = (void *)(v27 + 80);
  while (2)
  {
    if (*(v36 - 6) != v8) {
      goto LABEL_24;
    }
    uint64_t v37 = v11;
    uint64_t v38 = *(v36 - 4);
    uint64_t v39 = *(v36 - 3);
    uint64_t v64 = *(v36 - 2);
    char v67 = *((unsigned char *)v36 - 8);
    uint64_t v66 = *v36;
    unint64_t v40 = *(uint64_t (**)(uint64_t))(*(void *)*(v36 - 5) + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((v40(v83) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v11 = v37;
      goto LABEL_24;
    }
    if (v38 != v65 || v39 != v37)
    {
      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      uint64_t v11 = v37;
      if (v42)
      {
        if (v67) {
          goto LABEL_33;
        }
LABEL_38:
        if ((v63 & 1) == 0 && v64 == v61 && v66 == v62) {
          goto LABEL_41;
        }
      }
LABEL_24:
      v36 += 7;
      if (v35 == ++v32) {
        goto LABEL_42;
      }
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  uint64_t v11 = v37;
  if ((v67 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_33:
  char v43 = v63;
  if (v66 != v62) {
    char v43 = 0;
  }
  if ((v43 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_41:
  unint64_t v3 = a2;
  unint64_t v4 = v56;
  unint64_t v2 = v57;
LABEL_19:
  if (v32 < *(void *)(v58 + 16))
  {
    uint64_t v33 = *(void *)(v58 + 16 * v32 + 40);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v34 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v33, (uint64_t *)&v79);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    outlined release of Graph((uint64_t)&v68);
    goto LABEL_50;
  }
LABEL_72:
  __break(1u);
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay11ShaderGraph5InputVGSayAH7NodeDefV6IOSpecVGG_AH0H4SpecVs5NeverOTg504_s11f6Graph5h4VAA7ij2V6k6VAA0C4l17VIgggo_AC_AGtAIs5M11OIegnrzr_TRAjoSIgggo_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *, _OWORD *))
{
  unint64_t v41 = *(void *)(a1 + 16);
  if (*(void *)(a2 + 16) >= v41) {
    int64_t v5 = *(void *)(a1 + 16);
  }
  else {
    int64_t v5 = *(void *)(a2 + 16);
  }
  uint64_t v57 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
  uint64_t v6 = v57;
  uint64_t v42 = a2;
  int64_t v39 = v5;
  if (v5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v7 = (uint64_t *)(a1 + 40);
    Swift::UInt v8 = (unsigned char *)(a2 + 88);
    while (1)
    {
      int64_t v55 = v5;
      uint64_t v72 = v6;
      uint64_t v9 = *v7;
      uint64_t v10 = v7[2];
      uint64_t v45 = v7[1];
      uint64_t v46 = *(v7 - 1);
      uint64_t v44 = v7[3];
      char v52 = *v8;
      uint64_t v11 = *((void *)v8 - 1);
      uint64_t v48 = v7[5];
      uint64_t v50 = *((void *)v8 - 2);
      uint64_t v12 = *((void *)v8 - 3);
      uint64_t v47 = *((void *)v8 - 4);
      uint64_t v13 = *((void *)v8 - 6);
      uint64_t v14 = *((void *)v8 - 5);
      uint64_t v15 = *((void *)v8 - 7);
      LOBYTE(v62[0]) = *((unsigned char *)v7 + 32);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
      if (!v9) {
        break;
      }
      v64[0] = v46;
      v64[1] = v9;
      v64[2] = v45;
      v64[3] = v10;
      v64[4] = v44;
      char v65 = v62[0];
      char v68 = 0;
      __int16 v67 = 0;
      int v66 = 0;
      uint64_t v69 = v48;
      v70[0] = v15;
      v70[1] = v13;
      v70[2] = v14;
      v70[3] = v47;
      v70[4] = v12;
      v70[5] = v50;
      v70[6] = v11;
      char v71 = v52;
      uint64_t v17 = a3(v64, v70);
      uint64_t v51 = v18;
      uint64_t v53 = v17;
      uint64_t v49 = v19;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      uint64_t v6 = v72;
      uint64_t v58 = v72;
      unint64_t v21 = *(void *)(v72 + 16);
      unint64_t v20 = *(void *)(v72 + 24);
      if (v21 >= v20 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        uint64_t v6 = v58;
      }
      *(void *)(v6 + 16) = v21 + 1;
      uint64_t v22 = (void *)(v6 + 24 * v21);
      v22[4] = v53;
      v22[5] = v51;
      v22[6] = v49;
      v7 += 7;
      v8 += 64;
      int64_t v5 = v55 - 1;
      if (v55 == 1) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
LABEL_12:
    if (v41 <= v40)
    {
LABEL_19:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    unint64_t v23 = v40 - v39;
    unint64_t v24 = v41 - v39;
    uint64_t v25 = v42 + (v39 << 6) + 40;
    uint64_t v26 = a1 + 56 * v39 + 40;
    while (v24)
    {
      if (v23)
      {
        uint64_t v27 = *(void *)(v26 + 40);
        char v28 = *(unsigned char *)(v26 + 32);
        uint64_t v30 = *(void *)(v26 + 16);
        uint64_t v29 = *(void *)(v26 + 24);
        uint64_t v32 = *(void *)v26;
        uint64_t v31 = *(void *)(v26 + 8);
        v59[0] = *(void *)(v26 - 8);
        v59[1] = v32;
        v59[2] = v31;
        _OWORD v59[3] = v30;
        v59[4] = v29;
        char v60 = v28;
        uint64_t v61 = v27;
        long long v33 = *(_OWORD *)(v25 + 8);
        v62[0] = *(_OWORD *)(v25 - 8);
        v62[1] = v33;
        v63[0] = *(_OWORD *)(v25 + 24);
        *(_OWORD *)((char *)v63 + 9) = *(_OWORD *)(v25 + 33);
        swift_retain();
        swift_bridgeObjectRetain();
        outlined retain of NodeDef.IOSpec((uint64_t)v62);
        uint64_t v72 = a3(v59, v62);
        uint64_t v54 = v35;
        uint64_t v56 = v34;
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v36 = *(void *)(v6 + 16);
        unint64_t v37 = *(void *)(v6 + 24);
        if (v36 >= v37 >> 1) {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v36 + 1, 1);
        }
        *(void *)(v6 + 16) = v36 + 1;
        uint64_t v38 = (void *)(v6 + 24 * v36);
        v38[4] = v72;
        v38[5] = v56;
        v38[6] = v54;
        --v23;
        v25 += 64;
        v26 += 56;
        if (--v24) {
          continue;
        }
      }
      goto LABEL_19;
    }
    __break(1u);
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<Input>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v35 = v1;
    uint64_t v36 = a1 + 32;
    while (1)
    {
      uint64_t v6 = v36 + 56 * v4;
      Swift::UInt v7 = *(void *)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      uint64_t v10 = *(void *)(v6 + 16);
      uint64_t v9 = *(void *)(v6 + 24);
      Swift::UInt v38 = *(void *)(v6 + 32);
      int v11 = *(unsigned __int8 *)(v6 + 40);
      Swift::UInt v40 = *(void *)(v6 + 48);
      Hasher.init(_seed:)();
      Swift::UInt v46 = v7;
      Hasher._combine(_:)(v7);
      uint64_t v12 = *(void (**)(char *))(*(void *)v8 + 120);
      swift_retain_n();
      swift_bridgeObjectRetain();
      v12(v47);
      uint64_t v44 = v8;
      swift_release();
      swift_bridgeObjectRetain();
      uint64_t v41 = v10;
      String.hash(into:)();
      uint64_t v42 = v9;
      swift_bridgeObjectRelease();
      char v39 = v11;
      if (v11 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v38);
      }
      Hasher._combine(_:)(v40);
      Swift::Int result = Hasher._finalize()();
      uint64_t v14 = ~(-1 << *(unsigned char *)(v3 + 32));
      unint64_t v15 = result & v14;
      unint64_t v16 = (result & (unint64_t)v14) >> 6;
      uint64_t v17 = *(void *)(v5 + 8 * v16);
      uint64_t v18 = 1 << (result & v14);
      if ((v18 & v17) != 0) {
        break;
      }
      Swift::UInt v30 = v38;
      uint64_t v29 = v35;
LABEL_32:
      *(void *)(v5 + 8 * v16) = v18 | v17;
      uint64_t v31 = *(void *)(v3 + 48) + 56 * v15;
      *(void *)uint64_t v31 = v46;
      *(void *)(v31 + 8) = v44;
      *(void *)(v31 + 16) = v41;
      *(void *)(v31 + 24) = v42;
      *(void *)(v31 + 32) = v30;
      *(unsigned char *)(v31 + 40) = v39;
      *(void *)(v31 + 48) = v40;
      uint64_t v32 = *(void *)(v3 + 16);
      BOOL v33 = __OFADD__(v32, 1);
      uint64_t v34 = v32 + 1;
      if (v33)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v34;
LABEL_34:
      if (++v4 == v29) {
        return v3;
      }
    }
    uint64_t v37 = v4;
    while (1)
    {
      uint64_t v19 = *(void *)(v3 + 48) + 56 * v15;
      if (*(void *)v19 == v46)
      {
        uint64_t v20 = v5;
        uint64_t v21 = *(void *)(v19 + 16);
        uint64_t v22 = *(void *)(v19 + 24);
        uint64_t v43 = *(void *)(v19 + 32);
        char v23 = *(unsigned char *)(v19 + 40);
        uint64_t v45 = *(void *)(v19 + 48);
        unint64_t v24 = *(uint64_t (**)(uint64_t))(**(void **)(v19 + 8) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if (v24(v44))
        {
          if (v21 == v41 && v22 == v42)
          {
            swift_bridgeObjectRelease();
            Swift::Int result = swift_release();
            uint64_t v5 = v20;
            if ((v23 & 1) == 0)
            {
LABEL_23:
              if ((v39 & 1) == 0 && v43 == v38 && v45 == v40)
              {
LABEL_29:
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v29 = v35;
                uint64_t v4 = v37;
                goto LABEL_34;
              }
              goto LABEL_9;
            }
            goto LABEL_18;
          }
          char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          Swift::Int result = swift_release();
          uint64_t v5 = v20;
          if (v26)
          {
            if ((v23 & 1) == 0) {
              goto LABEL_23;
            }
LABEL_18:
            char v27 = v39;
            if (v45 != v40) {
              char v27 = 0;
            }
            if (v27) {
              goto LABEL_29;
            }
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          Swift::Int result = swift_release();
          uint64_t v5 = v20;
        }
      }
LABEL_9:
      unint64_t v15 = (v15 + 1) & v14;
      unint64_t v16 = v15 >> 6;
      uint64_t v17 = *(void *)(v5 + 8 * (v15 >> 6));
      uint64_t v18 = 1 << v15;
      if ((v17 & (1 << v15)) == 0)
      {
        uint64_t v29 = v35;
        uint64_t v4 = v37;
        Swift::UInt v30 = v38;
        goto LABEL_32;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  uint64_t v18;
  void *v19;
  void *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      Swift::UInt v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      int v11 = result & ~v10;
      uint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        unint64_t v15 = *(void *)(v3 + 48);
        unint64_t v16 = (void *)(v15 + 16 * v11);
        uint64_t v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          int v11 = (v11 + 1) & v18;
          uint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *uint64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      char v23 = __OFADD__(v22, 1);
      unint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<SGDataType>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt v7 = *(void *)(v6 + 8 * v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      uint64_t v10 = result & ~v9;
      int v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(void *)(v14 + 8 * v10) == v7) {
          goto LABEL_3;
        }
        unint64_t v15 = ~v9;
        while (1)
        {
          uint64_t v10 = (v10 + 1) & v15;
          int v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(void *)(v14 + 8 * v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(void *)(v14 + 8 * v10) = v7;
      unint64_t v16 = *(void *)(v3 + 16);
      uint64_t v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t specialized ContiguousArray.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v2 = v4;
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1);
    uint64_t v4 = *v2;
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = *(void *)(v4 + 16);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    unint64_t v16 = (const void *)(v4 + 32 + 56 * a2);
    if (a1 != a2 || v4 + 32 + 56 * a1 >= (unint64_t)v16 + 56 * v15) {
      uint64_t result = (uint64_t)memmove((void *)(v4 + 32 + 56 * a1), v16, 56 * v15);
    }
    uint64_t v17 = *(void *)(v4 + 16);
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      *(void *)(v4 + 16) = v18;
LABEL_20:
      uint64_t *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v2 = v4;
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1);
    uint64_t v4 = *v2;
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = *(void *)(v4 + 16);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    unint64_t v16 = (const void *)(v4 + 32 + 16 * a2);
    if (a1 != a2 || v4 + 32 + 16 * a1 >= (unint64_t)v16 + 16 * v15) {
      uint64_t result = (uint64_t)memmove((void *)(v4 + 32 + 16 * a1), v16, 16 * v15);
    }
    uint64_t v17 = *(void *)(v4 + 16);
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      *(void *)(v4 + 16) = v18;
LABEL_20:
      uint64_t *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Graph.splitSharedNodes(nodeDefStore:surfaceShader:geometryModifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t result = outlined init with take of MetalFunctionNode?(a2, (uint64_t)&v31, &demangling cache variable for type metadata for ShaderGraphNode?);
  if (*((void *)&v31 + 1))
  {
    long long v33 = v31;
    v34[0] = v32[0];
    *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)((char *)v32 + 9);
    long long v7 = v3[8];
    long long v8 = v3[9];
    long long v9 = v3[6];
    v37[7] = v3[7];
    char v37[8] = v7;
    v38[0] = v8;
    *(_OWORD *)((char *)v38 + 9) = *(_OWORD *)((char *)v3 + 153);
    long long v10 = v3[5];
    v37[4] = v3[4];
    Swift::Int v37[5] = v10;
    v37[6] = v9;
    long long v11 = v3[1];
    v37[0] = *v3;
    v37[1] = v11;
    long long v12 = v3[3];
    v37[2] = v3[2];
    v37[3] = v12;
    outlined release of ShaderGraphNode?(a2, (void (*)(void, void, void, void, void, void))outlined copy of ShaderGraphNode?);
    outlined retain of Graph((uint64_t)v37);
    Graph.connectedBreathFirstUpstreamSubgraph(rootedAt:)(a1, (uint64_t)&v27);
    Swift::Int v39 = v27;
    outlined release of Graph((uint64_t)v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    outlined retain of Graph((uint64_t)v37);
    Graph.connectedBreathFirstUpstreamSubgraph(rootedAt:)((uint64_t)&v33, (uint64_t)&v27);
    uint64_t v13 = v27;
    outlined release of Graph((uint64_t)v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_AH2IDVs5NeverOTg504_s11D159Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFAK2IDVAKcfu_33_300d98c1e43c0bc1dedcebf2cdbfb115AkNTf3nnnpk_nTf1cn_nTm(v13);
    swift_bridgeObjectRelease();
    uint64_t v15 = specialized Set.init<A>(_:)(v14);
    swift_bridgeObjectRelease();
    uint64_t v26 = v15;
    Swift::Int v16 = v39;
    uint64_t v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_AH2IDVs5NeverOTg504_s11D159Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFAK2IDVAKcfu_33_300d98c1e43c0bc1dedcebf2cdbfb115AkNTf3nnnpk_nTf1cn_nTm(v39);
    uint64_t v18 = specialized Set.init<A>(_:)(v17);
    swift_bridgeObjectRelease();
    uint64_t v25 = v18;
    Swift::Int v19 = specialized _ArrayProtocol.filter(_:)(v16, &v26);
    swift_bridgeObjectRelease();
    char v23 = (void *)MEMORY[0x263F8EE78];
    unint64_t v24 = (void *)MEMORY[0x263F8EE78];
    uint64_t v20 = *(void *)(v19 + 16);
    if (v20)
    {
      Swift::Int v21 = v19 + 40;
      do
      {
        char v22 = *(unsigned char *)(v21 + 32);
        uint64_t v27 = *(void *)(v21 - 8);
        long long v28 = *(_OWORD *)v21;
        long long v29 = *(_OWORD *)(v21 + 16);
        LOBYTE(v30) = v22;
        closure #2 in Graph.splitSharedNodes(nodeDefStore:surfaceShader:geometryModifier:)((unint64_t *)&v27, (uint64_t)v3, &v25, &v26, &v24, &v23);
        v21 += 48;
        --v20;
      }
      while (v20);
    }
    outlined init with take of NodePersonality(&v33, &v35);
    outlined release of NodePersonality(&v35);
    uint64_t v36 = *((void *)&v33 + 1);
    outlined release of [Input]((uint64_t)&v36);
    uint64_t v27 = *(void *)&v34[0];
    outlined release of [Input]((uint64_t)&v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *specialized closure #1 in Graph.mapStringInputs(nodeDefStore:)(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >> 61 == 5)
  {
    uint64_t v4 = result[1];
    uint64_t v5 = *(void *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    uint64_t v6 = *(void **)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
    swift_bridgeObjectRetain();
    v7._char countAndFlagsBits = 0x736E6172745F444ELL;
    v7._uint64_t object = (void *)0xEC0000006D726F66;
    if (!String.hasPrefix(_:)(v7)) {
      return (uint64_t *)swift_bridgeObjectRelease();
    }
    if (*(void *)(a2 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5, (uint64_t)v6);
      if (v9)
      {
        long long v10 = (long long *)(*(void *)(a2 + 56) + 144 * v8);
        long long v36 = *v10;
        long long v11 = v10[4];
        long long v13 = v10[1];
        long long v12 = v10[2];
        long long v39 = v10[3];
        long long v40 = v11;
        long long v37 = v13;
        long long v38 = v12;
        long long v14 = v10[8];
        long long v16 = v10[5];
        long long v15 = v10[6];
        long long v43 = v10[7];
        long long v44 = v14;
        long long v41 = v16;
        long long v42 = v15;
        outlined retain of NodeDef((uint64_t)&v36);
        swift_bridgeObjectRelease_n();
        uint64_t v17 = v44;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v18 = outlined release of NodeDef((uint64_t)&v36);
        MEMORY[0x270FA5388](v18);
        _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay11ShaderGraph5InputVGSayAH7NodeDefV6IOSpecVGG_AH0H4SpecVs5NeverOTg504_s11f6Graph5h4VAA7ij2V6k6VAA0C4l17VIgggo_AC_AGtAIs5M11OIegnrzr_TRAjoSIgggo_Tf1cn_nTf4ng_n(v4, v17, (uint64_t (*)(void *, _OWORD *))partial apply for closure #1 in closure #1 in Graph.mapStringInputs(nodeDefStore:));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (uint64_t *)swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    v35[0] = v5;
    v35[1] = v6;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi18_((uint64_t)v35);
    *(void *)&long long v36 = 0;
    *((void *)&v36 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    *(void *)&long long v36 = 0xD000000000000020;
    *((void *)&v36 + 1) = 0x800000025C4255E0;
    v19._char countAndFlagsBits = v5;
    v19._uint64_t object = v6;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._char countAndFlagsBits = 0x6F6E20726F662027;
    v20._uint64_t object = (void *)0xEC00000027206564;
    String.append(_:)(v20);
    v21._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._char countAndFlagsBits = 1701080942;
    v22._uint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._char countAndFlagsBits = 39;
    v23._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    long long v24 = v36;
    outlined init with take of UserGraphError.ErrorType((uint64_t)v35, (uint64_t)&v36);
    long long v48 = v24;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *uint64_t v25 = v36;
    long long v26 = v40;
    long long v28 = v37;
    long long v27 = v38;
    v25[3] = v39;
    v25[4] = v26;
    v25[1] = v28;
    void v25[2] = v27;
    long long v29 = v44;
    long long v31 = v41;
    long long v30 = v42;
    v25[7] = v43;
    v25[8] = v29;
    void v25[5] = v31;
    v25[6] = v30;
    long long v32 = v48;
    long long v34 = v45;
    long long v33 = v46;
    v25[11] = v47;
    _OWORD v25[12] = v32;
    v25[9] = v34;
    v25[10] = v33;
    return (uint64_t *)swift_willThrow();
  }
  return result;
}

uint64_t specialized Graph.mapStringInputs(nodeDefStore:)(uint64_t a1)
{
  uint64_t v16 = a1;
  uint64_t result = *(void *)(v1 + 64);
  int64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v5 = result + 32;
    swift_bridgeObjectRetain_n();
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = v5 + 48 * v6;
      uint64_t v8 = *(void *)(v7 + 24);
      if (v8 == -7)
      {
        if ((uint64_t)++v6 >= v4) {
          return swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        unint64_t v10 = *(void *)v7;
        uint64_t v9 = *(void *)(v7 + 8);
        uint64_t v11 = *(void *)(v7 + 16);
        char v12 = *(unsigned char *)(v7 + 40);
        uint64_t v13 = *(void *)(v7 + 32);
        v14[0] = v10;
        v14[1] = v9;
        _OWORD v14[2] = v11;
        void v14[3] = v8;
        v14[4] = v13;
        char v15 = v12;
        outlined copy of NodePersonality(v10);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized closure #1 in Graph.mapStringInputs(nodeDefStore:)(v14, v16);
        if (v2)
        {
          outlined consume of NodePersonality(v10);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        ++v6;
        outlined consume of NodePersonality(v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((uint64_t)v6 >= v4) {
          return swift_bridgeObjectRelease_n();
        }
      }
      if (v6 >= v4)
      {
        __break(1u);
        return swift_bridgeObjectRelease_n();
      }
    }
  }
  return result;
}

uint64_t specialized Graph.insertGeomPropGetter(_:outputType:nodeDefStore:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t result = GeomPropDef.GeomProp.paramGetterNodeDefName(type:)(a2, *(void *)(a1 + 24), *(void **)(a1 + 32), *(unsigned char *)(a1 + 40));
  if (v5) {
    return result;
  }
  uint64_t v11 = result;
  uint64_t v12 = v10;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  *(void *)&v74[0] = 0xD000000000000011;
  *((void *)&v74[0] + 1) = 0x800000025C424EC0;
  uint64_t v13 = *(void *)a1;
  long long v14 = *(void **)(a1 + 8);
  uint64_t v109 = a1;
  swift_bridgeObjectRetain();
  v15._char countAndFlagsBits = v13;
  v15._uint64_t object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._char countAndFlagsBits = 39;
  v16._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  if (!*(void *)(a3 + 16))
  {
LABEL_14:
    v73[0] = v11;
    v73[1] = v12;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi18_((uint64_t)v73);
    outlined init with take of UserGraphError.ErrorType((uint64_t)v73, (uint64_t)v74);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v75 = 0uLL;
    swift_allocError();
    *long long v36 = v74[0];
    long long v37 = v74[4];
    long long v38 = v74[2];
    long long v39 = v74[1];
    _OWORD v36[3] = v74[3];
    v36[4] = v37;
    v36[1] = v39;
    v36[2] = v38;
    long long v40 = v74[8];
    long long v41 = v74[6];
    long long v42 = v74[5];
    v36[7] = v74[7];
    v36[8] = v40;
    v36[5] = v42;
    v36[6] = v41;
    long long v43 = v75;
    long long v44 = v74[10];
    long long v45 = v74[9];
    v36[11] = v74[11];
    v36[12] = v43;
    v36[9] = v45;
    v36[10] = v44;
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v69 = a4;
  Swift::String v19 = (_OWORD *)(*(void *)(a3 + 56) + 144 * v17);
  v105[0] = *v19;
  long long v20 = v19[4];
  long long v22 = v19[1];
  long long v21 = v19[2];
  v105[3] = v19[3];
  v105[4] = v20;
  v105[1] = v22;
  void v105[2] = v21;
  long long v23 = v19[8];
  long long v25 = v19[5];
  long long v24 = v19[6];
  v105[7] = v19[7];
  v105[8] = v23;
  v105[5] = v25;
  v105[6] = v24;
  outlined retain of NodeDef((uint64_t)v105);
  swift_bridgeObjectRelease();
  uint64_t v68 = v4;
  specialized NodeDefStore.createNode(in:from:label:)(v4, v105, &v76);
  outlined release of NodeDef((uint64_t)v105);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v94 = *((void *)&v76 + 1);
  uint64_t v26 = *(void *)(*((void *)&v76 + 1) + 16);
  if (!v26) {
    goto LABEL_35;
  }
  uint64_t v71 = *((void *)&v76 + 1);
  long long v27 = (void *)(*((void *)&v76 + 1) + 80);
  while (1)
  {
    uint64_t v28 = *(v27 - 6);
    uint64_t v29 = *(v27 - 5);
    uint64_t v30 = *(v27 - 4);
    unint64_t v31 = *(v27 - 3);
    uint64_t v32 = *(v27 - 2);
    char v33 = *((unsigned char *)v27 - 8);
    uint64_t v34 = *v27;
    if (v30 == 0x7865646E69 && v31 == 0xE500000000000000) {
      break;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_16;
    }
    v27 += 7;
    if (!--v26)
    {
      uint64_t v98 = v28;
      uint64_t v99 = v29;
      uint64_t v100 = v30;
      unint64_t v101 = v31;
      uint64_t v102 = v32;
      char v103 = v33;
      uint64_t v104 = v34;
      goto LABEL_20;
    }
  }
  unint64_t v31 = 0xE500000000000000;
LABEL_16:
  uint64_t v98 = v28;
  uint64_t v99 = v29;
  uint64_t v100 = v30;
  unint64_t v101 = v31;
  uint64_t v102 = v32;
  char v103 = v33;
  uint64_t v104 = v34;
  outlined init with take of MetalFunctionNode?(v109 + 48, (uint64_t)v93, &demangling cache variable for type metadata for Int?);
  uint64_t result = outlined init with take of MetalFunctionNode?((uint64_t)v93, (uint64_t)&v106, &demangling cache variable for type metadata for Int?);
  if ((v107 & 1) == 0)
  {
    if (v106 < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v106 > 0x7FFFFFFF)
    {
LABEL_39:
      __break(1u);
      JUMPOUT(0x25C34D690);
    }
    uint64_t v46 = v106;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    uint64_t v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_25C418EE0;
    *(void *)(v47 + 32) = 7632239;
    *(void *)(v47 + 40) = 0xE300000000000000;
    *(void *)(v47 + 48) = v29;
    unint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = v46;
    *(_OWORD *)(v48 + 24) = 0u;
    *(_OWORD *)(v48 + 40) = 0u;
    *(_OWORD *)(v48 + 56) = 0u;
    *(void *)(v48 + 72) = 0;
    *(unsigned char *)(v48 + 80) = 2;
    *(void *)(v48 + 88) = v29;
    unint64_t v49 = *(void *)(v68 + 40);
    swift_retain_n();
    swift_bridgeObjectRetain();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v49, MEMORY[0x263F8EE78], v47, v48, v68 + 64, v68, v78);
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    ShaderGraphNode.out.getter((uint64_t)v79);
    Graph.connect(_:to:)((uint64_t)v79, (unint64_t)&v98);
    swift_release();
    long long v92 = v80;
    outlined release of String((uint64_t)&v92);
    outlined init with take of NodePersonality(v78, &v91);
    outlined release of NodePersonality(&v91);
    unint64_t v90 = v78[1];
    outlined release of [Input]((uint64_t)&v90);
    unint64_t v89 = v78[2];
    outlined release of [Input]((uint64_t)&v89);
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
  }
LABEL_20:
  uint64_t v50 = v71;
  uint64_t v72 = *(void *)(v71 + 16);
  if (!v72) {
    goto LABEL_35;
  }
  uint64_t v51 = 0;
  char v52 = (void *)(v50 + 80);
  while (1)
  {
    uint64_t v53 = v51 + 1;
    if (__OFADD__(v51, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v55 = *(v52 - 6);
    uint64_t v54 = *(v52 - 5);
    uint64_t v57 = *(v52 - 4);
    unint64_t v56 = *(v52 - 3);
    uint64_t v58 = *(v52 - 2);
    char v59 = *((unsigned char *)v52 - 8);
    uint64_t v70 = *v52;
    if (v57 == 0x6563617073 && v56 == 0xE500000000000000) {
      break;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_31;
    }
    v52 += 7;
    ++v51;
    if (v53 == v72) {
      goto LABEL_35;
    }
  }
  unint64_t v56 = 0xE500000000000000;
  uint64_t v57 = 0x6563617073;
LABEL_31:
  v95[0] = v55;
  uint64_t v61 = v54;
  v95[1] = v54;
  v95[2] = v57;
  unint64_t v95[3] = v56;
  v95[4] = v58;
  char v96 = v59;
  uint64_t v97 = v70;
  outlined init with take of MetalFunctionNode?(v109 + 41, (uint64_t)&v88, (uint64_t *)&demangling cache variable for type metadata for GeomPropDef.Space?);
  uint64_t result = outlined init with take of MetalFunctionNode?((uint64_t)&v88, (uint64_t)v108, (uint64_t *)&demangling cache variable for type metadata for GeomPropDef.Space?);
  unint64_t v62 = 0xE500000000000000;
  uint64_t v63 = 0x6C65646F6DLL;
  switch(v108[0])
  {
    case 1:
      unint64_t v62 = 0xE600000000000000;
      uint64_t v63 = 0x7463656A626FLL;
      goto LABEL_34;
    case 2:
      uint64_t v63 = 0x646C726F77;
      goto LABEL_34;
    case 3:
      break;
    default:
LABEL_34:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
      uint64_t v64 = swift_allocObject();
      *(_OWORD *)(v64 + 16) = xmmword_25C418EE0;
      *(void *)(v64 + 32) = 7632239;
      *(void *)(v64 + 40) = 0xE300000000000000;
      *(void *)(v64 + 48) = v61;
      unint64_t v65 = swift_allocObject();
      *(void *)(v65 + 16) = v63;
      *(void *)(v65 + 24) = v62;
      *(_OWORD *)(v65 + 32) = 0u;
      *(_OWORD *)(v65 + 48) = 0u;
      *(_OWORD *)(v65 + 64) = 0u;
      *(unsigned char *)(v65 + 80) = 6;
      *(void *)(v65 + 88) = v61;
      unint64_t v66 = *(void *)(v68 + 40);
      swift_retain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v66, MEMORY[0x263F8EE78], v64, v65, v68 + 64, v68, v81);
      swift_release();
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      swift_bridgeObjectRelease();
      ShaderGraphNode.out.getter((uint64_t)v82);
      Graph.connect(_:to:)((uint64_t)v82, (unint64_t)v95);
      swift_release();
      long long v87 = v83;
      outlined release of String((uint64_t)&v87);
      outlined init with take of NodePersonality(v81, &v86);
      outlined release of NodePersonality(&v86);
      unint64_t v85 = v81[1];
      outlined release of [Input]((uint64_t)&v85);
      unint64_t v84 = v81[2];
      outlined release of [Input]((uint64_t)&v84);
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      break;
  }
LABEL_35:
  long long v67 = v77[0];
  *uint64_t v69 = v76;
  v69[1] = v67;
  *(_OWORD *)((char *)v69 + 25) = *(_OWORD *)((char *)v77 + 9);
  return result;
}

uint64_t specialized closure #1 in closure #1 in Graph.insertMaterialXDefaultValues(nodeDefStore:)(long long *a1, _OWORD *a2, unint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  long long v6 = a2[7];
  long long v113 = a2[6];
  long long v114 = v6;
  long long v115 = a2[8];
  long long v7 = a2[3];
  long long v109 = a2[2];
  long long v110 = v7;
  long long v8 = a2[5];
  long long v111 = a2[4];
  long long v112 = v8;
  long long v9 = a2[1];
  long long v107 = *a2;
  long long v108 = v9;
  long long v65 = *(_OWORD *)(a3 + 8);
  uint64_t v63 = *(void *)(a3 + 24);
  uint64_t v64 = *(void *)a3;
  uint64_t v62 = *(void *)(a3 + 32);
  char v61 = *(unsigned char *)(a3 + 40);
  long long v10 = a1[1];
  long long v101 = *a1;
  long long v102 = v10;
  long long v103 = a1[2];
  uint64_t v66 = *((void *)a1 + 6);
  unint64_t v67 = a3;
  uint64_t v104 = v66;
  uint64_t v11 = *((void *)a2 + 16);
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
LABEL_9:
    long long v78 = v113;
    long long v79 = v114;
    long long v80 = v115;
    long long v74 = v109;
    long long v75 = v110;
    long long v76 = v111;
    long long v77 = v112;
    *(_OWORD *)long long v73 = v107;
    *(_OWORD *)&v73[16] = v108;
    long long v81 = v102;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi8_((uint64_t)v73);
    outlined init with take of UserGraphError.ErrorType((uint64_t)v73, (uint64_t)&v82);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v94 = 0uLL;
    swift_allocError();
    _OWORD *v19 = v82;
    long long v20 = v86;
    long long v22 = v83;
    long long v21 = v84;
    v19[3] = v85;
    v19[4] = v20;
    v19[1] = v22;
    v19[2] = v21;
    long long v23 = v90;
    long long v25 = v87;
    long long v24 = v88;
    v19[7] = v89;
    v19[8] = v23;
    v19[5] = v25;
    v19[6] = v24;
    long long v26 = v94;
    long long v28 = v91;
    long long v27 = v92;
    v19[11] = v93;
    v19[12] = v26;
    v19[9] = v28;
    v19[10] = v27;
    outlined retain of NodeDef((uint64_t)a2);
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  uint64_t v57 = *((void *)a1 + 1);
  uint64_t v58 = *(void *)a1;
  uint64_t v55 = *((void *)a1 + 3);
  uint64_t v56 = *((void *)a1 + 2);
  uint64_t v54 = *((void *)a1 + 4);
  uint64_t v13 = (uint64_t *)(v11 + 80);
  char v53 = *((unsigned char *)a1 + 40);
  while (1)
  {
    uint64_t result = *(v13 - 6);
    uint64_t v72 = *(v13 - 3);
    uint64_t v15 = *(v13 - 2);
    uint64_t v16 = *(v13 - 1);
    uint64_t v17 = *v13;
    if (result == (void)v102 && *(v13 - 5) == *((void *)&v102 + 1)) {
      break;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      break;
    }
    v13 += 8;
    if (!--v12) {
      goto LABEL_9;
    }
  }
  if (!(v15 | v17)) {
    return result;
  }
  uint64_t v29 = v15;
  type metadata accessor for MaterialXDataType();
  uint64_t v30 = swift_dynamicCastClass();
  if (!v30)
  {
    outlined init with take of NodePersonality((void *)v67, &v116);
    uint64_t v38 = *(void *)(v67 + 16);
    uint64_t v100 = *(void *)(v67 + 8);
    uint64_t v99 = v38;
    *(void *)long long v73 = v64;
    *(_OWORD *)&v73[8] = v65;
    *(void *)&v73[24] = v63;
    *(void *)&long long v74 = v62;
    BYTE8(v74) = v61 & 1;
    *(void *)&long long v75 = v58;
    *((void *)&v75 + 1) = v57;
    *(void *)&long long v76 = v56;
    *((void *)&v76 + 1) = v55;
    *(void *)&long long v77 = v54;
    BYTE8(v77) = v53;
    *(void *)&long long v78 = v66;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi32_((uint64_t)v73);
    outlined init with take of UserGraphError.ErrorType((uint64_t)v73, (uint64_t)&v82);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v94 = 0uLL;
    swift_allocError();
    *long long v39 = v82;
    long long v40 = v86;
    long long v42 = v83;
    long long v41 = v84;
    v39[3] = v85;
    v39[4] = v40;
    v39[1] = v42;
    v39[2] = v41;
    long long v43 = v90;
    long long v45 = v87;
    long long v44 = v88;
    v39[7] = v89;
    v39[8] = v43;
    v39[5] = v45;
    v39[6] = v44;
    long long v46 = v94;
    long long v48 = v91;
    long long v47 = v92;
    v39[11] = v93;
    v39[12] = v46;
    v39[9] = v48;
    v39[10] = v47;
    swift_bridgeObjectRetain();
    swift_retain();
    outlined retain of NodePersonality(&v116);
    outlined retain of [Input]((uint64_t)&v100);
    outlined retain of [Input]((uint64_t)&v99);
    return swift_willThrow();
  }
  uint64_t v71 = v30;
  long long v31 = a4[9];
  v105[8] = a4[8];
  v106[0] = v31;
  *(_OWORD *)((char *)v106 + 9) = *(_OWORD *)((char *)a4 + 153);
  long long v32 = a4[5];
  v105[4] = a4[4];
  v105[5] = v32;
  long long v33 = a4[7];
  v105[6] = a4[6];
  v105[7] = v33;
  long long v34 = a4[1];
  v105[0] = *a4;
  v105[1] = v34;
  long long v35 = a4[3];
  void v105[2] = a4[2];
  v105[3] = v35;
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined retain of Graph((uint64_t)v105);
  Graph.edge(to:)((uint64_t)&v101, v95);
  outlined init with take of MetalFunctionNode?((uint64_t)v95, (uint64_t)v96, &demangling cache variable for type metadata for Edge?);
  if (!v96[1])
  {
    outlined release of Graph((uint64_t)v105);
    uint64_t v37 = v17;
    if (!v29) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }
  unint64_t v36 = v96[0];
  long long v98 = v97;
  swift_retain();
  outlined retain of String((uint64_t)&v98);
  outlined release of Edge?(v95);
  outlined release of Graph((uint64_t)v105);
  if (v36 == -7)
  {
    swift_release();
    outlined release of String((uint64_t)&v98);
    uint64_t v37 = v17;
    if (!v29)
    {
LABEL_16:
      if (!v17)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      specialized Graph.insertMaterialXDefaultGeomProp(_:ofType:toFeedInput:fromNodeDefStore:)(v16, v37, v71, (unint64_t)&v101, a5, a6);
      if (v69) {
        goto LABEL_22;
      }
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    Graph.insertMaterialXDefaultValue(_:ofType:toFeedInput:)(v72, v29, v71, (unint64_t)&v101);
    if (v69)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_39:
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  if ((v36 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v49 = *((void *)a4 + 8);
    if (v36 < *(void *)(v49 + 16))
    {
      uint64_t v50 = v49 + 48 * v36;
      uint64_t v64 = *(void *)(v50 + 56);
      unint64_t v67 = *(void *)(v50 + 32);
      outlined copy of NodePersonality(v67);
      uint64_t v51 = one-time initialization token for string;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v51 == -1) {
        goto LABEL_26;
      }
      goto LABEL_44;
    }
  }
  __break(1u);
LABEL_44:
  swift_once();
LABEL_26:
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0 || *(void *)(v71 + 24))
  {
    if (!(v67 >> 61)
      && *(unsigned char *)(v67 + 80) == 6
      && (!*(void *)(v67 + 16) && *(void *)(v67 + 24) == 0xE000000000000000
       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      specialized Graph.remove(_:)(v64);
      outlined consume of NodePersonality(v67);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of String((uint64_t)&v98);
      uint64_t v29 = v15;
      uint64_t v37 = v17;
      if (!v29) {
        goto LABEL_16;
      }
      goto LABEL_21;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined release of String((uint64_t)&v98);
    unint64_t v52 = v67;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of String((uint64_t)&v98);
    unint64_t v52 = v67;
  }
  outlined consume of NodePersonality(v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized Graph.insertMaterialXDefaultValues(nodeDefStore:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t result = *(void *)(v5 + 64);
  unint64_t v8 = *(void *)(result + 16);
  if (!v8) {
    return result;
  }
  uint64_t v10 = result + 32;
  swift_bridgeObjectRetain_n();
  unint64_t v11 = 0;
  unint64_t v75 = v8;
  uint64_t v53 = v10;
  while (1)
  {
    uint64_t v12 = v10 + 48 * v11;
    if (*(void *)(v12 + 24) == -7) {
      goto LABEL_13;
    }
    long long v13 = *(_OWORD *)v12;
    long long v14 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)&v70[9] = *(_OWORD *)(v12 + 25);
    long long v69 = v13;
    *(_OWORD *)uint64_t v70 = v14;
    outlined init with take of NodePersonality(&v69, &v71);
    outlined init with take of NodePersonality(&v71, v74);
    unint64_t v15 = v74[0];
    if (v74[0] >> 61 != 5) {
      goto LABEL_13;
    }
    uint64_t v72 = *((void *)&v69 + 1);
    uint64_t v73 = *(void *)v70;
    v74[0] &= 0x1FFFFFFFFFFFFFFFuLL;
    uint64_t v17 = *(void *)((v15 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    uint64_t v16 = *(void **)((v15 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
    uint64_t v18 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    if (!v18)
    {
      outlined retain of [Input]((uint64_t)&v73);
      outlined retain of NodePersonality(&v71);
      outlined retain of [Input]((uint64_t)&v72);
      goto LABEL_22;
    }
    swift_bridgeObjectRetain();
    outlined retain of [Input]((uint64_t)&v73);
    outlined retain of NodePersonality(&v71);
    outlined retain of [Input]((uint64_t)&v72);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v17, (uint64_t)v16);
    if ((v20 & 1) == 0) {
      break;
    }
    uint64_t v21 = v72;
    long long v22 = (_OWORD *)(*(void *)(a1 + 56) + 144 * v19);
    v68[0] = *v22;
    long long v23 = v22[4];
    long long v25 = v22[1];
    long long v24 = v22[2];
    v68[3] = v22[3];
    v68[4] = v23;
    v68[1] = v25;
    v68[2] = v24;
    long long v26 = v22[8];
    long long v28 = v22[5];
    long long v27 = v22[6];
    v68[7] = v22[7];
    v68[8] = v26;
    v68[5] = v28;
    v68[6] = v27;
    outlined retain of NodeDef((uint64_t)v68);
    swift_bridgeObjectRelease_n();
    uint64_t v29 = *(void *)(v21 + 16);
    if (v29)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v30 = (void *)(v21 + 80);
      while (1)
      {
        uint64_t v31 = *v30;
        char v32 = *((unsigned char *)v30 - 8);
        uint64_t v34 = *(v30 - 3);
        uint64_t v33 = *(v30 - 2);
        uint64_t v36 = *(v30 - 5);
        uint64_t v35 = *(v30 - 4);
        *(void *)&long long v55 = *(v30 - 6);
        *((void *)&v55 + 1) = v36;
        *(void *)&long long v56 = v35;
        *((void *)&v56 + 1) = v34;
        *(void *)&long long v57 = v33;
        BYTE8(v57) = v32;
        *(void *)&long long v58 = v31;
        swift_retain();
        swift_bridgeObjectRetain();
        specialized closure #1 in closure #1 in Graph.insertMaterialXDefaultValues(nodeDefStore:)(&v55, v68, (unint64_t)&v69, (_OWORD *)v5, a1, a2);
        if (v4) {
          goto LABEL_16;
        }
        v30 += 7;
        swift_bridgeObjectRelease();
        swift_release();
        if (!--v29)
        {
          outlined release of [Input]((uint64_t)&v72);
          outlined release of [Input]((uint64_t)&v72);
          break;
        }
      }
    }
    outlined release of NodeDef((uint64_t)v68);
    outlined release of NodePersonality(&v71);
    outlined release of [Input]((uint64_t)&v72);
    outlined release of [Input]((uint64_t)&v73);
    unint64_t v8 = v75;
    uint64_t v10 = v53;
LABEL_13:
    if ((uint64_t)++v11 >= (uint64_t)v8) {
      return swift_bridgeObjectRelease_n();
    }
    if (v11 >= v8)
    {
      __break(1u);
LABEL_16:
      swift_bridgeObjectRelease();
      swift_release();
      outlined release of [Input]((uint64_t)&v72);
      outlined release of [Input]((uint64_t)&v72);
      outlined release of NodeDef((uint64_t)v68);
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
LABEL_22:
  v54[0] = v17;
  v54[1] = v16;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi18_((uint64_t)v54);
  *(void *)&long long v55 = 0;
  *((void *)&v55 + 1) = 0xE000000000000000;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  *(void *)&long long v55 = 0xD000000000000020;
  *((void *)&v55 + 1) = 0x800000025C4255E0;
  v37._char countAndFlagsBits = v17;
  v37._uint64_t object = v16;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._char countAndFlagsBits = 0x6F6E20726F662027;
  v38._uint64_t object = (void *)0xEC00000027206564;
  String.append(_:)(v38);
  v39._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._char countAndFlagsBits = 1701080942;
  v40._uint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._char countAndFlagsBits = 39;
  v41._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  long long v42 = v55;
  outlined init with take of UserGraphError.ErrorType((uint64_t)v54, (uint64_t)&v55);
  long long v67 = v42;
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  swift_allocError();
  *long long v43 = v55;
  long long v44 = v59;
  long long v46 = v56;
  long long v45 = v57;
  v43[3] = v58;
  void v43[4] = v44;
  v43[1] = v46;
  v43[2] = v45;
  long long v47 = v63;
  long long v49 = v60;
  long long v48 = v61;
  _OWORD v43[7] = v62;
  unsigned char v43[8] = v47;
  v43[5] = v49;
  v43[6] = v48;
  long long v50 = v67;
  long long v52 = v64;
  long long v51 = v65;
  v43[11] = v66;
  _OWORD v43[12] = v50;
  v43[9] = v52;
  v43[10] = v51;
  swift_willThrow();
LABEL_17:
  outlined release of NodePersonality(&v71);
  outlined release of [Input]((uint64_t)&v72);
  outlined release of [Input]((uint64_t)&v73);
  return swift_bridgeObjectRelease_n();
}

uint64_t specialized Graph.removePassthroughNodes(nodeDefStore:)(uint64_t result)
{
  uint64_t v2 = (void *)v1[8];
  int64_t v3 = v2[2];
  if (!v3) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = v2 + 4;
  long long v6 = v2 + 7;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v7 = 0;
  long long v107 = v1;
  long long v108 = v2;
  uint64_t v110 = v3;
  long long v111 = v2 + 7;
  long long v112 = v2 + 4;
  while (1)
  {
    if (v7 >= v3) {
      goto LABEL_73;
    }
    uint64_t v8 = 48 * v7;
    if (v6[6 * v7] == -7) {
      break;
    }
LABEL_15:
    uint64_t v11 = (uint64_t)v5 + v8;
    unint64_t v12 = *(void *)v11;
    if (*(void *)v11 >> 61 != 5) {
      goto LABEL_5;
    }
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t v14 = *(void *)(v11 + 16);
    unint64_t v106 = *(void *)(v11 + 24);
    uint64_t v104 = *(void *)(v11 + 32);
    char v105 = *(unsigned char *)(v11 + 40);
    uint64_t v16 = *(void *)((v12 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    uint64_t v15 = *(void *)((v12 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
    uint64_t v17 = *(void *)(v4 + 16);
    swift_bridgeObjectRetain();
    if (!v17)
    {
      outlined copy of NodePersonality(v12);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_69:
      unint64_t v126 = v16;
      uint64_t v127 = v15;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi18_((uint64_t)&v126);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v126, (uint64_t)&v134);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v146 = 0uLL;
      swift_allocError();
      *long long v90 = v134;
      long long v91 = v138;
      long long v93 = v135;
      long long v92 = v136;
      v90[3] = v137;
      v90[4] = v91;
      v90[1] = v93;
      _OWORD v90[2] = v92;
      long long v94 = v142;
      long long v96 = v139;
      long long v95 = v140;
      v90[7] = v141;
      v90[8] = v94;
      v90[5] = v96;
      v90[6] = v95;
      long long v97 = v146;
      long long v99 = v143;
      long long v98 = v144;
      v90[11] = v145;
      v90[12] = v97;
      v90[9] = v99;
      v90[10] = v98;
      swift_willThrow();
      outlined consume of NodePersonality(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v12);
    uint64_t v18 = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v15);
    if ((v20 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_69;
    }
    uint64_t v109 = v4;
    uint64_t v21 = (long long *)(*(void *)(v4 + 56) + 144 * v19);
    long long v117 = *v21;
    long long v22 = v21[4];
    long long v24 = v21[1];
    long long v23 = v21[2];
    long long v120 = v21[3];
    long long v121 = v22;
    long long v118 = v24;
    long long v119 = v23;
    long long v25 = v21[8];
    long long v27 = v21[5];
    long long v26 = v21[6];
    long long v124 = v21[7];
    long long v125 = v25;
    long long v122 = v27;
    long long v123 = v26;
    outlined retain of NodeDef((uint64_t)&v117);
    swift_bridgeObjectRelease_n();
    if (one-time initialization token for passthroughNodeNames != -1) {
      swift_once();
    }
    rawValue = passthroughNodeNames._rawValue;
    uint64_t v29 = *((void *)&v118 + 1);
    if (!*((void *)passthroughNodeNames._rawValue + 2))
    {
      swift_bridgeObjectRetain();
LABEL_4:
      outlined release of NodeDef((uint64_t)&v117);
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v12);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      int64_t v3 = v110;
      long long v6 = v111;
      uint64_t v5 = v112;
      goto LABEL_5;
    }
    uint64_t v30 = v118;
    swift_bridgeObjectRetain();
    unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v29);
    if ((v32 & 1) == 0) {
      goto LABEL_4;
    }
    unint64_t v100 = v12;
    long long v101 = v2;
    uint64_t v102 = v14;
    uint64_t v33 = (uint64_t *)(rawValue[7] + 16 * v31);
    unint64_t v34 = v33[1];
    uint64_t v175 = *v33;
    swift_bridgeObjectRetain();
    outlined release of NodeDef((uint64_t)&v117);
    swift_bridgeObjectRelease();
    uint64_t v103 = v18;
    uint64_t v35 = *(void *)(v18 + 16);
    if (!v35)
    {
LABEL_63:
      unint64_t v126 = v100;
      uint64_t v127 = v103;
      uint64_t v128 = v102;
      unint64_t v129 = v106;
      uint64_t v130 = v104;
      char v131 = v105;
      uint64_t v132 = v175;
      unint64_t v133 = v34;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v126);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v126, (uint64_t)&v134);
      long long v146 = 0uLL;
      outlined copy of NodePersonality(v100);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined release of UserGraphError((uint64_t *)&v134);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      swift_allocError();
      *uint64_t v70 = v134;
      long long v71 = v138;
      long long v73 = v135;
      long long v72 = v136;
      v70[3] = v137;
      v70[4] = v71;
      v70[1] = v73;
      v70[2] = v72;
      long long v74 = v142;
      long long v76 = v139;
      long long v75 = v140;
      void v70[7] = v141;
      v70[8] = v74;
      v70[5] = v76;
      v70[6] = v75;
      long long v77 = v146;
      long long v79 = v143;
      long long v78 = v144;
      v70[11] = v145;
      v70[12] = v77;
      v70[9] = v79;
      v70[10] = v78;
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
    uint64_t v36 = (void *)(v18 + 80);
    unint64_t v113 = v34;
    while (1)
    {
      uint64_t v37 = *(v36 - 6);
      uint64_t v114 = *(v36 - 5);
      uint64_t v38 = *(v36 - 4);
      uint64_t v39 = *(v36 - 2);
      char v40 = *((unsigned char *)v36 - 8);
      uint64_t v41 = *v36;
      if (v38 == v175 && *(v36 - 3) == v34) {
        break;
      }
      unint64_t v34 = *(v36 - 3);
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_32;
      }
      v36 += 7;
      --v35;
      unint64_t v34 = v113;
      if (!v35) {
        goto LABEL_63;
      }
    }
    uint64_t v38 = v175;
LABEL_32:
    v158[0] = v37;
    v158[1] = v114;
    v158[2] = v38;
    v158[3] = v34;
    v158[4] = v39;
    char v159 = v40;
    uint64_t v160 = v41;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    long long v43 = v108;
    uint64_t v44 = *v107;
    long long v45 = *(_OWORD *)(v107 + 3);
    uint64_t v46 = v107[5];
    uint64_t v47 = v107[16];
    char v116 = *((unsigned char *)v107 + 120);
    char v115 = *((unsigned char *)v107 + 168);
    long long v162 = *(_OWORD *)(v107 + 1);
    long long v163 = v45;
    uint64_t v161 = v44;
    uint64_t v164 = v46;
    long long v165 = *((_OWORD *)v107 + 3);
    uint64_t v166 = v108;
    long long v167 = *(_OWORD *)(v107 + 9);
    long long v168 = *(_OWORD *)(v107 + 11);
    long long v169 = *(_OWORD *)(v107 + 13);
    char v170 = v116;
    uint64_t v171 = v47;
    long long v172 = *(_OWORD *)(v107 + 17);
    long long v173 = *(_OWORD *)(v107 + 19);
    char v174 = v115;
    Graph.edge(to:)((uint64_t)v158, v147);
    outlined init with take of MetalFunctionNode?((uint64_t)v147, (uint64_t)&v148, &demangling cache variable for type metadata for Edge?);
    if (*((void *)&v148 + 1))
    {
      v152[0] = v148;
      v152[1] = v149;
      v152[2] = v150;
      uint64_t v153 = v151;
      long long v154 = v149;
      swift_retain();
      outlined retain of String((uint64_t)&v154);
      outlined release of Edge?(v147);
      uint64_t v48 = *(void *)(v102 + 16);
      if (!v48)
      {
LABEL_64:
        unint64_t v126 = v100;
        uint64_t v127 = v103;
        uint64_t v128 = v102;
        unint64_t v129 = v106;
        uint64_t v130 = v104;
        char v131 = v105;
        uint64_t v132 = 7632239;
        unint64_t v133 = 0xE300000000000000;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v126);
        outlined init with take of UserGraphError.ErrorType((uint64_t)&v126, (uint64_t)&v134);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        long long v146 = 0uLL;
        swift_allocError();
        _OWORD *v80 = v134;
        long long v81 = v138;
        long long v83 = v135;
        long long v82 = v136;
        v80[3] = v137;
        v80[4] = v81;
        v80[1] = v83;
        v80[2] = v82;
        long long v84 = v142;
        long long v86 = v139;
        long long v85 = v140;
        v80[7] = v141;
        v80[8] = v84;
        v80[5] = v86;
        v80[6] = v85;
        long long v87 = v146;
        long long v89 = v143;
        long long v88 = v144;
        v80[11] = v145;
        v80[12] = v87;
        v80[9] = v89;
        v80[10] = v88;
        outlined copy of NodePersonality(v100);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
        outlined release of String((uint64_t)&v154);
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of NodePersonality(v100);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      long long v49 = (void *)(v102 + 80);
      while (1)
      {
        uint64_t v50 = *(v49 - 5);
        uint64_t v175 = *(v49 - 6);
        uint64_t v51 = *(v49 - 4);
        unint64_t v52 = *(v49 - 3);
        uint64_t v53 = *(v49 - 2);
        char v54 = *((unsigned char *)v49 - 8);
        uint64_t v55 = *v49;
        if (v51 == 7632239 && v52 == 0xE300000000000000) {
          break;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          goto LABEL_43;
        }
        v49 += 7;
        if (!--v48) {
          goto LABEL_64;
        }
      }
      unint64_t v52 = 0xE300000000000000;
LABEL_43:
      v155[0] = v175;
      v155[1] = v50;
      int v155[2] = v51;
      v155[3] = v52;
      v155[4] = v53;
      char v156 = v54;
      uint64_t v157 = v55;
      swift_retain();
      swift_bridgeObjectRetain();
      Graph.moveEdges(from:to:)((uint64_t)v155, (uint64_t)v152);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      outlined release of String((uint64_t)&v154);
      long long v43 = v108;
    }
    specialized Graph.removeEdges(connectedTo:)(v106);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    long long v6 = v111;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v43);
      long long v43 = (void *)result;
    }
    uint64_t v5 = v112;
    if ((v106 & 0x8000000000000000) != 0) {
      goto LABEL_74;
    }
    if (v106 >= v43[2]) {
      goto LABEL_75;
    }
    long long v57 = &v43[6 * v106];
    long long v58 = v57 + 4;
    v57[7] = -7;
    uint64_t v59 = *(void *)(v57[5] + 16);
    long long v108 = v43;
    if (v59)
    {
      uint64_t v60 = v59;
      swift_bridgeObjectRetain();
      uint64_t v61 = 0;
      unint64_t v62 = 0;
      while (1)
      {
        long long v63 = (void *)v58[1];
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        v58[1] = v63;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v63);
          long long v63 = (void *)result;
          v58[1] = result;
        }
        if (v62 >= v63[2]) {
          goto LABEL_71;
        }
        ++v62;
        v63[v61 + 4] = -7;
        swift_bridgeObjectRelease();
        swift_release();
        v61 += 7;
        if (v60 == v62)
        {
          swift_bridgeObjectRelease();
          long long v6 = v111;
          uint64_t v5 = v112;
          long long v43 = v108;
          break;
        }
      }
    }
    uint64_t v64 = v58[2];
    long long v65 = v107;
    if (*(void *)(v64 + 16))
    {
      uint64_t v66 = *(void *)(v64 + 16);
      swift_bridgeObjectRetain();
      uint64_t v67 = 0;
      unint64_t v68 = 0;
      while (1)
      {
        long long v69 = (void *)v58[2];
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        _OWORD v58[2] = v69;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v69);
          long long v69 = (void *)result;
          _OWORD v58[2] = result;
        }
        if (v68 >= v69[2]) {
          goto LABEL_72;
        }
        ++v68;
        v69[v67 + 4] = -7;
        swift_bridgeObjectRelease();
        swift_release();
        v67 += 7;
        if (v66 == v68)
        {
          swift_bridgeObjectRelease();
          long long v6 = v111;
          uint64_t v5 = v112;
          long long v65 = v107;
          long long v43 = v108;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of NodePersonality(v100);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    v65[8] = (uint64_t)v43;
    uint64_t v2 = v101;
    int64_t v3 = v110;
    uint64_t v4 = v109;
LABEL_5:
    if ((uint64_t)++v7 >= v3) {
      return swift_bridgeObjectRelease();
    }
  }
  if ((uint64_t)(v7 + 1) >= v3) {
    return swift_bridgeObjectRelease();
  }
  for (uint64_t i = 48 * v7++ + 104; ; i += 48)
  {
    if (*(void *)((char *)v2 + i) != -7)
    {
      uint64_t v8 = i - 56;
      goto LABEL_15;
    }
    uint64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      break;
    }
    ++v7;
    if (v10 >= v3) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
  return result;
}

uint64_t outlined consume of Graph.Adjacent?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized Sequence.forEach(_:)(void *a1, void (*a2)(uint64_t, _OWORD *))
{
  uint64_t v3 = v2;
  char v20 = a2;
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 16);
  if (v5 && (uint64_t v6 = a1[3], v7 = a1[4] >> 1, v7 != v6))
  {
    uint64_t v16 = v7 - v6;
    uint64_t v9 = a1[2];
    uint64_t v10 = *(void *)(v4 + 32);
    if (v6 <= v7) {
      uint64_t v11 = a1[4] >> 1;
    }
    else {
      uint64_t v11 = a1[3];
    }
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v12 = 0;
    uint64_t v13 = v9 + 56 * v6;
    uint64_t v14 = v11 - v6;
    while (v14 != v12)
    {
      long long v15 = *(_OWORD *)(v13 + 16);
      v17[0] = *(_OWORD *)v13;
      v17[1] = v15;
      _OWORD v17[2] = *(_OWORD *)(v13 + 32);
      uint64_t v18 = *(void *)(v13 + 48);
      long long v19 = v15;
      swift_retain();
      outlined retain of String((uint64_t)&v19);
      v20(v10, v17);
      swift_release();
      uint64_t result = outlined release of String((uint64_t)&v19);
      if (!v3 && v5 - 1 != v12)
      {
        uint64_t v10 = *(void *)(v4 + 8 * v12++ + 40);
        v13 += 56;
        if (v16 != v12) {
          continue;
        }
      }
      goto LABEL_4;
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
LABEL_4:
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Graph.resolveSwizzleNodes(nodeDefStore:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = (_OWORD *)v0;
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (void (*)(char *, uint64_t))((char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v44 - v8;
  *(void *)&long long v54 = &outlined read-only object #0 of Graph.resolveSwizzleNodes(nodeDefStore:);
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Unicode.Scalar]);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Unicode.Scalar] and conformance [A], &demangling cache variable for type metadata for [Unicode.Scalar]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&long long v54 = &outlined read-only object #1 of Graph.resolveSwizzleNodes(nodeDefStore:);
  uint64_t v52 = v4;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v10 = *(void *)(v0 + 64);
  int64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = v10 + 32;
    uint64_t v13 = v10 + 56;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v15 = 0;
    uint64_t v44 = result;
    uint64_t v16 = result + 104;
    unint64_t v17 = MEMORY[0x263F8EE78];
    uint64_t v53 = v3;
    uint64_t v49 = v13;
    uint64_t v50 = v12;
    uint64_t v47 = v7;
    uint64_t v48 = v9;
    while (1)
    {
      if (v15 >= v11) {
        goto LABEL_33;
      }
      uint64_t v18 = 48 * v15;
      if (*(void *)(v13 + 48 * v15) == -7) {
        break;
      }
LABEL_15:
      uint64_t v21 = v12 + v18;
      unint64_t v22 = *(void *)v21;
      if (*(void *)v21 >> 61 == 5)
      {
        unint64_t v58 = v17;
        uint64_t v24 = *(void *)(v21 + 8);
        uint64_t v23 = *(void *)(v21 + 16);
        long long v46 = *(_OWORD *)(v21 + 24);
        int v45 = *(unsigned __int8 *)(v21 + 40);
        outlined copy of NodePersonality(v22);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v22);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v25._char countAndFlagsBits = 0x7A7A6977735F444ELL;
        v25._uint64_t object = (void *)0xEA0000000000656CLL;
        Swift::Bool v26 = String.hasPrefix(_:)(v25);
        uint64_t v27 = v24;
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v26)
        {
          uint64_t v28 = v23;
          uint64_t v29 = v27;
          unint64_t v30 = v58;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v54 = v30;
          if ((result & 1) == 0)
          {
            uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v30 + 16) + 1, 1);
            unint64_t v30 = v54;
          }
          unint64_t v32 = *(void *)(v30 + 16);
          unint64_t v31 = *(void *)(v30 + 24);
          unint64_t v33 = v32 + 1;
          if (v32 >= v31 >> 1)
          {
            unint64_t v58 = v32 + 1;
            uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
            unint64_t v33 = v58;
            unint64_t v30 = v54;
          }
          *(void *)(v30 + 16) = v33;
          unint64_t v34 = v30 + 48 * v32;
          *(void *)(v34 + 32) = v22;
          *(void *)(v34 + 40) = v29;
          *(void *)(v34 + 48) = v28;
          *(_OWORD *)(v34 + 56) = v46;
          *(unsigned char *)(v34 + 72) = v45;
          unint64_t v17 = v30;
        }
        else
        {
          outlined consume of NodePersonality(v22);
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v17 = v58;
        }
        uint64_t v13 = v49;
        uint64_t v12 = v50;
        uint64_t v7 = v47;
        uint64_t v9 = v48;
      }
      ++v15;
      uint64_t v3 = v53;
      if ((uint64_t)v15 >= v11) {
        goto LABEL_22;
      }
    }
    if ((uint64_t)(v15 + 1) < v11)
    {
      uint64_t v19 = 48 * v15++;
      while (1)
      {
        if (*(void *)(v16 + v19) != -7)
        {
          uint64_t v18 = v19 + 48;
          goto LABEL_15;
        }
        uint64_t v20 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          break;
        }
        ++v15;
        v19 += 48;
        if (v20 >= v11) {
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v35 = *(void *)(v17 + 16);
    if (v35) {
      goto LABEL_25;
    }
  }
  else
  {
    unint64_t v17 = MEMORY[0x263F8EE78];
    uint64_t v35 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v35)
    {
LABEL_25:
      swift_retain();
      unint64_t v58 = v17;
      uint64_t v36 = (uint64_t *)(v17 + 40);
      while (1)
      {
        unint64_t v38 = *(v36 - 1);
        uint64_t v37 = *v36;
        uint64_t v39 = v36[1];
        char v40 = *((unsigned char *)v36 + 32);
        long long v41 = *((_OWORD *)v36 + 1);
        *(void *)&long long v54 = v38;
        *((void *)&v54 + 1) = v37;
        uint64_t v55 = v39;
        long long v56 = v41;
        char v57 = v40;
        outlined copy of NodePersonality(v38);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #1 in Graph.resolveSwizzleNodes(nodeDefStore:)(&v54, v3, (uint64_t)v9, v7);
        if (v2) {
          break;
        }
        outlined consume of NodePersonality(v38);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v36 += 6;
        if (!--v35)
        {
          swift_release();
          goto LABEL_29;
        }
      }
      outlined consume of NodePersonality(v38);
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
  }
LABEL_29:
  swift_release();
LABEL_31:
  uint64_t v42 = v52;
  long long v43 = *(uint64_t (**)(char *, uint64_t))(v51 + 8);
  v43((char *)v7, v52);
  return v43(v9, v42);
}

uint64_t specialized ShaderGraphNode.metalTextureType.getter(unint64_t a1)
{
  if (a1 >> 61 != 5) {
    goto LABEL_37;
  }
  swift_bridgeObjectRetain_n();
  v1._char countAndFlagsBits = 0x6567616D695F444ELL;
  v1._uint64_t object = (void *)0xE800000000000000;
  Swift::Bool v2 = String.hasPrefix(_:)(v1);
  swift_bridgeObjectRelease();
  if (v2) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  v3._uint64_t object = (void *)0x800000025C421D60;
  v3._char countAndFlagsBits = 0xD000000000000014;
  Swift::Bool v4 = String.hasPrefix(_:)(v3);
  swift_bridgeObjectRelease();
  if (v4
    || (swift_bridgeObjectRetain(),
        v5._uint64_t object = (void *)0x800000025C424DE0,
        v5._char countAndFlagsBits = 0xD000000000000014,
        Swift::Bool v6 = String.hasPrefix(_:)(v5),
        swift_bridgeObjectRelease(),
        v6))
  {
LABEL_5:
    v7._char countAndFlagsBits = 0x33726F6C6F63;
    v7._uint64_t object = (void *)0xE600000000000000;
    if (String.hasSuffix(_:)(v7))
    {
      swift_bridgeObjectRelease();
LABEL_8:
      if (one-time initialization token for texture2d_half != -1) {
        swift_once();
      }
      uint64_t v10 = &static MetalDataType.texture2d_half;
      return *v10;
    }
    v8._char countAndFlagsBits = 0x34726F6C6F63;
    v8._uint64_t object = (void *)0xE600000000000000;
    Swift::Bool v9 = String.hasSuffix(_:)(v8);
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
  swift_bridgeObjectRetain();
  v11._char countAndFlagsBits = 0xD00000000000001DLL;
  v11._uint64_t object = (void *)0x800000025C424E00;
  Swift::Bool v12 = String.hasPrefix(_:)(v11);
  swift_bridgeObjectRelease();
  if (!v12)
  {
    swift_bridgeObjectRetain();
    v14._char countAndFlagsBits = 0xD000000000000018;
    v14._uint64_t object = (void *)0x800000025C424E20;
    Swift::Bool v15 = String.hasPrefix(_:)(v14);
    swift_bridgeObjectRelease();
    if (v15)
    {
      v16._char countAndFlagsBits = 0x33726F6C6F63;
      v16._uint64_t object = (void *)0xE600000000000000;
      if (String.hasSuffix(_:)(v16))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v24._char countAndFlagsBits = 0x34726F6C6F63;
        v24._uint64_t object = (void *)0xE600000000000000;
        Swift::Bool v25 = String.hasSuffix(_:)(v24);
        swift_bridgeObjectRelease();
        if (!v25)
        {
          if (one-time initialization token for texture3d_float != -1) {
            swift_once();
          }
          uint64_t v10 = &static MetalDataType.texture3d_float;
          return *v10;
        }
      }
      if (one-time initialization token for texture3d_half != -1) {
        swift_once();
      }
      uint64_t v10 = &static MetalDataType.texture3d_half;
      return *v10;
    }
    swift_bridgeObjectRetain();
    v19._char countAndFlagsBits = 0xD000000000000017;
    v19._uint64_t object = (void *)0x800000025C421D80;
    Swift::Bool v20 = String.hasPrefix(_:)(v19);
    swift_bridgeObjectRelease();
    if (v20
      || (swift_bridgeObjectRetain(),
          v21._char countAndFlagsBits = 0xD000000000000018,
          v21._uint64_t object = (void *)0x800000025C424E40,
          Swift::Bool v22 = String.hasPrefix(_:)(v21),
          swift_bridgeObjectRelease(),
          v22))
    {
      v23._char countAndFlagsBits = 0x33726F6C6F63;
      v23._uint64_t object = (void *)0xE600000000000000;
      if (String.hasSuffix(_:)(v23))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v26._char countAndFlagsBits = 0x34726F6C6F63;
        v26._uint64_t object = (void *)0xE600000000000000;
        Swift::Bool v27 = String.hasSuffix(_:)(v26);
        swift_bridgeObjectRelease();
        if (!v27)
        {
          if (one-time initialization token for texturecube_float != -1) {
            swift_once();
          }
          uint64_t v10 = &static MetalDataType.texturecube_float;
          return *v10;
        }
      }
      if (one-time initialization token for texturecube_half != -1) {
        swift_once();
      }
      uint64_t v10 = &static MetalDataType.texturecube_half;
      return *v10;
    }
    swift_bridgeObjectRelease();
LABEL_37:
    if (one-time initialization token for texture2d_float != -1) {
      swift_once();
    }
    uint64_t v10 = &static MetalDataType.texture2d_float;
    return *v10;
  }
  v13._char countAndFlagsBits = 0x33726F6C6F63;
  v13._uint64_t object = (void *)0xE600000000000000;
  if (String.hasSuffix(_:)(v13))
  {
    swift_bridgeObjectRelease();
LABEL_18:
    if (one-time initialization token for texture2darray_half != -1) {
      swift_once();
    }
    uint64_t v10 = &static MetalDataType.texture2darray_half;
    return *v10;
  }
  v17._char countAndFlagsBits = 0x34726F6C6F63;
  v17._uint64_t object = (void *)0xE600000000000000;
  Swift::Bool v18 = String.hasSuffix(_:)(v17);
  swift_bridgeObjectRelease();
  if (v18) {
    goto LABEL_18;
  }
  if (one-time initialization token for texture2darray_float != -1) {
    swift_once();
  }
  uint64_t v10 = &static MetalDataType.texture2darray_float;
  return *v10;
}

double specialized Graph.insertCreateSampler(label:)@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C41BFF0;
  if (one-time initialization token for coord != -1) {
    swift_once();
  }
  uint64_t v5 = static MetalDataType.coord;
  *(void *)(inited + 32) = 0x64726F6F63;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 48) = v5;
  uint64_t v6 = one-time initialization token for address;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = static MetalDataType.address;
  *(void *)(inited + 56) = 0x73736572646461;
  *(void *)(inited + 64) = 0xE700000000000000;
  *(void *)(inited + 72) = v7;
  uint64_t v8 = one-time initialization token for s_address;
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = static MetalDataType.s_address;
  *(void *)(inited + 80) = 0x7365726464615F73;
  *(void *)(inited + 88) = 0xE900000000000073;
  *(void *)(inited + 96) = v9;
  uint64_t v10 = one-time initialization token for t_address;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = static MetalDataType.t_address;
  *(void *)(inited + 104) = 0x7365726464615F74;
  *(void *)(inited + 112) = 0xE900000000000073;
  *(void *)(inited + 120) = v11;
  uint64_t v12 = one-time initialization token for r_address;
  swift_retain();
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v13 = static MetalDataType.r_address;
  *(void *)(inited + 128) = 0x7365726464615F72;
  *(void *)(inited + 136) = 0xE900000000000073;
  *(void *)(inited + 144) = v13;
  uint64_t v14 = one-time initialization token for border_color;
  swift_retain();
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v15 = static MetalDataType.border_color;
  strcpy((char *)(inited + 152), "border_color");
  *(unsigned char *)(inited + 165) = 0;
  *(_WORD *)(inited + 166) = -5120;
  *(void *)(inited + 168) = v15;
  uint64_t v16 = one-time initialization token for mag_filter;
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = static MetalDataType.mag_filter;
  *(void *)(inited + 176) = 0x746C69665F67616DLL;
  *(void *)(inited + 184) = 0xEA00000000007265;
  *(void *)(inited + 192) = v17;
  uint64_t v18 = one-time initialization token for min_filter;
  swift_retain();
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v19 = static MetalDataType.min_filter;
  *(void *)(inited + 200) = 0x746C69665F6E696DLL;
  *(void *)(inited + 208) = 0xEA00000000007265;
  *(void *)(inited + 216) = v19;
  uint64_t v20 = one-time initialization token for mip_filter;
  swift_retain();
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v21 = static MetalDataType.mip_filter;
  *(void *)(inited + 224) = 0x746C69665F70696DLL;
  *(void *)(inited + 232) = 0xEA00000000007265;
  *(void *)(inited + 240) = v21;
  uint64_t v22 = one-time initialization token for max_anisotropy;
  swift_retain();
  if (v22 != -1) {
    swift_once();
  }
  uint64_t v23 = static MetalDataType.max_anisotropy;
  strcpy((char *)(inited + 248), "max_anisotropy");
  *(unsigned char *)(inited + 263) = -18;
  *(void *)(inited + 264) = v23;
  uint64_t v24 = one-time initialization token for lod_clamp;
  swift_retain();
  if (v24 != -1) {
    swift_once();
  }
  uint64_t v25 = static MetalDataType.lod_clamp;
  *(void *)(inited + 272) = 0x6D616C635F646F6CLL;
  *(void *)(inited + 280) = 0xE900000000000070;
  *(void *)(inited + 288) = v25;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  uint64_t v26 = swift_initStackObject();
  *(_OWORD *)(v26 + 16) = xmmword_25C418EE0;
  uint64_t v27 = one-time initialization token for sampler;
  swift_retain();
  if (v27 != -1) {
    swift_once();
  }
  *(void *)(v26 + 32) = 7632239;
  uint64_t v28 = static MetalDataType.sampler;
  *(void *)(v26 + 40) = 0xE300000000000000;
  *(void *)(v26 + 48) = v28;
  unint64_t v29 = *(void *)(v2 + 40);
  swift_retain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v29, inited, v26, 0xE000000000000008, v2 + 64, v2, (unint64_t *)&v32);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_setDeallocating();
  swift_arrayDestroy();
  long long v30 = v33[0];
  *a1 = v32;
  a1[1] = v30;
  double result = *(double *)((char *)v33 + 9);
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)v33 + 9);
  return result;
}

double specialized Input.prependFunction(_:label:arguments:in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C418EE0;
  uint64_t v10 = *(void *)(v5 + 8);
  *(void *)(inited + 32) = 7632239;
  *(void *)(inited + 40) = 0xE300000000000000;
  *(void *)(inited + 48) = v10;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  *(void *)(v11 + 32) = v10;
  unint64_t v12 = v11 | 0x2000000000000000;
  unint64_t v13 = *(void *)(a4 + 40);
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v13, a3, inited, v12, a4 + 64, a4, (unint64_t *)&v19);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  ShaderGraphNode.out.getter((uint64_t)v21);
  if (v18)
  {
    outlined init with take of NodePersonality(&v19, &v26);
    outlined release of NodePersonality(&v26);
    uint64_t v25 = *((void *)&v19 + 1);
    outlined release of [Input]((uint64_t)&v25);
    uint64_t v24 = *(void *)&v20[0];
    outlined release of [Input]((uint64_t)&v24);
  }
  else
  {
    Graph.connect(_:to:)((uint64_t)v21, v5);
    swift_release();
    long long v23 = v22;
    outlined release of String((uint64_t)&v23);
    long long v15 = v20[0];
    *a5 = v19;
    a5[1] = v15;
    double result = *(double *)((char *)v20 + 9);
    *(_OWORD *)((char *)a5 + 25) = *(_OWORD *)((char *)v20 + 9);
  }
  return result;
}

void specialized closure #1 in Graph.transformGeomPropValueNodes(surface:geometryModifier:nodeDefStore:)(long long *a1, NSObject *a2, uint64_t a3, _OWORD *a4)
{
  long long v8 = *a1;
  long long v9 = a1[1];
  *(_OWORD *)((char *)v162 + 9) = *(long long *)((char *)a1 + 25);
  v162[0] = v9;
  long long v161 = v8;
  uint64_t v10 = *(void *)a1;
  *(_OWORD *)uint64_t v127 = *(long long *)((char *)a1 + 8);
  uint64_t v11 = *((void *)a1 + 3);
  uint64_t v12 = *((void *)a1 + 4);
  int v13 = *((unsigned __int8 *)a1 + 40);
  outlined init with take of NodePersonality(&v161, &v184);
  outlined init with take of NodePersonality(&v184, v187);
  uint64_t v14 = v187[0];
  if (v187[0] >> 61 == 5)
  {
    LODWORD(v188) = v13;
    v187[0] &= 0x1FFFFFFFFFFFFFFFuLL;
    uint64_t v15 = *(void *)((v14 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    uint64_t v16 = *(void *)((v14 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
    swift_bridgeObjectRetain();
    v17._uint64_t object = (void *)0x800000025C425160;
    v17._char countAndFlagsBits = 0xD000000000000011;
    if (!String.hasPrefix(_:)(v17))
    {
      swift_bridgeObjectRelease();
      return;
    }
    if (a2[2].isa)
    {
      swift_bridgeObjectRetain();
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
      if (v19)
      {
        uint64_t v20 = (_OWORD *)((char *)a2[7].isa + 144 * v18);
        v147[0] = *v20;
        long long v21 = v20[4];
        long long v23 = v20[1];
        long long v22 = v20[2];
        v147[3] = v20[3];
        v147[4] = v21;
        v147[1] = v23;
        v147[2] = v22;
        long long v24 = v20[8];
        long long v26 = v20[5];
        long long v25 = v20[6];
        v147[7] = v20[7];
        long long v148 = v24;
        v147[5] = v26;
        v147[6] = v25;
        outlined retain of NodeDef((uint64_t)v147);
        swift_bridgeObjectRelease_n();
        uint64_t v27 = *(void *)(*((void *)&v148 + 1) + 16);
        if (v27)
        {
          *(void *)long long v121 = v12;
          *(void *)long long v122 = v11;
          *(void *)long long v123 = v10;
          os_log_t v125 = (os_log_t)a4;
          os_log_t log = a2;
          *(void *)long long v119 = a3;
          uint64_t v28 = (void *)(*((void *)&v148 + 1) + 40);
          while (1)
          {
            uint64_t v29 = v28[1];
            BOOL v30 = *(v28 - 1) == 7632239 && *v28 == 0xE300000000000000;
            if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              break;
            }
            v28 += 8;
            if (!--v27) {
              goto LABEL_13;
            }
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          outlined release of NodeDef((uint64_t)v147);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          long long v38 = a4[4];
          long long v178 = a4[5];
          long long v177 = v38;
          long long v39 = a4[3];
          v176[2] = a4[2];
          v176[3] = v39;
          *(_OWORD *)((char *)v182 + 9) = *(_OWORD *)((char *)a4 + 153);
          long long v40 = a4[8];
          v182[0] = a4[9];
          long long v181 = v40;
          long long v41 = a4[7];
          long long v179 = a4[6];
          long long v180 = v41;
          long long v42 = *a4;
          v176[1] = a4[1];
          v176[0] = v42;
          uint64_t v183 = *((void *)&v161 + 1);
          uint64_t v43 = *(void *)(*((void *)&v161 + 1) + 16);
          if (!v43)
          {
LABEL_34:
            *(void *)&long long v153 = *(void *)&v162[0];
            uint64_t v129 = *(void *)v123;
            long long v130 = *(_OWORD *)v127;
            uint64_t v131 = *(void *)v122;
            uint64_t v132 = *(void *)v121;
            char v133 = v188;
            uint64_t v134 = 0x706F72706D6F6567;
            unint64_t v135 = 0xE800000000000000;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v129);
            outlined init with take of UserGraphError.ErrorType((uint64_t)&v129, (uint64_t)&v136);
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            long long v146 = 0uLL;
            uint64_t v53 = (void *)swift_allocError();
            *long long v54 = v136;
            long long v55 = v139;
            long long v57 = v137;
            long long v56 = *(_OWORD *)v138;
            _OWORD v54[3] = *(_OWORD *)&v138[16];
            v54[4] = v55;
            v54[1] = v57;
            _OWORD v54[2] = v56;
            long long v58 = v143;
            long long v60 = v140;
            long long v59 = v141;
            v54[7] = v142;
            v54[8] = v58;
            v54[5] = v60;
            v54[6] = v59;
            long long v61 = v146;
            long long v63 = *(_OWORD *)v144;
            long long v62 = *(_OWORD *)&v144[16];
            v54[11] = v145;
            v54[12] = v61;
            v54[9] = v63;
            v54[10] = v62;
            outlined retain of [Input]((uint64_t)&v183);
            outlined retain of NodePersonality(&v184);
            outlined retain of [Input]((uint64_t)&v153);
            swift_willThrow();
LABEL_35:
            swift_release();
LABEL_36:
            if (one-time initialization token for logger != -1) {
              swift_once();
            }
            uint64_t v64 = type metadata accessor for Logger();
            __swift_project_value_buffer(v64, (uint64_t)logger);
            uint64_t v186 = *(void *)&v162[0];
            outlined retain of [Input]((uint64_t)&v183);
            outlined retain of NodePersonality(&v184);
            id v65 = v53;
            outlined retain of [Input]((uint64_t)&v186);
            outlined retain of [Input]((uint64_t)&v183);
            outlined retain of NodePersonality(&v184);
            id v66 = v53;
            outlined retain of [Input]((uint64_t)&v186);
            long long v32 = Logger.logObject.getter();
            os_log_type_t v67 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v32, v67))
            {
              uint64_t v68 = swift_slowAlloc();
              uint64_t v69 = swift_slowAlloc();
              uint64_t v128 = v69;
              *(_DWORD *)uint64_t v68 = 136315394;
              *(void *)&long long v160 = v53;
              id v70 = v53;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
              uint64_t v71 = String.init<A>(describing:)();
              *(void *)&long long v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, &v128);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();

              *(_WORD *)(v68 + 12) = 2080;
              *(void *)&long long v160 = 1701080942;
              *((void *)&v160 + 1) = 0xE400000000000000;
              v73._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v73);
              swift_bridgeObjectRelease();
              *(void *)&long long v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v160, *((unint64_t *)&v160 + 1), &v128);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              outlined release of NodePersonality(&v184);
              outlined release of [Input]((uint64_t)&v183);
              outlined release of [Input]((uint64_t)&v186);
              outlined release of NodePersonality(&v184);
              outlined release of [Input]((uint64_t)&v183);
              outlined release of [Input]((uint64_t)&v186);
              _os_log_impl(&dword_25C27E000, v32, v67, "Got error '%s' attempting to convert a geompropvalue node ('%s') to an equivalent built-in geom prop node. Skipping conversion.", (uint8_t *)v68, 0x16u);
              swift_arrayDestroy();
              MEMORY[0x261185880](v69, -1, -1);
              MEMORY[0x261185880](v68, -1, -1);

              return;
            }

            outlined release of NodePersonality(&v184);
            outlined release of [Input]((uint64_t)&v183);
            outlined release of [Input]((uint64_t)&v186);
            outlined release of NodePersonality(&v184);
            outlined release of [Input]((uint64_t)&v183);
            uint64_t v37 = &v186;
            goto LABEL_22;
          }
          uint64_t v114 = *((void *)&v161 + 1);
          uint64_t v115 = v29;
          uint64_t v44 = (void *)(*((void *)&v161 + 1) + 80);
          while (1)
          {
            uint64_t v46 = *(v44 - 6);
            uint64_t v45 = *(v44 - 5);
            uint64_t v47 = *(v44 - 4);
            unint64_t v48 = *(v44 - 3);
            uint64_t v49 = (void *)*(v44 - 2);
            char v50 = *((unsigned char *)v44 - 8);
            uint64_t v51 = *v44;
            if (v47 == 0x706F72706D6F6567 && v48 == 0xE800000000000000) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              goto LABEL_42;
            }
            v44 += 7;
            if (!--v43)
            {
              uint64_t v169 = v46;
              uint64_t v170 = v45;
              uint64_t v171 = v47;
              unint64_t v172 = v48;
              long long v173 = v49;
              char v174 = v50;
              uint64_t v175 = v51;
              goto LABEL_34;
            }
          }
          unint64_t v48 = 0xE800000000000000;
LABEL_42:
          uint64_t v169 = v46;
          uint64_t v170 = v45;
          uint64_t v171 = v47;
          unint64_t v172 = v48;
          long long v173 = v49;
          char v174 = v50;
          uint64_t v175 = v51;
          swift_retain();
          swift_bridgeObjectRetain();
          outlined retain of Graph((uint64_t)v176);
          Graph.edge(to:)((uint64_t)&v169, v149);
          unint64_t v74 = v149[0];
          outlined init with take of MetalFunctionNode?((uint64_t)v149, (uint64_t)&v129, &demangling cache variable for type metadata for Edge?);
          if (!(void)v130) {
            goto LABEL_45;
          }
          if (v74 == -7)
          {
            outlined release of Edge?(v149);
LABEL_45:
            swift_bridgeObjectRelease();
            swift_release();
            outlined release of Graph((uint64_t)v176);
LABEL_56:
            swift_release();
            goto LABEL_17;
          }
          if ((v74 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v74 < *(void *)(v177 + 16))
          {
            unint64_t v75 = *(void *)(v177 + 48 * v74 + 32);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of NodePersonality(v75);
            outlined release of Edge?(v149);
            swift_bridgeObjectRelease();
            swift_release();
            outlined release of Graph((uint64_t)v176);
            if (v75 >> 61 || *(unsigned char *)(v75 + 80) != 6)
            {
              outlined consume of NodePersonality(v75);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_56;
            }
            long long v76 = *(void **)(v75 + 16);
            uint64_t v49 = *(void **)(v75 + 24);
            unint64_t v74 = *(void *)(v75 + 48);
            uint64_t v44 = *(void **)(v75 + 56);
            uint64_t v77 = *(void *)(v75 + 72);
            *(void *)long long v122 = *(void *)(v75 + 40);
            *(void *)long long v124 = *(void *)(v75 + 32);
            uint64_t v188 = *(void *)(v75 + 64);
            v127[0] = v77;
            outlined copy of SGDataTypeStorage(v76, v49, v124[0], v122[0], v74, (int)v44, v188, v77, 6);
            outlined consume of NodePersonality(v75);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(void *)(*(void *)v119 + 16))
            {
              swift_bridgeObjectRetain();
              unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v76, (uint64_t)v49);
              if (v79)
              {
                long long v80 = (long long *)(*(void *)(*(void *)v119 + 56) + (v78 << 6));
                long long v82 = v80[1];
                long long v81 = v80[2];
                long long v83 = *v80;
                *(_OWORD *)&v138[9] = *(long long *)((char *)v80 + 41);
                long long v137 = v82;
                *(_OWORD *)long long v138 = v81;
                long long v136 = v83;
                outlined retain of GeomPropDef((uint64_t)&v136);
                long long v84 = v49;
                id v111 = v49;
                int v85 = v188;
                outlined consume of SGDataTypeStorage(v76, v84, v124[0], v122[0], v74, (int)v44, v188, v127[0], 6);
                outlined consume of SGDataTypeStorage(v76, v111, v124[0], v122[0], v74, (int)v44, v85, v127[0], 6);
                specialized Graph.insertGeomPropGetter(_:outputType:nodeDefStore:)((uint64_t)&v136, v115, (uint64_t)log, &v163);
                uint64_t v53 = v4;
                if (!v4)
                {
                  ShaderGraphNode.out.getter((uint64_t)&v150);
                  ShaderGraphNode.out.getter((uint64_t)&v153);
                  Graph.moveEdges(from:to:)((uint64_t)&v150, (uint64_t)&v153);
                  swift_release();
                  swift_release();
                  v157[0] = v154;
                  outlined release of String((uint64_t)v157);
                  swift_release();
                  v152[0] = v151;
                  outlined release of String((uint64_t)v152);
                  outlined init with take of NodePersonality(&v163, &v160);
                  outlined release of NodePersonality((unint64_t *)&v160);
                  *(void *)&long long v159 = *((void *)&v163 + 1);
                  outlined release of [Input]((uint64_t)&v159);
                  uint64_t v186 = v164;
                  outlined release of [Input]((uint64_t)&v186);
                  outlined release of GeomPropDef((uint64_t)&v136);
                  return;
                }
                outlined release of GeomPropDef((uint64_t)&v136);
                goto LABEL_35;
              }
              outlined consume of SGDataTypeStorage(v76, v49, v124[0], v122[0], v74, (int)v44, v188, v127[0], 6);
            }
            unint64_t v113 = v76;
            uint64_t v86 = *(void *)(v114 + 16);
            LODWORD(v46) = v124[0];
            v121[0] = (int)v44;
            if (v86)
            {
              int v110 = v74;
              id v112 = v49;
              long long v87 = (void *)(v114 + 80);
              while (1)
              {
                uint64_t v88 = *(v87 - 6);
                uint64_t v89 = *(v87 - 5);
                uint64_t v90 = *(v87 - 4);
                uint64_t v44 = (void *)*(v87 - 3);
                uint64_t v46 = *(v87 - 2);
                char v91 = *((unsigned char *)v87 - 8);
                unint64_t v74 = *v87;
                if (v90 == 0x746C7561666564 && v44 == (void *)0xE700000000000000) {
                  break;
                }
                if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                  goto LABEL_68;
                }
                v87 += 7;
                if (!--v86)
                {
                  *(void *)&long long v163 = v88;
                  *((void *)&v163 + 1) = v89;
                  uint64_t v164 = v90;
                  long long v165 = v44;
                  uint64_t v166 = v46;
                  char v167 = v91;
                  unint64_t v168 = v74;
                  LODWORD(v44) = v121[0];
                  LODWORD(v74) = v110;
                  uint64_t v49 = v112;
                  LODWORD(v46) = v124[0];
                  goto LABEL_74;
                }
              }
              uint64_t v44 = (void *)0xE700000000000000;
LABEL_68:
              *(void *)&long long v163 = v88;
              *((void *)&v163 + 1) = v89;
              uint64_t v164 = v90;
              long long v165 = v44;
              uint64_t v166 = v46;
              char v167 = v91;
              unint64_t v168 = v74;
              long long v93 = *(_OWORD *)&v125[18].isa;
              long long v143 = *(_OWORD *)&v125[16].isa;
              *(_OWORD *)long long v144 = v93;
              *(_OWORD *)&v144[9] = *(_OWORD *)((char *)&v125[19].isa + 1);
              long long v94 = *(_OWORD *)&v125[10].isa;
              long long v139 = *(_OWORD *)&v125[8].isa;
              long long v140 = v94;
              long long v95 = *(_OWORD *)&v125[14].isa;
              long long v141 = *(_OWORD *)&v125[12].isa;
              long long v142 = v95;
              long long v96 = *(_OWORD *)&v125[2].isa;
              long long v136 = *(_OWORD *)&v125->isa;
              long long v137 = v96;
              long long v97 = *(_OWORD *)&v125[6].isa;
              *(_OWORD *)long long v138 = *(_OWORD *)&v125[4].isa;
              *(_OWORD *)&v138[16] = v97;
              swift_retain();
              swift_bridgeObjectRetain();
              outlined retain of Graph((uint64_t)&v136);
              Graph.edge(to:)((uint64_t)&v163, &v150);
              outlined init with take of MetalFunctionNode?((uint64_t)&v150, (uint64_t)&v153, &demangling cache variable for type metadata for Edge?);
              if (*((void *)&v153 + 1))
              {
                v157[0] = v153;
                v157[1] = v154;
                v157[2] = v155;
                uint64_t v158 = v156;
                long long v159 = v154;
                swift_retain();
                outlined retain of String((uint64_t)&v159);
                outlined release of Edge?(&v150);
                outlined release of Graph((uint64_t)&v136);
                if (one-time initialization token for logger != -1) {
                  swift_once();
                }
                uint64_t v98 = type metadata accessor for Logger();
                __swift_project_value_buffer(v98, (uint64_t)logger);
                uint64_t v185 = *(void *)&v162[0];
                outlined retain of [Input]((uint64_t)&v183);
                outlined retain of NodePersonality(&v184);
                outlined retain of [Input]((uint64_t)&v185);
                outlined retain of [Input]((uint64_t)&v183);
                outlined retain of NodePersonality(&v184);
                outlined copy of SGDataTypeStorage(v113, v112, v124[0], v122[0], v110, v121[0], v188, v127[0], 6);
                outlined retain of [Input]((uint64_t)&v185);
                loga = Logger.logObject.getter();
                os_log_type_t type = static os_log_type_t.error.getter();
                if (os_log_type_enabled(loga, type))
                {
                  uint64_t v99 = swift_slowAlloc();
                  uint64_t v108 = swift_slowAlloc();
                  *(void *)&long long v160 = v108;
                  *(_DWORD *)uint64_t v99 = 136315394;
                  *(void *)&v152[0] = 1701080942;
                  *((void *)&v152[0] + 1) = 0xE400000000000000;
                  uint64_t v186 = *((void *)&v162[0] + 1);
                  v100._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                  String.append(_:)(v100);
                  swift_bridgeObjectRelease();
                  *(void *)&v152[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v152[0], *((unint64_t *)&v152[0] + 1), (uint64_t *)&v160);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  outlined release of NodePersonality(&v184);
                  outlined release of [Input]((uint64_t)&v183);
                  outlined release of [Input]((uint64_t)&v185);
                  outlined release of NodePersonality(&v184);
                  outlined release of [Input]((uint64_t)&v183);
                  outlined release of [Input]((uint64_t)&v185);
                  *(_WORD *)(v99 + 12) = 2080;
                  swift_bridgeObjectRetain();
                  *(void *)&v152[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v113, (unint64_t)v112, (uint64_t *)&v160);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  int v101 = v188;
                  outlined consume of SGDataTypeStorage(v113, v112, v124[0], v122[0], v110, v121[0], v188, v127[0], 6);
                  outlined consume of SGDataTypeStorage(v113, v112, v124[0], v122[0], v110, v121[0], v101, v127[0], 6);
                  outlined consume of SGDataTypeStorage(v113, v112, v124[0], v122[0], v110, v121[0], v101, v127[0], 6);
                  _os_log_impl(&dword_25C27E000, loga, type, "Failed to find valid geompropvalue name for %s, given value: %s, using default value.", (uint8_t *)v99, 0x16u);
                  swift_arrayDestroy();
                  MEMORY[0x261185880](v108, -1, -1);
                  MEMORY[0x261185880](v99, -1, -1);
                }
                else
                {
                  outlined release of NodePersonality(&v184);
                  outlined release of [Input]((uint64_t)&v183);
                  outlined release of [Input]((uint64_t)&v185);
                  outlined release of NodePersonality(&v184);
                  outlined release of [Input]((uint64_t)&v183);
                  outlined release of [Input]((uint64_t)&v185);
                  int v107 = v188;
                  outlined consume of SGDataTypeStorage(v113, v112, v124[0], v122[0], v110, v121[0], v188, v127[0], 6);
                  outlined consume of SGDataTypeStorage(v113, v112, v124[0], v122[0], v110, v121[0], v107, v127[0], 6);
                }

                ShaderGraphNode.out.getter((uint64_t)v152);
                if (!v4)
                {
                  Graph.moveEdges(from:to:)((uint64_t)v152, (uint64_t)v157);
                  swift_release();
                  swift_release();
                  long long v160 = v152[1];
                  outlined release of String((uint64_t)&v160);
                  swift_release();
                  outlined release of String((uint64_t)&v159);
                  swift_bridgeObjectRelease();
                  swift_release();
                  return;
                }
                swift_release();
                outlined release of String((uint64_t)&v159);
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v53 = v4;
                goto LABEL_36;
              }
              outlined release of Graph((uint64_t)&v136);
              swift_bridgeObjectRelease();
              swift_release();
              LODWORD(v44) = v121[0];
              LODWORD(v74) = v110;
              LODWORD(v46) = v124[0];
              uint64_t v49 = v112;
            }
LABEL_74:
            if (one-time initialization token for logger == -1) {
              goto LABEL_75;
            }
            goto LABEL_84;
          }
          __break(1u);
LABEL_84:
          swift_once();
LABEL_75:
          uint64_t v102 = type metadata accessor for Logger();
          __swift_project_value_buffer(v102, (uint64_t)logger);
          *(void *)&v152[0] = *(void *)&v162[0];
          outlined retain of [Input]((uint64_t)&v183);
          outlined retain of NodePersonality(&v184);
          outlined retain of [Input]((uint64_t)v152);
          outlined retain of [Input]((uint64_t)&v183);
          outlined retain of NodePersonality(&v184);
          outlined copy of SGDataTypeStorage(v113, v49, v46, v122[0], v74, (int)v44, v188, v127[0], 6);
          outlined retain of [Input]((uint64_t)v152);
          unint64_t v126 = Logger.logObject.getter();
          os_log_type_t v120 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v126, v120))
          {
            uint64_t v103 = swift_slowAlloc();
            os_log_t logb = (os_log_t)swift_slowAlloc();
            *(void *)&long long v160 = logb;
            *(_DWORD *)uint64_t v103 = 136315394;
            *(void *)&v157[0] = 1701080942;
            *((void *)&v157[0] + 1) = 0xE400000000000000;
            *(void *)&long long v159 = *((void *)&v162[0] + 1);
            v104._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v104);
            swift_bridgeObjectRelease();
            *(void *)&v157[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(uint64_t *)&v157[0], *((unint64_t *)&v157[0] + 1), (uint64_t *)&v160);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            outlined release of NodePersonality(&v184);
            outlined release of [Input]((uint64_t)&v183);
            outlined release of [Input]((uint64_t)v152);
            outlined release of NodePersonality(&v184);
            outlined release of [Input]((uint64_t)&v183);
            outlined release of [Input]((uint64_t)v152);
            *(_WORD *)(v103 + 12) = 2080;
            swift_bridgeObjectRetain();
            *(void *)&v157[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v113, (unint64_t)v49, (uint64_t *)&v160);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            int v105 = v188;
            outlined consume of SGDataTypeStorage(v113, v49, v46, v122[0], v74, v121[0], v188, v127[0], 6);
            outlined consume of SGDataTypeStorage(v113, v49, v46, v122[0], v74, v121[0], v105, v127[0], 6);
            outlined consume of SGDataTypeStorage(v113, v49, v46, v122[0], v74, v121[0], v105, v127[0], 6);
            _os_log_impl(&dword_25C27E000, v126, v120, "Failed to find valid geomprop for node %s, given value: %s, and no default was found.", (uint8_t *)v103, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x261185880](logb, -1, -1);
            MEMORY[0x261185880](v103, -1, -1);

            swift_release();
          }
          else
          {
            swift_release();
            outlined release of NodePersonality(&v184);
            outlined release of [Input]((uint64_t)&v183);
            outlined release of [Input]((uint64_t)v152);
            outlined release of NodePersonality(&v184);
            outlined release of [Input]((uint64_t)&v183);
            outlined release of [Input]((uint64_t)v152);
            int v106 = v188;
            outlined consume of SGDataTypeStorage(v113, v49, v46, v122[0], v74, v121[0], v188, v127[0], 6);
            outlined consume of SGDataTypeStorage(v113, v49, v46, v122[0], v74, v121[0], v106, v127[0], 6);
          }
          return;
        }
LABEL_13:
        outlined release of NodeDef((uint64_t)v147);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_17:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)logger);
    *(void *)&long long v153 = *((void *)&v161 + 1);
    *(void *)&v147[0] = *(void *)&v162[0];
    outlined retain of NodePersonality(&v184);
    outlined retain of [Input]((uint64_t)&v153);
    outlined retain of [Input]((uint64_t)v147);
    outlined retain of NodePersonality(&v184);
    outlined retain of [Input]((uint64_t)&v153);
    outlined retain of [Input]((uint64_t)v147);
    long long v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      unint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      uint64_t v150 = v35;
      *(_DWORD *)unint64_t v34 = 136315138;
      *(void *)&long long v136 = 1701080942;
      *((void *)&v136 + 1) = 0xE400000000000000;
      *(void *)&long long v163 = *((void *)&v162[0] + 1);
      v36._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      *(void *)&long long v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, *((unint64_t *)&v136 + 1), &v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of NodePersonality(&v184);
      outlined release of [Input]((uint64_t)&v153);
      outlined release of [Input]((uint64_t)v147);
      outlined release of NodePersonality(&v184);
      outlined release of [Input]((uint64_t)&v153);
      outlined release of [Input]((uint64_t)v147);
      _os_log_impl(&dword_25C27E000, v32, v33, "Failed to transform geompropvalue node %s", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261185880](v35, -1, -1);
      MEMORY[0x261185880](v34, -1, -1);
LABEL_23:

      return;
    }
    outlined release of NodePersonality(&v184);
    outlined release of [Input]((uint64_t)&v153);
    outlined release of [Input]((uint64_t)v147);
    outlined release of NodePersonality(&v184);
    outlined release of [Input]((uint64_t)&v153);
    uint64_t v37 = (uint64_t *)v147;
LABEL_22:
    outlined release of [Input]((uint64_t)v37);
    goto LABEL_23;
  }
}

uint64_t specialized Graph.transformGeomPropValueNodes(surface:geometryModifier:nodeDefStore:)(NSObject *a1, uint64_t a2)
{
  uint64_t v21 = a2;
  uint64_t result = *(void *)(v2 + 64);
  unint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    uint64_t v6 = (_OWORD *)v2;
    uint64_t v7 = (unsigned char *)(swift_bridgeObjectRetain() + 72);
    unint64_t v8 = 1;
    while (1)
    {
      uint64_t v9 = *((void *)v7 - 2);
      if (v9 != -7)
      {
        char v10 = *v7;
        uint64_t v11 = *((void *)v7 - 1);
        uint64_t v13 = *((void *)v7 - 4);
        uint64_t v12 = *((void *)v7 - 3);
        unint64_t v14 = *((void *)v7 - 5);
        *(void *)&long long v16 = v14;
        *((void *)&v16 + 1) = v13;
        uint64_t v17 = v12;
        uint64_t v18 = v9;
        uint64_t v19 = v11;
        char v20 = v10;
        outlined copy of NodePersonality(v14);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized closure #1 in Graph.transformGeomPropValueNodes(surface:geometryModifier:nodeDefStore:)(&v16, a1, v21, v6);
        outlined consume of NodePersonality(v14);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (v8 >= v5) {
        break;
      }
      v7 += 48;
      if (v8++ >= v5)
      {
        __break(1u);
        return swift_bridgeObjectRelease();
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Graph.insertParamsInputs(surface:type:nodeDefStore:)(uint64_t a1, char a2)
{
  Swift::Bool v4 = v3;
  uint64_t v5 = (uint64_t)v2;
  long long v8 = v2[9];
  long long v103 = v2[8];
  v104[0] = v8;
  *(_OWORD *)((char *)v104 + 9) = *(_OWORD *)((char *)v2 + 153);
  long long v9 = v2[5];
  long long v99 = v2[4];
  long long v100 = v9;
  long long v10 = v2[7];
  long long v101 = v2[6];
  long long v102 = v10;
  long long v11 = v2[1];
  v98[0] = *v2;
  v98[1] = v11;
  long long v12 = v2[3];
  v98[2] = v2[2];
  v98[3] = v12;
  outlined retain of Graph((uint64_t)v98);
  Graph.connectedUpstreamSubgraph(rootedAt:)(a1, (uint64_t)&v67);
  uint64_t v13 = v67;
  outlined release of Graph((uint64_t)v98);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_AH2IDVs5NeverOTg504_s11D159Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFAK2IDVAKcfu_33_300d98c1e43c0bc1dedcebf2cdbfb115AkNTf3nnnpk_nTf1cn_nTm(v13);
  swift_bridgeObjectRelease();
  uint64_t v58 = specialized Set.init<A>(_:)(v14);
  swift_bridgeObjectRelease();
  if (a2)
  {
    uint64_t v54 = 0x797274656D6F6567;
    if (one-time initialization token for geometry_parameters_private != -1) {
      swift_once();
    }
    long long v56 = (void *)0xE800000000000000;
    uint64_t v15 = &static MetalDataType.re.geometry_parameters_private;
    goto LABEL_7;
  }
  uint64_t v54 = 0x65636166727573;
  if (one-time initialization token for surface_parameters_private != -1) {
    goto LABEL_28;
  }
  while (1)
  {
    long long v56 = (void *)0xE700000000000000;
    uint64_t v15 = &static MetalDataType.re.surface_parameters_private;
LABEL_7:
    uint64_t v16 = *v15;
    swift_retain();
    v105[0] = v99;
    long long v80 = (void *)MEMORY[0x263F8EE78];
    int64_t v17 = *(void *)(v99 + 16);
    uint64_t v106 = v16;
    if (!v17) {
      break;
    }
    uint64_t v18 = v99 + 32;
    swift_bridgeObjectRetain_n();
    unint64_t v19 = 0;
    do
    {
      uint64_t v20 = v18 + 48 * v19;
      uint64_t v21 = *(void *)(v20 + 24);
      if (v21 == -7)
      {
        if ((uint64_t)++v19 >= v17) {
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v23 = *(void *)v20;
        uint64_t v22 = *(void *)(v20 + 8);
        uint64_t v24 = *(void *)(v20 + 16);
        char v25 = *(unsigned char *)(v20 + 40);
        uint64_t v26 = *(void *)(v20 + 32);
        *(void *)&long long v67 = v23;
        *((void *)&v67 + 1) = v22;
        *(void *)&long long v68 = v24;
        *((void *)&v68 + 1) = v21;
        *(void *)&long long v69 = v26;
        BYTE8(v69) = v25;
        outlined copy of NodePersonality(v23);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #1 in Graph.insertParamsInputs(surface:type:nodeDefStore:)((uint64_t)&v67, v58, v54, v56, v106, v5, &v80);
        if (v3)
        {
          outlined consume of NodePersonality(v23);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined release of [Input]((uint64_t)v105);
          outlined release of [Input]((uint64_t)v105);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        ++v19;
        outlined consume of NodePersonality(v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((uint64_t)v19 >= v17)
        {
LABEL_14:
          outlined release of [Input]((uint64_t)v105);
          outlined release of [Input]((uint64_t)v105);
          uint64_t v16 = v106;
          goto LABEL_15;
        }
      }
    }
    while (v19 < v17);
    __break(1u);
LABEL_28:
    swift_once();
  }
LABEL_15:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v80[2])
  {
    long long v59 = v80;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25C418EE0;
    *(void *)(inited + 32) = 7632239;
    *(void *)(inited + 40) = 0xE300000000000000;
    *(void *)(inited + 48) = v16;
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = 12324;
    *(void *)(v28 + 24) = 0xE200000000000000;
    unint64_t v29 = v28 | 0x6000000000000000;
    unint64_t v30 = *(void *)(v5 + 40);
    swift_retain();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v30, MEMORY[0x263F8EE78], inited, v29, v5 + 64, v5, &v81);
    long long v57 = v82;
    unint64_t v31 = v81;
    uint64_t v32 = v83;
    uint64_t v55 = v84;
    char v33 = v85;
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    ShaderGraphNode.out.getter((uint64_t)v86);
    if (v4)
    {

      outlined init with take of NodePersonality(&v81, &v94);
      uint64_t v92 = *((void *)&v82 + 1);
      uint64_t v93 = v82;
      unint64_t v60 = v31;
      long long v61 = v57;
      uint64_t v62 = v32;
      uint64_t v63 = v55;
      char v64 = v33;
      uint64_t v65 = 7632239;
      unint64_t v66 = 0xE300000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)&v60);
      outlined init with take of UserGraphError.ErrorType((uint64_t)&v60, (uint64_t)&v67);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      long long v79 = 0uLL;
      swift_allocError();
      *unint64_t v34 = v67;
      long long v35 = v71;
      long long v37 = v68;
      long long v36 = v69;
      v34[3] = v70;
      v34[4] = v35;
      v34[1] = v37;
      _OWORD v34[2] = v36;
      long long v38 = v75;
      long long v40 = v72;
      long long v39 = v73;
      v34[7] = v74;
      v34[8] = v38;
      v34[5] = v40;
      v34[6] = v39;
      long long v41 = v79;
      long long v43 = v76;
      long long v42 = v77;
      v34[11] = v78;
      v34[12] = v41;
      v34[9] = v43;
      v34[10] = v42;
      outlined retain of NodePersonality(&v94);
      outlined retain of [Input]((uint64_t)&v93);
      outlined retain of [Input]((uint64_t)&v92);
      swift_willThrow();
      swift_release();
      outlined release of NodePersonality(&v94);
      outlined release of [Input]((uint64_t)&v93);
      outlined release of [Input]((uint64_t)&v92);
    }
    else
    {
      uint64_t v45 = v59[2];
      if (v45)
      {
        swift_bridgeObjectRetain();
        uint64_t v46 = v59 + 10;
        do
        {
          uint64_t v47 = *(v46 - 6);
          uint64_t v48 = *(v46 - 5);
          uint64_t v49 = *(v46 - 4);
          uint64_t v50 = *(v46 - 3);
          uint64_t v51 = *(v46 - 2);
          char v52 = *((unsigned char *)v46 - 8);
          uint64_t v53 = *v46;
          v46 += 7;
          v95[0] = v47;
          v95[1] = v48;
          v95[2] = v49;
          unint64_t v95[3] = v50;
          v95[4] = v51;
          char v96 = v52;
          uint64_t v97 = v53;
          swift_retain();
          swift_bridgeObjectRetain();
          Graph.connect(_:to:)((uint64_t)v86, (unint64_t)v95);
          swift_bridgeObjectRelease();
          swift_release();
          --v45;
        }
        while (v45);
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      swift_release();
      outlined init with take of NodePersonality(&v81, &v91);
      outlined release of NodePersonality(&v91);
      uint64_t v90 = v82;
      outlined release of [Input]((uint64_t)&v90);
      uint64_t v89 = *((void *)&v82 + 1);
      outlined release of [Input]((uint64_t)&v89);
      swift_bridgeObjectRelease();
      swift_release();
      long long v88 = v87;
      outlined release of String((uint64_t)&v88);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t sub_25C351E70()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void *specialized closure #1 in Graph.resolveMaterialXNodeDefs(connectedTo:nodeDefStore:shaderType:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v131 = a7;
  uint64_t v132 = a3;
  uint64_t v133 = a4;
  uint64_t v134 = a6;
  uint64_t v10 = *a1;
  Swift::UInt v137 = a5;
  *(void *)&long long v138 = v10;
  uint64_t v11 = a1[2];
  *((void *)&v138 + 1) = a1[1];
  *(void *)&long long v139 = v11;
  uint64_t v12 = a1[4];
  *((void *)&v139 + 1) = a1[3];
  uint64_t v140 = v12;
  int v141 = *((unsigned __int8 *)a1 + 40);
  uint64_t v135 = type metadata accessor for NodeDef.Implementation.Kind(0);
  uint64_t v13 = MEMORY[0x270FA5388](v135);
  uint64_t v136 = (uint64_t)&v128 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (uint64_t *)((char *)&v128 - v15);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NodeDef.Implementation?);
  MEMORY[0x270FA5388](v17 - 8);
  unint64_t v19 = (char *)&v128 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for NodeDef.Implementation(0);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  unint64_t v23 = (char *)&v128 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of NodePersonality(a1, &v181);
  uint64_t result = outlined init with take of NodePersonality(&v181, &v183);
  if (v183 >> 61 == 5)
  {
    uint64_t v25 = v183 & 0x1FFFFFFFFFFFFFFFLL;
    v183 &= 0x1FFFFFFFFFFFFFFFuLL;
    if (*(void *)(a2 + 16))
    {
      uint64_t v129 = v23;
      uint64_t v130 = v7;
      uint64_t v26 = *(void *)(v25 + 16);
      uint64_t v27 = *(void *)(v25 + 24);
      swift_bridgeObjectRetain_n();
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
      if (v29)
      {
        unint64_t v30 = (_OWORD *)(*(void *)(a2 + 56) + 144 * v28);
        v182[0] = *v30;
        long long v31 = v30[4];
        long long v33 = v30[1];
        long long v32 = v30[2];
        v182[3] = v30[3];
        v182[4] = v31;
        v182[1] = v33;
        _OWORD v182[2] = v32;
        long long v34 = v30[8];
        long long v36 = v30[5];
        long long v35 = v30[6];
        v182[7] = v30[7];
        v182[8] = v34;
        v182[5] = v36;
        v182[6] = v35;
        long long v37 = v30[7];
        long long v151 = v30[6];
        long long v152 = v37;
        long long v153 = v30[8];
        long long v38 = v30[3];
        long long v147 = v30[2];
        long long v148 = v38;
        long long v39 = v30[5];
        long long v149 = v30[4];
        long long v150 = v39;
        long long v40 = v30[1];
        long long v145 = *v30;
        long long v146 = v40;
        outlined retain of NodeDef((uint64_t)v182);
        swift_bridgeObjectRelease_n();
        Swift::UInt v41 = a1[3];
        if (!specialized Set.contains(_:)(v41, v137)) {
          return (void *)outlined release of NodeDef((uint64_t)v182);
        }
        Swift::UInt v137 = v41;
        uint64_t v42 = v134;
        NodeDefStore.implementation(for:target:)((uint64_t *)v182, v134, v133, (uint64_t)v19);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
        {
          long long v43 = v182[0];
          swift_retain();
          *uint64_t v16 = specialized static NodeDefStore.inferLibraryFunctionName(forNodeDefName:)(v43, *((void **)&v43 + 1));
          v16[1] = v44;
          swift_storeEnumTagMultiPayload();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v45 = swift_allocObject();
          *(_OWORD *)(v45 + 16) = xmmword_25C4195A0;
          *(void *)(v45 + 32) = v42;
          *(void *)&long long v163 = v45;
          specialized Array._endMutation()();
          uint64_t v46 = specialized Set.init<A>(_:)(v163);
          swift_bridgeObjectRelease();
          uint64_t v47 = (uint64_t)v129;
          outlined init with take of NodeDef.Implementation.Kind((uint64_t)v16, (uint64_t)v129, type metadata accessor for NodeDef.Implementation.Kind);
          *(void *)(v47 + *(int *)(v20 + 20)) = v46;
          uint64_t v48 = v47;
          outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for NodeDef.Implementation?);
        }
        else
        {
          uint64_t v48 = (uint64_t)v129;
          outlined init with take of NodeDef.Implementation.Kind((uint64_t)v19, (uint64_t)v129, type metadata accessor for NodeDef.Implementation);
        }
        uint64_t v49 = v136;
        outlined init with copy of NodeDef.Implementation.Kind(v48, v136, type metadata accessor for NodeDef.Implementation.Kind);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            swift_bridgeObjectRelease();
            uint64_t v70 = v49
                + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                         + 48);
            long long v160 = v151;
            long long v161 = v152;
            long long v162 = v153;
            long long v158 = v149;
            long long v159 = v150;
            long long v156 = v147;
            long long v157 = v148;
            long long v154 = v145;
            long long v155 = v146;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi19_((uint64_t)&v154);
            outlined init with take of UserGraphError.ErrorType((uint64_t)&v154, (uint64_t)&v163);
            *(void *)&long long v175 = 0xD000000000000042;
            *((void *)&v175 + 1) = 0x800000025C425050;
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            swift_allocError();
            _OWORD *v71 = v163;
            long long v72 = v167;
            long long v74 = v164;
            long long v73 = v165;
            void v71[3] = v166;
            v71[4] = v72;
            v71[1] = v74;
            v71[2] = v73;
            long long v75 = v171;
            long long v77 = v168;
            long long v76 = v169;
            v71[7] = v170;
            v71[8] = v75;
            v71[5] = v77;
            v71[6] = v76;
            long long v78 = v175;
            long long v80 = v172;
            long long v79 = v173;
            v71[11] = v174;
            v71[12] = v78;
            v71[9] = v80;
            v71[10] = v79;
            swift_willThrow();
            outlined destroy of NodeDef.Implementation(v48, type metadata accessor for NodeDef.Implementation);
            uint64_t v81 = type metadata accessor for URL();
            return (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v81 - 8) + 8))(v70, v81);
          case 2u:
            swift_bridgeObjectRelease();
            long long v160 = v151;
            long long v161 = v152;
            long long v162 = v153;
            long long v156 = v147;
            long long v157 = v148;
            long long v158 = v149;
            long long v159 = v150;
            long long v154 = v145;
            long long v155 = v146;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi19_((uint64_t)&v154);
            *(void *)&long long v163 = 0;
            *((void *)&v163 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(60);
            v82._uint64_t object = (void *)0x800000025C424F80;
            v82._char countAndFlagsBits = 0xD000000000000038;
            String.append(_:)(v82);
            v142[0]._char countAndFlagsBits = 1701080942;
            v142[0]._uint64_t object = (void *)0xE400000000000000;
            uint64_t v144 = v137;
            v83._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v83);
            swift_bridgeObjectRelease();
            String.append(_:)(v142[0]);
            swift_bridgeObjectRelease();
            uint64_t v68 = 10535;
            unint64_t v69 = 0xE200000000000000;
            goto LABEL_16;
          case 3u:
            outlined release of NodeDef((uint64_t)v182);
            uint64_t v96 = *(void *)v49;
            uint64_t v95 = *(void *)(v49 + 8);
            uint64_t v97 = a1[2];
            uint64_t v180 = v97;
            uint64_t v98 = *(void *)(v97 + 16);
            if (v98)
            {
              if (v98 == 1)
              {
                uint64_t v99 = *(void *)(v97 + 40);
                uint64_t v100 = swift_allocObject();
                *(void *)(v100 + 16) = v96;
                *(void *)(v100 + 24) = v95;
                *(void *)(v100 + 32) = v99;
                uint64_t v101 = v131;
                long long v102 = *(void **)(v131 + 64);
                swift_retain_n();
                swift_retain();
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *(void *)(v101 + 64) = v102;
                if (isUniquelyReferenced_nonNull_native)
                {
                  unint64_t v104 = v137;
                  if ((v137 & 0x8000000000000000) == 0) {
                    goto LABEL_21;
                  }
                }
                else
                {
                  long long v102 = specialized _ArrayBuffer._consumeAndCreateNew()(v102);
                  *(void *)(v101 + 64) = v102;
                  unint64_t v104 = v137;
                  if ((v137 & 0x8000000000000000) == 0)
                  {
LABEL_21:
                    if (v104 < v102[2])
                    {
                      int v105 = &v102[6 * v104];
                      unint64_t v106 = v105[4];
                      v105[4] = v100 | 0x2000000000000000;
                      outlined consume of NodePersonality(v106);
                      swift_release();
                      swift_release();
                      return (void *)outlined destroy of NodeDef.Implementation(v48, type metadata accessor for NodeDef.Implementation);
                    }
LABEL_30:
                    __break(1u);
                    JUMPOUT(0x25C3529E4);
                  }
                }
                __break(1u);
                goto LABEL_30;
              }
              swift_bridgeObjectRelease();
              long long v154 = v138;
              long long v155 = v139;
              *(void *)&long long v156 = v140;
              BYTE8(v156) = v141 & 1;
              _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi30_((uint64_t)&v154);
              outlined init with take of UserGraphError.ErrorType((uint64_t)&v154, (uint64_t)&v163);
              *(void *)&long long v175 = 0xD000000000000045;
              *((void *)&v175 + 1) = 0x800000025C425000;
              lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
              swift_allocError();
              *long long v118 = v163;
              long long v119 = v167;
              long long v121 = v164;
              long long v120 = v165;
              v118[3] = v166;
              v118[4] = v119;
              v118[1] = v121;
              v118[2] = v120;
              long long v122 = v171;
              long long v124 = v168;
              long long v123 = v169;
              v118[7] = v170;
              char v118[8] = v122;
              v118[5] = v124;
              v118[6] = v123;
              long long v125 = v175;
              long long v127 = v172;
              long long v126 = v173;
              v118[11] = v174;
              v118[12] = v125;
              v118[9] = v127;
              v118[10] = v126;
              uint64_t v178 = a1[1];
              outlined retain of NodePersonality(&v181);
              outlined retain of [Input]((uint64_t)&v178);
              long long v117 = &v180;
            }
            else
            {
              swift_bridgeObjectRelease();
              long long v154 = v138;
              long long v155 = v139;
              *(void *)&long long v156 = v140;
              BYTE8(v156) = v141 & 1;
              _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi30_((uint64_t)&v154);
              outlined init with take of UserGraphError.ErrorType((uint64_t)&v154, (uint64_t)&v163);
              *(void *)&long long v175 = 0xD00000000000003FLL;
              *((void *)&v175 + 1) = 0x800000025C424FC0;
              lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
              swift_allocError();
              *int v107 = v163;
              long long v108 = v167;
              long long v110 = v164;
              long long v109 = v165;
              v107[3] = v166;
              v107[4] = v108;
              v107[1] = v110;
              v107[2] = v109;
              long long v111 = v171;
              long long v113 = v168;
              long long v112 = v169;
              v107[7] = v170;
              char v107[8] = v111;
              unint64_t v107[5] = v113;
              v107[6] = v112;
              long long v114 = v175;
              long long v116 = v172;
              long long v115 = v173;
              v107[11] = v174;
              v107[12] = v114;
              v107[9] = v116;
              v107[10] = v115;
              uint64_t v179 = a1[1];
              outlined retain of NodePersonality(&v181);
              outlined retain of [Input]((uint64_t)&v180);
              long long v117 = &v179;
            }
            outlined retain of [Input]((uint64_t)v117);
LABEL_26:
            swift_willThrow();
            return (void *)outlined destroy of NodeDef.Implementation(v48, type metadata accessor for NodeDef.Implementation);
          default:
            outlined release of NodeDef((uint64_t)v182);
            long long v61 = *(_OWORD *)(v49 + 144);
            v142[8] = *(Swift::String *)(v49 + 128);
            v143[0] = v61;
            *(_OWORD *)((char *)v143 + 9) = *(_OWORD *)(v49 + 153);
            Swift::String v62 = *(Swift::String *)(v49 + 80);
            v142[4] = *(Swift::String *)(v49 + 64);
            v142[5] = v62;
            Swift::String v63 = *(Swift::String *)(v49 + 112);
            v142[6] = *(Swift::String *)(v49 + 96);
            v142[7] = v63;
            Swift::String v64 = *(Swift::String *)(v49 + 16);
            v142[0] = *(Swift::String *)v49;
            v142[1] = v64;
            Swift::String v65 = *(Swift::String *)(v49 + 48);
            v142[2] = *(Swift::String *)(v49 + 32);
            v142[3] = v65;
            outlined release of Graph((uint64_t)v142);
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_((uint64_t)&v154);
            *(void *)&long long v163 = 0;
            *((void *)&v163 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(87);
            v66._char countAndFlagsBits = 0xD00000000000004ALL;
            v66._uint64_t object = (void *)0x800000025C4250A0;
            String.append(_:)(v66);
            v67._char countAndFlagsBits = 0xD00000000000003ELL;
            v67._uint64_t object = (void *)0x800000025C4250F0;
            String.append(_:)(v67);
            uint64_t v68 = 0x6C6C616320736920;
            unint64_t v69 = 0xEB000000002E6465;
LABEL_16:
            String.append(_:)(*(Swift::String *)&v68);
            long long v84 = v163;
            outlined init with take of UserGraphError.ErrorType((uint64_t)&v154, (uint64_t)&v163);
            long long v175 = v84;
            lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
            swift_allocError();
            *char v85 = v163;
            long long v86 = v167;
            long long v88 = v164;
            long long v87 = v165;
            v85[3] = v166;
            v85[4] = v86;
            v85[1] = v88;
            _OWORD v85[2] = v87;
            long long v89 = v171;
            long long v91 = v168;
            long long v90 = v169;
            v85[7] = v170;
            v85[8] = v89;
            void v85[5] = v91;
            v85[6] = v90;
            long long v92 = v175;
            long long v94 = v172;
            long long v93 = v173;
            v85[11] = v174;
            v85[12] = v92;
            v85[9] = v94;
            v85[10] = v93;
            goto LABEL_26;
        }
      }
      swift_bridgeObjectRelease_n();
    }
    long long v154 = v138;
    long long v155 = v139;
    *(void *)&long long v156 = v140;
    BYTE8(v156) = v141 & 1;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi17_((uint64_t)&v154);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v154, (uint64_t)&v163);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v175 = 0uLL;
    swift_allocError();
    *uint64_t v50 = v163;
    long long v51 = v167;
    long long v53 = v164;
    long long v52 = v165;
    _OWORD v50[3] = v166;
    v50[4] = v51;
    v50[1] = v53;
    v50[2] = v52;
    long long v54 = v171;
    long long v56 = v168;
    long long v55 = v169;
    v50[7] = v170;
    v50[8] = v54;
    v50[5] = v56;
    v50[6] = v55;
    long long v57 = v175;
    long long v59 = v172;
    long long v58 = v173;
    v50[11] = v174;
    v50[12] = v57;
    v50[9] = v59;
    v50[10] = v58;
    uint64_t v60 = a1[2];
    uint64_t v177 = a1[1];
    uint64_t v176 = v60;
    outlined retain of NodePersonality(&v181);
    outlined retain of [Input]((uint64_t)&v177);
    outlined retain of [Input]((uint64_t)&v176);
    return (void *)swift_willThrow();
  }
  return result;
}

uint64_t sub_25C3529F4()
{
  outlined consume of SGDataTypeStorage(*(void **)(v0 + 16), *(id *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));
  swift_release();
  return MEMORY[0x270FA0238](v0, 96, 15);
}

uint64_t sub_25C352A50()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t *outlined release of Input?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined retain of SGDataTypeStorage(uint64_t a1)
{
  return a1;
}

uint64_t specialized ContiguousArray.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v2 = v4;
  if (!isUniquelyReferenced_nonNull_native || v5 - v7 > *(void *)(v4 + 24) >> 1)
  {
    MEMORY[0x261184990]();
    uint64_t v4 = *v2;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MTLLibrary);
  swift_arrayDestroy();
  if (!v7) {
    goto LABEL_17;
  }
  uint64_t v10 = *(void *)(v4 + 16);
  BOOL v11 = __OFSUB__(v10, a2);
  uint64_t v12 = v10 - a2;
  if (v11) {
    goto LABEL_25;
  }
  if (v12 < 0)
  {
LABEL_27:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v13 = (const void *)(v4 + 32 + 8 * a2);
  if (a1 != a2 || v4 + 32 + 8 * a1 >= (unint64_t)v13 + 8 * v12) {
    memmove((void *)(v4 + 32 + 8 * a1), v13, 8 * v12);
  }
  uint64_t v14 = *(void *)(v4 + 16);
  BOOL v11 = __OFADD__(v14, v8);
  uint64_t v15 = v14 - v7;
  if (v11)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  *(void *)(v4 + 16) = v15;
LABEL_17:
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_25C352F44()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_25C352F84()
{
  outlined consume of NodePersonality(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 57, 7);
}

void partial apply for implicit closure #8 in closure #1 in Graph.transformRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 40);
}

uint64_t sub_25C352FD8()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)()
{
  return specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_25C353018()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C353028()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C353038()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_25C353048()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi17_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x4800000000000000;
  return result;
}

uint64_t outlined init with take of NodeDef.Implementation.Kind(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined consume of OrderedSet<Input>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of OrderedSet<Input>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined retain of GeomPropDef(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of GeomPropDef.GeomProp(v2, v3, v4);
  return a1;
}

uint64_t outlined release of GeomPropDef(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of GeomPropDef.GeomProp(v2, v3, v4);
  return a1;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi31_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x8000000000000000;
  return result;
}

uint64_t lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CharacterSet();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi32_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x8400000000000000;
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi33_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x8800000000000000;
  return result;
}

uint64_t partial apply for closure #12 in closure #1 in Graph.resolveSwizzleNodes(nodeDefStore:)(Swift::Int a1, unint64_t a2)
{
  return closure #12 in closure #1 in Graph.resolveSwizzleNodes(nodeDefStore:)(a1, a2);
}

uint64_t outlined copy of Graph.Adjacent?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined init with copy of NodeDef.Implementation.Kind(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of NodeDef.Implementation(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25C3533FC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(*(void *)(v0 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(*(void *)(v0 + 144));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 185, 7);
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi8_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x2400000000000000;
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in Graph.mapStringInputs(nodeDefStore:)(uint64_t a1, uint64_t *a2)
{
  return closure #1 in closure #1 in Graph.mapStringInputs(nodeDefStore:)(a1, a2, *(unsigned char **)(v2 + 16));
}

uint64_t outlined retain of NodeDef.IOSpec(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ShaderGraphNode?(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t outlined retain of (Input, (Input, Input))(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of (Input, (Input, Input))(uint64_t a1)
{
  return a1;
}

Swift::Void __swiftcall OrderedSet.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  type metadata accessor for ContiguousArray();
  ContiguousArray.removeAll(keepingCapacity:)(keepingCapacity);
  if (!keepingCapacity)
  {
    swift_release();
    *uint64_t v1 = 0;
    return;
  }
  if (!*v1) {
    return;
  }
  OrderedSet._ensureUnique()();
  uint64_t v3 = *v1;
  if (!*v1)
  {
LABEL_16:
    __break(1u);
    return;
  }
  uint64_t v4 = (*(void *)(v3 + 16) & 0x3FLL) << *(void *)(v3 + 16);
  BOOL v5 = __OFADD__(v4, 64);
  uint64_t v6 = v4 + 64;
  if (v5)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = v6 - 1;
  if (v6 < 1) {
    uint64_t v7 = v6 + 62;
  }
  if (v6 < -62) {
    goto LABEL_15;
  }
  if ((unint64_t)(v6 + 62) >= 0x7F)
  {
    bzero((void *)(v3 + 32), 8 * (v7 >> 6));
  }
}

void OrderedSet.remove(at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = OrderedSet._bucket(for:)(a1, *v2, v2[1], *(void *)(a2 + 16));
  OrderedSet._removeExistingMember(at:in:)(a1, v5, a2);
}

void OrderedSet.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  if (!*v3) {
    goto LABEL_14;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return;
  }
  if (v9 < 1) {
    return;
  }
  uint64_t v10 = *(void *)(a3 + 16);
  swift_retain();
  uint64_t v11 = ContiguousArray.count.getter();
  swift_release();
  BOOL v12 = __OFSUB__(v11, v9);
  uint64_t v13 = v11 - v9;
  if (v12) {
    goto LABEL_17;
  }
  swift_retain();
  swift_retain();
  uint64_t v14 = ContiguousArray.count.getter();
  swift_release();
  swift_release();
  if (v14 >= 0) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = v14 + 1;
  }
  if (v13 <= v15 >> 1 || (uint64_t v16 = *(void *)(a3 + 24), v13 < OrderedSet._minimumCapacity.getter(v8)))
  {
    type metadata accessor for ContiguousArray();
    swift_getWitnessTable();
    RangeReplaceableCollection.removeSubrange(_:)();
    OrderedSet._regenerateHashTable()();
    return;
  }
  OrderedSet._ensureUnique()();
  uint64_t v17 = *v3;
  if (!*v4) {
    goto LABEL_18;
  }
  swift_retain();
  closure #1 in OrderedSet.removeSubrange(_:)((uint64_t *)(v17 + 16), v17 + 32, (uint64_t)v4, a1, a2, v10, v16);
  swift_release();
LABEL_14:
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  RangeReplaceableCollection.removeSubrange(_:)();
}

Swift::Void __swiftcall OrderedSet.removeLast(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v2 = v1;
  if (ContiguousArray.count.getter() < a1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = ContiguousArray.count.getter();
  BOOL v5 = __OFSUB__(v4, a1);
  uint64_t v6 = v4 - a1;
  if (v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v7 = ContiguousArray.count.getter();
  if (v7 < v6)
  {
LABEL_11:
    __break(1u);
    return;
  }
  OrderedSet.removeSubrange(_:)(v6, v7, v2);
}

Swift::Void __swiftcall OrderedSet.removeFirst(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v2 = v1;
  if (ContiguousArray.count.getter() < a1)
  {
LABEL_7:
    __break(1u);
    return;
  }
  OrderedSet.removeSubrange(_:)(0, a1, v2);
}

void closure #1 in OrderedSet.removeSubrange(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v58 = a7;
  uint64_t v56 = a2;
  uint64_t v9 = a1;
  uint64_t v10 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v45 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = v12;
  uint64_t v57 = v13;
  uint64_t v14 = ContiguousArray.subscript.getter();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  unint64_t v20 = v19;
  uint64_t v21 = ArraySlice.startIndex.getter();
  uint64_t v44 = v16;
  uint64_t v55 = v18;
  uint64_t v47 = a6;
  if (v21 == ArraySlice.endIndex.getter())
  {
    swift_unknownObjectRelease();
    uint64_t v22 = v58;
LABEL_9:
    v59[0] = v46;
    v59[1] = a5;
    uint64_t v60 = *(void *)(v57 + 8);
    uint64_t v40 = type metadata accessor for ContiguousArray();
    uint64_t WitnessTable = swift_getWitnessTable();
    _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)((uint64_t)v59, (uint64_t)&v60, v9, v56, v40, WitnessTable, v22);
  }
  else
  {
    uint64_t v43 = a5;
    uint64_t v52 = v10 + 16;
    uint64_t v53 = v20 >> 1;
    uint64_t v48 = (void (**)(uint64_t, uint64_t))(v10 + 8);
    unint64_t v49 = v20;
    uint64_t v54 = v21;
    uint64_t v23 = v21;
    uint64_t v25 = v44;
    uint64_t v24 = (uint64_t)v45;
    uint64_t v26 = v14;
    uint64_t v27 = v47;
    uint64_t v28 = v55;
    uint64_t v50 = v26;
    uint64_t v51 = v10;
    while (1)
    {
      ArraySlice._hoistableIsNativeTypeChecked()();
      if (v54 < v28 || v53 <= v23) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v24, v25 + *(void *)(v10 + 72) * v23, v27);
      uint64_t v29 = v57;
      v59[0] = *(void *)(v57 + 8);
      uint64_t v30 = type metadata accessor for ContiguousArray();
      uint64_t v31 = swift_getWitnessTable();
      long long v32 = v9;
      long long v33 = v9;
      uint64_t v34 = v56;
      uint64_t v35 = v58;
      uint64_t v36 = _HashTable.UnsafeHandle._find<A>(_:in:)(v24, (uint64_t)v59, v32, v56, v30, v31, v58);
      if (v37) {
        goto LABEL_11;
      }
      ++v23;
      MEMORY[0x270FA5388](v36);
      *(&v42 - 4) = v27;
      *(&v42 - 3) = v35;
      *(&v42 - 2) = v29;
      _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v38, (uint64_t (*)(unint64_t, uint64_t))partial apply for closure #1 in closure #1 in OrderedSet.removeSubrange(_:), (uint64_t)(&v42 - 6), v33, v34);
      (*v48)(v24, v27);
      uint64_t v28 = v55;
      uint64_t v39 = ArraySlice.endIndex.getter();
      uint64_t v9 = v33;
      uint64_t v10 = v51;
      if (v23 == v39)
      {
        swift_unknownObjectRelease();
        uint64_t v22 = v58;
        a5 = v43;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
}

void OrderedSet.removeSubrange<A>(_:)(uint64_t a1, uint64_t a2)
{
  swift_getWitnessTable();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  OrderedSet.removeSubrange(_:)(v3, v4, a2);
}

void OrderedSet.removeLast()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v18 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  uint64_t v19 = v2[1];
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  if (!v9)
  {
    swift_getWitnessTable();
    swift_getWitnessTable();
    RangeReplaceableCollection<>.removeLast()();
    return;
  }
  uint64_t v17 = a2;
  swift_retain();
  uint64_t v10 = ContiguousArray.count.getter();
  swift_release();
  uint64_t v11 = v10 - 1;
  if (__OFSUB__(v10, 1)) {
    goto LABEL_11;
  }
  uint64_t v12 = v9;
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = OrderedSet._minimumCapacity.getter(v12);
  swift_getWitnessTable();
  swift_getWitnessTable();
  if (v11 < v14)
  {
    RangeReplaceableCollection<>.removeLast()();
    OrderedSet._regenerateHashTable()();
    return;
  }
  RangeReplaceableCollection<>.removeLast()();
  OrderedSet._ensureUnique()();
  uint64_t v15 = *v3;
  uint64_t v16 = v17;
  if (!*v3) {
    goto LABEL_12;
  }
  swift_retain();
  closure #1 in OrderedSet.removeLast()((void *)(v15 + 16), v15 + 32, (uint64_t)v8, (uint64_t)v3, v6, v13);
  swift_release();
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v16, v8, v6);
}

unint64_t closure #1 in OrderedSet.removeLast()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = 1 << *a1;
  BOOL v13 = __OFSUB__(v12, 1);
  uint64_t v14 = v12 - 1;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    uint64_t v15 = v14 & result;
    uint64_t v16 = _HashTable.UnsafeHandle._startIterator(bucket:)(v14 & result, a1, a2);
    uint64_t v25 = a1;
    uint64_t v26 = a2;
    uint64_t v27 = v15;
    uint64_t v28 = v16;
    uint64_t v29 = v17;
    uint64_t v30 = v18;
    char v31 = 0;
    swift_retain();
    uint64_t v19 = ContiguousArray.count.getter();
    uint64_t v20 = swift_release();
    if (v16)
    {
      do
      {
        uint64_t v21 = -1 << *v25;
        unint64_t v22 = (v21 ^ ~v16) + ((uint64_t)v25[1] >> 6);
        if (v22 >= ~v21) {
          uint64_t v23 = ~v21;
        }
        else {
          uint64_t v23 = 0;
        }
        if (v22 - v23 == v19) {
          break;
        }
        _HashTable.BucketIterator.advance()();
        uint64_t v16 = v28;
      }
      while (v28);
      uint64_t v15 = v27;
    }
    MEMORY[0x270FA5388](v20);
    void v24[2] = a5;
    v24[3] = a6;
    v24[4] = a4;
    return _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v15, (uint64_t (*)(unint64_t, uint64_t))partial apply for closure #1 in closure #1 in OrderedSet.removeLast(), (uint64_t)v24, a1, a2);
  }
  return result;
}

uint64_t closure #1 in closure #1 in OrderedSet.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  ContiguousArray.subscript.getter();
  uint64_t v8 = dispatch thunk of Hashable._rawHashValue(seed:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a4);
  return v8;
}

void OrderedSet.removeFirst()(uint64_t a1)
{
  if (Collection.isEmpty.getter()) {
    __break(1u);
  }
  else {
    OrderedSet.remove(at:)(0, a1);
  }
}

void OrderedSet.removeAll(where:)()
{
}

uint64_t partial apply for closure #1 in closure #1 in OrderedSet.removeLast()(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in OrderedSet.removeSubrange(_:)(a1, a2, *(void *)(v2 + 32), *(void *)(v2 + 16));
}

uint64_t MaterialXDataType.nodeDefinitionMaterialXDataType.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_bridgeObjectRetain();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t GeomPropDef.GeomProp.nodeDefinitionGeomProp.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if (a3)
  {
    *(void *)a4 = result;
    *(void *)(a4 + 8) = a2;
    *(unsigned char *)(a4 + 16) = 1;
    return swift_bridgeObjectRetain();
  }
  else
  {
    switch((char)result)
    {
      case 1:
        long long v4 = xmmword_25C41BE30;
        goto LABEL_10;
      case 2:
        long long v4 = xmmword_25C41C020;
        goto LABEL_10;
      case 3:
        long long v4 = xmmword_25C41C010;
        goto LABEL_10;
      case 4:
        long long v4 = xmmword_25C41A120;
        goto LABEL_10;
      case 5:
        long long v4 = xmmword_25C4195B0;
LABEL_10:
        *(_OWORD *)a4 = v4;
        *(unsigned char *)(a4 + 16) = 0;
        break;
      default:
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(unsigned char *)(a4 + 16) = 0;
        break;
    }
  }
  return result;
}

uint64_t GeomPropDef.BuiltinGeomProp.nodeDefinitionBuiltinGeomProp.getter@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t MaterialXAvailability.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x7461636572706564;
  if (a2 == 2) {
    uint64_t v2 = 0x726F707075736E75;
  }
  if (a2 == 1) {
    return 0x6574726F70707573;
  }
  else {
    return v2;
  }
}

uint64_t MaterialXAvailability.availabilityMessage.getter(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) < 2) {
    return 0;
  }
  uint64_t v2 = a1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MaterialXAvailability()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = 0x7461636572706564;
  if (v1 == 2) {
    uint64_t v2 = 0x726F707075736E75;
  }
  if (v1 == 1) {
    return 0x6574726F70707573;
  }
  else {
    return v2;
  }
}

uint64_t NodeDefinitionStore.TypeStorage.init(materialXValue:type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized SGDataTypeStorage.init(materialXValue:type:)(a1, a2, a3, (uint64_t)v15);
  if (!v4)
  {
    uint64_t result = outlined init with take of SGDataTypeStorage((uint64_t)v15, (uint64_t)&v16);
    char v8 = v23;
    switch(v23)
    {
      case 2:
      case 3:
      case 5:
      case 10:
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = v16;
        goto LABEL_9;
      case 4:
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = (unsigned __int16)v16;
        goto LABEL_9;
      case 6:
      case 8:
      case 9:
      case 14:
      case 15:
      case 16:
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = v16;
        *(void *)&long long v7 = v17;
        goto LABEL_10;
      case 7:
      case 11:
      case 12:
      case 13:
      case 19:
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        long long v7 = 0uLL;
        uint64_t v14 = v16;
        goto LABEL_10;
      case 17:
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = v16;
        uint64_t v9 = v18;
        uint64_t v10 = v19;
        uint64_t v11 = v20;
        goto LABEL_16;
      case 18:
        uint64_t v14 = v16;
        uint64_t v9 = v18;
        uint64_t v10 = v19;
        uint64_t v11 = v20;
        uint64_t v12 = v21;
        uint64_t v13 = v22;
LABEL_16:
        long long v7 = v17;
        goto LABEL_10;
      case 20:
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = v16;
        long long v7 = v17;
        goto LABEL_10;
      case 21:
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = v16;
        long long v7 = v17;
        uint64_t v9 = v18;
        goto LABEL_10;
      case 22:
      case 23:
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = v16;
        goto LABEL_9;
      default:
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = v16;
LABEL_9:
        long long v7 = 0uLL;
LABEL_10:
        *(void *)a4 = v14;
        *(_OWORD *)(a4 + 8) = v7;
        *(void *)(a4 + 24) = v9;
        *(void *)(a4 + 32) = v10;
        *(void *)(a4 + 40) = v11;
        *(void *)(a4 + 48) = v12;
        *(void *)(a4 + 56) = v13;
        *(unsigned char *)(a4 + 64) = v8;
        break;
    }
  }
  return result;
}

uint64_t specialized static NodeDefinitionStore.MaterialXDataType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)a2;
  if (*(void *)(a1 + 8) != *(void *)(a2 + 8) || *(void *)(a1 + 16) != *(void *)(a2 + 16))
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v5 & 1) == 0) {
      return result;
    }
  }
  if (!v2)
  {
    if (!v3)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    return 0;
  }
  if (!v3) {
    return 0;
  }
  return specialized static Array<A>.== infix(_:_:)(v2, v3);
}

uint64_t OrderedSet.init(arrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  return OrderedSet.init<A>(_:)((uint64_t)&v8, a2, v5, a3, WitnessTable);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance OrderedSet<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = OrderedSet.init(arrayLiteral:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t one-time initialization function for wellKnownConstantMap()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(type: MetalDataType, value: SGDataTypeStorage, key: String)>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_25C41C0C0;
  if (one-time initialization token for BOOL != -1) {
    swift_once();
  }
  uint64_t v1 = static MetalDataType.BOOL;
  *(void *)(v0 + 32) = static MetalDataType.BOOL;
  *(void *)(v0 + 48) = 1;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 97) = 0u;
  strcpy((char *)(v0 + 120), "constant_true");
  *(_WORD *)(v0 + 134) = -4864;
  *(void *)(v0 + 144) = v1;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(unsigned char *)(v0 + 224) = 0;
  strcpy((char *)(v0 + 232), "constant_false");
  *(unsigned char *)(v0 + 247) = -18;
  uint64_t v2 = one-time initialization token for int32;
  swift_retain_n();
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v3 = static MetalDataType.int32;
  *(void *)(v0 + 256) = static MetalDataType.int32;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  *(_OWORD *)(v0 + 320) = 0u;
  *(unsigned char *)(v0 + 336) = 2;
  strcpy((char *)(v0 + 344), "constant_int_0");
  *(unsigned char *)(v0 + 359) = -18;
  *(void *)(v0 + 368) = v3;
  *(void *)(v0 + 384) = 1;
  *(void *)(v0 + 440) = 0;
  *(_OWORD *)(v0 + 392) = 0u;
  *(_OWORD *)(v0 + 408) = 0u;
  *(_OWORD *)(v0 + 424) = 0u;
  *(unsigned char *)(v0 + 448) = 2;
  strcpy((char *)(v0 + 456), "constant_int_1");
  *(unsigned char *)(v0 + 471) = -18;
  *(void *)(v0 + 480) = v3;
  *(void *)(v0 + 496) = 2;
  *(void *)(v0 + 552) = 0;
  *(_OWORD *)(v0 + 520) = 0u;
  *(_OWORD *)(v0 + 536) = 0u;
  *(_OWORD *)(v0 + 504) = 0u;
  *(unsigned char *)(v0 + 560) = 2;
  strcpy((char *)(v0 + 568), "constant_int_2");
  *(unsigned char *)(v0 + 583) = -18;
  *(void *)(v0 + 592) = v3;
  *(void *)(v0 + 608) = 3;
  *(_OWORD *)(v0 + 616) = 0u;
  *(_OWORD *)(v0 + 632) = 0u;
  *(_OWORD *)(v0 + 648) = 0u;
  *(void *)(v0 + 664) = 0;
  *(unsigned char *)(v0 + 672) = 2;
  strcpy((char *)(v0 + 680), "constant_int_3");
  *(unsigned char *)(v0 + 695) = -18;
  uint64_t v4 = one-time initialization token for float;
  swift_retain_n();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = static MetalDataType.float;
  *(void *)(v0 + 704) = static MetalDataType.float;
  *(void *)(v0 + 720) = 3212836864;
  *(void *)(v0 + 776) = 0;
  *(_OWORD *)(v0 + 728) = 0u;
  *(_OWORD *)(v0 + 744) = 0u;
  *(_OWORD *)(v0 + 760) = 0u;
  *(unsigned char *)(v0 + 784) = 5;
  *(void *)(v0 + 792) = 0xD000000000000023;
  *(void *)(v0 + 800) = 0x800000025C425610;
  *(void *)(v0 + 816) = v5;
  *(_OWORD *)(v0 + 832) = 0u;
  *(_OWORD *)(v0 + 848) = 0u;
  *(_OWORD *)(v0 + 864) = 0u;
  *(_OWORD *)(v0 + 880) = 0u;
  *(unsigned char *)(v0 + 896) = 5;
  *(void *)(v0 + 904) = 0xD00000000000001ELL;
  *(void *)(v0 + 912) = 0x800000025C425640;
  *(void *)(v0 + 928) = v5;
  *(void *)(v0 + 944) = 925353388;
  *(void *)(v0 + 1000) = 0;
  *(_OWORD *)(v0 + 968) = 0u;
  *(_OWORD *)(v0 + 984) = 0u;
  *(_OWORD *)(v0 + 952) = 0u;
  *(unsigned char *)(v0 + 1008) = 5;
  *(void *)(v0 + 1016) = 0xD000000000000031;
  *(void *)(v0 + 1024) = 0x800000025C425660;
  *(void *)(v0 + 1040) = v5;
  *(void *)(v0 + 1056) = 1008981770;
  *(_OWORD *)(v0 + 1064) = 0u;
  *(_OWORD *)(v0 + 1080) = 0u;
  *(_OWORD *)(v0 + 1096) = 0u;
  *(void *)(v0 + 1112) = 0;
  *(unsigned char *)(v0 + 1120) = 5;
  *(void *)(v0 + 1128) = 0xD000000000000022;
  *(void *)(v0 + 1136) = 0x800000025C4256A0;
  *(void *)(v0 + 1152) = v5;
  *(void *)(v0 + 1168) = 1036831949;
  *(void *)(v0 + 1224) = 0;
  *(_OWORD *)(v0 + 1192) = 0u;
  *(_OWORD *)(v0 + 1208) = 0u;
  *(_OWORD *)(v0 + 1176) = 0u;
  *(unsigned char *)(v0 + 1232) = 5;
  *(void *)(v0 + 1240) = 0xD00000000000001DLL;
  *(void *)(v0 + 1248) = 0x800000025C4256D0;
  *(void *)(v0 + 1264) = v5;
  *(void *)(v0 + 1280) = 1048576000;
  *(_OWORD *)(v0 + 1288) = 0u;
  *(_OWORD *)(v0 + 1304) = 0u;
  *(_OWORD *)(v0 + 1320) = 0u;
  *(void *)(v0 + 1336) = 0;
  *(unsigned char *)(v0 + 1344) = 5;
  *(void *)(v0 + 1352) = 0xD000000000000022;
  *(void *)(v0 + 1360) = 0x800000025C4256F0;
  *(void *)(v0 + 1376) = v5;
  *(void *)(v0 + 1392) = 1051372203;
  *(void *)(v0 + 1448) = 0;
  *(_OWORD *)(v0 + 1416) = 0u;
  *(_OWORD *)(v0 + 1432) = 0u;
  *(_OWORD *)(v0 + 1400) = 0u;
  *(unsigned char *)(v0 + 1456) = 5;
  *(void *)(v0 + 1464) = 0xD00000000000001DLL;
  *(void *)(v0 + 1472) = 0x800000025C425720;
  *(void *)(v0 + 1488) = v5;
  *(void *)(v0 + 1504) = 1056964608;
  *(void *)(v0 + 1560) = 0;
  *(_OWORD *)(v0 + 1528) = 0u;
  *(_OWORD *)(v0 + 1544) = 0u;
  *(_OWORD *)(v0 + 1512) = 0u;
  *(unsigned char *)(v0 + 1568) = 5;
  *(void *)(v0 + 1576) = 0xD00000000000001BLL;
  *(void *)(v0 + 1584) = 0x800000025C425740;
  *(void *)(v0 + 1600) = v5;
  *(void *)(v0 + 1616) = 1059760811;
  *(void *)(v0 + 1672) = 0;
  *(_OWORD *)(v0 + 1640) = 0u;
  *(_OWORD *)(v0 + 1656) = 0u;
  *(_OWORD *)(v0 + 1624) = 0u;
  *(unsigned char *)(v0 + 1680) = 5;
  *(void *)(v0 + 1688) = 0xD00000000000001DLL;
  *(void *)(v0 + 1696) = 0x800000025C425760;
  *(void *)(v0 + 1712) = v5;
  *(void *)(v0 + 1728) = 1061158912;
  *(void *)(v0 + 1784) = 0;
  *(_OWORD *)(v0 + 1752) = 0u;
  *(_OWORD *)(v0 + 1768) = 0u;
  *(_OWORD *)(v0 + 1736) = 0u;
  *(unsigned char *)(v0 + 1792) = 5;
  *(void *)(v0 + 1800) = 0xD00000000000001ELL;
  *(void *)(v0 + 1808) = 0x800000025C425780;
  *(void *)(v0 + 1824) = v5;
  *(void *)(v0 + 1840) = 1065353216;
  *(void *)(v0 + 1896) = 0;
  *(_OWORD *)(v0 + 1864) = 0u;
  *(_OWORD *)(v0 + 1880) = 0u;
  *(_OWORD *)(v0 + 1848) = 0u;
  *(unsigned char *)(v0 + 1904) = 5;
  *(void *)(v0 + 1912) = 0xD00000000000001DLL;
  *(void *)(v0 + 1920) = 0x800000025C4257A0;
  *(void *)(v0 + 1936) = v5;
  *(void *)(v0 + 1952) = 1069547520;
  *(void *)(v0 + 2008) = 0;
  *(_OWORD *)(v0 + 1976) = 0u;
  *(_OWORD *)(v0 + 1992) = 0u;
  *(_OWORD *)(v0 + 1960) = 0u;
  *(unsigned char *)(v0 + 2016) = 5;
  *(void *)(v0 + 2024) = 0xD00000000000001DLL;
  *(void *)(v0 + 2032) = 0x800000025C4257C0;
  uint64_t v6 = one-time initialization token for float2;
  swift_retain_n();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = static MetalDataType.float2;
  *(void *)(v0 + 2048) = static MetalDataType.float2;
  *(_OWORD *)(v0 + 2064) = 0u;
  *(_OWORD *)(v0 + 2080) = 0u;
  *(_OWORD *)(v0 + 2096) = 0u;
  *(_OWORD *)(v0 + 2112) = 0u;
  *(unsigned char *)(v0 + 2128) = 7;
  *(void *)(v0 + 2136) = 0xD000000000000019;
  *(void *)(v0 + 2144) = 0x800000025C4257E0;
  *(void *)(v0 + 2160) = v7;
  *(void *)(v0 + 2176) = 1065353216;
  *(void *)(v0 + 2232) = 0;
  *(_OWORD *)(v0 + 2184) = 0u;
  *(_OWORD *)(v0 + 2200) = 0u;
  *(_OWORD *)(v0 + 2216) = 0u;
  *(unsigned char *)(v0 + 2240) = 7;
  *(void *)(v0 + 2248) = 0xD000000000000018;
  *(void *)(v0 + 2256) = 0x800000025C425800;
  *(void *)(v0 + 2272) = v7;
  *(void *)(v0 + 2288) = 0x3F80000000000000;
  *(void *)(v0 + 2344) = 0;
  *(_OWORD *)(v0 + 2312) = 0u;
  *(_OWORD *)(v0 + 2328) = 0u;
  *(_OWORD *)(v0 + 2296) = 0u;
  *(unsigned char *)(v0 + 2352) = 7;
  *(void *)(v0 + 2360) = 0xD000000000000018;
  *(void *)(v0 + 2368) = 0x800000025C425820;
  *(void *)(v0 + 2384) = v7;
  *(void *)(v0 + 2400) = 0x3F8000003F800000;
  *(_OWORD *)(v0 + 2408) = 0u;
  *(_OWORD *)(v0 + 2424) = 0u;
  *(_OWORD *)(v0 + 2440) = 0u;
  *(void *)(v0 + 2456) = 0;
  *(unsigned char *)(v0 + 2464) = 7;
  *(void *)(v0 + 2472) = 0xD000000000000017;
  *(void *)(v0 + 2480) = 0x800000025C425840;
  *(void *)(v0 + 2496) = v7;
  *(void *)(v0 + 2512) = 0x3F0000003F000000;
  *(void *)(v0 + 2568) = 0;
  *(_OWORD *)(v0 + 2536) = 0u;
  *(_OWORD *)(v0 + 2552) = 0u;
  *(_OWORD *)(v0 + 2520) = 0u;
  *(unsigned char *)(v0 + 2576) = 7;
  *(void *)(v0 + 2584) = 0xD00000000000002FLL;
  *(void *)(v0 + 2592) = 0x800000025C425860;
  uint64_t v8 = one-time initialization token for float3;
  swift_retain_n();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = static MetalDataType.float3;
  *(void *)(v0 + 2608) = static MetalDataType.float3;
  *(_OWORD *)(v0 + 2624) = 0u;
  *(_OWORD *)(v0 + 2640) = 0u;
  *(_OWORD *)(v0 + 2656) = 0u;
  *(_OWORD *)(v0 + 2672) = 0u;
  *(unsigned char *)(v0 + 2688) = 8;
  *(void *)(v0 + 2696) = 0xD00000000000001ELL;
  *(void *)(v0 + 2704) = 0x800000025C425890;
  *(void *)(v0 + 2720) = v9;
  *(void *)(v0 + 2736) = 1065353216;
  *(void *)(v0 + 2792) = 0;
  *(_OWORD *)(v0 + 2744) = 0u;
  *(_OWORD *)(v0 + 2760) = 0u;
  *(_OWORD *)(v0 + 2776) = 0u;
  *(unsigned char *)(v0 + 2800) = 8;
  *(void *)(v0 + 2808) = 0xD00000000000001DLL;
  *(void *)(v0 + 2816) = 0x800000025C4258B0;
  *(void *)(v0 + 2832) = v9;
  *(void *)(v0 + 2848) = 0x3F80000000000000;
  *(void *)(v0 + 2904) = 0;
  *(_OWORD *)(v0 + 2872) = 0u;
  *(_OWORD *)(v0 + 2888) = 0u;
  *(_OWORD *)(v0 + 2856) = 0u;
  *(unsigned char *)(v0 + 2912) = 8;
  *(void *)(v0 + 2920) = 0xD00000000000001DLL;
  *(void *)(v0 + 2928) = 0x800000025C4258D0;
  *(void *)(v0 + 2944) = v9;
  *(_OWORD *)(v0 + 2960) = xmmword_25C41C0D0;
  *(_OWORD *)(v0 + 2976) = 0u;
  *(_OWORD *)(v0 + 2992) = 0u;
  *(_OWORD *)(v0 + 3008) = 0u;
  *(unsigned char *)(v0 + 3024) = 8;
  *(void *)(v0 + 3032) = 0xD00000000000001DLL;
  *(void *)(v0 + 3040) = 0x800000025C4258F0;
  *(void *)(v0 + 3056) = v9;
  *(void *)(v0 + 3072) = 0x3F8000003F800000;
  *(_OWORD *)(v0 + 3080) = 0u;
  *(_OWORD *)(v0 + 3096) = 0u;
  *(_OWORD *)(v0 + 3112) = 0u;
  *(void *)(v0 + 3128) = 0;
  *(unsigned char *)(v0 + 3136) = 8;
  *(void *)(v0 + 3144) = 0xD00000000000001CLL;
  *(void *)(v0 + 3152) = 0x800000025C425910;
  *(void *)(v0 + 3168) = v9;
  *(_OWORD *)(v0 + 3184) = xmmword_25C41C0E0;
  *(_OWORD *)(v0 + 3200) = 0u;
  *(_OWORD *)(v0 + 3216) = 0u;
  *(_OWORD *)(v0 + 3232) = 0u;
  *(unsigned char *)(v0 + 3248) = 8;
  *(void *)(v0 + 3256) = 0xD00000000000001CLL;
  *(void *)(v0 + 3264) = 0x800000025C425930;
  *(void *)(v0 + 3280) = v9;
  *(int64x2_t *)(v0 + 3296) = vdupq_n_s64(0x3F800000uLL);
  *(_OWORD *)(v0 + 3312) = 0u;
  *(_OWORD *)(v0 + 3328) = 0u;
  *(_OWORD *)(v0 + 3344) = 0u;
  *(unsigned char *)(v0 + 3360) = 8;
  *(void *)(v0 + 3368) = 0xD00000000000001CLL;
  *(void *)(v0 + 3376) = 0x800000025C425950;
  *(void *)(v0 + 3392) = v9;
  *(_OWORD *)(v0 + 3408) = xmmword_25C41C0F0;
  *(_OWORD *)(v0 + 3456) = 0u;
  *(_OWORD *)(v0 + 3440) = 0u;
  *(_OWORD *)(v0 + 3424) = 0u;
  *(unsigned char *)(v0 + 3472) = 8;
  *(void *)(v0 + 3480) = 0xD00000000000001BLL;
  *(void *)(v0 + 3488) = 0x800000025C425970;
  *(void *)(v0 + 3504) = v9;
  *(_OWORD *)(v0 + 3520) = xmmword_25C41C100;
  *(_OWORD *)(v0 + 3568) = 0u;
  *(_OWORD *)(v0 + 3552) = 0u;
  *(_OWORD *)(v0 + 3536) = 0u;
  *(unsigned char *)(v0 + 3584) = 8;
  *(void *)(v0 + 3592) = 0xD000000000000024;
  *(void *)(v0 + 3600) = 0x800000025C425990;
  uint64_t v10 = one-time initialization token for float4;
  swift_retain_n();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = static MetalDataType.float4;
  *(void *)(v0 + 3616) = static MetalDataType.float4;
  *(_OWORD *)(v0 + 3632) = 0u;
  *(_OWORD *)(v0 + 3648) = 0u;
  *(_OWORD *)(v0 + 3664) = 0u;
  *(_OWORD *)(v0 + 3680) = 0u;
  *(unsigned char *)(v0 + 3696) = 9;
  *(void *)(v0 + 3704) = 0xD000000000000023;
  *(void *)(v0 + 3712) = 0x800000025C4259C0;
  *(void *)(v0 + 3728) = v11;
  *(_OWORD *)(v0 + 3744) = xmmword_25C41C110;
  *(_OWORD *)(v0 + 3760) = 0u;
  *(_OWORD *)(v0 + 3776) = 0u;
  *(_OWORD *)(v0 + 3792) = 0u;
  *(unsigned char *)(v0 + 3808) = 9;
  *(void *)(v0 + 3816) = 0xD000000000000022;
  *(void *)(v0 + 3824) = 0x800000025C4259F0;
  *(void *)(v0 + 3840) = v11;
  *(_OWORD *)(v0 + 3856) = xmmword_25C41C120;
  *(_OWORD *)(v0 + 3904) = 0u;
  *(_OWORD *)(v0 + 3888) = 0u;
  *(_OWORD *)(v0 + 3872) = 0u;
  *(unsigned char *)(v0 + 3920) = 9;
  *(void *)(v0 + 3928) = 0xD000000000000021;
  *(void *)(v0 + 3936) = 0x800000025C425A20;
  *(void *)(v0 + 3952) = v11;
  *(int64x2_t *)(v0 + 3968) = vdupq_n_s64(0x3F80000000000000uLL);
  *(_OWORD *)(v0 + 3984) = 0u;
  *(_OWORD *)(v0 + 4000) = 0u;
  *(_OWORD *)(v0 + 4016) = 0u;
  *(unsigned char *)(v0 + 4032) = 9;
  *(void *)(v0 + 4040) = 0xD000000000000021;
  *(void *)(v0 + 4048) = 0x800000025C425A50;
  *(void *)(v0 + 4064) = v11;
  *(_OWORD *)(v0 + 4080) = xmmword_25C41C130;
  *(_OWORD *)(v0 + 4128) = 0u;
  *(_OWORD *)(v0 + 4112) = 0u;
  *(_OWORD *)(v0 + 4096) = 0u;
  *(unsigned char *)(v0 + 4144) = 9;
  *(void *)(v0 + 4152) = 0xD000000000000021;
  *(void *)(v0 + 4160) = 0x800000025C425A80;
  *(void *)(v0 + 4176) = v11;
  *(_OWORD *)(v0 + 4192) = xmmword_25C41C140;
  *(_OWORD *)(v0 + 4208) = 0u;
  *(_OWORD *)(v0 + 4224) = 0u;
  *(_OWORD *)(v0 + 4240) = 0u;
  *(unsigned char *)(v0 + 4256) = 9;
  *(void *)(v0 + 4264) = 0xD000000000000020;
  *(void *)(v0 + 4272) = 0x800000025C425AB0;
  *(void *)(v0 + 4288) = v11;
  *(_OWORD *)(v0 + 4304) = xmmword_25C41C150;
  *(_OWORD *)(v0 + 4320) = 0u;
  *(_OWORD *)(v0 + 4336) = 0u;
  *(_OWORD *)(v0 + 4352) = 0u;
  *(unsigned char *)(v0 + 4368) = 9;
  *(void *)(v0 + 4376) = 0xD000000000000020;
  *(void *)(v0 + 4384) = 0x800000025C425AE0;
  *(void *)(v0 + 4400) = v11;
  *(_OWORD *)(v0 + 4416) = xmmword_25C41C160;
  *(_OWORD *)(v0 + 4464) = 0u;
  *(_OWORD *)(v0 + 4448) = 0u;
  *(_OWORD *)(v0 + 4432) = 0u;
  *(unsigned char *)(v0 + 4480) = 9;
  *(void *)(v0 + 4488) = 0xD000000000000020;
  *(void *)(v0 + 4496) = 0x800000025C425B10;
  *(void *)(v0 + 4512) = v11;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v0 + 4528) = _Q0;
  *(_OWORD *)(v0 + 4576) = 0u;
  *(_OWORD *)(v0 + 4560) = 0u;
  *(_OWORD *)(v0 + 4544) = 0u;
  *(unsigned char *)(v0 + 4592) = 9;
  *(void *)(v0 + 4600) = 0xD00000000000001FLL;
  *(void *)(v0 + 4608) = 0x800000025C425B40;
  uint64_t v17 = one-time initialization token for float3x3;
  swift_retain_n();
  if (v17 != -1) {
    swift_once();
  }
  *(void *)(v0 + 4624) = static MetalDataType.float3x3;
  *(_OWORD *)(v0 + 4640) = xmmword_25C41C170;
  *(void *)(v0 + 4656) = 0x3F80000000000000;
  *(_OWORD *)(v0 + 4664) = 0u;
  *(void *)(v0 + 4680) = 1065353216;
  *(_OWORD *)(v0 + 4688) = 0u;
  *(unsigned char *)(v0 + 4704) = 17;
  *(void *)(v0 + 4712) = 0xD00000000000001ALL;
  *(void *)(v0 + 4720) = 0x800000025C425B60;
  uint64_t v18 = one-time initialization token for float4x4;
  swift_retain();
  if (v18 != -1) {
    swift_once();
  }
  *(void *)(v0 + 4736) = static MetalDataType.float4x4;
  *(_OWORD *)(v0 + 4752) = xmmword_25C41C170;
  *(void *)(v0 + 4768) = 0x3F80000000000000;
  *(_OWORD *)(v0 + 4776) = 0u;
  *(void *)(v0 + 4792) = 1065353216;
  *(_OWORD *)(v0 + 4800) = xmmword_25C41C110;
  *(unsigned char *)(v0 + 4816) = 18;
  *(void *)(v0 + 4824) = 0xD00000000000001ALL;
  *(void *)(v0 + 4832) = 0x800000025C425B80;
  uint64_t v19 = one-time initialization token for space;
  swift_retain();
  if (v19 != -1) {
    swift_once();
  }
  uint64_t v20 = static MetalDataType.MaterialX.space;
  *(void *)(v0 + 4848) = static MetalDataType.MaterialX.space;
  *(_OWORD *)(v0 + 4864) = xmmword_25C41C180;
  *(_OWORD *)(v0 + 4880) = 0u;
  *(_OWORD *)(v0 + 4896) = 0u;
  *(_OWORD *)(v0 + 4912) = 0u;
  *(unsigned char *)(v0 + 4928) = 6;
  *(void *)(v0 + 4936) = 0xD000000000000014;
  *(void *)(v0 + 4944) = 0x800000025C425BA0;
  *(void *)(v0 + 4960) = v20;
  *(_OWORD *)(v0 + 4976) = xmmword_25C41C190;
  *(_OWORD *)(v0 + 4992) = 0u;
  *(_OWORD *)(v0 + 5008) = 0u;
  *(_OWORD *)(v0 + 5024) = 0u;
  *(unsigned char *)(v0 + 5040) = 6;
  *(void *)(v0 + 5048) = 0xD000000000000015;
  *(void *)(v0 + 5056) = 0x800000025C425BC0;
  *(void *)(v0 + 5072) = v20;
  *(_OWORD *)(v0 + 5088) = xmmword_25C41C1A0;
  *(_OWORD *)(v0 + 5136) = 0u;
  *(_OWORD *)(v0 + 5120) = 0u;
  *(_OWORD *)(v0 + 5104) = 0u;
  *(unsigned char *)(v0 + 5152) = 6;
  *(void *)(v0 + 5160) = 0xD000000000000014;
  *(void *)(v0 + 5168) = 0x800000025C425BE0;
  *(void *)(v0 + 5184) = v20;
  *(_OWORD *)(v0 + 5200) = xmmword_25C41C1B0;
  *(_OWORD *)(v0 + 5216) = 0u;
  *(_OWORD *)(v0 + 5232) = 0u;
  *(_OWORD *)(v0 + 5248) = 0u;
  *(unsigned char *)(v0 + 5264) = 6;
  *(void *)(v0 + 5272) = 0xD000000000000016;
  *(void *)(v0 + 5280) = 0x800000025C425C00;
  wellKnownConstantMap._rawValue = (void *)v0;
  return swift_retain_n();
}

Swift::OpaquePointer *wellKnownConstantMap.unsafeMutableAddressor()
{
  if (one-time initialization token for wellKnownConstantMap != -1) {
    swift_once();
  }
  return &wellKnownConstantMap;
}

__n128 UserGraphError.init(_:details:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  outlined init with take of UserGraphError.ErrorType(a1, (uint64_t)v13);
  outlined init with take of UserGraphError.ErrorType((uint64_t)v13, (uint64_t)v14);
  outlined init with take of UserGraphError.ErrorType((uint64_t)v14, (uint64_t)v15);
  *(void *)&long long v16 = a2;
  *((void *)&v16 + 1) = a3;
  long long v7 = v15[11];
  *(_OWORD *)(a4 + 160) = v15[10];
  *(_OWORD *)(a4 + 176) = v7;
  *(_OWORD *)(a4 + 192) = v16;
  long long v8 = v15[7];
  *(_OWORD *)(a4 + 96) = v15[6];
  *(_OWORD *)(a4 + 112) = v8;
  long long v9 = v15[9];
  *(_OWORD *)(a4 + 128) = v15[8];
  *(_OWORD *)(a4 + 144) = v9;
  long long v10 = v15[3];
  *(_OWORD *)(a4 + 32) = v15[2];
  *(_OWORD *)(a4 + 48) = v10;
  long long v11 = v15[5];
  *(_OWORD *)(a4 + 64) = v15[4];
  *(_OWORD *)(a4 + 80) = v11;
  __n128 result = (__n128)v15[1];
  *(_OWORD *)a4 = v15[0];
  *(__n128 *)(a4 + 16) = result;
  return result;
}

uint64_t *UserGraphError.type.getter@<X0>(uint64_t *a1@<X8>)
{
  return outlined init with copy of UserGraphError.ErrorType(v1, a1);
}

uint64_t *outlined init with copy of UserGraphError.ErrorType(uint64_t *a1, uint64_t *a2)
{
  return a2;
}

uint64_t UserGraphError.details.getter()
{
  uint64_t v1 = *(void *)(v0 + 192);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UserGraphError.description.getter()
{
  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  uint64_t v10 = 0;
  unint64_t v11 = 0xE000000000000000;
  v1._uint64_t object = (void *)0x800000025C425C20;
  v1._char countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v1);
  outlined init with take of UserGraphError.ErrorType(v0, (uint64_t)v12);
  outlined init with take of UserGraphError.ErrorType((uint64_t)v12, (uint64_t)v9);
  _print_unlocked<A, B>(_:_:)();
  v2._char countAndFlagsBits = 2112041;
  v2._uint64_t object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  uint64_t v3 = *(void *)(v0 + 200);
  if (v3)
  {
    v9[0] = *(void *)(v0 + 192);
    v9[1] = v3;
    swift_bridgeObjectRetain_n();
    uint64_t v4 = String.init<A>(describing:)();
    unint64_t v6 = v5;
  }
  else
  {
    unint64_t v6 = 0xE500000000000000;
    uint64_t v4 = 0x3E6C696E3CLL;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UserGraphError()
{
  return UserGraphError.description.getter();
}

uint64_t outlined copy of UserGraphError.ErrorType(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22)
{
  switch(a22 >> 58)
  {
    case 0uLL:
    case 1uLL:
    case 4uLL:
    case 5uLL:
    case 0xCuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x13uLL:
    case 0x15uLL:
    case 0x1AuLL:
      goto LABEL_13;
    case 2uLL:
    case 3uLL:
    case 0x21uLL:
    case 0x22uLL:
      outlined copy of NodePersonality(result);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_13;
    case 6uLL:
    case 7uLL:
    case 0xAuLL:
      outlined copy of NodePersonality(result);
      swift_bridgeObjectRetain();
      goto LABEL_10;
    case 8uLL:
    case 0xBuLL:
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(a11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(a17);
      swift_bridgeObjectRetain();
      goto LABEL_10;
    case 9uLL:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of MaterialXAvailability(a15, a16);
      swift_bridgeObjectRetain();
      goto LABEL_10;
    case 0xDuLL:
    case 0xEuLL:
      goto LABEL_10;
    case 0x11uLL:
      outlined copy of ShaderGraphNode?(result, a2);
      goto LABEL_13;
    case 0x12uLL:
    case 0x17uLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
      outlined copy of NodePersonality(result);
LABEL_10:
      swift_bridgeObjectRetain();
      goto LABEL_13;
    case 0x14uLL:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of MaterialXAvailability(a15, a16);
      swift_bridgeObjectRetain();
      goto LABEL_13;
    case 0x16uLL:
      outlined copy of GeomPropDef.GeomProp(result, a2, a3 & 1);
      goto LABEL_17;
    case 0x18uLL:
    case 0x19uLL:
      return outlined copy of Output?(result, a2);
    case 0x1BuLL:
    case 0x1CuLL:
      swift_retain();
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(a8);
      swift_bridgeObjectRetain();
LABEL_13:
      __n128 result = swift_bridgeObjectRetain();
      break;
    case 0x1DuLL:
LABEL_17:
      __n128 result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for UserGraphError(uint64_t *a1)
{
  outlined consume of UserGraphError.ErrorType(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21]);
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for UserGraphError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2[5];
  uint64_t v5 = a2[6];
  uint64_t v14 = a2[8];
  uint64_t v15 = a2[9];
  uint64_t v16 = a2[10];
  uint64_t v17 = a2[11];
  uint64_t v18 = a2[12];
  uint64_t v19 = a2[13];
  uint64_t v20 = a2[14];
  uint64_t v21 = a2[15];
  uint64_t v22 = a2[16];
  uint64_t v23 = a2[17];
  uint64_t v24 = a2[18];
  uint64_t v25 = a2[19];
  uint64_t v26 = a2[20];
  uint64_t v27 = a2[21];
  uint64_t v28 = a2[22];
  uint64_t v29 = a2[23];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[7];
  outlined copy of UserGraphError.ErrorType(*a2, v7, v8, v9, v10, v4, v5, v11, a2[8], a2[9], a2[10], a2[11], a2[12], a2[13], a2[14], a2[15], a2[16], a2[17], a2[18],
    a2[19],
    a2[20],
    a2[21]);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v4;
  a1[6] = v5;
  a1[7] = v11;
  a1[8] = v14;
  a1[9] = v15;
  a1[10] = v16;
  a1[11] = v17;
  a1[12] = v18;
  a1[13] = v19;
  a1[14] = v20;
  a1[15] = v21;
  a1[16] = v22;
  a1[17] = v23;
  a1[18] = v24;
  a1[19] = v25;
  a1[20] = v26;
  a1[21] = v27;
  a1[22] = v28;
  a1[23] = v29;
  uint64_t v12 = a2[25];
  a1[24] = a2[24];
  a1[25] = v12;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UserGraphError(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[5];
  uint64_t v5 = a2[6];
  uint64_t v28 = a2[8];
  uint64_t v29 = a2[9];
  uint64_t v30 = a2[10];
  uint64_t v31 = a2[11];
  uint64_t v32 = a2[12];
  uint64_t v33 = a2[13];
  uint64_t v34 = a2[14];
  uint64_t v35 = a2[15];
  uint64_t v36 = a2[16];
  uint64_t v37 = a2[17];
  uint64_t v38 = a2[18];
  uint64_t v39 = a2[19];
  uint64_t v40 = a2[20];
  uint64_t v41 = a2[21];
  uint64_t v42 = a2[22];
  uint64_t v43 = a2[23];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[7];
  outlined copy of UserGraphError.ErrorType(*a2, v7, v8, v9, v10, v4, v5, v11, a2[8], a2[9], a2[10], a2[11], a2[12], a2[13], a2[14], a2[15], a2[16], a2[17], a2[18],
    a2[19],
    a2[20],
    a2[21]);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v4;
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v11;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v28;
  *(void *)(a1 + 72) = v29;
  *(void *)(a1 + 80) = v30;
  *(void *)(a1 + 88) = v31;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v32;
  *(void *)(a1 + 104) = v33;
  *(void *)(a1 + 112) = v34;
  *(void *)(a1 + 120) = v35;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v36;
  *(void *)(a1 + 136) = v37;
  *(void *)(a1 + 144) = v38;
  *(void *)(a1 + 152) = v39;
  long long v26 = *(_OWORD *)(a1 + 160);
  *(void *)(a1 + 160) = v40;
  *(void *)(a1 + 168) = v41;
  *(void *)(a1 + 176) = v42;
  *(void *)(a1 + 184) = v43;
  outlined consume of UserGraphError.ErrorType(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((unint64_t *)&v26 + 1));
  *(void *)(a1 + 192) = a2[24];
  *(void *)(a1 + 200) = a2[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for UserGraphError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 96);
  long long v15 = *(_OWORD *)(a1 + 112);
  long long v16 = *(_OWORD *)(a1 + 128);
  long long v17 = *(_OWORD *)(a1 + 144);
  long long v18 = *(_OWORD *)(a1 + 160);
  long long v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v19;
  long long v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v20;
  long long v21 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v21;
  long long v22 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v22;
  long long v23 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v23;
  long long v24 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v24;
  outlined consume of UserGraphError.ErrorType(v4, v5, v6, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((unint64_t *)&v18 + 1));
  uint64_t v25 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v25;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UserGraphError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 208)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 168) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for UserGraphError(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 200) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 208) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 160) = 0;
      *(void *)(a1 + 168) = 2 * -a2;
      *(void *)(a1 + 176) = 0;
      *(void *)(a1 + 184) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 208) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserGraphError()
{
  return &type metadata for UserGraphError;
}

uint64_t destroy for UserGraphError.ErrorType(uint64_t *a1)
{
  return outlined consume of UserGraphError.ErrorType(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
           a1[19],
           a1[20],
           a1[21]);
}

uint64_t *initializeWithCopy for UserGraphError.ErrorType(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a2[5];
  uint64_t v4 = a2[6];
  unint64_t v5 = a2[7];
  uint64_t v13 = a2[9];
  unint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  unint64_t v20 = a2[16];
  uint64_t v21 = a2[17];
  uint64_t v22 = a2[18];
  uint64_t v23 = a2[19];
  uint64_t v24 = a2[20];
  unint64_t v25 = a2[21];
  uint64_t v26 = a2[22];
  uint64_t v27 = a2[23];
  uint64_t v6 = a2[8];
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  outlined copy of UserGraphError.ErrorType(*a2, v8, v9, v10, v11, v3, v4, v5, v6, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25);
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v9;
  a1[3] = v10;
  a1[4] = v11;
  a1[5] = v3;
  a1[6] = v4;
  a1[7] = v5;
  a1[8] = v6;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  a1[20] = v24;
  a1[21] = v25;
  a1[22] = v26;
  a1[23] = v27;
  return a1;
}

uint64_t assignWithCopy for UserGraphError.ErrorType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[5];
  uint64_t v4 = a2[6];
  unint64_t v5 = a2[7];
  uint64_t v28 = a2[9];
  unint64_t v29 = a2[10];
  uint64_t v30 = a2[11];
  uint64_t v31 = a2[12];
  uint64_t v32 = a2[13];
  uint64_t v33 = a2[14];
  uint64_t v34 = a2[15];
  unint64_t v35 = a2[16];
  uint64_t v36 = a2[17];
  uint64_t v37 = a2[18];
  uint64_t v38 = a2[19];
  uint64_t v39 = a2[20];
  unint64_t v40 = a2[21];
  uint64_t v41 = a2[22];
  uint64_t v42 = a2[23];
  uint64_t v6 = a2[8];
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  outlined copy of UserGraphError.ErrorType(*a2, v8, v9, v10, v11, v3, v4, v5, v6, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37,
    v38,
    v39,
    v40);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v10;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v3;
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v28;
  *(void *)(a1 + 80) = v29;
  *(void *)(a1 + 88) = v30;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v31;
  *(void *)(a1 + 104) = v32;
  *(void *)(a1 + 112) = v33;
  *(void *)(a1 + 120) = v34;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v35;
  *(void *)(a1 + 136) = v36;
  *(void *)(a1 + 144) = v37;
  *(void *)(a1 + 152) = v38;
  long long v26 = *(_OWORD *)(a1 + 160);
  *(void *)(a1 + 160) = v39;
  *(void *)(a1 + 168) = v40;
  *(void *)(a1 + 176) = v41;
  *(void *)(a1 + 184) = v42;
  outlined consume of UserGraphError.ErrorType(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((unint64_t *)&v26 + 1));
  return a1;
}

__n128 __swift_memcpy192_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for UserGraphError.ErrorType(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  unint64_t v10 = *(void *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 64);
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v13 = *(_OWORD *)(a1 + 96);
  long long v14 = *(_OWORD *)(a1 + 112);
  long long v15 = *(_OWORD *)(a1 + 128);
  long long v16 = *(_OWORD *)(a1 + 144);
  long long v17 = *(_OWORD *)(a1 + 160);
  long long v18 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v18;
  long long v19 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v19;
  long long v20 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v20;
  long long v21 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v21;
  long long v22 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v22;
  long long v23 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v23;
  outlined consume of UserGraphError.ErrorType(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((unint64_t *)&v17 + 1));
  return a1;
}

uint64_t getEnumTagSinglePayload for UserGraphError.ErrorType(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 192)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 168) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for UserGraphError.ErrorType(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 184) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 192) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 160) = 0;
      *(void *)(a1 + 168) = 2 * -a2;
      *(void *)(a1 + 176) = 0;
      *(void *)(a1 + 184) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 192) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for UserGraphError.ErrorType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 168) >> 58;
  if (v1 <= 0x22) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 35);
  }
}

uint64_t destructiveProjectEnumData for UserGraphError.ErrorType(uint64_t result)
{
  *(void *)(result + 168) &= 0x3FFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for UserGraphError.ErrorType(uint64_t result, uint64_t a2)
{
  if (a2 < 0x23)
  {
    *(void *)(result + 168) = *(void *)(result + 168) & 1 | (a2 << 58);
  }
  else
  {
    *(void *)double result = (a2 - 35);
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(void *)(result + 176) = 0;
    *(void *)(result + 184) = 0;
    *(void *)(result + 168) = 0x8C00000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserGraphError.ErrorType()
{
  return &type metadata for UserGraphError.ErrorType;
}

uint64_t NodeDef.IOSpec.init(name:type:isUniform:defaultValue:defaultGeomProp:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a5;
  *(void *)(a9 + 32) = a6;
  *(void *)(a9 + 40) = a7;
  *(void *)(a9 + 48) = a8;
  *(unsigned char *)(a9 + 56) = a4;
  return result;
}

__n128 NodeDef.init(name:nodeName:inherit:nodegroup:version:isdefaultversion:targets:uiName:inputs:outputs:available:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, __n128 a17)
{
  __n128 result = a17;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = a10;
  *(void *)(a9 + 72) = a11;
  *(unsigned char *)(a9 + 80) = a12;
  *(_OWORD *)(a9 + 88) = a13;
  *(void *)(a9 + 104) = a14;
  *(__n128 *)(a9 + 112) = a17;
  *(void *)(a9 + 128) = a15;
  *(void *)(a9 + 136) = a16;
  return result;
}

uint64_t static MaterialXTarget.target(named:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for allTargets != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  unint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = specialized Sequence.first(where:)(v4, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t NodeDef.Implementation.init(kind:targets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with take of NodeDef.Implementation.Kind(a1, a3);
  uint64_t result = type metadata accessor for NodeDef.Implementation(0);
  *(void *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t NodeDef.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(v3 + 128);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v7 = result;
    uint64_t v17 = a3;
    uint64_t v8 = (uint64_t *)(v4 + 48);
    while (1)
    {
      uint64_t v9 = *(v8 - 2);
      uint64_t v10 = *(v8 - 1);
      uint64_t v11 = *v8;
      uint64_t v12 = v8[1];
      long long v18 = *((_OWORD *)v8 + 1);
      uint64_t v13 = v8[4];
      char v14 = *((unsigned char *)v8 + 40);
      if (v9 == v7 && v10 == a2) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_12;
      }
      v8 += 8;
      if (!--v5)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        char v14 = 0;
        long long v16 = 0uLL;
        goto LABEL_13;
      }
    }
    uint64_t v9 = v7;
    uint64_t v10 = a2;
LABEL_12:
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    long long v16 = v18;
LABEL_13:
    a3 = v17;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    char v14 = 0;
    long long v16 = 0uLL;
  }
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v10;
  *(void *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v12;
  *(_OWORD *)(a3 + 32) = v16;
  *(void *)(a3 + 48) = v13;
  *(unsigned char *)(a3 + 56) = v14;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  long long v16;
  uint64_t v17;
  long long v18;

  uint64_t v4 = *(void *)(v3 + 136);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v7 = result;
    uint64_t v17 = a3;
    uint64_t v8 = (uint64_t *)(v4 + 48);
    while (1)
    {
      uint64_t v9 = *(v8 - 2);
      uint64_t v10 = *(v8 - 1);
      uint64_t v11 = *v8;
      uint64_t v12 = v8[1];
      long long v18 = *((_OWORD *)v8 + 1);
      uint64_t v13 = v8[4];
      char v14 = *((unsigned char *)v8 + 40);
      if (v9 == v7 && v10 == a2) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_12;
      }
      v8 += 8;
      if (!--v5)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        char v14 = 0;
        long long v16 = 0uLL;
        goto LABEL_13;
      }
    }
    uint64_t v9 = v7;
    uint64_t v10 = a2;
LABEL_12:
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    long long v16 = v18;
LABEL_13:
    a3 = v17;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    char v14 = 0;
    long long v16 = 0uLL;
  }
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v10;
  *(void *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v12;
  *(_OWORD *)(a3 + 32) = v16;
  *(void *)(a3 + 48) = v13;
  *(unsigned char *)(a3 + 56) = v14;
  return result;
}

uint64_t *MaterialXTarget.realitykit_geometryModifier.unsafeMutableAddressor()
{
  if (one-time initialization token for realitykit_geometryModifier != -1) {
    swift_once();
  }
  return &static MaterialXTarget.realitykit_geometryModifier;
}

uint64_t *MaterialXTarget.realitykit_surfaceShader.unsafeMutableAddressor()
{
  if (one-time initialization token for realitykit_surfaceShader != -1) {
    swift_once();
  }
  return &static MaterialXTarget.realitykit_surfaceShader;
}

uint64_t MaterialXTarget.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MaterialXTarget.parent.getter()
{
  return swift_retain();
}

uint64_t MaterialXTarget.conformsTo(_:)(uint64_t a1)
{
  while (1)
  {
    BOOL v3 = v1[2] == *(void *)(a1 + 16) && v1[3] == *(void *)(a1 + 24);
    if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    uint64_t v1 = (void *)v1[4];
    if (!v1) {
      return 0;
    }
  }
  return 1;
}

uint64_t MaterialXTarget.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 32);
  *(void *)(v0 + 32) = 0;
  if (v1)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native()) {
        break;
      }
      uint64_t v2 = *(void *)(v1 + 32);
      swift_retain();
      swift_release();
      uint64_t v1 = v2;
    }
    while (v2);
  }
  swift_release();
  return v0;
}

uint64_t MaterialXTarget.__deallocating_deinit()
{
  MaterialXTarget.deinit();
  return swift_deallocClassInstance();
}

uint64_t MaterialXTarget.hash(into:)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v1 + 32);
  swift_retain();
  specialized Optional<A>.hash(into:)(a1, v3);
  return swift_release();
}

Swift::Int MaterialXTarget.hashValue.getter()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 32);
  swift_retain();
  specialized Optional<A>.hash(into:)((uint64_t)v3, v1);
  swift_release();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MaterialXTarget()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 32);
  swift_retain();
  specialized Optional<A>.hash(into:)((uint64_t)v4, v2);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MaterialXTarget(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v3 + 32);
  swift_retain();
  specialized Optional<A>.hash(into:)(a1, v4);
  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MaterialXTarget()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 32);
  swift_retain();
  specialized Optional<A>.hash(into:)((uint64_t)v4, v2);
  swift_release();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MaterialXTarget(void **a1, void **a2)
{
  return specialized static MaterialXTarget.== infix(_:_:)(*a1, *a2);
}

uint64_t one-time initialization function for realitykit()
{
  type metadata accessor for MaterialXTarget();
  uint64_t result = swift_initStaticObject();
  static MaterialXTarget.realitykit = result;
  return result;
}

uint64_t *MaterialXTarget.realitykit.unsafeMutableAddressor()
{
  if (one-time initialization token for realitykit != -1) {
    swift_once();
  }
  return &static MaterialXTarget.realitykit;
}

uint64_t static MaterialXTarget.realitykit.getter()
{
  return swift_initStaticObject();
}

void *one-time initialization function for realitykit_geometryModifier()
{
  type metadata accessor for MaterialXTarget();
  uint64_t inited = swift_initStaticObject();
  uint64_t result = (void *)swift_allocObject();
  result[2] = 0xD00000000000001CLL;
  result[3] = 0x800000025C425C70;
  result[4] = inited;
  static MaterialXTarget.realitykit_geometryModifier = (uint64_t)result;
  return result;
}

uint64_t static MaterialXTarget.realitykit_geometryModifier.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for realitykit_geometryModifier);
}

void *one-time initialization function for realitykit_surfaceShader()
{
  type metadata accessor for MaterialXTarget();
  uint64_t inited = swift_initStaticObject();
  uint64_t result = (void *)swift_allocObject();
  result[2] = 0xD000000000000019;
  result[3] = 0x800000025C425C90;
  result[4] = inited;
  static MaterialXTarget.realitykit_surfaceShader = (uint64_t)result;
  return result;
}

uint64_t static MaterialXTarget.realitykit_surfaceShader.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for realitykit_surfaceShader);
}

uint64_t one-time initialization function for allTargets()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_25C41C260;
  type metadata accessor for MaterialXTarget();
  *(void *)(v0 + 32) = swift_initStaticObject();
  if (one-time initialization token for realitykit_geometryModifier != -1) {
    swift_once();
  }
  *(void *)(v0 + 40) = static MaterialXTarget.realitykit_geometryModifier;
  uint64_t v1 = one-time initialization token for realitykit_surfaceShader;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  *(void *)(v0 + 48) = static MaterialXTarget.realitykit_surfaceShader;
  specialized Array._endMutation()();
  static MaterialXTarget.allTargets = v0;
  return swift_retain();
}

uint64_t *MaterialXTarget.allTargets.unsafeMutableAddressor()
{
  if (one-time initialization token for allTargets != -1) {
    swift_once();
  }
  return &static MaterialXTarget.allTargets;
}

uint64_t static MaterialXTarget.allTargets.getter()
{
  if (one-time initialization token for allTargets != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

void MaterialXAvailability.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 2)
  {
    Swift::UInt v4 = 1;
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    Swift::UInt v4 = 0;
LABEL_5:
    Hasher._combine(_:)(v4);
    return;
  }
  Hasher._combine(_:)(2uLL);
  if (a3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of MaterialXAvailability(a2, a3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int MaterialXAvailability.hashValue.getter(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  if (a2 == 2)
  {
    Swift::UInt v4 = 1;
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    Swift::UInt v4 = 0;
LABEL_5:
    Hasher._combine(_:)(v4);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(2uLL);
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of MaterialXAvailability(a1, a2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MaterialXAvailability()
{
  return MaterialXAvailability.hashValue.getter(*v0, v0[1]);
}

void protocol witness for Hashable.hash(into:) in conformance MaterialXAvailability()
{
  uint64_t v1 = v0[1];
  if (v1 == 2)
  {
    Swift::UInt v2 = 1;
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    Swift::UInt v2 = 0;
LABEL_5:
    Hasher._combine(_:)(v2);
    return;
  }
  uint64_t v3 = *v0;
  Hasher._combine(_:)(2uLL);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of MaterialXAvailability(v3, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MaterialXAvailability()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Swift::UInt v3 = 1;
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    Swift::UInt v3 = 0;
LABEL_5:
    Hasher._combine(_:)(v3);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(2uLL);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of MaterialXAvailability(v2, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MaterialXAvailability(uint64_t *a1, uint64_t *a2)
{
  return specialized static MaterialXAvailability.== infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t NodeDef.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.nodeName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.inherit.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.nodegroup.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.version.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.isdefaultversion.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t NodeDef.targets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDef.uiName.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.available.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  outlined copy of MaterialXAvailability(v1, *(void *)(v0 + 120));
  return v1;
}

uint64_t NodeDef.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDef.outputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDef.IOSpec.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.IOSpec.type.getter()
{
  return swift_retain();
}

uint64_t NodeDef.IOSpec.defaultValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.IOSpec.defaultGeomProp.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDef.IOSpec.isUniform.getter()
{
  return *(unsigned __int8 *)(v0 + 56);
}

void NodeDef.IOSpec.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v2 + 16);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v5);
  swift_release();
  swift_bridgeObjectRelease();
  if (!*(void *)(v2 + 32))
  {
    Hasher._combine(_:)(0);
    if (*(void *)(v2 + 48)) {
      goto LABEL_3;
    }
LABEL_5:
    Hasher._combine(_:)(0);
    goto LABEL_6;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*(void *)(v2 + 48)) {
    goto LABEL_5;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_6:
  Hasher._combine(_:)(*(unsigned char *)(v2 + 56) & 1);
}

Swift::Int NodeDef.IOSpec.hashValue.getter()
{
  Hasher.init(_seed:)();
  NodeDef.IOSpec.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NodeDef.IOSpec()
{
  Hasher.init(_seed:)();
  NodeDef.IOSpec.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NodeDef.IOSpec()
{
  Hasher.init(_seed:)();
  NodeDef.IOSpec.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodeDef.IOSpec(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  long long v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return specialized static NodeDef.IOSpec.== infix(_:_:)((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t NodeDef.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v2 + 40))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (*(void *)(v2 + 56)) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (*(void *)(v2 + 72)) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  Hasher._combine(_:)(0);
  if (!*(void *)(v2 + 56)) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v2 + 72))
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  Hasher._combine(_:)(0);
LABEL_8:
  int v4 = *(unsigned __int8 *)(v2 + 80);
  if (v4 == 2)
  {
    Swift::UInt8 v5 = 0;
  }
  else
  {
    Swift::UInt8 v5 = v4 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v5);
  uint64_t v6 = *(void *)(v2 + 88);
  uint64_t v17 = v6;
  Swift::UInt v7 = *(void *)(v6 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = v6 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v8 += 16;
      --v7;
    }
    while (v7);
    outlined release of [Input]((uint64_t)&v17);
  }
  if (*(void *)(v2 + 104))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v9 = *(void *)(v2 + 120);
  if (v9 == 2)
  {
    Swift::UInt v10 = 1;
    goto LABEL_22;
  }
  if (v9 == 1)
  {
    Swift::UInt v10 = 0;
LABEL_22:
    Hasher._combine(_:)(v10);
    goto LABEL_27;
  }
  uint64_t v11 = *(void *)(v2 + 112);
  Hasher._combine(_:)(2uLL);
  if (v9)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t v12 = v11;
    uint64_t v13 = v9;
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v12 = v11;
    uint64_t v13 = 0;
  }
  outlined consume of MaterialXAvailability(v12, v13);
LABEL_27:
  uint64_t v14 = *(void *)(v2 + 128);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v2 + 136);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v15);
  return swift_bridgeObjectRelease();
}

Swift::Int NodeDef.hashValue.getter()
{
  Hasher.init(_seed:)();
  NodeDef.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NodeDef()
{
  Hasher.init(_seed:)();
  NodeDef.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NodeDef()
{
  Hasher.init(_seed:)();
  NodeDef.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodeDef(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[7];
  v11[6] = a1[6];
  v11[7] = v2;
  v11[8] = a1[8];
  long long v3 = a1[3];
  _OWORD v11[2] = a1[2];
  v11[3] = v3;
  long long v4 = a1[5];
  v11[4] = a1[4];
  v11[5] = v4;
  long long v5 = a1[1];
  v11[0] = *a1;
  v11[1] = v5;
  long long v6 = a2[7];
  v12[6] = a2[6];
  v12[7] = v6;
  v12[8] = a2[8];
  long long v7 = a2[3];
  _OWORD v12[2] = a2[2];
  void v12[3] = v7;
  long long v8 = a2[5];
  v12[4] = a2[4];
  v12[5] = v8;
  long long v9 = a2[1];
  v12[0] = *a2;
  v12[1] = v9;
  return specialized static NodeDef.== infix(_:_:)((uint64_t)v11, (uint64_t)v12) & 1;
}

uint64_t NodeDef.Implementation.kind.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of NodeDef.Implementation.Kind(v1, a1);
}

uint64_t NodeDef.Implementation.targets.getter()
{
  type metadata accessor for NodeDef.Implementation(0);
  return swift_bridgeObjectRetain();
}

uint64_t NodeDef.Implementation.isAvailableFor(_:)()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for NodeDef.Implementation(0) + 20));
  if ((v1 & 0xC000000000000001) == 0)
  {
    if (*(void *)(v1 + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    char v3 = 1;
    return v3 & 1;
  }
  if (!__CocoaSet.count.getter()) {
    goto LABEL_5;
  }
LABEL_3:
  swift_retain();
  uint64_t v2 = swift_bridgeObjectRetain();
  char v3 = specialized Sequence.contains(where:)(v2);
  swift_bridgeObjectRelease();
  swift_release();
  return v3 & 1;
}

uint64_t NodeDef.Implementation.hash(into:)(long long *a1)
{
  NodeDef.Implementation.Kind.hash(into:)((uint64_t)a1);
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for NodeDef.Implementation(0) + 20));
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static NodeDef.Implementation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((specialized static NodeDef.Implementation.Kind.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for NodeDef.Implementation(0) + 20);
  uint64_t v5 = *(void *)(a1 + v4);
  uint64_t v6 = *(void *)(a2 + v4);
  return specialized static Set.== infix(_:_:)(v5, v6);
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  unint64_t v4 = a2 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0) {
      a2 = a1;
    }
    else {
      a2 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    if (v4)
    {
      if (v2 < 0) {
        a1 = v2;
      }
      else {
        a1 = v2 & 0xFFFFFFFFFFFFFF8;
      }
      return MEMORY[0x270F9E868](a1, a2);
    }
    uint64_t v5 = a2;
    uint64_t v6 = v2;
    goto LABEL_18;
  }
  if (v4)
  {
    if (a2 < 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v6 = v3;
LABEL_18:
    return specialized _NativeSet.isEqual(to:)(v5, v6);
  }
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v8 = 0;
  uint64_t v9 = a1 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & *(void *)(a1 + 56);
  int64_t v32 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = a2 + 56;
  if (!v12) {
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v33 = (v12 - 1) & v12;
  int64_t v34 = v8;
  for (unint64_t i = __clz(__rbit64(v12)) | (v8 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v17 << 6))
  {
    long long v19 = *(void **)(*(void *)(v3 + 48) + 8 * i);
    Hasher.init(_seed:)();
    swift_retain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = v19[4];
    swift_retain();
    specialized Optional<A>.hash(into:)((uint64_t)v35, v20);
    swift_release();
    Swift::Int v21 = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v23 = v21 & ~v22;
    if (((*(void *)(v13 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
      goto LABEL_55;
    }
    long long v24 = (void *)swift_retain();
    BOOL v25 = specialized static MaterialXTarget.== infix(_:_:)(v24, v19);
    swift_release();
    if (!v25)
    {
      uint64_t v26 = v9;
      uint64_t v27 = ~v22;
      for (unint64_t j = v23 + 1; ; unint64_t j = v29 + 1)
      {
        uint64_t v29 = j & v27;
        if (((*(void *)(v13 + (((j & v27) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v27)) & 1) == 0) {
          break;
        }
        uint64_t v30 = (void *)swift_retain();
        BOOL v31 = specialized static MaterialXTarget.== infix(_:_:)(v30, v19);
        swift_release();
        if (v31)
        {
          a1 = swift_release();
          uint64_t v9 = v26;
          goto LABEL_52;
        }
      }
LABEL_55:
      swift_release();
      return 0;
    }
    a1 = swift_release();
LABEL_52:
    unint64_t v12 = v33;
    int64_t v8 = v34;
    if (v33) {
      goto LABEL_27;
    }
LABEL_28:
    int64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    if (v15 >= v32) {
      return 1;
    }
    unint64_t v16 = *(void *)(v9 + 8 * v15);
    int64_t v17 = v8 + 1;
    if (!v16)
    {
      int64_t v17 = v15 + 1;
      if (v15 + 1 >= v32) {
        return 1;
      }
      unint64_t v16 = *(void *)(v9 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v15 + 2;
        if (v15 + 2 >= v32) {
          return 1;
        }
        unint64_t v16 = *(void *)(v9 + 8 * v17);
        if (!v16)
        {
          int64_t v17 = v15 + 3;
          if (v15 + 3 >= v32) {
            return 1;
          }
          unint64_t v16 = *(void *)(v9 + 8 * v17);
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_43:
    uint64_t v33 = (v16 - 1) & v16;
    int64_t v34 = v17;
  }
  int64_t v18 = v15 + 4;
  if (v18 >= v32) {
    return 1;
  }
  unint64_t v16 = *(void *)(v9 + 8 * v18);
  if (v16)
  {
    int64_t v17 = v18;
    goto LABEL_43;
  }
  while (1)
  {
    int64_t v17 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v17 >= v32) {
      return 1;
    }
    unint64_t v16 = *(void *)(v9 + 8 * v17);
    ++v18;
    if (v16) {
      goto LABEL_43;
    }
  }
LABEL_58:
  __break(1u);
  return MEMORY[0x270F9E868](a1, a2);
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v29 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v31 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v30) {
        return 1;
      }
      unint64_t v11 = *(void *)(v29 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v30) {
          return 1;
        }
        unint64_t v11 = *(void *)(v29 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v3 + 4;
          if (v3 + 4 >= v30) {
            return 1;
          }
          unint64_t v11 = *(void *)(v29 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_25:
    unint64_t v6 = (v11 - 1) & v11;
    int64_t v31 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    uint64_t v14 = result;
    int64_t v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    uint64_t v22 = (void *)(v21 + 16 * v20);
    BOOL v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v24 = ~v19;
      for (unint64_t i = v20 + 1; ; unint64_t i = v26 + 1)
      {
        uint64_t v26 = i & v24;
        if (((*(void *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        uint64_t v27 = (void *)(v21 + 16 * v26);
        BOOL v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t result = v14;
    int64_t v3 = v31;
  }
  uint64_t v13 = v3 + 5;
  if (v3 + 5 >= v30) {
    return 1;
  }
  unint64_t v11 = *(void *)(v29 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_25;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

Swift::Int NodeDef.Implementation.hashValue.getter()
{
  Hasher.init(_seed:)();
  NodeDef.Implementation.Kind.hash(into:)((uint64_t)v3);
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for NodeDef.Implementation(0) + 20));
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NodeDef.Implementation(uint64_t a1)
{
  Hasher.init(_seed:)();
  NodeDef.Implementation.Kind.hash(into:)((uint64_t)v5);
  uint64_t v3 = *(void *)(v1 + *(int *)(a1 + 20));
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v5, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NodeDef.Implementation(long long *a1, uint64_t a2)
{
  NodeDef.Implementation.Kind.hash(into:)((uint64_t)a1);
  uint64_t v5 = *(void *)(v2 + *(int *)(a2 + 20));
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v5);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NodeDef.Implementation(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  NodeDef.Implementation.Kind.hash(into:)((uint64_t)v6);
  uint64_t v4 = *(void *)(v2 + *(int *)(a2 + 20));
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v6, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodeDef.Implementation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((specialized static NodeDef.Implementation.Kind.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(a2 + v6);
  return specialized static Set.== infix(_:_:)(v7, v8);
}

uint64_t NodeDef.Implementation.Kind.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NodeDef.Implementation.Kind(0);
  MEMORY[0x270FA5388](v8);
  int64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NodeDef.Implementation.Kind(v2, (uint64_t)v10);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v17 = *((void *)v10 + 1);
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL));
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, &v10[*(int *)(v18 + 48)], v4);
      Hasher._combine(_:)(1uLL);
      if (v17)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, 255, MEMORY[0x263F06EA8]);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      break;
    case 2u:
      Swift::UInt v19 = 2;
      goto LABEL_7;
    case 3u:
      Swift::UInt v19 = 3;
LABEL_7:
      Hasher._combine(_:)(v19);
      String.hash(into:)();
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      long long v11 = *((_OWORD *)v10 + 9);
      v20[8] = *((_OWORD *)v10 + 8);
      v21[0] = v11;
      *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)(v10 + 153);
      long long v12 = *((_OWORD *)v10 + 5);
      v20[4] = *((_OWORD *)v10 + 4);
      v20[5] = v12;
      long long v13 = *((_OWORD *)v10 + 7);
      v20[6] = *((_OWORD *)v10 + 6);
      v20[7] = v13;
      long long v14 = *((_OWORD *)v10 + 1);
      v20[0] = *(_OWORD *)v10;
      v20[1] = v14;
      long long v15 = *((_OWORD *)v10 + 3);
      _OWORD v20[2] = *((_OWORD *)v10 + 2);
      uint64_t v20[3] = v15;
      Hasher._combine(_:)(0);
      Graph.hash(into:)(a1);
      uint64_t result = outlined release of Graph((uint64_t)v20);
      break;
  }
  return result;
}

Swift::Int NodeDef.Implementation.Kind.hashValue.getter()
{
  Hasher.init(_seed:)();
  NodeDef.Implementation.Kind.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NodeDef.Implementation.Kind()
{
  Hasher.init(_seed:)();
  NodeDef.Implementation.Kind.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NodeDef.Implementation.Kind()
{
  Hasher.init(_seed:)();
  NodeDef.Implementation.Kind.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t specialized _NativeSet.isEqual(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = __CocoaSet.count.getter();
  if (v3 != result) {
    return 0;
  }
  int64_t v5 = 0;
  uint64_t v6 = a2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  uint64_t v9 = v8 & *(void *)(a2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    v9 &= v9 - 1;
LABEL_6:
    swift_retain();
    char v11 = __CocoaSet.contains(_:)();
    uint64_t result = swift_release();
    if ((v11 & 1) == 0) {
      return 0;
    }
  }
  int64_t v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v12 >= v10) {
    return 1;
  }
  uint64_t v13 = *(void *)(v6 + 8 * v12);
  ++v5;
  if (v13) {
    goto LABEL_19;
  }
  int64_t v5 = v12 + 1;
  if (v12 + 1 >= v10) {
    return 1;
  }
  uint64_t v13 = *(void *)(v6 + 8 * v5);
  if (v13)
  {
LABEL_19:
    uint64_t v9 = (v13 - 1) & v13;
    goto LABEL_6;
  }
  int64_t v14 = v12 + 2;
  if (v14 >= v10) {
    return 1;
  }
  uint64_t v13 = *(void *)(v6 + 8 * v14);
  if (v13)
  {
    int64_t v5 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v5 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v5 >= v10) {
      return 1;
    }
    uint64_t v13 = *(void *)(v6 + 8 * v5);
    ++v14;
    if (v13) {
      goto LABEL_19;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

void specialized Optional<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_retain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(a2 + 32);
    swift_retain();
    specialized Optional<A>.hash(into:)(a1, v4);
    swift_release();
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

void specialized Set.hash(into:)(long long *a1, uint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 8);
  long long v4 = a1[1];
  long long v27 = *a1;
  long long v28 = v4;
  long long v5 = a1[3];
  long long v29 = a1[2];
  long long v30 = v5;
  uint64_t v31 = v3;
  Hasher._finalize()();
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for MaterialXTarget();
    lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type MaterialXTarget and conformance MaterialXTarget, v6, (void (*)(uint64_t))type metadata accessor for MaterialXTarget);
    Set.Iterator.init(_cocoa:)();
    a2 = v32;
    uint64_t v7 = v33;
    uint64_t v8 = v34;
    int64_t v9 = v35;
    unint64_t v10 = v36;
  }
  else
  {
    uint64_t v11 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v7 = a2 + 56;
    uint64_t v8 = ~v11;
    uint64_t v12 = -v11;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v10 = v13 & *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
  }
  Swift::UInt v14 = 0;
  int64_t v15 = (unint64_t)(v8 + 64) >> 6;
  while (a2 < 0)
  {
    uint64_t v24 = __CocoaSet.Iterator.next()();
    if (!v24) {
      goto LABEL_26;
    }
    v25[0] = v24;
    type metadata accessor for MaterialXTarget();
    swift_dynamicCast();
    uint64_t v19 = v26;
    if (!v26) {
      goto LABEL_27;
    }
    int64_t v18 = v9;
    uint64_t v16 = v10;
LABEL_10:
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(v19 + 32);
    swift_retain();
    specialized Optional<A>.hash(into:)((uint64_t)v25, v20);
    swift_release();
    Swift::Int v21 = Hasher._finalize()();
    swift_release();
    v14 ^= v21;
    int64_t v9 = v18;
    unint64_t v10 = v16;
  }
  if (v10)
  {
    uint64_t v16 = (v10 - 1) & v10;
    unint64_t v17 = __clz(__rbit64(v10)) | (v9 << 6);
    int64_t v18 = v9;
LABEL_9:
    uint64_t v26 = *(void *)(*(void *)(a2 + 48) + 8 * v17);
    uint64_t v19 = v26;
    swift_retain();
    if (!v19) {
      goto LABEL_27;
    }
    goto LABEL_10;
  }
  int64_t v18 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v18 >= v15) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v18);
    if (!v22)
    {
      int64_t v18 = v9 + 2;
      if (v9 + 2 >= v15) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v18);
      if (!v22)
      {
        int64_t v23 = v9 + 3;
        while (v15 != v23)
        {
          unint64_t v22 = *(void *)(v7 + 8 * v23++);
          if (v22)
          {
            int64_t v18 = v23 - 1;
            goto LABEL_22;
          }
        }
LABEL_26:
        uint64_t v26 = 0;
LABEL_27:
        outlined consume of [String : InputSpec].Iterator._Variant();
        Hasher._combine(_:)(v14);
        return;
      }
    }
LABEL_22:
    uint64_t v16 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v18 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

BOOL specialized static MaterialXTarget.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = a1[2] == a2[2] && a1[3] == a2[3];
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v5 & 1) != 0))
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = a2[4];
    BOOL result = (v7 | v8) == 0;
    if (v7) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      swift_retain();
      uint64_t v10 = swift_retain();
      char v11 = specialized static MaterialXTarget.== infix(_:_:)(v10, v8);
      swift_release();
      swift_release();
      return v11 & 1;
    }
  }
  return result;
}

uint64_t specialized static MaterialXAvailability.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 2) {
    return a4 == 2;
  }
  if (a2 != 1)
  {
    if ((unint64_t)(a4 - 1) < 2) {
      return 0;
    }
    if (a2) {
      return a4 && (a1 == a3 && a2 == a4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
    }
    if (a4)
    {
      outlined consume of MaterialXAvailability(a1, 0);
      return 0;
    }
    return 1;
  }
  return a4 == 1;
}

uint64_t specialized static NodeDef.Implementation.Kind.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v60 = v4;
  uint64_t v61 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v58 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  long long v59 = (char *)&v58 - v8;
  uint64_t v9 = type metadata accessor for NodeDef.Implementation.Kind(0);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (uint64_t *)((char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  int64_t v15 = (uint64_t *)((char *)&v58 - v14);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  int64_t v18 = (char *)&v58 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (_OWORD *)((char *)&v58 - v19);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NodeDef.Implementation.Kind, NodeDef.Implementation.Kind));
  uint64_t v22 = MEMORY[0x270FA5388](v21 - 8);
  uint64_t v24 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = (uint64_t)&v24[*(int *)(v22 + 56)];
  outlined init with copy of NodeDef.Implementation.Kind(a1, (uint64_t)v24);
  outlined init with copy of NodeDef.Implementation.Kind(a2, v25);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of NodeDef.Implementation.Kind((uint64_t)v24, (uint64_t)v18);
      uint64_t v31 = *(void *)v18;
      uint64_t v32 = *((void *)v18 + 1);
      uint64_t v33 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                   + 48);
      uint64_t v34 = &v18[v33];
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        (*(void (**)(char *, uint64_t))(v61 + 8))(&v18[v33], v60);
        goto LABEL_23;
      }
      uint64_t v36 = *(void *)v25;
      uint64_t v35 = *(void *)(v25 + 8);
      uint64_t v37 = (char *)(v25 + v33);
      uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
      uint64_t v39 = v34;
      uint64_t v40 = v60;
      v38(v59, v39, v60);
      v38(v58, v37, v40);
      if (v32)
      {
        if (v35)
        {
          if (v31 == v36 && v32 == v35)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_35;
          }
          char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v42)
          {
LABEL_35:
            uint64_t v56 = v58;
            uint64_t v55 = v59;
            char v47 = MEMORY[0x261183A50](v59, v58);
            uint64_t v57 = *(void (**)(char *, uint64_t))(v61 + 8);
            v57(v56, v40);
            v57(v55, v40);
LABEL_36:
            outlined destroy of NodeDef.Implementation.Kind((uint64_t)v24);
            return v47 & 1;
          }
LABEL_30:
          uint64_t v53 = *(void (**)(char *, uint64_t))(v61 + 8);
          v53(v58, v40);
          v53(v59, v40);
          goto LABEL_31;
        }
      }
      else if (!v35)
      {
        goto LABEL_35;
      }
      swift_bridgeObjectRelease();
      goto LABEL_30;
    case 2u:
      outlined init with copy of NodeDef.Implementation.Kind((uint64_t)v24, (uint64_t)v15);
      uint64_t v44 = *v15;
      uint64_t v43 = v15[1];
      if (swift_getEnumCaseMultiPayload() == 2) {
        goto LABEL_14;
      }
      goto LABEL_23;
    case 3u:
      outlined init with copy of NodeDef.Implementation.Kind((uint64_t)v24, (uint64_t)v12);
      uint64_t v44 = *v12;
      uint64_t v43 = v12[1];
      if (swift_getEnumCaseMultiPayload() != 3)
      {
LABEL_23:
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
LABEL_14:
      if (v44 == *(void *)v25 && v43 == *(void *)(v25 + 8))
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_26;
      }
      char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v46)
      {
LABEL_26:
        outlined destroy of NodeDef.Implementation.Kind((uint64_t)v24);
        char v47 = 1;
        return v47 & 1;
      }
LABEL_31:
      outlined destroy of NodeDef.Implementation.Kind((uint64_t)v24);
LABEL_32:
      char v47 = 0;
      return v47 & 1;
    default:
      outlined init with copy of NodeDef.Implementation.Kind((uint64_t)v24, (uint64_t)v20);
      long long v26 = v20[9];
      v62[8] = v20[8];
      v63[0] = v26;
      *(_OWORD *)((char *)v63 + 9) = *(_OWORD *)((char *)v20 + 153);
      long long v27 = v20[5];
      v62[4] = v20[4];
      v62[5] = v27;
      long long v28 = v20[7];
      v62[6] = v20[6];
      v62[7] = v28;
      long long v29 = v20[1];
      v62[0] = *v20;
      v62[1] = v29;
      long long v30 = v20[3];
      _OWORD v62[2] = v20[2];
      v62[3] = v30;
      if (!swift_getEnumCaseMultiPayload())
      {
        long long v48 = *(_OWORD *)(v25 + 144);
        v64[8] = *(_OWORD *)(v25 + 128);
        v65[0] = v48;
        *(_OWORD *)((char *)v65 + 9) = *(_OWORD *)(v25 + 153);
        long long v49 = *(_OWORD *)(v25 + 80);
        v64[4] = *(_OWORD *)(v25 + 64);
        void v64[5] = v49;
        long long v50 = *(_OWORD *)(v25 + 112);
        v64[6] = *(_OWORD *)(v25 + 96);
        v64[7] = v50;
        long long v51 = *(_OWORD *)(v25 + 16);
        v64[0] = *(_OWORD *)v25;
        v64[1] = v51;
        long long v52 = *(_OWORD *)(v25 + 48);
        v64[2] = *(_OWORD *)(v25 + 32);
        v64[3] = v52;
        char v47 = specialized static Graph.== infix(_:_:)((uint64_t)v62, (uint64_t)v64);
        outlined release of Graph((uint64_t)v64);
        outlined release of Graph((uint64_t)v62);
        goto LABEL_36;
      }
      outlined release of Graph((uint64_t)v62);
LABEL_24:
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v24, &demangling cache variable for type metadata for (NodeDef.Implementation.Kind, NodeDef.Implementation.Kind));
      goto LABEL_32;
  }
}

uint64_t specialized static NodeDef.IOSpec.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8))
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v6 = 0;
    if ((v5 & 1) == 0) {
      return v6 & 1;
    }
  }
  if ((MaterialXDataType.isEqual(to:)() & 1) == 0) {
    goto LABEL_21;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a2 + 32);
  if (!v7)
  {
    if (v8) {
      goto LABEL_21;
    }
LABEL_14:
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a2 + 48);
    if (v10)
    {
      if (v11)
      {
        if (*(void *)(a1 + 40) != *(void *)(a2 + 40) || v10 != v11)
        {
          char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
          char v6 = 0;
          if ((v12 & 1) == 0) {
            return v6 & 1;
          }
        }
LABEL_23:
        char v6 = ((*(unsigned char *)(a1 + 56) & 1) == 0) ^ *(unsigned char *)(a2 + 56);
        return v6 & 1;
      }
    }
    else if (!v11)
    {
      goto LABEL_23;
    }
LABEL_21:
    char v6 = 0;
    return v6 & 1;
  }
  if (!v8) {
    goto LABEL_21;
  }
  if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && v7 == v8) {
    goto LABEL_14;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  char v6 = 0;
  if (v9) {
    goto LABEL_14;
  }
  return v6 & 1;
}

uint64_t specialized static NodeDef.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v6 = 0, (v5 & 1) != 0))
  {
    BOOL v7 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v6 = 0, (v8 & 1) != 0))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a2 + 40);
      if (v9)
      {
        if (!v10) {
          goto LABEL_53;
        }
        if (*(void *)(a1 + 32) != *(void *)(a2 + 32) || v9 != v10)
        {
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          char v6 = 0;
          if ((v11 & 1) == 0) {
            return v6 & 1;
          }
        }
      }
      else if (v10)
      {
        goto LABEL_53;
      }
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(a2 + 56);
      if (v12)
      {
        if (!v13) {
          goto LABEL_53;
        }
        if (*(void *)(a1 + 48) != *(void *)(a2 + 48) || v12 != v13)
        {
          char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
          char v6 = 0;
          if ((v14 & 1) == 0) {
            return v6 & 1;
          }
        }
      }
      else if (v13)
      {
        goto LABEL_53;
      }
      uint64_t v15 = *(void *)(a1 + 72);
      uint64_t v16 = *(void *)(a2 + 72);
      if (v15)
      {
        if (!v16) {
          goto LABEL_53;
        }
        if (*(void *)(a1 + 64) != *(void *)(a2 + 64) || v15 != v16)
        {
          char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
          char v6 = 0;
          if ((v17 & 1) == 0) {
            return v6 & 1;
          }
        }
      }
      else if (v16)
      {
        goto LABEL_53;
      }
      int v18 = *(unsigned __int8 *)(a1 + 80);
      int v19 = *(unsigned __int8 *)(a2 + 80);
      if (v18 == 2)
      {
        if (v19 != 2) {
          goto LABEL_53;
        }
      }
      else
      {
        char v6 = 0;
        BOOL v20 = (v18 & 1) == 0;
        if (v19 == 2 || ((v20 ^ v19) & 1) == 0) {
          return v6 & 1;
        }
      }
      if (specialized static Array<A>.== infix(_:_:)(*(void **)(a1 + 88), *(void **)(a2 + 88)))
      {
        uint64_t v21 = *(void *)(a1 + 104);
        uint64_t v22 = *(void *)(a2 + 104);
        if (v21)
        {
          if (!v22) {
            goto LABEL_53;
          }
          if (*(void *)(a1 + 96) != *(void *)(a2 + 96) || v21 != v22)
          {
            char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
            char v6 = 0;
            if ((v23 & 1) == 0) {
              return v6 & 1;
            }
          }
        }
        else if (v22)
        {
          goto LABEL_53;
        }
        outlined init with take of MaterialXAvailability(a1 + 112, (uint64_t)v28);
        uint64_t v25 = *(void *)(a2 + 112);
        uint64_t v24 = *(void *)(a2 + 120);
        outlined init with take of MaterialXAvailability((uint64_t)v28, (uint64_t)&v29);
        if (v30 == 2)
        {
          if (v24 != 2) {
            goto LABEL_53;
          }
        }
        else if (v30 == 1)
        {
          if (v24 != 1) {
            goto LABEL_53;
          }
        }
        else
        {
          if ((unint64_t)(v24 - 1) < 2) {
            goto LABEL_53;
          }
          if (v30)
          {
            if (!v24) {
              goto LABEL_53;
            }
            if (v29 != v25 || v30 != v24)
            {
              char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
              char v6 = 0;
              if ((v27 & 1) == 0) {
                return v6 & 1;
              }
            }
          }
          else if (v24)
          {
            outlined release of MaterialXAvailability(v28);
            goto LABEL_53;
          }
        }
        if (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 128), *(void *)(a2 + 128)))
        {
          char v6 = specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 136), *(void *)(a2 + 136));
          return v6 & 1;
        }
      }
LABEL_53:
      char v6 = 0;
    }
  }
  return v6 & 1;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      uint64_t v7 = 4;
      do
      {
        uint64_t v8 = v7 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = MEMORY[0x2611848A0](v7 - 4, a1);
          BOOL v10 = __OFADD__(v8, 1);
          uint64_t v11 = v7 - 3;
          if (v10) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v9 = *(void *)(a1 + 8 * v7);
          swift_retain();
          BOOL v10 = __OFADD__(v8, 1);
          uint64_t v11 = v7 - 3;
          if (v10)
          {
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
        }
        BOOL v12 = *(void *)(v9 + 16) == a2 && *(void *)(v9 + 24) == a3;
        if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
        swift_release();
        ++v7;
      }
      while (v11 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized MaterialXAvailability.init(_:message:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    goto LABEL_10;
  }
  if ((a1 != 0x726F707075736E75 || a2 != 0xEB00000000646574)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (a1 == 0x7461636572706564 && a2 == 0xEA00000000006465)
    {
      swift_bridgeObjectRelease();
      return a3;
    }
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return a3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t outlined init with take of NodeDef.Implementation.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NodeDef.Implementation.Kind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NodeDef.Implementation.Kind(uint64_t a1)
{
  return type metadata accessor for NodeDef.Implementation.Kind(a1, (uint64_t *)&type metadata singleton initialization cache for NodeDef.Implementation.Kind);
}

uint64_t type metadata accessor for NodeDef.Implementation(uint64_t a1)
{
  return type metadata accessor for NodeDef.Implementation.Kind(a1, (uint64_t *)&type metadata singleton initialization cache for NodeDef.Implementation);
}

uint64_t type metadata accessor for NodeDef.Implementation.Kind(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of NodeDef.Implementation.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NodeDef.Implementation.Kind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Equatable in MaterialXTarget(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type MaterialXTarget and conformance MaterialXTarget, a2, (void (*)(uint64_t))type metadata accessor for MaterialXTarget);
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for MaterialXTarget()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type MaterialXAvailability and conformance MaterialXAvailability()
{
  unint64_t result = lazy protocol witness table cache variable for type MaterialXAvailability and conformance MaterialXAvailability;
  if (!lazy protocol witness table cache variable for type MaterialXAvailability and conformance MaterialXAvailability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXAvailability and conformance MaterialXAvailability);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NodeDef.IOSpec and conformance NodeDef.IOSpec()
{
  unint64_t result = lazy protocol witness table cache variable for type NodeDef.IOSpec and conformance NodeDef.IOSpec;
  if (!lazy protocol witness table cache variable for type NodeDef.IOSpec and conformance NodeDef.IOSpec)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDef.IOSpec and conformance NodeDef.IOSpec);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NodeDef and conformance NodeDef()
{
  unint64_t result = lazy protocol witness table cache variable for type NodeDef and conformance NodeDef;
  if (!lazy protocol witness table cache variable for type NodeDef and conformance NodeDef)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDef and conformance NodeDef);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in NodeDef.Implementation()
{
  return lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type NodeDef.Implementation and conformance NodeDef.Implementation, 255, (void (*)(uint64_t))type metadata accessor for NodeDef.Implementation);
}

uint64_t base witness table accessor for Equatable in NodeDef.Implementation.Kind()
{
  return lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type NodeDef.Implementation.Kind and conformance NodeDef.Implementation.Kind, 255, (void (*)(uint64_t))type metadata accessor for NodeDef.Implementation.Kind);
}

uint64_t method lookup function for MaterialXTarget(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MaterialXTarget);
}

unint64_t destroy for MaterialXAvailability(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if ((v2 + 1) <= 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MaterialXAvailability(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if ((v4 + 1) > 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for MaterialXAvailability(void *a1, void *a2)
{
  LODWORD(v4) = -1;
  if (a1[1] >= 0xFFFFFFFFuLL) {
    LODWORD(v5) = -1;
  }
  else {
    uint64_t v5 = a1[1];
  }
  unsigned int v6 = v5 + 1;
  if (a2[1] < 0xFFFFFFFFuLL) {
    uint64_t v4 = a2[1];
  }
  unsigned int v7 = v4 + 1;
  if (v6 > 1)
  {
    if (v7 <= 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_12:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v7 > 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MaterialXAvailability(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if ((v5 + 1) > 1) {
    goto LABEL_9;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  LODWORD(v7) = -1;
  if (v6 < 0xFFFFFFFF) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if ((v7 + 1) > 1)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialXAvailability(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) < 2) {
    LODWORD(v3) = 0;
  }
  if (v3 >= 3) {
    return (v3 - 2);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MaterialXAvailability(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

uint64_t getEnumTag for MaterialXAvailability(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  if ((v1 + 1) >= 2) {
    return v1;
  }
  else {
    return 0;
  }
}

void *destructiveInjectEnumTag for MaterialXAvailability(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *unint64_t result = 0;
    result[1] = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialXAvailability()
{
  return &type metadata for MaterialXAvailability;
}

uint64_t destroy for NodeDef(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((unint64_t)(*(void *)(a1 + 120) - 1) >= 2) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NodeDef(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  char v14 = (void *)(a2 + 112);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((unint64_t)(v10 - 1) >= 2)
  {
    *(void *)(a1 + 112) = *v14;
    *(void *)(a1 + 120) = v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)v14;
  }
  uint64_t v11 = *(void *)(a2 + 128);
  uint64_t v12 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = v11;
  *(void *)(a1 + 136) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NodeDef(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = *(void *)(a2 + 120) - 1;
  if ((unint64_t)(*(void *)(a1 + 120) - 1) >= 2)
  {
    if (v4 >= 2)
    {
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)(a1 + 112, &demangling cache variable for type metadata for String?);
    goto LABEL_6;
  }
  if (v4 < 2)
  {
LABEL_6:
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    goto LABEL_8;
  }
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
LABEL_8:
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for NodeDef(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = (void *)(a2 + 112);
  if ((unint64_t)(*(void *)(a1 + 120) - 1) >= 2)
  {
    uint64_t v11 = *(void *)(a2 + 120);
    if ((unint64_t)(v11 - 1) >= 2)
    {
      *(void *)(a1 + 112) = *v10;
      *(void *)(a1 + 120) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)(a1 + 112, &demangling cache variable for type metadata for String?);
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)v10;
LABEL_6:
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeDef(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeDef(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NodeDef()
{
  return &type metadata for NodeDef;
}

uint64_t destroy for NodeDef.IOSpec()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NodeDef.IOSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NodeDef.IOSpec(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for NodeDef.IOSpec(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for NodeDef.IOSpec()
{
  return &type metadata for NodeDef.IOSpec;
}

uint64_t initializeBufferWithCopyOfBuffer for NodeDef.Implementation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    type metadata accessor for NodeDef.Implementation.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v23 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v23;
        swift_bridgeObjectRetain();
        uint64_t v24 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                     + 48);
        uint64_t v25 = a1 + v24;
        uint64_t v26 = (uint64_t)a2 + v24;
        uint64_t v27 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
        break;
      case 2u:
      case 3u:
        uint64_t v7 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v7;
        goto LABEL_6;
      default:
        uint64_t v9 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v9;
        uint64_t v10 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v10;
        uint64_t v11 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v11;
        uint64_t v12 = a2[7];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = v12;
        uint64_t v13 = a2[9];
        *(void *)(a1 + 64) = a2[8];
        *(void *)(a1 + 72) = v13;
        unint64_t v29 = a2[10];
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v29);
        uint64_t v14 = a2[11];
        uint64_t v15 = a2[12];
        *(void *)(a1 + 80) = v29;
        *(void *)(a1 + 88) = v14;
        uint64_t v16 = a2[13];
        uint64_t v17 = a2[14];
        *(void *)(a1 + 96) = v15;
        *(void *)(a1 + 104) = v16;
        *(void *)(a1 + 112) = v17;
        *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
        unint64_t v18 = a2[16];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v18);
        uint64_t v19 = a2[17];
        uint64_t v20 = a2[18];
        *(void *)(a1 + 128) = v18;
        *(void *)(a1 + 136) = v19;
        uint64_t v21 = a2[19];
        uint64_t v22 = a2[20];
        *(void *)(a1 + 144) = v20;
        *(void *)(a1 + 152) = v21;
        *(void *)(a1 + 160) = v22;
        *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
        swift_bridgeObjectRetain();
LABEL_6:
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    *(void *)(a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for NodeDef.Implementation(uint64_t a1)
{
  type metadata accessor for NodeDef.Implementation.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(*(void *)(a1 + 80));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(*(void *)(a1 + 128));
      swift_bridgeObjectRelease();
      goto LABEL_3;
    case 1u:
      swift_bridgeObjectRelease();
      uint64_t v2 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                  + 48);
      uint64_t v3 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
      break;
    case 2u:
    case 3u:
LABEL_3:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NodeDef.Implementation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for NodeDef.Implementation.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v21 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v21;
      swift_bridgeObjectRetain();
      uint64_t v22 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                   + 48);
      uint64_t v23 = a1 + v22;
      uint64_t v24 = a2 + v22;
      uint64_t v25 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
      break;
    case 2u:
    case 3u:
      uint64_t v6 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v6;
      goto LABEL_4;
    default:
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v7;
      uint64_t v8 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v8;
      uint64_t v9 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v9;
      uint64_t v10 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v10;
      uint64_t v11 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v11;
      unint64_t v27 = *(void *)(a2 + 80);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v27);
      uint64_t v12 = *(void *)(a2 + 88);
      uint64_t v13 = *(void *)(a2 + 96);
      *(void *)(a1 + 80) = v27;
      *(void *)(a1 + 88) = v12;
      uint64_t v14 = *(void *)(a2 + 104);
      uint64_t v15 = *(void *)(a2 + 112);
      *(void *)(a1 + 96) = v13;
      *(void *)(a1 + 104) = v14;
      *(void *)(a1 + 112) = v15;
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      unint64_t v16 = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v16);
      uint64_t v17 = *(void *)(a2 + 136);
      uint64_t v18 = *(void *)(a2 + 144);
      *(void *)(a1 + 128) = v16;
      *(void *)(a1 + 136) = v17;
      uint64_t v19 = *(void *)(a2 + 152);
      uint64_t v20 = *(void *)(a2 + 160);
      *(void *)(a1 + 144) = v18;
      *(void *)(a1 + 152) = v19;
      *(void *)(a1 + 160) = v20;
      *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
      swift_bridgeObjectRetain();
LABEL_4:
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NodeDef.Implementation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of NodeDef.Implementation.Kind(a1);
    type metadata accessor for NodeDef.Implementation.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        swift_bridgeObjectRetain();
        uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                    + 48);
        uint64_t v10 = a1 + v9;
        uint64_t v11 = a2 + v9;
        uint64_t v12 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
        break;
      case 2u:
      case 3u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        goto LABEL_5;
      default:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        unint64_t v14 = *(void *)(a2 + 80);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v14);
        *(void *)(a1 + 80) = v14;
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(void *)(a1 + 104) = *(void *)(a2 + 104);
        uint64_t v6 = *(void *)(a2 + 112);
        *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
        *(void *)(a1 + 112) = v6;
        unint64_t v7 = *(void *)(a2 + 128);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v7);
        *(void *)(a1 + 128) = v7;
        *(void *)(a1 + 136) = *(void *)(a2 + 136);
        *(void *)(a1 + 144) = *(void *)(a2 + 144);
        *(void *)(a1 + 152) = *(void *)(a2 + 152);
        uint64_t v8 = *(void *)(a2 + 160);
        *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
        *(void *)(a1 + 160) = v8;
        swift_bridgeObjectRetain();
LABEL_5:
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of NodeDef.Implementation.Kind(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NodeDef.Implementation.Kind(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *initializeWithTake for NodeDef.Implementation(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NodeDef.Implementation.Kind(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                + 48);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_OWORD *assignWithTake for NodeDef.Implementation(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of NodeDef.Implementation.Kind((uint64_t)a1);
    uint64_t v6 = type metadata accessor for NodeDef.Implementation.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                  + 48);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeDef.Implementation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25C35B814);
}

uint64_t sub_25C35B814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NodeDef.Implementation.Kind(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for NodeDef.Implementation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25C35B8E8);
}

uint64_t sub_25C35B8E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for NodeDef.Implementation.Kind(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for NodeDef.Implementation()
{
  uint64_t result = type metadata accessor for NodeDef.Implementation.Kind(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NodeDef.Implementation.Kind(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *(void *)a1 = *a2;
    a1 = v21 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v23 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v23;
        swift_bridgeObjectRetain();
        uint64_t v24 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                     + 48);
        uint64_t v25 = a1 + v24;
        uint64_t v26 = (uint64_t)a2 + v24;
        uint64_t v27 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
        break;
      case 2u:
      case 3u:
        uint64_t v22 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v22;
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v6;
        uint64_t v7 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v7;
        uint64_t v8 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v8;
        uint64_t v9 = a2[7];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = v9;
        uint64_t v10 = a2[9];
        *(void *)(a1 + 64) = a2[8];
        *(void *)(a1 + 72) = v10;
        unint64_t v11 = a2[10];
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v11);
        uint64_t v12 = a2[11];
        uint64_t v13 = a2[12];
        *(void *)(a1 + 80) = v11;
        *(void *)(a1 + 88) = v12;
        uint64_t v14 = a2[13];
        uint64_t v15 = a2[14];
        *(void *)(a1 + 96) = v13;
        *(void *)(a1 + 104) = v14;
        *(void *)(a1 + 112) = v15;
        *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
        unint64_t v16 = a2[16];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v16);
        uint64_t v17 = a2[17];
        uint64_t v18 = a2[18];
        *(void *)(a1 + 128) = v16;
        *(void *)(a1 + 136) = v17;
        uint64_t v19 = a2[19];
        uint64_t v20 = a2[20];
        *(void *)(a1 + 144) = v18;
        *(void *)(a1 + 152) = v19;
        *(void *)(a1 + 160) = v20;
        *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for NodeDef.Implementation.Kind(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(*(void *)(a1 + 80));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(*(void *)(a1 + 128));
      swift_bridgeObjectRelease();
      goto LABEL_3;
    case 1:
      swift_bridgeObjectRelease();
      uint64_t v3 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                  + 48);
      uint64_t v4 = type metadata accessor for URL();
      int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
      uint64_t result = v5(v3, v4);
      break;
    case 2:
    case 3:
LABEL_3:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for NodeDef.Implementation.Kind(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v19 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v19;
      swift_bridgeObjectRetain();
      uint64_t v20 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                   + 48);
      uint64_t v21 = a1 + v20;
      uint64_t v22 = a2 + v20;
      uint64_t v23 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
      break;
    case 2u:
    case 3u:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      goto LABEL_4;
    default:
      uint64_t v5 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v5;
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v6;
      uint64_t v7 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v7;
      uint64_t v8 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v8;
      uint64_t v9 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v9;
      unint64_t v25 = *(void *)(a2 + 80);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v25);
      uint64_t v10 = *(void *)(a2 + 88);
      uint64_t v11 = *(void *)(a2 + 96);
      *(void *)(a1 + 80) = v25;
      *(void *)(a1 + 88) = v10;
      uint64_t v12 = *(void *)(a2 + 104);
      uint64_t v13 = *(void *)(a2 + 112);
      *(void *)(a1 + 96) = v11;
      *(void *)(a1 + 104) = v12;
      *(void *)(a1 + 112) = v13;
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      unint64_t v14 = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v14);
      uint64_t v15 = *(void *)(a2 + 136);
      uint64_t v16 = *(void *)(a2 + 144);
      *(void *)(a1 + 128) = v14;
      *(void *)(a1 + 136) = v15;
      uint64_t v17 = *(void *)(a2 + 152);
      uint64_t v18 = *(void *)(a2 + 160);
      *(void *)(a1 + 144) = v16;
      *(void *)(a1 + 152) = v17;
      *(void *)(a1 + 160) = v18;
      *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
      swift_bridgeObjectRetain();
LABEL_4:
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for NodeDef.Implementation.Kind(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of NodeDef.Implementation.Kind(a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        swift_bridgeObjectRetain();
        uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                    + 48);
        uint64_t v8 = a1 + v7;
        uint64_t v9 = a2 + v7;
        uint64_t v10 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
        break;
      case 2u:
      case 3u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        goto LABEL_5;
      default:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        unint64_t v12 = *(void *)(a2 + 80);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v12);
        *(void *)(a1 + 80) = v12;
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(void *)(a1 + 104) = *(void *)(a2 + 104);
        uint64_t v4 = *(void *)(a2 + 112);
        *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
        *(void *)(a1 + 112) = v4;
        unint64_t v5 = *(void *)(a2 + 128);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v5);
        *(void *)(a1 + 128) = v5;
        *(void *)(a1 + 136) = *(void *)(a2 + 136);
        *(void *)(a1 + 144) = *(void *)(a2 + 144);
        *(void *)(a1 + 152) = *(void *)(a2 + 152);
        uint64_t v6 = *(void *)(a2 + 160);
        *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
        *(void *)(a1 + 160) = v6;
        swift_bridgeObjectRetain();
LABEL_5:
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for NodeDef.Implementation.Kind(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                + 48);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for NodeDef.Implementation.Kind(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of NodeDef.Implementation.Kind((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL))
                  + 48);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeDef.Implementation.Kind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for NodeDef.Implementation.Kind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for NodeDef.Implementation.Kind()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for NodeDef.Implementation.Kind()
{
  v2[4] = &unk_25C41C5C0;
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    v2[6] = &unk_25C41C5F0;
    v2[7] = &unk_25C41C5F0;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

id SGError.__allocating_init(_:)(void *a1)
{
  id v24 = a1;
  id v2 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    id v3 = SGError.__allocating_init(_:)(v22[0], v22[1], v23);

    id v4 = v24;
    goto LABEL_14;
  }

  v22[0] = a1;
  id v5 = a1;
  if (swift_dynamicCast())
  {
    id v6 = SGError.__allocating_init(_:)((unint64_t)v24);
LABEL_7:
    id v3 = v6;

    id v4 = v22[0];
    goto LABEL_14;
  }

  v22[0] = a1;
  id v7 = a1;
  if (swift_dynamicCast())
  {
    id v6 = SGError.__allocating_init(_:)(v24);
    goto LABEL_7;
  }

  v22[0] = a1;
  id v8 = a1;
  uint64_t v9 = String.init<A>(describing:)();
  unint64_t v11 = v10;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)logger);
  swift_bridgeObjectRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    v22[0] = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    swift_bridgeObjectRetain();
    id v24 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, (uint64_t *)v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25C27E000, v13, v14, "ShaderGraph threw an unwrapped error: %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261185880](v16, -1, -1);
    MEMORY[0x261185880](v15, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  lazy protocol witness table accessor for type APIError and conformance APIError();
  uint64_t v17 = swift_allocError();
  *(_OWORD *)uint64_t v18 = xmmword_25C41A130;
  *(unsigned char *)(v18 + 16) = 21;
  id v19 = a1;
  unint64_t v20 = specialized NestedError.init(_:_:)(v17, a1);
  id v3 = SGError.__allocating_init(_:)(v20);
  id v4 = a1;
LABEL_14:

  return v3;
}

{
  objc_class *v1;
  objc_class *v2;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  Class isa;
  id v10;

  id v2 = v1;
  id v4 = objc_msgSend(a1, sel_domain);
  if (!v4)
  {
    id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v4 = (id)MEMORY[0x261183E60](v5);
    swift_bridgeObjectRelease();
  }
  id v6 = objc_allocWithZone(v2);
  id v7 = objc_msgSend(a1, sel_code);
  id v8 = objc_msgSend(a1, sel_userInfo);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unint64_t v10 = objc_msgSend(v6, sel_initWithDomain_code_userInfo_, v4, v7, isa);

  return v10;
}

id SGError.__allocating_init(_:)(void *a1, void *a2, char a3)
{
  id v4 = v3;
  id v8 = objc_allocWithZone(v4);
  uint64_t v9 = (void *)MEMORY[0x261183E60](0xD000000000000015, 0x800000025C421E30);
  uint64_t v10 = APIError.nsErrorCode.getter((uint64_t)a1, (uint64_t)a2, a3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C418EE0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v12;
  unint64_t v13 = APIError.description.getter(a1, a2, a3);
  *(void *)(inited + 72) = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = v13;
  *(void *)(inited + 56) = v14;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v8, sel_initWithDomain_code_userInfo_, v9, v10, isa);
  outlined consume of APIError(a1, a2, a3);

  return v16;
}

id SGError.__allocating_init(_:)(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0) {
    id v2 = *(id *)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
  }
  else {
    id v2 = (id)a1;
  }
  Swift::String v67 = v2;
  id v3 = v2;
  id v4 = v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  int v5 = swift_dynamicCast();
  uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v61 = v2;
  if (v5)
  {
    uint64_t v59 = APIError.nsErrorCode.getter((uint64_t)v63, (uint64_t)v65, v66);
    uint64_t v62 = v6;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = a1;
    id v8 = (unint64_t *)(v7 + 16);
    swift_retain();
    outlined copy of NestedError(a1);
    swift_beginAccess();
    for (unint64_t i = *v8; (~*v8 & 0xF000000000000007) != 0; unint64_t i = *v8)
    {
      if ((i & 0x8000000000000000) != 0)
      {
        unint64_t v11 = *(void **)((i & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
        unint64_t v10 = *(void *)((i & 0x7FFFFFFFFFFFFFFFLL) + 0x18);
        *id v8 = v10;
        id v12 = v11;
      }
      else
      {
        *id v8 = 0xF000000000000007;
        unint64_t v10 = i;
      }
      outlined copy of NestedError(v10);
      outlined consume of NestedError?(i);
      uint64_t v13 = String.init<A>(describing:)();
      uint64_t v15 = v14;
      uint64_t v16 = v62;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v62 + 16) + 1, 1);
        uint64_t v16 = v62;
      }
      unint64_t v18 = *(void *)(v16 + 16);
      unint64_t v17 = *(void *)(v16 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        uint64_t v16 = v62;
      }
      *(void *)(v16 + 16) = v18 + 1;
      uint64_t v19 = v16 + 16 * v18;
      *(void *)(v19 + 32) = v13;
      *(void *)(v19 + 40) = v15;
    }
    swift_release_n();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v33 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v35 = v34;
    swift_release();
    outlined consume of APIError(v63, v65, v66);

    uint64_t v36 = v59;
  }
  else
  {

    uint64_t v68 = v6;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = a1;
    uint64_t v21 = (unint64_t *)(v20 + 16);
    outlined copy of NestedError(a1);
    swift_retain();
    swift_beginAccess();
    for (unint64_t j = *v21; (~*v21 & 0xF000000000000007) != 0; unint64_t j = *v21)
    {
      if ((j & 0x8000000000000000) != 0)
      {
        id v24 = *(void **)((j & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
        unint64_t v23 = *(void *)((j & 0x7FFFFFFFFFFFFFFFLL) + 0x18);
        *uint64_t v21 = v23;
        id v25 = v24;
      }
      else
      {
        *uint64_t v21 = 0xF000000000000007;
        unint64_t v23 = j;
      }
      outlined copy of NestedError(v23);
      outlined consume of NestedError?(j);
      uint64_t v26 = String.init<A>(describing:)();
      uint64_t v28 = v27;
      uint64_t v29 = v68;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v68 + 16) + 1, 1);
        uint64_t v29 = v68;
      }
      unint64_t v31 = *(void *)(v29 + 16);
      unint64_t v30 = *(void *)(v29 + 24);
      if (v31 >= v30 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        uint64_t v29 = v68;
      }
      *(void *)(v29 + 16) = v31 + 1;
      uint64_t v32 = v29 + 16 * v31;
      *(void *)(v32 + 32) = v26;
      *(void *)(v32 + 40) = v28;
    }
    swift_release_n();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v37 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v39 = v38;
    swift_release();
    v40._char countAndFlagsBits = v37;
    v40._uint64_t object = v39;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._char countAndFlagsBits = 41;
    v41._uint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v41);
    v42._char countAndFlagsBits = 10272;
    v42._uint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    uint64_t v33 = 0xD000000000000029;
    unint64_t v35 = 0x800000025C425CB0;
    uint64_t v36 = -1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C418EF0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v44;
  *(void *)(inited + 72) = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = v33;
  *(void *)(inited + 56) = v35;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v45;
  outlined copy of NestedError(a1);
  specialized _copySequenceToContiguousArray<A>(_:)(a1, 1);
  uint64_t v47 = v46;
  outlined consume of NestedError(a1);
  uint64_t v48 = *(void *)(v47 + 16);
  if (v48)
  {
    uint64_t v64 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v49 = 0;
    do
    {
      uint64_t v50 = v49 + 1;
      long long v51 = *(void **)(v47 + 8 * v49 + 32);
      id v52 = v51;
      _convertErrorToNSError(_:)();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v49 = v50;
    }
    while (v48 != v50);
    uint64_t v53 = v64;
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v53 = MEMORY[0x263F8EE78];
  }
  *(void *)(inited + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSError]);
  *(void *)(inited + 96) = v53;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  id v54 = objc_allocWithZone(v60);
  uint64_t v55 = (void *)MEMORY[0x261183E60](0xD000000000000015, 0x800000025C421E30);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v57 = objc_msgSend(v54, sel_initWithDomain_code_userInfo_, v55, v36, isa);
  outlined consume of NestedError(a1);

  return v57;
}

uint64_t APIError.nsErrorCode.getter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = 18;
  switch(a3)
  {
    case 1:
      uint64_t result = 2;
      break;
    case 2:
      uint64_t result = 3;
      break;
    case 3:
      uint64_t result = 4;
      break;
    case 4:
      uint64_t result = 5;
      break;
    case 5:
      uint64_t result = 6;
      break;
    case 6:
      uint64_t result = 7;
      break;
    case 7:
      uint64_t result = 8;
      break;
    case 8:
      uint64_t result = 9;
      break;
    case 9:
      uint64_t result = 10;
      break;
    case 10:
      uint64_t result = 13;
      break;
    case 11:
      uint64_t result = 15;
      break;
    case 12:
      return result;
    case 13:
      uint64_t result = 19;
      break;
    case 14:
      uint64_t result = 20;
      break;
    case 15:
      uint64_t result = 21;
      break;
    case 16:
      uint64_t result = 22;
      break;
    case 17:
      uint64_t result = 23;
      break;
    case 18:
      uint64_t result = 25;
      break;
    case 19:
      uint64_t result = 27;
      break;
    case 20:
      uint64_t result = 28;
      break;
    case 21:
      uint64_t result = qword_25C41C708[a1];
      break;
    default:
      uint64_t result = 1;
      break;
  }
  return result;
}

unint64_t APIError.description.getter(void *a1, void *a2, char a3)
{
  switch(a3)
  {
    case 1:
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD00000000000001CLL;
      goto LABEL_23;
    case 2:
    case 3:
    case 4:
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000024;
      goto LABEL_23;
    case 5:
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000026;
      goto LABEL_23;
    case 6:
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD00000000000001FLL;
      goto LABEL_23;
    case 7:
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD00000000000001ELL;
      goto LABEL_23;
    case 8:
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      unint64_t v20 = 0xD000000000000016;
      uint64_t v6 = MEMORY[0x261184160](a1, MEMORY[0x263F8D310]);
      goto LABEL_12;
    case 9:
    case 10:
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD00000000000001ALL;
      goto LABEL_23;
    case 11:
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000013;
      goto LABEL_23;
    case 12:
      unint64_t v20 = 0;
      _StringGuts.grow(_:)(66);
      v8._char countAndFlagsBits = 0xD000000000000032;
      v8._uint64_t object = (void *)0x800000025C425E40;
      String.append(_:)(v8);
      v9._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._char countAndFlagsBits = 0x6365707865202C27;
      v10._uint64_t object = (void *)0xEC00000020646574;
      String.append(_:)(v10);
      uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
LABEL_12:
      String.append(_:)(*(Swift::String *)&v6);
      swift_bridgeObjectRelease();
      return v20;
    case 13:
      unint64_t v20 = 0;
      a1;
      _StringGuts.grow(_:)(23);
      v11._char countAndFlagsBits = 0xD000000000000014;
      v11._uint64_t object = (void *)0x800000025C425E20;
      String.append(_:)(v11);
      type metadata accessor for CGColorRef(0);
      _print_unlocked<A, B>(_:_:)();
      v12._char countAndFlagsBits = 39;
      v12._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      outlined consume of APIError(a1, a2, 13);
      return v20;
    case 14:
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      unint64_t v20 = 0xD000000000000012;
      v13._char countAndFlagsBits = (uint64_t)a1;
      v13._uint64_t object = a2;
      String.append(_:)(v13);
      unint64_t v14 = 39;
      unint64_t v15 = 0xE100000000000000;
      goto LABEL_24;
    case 15:
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      unint64_t v20 = 0xD000000000000010;
      v16._char countAndFlagsBits = (uint64_t)a1;
      v16._uint64_t object = a2;
      String.append(_:)(v16);
      unint64_t v14 = 0x64696C61766E6920;
      unint64_t v15 = 0xE800000000000000;
      goto LABEL_24;
    case 16:
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      unint64_t v20 = 0xD000000000000010;
      v17._char countAndFlagsBits = (uint64_t)a1;
      v17._uint64_t object = a2;
      String.append(_:)(v17);
      unint64_t v14 = 0x706D652073617720;
      unint64_t v15 = 0xEA00000000007974;
      goto LABEL_24;
    case 17:
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      unint64_t v20 = 0xD000000000000010;
      v18._char countAndFlagsBits = (uint64_t)a1;
      v18._uint64_t object = a2;
      String.append(_:)(v18);
      unint64_t v14 = 0xD000000000000011;
      unint64_t v15 = 0x800000025C425DE0;
      goto LABEL_24;
    case 18:
      _StringGuts.grow(_:)(49);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD00000000000002FLL;
      goto LABEL_23;
    case 19:
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000030;
      goto LABEL_23;
    case 20:
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0x2065727574786554;
      goto LABEL_23;
    case 21:
      unint64_t result = 0xD000000000000029;
      switch((unint64_t)a1)
      {
        case 1uLL:
          unint64_t result = 0xD00000000000001CLL;
          break;
        case 2uLL:
          unint64_t result = 0xD00000000000001BLL;
          break;
        case 3uLL:
          unint64_t result = 0xD00000000000003BLL;
          break;
        case 4uLL:
          unint64_t result = 0xD00000000000001ALL;
          break;
        case 5uLL:
          unint64_t result = 0xD00000000000001DLL;
          break;
        case 6uLL:
          unint64_t result = 0xD000000000000017;
          break;
        case 7uLL:
          unint64_t result = 0xD00000000000001CLL;
          break;
        case 8uLL:
          return result;
        default:
          unint64_t result = 0xD000000000000025;
          break;
      }
      return result;
    default:
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000021;
LABEL_23:
      unint64_t v20 = v5;
      unint64_t v14 = (unint64_t)a1;
      unint64_t v15 = (unint64_t)a2;
LABEL_24:
      String.append(_:)(*(Swift::String *)&v14);
      return v20;
  }
}

uint64_t static SGError.supportsSecureCoding.getter()
{
  return 1;
}

id SGError.__allocating_init(domain:code:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = v4;
  Swift::String v8 = (void *)MEMORY[0x261183E60]();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v9.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9.super.Class isa = 0;
  }
  id v10 = objc_msgSend(objc_allocWithZone(v5), sel_initWithDomain_code_userInfo_, v8, a3, v9.super.isa);

  return v10;
}

id SGError.init(domain:code:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v10 = (void *)MEMORY[0x261183E60](a1, a2);
  swift_bridgeObjectRelease();
  if (a4)
  {
    v11.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v11.super.Class isa = 0;
  }
  v14.receiver = v4;
  v14.super_class = ObjectType;
  id v12 = objc_msgSendSuper2(&v14, sel_initWithDomain_code_userInfo_, v10, a3, v11.super.isa);

  return v12;
}

id SGError.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id SGError.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id SGError.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t *SGInternalError.type.getter@<X0>(uint64_t *a1@<X8>)
{
  return outlined init with copy of SGInternalError.ErrorType(v1, a1);
}

uint64_t SGInternalError.details.getter()
{
  uint64_t v1 = *(void *)(v0 + 208);
  swift_bridgeObjectRetain();
  return v1;
}

double SGInternalError.init(_:details:)@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  outlined init with take of SGInternalError.ErrorType(a1, v15);
  outlined init with take of SGInternalError.ErrorType(v15, v16);
  outlined init with take of SGInternalError.ErrorType(v16, v17);
  *(void *)&long long v18 = a2;
  *((void *)&v18 + 1) = a3;
  long long v7 = v17[11];
  a4[10] = v17[10];
  a4[11] = v7;
  long long v8 = v18;
  a4[12] = v17[12];
  a4[13] = v8;
  long long v9 = v17[7];
  a4[6] = v17[6];
  a4[7] = v9;
  long long v10 = v17[9];
  a4[8] = v17[8];
  a4[9] = v10;
  long long v11 = v17[3];
  a4[2] = v17[2];
  a4[3] = v11;
  long long v12 = v17[5];
  a4[4] = v17[4];
  a4[5] = v12;
  double result = *(double *)v17;
  long long v14 = v17[1];
  *a4 = v17[0];
  a4[1] = v14;
  return result;
}

uint64_t SGInternalError.ErrorType.errorDescription.getter()
{
  uint64_t v1 = (uint64_t)v0;
  outlined init with take of SGInternalError.ErrorType(v0, v24);
  outlined init with take of SGInternalError.ErrorType(v24, v27);
  outlined init with take of SGInternalError.ErrorType(v0, v25);
  uint64_t v2 = 0xD000000000000012;
  switch(_s11ShaderGraph15SGInternalErrorV0D4TypeOWOg((uint64_t)v25))
  {
    case 1u:
      objc_super v5 = (_OWORD *)_s11ShaderGraph15SGInternalErrorV0D4TypeOWOj0_((uint64_t)v25);
      v21[0] = *v5;
      v21[1] = v5[1];
      _OWORD v21[2] = v5[2];
      _OWORD v21[3] = v5[3];
      uint64_t v22 = 0;
      unint64_t v23 = 0xE000000000000000;
      outlined init with take of SGInternalError.ErrorType(v27, v26);
      uint64_t v6 = _s11ShaderGraph15SGInternalErrorV0D4TypeOWOj0_((uint64_t)v26);
      outlined copy of MetalFunctionGraphError.ErrorType(*(void *)v6, *(void *)(v6 + 8), *(void *)(v6 + 16), *(void *)(v6 + 24), *(unsigned char *)(v6 + 32));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v7._char countAndFlagsBits = MetalFunctionGraphError.description.getter();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      outlined release of SGInternalError.ErrorType(v1);
      uint64_t v2 = 0xD000000000000019;
      break;
    case 2u:
      long long v8 = (uint64_t *)_s11ShaderGraph15SGInternalErrorV0D4TypeOWOj0_((uint64_t)v25);
      uint64_t v9 = *v8;
      long long v10 = (void *)v8[1];
      uint64_t v11 = v8[2];
      long long v12 = (void *)v8[3];
      *(void *)&v26[0] = 0;
      *((void *)&v26[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      *(void *)&v26[0] = 0xD000000000000014;
      *((void *)&v26[0] + 1) = 0x800000025C4261F0;
      v13._char countAndFlagsBits = v9;
      v13._uint64_t object = v10;
      String.append(_:)(v13);
      v14._char countAndFlagsBits = 544175136;
      v14._uint64_t object = (void *)0xE400000000000000;
      String.append(_:)(v14);
      v15._char countAndFlagsBits = v11;
      v15._uint64_t object = v12;
      String.append(_:)(v15);
      goto LABEL_6;
    case 3u:
      uint64_t v16 = *(void *)_s11ShaderGraph15SGInternalErrorV0D4TypeOWOj0_((uint64_t)v25);
      *(void *)&v26[0] = 0;
      *((void *)&v26[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      *(void *)&v26[0] = 0xD000000000000017;
      *((void *)&v26[0] + 1) = 0x800000025C426170;
      v17._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._char countAndFlagsBits = 0x746365707865202CLL;
      v18._uint64_t object = (void *)0xEB00000000206465;
      String.append(_:)(v18);
      *(void *)&v21[0] = v16;
      v19._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t v2 = *(void *)&v26[0];
      break;
    case 4u:
      return v2;
    case 5u:
      uint64_t v2 = 0xD00000000000001BLL;
      break;
    case 6u:
      uint64_t v2 = 0xD000000000000019;
      break;
    case 7u:
      uint64_t v2 = 0xD000000000000010;
      break;
    case 8u:
      uint64_t v2 = 0xD00000000000001ALL;
      break;
    case 9u:
      uint64_t v2 = 0xD000000000000011;
      break;
    case 0xAu:
      uint64_t v2 = 0xD00000000000001DLL;
      break;
    default:
      id v3 = (_OWORD *)_s11ShaderGraph15SGInternalErrorV0D4TypeOWOj0_((uint64_t)v25);
      v26[9] = v3[9];
      v26[10] = v3[10];
      v26[11] = v3[11];
      v26[12] = v3[12];
      v26[5] = v3[5];
      v26[6] = v3[6];
      v26[7] = v3[7];
      v26[8] = v3[8];
      v26[1] = v3[1];
      v26[2] = v3[2];
      v26[3] = v3[3];
      v26[4] = v3[4];
      v26[0] = *v3;
      outlined init with take of SGInternalError.ErrorType(v27, v21);
      id v4 = (uint64_t *)_s11ShaderGraph15SGInternalErrorV0D4TypeOWOj0_((uint64_t)v21);
      outlined retain of UserGraphError(v4);
      uint64_t v2 = UserGraphError.description.getter();
      outlined release of SGInternalError.ErrorType(v1);
      break;
  }
  return v2;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance APIError()
{
  return APIError.description.getter(*(void **)v0, *(void **)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  objc_super v5 = (unint64_t *)result;
  if (a3 <= 0)
  {
    uint64_t v6 = (unint64_t *)MEMORY[0x263F8EE78];
    unint64_t v8 = *(void *)(MEMORY[0x263F8EE78] + 24);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v6 = (unint64_t *)swift_allocObject();
    double result = _swift_stdlib_malloc_size(v6);
    uint64_t v7 = result - 32;
    if (result < 32) {
      uint64_t v7 = result - 25;
    }
    unint64_t v8 = 2 * (v7 >> 3);
    _OWORD v6[2] = a3;
    v6[3] = v8;
  }
  uint64_t v9 = v6 + 4;
  unint64_t v10 = v8 >> 1;
  if (a2 > 0)
  {
    if (a3 < 0) {
      goto LABEL_67;
    }
    unint64_t v11 = *v5;
    if (!a3)
    {
      uint64_t v12 = 0;
      if (!v11) {
        goto LABEL_32;
      }
LABEL_28:
      unint64_t v18 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v19 = v18 | (v12 << 6);
      if (!v10)
      {
        while (1)
        {
          unint64_t v23 = v6[3];
          if ((uint64_t)((v23 >> 1) + 0x4000000000000000) < 0) {
            break;
          }
          int64_t v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
          if (v24 <= 1) {
            uint64_t v25 = 1;
          }
          else {
            uint64_t v25 = v24;
          }
          uint64_t v26 = v6;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          uint64_t v6 = (unint64_t *)swift_allocObject();
          int64_t v27 = _swift_stdlib_malloc_size(v6);
          uint64_t v29 = v27 - 32;
          BOOL v28 = v27 < 32;
          uint64_t v30 = v27 - 25;
          unint64_t v31 = v26;
          if (v28) {
            uint64_t v29 = v30;
          }
          uint64_t v32 = v29 >> 3;
          _OWORD v6[2] = v25;
          v6[3] = 2 * (v29 >> 3);
          unint64_t v33 = (unint64_t)(v6 + 4);
          unint64_t v34 = v26[3] >> 1;
          if (v26[2])
          {
            unint64_t v35 = v26 + 4;
            if (v6 != v26 || v33 >= (unint64_t)v35 + 8 * v34)
            {
              memmove(v6 + 4, v35, 8 * v34);
              unint64_t v31 = v26;
            }
            v31[2] = 0;
          }
          uint64_t v9 = (unint64_t *)(v33 + 8 * v34);
          unint64_t v36 = (v32 & 0x7FFFFFFFFFFFFFFFLL) - v34;
          double result = swift_release();
          BOOL v20 = __OFSUB__(v36, 1);
          unint64_t v10 = v36 - 1;
          if (v20) {
            goto LABEL_62;
          }
LABEL_52:
          *v9++ = v19;
          if (v11) {
            goto LABEL_28;
          }
LABEL_32:
          uint64_t v21 = v12 + 1;
          if (__OFADD__(v12, 1)) {
            goto LABEL_65;
          }
          if (v21 >= a2)
          {
LABEL_54:
            unint64_t v37 = v6[3];
            if (v37 >= 2)
            {
              unint64_t v38 = v37 >> 1;
              BOOL v20 = __OFSUB__(v38, v10);
              unint64_t v39 = v38 - v10;
              if (v20) {
                goto LABEL_68;
              }
              _OWORD v6[2] = v39;
            }
            return (uint64_t)v6;
          }
          unint64_t v22 = v5[v21];
          if (!v22)
          {
            while (1)
            {
              uint64_t v12 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_60;
              }
              if (v12 >= a2) {
                goto LABEL_54;
              }
              unint64_t v22 = v5[v12];
              ++v21;
              if (v22) {
                goto LABEL_39;
              }
            }
          }
          ++v12;
LABEL_39:
          unint64_t v11 = (v22 - 1) & v22;
          unint64_t v19 = __clz(__rbit64(v22)) + (v12 << 6);
          if (v10) {
            goto LABEL_29;
          }
        }
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
LABEL_29:
      BOOL v20 = __OFSUB__(v10--, 1);
      if (!v20) {
        goto LABEL_52;
      }
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
LABEL_13:
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    v10 -= a3;
    while (v13 != a3)
    {
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        uint64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_63;
        }
        if (v16 >= a2) {
          goto LABEL_64;
        }
        unint64_t v17 = v5[v16];
        if (!v17)
        {
          while (1)
          {
            uint64_t v12 = v16 + 1;
            if (__OFADD__(v16, 1)) {
              break;
            }
            if (v12 >= a2) {
              goto LABEL_59;
            }
            unint64_t v17 = v5[v12];
            ++v16;
            if (v17) {
              goto LABEL_25;
            }
          }
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
          break;
        }
        ++v12;
LABEL_25:
        unint64_t v11 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      ++v13;
      *v9++ = v15;
      if (v13 == a3) {
        goto LABEL_27;
      }
    }
    __break(1u);
    goto LABEL_62;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    unint64_t v11 = 0;
    if (!a3)
    {
      uint64_t v12 = 0;
LABEL_27:
      if (!v11) {
        goto LABEL_32;
      }
      goto LABEL_28;
    }
    goto LABEL_13;
  }
LABEL_69:
  __break(1u);
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)result);
    v2.i16[0] = vaddlv_u8(v2);
    uint64_t v3 = v2.u32[0];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    id v4 = (void *)swift_allocObject();
    double result = _swift_stdlib_malloc_size(v4);
    uint64_t v5 = result - 32;
    if (result < 32) {
      uint64_t v5 = result - 25;
    }
    uint64_t v6 = v5 >> 3;
    v4[2] = v3;
    void v4[3] = 2 * v6;
    uint64_t v7 = v4 + 4;
    uint64_t v8 = (v6 & 0x7FFFFFFFFFFFFFFFLL) - v3;
    unint64_t v9 = v6 | 0x8000000000000000;
    do
    {
      if (!v1)
      {
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (!v9) {
        goto LABEL_31;
      }
      unint64_t v10 = (v1 - 1) & v1;
      *v7++ = __clz(__rbit64(v1));
      --v9;
      unint64_t v1 = v10;
      --v3;
    }
    while (v3);
    if (!v10) {
      goto LABEL_26;
    }
    while (1)
    {
      if (!v8)
      {
        unint64_t v11 = v4[3];
        if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_33;
        }
        int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1) {
          uint64_t v13 = 1;
        }
        else {
          uint64_t v13 = v12;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
        unint64_t v14 = (void *)swift_allocObject();
        int64_t v15 = _swift_stdlib_malloc_size(v14);
        uint64_t v16 = v15 - 32;
        if (v15 < 32) {
          uint64_t v16 = v15 - 25;
        }
        uint64_t v17 = v16 >> 3;
        _OWORD v14[2] = v13;
        void v14[3] = 2 * (v16 >> 3);
        unint64_t v18 = (unint64_t)(v14 + 4);
        uint64_t v19 = v4[3] >> 1;
        if (v4[2])
        {
          BOOL v20 = v4 + 4;
          if (v14 != v4 || v18 >= (unint64_t)v20 + 8 * v19) {
            memmove(v14 + 4, v20, 8 * v19);
          }
          v4[2] = 0;
        }
        uint64_t v7 = (void *)(v18 + 8 * v19);
        uint64_t v8 = (v17 & 0x7FFFFFFFFFFFFFFFLL) - v19;
        double result = swift_release();
        id v4 = v14;
      }
      BOOL v21 = __OFSUB__(v8--, 1);
      if (v21) {
        break;
      }
      *v7++ = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      if (!v10) {
        goto LABEL_26;
      }
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  id v4 = (void *)MEMORY[0x263F8EE78];
  uint64_t v8 = *(void *)(MEMORY[0x263F8EE78] + 24) >> 1;
LABEL_26:
  unint64_t v22 = v4[3];
  if (v22 < 2) {
    return (uint64_t)v4;
  }
  unint64_t v23 = v22 >> 1;
  BOOL v21 = __OFSUB__(v23, v8);
  uint64_t v24 = v23 - v8;
  if (!v21)
  {
    v4[2] = v24;
    return (uint64_t)v4;
  }
LABEL_34:
  __break(1u);
  return result;
}

void specialized _copySequenceToContiguousArray<A>(_:)(unint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  swift_retain();
  outlined copy of NestedError(a1);
  unint64_t v3 = *(void *)(v2 + 16);
  id v4 = (void *)MEMORY[0x263F8EE78];
  if ((~v3 & 0xF000000000000007) != 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (void *)(MEMORY[0x263F8EE78] + 32);
    while (1)
    {
      if ((v3 & 0x8000000000000000) != 0)
      {
        uint64_t v8 = *(void **)((v3 & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
        unint64_t v7 = *(void *)((v3 & 0x7FFFFFFFFFFFFFFFLL) + 0x18);
        *(void *)(v2 + 16) = v7;
        id v9 = v8;
      }
      else
      {
        *(void *)(v2 + 16) = 0xF000000000000007;
        unint64_t v7 = v3;
        uint64_t v8 = (void *)v3;
      }
      outlined copy of NestedError(v7);
      outlined consume of NestedError?(v3);
      if (!v5)
      {
        unint64_t v10 = v4[3];
        if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_27;
        }
        int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
        if (v11 <= 1) {
          uint64_t v12 = 1;
        }
        else {
          uint64_t v12 = v11;
        }
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Error>);
        uint64_t v13 = (void *)swift_allocObject();
        int64_t v14 = _swift_stdlib_malloc_size(v13);
        uint64_t v15 = v14 - 32;
        if (v14 < 32) {
          uint64_t v15 = v14 - 25;
        }
        uint64_t v16 = v15 >> 3;
        _OWORD v13[2] = v12;
        v13[3] = 2 * (v15 >> 3);
        unint64_t v17 = (unint64_t)(v13 + 4);
        uint64_t v18 = v4[3] >> 1;
        if (v4[2])
        {
          uint64_t v19 = v4 + 4;
          if (v13 != v4 || v17 >= (unint64_t)v19 + 8 * v18) {
            memmove(v13 + 4, v19, 8 * v18);
          }
          v4[2] = 0;
        }
        uint64_t v6 = (void *)(v17 + 8 * v18);
        uint64_t v5 = (v16 & 0x7FFFFFFFFFFFFFFFLL) - v18;
        swift_release();
        id v4 = v13;
      }
      BOOL v20 = __OFSUB__(v5--, 1);
      if (v20) {
        break;
      }
      *v6++ = v8;
      unint64_t v3 = *(void *)(v2 + 16);
      if ((~v3 & 0xF000000000000007) == 0) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v5 = 0;
LABEL_22:
  swift_release_n();
  unint64_t v21 = v4[3];
  if (v21 >= 2)
  {
    unint64_t v22 = v21 >> 1;
    BOOL v20 = __OFSUB__(v22, v5);
    uint64_t v23 = v22 - v5;
    if (!v20)
    {
      v4[2] = v23;
      return;
    }
LABEL_28:
    __break(1u);
  }
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(long long *a1)
{
  long long v55 = *a1;
  uint64_t v2 = *((void *)a1 + 2);
  outlined init with take of MetalFunctionNode?((uint64_t)&v55, (uint64_t)v57, &demangling cache variable for type metadata for _HashTable.Storage?);
  uint64_t v56 = *((void *)&v55 + 1);
  uint64_t v3 = *((void *)a1 + 4);
  uint64_t v53 = *((void *)a1 + 3);
  uint64_t v54 = v2;
  uint64_t v51 = *((void *)a1 + 5);
  uint64_t v52 = v3;
  outlined retain of _HashTable.Storage?((uint64_t)v57);
  outlined retain of _HashTable.Storage?((uint64_t)&v56);
  outlined retain of _HashTable.Storage?((uint64_t)&v54);
  outlined retain of [Input]((uint64_t)&v53);
  outlined retain of [Input]((uint64_t)&v52);
  outlined retain of [Input]((uint64_t)&v51);
  uint64_t v4 = 0;
  unint64_t v38 = (void *)MEMORY[0x263F8EE78];
  for (uint64_t i = MEMORY[0x263F8EE78] + 32; ; i += 112)
  {
    Graph.BreathFirstEdgeIterator.next()(v39);
    uint64_t v7 = v39[0];
    uint64_t v6 = v39[1];
    uint64_t v8 = v39[2];
    uint64_t v9 = v39[3];
    uint64_t v10 = v39[4];
    char v11 = v40;
    uint64_t v12 = v42;
    uint64_t v35 = v43;
    uint64_t v36 = v41;
    uint64_t v33 = v45;
    uint64_t v34 = v44;
    uint64_t v32 = v46;
    uint64_t v13 = v48;
    char v37 = v47;
    uint64_t result = outlined init with take of MetalFunctionNode?((uint64_t)v39, (uint64_t)v49, &demangling cache variable for type metadata for Edge?);
    if (!v50) {
      break;
    }
    uint64_t v31 = v13;
    if (v4)
    {
      uint64_t v15 = v38;
      BOOL v16 = __OFSUB__(v4--, 1);
      if (v16) {
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v17 = v38[3];
      if ((uint64_t)((v17 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_26;
      }
      int64_t v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
      if (v18 <= 1) {
        uint64_t v19 = 1;
      }
      else {
        uint64_t v19 = v18;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Edge>);
      uint64_t v15 = (void *)swift_allocObject();
      int64_t v20 = _swift_stdlib_malloc_size(v15) - 32;
      unint64_t v21 = v38;
      uint64_t v22 = v20 / 112;
      _OWORD v15[2] = v19;
      v15[3] = 2 * (v20 / 112);
      unint64_t v23 = (unint64_t)(v15 + 4);
      uint64_t v24 = v38[3] >> 1;
      if (v38[2])
      {
        if (v15 != v38 || v23 >= (unint64_t)&v38[14 * v24 + 4])
        {
          uint64_t v30 = v20 / 112;
          memmove(v15 + 4, v38 + 4, 112 * v24);
          uint64_t v22 = v30;
          unint64_t v21 = v38;
        }
        _OWORD v21[2] = 0;
      }
      uint64_t i = v23 + 112 * v24;
      uint64_t v26 = (v22 & 0x7FFFFFFFFFFFFFFFLL) - v24;
      uint64_t result = swift_release();
      BOOL v16 = __OFSUB__(v26, 1);
      uint64_t v4 = v26 - 1;
      if (v16)
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
    unint64_t v38 = v15;
    *(void *)uint64_t i = v7;
    *(void *)(i + 8) = v6;
    *(void *)(i + 16) = v8;
    *(void *)(i + 24) = v9;
    *(void *)(i + 32) = v10;
    *(unsigned char *)(i + 40) = v11 & 1;
    *(void *)(i + 48) = v36;
    *(void *)(i + 56) = v12;
    *(void *)(i + 64) = v35;
    *(void *)(i + 72) = v34;
    *(void *)(i + 80) = v33;
    *(void *)(i + 88) = v32;
    *(unsigned char *)(i + 96) = v37 & 1;
    *(void *)(i + 104) = v31;
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t)v38;
  unint64_t v27 = v38[3];
  if (v27 < 2) {
    return result;
  }
  unint64_t v28 = v27 >> 1;
  BOOL v16 = __OFSUB__(v28, v4);
  uint64_t v29 = v28 - v4;
  if (!v16)
  {
    v38[2] = v29;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = (void *)a1[3];
  uint64_t v117 = a1[4];
  long long v118 = v4;
  uint64_t v101 = v117;
  long long v102 = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of [Input]((uint64_t)&v118);
  outlined retain of [Input]((uint64_t)&v117);
  uint64_t v75 = v3;
  if (!v4[2])
  {
    uint64_t v71 = 0;
    long long v72 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_89;
  }
  uint64_t v71 = 0;
  long long v72 = (void *)MEMORY[0x263F8EE78];
  long long v77 = (void *)(v1 + 16);
  long long v78 = v2 + 4;
  uint64_t v76 = v1 + 32;
  uint64_t v5 = MEMORY[0x263F8EE78] + 32;
  long long v73 = v2 + 7;
  uint64_t v74 = v3 + 32;
  uint64_t v88 = v1;
  long long v79 = v2;
  do
  {
    uint64_t v70 = v5;
    while (1)
    {
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v7 = v4[2];
        if (!v7) {
          goto LABEL_93;
        }
      }
      else
      {
        unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
        uint64_t v4 = (void *)result;
        uint64_t v7 = *(void *)(result + 16);
        if (!v7)
        {
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
          goto LABEL_98;
        }
      }
      uint64_t v8 = v7 - 1;
      uint64_t v9 = &v4[7 * v8];
      long long v10 = *((_OWORD *)v9 + 2);
      long long v11 = *((_OWORD *)v9 + 3);
      long long v12 = *((_OWORD *)v9 + 4);
      Swift::UInt v122 = v9[10];
      long long v120 = v11;
      long long v121 = v12;
      long long v119 = v10;
      uint64_t v86 = v9[5];
      uint64_t v87 = v9[4];
      uint64_t v84 = v9[7];
      uint64_t v85 = v9[6];
      uint64_t v83 = v9[8];
      char v82 = *((unsigned char *)v9 + 72);
      uint64_t v81 = v9[10];
      v4[2] = v8;
      uint64_t v13 = v101;
      if (*(void *)(v101 + 16))
      {
        Hasher.init(_seed:)();
        uint64_t v98 = v119;
        Hasher._combine(_:)(v119);
        uint64_t v14 = *((void *)&v119 + 1);
        uint64_t v15 = *(void (**)(char *))(**((void **)&v119 + 1) + 120);
        swift_retain();
        v15(v100);
        swift_release();
        long long v16 = v120;
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Swift::UInt v17 = v121;
        char v92 = BYTE8(v121);
        if (BYTE8(v121) == 1)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v17);
        }
        Swift::UInt v91 = v122;
        Hasher._combine(_:)(v122);
        Swift::Int v18 = Hasher._finalize()();
        uint64_t v19 = -1 << *(unsigned char *)(v13 + 32);
        unint64_t v20 = v18 & ~v19;
        uint64_t v21 = v13 + 56;
        if ((*(void *)(v13 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20))
        {
          Swift::UInt v80 = v17;
          uint64_t v97 = v14;
          long long v89 = v4;
          uint64_t v22 = ~v19;
          while (1)
          {
            uint64_t v23 = *(void *)(v13 + 48) + 56 * v20;
            if (*(void *)v23 == v98)
            {
              uint64_t v24 = v13;
              uint64_t v25 = *(void *)(v23 + 16);
              uint64_t v26 = *(void *)(v23 + 24);
              char v27 = *(unsigned char *)(v23 + 40);
              uint64_t v93 = *(void *)(v23 + 32);
              uint64_t v95 = *(void *)(v23 + 48);
              unint64_t v28 = *(uint64_t (**)(uint64_t))(**(void **)(v23 + 8) + 128);
              swift_retain();
              swift_bridgeObjectRetain();
              if (v28(v97))
              {
                if (v25 == (void)v16 && v26 == *((void *)&v16 + 1))
                {
                  swift_bridgeObjectRelease();
                  swift_release();
                  uint64_t v13 = v24;
                  if (v27)
                  {
LABEL_25:
                    char v31 = v92;
                    if (v95 != v91) {
                      char v31 = 0;
                    }
                    if (v31)
                    {
LABEL_36:
                      swift_bridgeObjectRelease();
                      swift_release();
                      uint64_t v1 = v88;
                      uint64_t v4 = v89;
                      uint64_t v2 = v79;
                      goto LABEL_5;
                    }
                    goto LABEL_16;
                  }
                  goto LABEL_30;
                }
                char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v13 = v24;
                if (v30)
                {
                  if (v27) {
                    goto LABEL_25;
                  }
LABEL_30:
                  if ((v92 & 1) == 0 && v93 == v80 && v95 == v91) {
                    goto LABEL_36;
                  }
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v13 = v24;
              }
            }
LABEL_16:
            unint64_t v20 = (v20 + 1) & v22;
            if (((*(void *)(v21 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
            {
              uint64_t v1 = v88;
              uint64_t v4 = v89;
              uint64_t v2 = v79;
              goto LABEL_39;
            }
          }
        }
        uint64_t v1 = v88;
      }
LABEL_39:
      v123[0] = v120;
      swift_retain();
      outlined retain of String((uint64_t)v123);
      specialized Set._Variant.insert(_:)((uint64_t)v100, (Swift::Int)&v119);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v33 = v2[2];
      if (v1) {
        break;
      }
      if (v33)
      {
        if (*v78 == (void)v119)
        {
          unint64_t result = 0;
LABEL_46:
          uint64_t v35 = v75;
          goto LABEL_47;
        }
        if (v33 != 1)
        {
          if (v2[5] == (void)v119)
          {
            unint64_t result = 1;
            goto LABEL_46;
          }
          if (v33 != 2)
          {
            if (v2[6] == (void)v119)
            {
              unint64_t result = 2;
              goto LABEL_46;
            }
            uint64_t v50 = 0;
            while (v33 - 3 != v50)
            {
              uint64_t v51 = v73[v50++];
              if (v51 == (void)v119)
              {
                unint64_t result = v50 + 2;
                uint64_t v35 = v75;
                if ((result & 0x8000000000000000) == 0) {
                  goto LABEL_47;
                }
                goto LABEL_94;
              }
            }
          }
        }
      }
LABEL_4:
      swift_release();
      outlined release of String((uint64_t)v123);
LABEL_5:
      if (!v4[2]) {
        goto LABEL_89;
      }
    }
    unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v119, (uint64_t)v78, v33, v77, v76);
    if (v34) {
      goto LABEL_4;
    }
    uint64_t v35 = v75;
    if ((result & 0x8000000000000000) != 0) {
      goto LABEL_94;
    }
LABEL_47:
    if (result >= *(void *)(v35 + 16)) {
      goto LABEL_95;
    }
    uint64_t v36 = (void *)(v74 + 48 * result);
    uint64_t v37 = v36[3];
    uint64_t v38 = v36[4];
    uint64_t v39 = v36[5];
    uint64_t v40 = *(void *)(v38 + 16);
    if (v37)
    {
      swift_retain();
      outlined retain of String((uint64_t)v123);
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v1 = v88;
      unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v119, v38 + 32, v40, (void *)(v37 + 16), v37 + 32);
      if (v41) {
        goto LABEL_59;
      }
    }
    else
    {
      swift_retain();
      outlined retain of String((uint64_t)v123);
      swift_retain();
      swift_retain();
      unint64_t result = specialized Collection<>.firstIndex(of:)(&v119, v38 + 32, v40);
      if (v42)
      {
LABEL_59:
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined release of String((uint64_t)v123);
        swift_release();
        outlined release of String((uint64_t)v123);
        uint64_t v2 = v79;
        goto LABEL_5;
      }
    }
    if ((result & 0x8000000000000000) != 0) {
      goto LABEL_96;
    }
    if (result >= *(void *)(v39 + 16)) {
      goto LABEL_97;
    }
    long long v90 = v4;
    uint64_t v43 = (void *)(v39 + 56 * result);
    uint64_t v44 = v43[5];
    uint64_t v46 = v43[6];
    uint64_t v45 = v43[7];
    uint64_t v48 = v43[8];
    uint64_t v47 = v43[9];
    uint64_t v49 = v43[10];
    uint64_t v96 = v43[4];
    outlined copy of Output?(v96, v44);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of String((uint64_t)v123);
    if (!v44)
    {
      swift_release();
      outlined release of String((uint64_t)v123);
      uint64_t v2 = v79;
      uint64_t v1 = v88;
      uint64_t v4 = v90;
      goto LABEL_5;
    }
    uint64_t v94 = v48;
    uint64_t v99 = v45;
    long long v102 = v90;
    specialized OrderedDictionary.subscript.getter(v96, v88, v79, v75, v103);
    outlined init with take of MetalFunctionNode?((uint64_t)v103, (uint64_t)&v104, &demangling cache variable for type metadata for Graph.Adjacent?);
    if (*((void *)&v104 + 1))
    {
      long long v112 = v104;
      long long v109 = v106;
      uint64_t v52 = v105;
      uint64_t v53 = v107;
      outlined init with take of MetalFunctionNode?((uint64_t)&v109, (uint64_t)v111, &demangling cache variable for type metadata for _HashTable.Storage?);
      uint64_t v54 = *((void *)&v109 + 1);
      uint64_t v110 = *((void *)&v109 + 1);
      uint64_t v108 = v53;
      long long v114 = v112;
      outlined init with take of MetalFunctionNode?((uint64_t)&v114, (uint64_t)v116, &demangling cache variable for type metadata for _HashTable.Storage?);
      swift_retain();
      outlined retain of String((uint64_t)v123);
      outlined retain of _HashTable.Storage?((uint64_t)v111);
      outlined retain of _HashTable.Storage?((uint64_t)&v110);
      outlined retain of _HashTable.Storage?((uint64_t)&v108);
      outlined release of _HashTable.Storage?((uint64_t)v116);
      uint64_t v115 = *((void *)&v114 + 1);
      outlined release of _HashTable.Storage?((uint64_t)&v115);
      uint64_t v113 = v52;
      outlined release of _HashTable.Storage?((uint64_t)&v113);
      outlined release of _HashTable.Storage?((uint64_t)v111);
      outlined release of _HashTable.Storage?((uint64_t)&v110);
      outlined release of _HashTable.Storage?((uint64_t)&v108);
      outlined release of _HashTable.Storage?((uint64_t)&v108);
      outlined release of _HashTable.Storage?((uint64_t)v111);
    }
    else
    {
      swift_retain();
      outlined retain of String((uint64_t)v123);
      uint64_t v54 = MEMORY[0x263F8EE78];
    }
    uint64_t v55 = v44;
    specialized Array.append<A>(contentsOf:)(v54);
    swift_release();
    unint64_t result = outlined release of String((uint64_t)v123);
    uint64_t v56 = v71;
    if (v71)
    {
      uint64_t v2 = v79;
      id v57 = v72;
      goto LABEL_85;
    }
    uint64_t v58 = v72;
    unint64_t v59 = v72[3];
    if ((uint64_t)((v59 >> 1) + 0x4000000000000000) < 0) {
      goto LABEL_100;
    }
    int64_t v60 = v59 & 0xFFFFFFFFFFFFFFFELL;
    if (v60 <= 1) {
      uint64_t v61 = 1;
    }
    else {
      uint64_t v61 = v60;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Edge>);
    id v57 = (void *)swift_allocObject();
    uint64_t v62 = (uint64_t)(_swift_stdlib_malloc_size(v57) - 32) / 112;
    v57[2] = v61;
    v57[3] = 2 * v62;
    unint64_t v63 = (unint64_t)(v57 + 4);
    uint64_t v64 = v72[3] >> 1;
    if (v72[2])
    {
      Swift::String v65 = v72 + 4;
      if (v57 != v72 || v63 >= (unint64_t)v65 + 112 * v64)
      {
        memmove(v57 + 4, v65, 112 * v64);
        uint64_t v58 = v72;
      }
      _OWORD v58[2] = 0;
    }
    uint64_t v70 = v63 + 112 * v64;
    unint64_t result = swift_release();
    uint64_t v56 = (v62 & 0x7FFFFFFFFFFFFFFFLL) - v64;
    uint64_t v2 = v79;
LABEL_85:
    uint64_t v71 = v56 - 1;
    long long v72 = v57;
    if (__OFSUB__(v56, 1)) {
      goto LABEL_99;
    }
    *(void *)uint64_t v70 = v96;
    *(void *)(v70 + 8) = v55;
    *(void *)(v70 + 16) = v46;
    *(void *)(v70 + 24) = v99;
    *(void *)(v70 + 32) = v94;
    *(unsigned char *)(v70 + 40) = v47 & 1;
    uint64_t v1 = v88;
    *(void *)(v70 + 48) = v49;
    *(void *)(v70 + 56) = v87;
    *(void *)(v70 + 64) = v86;
    *(void *)(v70 + 72) = v85;
    *(void *)(v70 + 80) = v84;
    *(void *)(v70 + 88) = v83;
    *(unsigned char *)(v70 + 96) = v82;
    *(void *)(v70 + 104) = v81;
    uint64_t v5 = v70 + 112;
    uint64_t v4 = v102;
  }
  while (v102[2]);
LABEL_89:
  long long v102 = v4;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t result = (unint64_t)v72;
  unint64_t v66 = v72[3];
  if (v66 < 2) {
    return result;
  }
  unint64_t v67 = v66 >> 1;
  BOOL v68 = __OFSUB__(v67, v71);
  uint64_t v69 = v67 - v71;
  if (v68)
  {
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    return result;
  }
  int v72[2] = v69;
  return result;
}

void specialized _copySequenceToContiguousArray<A>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  outlined copy of NestedError(a1);
  if (a2 < 1)
  {
    swift_retain();
  }
  else
  {
    outlined copy of NestedError(a1);
    swift_retain();
    do
    {
      unint64_t v6 = *(void *)(v4 + 16);
      if ((~v6 & 0xF000000000000007) == 0) {
        break;
      }
      if ((v6 & 0x8000000000000000) != 0)
      {
        unint64_t v5 = *(void *)((v6 & 0x7FFFFFFFFFFFFFFFLL) + 0x18);
        *(void *)(v4 + 16) = v5;
        outlined copy of NestedError(v5);
      }
      else
      {
        *(void *)(v4 + 16) = 0xF000000000000007;
      }
      outlined consume of NestedError?(v6);
      --a2;
    }
    while (a2);
    outlined consume of NestedError(a1);
  }
  unint64_t v7 = *(void *)(v4 + 16);
  uint64_t v8 = (void *)MEMORY[0x263F8EE78];
  if ((~v7 & 0xF000000000000007) != 0)
  {
    uint64_t v9 = 0;
    long long v10 = (void *)(MEMORY[0x263F8EE78] + 32);
    while (1)
    {
      if ((v7 & 0x8000000000000000) != 0)
      {
        long long v12 = *(void **)((v7 & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
        unint64_t v11 = *(void *)((v7 & 0x7FFFFFFFFFFFFFFFLL) + 0x18);
        *(void *)(v4 + 16) = v11;
        id v13 = v12;
      }
      else
      {
        *(void *)(v4 + 16) = 0xF000000000000007;
        unint64_t v11 = v7;
        long long v12 = (void *)v7;
      }
      outlined copy of NestedError(v11);
      outlined consume of NestedError?(v7);
      if (!v9)
      {
        unint64_t v14 = v8[3];
        if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_36;
        }
        int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
        if (v15 <= 1) {
          uint64_t v16 = 1;
        }
        else {
          uint64_t v16 = v15;
        }
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Error>);
        Swift::UInt v17 = (void *)swift_allocObject();
        int64_t v18 = _swift_stdlib_malloc_size(v17);
        uint64_t v19 = v18 - 32;
        if (v18 < 32) {
          uint64_t v19 = v18 - 25;
        }
        uint64_t v20 = v19 >> 3;
        _OWORD v17[2] = v16;
        _OWORD v17[3] = 2 * (v19 >> 3);
        unint64_t v21 = (unint64_t)(v17 + 4);
        uint64_t v22 = v8[3] >> 1;
        if (v8[2])
        {
          uint64_t v23 = v8 + 4;
          if (v17 != v8 || v21 >= (unint64_t)v23 + 8 * v22) {
            memmove(v17 + 4, v23, 8 * v22);
          }
          _OWORD v8[2] = 0;
        }
        long long v10 = (void *)(v21 + 8 * v22);
        uint64_t v9 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
        swift_release();
        uint64_t v8 = v17;
      }
      BOOL v24 = __OFSUB__(v9--, 1);
      if (v24) {
        break;
      }
      *v10++ = v12;
      unint64_t v7 = *(void *)(v4 + 16);
      if ((~v7 & 0xF000000000000007) == 0) {
        goto LABEL_31;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v9 = 0;
LABEL_31:
  swift_release_n();
  unint64_t v25 = v8[3];
  if (v25 >= 2)
  {
    unint64_t v26 = v25 >> 1;
    BOOL v24 = __OFSUB__(v26, v9);
    uint64_t v27 = v26 - v9;
    if (!v24)
    {
      _OWORD v8[2] = v27;
      return;
    }
LABEL_37:
    __break(1u);
  }
}

void outlined consume of APIError(void *a1, id a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      swift_bridgeObjectRelease();
      break;
    case 13:

      break;
    default:
      return;
  }
}

uint64_t sub_25C35F8C4()
{
  unint64_t v1 = *(void *)(v0 + 16);
  if ((~v1 & 0xF000000000000007) != 0) {
    outlined consume of NestedError(v1);
  }
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t *outlined init with copy of SGInternalError.ErrorType(uint64_t *a1, uint64_t *a2)
{
  return a2;
}

_OWORD *outlined init with take of SGInternalError.ErrorType(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  long long v2 = a1[1];
  long long v3 = a1[2];
  long long v4 = a1[4];
  a2[3] = a1[3];
  a2[4] = v4;
  a2[1] = v2;
  a2[2] = v3;
  long long v5 = a1[5];
  long long v6 = a1[6];
  long long v7 = a1[8];
  a2[7] = a1[7];
  a2[8] = v7;
  a2[5] = v5;
  a2[6] = v6;
  long long v8 = a1[9];
  long long v9 = a1[10];
  long long v10 = a1[12];
  a2[11] = a1[11];
  a2[12] = v10;
  a2[9] = v8;
  a2[10] = v9;
  return a2;
}

uint64_t _s11ShaderGraph15SGInternalErrorV0D4TypeOWOg(uint64_t a1)
{
  if (((*(void *)(a1 + 168) >> 55) & 4) != 0) {
    return (*(_DWORD *)a1 + 4);
  }
  else {
    return (*(void *)(a1 + 168) >> 55) & 7;
  }
}

uint64_t _s11ShaderGraph15SGInternalErrorV0D4TypeOWOj0_(uint64_t result)
{
  *(void *)(result + 168) &= 0xFC7FFFFFFFFFFFFFLL;
  return result;
}

uint64_t outlined copy of MetalFunctionGraphError.ErrorType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 == 3)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  else
  {
    if (a5 != 1)
    {
      if (a5) {
        return result;
      }
      swift_bridgeObjectRetain();
    }
    return swift_bridgeObjectRetain();
  }
}

uint64_t outlined release of SGInternalError.ErrorType(uint64_t a1)
{
  outlined consume of SGInternalError.ErrorType(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168));
  return a1;
}

uint64_t outlined consume of SGInternalError.ErrorType(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22)
{
  uint64_t v22 = (a22 >> 55) & 7;
  if (v22 == 2)
  {
    swift_bridgeObjectRelease();
  }
  else if (v22 == 1)
  {
    outlined consume of MetalFunctionGraphError.ErrorType(result, a2, a3, a4, a5);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v22) {
      return result;
    }
    outlined consume of UserGraphError.ErrorType(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22);
  }
  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of MetalFunctionGraphError.ErrorType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 == 3)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    if (a5 != 1)
    {
      if (a5) {
        return result;
      }
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
}

uint64_t *outlined retain of UserGraphError(uint64_t *a1)
{
  outlined copy of UserGraphError.ErrorType(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t type metadata accessor for SGError()
{
  return self;
}

id outlined copy of APIError(id result, id a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      uint64_t result = (id)swift_bridgeObjectRetain();
      break;
    case 13:
      uint64_t result = result;
      break;
    default:
      return result;
  }
  return result;
}

void destroy for APIError(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for APIError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  long long v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of APIError(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for APIError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  long long v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of APIError(*(id *)a2, v4, v5);
  long long v6 = *(void **)a1;
  long long v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of APIError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for APIError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  long long v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of APIError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for APIError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xEB && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 235);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0x15) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for APIError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEA)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 235;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xEB) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xEB) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for APIError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 0x14u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 21);
  }
}

uint64_t destructiveInjectEnumTag for APIError(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x15)
  {
    *(void *)uint64_t result = a2 - 21;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 21;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for APIError()
{
  return &type metadata for APIError;
}

uint64_t outlined copy of SGInternalError.ErrorType(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22)
{
  uint64_t v22 = (a22 >> 55) & 7;
  if (v22 == 2)
  {
    swift_bridgeObjectRetain();
  }
  else if (v22 == 1)
  {
    outlined copy of MetalFunctionGraphError.ErrorType(result, a2, a3, a4, a5);
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v22) {
      return result;
    }
    outlined copy of UserGraphError.ErrorType(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22);
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for SGInternalError(uint64_t a1)
{
  outlined consume of SGInternalError.ErrorType(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168));
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for SGInternalError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v14 = a2[8];
  uint64_t v15 = a2[9];
  uint64_t v16 = a2[10];
  uint64_t v17 = a2[11];
  uint64_t v18 = a2[12];
  uint64_t v19 = a2[13];
  uint64_t v20 = a2[14];
  uint64_t v21 = a2[15];
  uint64_t v22 = a2[16];
  uint64_t v23 = a2[17];
  uint64_t v24 = a2[18];
  uint64_t v25 = a2[19];
  uint64_t v26 = a2[20];
  uint64_t v27 = a2[21];
  uint64_t v28 = a2[22];
  uint64_t v29 = a2[23];
  uint64_t v30 = a2[24];
  uint64_t v31 = a2[25];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  outlined copy of SGInternalError.ErrorType(*a2, v5, v6, v7, v8, v9, v10, v11, a2[8], a2[9], a2[10], a2[11], a2[12], a2[13], a2[14], a2[15], a2[16], a2[17], a2[18],
    a2[19],
    a2[20],
    a2[21]);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v14;
  a1[9] = v15;
  a1[10] = v16;
  a1[11] = v17;
  a1[12] = v18;
  a1[13] = v19;
  a1[14] = v20;
  a1[15] = v21;
  a1[16] = v22;
  a1[17] = v23;
  a1[18] = v24;
  a1[19] = v25;
  a1[20] = v26;
  a1[21] = v27;
  a1[22] = v28;
  a1[23] = v29;
  a1[24] = v30;
  a1[25] = v31;
  uint64_t v12 = a2[27];
  a1[26] = a2[26];
  a1[27] = v12;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SGInternalError(uint64_t a1, uint64_t *a2)
{
  uint64_t v28 = a2[8];
  uint64_t v29 = a2[9];
  uint64_t v30 = a2[10];
  uint64_t v31 = a2[11];
  uint64_t v32 = a2[12];
  uint64_t v33 = a2[13];
  uint64_t v34 = a2[14];
  uint64_t v35 = a2[15];
  uint64_t v36 = a2[16];
  uint64_t v37 = a2[17];
  uint64_t v38 = a2[18];
  uint64_t v39 = a2[19];
  uint64_t v40 = a2[20];
  uint64_t v41 = a2[21];
  uint64_t v42 = a2[22];
  uint64_t v43 = a2[23];
  uint64_t v44 = a2[24];
  uint64_t v45 = a2[25];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  outlined copy of SGInternalError.ErrorType(*a2, v5, v6, v7, v8, v9, v10, v11, a2[8], a2[9], a2[10], a2[11], a2[12], a2[13], a2[14], a2[15], a2[16], a2[17], a2[18],
    a2[19],
    a2[20],
    a2[21]);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v28;
  *(void *)(a1 + 72) = v29;
  *(void *)(a1 + 80) = v30;
  *(void *)(a1 + 88) = v31;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v32;
  *(void *)(a1 + 104) = v33;
  *(void *)(a1 + 112) = v34;
  *(void *)(a1 + 120) = v35;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v36;
  *(void *)(a1 + 136) = v37;
  *(void *)(a1 + 144) = v38;
  *(void *)(a1 + 152) = v39;
  long long v26 = *(_OWORD *)(a1 + 160);
  *(void *)(a1 + 160) = v40;
  *(void *)(a1 + 168) = v41;
  *(void *)(a1 + 176) = v42;
  *(void *)(a1 + 184) = v43;
  *(void *)(a1 + 192) = v44;
  *(void *)(a1 + 200) = v45;
  outlined consume of SGInternalError.ErrorType(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((unint64_t *)&v26 + 1));
  *(void *)(a1 + 208) = a2[26];
  *(void *)(a1 + 216) = a2[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy224_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

uint64_t assignWithTake for SGInternalError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 96);
  long long v15 = *(_OWORD *)(a1 + 112);
  long long v16 = *(_OWORD *)(a1 + 128);
  long long v17 = *(_OWORD *)(a1 + 144);
  long long v18 = *(_OWORD *)(a1 + 160);
  long long v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v19;
  long long v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v20;
  long long v21 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v21;
  long long v22 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v22;
  long long v23 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v23;
  long long v24 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v24;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  outlined consume of SGInternalError.ErrorType(v4, v5, v6, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((unint64_t *)&v18 + 1));
  uint64_t v25 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v25;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SGInternalError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 224)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 168) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for SGInternalError(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 216) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 224) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 160) = 0;
      *(void *)(a1 + 168) = 2 * -a2;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 224) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SGInternalError()
{
  return &type metadata for SGInternalError;
}

uint64_t destroy for SGInternalError.ErrorType(uint64_t a1)
{
  return outlined consume of SGInternalError.ErrorType(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
           *(void *)(a1 + 152),
           *(void *)(a1 + 160),
           *(void *)(a1 + 168));
}

uint64_t *initializeWithCopy for SGInternalError.ErrorType(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = a2[7];
  uint64_t v13 = a2[9];
  unint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  unint64_t v20 = a2[16];
  uint64_t v21 = a2[17];
  uint64_t v22 = a2[18];
  uint64_t v23 = a2[19];
  uint64_t v24 = a2[20];
  unint64_t v25 = a2[21];
  uint64_t v26 = a2[22];
  uint64_t v27 = a2[23];
  uint64_t v28 = a2[24];
  uint64_t v29 = a2[25];
  uint64_t v4 = a2[8];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  outlined copy of SGInternalError.ErrorType(*a2, v6, v7, v8, v9, v10, v11, v3, v4, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25);
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
  a1[6] = v11;
  a1[7] = v3;
  a1[8] = v4;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  a1[20] = v24;
  a1[21] = v25;
  a1[22] = v26;
  a1[23] = v27;
  a1[24] = v28;
  a1[25] = v29;
  return a1;
}

uint64_t assignWithCopy for SGInternalError.ErrorType(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[7];
  uint64_t v28 = a2[9];
  unint64_t v29 = a2[10];
  uint64_t v30 = a2[11];
  uint64_t v31 = a2[12];
  uint64_t v32 = a2[13];
  uint64_t v33 = a2[14];
  uint64_t v34 = a2[15];
  unint64_t v35 = a2[16];
  uint64_t v36 = a2[17];
  uint64_t v37 = a2[18];
  uint64_t v38 = a2[19];
  uint64_t v39 = a2[20];
  unint64_t v40 = a2[21];
  uint64_t v41 = a2[22];
  uint64_t v42 = a2[23];
  uint64_t v43 = a2[24];
  uint64_t v44 = a2[25];
  uint64_t v4 = a2[8];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  outlined copy of SGInternalError.ErrorType(*a2, v6, v7, v8, v9, v10, v11, v3, v4, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37,
    v38,
    v39,
    v40);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v3;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v28;
  *(void *)(a1 + 80) = v29;
  *(void *)(a1 + 88) = v30;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v31;
  *(void *)(a1 + 104) = v32;
  *(void *)(a1 + 112) = v33;
  *(void *)(a1 + 120) = v34;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v35;
  *(void *)(a1 + 136) = v36;
  *(void *)(a1 + 144) = v37;
  *(void *)(a1 + 152) = v38;
  long long v26 = *(_OWORD *)(a1 + 160);
  *(void *)(a1 + 160) = v39;
  *(void *)(a1 + 168) = v40;
  *(void *)(a1 + 176) = v41;
  *(void *)(a1 + 184) = v42;
  *(void *)(a1 + 192) = v43;
  *(void *)(a1 + 200) = v44;
  outlined consume of SGInternalError.ErrorType(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((unint64_t *)&v26 + 1));
  return a1;
}

uint64_t assignWithTake for SGInternalError.ErrorType(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  unint64_t v10 = *(void *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 64);
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v13 = *(_OWORD *)(a1 + 96);
  long long v14 = *(_OWORD *)(a1 + 112);
  long long v15 = *(_OWORD *)(a1 + 128);
  long long v16 = *(_OWORD *)(a1 + 144);
  long long v17 = *(_OWORD *)(a1 + 160);
  long long v18 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v18;
  long long v19 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v19;
  long long v20 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v20;
  long long v21 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v21;
  long long v22 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v22;
  long long v23 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v23;
  *(_OWORD *)(a1 + 192) = a2[12];
  outlined consume of SGInternalError.ErrorType(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((unint64_t *)&v17 + 1));
  return a1;
}

double storeEnumTagSinglePayload for SGInternalError.ErrorType(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 200) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 208) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 160) = 0;
      *(void *)(a1 + 168) = 2 * -a2;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 208) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for SGInternalError.ErrorType(uint64_t result, uint64_t a2)
{
  if (a2 < 4)
  {
    *(void *)(result + 168) = *(void *)(result + 168) & 0xFC00000000000001 | (a2 << 55);
  }
  else
  {
    *(void *)double result = (a2 - 4);
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(void *)(result + 168) = 0x200000000000000;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 192) = 0u;
  }
  return result;
}

ValueMetadata *type metadata accessor for SGInternalError.ErrorType()
{
  return &type metadata for SGInternalError.ErrorType;
}

unint64_t specialized Sequence.allSatisfy(_:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 1;
  }
  uint64_t v4 = (Swift::UInt *)(a1 + 32);
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = (uint64_t *)(v5 + 40);
  uint64_t v7 = (uint64_t *)(v5 + 48);
  uint64_t v8 = (uint64_t *)(v5 + 56);
  uint64_t v9 = (uint64_t *)(v5 + 64);
  unint64_t v10 = (char *)(v5 + 72);
  uint64_t v58 = a2;
  long long v11 = (uint64_t *)(v5 + 80);
  uint64_t v12 = 1;
  long long v13 = v4;
  unint64_t v59 = v4;
  uint64_t v60 = v2;
  while (1)
  {
    Swift::UInt v14 = *v13;
    uint64_t v15 = *v6;
    uint64_t v16 = *v7;
    uint64_t v17 = *v8;
    uint64_t v18 = *v9;
    char v19 = *v10;
    uint64_t v20 = *v11;
    v82[0] = *v13;
    v82[1] = v15;
    uint64_t v69 = v16;
    void v82[2] = v16;
    v82[3] = v17;
    uint64_t v62 = v18;
    uint64_t v63 = v20;
    v82[4] = v18;
    char v66 = v19;
    char v83 = v19;
    uint64_t v84 = v20;
    long long v21 = a2[1];
    long long v72 = *a2;
    long long v73 = v21;
    long long v22 = a2[2];
    long long v23 = a2[3];
    long long v24 = a2[5];
    long long v76 = a2[4];
    long long v77 = v24;
    long long v74 = v22;
    long long v75 = v23;
    long long v25 = a2[6];
    long long v26 = a2[7];
    *(_OWORD *)((char *)v81 + 9) = *(_OWORD *)((char *)a2 + 153);
    long long v27 = a2[9];
    long long v80 = a2[8];
    v81[0] = v27;
    long long v78 = v25;
    long long v79 = v26;
    uint64_t v28 = v73;
    unint64_t v29 = (void *)(*((void *)&v72 + 1) + 32);
    uint64_t v30 = *(void *)(*((void *)&v72 + 1) + 16);
    uint64_t v70 = v12;
    if ((void)v72)
    {
      unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v14, (uint64_t)v29, v30, (void *)(v72 + 16), v72 + 32);
      if (v32) {
        goto LABEL_44;
      }
      if ((result & 0x8000000000000000) != 0) {
        goto LABEL_55;
      }
    }
    else
    {
      if (!v30) {
        goto LABEL_44;
      }
      if (*v29 == v14)
      {
        unint64_t result = 0;
      }
      else
      {
        if (v30 == 1) {
          goto LABEL_44;
        }
        if (*(void *)(*((void *)&v72 + 1) + 40) == v14)
        {
          unint64_t result = 1;
        }
        else
        {
          if (v30 == 2)
          {
LABEL_44:
            swift_retain();
            swift_bridgeObjectRetain();
            outlined retain of Graph((uint64_t)&v72);
            goto LABEL_45;
          }
          if (*(void *)(*((void *)&v72 + 1) + 48) == v14)
          {
            unint64_t result = 2;
          }
          else
          {
            uint64_t v56 = 0;
            do
            {
              if (v30 - 3 == v56) {
                goto LABEL_44;
              }
              uint64_t v57 = *(void *)(*((void *)&v72 + 1) + 56 + 8 * v56++);
            }
            while (v57 != v14);
            unint64_t result = v56 + 2;
            if (v56 + 2 < 0)
            {
LABEL_55:
              __break(1u);
              return 1;
            }
          }
        }
      }
    }
    if (result >= *(void *)(v28 + 16))
    {
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    uint64_t v33 = (void *)(v28 + 48 * result);
    uint64_t v35 = v33[4];
    uint64_t v34 = v33[5];
    uint64_t v36 = v33[6];
    uint64_t v37 = *(void *)(v34 + 16);
    uint64_t v85 = v15;
    if (v35)
    {
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      outlined retain of Graph((uint64_t)&v72);
      swift_retain();
      swift_retain();
      swift_retain();
      unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v82, v34 + 32, v37, (void *)(v35 + 16), v35 + 32);
      if ((v38 & 1) == 0)
      {
        unint64_t v39 = result;
        uint64_t v61 = v36;
        uint64_t v2 = v60;
        if ((result & 0x8000000000000000) == 0) {
          goto LABEL_14;
        }
        goto LABEL_60;
      }
      swift_release();
      swift_release();
      uint64_t v4 = v59;
      uint64_t v2 = v60;
      goto LABEL_39;
    }
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    outlined retain of Graph((uint64_t)&v72);
    swift_retain();
    uint64_t v61 = v36;
    swift_retain();
    if (v37) {
      break;
    }
LABEL_37:
    swift_release();
    a2 = v58;
    uint64_t v4 = v59;
    uint64_t v2 = v60;
LABEL_39:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_45:
    uint64_t v41 = MEMORY[0x263F8EE78];
LABEL_46:
    outlined release of Graph((uint64_t)&v72);
    uint64_t v55 = *(void *)(v41 + 16);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    if (v55)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    if (v70 == v2)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    long long v13 = &v4[7 * v70];
    uint64_t v6 = (uint64_t *)(v13 + 1);
    uint64_t v7 = (uint64_t *)(v13 + 2);
    uint64_t v8 = (uint64_t *)(v13 + 3);
    uint64_t v9 = (uint64_t *)(v13 + 4);
    unint64_t v10 = (char *)(v13 + 5);
    long long v11 = (uint64_t *)(v13 + 6);
    uint64_t v12 = v70 + 1;
  }
  uint64_t v42 = v37;
  unint64_t v39 = 0;
  uint64_t v43 = (void *)(v34 + 80);
  Swift::UInt v67 = v14;
  uint64_t v68 = v37;
  while (1)
  {
    if (*(v43 - 6) != v14) {
      goto LABEL_19;
    }
    uint64_t v44 = v17;
    uint64_t v71 = *(v43 - 4);
    uint64_t v46 = *(v43 - 3);
    uint64_t v45 = *(v43 - 2);
    char v47 = *((unsigned char *)v43 - 8);
    uint64_t v48 = *v43;
    uint64_t v49 = *(uint64_t (**)(uint64_t))(*(void *)*(v43 - 5) + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((v49(v85) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v17 = v44;
      Swift::UInt v14 = v67;
      uint64_t v42 = v68;
      goto LABEL_19;
    }
    char v64 = v47;
    uint64_t v65 = v45;
    if (v71 != v69 || v46 != v44)
    {
      char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      unint64_t result = swift_release();
      uint64_t v17 = v44;
      Swift::UInt v14 = v67;
      uint64_t v42 = v68;
      uint64_t v53 = v65;
      uint64_t v52 = v48;
      if ((v51 & 1) == 0) {
        goto LABEL_19;
      }
      if (v64) {
        break;
      }
      goto LABEL_33;
    }
    swift_bridgeObjectRelease();
    unint64_t result = swift_release();
    uint64_t v17 = v44;
    Swift::UInt v14 = v67;
    uint64_t v42 = v68;
    uint64_t v53 = v65;
    uint64_t v52 = v48;
    if (v47) {
      break;
    }
LABEL_33:
    if ((v66 & 1) == 0 && v53 == v62 && v52 == v63) {
      goto LABEL_36;
    }
LABEL_19:
    v43 += 7;
    if (v42 == ++v39) {
      goto LABEL_37;
    }
  }
  char v54 = v66;
  if (v52 != v63) {
    char v54 = 0;
  }
  if ((v54 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_36:
  a2 = v58;
  uint64_t v2 = v60;
LABEL_14:
  if (v39 < *(void *)(v61 + 16))
  {
    uint64_t v40 = *(void *)(v61 + 16 * v39 + 40);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(v40, v82);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = v59;
    goto LABEL_46;
  }
LABEL_61:
  __break(1u);
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v73 = *(void *)(a1 + 16);
  if (!v73) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v3 = (Swift::UInt *)(a1 + 32);
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = (uint64_t *)(v4 + 40);
  uint64_t v6 = (uint64_t *)(v4 + 48);
  uint64_t v7 = (uint64_t *)(v4 + 56);
  uint64_t v8 = (uint64_t *)(v4 + 64);
  uint64_t v9 = (unsigned __int8 *)(v4 + 72);
  uint64_t v69 = (void *)MEMORY[0x263F8EE78];
  unint64_t v10 = (uint64_t *)(v4 + 80);
  uint64_t v11 = 1;
  uint64_t v12 = v3;
  Swift::UInt v67 = a2;
  long long v72 = v3;
LABEL_3:
  Swift::UInt v13 = *v12;
  uint64_t v14 = *v5;
  uint64_t v15 = *v6;
  uint64_t v16 = *v7;
  uint64_t v17 = *v8;
  int v18 = *v9;
  uint64_t v19 = *v10;
  v93[0] = *v12;
  v93[1] = v14;
  uint64_t v81 = v15;
  _OWORD v93[2] = v15;
  v93[3] = v16;
  v93[4] = v17;
  int v76 = v18;
  char v94 = v18;
  uint64_t v78 = v19;
  uint64_t v95 = v19;
  long long v20 = a2[1];
  long long v83 = *a2;
  long long v84 = v20;
  long long v21 = a2[2];
  long long v22 = a2[3];
  long long v23 = a2[5];
  long long v87 = a2[4];
  long long v88 = v23;
  long long v85 = v21;
  long long v86 = v22;
  long long v24 = a2[6];
  long long v25 = a2[7];
  *(_OWORD *)((char *)v92 + 9) = *(_OWORD *)((char *)a2 + 153);
  long long v26 = a2[9];
  long long v91 = a2[8];
  v92[0] = v26;
  long long v89 = v24;
  long long v90 = v25;
  uint64_t v27 = v84;
  uint64_t v28 = (void *)(*((void *)&v83 + 1) + 32);
  uint64_t v29 = *(void *)(*((void *)&v83 + 1) + 16);
  if ((void)v83)
  {
    unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v13, (uint64_t)v28, v29, (void *)(v83 + 16), v83 + 32);
    if (v31) {
      goto LABEL_52;
    }
    if ((result & 0x8000000000000000) != 0) {
      goto LABEL_66;
    }
  }
  else
  {
    if (!v29) {
      goto LABEL_52;
    }
    if (*v28 == v13)
    {
      unint64_t result = 0;
    }
    else
    {
      if (v29 == 1) {
        goto LABEL_52;
      }
      if (*(void *)(*((void *)&v83 + 1) + 40) == v13)
      {
        unint64_t result = 1;
      }
      else
      {
        if (v29 == 2) {
          goto LABEL_52;
        }
        if (*(void *)(*((void *)&v83 + 1) + 48) == v13)
        {
          unint64_t result = 2;
        }
        else
        {
          uint64_t v65 = 0;
          do
          {
            if (v29 - 3 == v65) {
              goto LABEL_52;
            }
            uint64_t v66 = *(void *)(*((void *)&v83 + 1) + 56 + 8 * v65++);
          }
          while (v66 != v13);
          unint64_t result = v65 + 2;
          if (v65 + 2 < 0) {
            goto LABEL_66;
          }
        }
      }
    }
  }
  if (result >= *(void *)(v27 + 16))
  {
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  char v32 = (void *)(v27 + 48 * result);
  uint64_t v33 = v32[7];
  uint64_t v34 = v32[8];
  uint64_t v35 = v32[9];
  uint64_t v36 = *(void *)(v34 + 16);
  uint64_t v77 = v16;
  uint64_t v71 = v11;
  uint64_t v96 = v14;
  Swift::UInt v82 = v13;
  if (!v33)
  {
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    outlined retain of Graph((uint64_t)&v83);
    uint64_t v68 = v35;
    if (!v36)
    {
      swift_retain();
      swift_retain();
LABEL_48:
      swift_release();
      a2 = v67;
      goto LABEL_49;
    }
    uint64_t v70 = v17;
    swift_retain();
    swift_retain();
    unint64_t v40 = 0;
    uint64_t v53 = (void *)(v34 + 80);
    uint64_t v80 = v36;
    while (1)
    {
      if (*(v53 - 6) != v13) {
        goto LABEL_24;
      }
      uint64_t v54 = *(v53 - 4);
      uint64_t v55 = *(v53 - 3);
      uint64_t v56 = *(v53 - 2);
      char v57 = *((unsigned char *)v53 - 8);
      uint64_t v58 = *v53;
      unint64_t v59 = *(uint64_t (**)(uint64_t))(*(void *)*(v53 - 5) + 128);
      swift_retain();
      swift_bridgeObjectRetain();
      if ((v59(v96) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        Swift::UInt v13 = v82;
        uint64_t v36 = v80;
        goto LABEL_24;
      }
      uint64_t v75 = v56;
      if (v54 == v81 && v55 == v77)
      {
        swift_bridgeObjectRelease();
        unint64_t result = swift_release();
        Swift::UInt v13 = v82;
        uint64_t v36 = v80;
        uint64_t v62 = v75;
        if (v57) {
          goto LABEL_33;
        }
      }
      else
      {
        char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        unint64_t result = swift_release();
        Swift::UInt v13 = v82;
        uint64_t v36 = v80;
        uint64_t v62 = v75;
        if ((v61 & 1) == 0) {
          goto LABEL_24;
        }
        if (v57)
        {
LABEL_33:
          char v63 = v76;
          if (v58 != v78) {
            char v63 = 0;
          }
          if (v63) {
            goto LABEL_42;
          }
          goto LABEL_24;
        }
      }
      int v64 = v76 ^ 1;
      if (v62 != v70) {
        int v64 = 0;
      }
      if (v64 == 1 && v58 == v78)
      {
LABEL_42:
        a2 = v67;
        uint64_t v41 = v68;
LABEL_14:
        if (v40 >= *(void *)(v41 + 16)) {
          goto LABEL_68;
        }
        uint64_t v42 = (void *)(v41 + 56 * v40);
        uint64_t v44 = v42[4];
        uint64_t v43 = v42[5];
        uint64_t v45 = v42[6];
        uint64_t v46 = v42[9];
        uint64_t v47 = v42[7];
        uint64_t v74 = v42[8];
        uint64_t v79 = v42[10];
        outlined copy of Output?(v44, v43);
        swift_bridgeObjectRelease();
        uint64_t v48 = v96;
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined release of Graph((uint64_t)&v83);
        if (v43)
        {
          if (swift_isUniquelyReferenced_nonNull_native()) {
            uint64_t v49 = v69;
          }
          else {
            uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69[2] + 1, 1, v69);
          }
          unint64_t v51 = v49[2];
          unint64_t v50 = v49[3];
          if (v51 >= v50 >> 1) {
            uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v49);
          }
          v49[2] = v51 + 1;
          uint64_t v69 = v49;
          uint64_t v52 = &v49[14 * v51];
          v52[4] = v44;
          v52[5] = v43;
          v52[6] = v45;
          v52[7] = v47;
          v52[8] = v74;
          *((unsigned char *)v52 + 72) = v46 & 1;
          v52[10] = v79;
          v52[11] = v82;
          _OWORD v52[12] = v48;
          v52[13] = v81;
          v52[14] = v77;
          v52[15] = v70;
          *((unsigned char *)v52 + 128) = v76;
          v52[17] = v78;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        uint64_t v11 = v71;
LABEL_52:
        if (v11 == v73)
        {
          swift_bridgeObjectRelease();
          return (unint64_t)v69;
        }
        uint64_t v12 = &v72[7 * v11];
        uint64_t v5 = (uint64_t *)(v12 + 1);
        uint64_t v6 = (uint64_t *)(v12 + 2);
        uint64_t v7 = (uint64_t *)(v12 + 3);
        uint64_t v8 = (uint64_t *)(v12 + 4);
        uint64_t v9 = (unsigned __int8 *)(v12 + 5);
        unint64_t v10 = (uint64_t *)(v12 + 6);
        ++v11;
        goto LABEL_3;
      }
LABEL_24:
      v53 += 7;
      if (v36 == ++v40) {
        goto LABEL_48;
      }
    }
  }
  uint64_t v70 = v17;
  uint64_t v37 = (void *)(v33 + 16);
  uint64_t v38 = v33 + 32;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of Graph((uint64_t)&v83);
  swift_retain();
  swift_retain();
  swift_retain();
  unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v93, v34 + 32, v36, v37, v38);
  if (v39)
  {
    swift_release();
    swift_release();
LABEL_49:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    outlined release of Graph((uint64_t)&v83);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v11 = v71;
    goto LABEL_52;
  }
  unint64_t v40 = result;
  uint64_t v41 = v35;
  if ((result & 0x8000000000000000) == 0) {
    goto LABEL_14;
  }
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  Swift::UInt *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  uint64_t v12;
  Swift::UInt *v13;
  Swift::UInt v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t result;
  char v32;
  Swift::UInt *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t (*v48)(uint64_t);
  char v50;
  char v51;
  int v52;
  void *v53;
  void *v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  Swift::UInt *v64;
  _OWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  _OWORD v86[2];
  void v87[5];
  char v88;
  uint64_t v89;
  uint64_t v90;

  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v4 = (Swift::UInt *)(a1 + 32);
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = (uint64_t *)(v5 + 40);
  uint64_t v7 = (uint64_t *)(v5 + 48);
  uint64_t v8 = (uint64_t *)(v5 + 56);
  uint64_t v9 = (uint64_t *)(v5 + 64);
  unint64_t v10 = (unsigned __int8 *)(v5 + 72);
  char v63 = (void *)MEMORY[0x263F8EE78];
  int v64 = v4;
  uint64_t v11 = (uint64_t *)(v5 + 80);
  uint64_t v12 = 1;
  Swift::UInt v13 = v4;
  uint64_t v65 = a2;
  Swift::UInt v67 = v2;
LABEL_3:
  uint64_t v14 = *v13;
  uint64_t v15 = *v6;
  uint64_t v16 = *v7;
  uint64_t v17 = *v8;
  int v18 = *v9;
  uint64_t v19 = *v10;
  long long v20 = *v11;
  v87[0] = *v13;
  v87[1] = v15;
  uint64_t v71 = v20;
  uint64_t v73 = v16;
  v87[2] = v16;
  v87[3] = v17;
  v87[4] = v18;
  uint64_t v70 = v19;
  long long v88 = v19;
  long long v89 = v20;
  long long v21 = a2[1];
  uint64_t v77 = *a2;
  uint64_t v78 = v21;
  long long v22 = a2[2];
  long long v23 = a2[3];
  long long v24 = a2[5];
  uint64_t v81 = a2[4];
  Swift::UInt v82 = v24;
  uint64_t v79 = v22;
  uint64_t v80 = v23;
  long long v25 = a2[6];
  long long v26 = a2[7];
  *(_OWORD *)((char *)v86 + 9) = *(_OWORD *)((char *)a2 + 153);
  uint64_t v27 = a2[9];
  long long v85 = a2[8];
  v86[0] = v27;
  long long v83 = v25;
  long long v84 = v26;
  uint64_t v28 = v78;
  uint64_t v29 = (void *)(*((void *)&v77 + 1) + 32);
  uint64_t v30 = *(void *)(*((void *)&v77 + 1) + 16);
  long long v90 = v17;
  if ((void)v77)
  {
    unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v14, (uint64_t)v29, v30, (void *)(v77 + 16), v77 + 32);
    if (v32) {
      goto LABEL_10;
    }
    if ((result & 0x8000000000000000) != 0) {
      goto LABEL_74;
    }
  }
  else
  {
    if (!v30) {
      goto LABEL_10;
    }
    if (*v29 == v14)
    {
      unint64_t result = 0;
    }
    else
    {
      if (v30 == 1) {
        goto LABEL_10;
      }
      if (*(void *)(*((void *)&v77 + 1) + 40) == v14)
      {
        unint64_t result = 1;
      }
      else
      {
        if (v30 == 2)
        {
LABEL_10:
          swift_bridgeObjectRetain();
          goto LABEL_48;
        }
        if (*(void *)(*((void *)&v77 + 1) + 48) == v14)
        {
          unint64_t result = 2;
        }
        else
        {
          uint64_t v60 = 0;
          do
          {
            if (v30 - 3 == v60) {
              goto LABEL_10;
            }
            char v61 = *(void *)(*((void *)&v77 + 1) + 56 + 8 * v60++);
          }
          while (v61 != v14);
          unint64_t result = v60 + 2;
          if (v60 + 2 < 0) {
            goto LABEL_74;
          }
        }
      }
    }
  }
  if (result >= *(void *)(v28 + 16))
  {
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  uint64_t v69 = v12;
  uint64_t v33 = v4;
  uint64_t v34 = (void *)(v28 + 48 * result);
  uint64_t v36 = v34[7];
  uint64_t v35 = v34[8];
  uint64_t v37 = v34[9];
  uint64_t v38 = *(void *)(v35 + 16);
  int v76 = v15;
  if (!v36)
  {
    uint64_t v68 = v34[9];
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    outlined retain of Graph((uint64_t)&v77);
    if (!v38)
    {
      swift_retain();
      swift_retain();
LABEL_46:
      swift_release();
      uint64_t v4 = v64;
      a2 = v65;
      uint64_t v2 = v67;
      uint64_t v12 = v69;
      goto LABEL_47;
    }
    uint64_t v66 = v18;
    swift_retain();
    swift_retain();
    unint64_t v40 = 0;
    uint64_t v44 = (void *)(v35 + 80);
    while (1)
    {
      if (*(v44 - 6) != v14) {
        goto LABEL_25;
      }
      uint64_t v45 = *(v44 - 4);
      uint64_t v46 = *(v44 - 3);
      uint64_t v47 = *((unsigned char *)v44 - 8);
      uint64_t v74 = *(v44 - 2);
      uint64_t v75 = *v44;
      uint64_t v48 = *(uint64_t (**)(uint64_t))(*(void *)*(v44 - 5) + 128);
      swift_retain();
      swift_bridgeObjectRetain();
      if ((v48(v76) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_25;
      }
      if (v45 == v73 && v46 == v90)
      {
        swift_bridgeObjectRelease();
        unint64_t result = swift_release();
        if (v47) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        unint64_t result = swift_release();
        if ((v50 & 1) == 0) {
          goto LABEL_25;
        }
        if (v47)
        {
LABEL_34:
          unint64_t v51 = v70;
          if (v75 != v71) {
            unint64_t v51 = 0;
          }
          if (v51) {
            goto LABEL_43;
          }
          goto LABEL_25;
        }
      }
      uint64_t v52 = v70 ^ 1;
      if (v74 != v66) {
        uint64_t v52 = 0;
      }
      if (v52 == 1 && v75 == v71)
      {
LABEL_43:
        uint64_t v4 = v64;
        a2 = v65;
        uint64_t v2 = v67;
        uint64_t v37 = v68;
LABEL_18:
        if (v40 >= *(void *)(v37 + 16)) {
          goto LABEL_75;
        }
        uint64_t v41 = v37 + 56 * v40;
        uint64_t v43 = *(void *)(v41 + 32);
        uint64_t v42 = *(void *)(v41 + 40);
        outlined copy of Output?(v43, v42);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        unint64_t result = swift_release();
        if (!v42)
        {
          outlined release of Graph((uint64_t)&v77);
          swift_release();
          uint64_t v12 = v69;
          goto LABEL_48;
        }
        uint64_t v12 = v69;
        if (v43 == -7)
        {
          swift_retain();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          outlined release of Graph((uint64_t)&v77);
          swift_release();
          goto LABEL_48;
        }
        if ((v43 & 0x8000000000000000) != 0) {
          goto LABEL_77;
        }
        if (v43 >= *(void *)(v81 + 16)) {
          goto LABEL_78;
        }
        long long v72 = *(void *)(v81 + 48 * v43 + 32);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v72);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        outlined release of Graph((uint64_t)&v77);
        if (v72 >> 61 || *(unsigned char *)(v72 + 80) != 6)
        {
          outlined consume of NodePersonality(v72);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
        }
        else
        {
          uint64_t v54 = *(void **)(v72 + 16);
          uint64_t v53 = *(void **)(v72 + 24);
          outlined copy of SGDataTypeStorage(v54, v53, *(void *)(v72 + 32), *(void *)(v72 + 40), *(void *)(v72 + 48), *(void *)(v72 + 56), *(void *)(v72 + 64), *(void *)(v72 + 72), 6);
          outlined consume of NodePersonality(v72);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (swift_isUniquelyReferenced_nonNull_native()) {
            uint64_t v55 = v63;
          }
          else {
            uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63[2] + 1, 1, v63);
          }
          char v57 = v55[2];
          uint64_t v56 = v55[3];
          uint64_t v58 = v90;
          if (v57 >= v56 >> 1)
          {
            uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v56 > 1), v57 + 1, 1, v55);
            uint64_t v58 = v90;
            uint64_t v55 = v62;
          }
          _OWORD v55[2] = v57 + 1;
          char v63 = v55;
          unint64_t v59 = &v55[4 * v57];
          v59[4] = v73;
          void v59[5] = v58;
          v59[6] = v54;
          v59[7] = v53;
          uint64_t v12 = v69;
        }
LABEL_49:
        if (v12 == v2)
        {
          swift_bridgeObjectRelease();
          return (unint64_t)v63;
        }
        Swift::UInt v13 = &v4[7 * v12];
        uint64_t v6 = (uint64_t *)(v13 + 1);
        uint64_t v7 = (uint64_t *)(v13 + 2);
        uint64_t v8 = (uint64_t *)(v13 + 3);
        uint64_t v9 = (uint64_t *)(v13 + 4);
        unint64_t v10 = (unsigned __int8 *)(v13 + 5);
        uint64_t v11 = (uint64_t *)(v13 + 6);
        ++v12;
        goto LABEL_3;
      }
LABEL_25:
      v44 += 7;
      if (v38 == ++v40) {
        goto LABEL_46;
      }
    }
  }
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of Graph((uint64_t)&v77);
  swift_retain();
  swift_retain();
  swift_retain();
  unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v87, v35 + 32, v38, (void *)(v36 + 16), v36 + 32);
  if (v39)
  {
    swift_release();
    swift_release();
    uint64_t v4 = v33;
    uint64_t v2 = v67;
    uint64_t v12 = v69;
LABEL_47:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    outlined release of Graph((uint64_t)&v77);
    swift_release();
LABEL_48:
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  unint64_t v40 = result;
  uint64_t v4 = v33;
  uint64_t v2 = v67;
  if ((result & 0x8000000000000000) == 0) {
    goto LABEL_18;
  }
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SayAH2IDVGs5NeverOTg504_s11d57Graph0B0V30removeUnconnectedNodesAndEdges5rootsySayAA0aB4F22VG_tFSayAG2IDVGAGXEfU_AF0E0VTf1cn_n(uint64_t a1, _OWORD *a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v28 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t result = v28;
    uint64_t v6 = a1 + 40;
    do
    {
      uint64_t v20 = result;
      int64_t v21 = v3;
      unint64_t v7 = *(void *)v6;
      unint64_t v9 = *(void *)(v6 + 8);
      char v10 = *(unsigned char *)(v6 + 32);
      v23[0] = *(void *)(v6 - 8);
      unint64_t v8 = v23[0];
      v23[1] = v7;
      uint64_t v23[2] = v9;
      long long v24 = *(_OWORD *)(v6 + 16);
      char v25 = v10;
      long long v11 = a2[9];
      v26[8] = a2[8];
      v27[0] = v11;
      *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)((char *)a2 + 153);
      long long v12 = a2[5];
      v26[4] = a2[4];
      v26[5] = v12;
      long long v13 = a2[7];
      v26[6] = a2[6];
      v26[7] = v13;
      long long v14 = a2[1];
      v26[0] = *a2;
      v26[1] = v14;
      long long v15 = a2[3];
      v26[2] = a2[2];
      v26[3] = v15;
      outlined copy of NodePersonality(v23[0]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined retain of Graph((uint64_t)v26);
      Graph.connectedUpstreamSubgraph(rootedAt:)((uint64_t)v23, (uint64_t)&v22);
      uint64_t v16 = v22;
      outlined release of Graph((uint64_t)v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_AH2IDVs5NeverOTg504_s11D159Graph0B0V16splitSharedNodes12nodeDefStore07surfaceA016geometryModifieryAA04NodegH0V_AA0abL0VAKSgtKFAK2IDVAKcfu_33_300d98c1e43c0bc1dedcebf2cdbfb115AkNTf3nnnpk_nTf1cn_nTm(v16);
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v20;
      uint64_t v28 = v20;
      unint64_t v19 = *(void *)(v20 + 16);
      unint64_t v18 = *(void *)(v20 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        uint64_t result = v28;
      }
      *(void *)(result + 16) = v19 + 1;
      *(void *)(result + 8 * v19 + 32) = v17;
      v6 += 48;
      int64_t v3 = v21 - 1;
    }
    while (v21 != 1);
  }
  return result;
}

unint64_t Graph.edge(to:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (_OWORD *)(a1 + 16);
  uint64_t v32 = *(void *)(a1 + 24);
  uint64_t v33 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 40);
  uint64_t v30 = *(void *)(a1 + 48);
  uint64_t v31 = *(void *)(a1 + 32);
  uint64_t v8 = *v2;
  unint64_t v9 = (void *)v2[1];
  uint64_t v10 = v2[2];
  uint64_t v34 = *(void *)a1;
  unint64_t result = specialized OrderedSet._find(_:)(*(void *)a1, v8, v9, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if (v12) {
    goto LABEL_6;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)(v10 + 16))
  {
    long long v13 = (void *)(v10 + 48 * result);
    uint64_t v14 = v13[7];
    uint64_t v15 = v13[8];
    uint64_t v16 = v13[9];
    v43[0] = *v6;
    swift_retain();
    swift_retain();
    swift_retain();
    outlined retain of String((uint64_t)v43);
    swift_retain();
    specialized OrderedDictionary.subscript.getter(a1, v14, v15, v16, v35);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of String((uint64_t)v43);
    unint64_t result = outlined init with take of MetalFunctionNode?((uint64_t)v35, (uint64_t)&v36, &demangling cache variable for type metadata for Output??);
    uint64_t v17 = v37;
    if (!v37)
    {
      unint64_t result = (unint64_t)outlined release of Output??(v35, (void (*)(void, void, void, void, void, void, void))outlined consume of Output??);
      uint64_t v18 = 0;
      goto LABEL_7;
    }
    if (v37 != 1)
    {
      uint64_t v28 = v7 & 1;
      uint64_t v23 = v42;
      uint64_t v20 = v39;
      uint64_t v21 = v40;
      uint64_t v19 = v38;
      uint64_t v18 = v36;
      uint64_t v22 = v41 & 1;
      swift_retain();
      unint64_t result = outlined retain of String((uint64_t)v43);
      uint64_t v25 = v33;
      uint64_t v24 = v34;
      uint64_t v27 = v31;
      uint64_t v26 = v32;
      uint64_t v29 = v30;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v18 = 0;
    uint64_t v17 = 0;
LABEL_7:
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v5 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
LABEL_8:
    *a2 = v18;
    a2[1] = v17;
    a2[2] = v19;
    a2[3] = v20;
    a2[4] = v21;
    a2[5] = v22;
    a2[6] = v23;
    a2[7] = v24;
    a2[8] = v5;
    a2[9] = v25;
    a2[10] = v26;
    a2[11] = v27;
    a2[12] = v28;
    a2[13] = v29;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t **specialized Sequence._copyContents(initializing:)(unint64_t **result, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  if (a5 >= 1)
  {
    unint64_t v6 = *a4;
    if (a2) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v7 = 0;
    a3 = 0;
LABEL_21:
    *unint64_t result = a4;
    result[1] = (unint64_t *)a5;
    result[2] = a6;
    result[3] = (unint64_t *)v7;
    result[4] = (unint64_t *)v6;
    return (unint64_t **)a3;
  }
  unint64_t v6 = 0;
  if (!a2) {
    goto LABEL_18;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v7 = 0;
    goto LABEL_21;
  }
  if (a3 < 0) {
    goto LABEL_25;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  while (v6)
  {
    unint64_t v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v10 = v9 | (v7 << 6);
LABEL_7:
    ++v8;
    *a2++ = v10;
    if (v8 == a3) {
      goto LABEL_21;
    }
  }
  uint64_t v11 = v7 + 1;
  if (__OFADD__(v7, 1)) {
    goto LABEL_24;
  }
  if (v11 >= a5)
  {
    unint64_t v6 = 0;
    a3 = v8;
    goto LABEL_21;
  }
  unint64_t v12 = a4[v11];
  if (v12)
  {
    ++v7;
LABEL_16:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v7 << 6);
    goto LABEL_7;
  }
  while (1)
  {
    uint64_t v7 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v7 >= a5)
    {
      unint64_t v6 = 0;
      uint64_t v7 = a5 - 1;
      a3 = v8;
      goto LABEL_21;
    }
    unint64_t v12 = a4[v7];
    ++v11;
    if (v12) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

unint64_t *specialized Sequence._copyContents(initializing:)(unint64_t *result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  if (!a2)
  {
LABEL_11:
    a3 = 0;
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    *unint64_t result = a4;
    return (unint64_t *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (a4)
    {
      unint64_t v4 = __clz(__rbit64(a4));
      a4 &= a4 - 1;
      *a2 = v4;
      if (a3 != 1)
      {
        if (a4)
        {
          uint64_t v5 = 0;
          while (1)
          {
            unint64_t v6 = __clz(__rbit64(a4));
            a4 &= a4 - 1;
            a2[v5 + 1] = v6;
            if (a3 - 2 == v5) {
              break;
            }
            ++v5;
            if (!a4)
            {
              a3 = v5 + 1;
              goto LABEL_12;
            }
          }
        }
        else
        {
          a3 = 1;
        }
      }
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<Error>>);
  uint64_t result = swift_allocObject();
  uint64_t v10 = result;
  uint64_t v11 = 0;
  *(void *)(result + 16) = partial apply for closure #1 in NestedError.makeIterator();
  *(void *)(result + 24) = v8;
  if (!a2 || !a3)
  {
LABEL_11:
    *a1 = v10;
    return v11;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    closure #1 in NestedError.makeIterator()(v8, &v13);
    uint64_t v12 = v13;
    if (v13)
    {
      uint64_t v11 = 0;
      while (1)
      {
        *(void *)(a2 + 8 * v11) = v12;
        if (a3 - 1 == v11) {
          break;
        }
        closure #1 in NestedError.makeIterator()(v8, &v13);
        uint64_t v12 = v13;
        ++v11;
        if (!v13) {
          goto LABEL_11;
        }
      }
      uint64_t v11 = a3;
    }
    else
    {
      uint64_t v11 = 0;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

_OWORD *specialized Sequence._copyContents(initializing:)(_OWORD *result, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t v25 = *v3;
  *(_OWORD *)&v25[16] = v3[1];
  *(_OWORD *)&v25[32] = v3[2];
  if (!a2)
  {
    a3 = 0;
    long long v16 = v3[1];
    *uint64_t result = *v3;
    result[1] = v16;
    result[2] = v3[2];
    return (_OWORD *)a3;
  }
  uint64_t v17 = result;
  if (!a3)
  {
LABEL_7:
    uint64_t v15 = *(void *)v25;
LABEL_10:
    *(void *)uint64_t v17 = v15;
    *(_OWORD *)((char *)v17 + 8) = *(_OWORD *)&v25[8];
    *(_OWORD *)((char *)v17 + 24) = *(_OWORD *)&v25[24];
    *((void *)v17 + 5) = *(void *)&v25[40];
    return (_OWORD *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = a2;
    uint64_t v5 = 0;
    uint64_t v18 = a3;
    while (1)
    {
      uint64_t v24 = v5;
      Graph.BreathFirstEdgeIterator.next()(v26);
      uint64_t v6 = v26[0];
      uint64_t v7 = v26[1];
      uint64_t v8 = v26[2];
      uint64_t v9 = v26[3];
      uint64_t v10 = v26[4];
      char v11 = v27;
      uint64_t v12 = v28;
      uint64_t v13 = v29;
      uint64_t v14 = v30;
      uint64_t v20 = v32;
      uint64_t v21 = v31;
      uint64_t v19 = v33;
      char v22 = v34;
      uint64_t v23 = v35;
      outlined init with take of MetalFunctionNode?((uint64_t)v26, (uint64_t)v36, &demangling cache variable for type metadata for Edge?);
      if (!v37) {
        break;
      }
      uint64_t v5 = v24 + 1;
      *(void *)uint64_t v4 = v6;
      *(void *)(v4 + 8) = v7;
      *(void *)(v4 + 16) = v8;
      *(void *)(v4 + 24) = v9;
      *(void *)(v4 + 32) = v10;
      *(unsigned char *)(v4 + 40) = v11 & 1;
      *(void *)(v4 + 48) = v12;
      *(void *)(v4 + 56) = v13;
      *(void *)(v4 + 64) = v14;
      *(void *)(v4 + 72) = v21;
      a3 = v18;
      *(void *)(v4 + 80) = v20;
      *(void *)(v4 + 88) = v19;
      *(unsigned char *)(v4 + 96) = v22 & 1;
      *(void *)(v4 + 104) = v23;
      v4 += 112;
      if (v18 == v24 + 1) {
        goto LABEL_7;
      }
    }
    a3 = v24;
    uint64_t v15 = *(void *)v25;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence._copyContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)v3[1];
  uint64_t v82 = *v3;
  uint64_t v71 = v3[2];
  uint64_t v5 = v3[3];
  uint64_t v6 = v3[4];
  uint64_t v94 = v6;
  uint64_t v95 = (void *)v5;
  if (!a2)
  {
    a3 = 0;
    long long v63 = *((_OWORD *)v3 + 1);
    *(_OWORD *)uint64_t result = *(_OWORD *)v3;
    *(_OWORD *)(result + 16) = v63;
    *(void *)(result + 32) = v3[4];
    return a3;
  }
  if (!a3) {
    goto LABEL_86;
  }
  if (a3 < 0)
  {
LABEL_90:
    __break(1u);
    return result;
  }
  uint64_t v7 = v95;
  if (!v95[2])
  {
    uint64_t v8 = 0;
    goto LABEL_81;
  }
  uint64_t v8 = 0;
  long long v72 = v4 + 4;
  uint64_t v65 = a3;
  uint64_t v70 = v4 + 7;
  uint64_t v9 = 1;
  uint64_t v81 = v4;
  unint64_t v69 = result;
LABEL_6:
  uint64_t v67 = a2;
  uint64_t v68 = v8;
  uint64_t v66 = v9;
  while ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    uint64_t v10 = v7[2];
    if (!v10) {
      goto LABEL_82;
    }
LABEL_11:
    uint64_t v11 = v10 - 1;
    uint64_t v12 = &v7[7 * v11];
    long long v13 = *((_OWORD *)v12 + 2);
    long long v14 = *((_OWORD *)v12 + 3);
    long long v15 = *((_OWORD *)v12 + 4);
    Swift::UInt v113 = v12[10];
    long long v111 = v14;
    long long v112 = v15;
    long long v110 = v13;
    uint64_t v16 = v12[4];
    uint64_t v17 = v12[5];
    uint64_t v18 = v12[6];
    uint64_t v19 = v12[7];
    uint64_t v20 = v12[8];
    char v21 = *((unsigned char *)v12 + 72);
    uint64_t v22 = v12[10];
    _OWORD v7[2] = v11;
    uint64_t v23 = v94;
    uint64_t v79 = v17;
    uint64_t v80 = v16;
    uint64_t v77 = v19;
    uint64_t v78 = v18;
    uint64_t v76 = v20;
    char v75 = v21;
    uint64_t v74 = v22;
    if (*(void *)(v94 + 16))
    {
      Hasher.init(_seed:)();
      uint64_t v91 = v110;
      Hasher._combine(_:)(v110);
      uint64_t v24 = *((void *)&v110 + 1);
      uint64_t v25 = *(void (**)(char *))(**((void **)&v110 + 1) + 120);
      swift_retain();
      v25(v93);
      swift_release();
      long long v26 = v111;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::UInt v27 = v112;
      char v86 = BYTE8(v112);
      if (BYTE8(v112) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v27);
      }
      Swift::UInt v85 = v113;
      Hasher._combine(_:)(v113);
      Swift::Int v28 = Hasher._finalize()();
      uint64_t v29 = -1 << *(unsigned char *)(v23 + 32);
      unint64_t v30 = v28 & ~v29;
      uint64_t v31 = v23 + 56;
      if ((*(void *)(v23 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v30))
      {
        Swift::UInt v73 = v27;
        long long v83 = v7;
        uint64_t v32 = ~v29;
        while (1)
        {
          uint64_t v33 = *(void *)(v23 + 48) + 56 * v30;
          if (*(void *)v33 == v91)
          {
            uint64_t v34 = v23;
            uint64_t v35 = *(void *)(v33 + 16);
            uint64_t v36 = *(void *)(v33 + 24);
            uint64_t v87 = *(void *)(v33 + 32);
            char v37 = *(unsigned char *)(v33 + 40);
            uint64_t v89 = *(void *)(v33 + 48);
            uint64_t v38 = *(uint64_t (**)(uint64_t))(**(void **)(v33 + 8) + 128);
            swift_retain();
            swift_bridgeObjectRetain();
            if (v38(v24))
            {
              if (v35 == (void)v26 && v36 == *((void *)&v26 + 1))
              {
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v23 = v34;
                if (v37)
                {
LABEL_28:
                  char v41 = v86;
                  if (v89 != v85) {
                    char v41 = 0;
                  }
                  if (v41)
                  {
LABEL_39:
                    swift_bridgeObjectRelease();
                    swift_release();
                    uint64_t v4 = v81;
                    uint64_t v7 = v83;
                    goto LABEL_8;
                  }
                  goto LABEL_19;
                }
                goto LABEL_33;
              }
              char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_release();
              uint64_t v23 = v34;
              if (v40)
              {
                if (v37) {
                  goto LABEL_28;
                }
LABEL_33:
                if ((v86 & 1) == 0 && v87 == v73 && v89 == v85) {
                  goto LABEL_39;
                }
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_release();
              uint64_t v23 = v34;
            }
          }
LABEL_19:
          unint64_t v30 = (v30 + 1) & v32;
          if (((*(void *)(v31 + ((v30 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
          {
            uint64_t v4 = v81;
            uint64_t v7 = v83;
            goto LABEL_42;
          }
        }
      }
      uint64_t v4 = v81;
    }
LABEL_42:
    v114[0] = v111;
    swift_retain();
    outlined retain of String((uint64_t)v114);
    specialized Set._Variant.insert(_:)((uint64_t)v93, (Swift::Int)&v110, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<Input>);
    swift_release();
    swift_bridgeObjectRelease();
    a3 = v4[2];
    if (v82)
    {
      unint64_t v43 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v110, (uint64_t)v72, a3, (void *)(v82 + 16), v82 + 32);
      if ((v44 & 1) == 0)
      {
        if ((v43 & 0x8000000000000000) != 0) {
          goto LABEL_83;
        }
LABEL_59:
        if (v43 >= *(void *)(v71 + 16)) {
          goto LABEL_84;
        }
        uint64_t v47 = (void *)(v71 + 32 + 48 * v43);
        uint64_t v49 = v47[3];
        uint64_t v48 = v47[4];
        uint64_t v50 = v47[5];
        uint64_t v51 = *(void *)(v48 + 16);
        if (v49)
        {
          swift_retain();
          outlined retain of String((uint64_t)v114);
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v110, v48 + 32, v51, (void *)(v49 + 16), v49 + 32);
          if (v52) {
            goto LABEL_68;
          }
        }
        else
        {
          swift_retain();
          outlined retain of String((uint64_t)v114);
          swift_retain();
          swift_retain();
          uint64_t result = specialized Collection<>.firstIndex(of:)(&v110, v48 + 32, v51);
          if (v53)
          {
LABEL_68:
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            outlined release of String((uint64_t)v114);
            swift_release();
            outlined release of String((uint64_t)v114);
LABEL_69:
            uint64_t v4 = v81;
            goto LABEL_8;
          }
        }
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }
        if (result >= *(void *)(v50 + 16)) {
          goto LABEL_89;
        }
        long long v84 = v7;
        uint64_t v54 = (void *)(v50 + 56 * result);
        uint64_t v90 = v54[4];
        uint64_t v92 = v54[5];
        uint64_t v55 = v54[6];
        uint64_t v56 = v54[7];
        uint64_t v57 = v54[8];
        uint64_t v58 = v54[9];
        uint64_t v59 = v54[10];
        outlined copy of Output?(v90, v92);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined release of String((uint64_t)v114);
        if (v92)
        {
          uint64_t v88 = v57;
          uint64_t v95 = v84;
          specialized OrderedDictionary.subscript.getter(v90, v82, v81, v71, v96);
          outlined init with take of MetalFunctionNode?((uint64_t)v96, (uint64_t)&v97, &demangling cache variable for type metadata for Graph.Adjacent?);
          if (*((void *)&v97 + 1))
          {
            long long v105 = v97;
            long long v102 = v99;
            uint64_t v60 = v98;
            uint64_t v61 = v100;
            outlined init with take of MetalFunctionNode?((uint64_t)&v102, (uint64_t)v104, &demangling cache variable for type metadata for _HashTable.Storage?);
            uint64_t v62 = *((void *)&v102 + 1);
            uint64_t v103 = *((void *)&v102 + 1);
            uint64_t v101 = v61;
            long long v107 = v105;
            outlined init with take of MetalFunctionNode?((uint64_t)&v107, (uint64_t)v109, &demangling cache variable for type metadata for _HashTable.Storage?);
            swift_retain();
            outlined retain of String((uint64_t)v114);
            outlined retain of _HashTable.Storage?((uint64_t)v104);
            outlined retain of _HashTable.Storage?((uint64_t)&v103);
            outlined retain of _HashTable.Storage?((uint64_t)&v101);
            outlined release of _HashTable.Storage?((uint64_t)v109);
            uint64_t v108 = *((void *)&v107 + 1);
            outlined release of _HashTable.Storage?((uint64_t)&v108);
            uint64_t v106 = v60;
            outlined release of _HashTable.Storage?((uint64_t)&v106);
            outlined release of _HashTable.Storage?((uint64_t)v104);
            outlined release of _HashTable.Storage?((uint64_t)&v103);
            outlined release of _HashTable.Storage?((uint64_t)&v101);
            outlined release of _HashTable.Storage?((uint64_t)&v101);
            outlined release of _HashTable.Storage?((uint64_t)v104);
          }
          else
          {
            swift_retain();
            outlined retain of String((uint64_t)v114);
            uint64_t v62 = MEMORY[0x263F8EE78];
          }
          specialized Array.append<A>(contentsOf:)(v62);
          swift_release();
          outlined release of String((uint64_t)v114);
          *(void *)uint64_t v67 = v90;
          *(void *)(v67 + 8) = v92;
          *(void *)(v67 + 16) = v55;
          *(void *)(v67 + 24) = v56;
          *(void *)(v67 + 32) = v88;
          *(unsigned char *)(v67 + 40) = v58 & 1;
          *(void *)(v67 + 48) = v59;
          *(void *)(v67 + 56) = v80;
          *(void *)(v67 + 64) = v79;
          *(void *)(v67 + 72) = v78;
          *(void *)(v67 + 80) = v77;
          *(void *)(v67 + 88) = v76;
          *(unsigned char *)(v67 + 96) = v75;
          *(void *)(v67 + 104) = v74;
          a3 = v65;
          uint64_t v8 = v66;
          if (v66 == v65) {
            goto LABEL_85;
          }
          a2 = v67 + 112;
          uint64_t v9 = v66 + 1;
          uint64_t v7 = v95;
          uint64_t result = v69;
          uint64_t v4 = v81;
          if (!v95[2])
          {
LABEL_81:
            uint64_t v64 = v94;
            *(void *)uint64_t result = v82;
            *(void *)(result + 8) = v4;
            *(void *)(result + 16) = v71;
            *(void *)(result + 24) = v7;
            *(void *)(result + 32) = v64;
            return v8;
          }
          goto LABEL_6;
        }
        swift_release();
        outlined release of String((uint64_t)v114);
        uint64_t v7 = v84;
        goto LABEL_69;
      }
    }
    else if (a3)
    {
      if (*v72 == (void)v110)
      {
        unint64_t v43 = 0;
        goto LABEL_59;
      }
      if (a3 != 1)
      {
        if (v4[5] == (void)v110)
        {
          unint64_t v43 = 1;
          goto LABEL_59;
        }
        if (a3 != 2)
        {
          if (v4[6] == (void)v110)
          {
            unint64_t v43 = 2;
            goto LABEL_59;
          }
          uint64_t v45 = 0;
          while (a3 - 3 != v45)
          {
            uint64_t v46 = v70[v45++];
            if (v46 == (void)v110)
            {
              unint64_t v43 = v45 + 2;
              if (v45 + 2 < 0) {
                goto LABEL_83;
              }
              goto LABEL_59;
            }
          }
        }
      }
    }
    swift_release();
    outlined release of String((uint64_t)v114);
LABEL_8:
    if (!v7[2])
    {
      uint64_t v8 = v68;
      uint64_t result = v69;
      goto LABEL_81;
    }
  }
  uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
  uint64_t v10 = v7[2];
  if (v10) {
    goto LABEL_11;
  }
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  uint64_t v6 = v94;
  uint64_t v5 = (uint64_t)v95;
  uint64_t result = v69;
  uint64_t v4 = v81;
LABEL_86:
  *(void *)uint64_t result = v82;
  *(void *)(result + 8) = v4;
  *(void *)(result + 16) = v71;
  *(void *)(result + 24) = v5;
  *(void *)(result + 32) = v6;
  return a3;
}

Swift::Void __swiftcall Graph.flatten()()
{
  uint64_t v1 = *(void *)(v0 + 64);
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    int64_t v3 = 0;
    uint64_t v4 = MEMORY[0x263F8EE78];
    do
    {
      if (v3 <= (unint64_t)v2) {
        uint64_t v5 = v2;
      }
      else {
        uint64_t v5 = v3;
      }
      uint64_t v6 = 48 * v3;
      while (1)
      {
        if (v5 == v3)
        {
          __break(1u);
          return;
        }
        uint64_t v7 = v1 + v6;
        uint64_t v8 = *(void *)(v1 + v6 + 56);
        if (v8 != -7) {
          break;
        }
        ++v3;
        v6 += 48;
        if (v3 >= v2) {
          goto LABEL_18;
        }
      }
      unint64_t v9 = *(void *)(v7 + 32);
      if (v9 >> 61 == 6)
      {
        uint64_t v10 = *(void *)(v7 + 40);
        uint64_t v11 = *(void *)(v7 + 48);
        uint64_t v25 = *(void *)(v7 + 64);
        char v24 = *(unsigned char *)(v7 + 72);
        outlined copy of NodePersonality(v9);
        uint64_t v23 = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v26[0] = v4;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1);
          uint64_t v4 = v26[0];
        }
        unint64_t v13 = *(void *)(v4 + 16);
        unint64_t v12 = *(void *)(v4 + 24);
        unint64_t v14 = v13 + 1;
        if (v13 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
          unint64_t v14 = v13 + 1;
          uint64_t v4 = v26[0];
        }
        *(void *)(v4 + 16) = v14;
        uint64_t v15 = v4 + 48 * v13;
        *(void *)(v15 + 32) = v9;
        *(void *)(v15 + 40) = v23;
        *(void *)(v15 + 48) = v11;
        *(void *)(v15 + 56) = v8;
        *(void *)(v15 + 64) = v25;
        *(unsigned char *)(v15 + 72) = v24;
      }
      ++v3;
    }
    while (v3 < v2);
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void *)(v4 + 16);
    if (v16) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8EE78];
    uint64_t v16 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v16)
    {
LABEL_21:
      swift_retain();
      uint64_t v17 = (uint64_t *)(v4 + 40);
      do
      {
        unint64_t v18 = *(v17 - 1);
        uint64_t v19 = *v17;
        uint64_t v20 = v17[1];
        char v21 = *((unsigned char *)v17 + 32);
        long long v22 = *((_OWORD *)v17 + 1);
        v26[0] = v18;
        v26[1] = v19;
        v26[2] = v20;
        long long v27 = v22;
        char v28 = v21;
        outlined copy of NodePersonality(v18);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        Graph.hoist(_:)(v26);
        outlined consume of NodePersonality(v18);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v17 += 6;
        --v16;
      }
      while (v16);
      swift_release();
    }
  }
  swift_release();
}

Swift::Void __swiftcall Graph.removeUnconnectedNodesAndEdges(roots:)(Swift::OpaquePointer roots)
{
  int64_t v2 = v1;
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SayAH2IDVGs5NeverOTg504_s11d57Graph0B0V30removeUnconnectedNodesAndEdges5rootsySayAA0aB4F22VG_tFSayAG2IDVGAGXEfU_AF0E0VTf1cn_n((uint64_t)roots._rawValue, v1);
  uint64_t v292 = 0;
  uint64_t v4 = specialized Set.init<A>(_:)(v3);
  uint64_t v5 = v1[8];
  unint64_t v6 = *(void *)(v5 + 16);
  if (!v6) {
    goto LABEL_299;
  }
  uint64_t v286 = v5 + 32;
  uint64_t v290 = v4 + 56;
  uint64_t v299 = v341;
  unint64_t v272 = (long long *)&v335;
  uint64_t v273 = v5;
  unint64_t v283 = v6;
  swift_bridgeObjectRetain_n();
  unint64_t v7 = v283;
  unint64_t v8 = 0;
  unint64_t v309 = v1;
  uint64_t v282 = v4;
  while (2)
  {
    unint64_t v9 = (unint64_t *)(v286 + 48 * v8);
    Swift::UInt v10 = v9[3];
    if (v10 == -7) {
      goto LABEL_273;
    }
    unint64_t v11 = *v9;
    unint64_t v13 = v9[1];
    unint64_t v12 = v9[2];
    unint64_t v289 = v13;
    unint64_t v287 = v11;
    unint64_t v288 = v12;
    uint64_t v14 = *(void *)(v4 + 16);
    unint64_t v284 = v8;
    if (v14)
    {
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v10);
      Swift::Int v15 = Hasher._finalize()();
      uint64_t v16 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v17 = v15 & ~v16;
      if ((*(void *)(v290 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17))
      {
        uint64_t v18 = *(void *)(v4 + 48);
        if (*(void *)(v18 + 8 * v17) == v10) {
          goto LABEL_272;
        }
        uint64_t v19 = ~v16;
        while (1)
        {
          unint64_t v17 = (v17 + 1) & v19;
          if (((*(void *)(v290 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
            break;
          }
          if (*(void *)(v18 + 8 * v17) == v10) {
            goto LABEL_272;
          }
        }
      }
    }
    uint64_t v21 = *v2;
    uint64_t v20 = (void *)v2[1];
    uint64_t v22 = v2[2];
    uint64_t v23 = v20 + 4;
    uint64_t v24 = v20[2];
    Swift::UInt v285 = v10;
    if (v21)
    {
      unint64_t v25 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v10, (uint64_t)v23, v24, (void *)(v21 + 16), v21 + 32);
      if (v26) {
        goto LABEL_62;
      }
      if ((v25 & 0x8000000000000000) != 0) {
        goto LABEL_320;
      }
    }
    else
    {
      if (!v24) {
        goto LABEL_62;
      }
      if (*v23 == v10)
      {
        unint64_t v25 = 0;
      }
      else
      {
        if (v24 == 1) {
          goto LABEL_62;
        }
        if (v20[5] == v10)
        {
          unint64_t v25 = 1;
        }
        else
        {
          if (v24 == 2)
          {
LABEL_62:
            outlined copy of NodePersonality(v287);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_63;
          }
          if (v20[6] == v10)
          {
            unint64_t v25 = 2;
          }
          else
          {
            uint64_t v263 = 0;
            uint64_t v264 = v20 + 7;
            do
            {
              if (v24 - 3 == v263) {
                goto LABEL_62;
              }
              uint64_t v265 = v264[v263++];
            }
            while (v265 != v10);
            unint64_t v25 = v263 + 2;
            if (v263 + 2 < 0) {
              goto LABEL_320;
            }
          }
        }
      }
    }
    if (v25 >= *(void *)(v22 + 16)) {
      goto LABEL_321;
    }
    long long v27 = (void *)(v22 + 48 * v25);
    uint64_t v28 = v27[4];
    uint64_t v29 = v27[5];
    unint64_t v30 = (void (*)(void *, void))v27[7];
    uint64_t v32 = v27[8];
    uint64_t v31 = v27[9];
    outlined copy of NodePersonality(v287);
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined consume of Graph.Adjacent?(v28, v29);
    uint64_t v33 = *(void *)(v31 + 16);
    if (!v33) {
      goto LABEL_60;
    }
    uint64_t v310 = &v269;
    unint64_t v311 = v30;
    Swift::UInt v34 = *(void *)(v32 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v35 = 0;
    uint64_t v320 = v32;
    uint64_t v316 = v31;
    do
    {
      if (!v34) {
        goto LABEL_309;
      }
      Swift::UInt v324 = v34;
      long long v37 = *(_OWORD *)&v35[v32 + 48];
      long long v340 = *(_OWORD *)&v35[v32 + 32];
      v341[0] = v37;
      v341[1] = *(_OWORD *)&v35[v32 + 64];
      uint64_t v342 = *(void *)&v35[v32 + 80];
      Swift::UInt v38 = *(void *)&v35[v32 + 40];
      uint64_t v39 = *(void *)&v35[v32 + 56];
      v346[0] = *v299;
      char v40 = &v35[v31];
      uint64_t v42 = *(void *)&v35[v31 + 32];
      uint64_t v41 = *(void *)&v35[v31 + 40];
      uint64_t v43 = *(void *)&v35[v31 + 48];
      uint64_t v44 = *(void *)&v35[v31 + 56];
      uint64_t v46 = *(void *)&v35[v31 + 64];
      Swift::UInt v45 = *((void *)v40 + 9);
      uint64_t v47 = *((void *)v40 + 10);
      Swift::UInt v326 = v42;
      Swift::UInt v327 = v45;
      uint64_t v325 = v43;
      uint64_t v323 = v46;
      uint64_t v321 = v35;
      uint64_t v322 = v47;
      if (!v41)
      {
        swift_retain();
        outlined retain of String((uint64_t)v346);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v36 = 0;
        uint64_t v32 = v320;
        uint64_t v31 = v316;
        goto LABEL_22;
      }
      uint64_t v318 = v39;
      Swift::UInt v319 = v38;
      uint64_t v317 = v33;
      v343[0] = v42;
      v343[1] = v41;
      v343[2] = v43;
      _OWORD v343[3] = v44;
      v343[4] = v46;
      char v344 = v45 & 1;
      uint64_t v345 = v47;
      swift_retain();
      outlined retain of String((uint64_t)v346);
      swift_retain();
      swift_bridgeObjectRetain();
      outlined copy of Output?(v42, v41);
      uint64_t v48 = (char *)specialized OrderedDictionary.subscript.modify(v329, v42);
      if (!*(void *)(v49 + 8))
      {
        ((void (*)(void *, void))v48)(v329, 0);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v31 = v316;
        uint64_t v33 = v317;
        uint64_t v32 = v320;
        uint64_t v36 = v41;
        goto LABEL_22;
      }
      swift_retain();
      swift_retain();
      swift_release();
      swift_release();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v50 = (void (*)(void *, void))specialized OrderedDictionary.subscript.modify(v328, v343);
      long long v315 = v51;
      char v52 = v51 + 1;
      uint64_t v32 = v320;
      uint64_t v36 = v41;
      if (!v51[1])
      {
        v50(v328, 0);
        swift_bridgeObjectRelease();
        swift_release();
        ((void (*)(void *, void))v48)(v329, 0);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v31 = v316;
        uint64_t v33 = v317;
        goto LABEL_22;
      }
      unint64_t v314 = v50;
      swift_retain();
      outlined retain of String((uint64_t)v346);
      uint64_t v53 = v292;
      uint64_t v54 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(v52, &v340);
      if (v53) {
        goto LABEL_335;
      }
      uint64_t v55 = v54;
      uint64_t v56 = *v52;
      int64_t v57 = *(void *)(*v52 + 16);
      int64_t v58 = v57 - v54;
      if (v57 < v54) {
        goto LABEL_312;
      }
      if (v54 < 0) {
        goto LABEL_313;
      }
      uint64_t v59 = v54;
      if (__OFADD__(v57, v54 - v57)) {
        goto LABEL_314;
      }
      uint64_t v312 = v54 - v57;
      uint64_t v313 = v48;
      uint64_t v292 = 0;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *char v52 = v56;
      if (!isUniquelyReferenced_nonNull_native || v59 > *(void *)(v56 + 24) >> 1)
      {
        if (v57 <= v59) {
          int64_t v61 = v57 - v58;
        }
        else {
          int64_t v61 = v57;
        }
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v61, 1);
        uint64_t v56 = *v52;
      }
      swift_arrayDestroy();
      uint64_t v31 = v316;
      if (v57 != v55)
      {
        uint64_t v62 = *(void *)(v56 + 16) - v57;
        if (v62 < 0) {
          goto LABEL_334;
        }
        memmove((void *)(v56 + 32 + 56 * v55), (const void *)(v56 + 32 + 56 * v57), 56 * v62);
        uint64_t v63 = *(void *)(v56 + 16);
        BOOL v64 = __OFADD__(v63, v312);
        uint64_t v65 = v63 + v312;
        if (v64) {
          goto LABEL_315;
        }
        *(void *)(v56 + 16) = v65;
      }
      uint64_t v66 = v315;
      v315[1] = v56;
      uint64_t v67 = *v66;
      if (*v66)
      {
        swift_beginAccess();
        uint64_t v68 = *(void *)(v67 + 24) & 0x3FLL;
        unint64_t v69 = *(void *)(v56 + 16);
        int64_t v2 = v309;
        uint64_t v32 = v320;
        if (v69 > 0xF) {
          goto LABEL_48;
        }
        int64_t v70 = *(void *)(v67 + 24) & 0x3FLL;
        if (v68) {
          goto LABEL_57;
        }
        uint64_t v71 = 0;
      }
      else
      {
        uint64_t v68 = 0;
        uint64_t v71 = 0;
        unint64_t v69 = *(void *)(v56 + 16);
        int64_t v2 = v309;
        uint64_t v32 = v320;
        if (v69 > 0xF)
        {
LABEL_48:
          double v72 = ceil((double)(uint64_t)v69 / 0.75);
          if ((~*(void *)&v72 & 0x7FF0000000000000) == 0) {
            goto LABEL_316;
          }
          if (v72 <= -9.22337204e18) {
            goto LABEL_317;
          }
          if (v72 >= 9.22337204e18) {
            goto LABEL_318;
          }
          if ((uint64_t)(v69 + 1) > (uint64_t)v72) {
            uint64_t v73 = v69 + 1;
          }
          else {
            uint64_t v73 = (uint64_t)v72;
          }
          int64_t v74 = 64 - __clz(v73 - 1);
          if (v68 <= v74) {
            int64_t v70 = v74;
          }
          else {
            int64_t v70 = v68;
          }
LABEL_57:
          uint64_t v71 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v56, v70, 0, v68);
        }
      }
      swift_release();
      char v75 = v314;
      *long long v315 = v71;
      v75(v328, 0);
      swift_bridgeObjectRelease();
      swift_release();
      ((void (*)(void *, void))v313)(v329, 0);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v33 = v317;
LABEL_22:
      outlined consume of Input?(v326, v36);
      Swift::UInt v34 = v324 - 1;
      uint64_t v35 = v321 + 56;
      --v33;
    }
    while (v33);
    swift_release();
    swift_release();
    swift_release();
LABEL_60:
    swift_release();
    swift_release();
    swift_release();
LABEL_63:
    uint64_t v76 = (void *)v2[1];
    uint64_t v77 = v2[2];
    uint64_t v78 = v76 + 4;
    uint64_t v79 = v76[2];
    if (*v2)
    {
      unint64_t v80 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v285, (uint64_t)v78, v79, (void *)(*v2 + 16), *v2 + 32);
      if ((v81 & 1) == 0)
      {
        if ((v80 & 0x8000000000000000) != 0) {
          goto LABEL_322;
        }
        goto LABEL_70;
      }
LABEL_254:
      uint64_t v249 = (void *)v2[8];
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        Swift::UInt v250 = v285;
        if ((v285 & 0x8000000000000000) == 0) {
          goto LABEL_256;
        }
LABEL_298:
        __break(1u);
LABEL_299:
        swift_bridgeObjectRelease();
        return;
      }
      uint64_t v249 = specialized _ArrayBuffer._consumeAndCreateNew()(v249);
      Swift::UInt v250 = v285;
      if ((v285 & 0x8000000000000000) != 0) {
        goto LABEL_298;
      }
LABEL_256:
      if (v250 >= v249[2])
      {
LABEL_319:
        __break(1u);
LABEL_320:
        __break(1u);
LABEL_321:
        __break(1u);
        goto LABEL_322;
      }
      long long v251 = &v249[6 * v250];
      long long v252 = v251 + 4;
      v251[7] = -7;
      uint64_t v253 = *(void *)(v251[5] + 16);
      if (v253)
      {
        swift_bridgeObjectRetain();
        uint64_t v254 = 0;
        unint64_t v255 = 0;
        while (1)
        {
          uint64_t v256 = (void *)v252[1];
          swift_retain();
          swift_bridgeObjectRetain();
          char v257 = swift_isUniquelyReferenced_nonNull_native();
          v252[1] = v256;
          if ((v257 & 1) == 0)
          {
            uint64_t v256 = specialized _ArrayBuffer._consumeAndCreateNew()(v256);
            v252[1] = v256;
          }
          if (v255 >= v256[2]) {
            goto LABEL_305;
          }
          ++v255;
          v256[v254 + 4] = -7;
          swift_bridgeObjectRelease();
          swift_release();
          v254 += 7;
          if (v253 == v255)
          {
            swift_bridgeObjectRelease();
            break;
          }
        }
      }
      uint64_t v258 = *(void *)(v252[2] + 16);
      if (v258)
      {
        swift_bridgeObjectRetain();
        uint64_t v259 = 0;
        unint64_t v260 = 0;
        while (1)
        {
          uint64_t v261 = (void *)v252[2];
          swift_retain();
          swift_bridgeObjectRetain();
          char v262 = swift_isUniquelyReferenced_nonNull_native();
          v252[2] = v261;
          if ((v262 & 1) == 0)
          {
            uint64_t v261 = specialized _ArrayBuffer._consumeAndCreateNew()(v261);
            v252[2] = v261;
          }
          if (v260 >= v261[2]) {
            goto LABEL_306;
          }
          ++v260;
          v261[v259 + 4] = -7;
          swift_bridgeObjectRelease();
          swift_release();
          v259 += 7;
          if (v258 == v260)
          {
            swift_bridgeObjectRelease();
            break;
          }
        }
      }
      outlined consume of NodePersonality(v287);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v2 = v309;
      v309[8] = v249;
      uint64_t v4 = v282;
LABEL_272:
      unint64_t v7 = v283;
      unint64_t v8 = v284;
LABEL_273:
      if ((uint64_t)++v8 >= (uint64_t)v7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        return;
      }
      if (v8 >= v7)
      {
LABEL_311:
        __break(1u);
LABEL_312:
        __break(1u);
LABEL_313:
        __break(1u);
LABEL_314:
        __break(1u);
LABEL_315:
        __break(1u);
LABEL_316:
        __break(1u);
LABEL_317:
        __break(1u);
LABEL_318:
        __break(1u);
        goto LABEL_319;
      }
      continue;
    }
    break;
  }
  if (!v79) {
    goto LABEL_254;
  }
  if (*v78 == v285)
  {
    unint64_t v80 = 0;
    goto LABEL_70;
  }
  if (v79 == 1) {
    goto LABEL_254;
  }
  if (v76[5] == v285)
  {
    unint64_t v80 = 1;
    goto LABEL_70;
  }
  if (v79 == 2) {
    goto LABEL_254;
  }
  if (v76[6] == v285)
  {
    unint64_t v80 = 2;
    goto LABEL_70;
  }
  uint64_t v266 = 0;
  uint64_t v267 = v76 + 7;
  do
  {
    if (v79 - 3 == v266) {
      goto LABEL_254;
    }
    uint64_t v268 = v267[v266++];
  }
  while (v268 != v285);
  unint64_t v80 = v266 + 2;
  if (v266 + 2 < 0)
  {
LABEL_322:
    __break(1u);
LABEL_323:
    __break(1u);
LABEL_324:
    __break(1u);
LABEL_325:
    __break(1u);
LABEL_326:
    __break(1u);
    goto LABEL_327;
  }
LABEL_70:
  if (v80 >= *(void *)(v77 + 16)) {
    goto LABEL_323;
  }
  uint64_t v82 = (void *)(v77 + 48 * v80);
  uint64_t v84 = v82[4];
  uint64_t v83 = v82[5];
  uint64_t v85 = v82[6];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  outlined consume of Graph.Adjacent?(v84, v83);
  uint64_t v280 = &v269;
  uint64_t v296 = *(void *)(v85 + 16);
  if (!v296)
  {
LABEL_253:
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_254;
  }
  uint64_t v293 = v85 + 32;
  uint64_t v294 = v83 + 32;
  uint64_t v295 = *(void *)(v83 + 16);
  uint64_t v276 = v84;
  swift_retain();
  uint64_t v277 = v83;
  swift_retain();
  uint64_t v275 = v85;
  swift_retain();
  uint64_t v86 = 0;
  while (2)
  {
    if (v86 == v295) {
      goto LABEL_310;
    }
    uint64_t v88 = v294 + 56 * v86;
    uint64_t v89 = *(void *)(v88 + 8);
    uint64_t v90 = *(void *)(v88 + 24);
    uint64_t v302 = v86;
    uint64_t v91 = (uint64_t *)(v293 + 16 * v86);
    uint64_t v92 = *v91;
    uint64_t v93 = v91[1];
    uint64_t v94 = *(char **)(v93 + 16);
    if (!v94)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
LABEL_74:
      uint64_t v87 = v302 + 1;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v86 = v87;
      if (v87 == v296)
      {
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_253;
      }
      continue;
    }
    break;
  }
  uint64_t v95 = *(void *)v88;
  uint64_t v306 = v89;
  uint64_t v307 = v95;
  uint64_t v96 = *(void *)(v88 + 16);
  uint64_t v301 = *(void *)(v88 + 32);
  uint64_t v97 = *(unsigned __int8 *)(v88 + 40);
  long long v315 = (uint64_t *)(v93 + 32);
  uint64_t v303 = *(void *)(v88 + 48);
  uint64_t v304 = v96;
  swift_retain_n();
  uint64_t v305 = v90;
  swift_bridgeObjectRetain_n();
  uint64_t v298 = v92;
  swift_retain_n();
  uint64_t v297 = v93;
  swift_retain_n();
  uint64_t v98 = 0;
  uint64_t v300 = v97;
  int v291 = v97 ^ 1;
  uint64_t v310 = v94;
  while (2)
  {
    long long v99 = (Swift::UInt *)&v315[7 * v98];
    Swift::UInt i = *v99;
    Swift::UInt v100 = v99[1];
    Swift::UInt v102 = v99[2];
    uint64_t v103 = (void (*)(void *, void))v99[3];
    Swift::UInt v104 = v99[4];
    int v105 = *((unsigned __int8 *)v99 + 40);
    uint64_t v106 = (char *)v99[6];
    v337[0] = i;
    Swift::UInt v326 = i;
    Swift::UInt v327 = v100;
    v337[1] = v100;
    Swift::UInt v324 = v102;
    _OWORD v337[2] = v102;
    v337[3] = v103;
    Swift::UInt v319 = v104;
    v337[4] = v104;
    LODWORD(v320) = v105;
    char v338 = v105;
    uint64_t v321 = v106;
    uint64_t v339 = v106;
    uint64_t v108 = *v2;
    long long v107 = (void *)v2[1];
    uint64_t v109 = v2[2];
    long long v110 = v107 + 4;
    if (!*v2)
    {
      uint64_t v132 = v107[2];
      if (v132)
      {
        uint64_t v323 = v98;
        if (*v110 == i)
        {
          unint64_t v133 = 0;
        }
        else
        {
          if (v132 == 1) {
            goto LABEL_80;
          }
          if (v107[5] == i)
          {
            unint64_t v133 = 1;
          }
          else
          {
            if (v132 == 2) {
              goto LABEL_80;
            }
            if (v107[6] == i)
            {
              unint64_t v133 = 2;
            }
            else
            {
              uint64_t v209 = 0;
              uint64_t v210 = v132 - 3;
              uint64_t v211 = v107 + 7;
              do
              {
                if (v210 == v209) {
                  goto LABEL_80;
                }
                uint64_t v212 = v211[v209++];
              }
              while (v212 != i);
              unint64_t v133 = v209 + 2;
              if (v209 + 2 < 0) {
                goto LABEL_302;
              }
            }
          }
        }
        goto LABEL_117;
      }
LABEL_81:
      if ((char *)++v98 == v94)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_74;
      }
      continue;
    }
    break;
  }
  uint64_t v323 = v98;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(i);
  Swift::Int v111 = Hasher._finalize()();
  uint64_t v112 = *(void *)(v108 + 16);
  unint64_t v113 = (1 << v112) - 1;
  if (__OFSUB__(1 << v112, 1))
  {
    __break(1u);
LABEL_302:
    __break(1u);
LABEL_303:
    __break(1u);
LABEL_304:
    __break(1u);
LABEL_305:
    __break(1u);
LABEL_306:
    __break(1u);
    goto LABEL_307;
  }
  uint64_t v114 = v108 + 32;
  uint64_t v115 = *(void *)(v108 + 16) & 0x3FLL;
  unint64_t v116 = v113 & v111;
  uint64_t v117 = (v113 & v111) * v115;
  uint64_t v118 = v117 >> 6;
  uint64_t v119 = v117 & 0x3F;
  uint64_t v120 = v119 + v115;
  if ((unint64_t)(v119 + v115) < 0x41)
  {
    unint64_t v134 = *(void *)(v114 + 8 * v118);
    unint64_t v129 = (v134 >> v119) & v113;
    BOOL v135 = v118 == 2 && v115 == 5;
    uint64_t v136 = 64;
    if (v135) {
      uint64_t v136 = 32;
    }
    uint64_t v131 = v136 - v120;
    unint64_t v130 = v134 >> v120;
    if (!v131) {
      unint64_t v130 = 0;
    }
  }
  else
  {
    if (__OFADD__(v115 << v115, 64)) {
      goto LABEL_304;
    }
    unint64_t v121 = *(void *)(v114 + 8 * v118);
    uint64_t v122 = (v115 << v115) + 126;
    if ((v115 << v115) + 64 >= 1) {
      uint64_t v122 = (v115 << v115) + 63;
    }
    uint64_t v123 = v122 >> 6;
    if (v118 + 1 == v123) {
      uint64_t v124 = 0;
    }
    else {
      uint64_t v124 = v118 + 1;
    }
    unint64_t v125 = *(void *)(v114 + 8 * v124);
    uint64_t v126 = v115 - (64 - v119);
    BOOL v127 = v124 == v123 - 1 && v115 == 5;
    uint64_t v128 = 32;
    if (!v127) {
      uint64_t v128 = 64;
    }
    unint64_t v129 = ((v125 << (64 - v119)) | (v121 >> v119)) & v113;
    unint64_t v130 = v125 >> v126;
    uint64_t v131 = v128 - v126;
  }
  v329[0] = v108 + 16;
  v329[1] = v108 + 32;
  v329[2] = v116;
  unint64_t v330 = v129;
  unint64_t v331 = v130;
  uint64_t v332 = v131;
  char v333 = 0;
  if (!v129)
  {
LABEL_80:
    uint64_t v98 = v323;
    goto LABEL_81;
  }
  unint64_t v137 = (v129 ^ v113) + (*(uint64_t *)(v108 + 24) >> 6);
  if (v137 < v113) {
    unint64_t v113 = 0;
  }
  unint64_t v133 = v137 - v113;
  for (Swift::UInt i = v326; v110[v133] != i; v133 = v139 - v140)
  {
    _HashTable.BucketIterator.advance()();
    if (!v330) {
      goto LABEL_80;
    }
    uint64_t v138 = -1 << *(void *)v329[0];
    unint64_t v139 = (v138 ^ ~v330) + (*(uint64_t *)(v329[0] + 8) >> 6);
    if (v139 >= ~v138) {
      uint64_t v140 = ~v138;
    }
    else {
      uint64_t v140 = 0;
    }
  }
  if ((v133 & 0x8000000000000000) != 0) {
    goto LABEL_302;
  }
LABEL_117:
  if (v133 >= *(void *)(v109 + 16)) {
    goto LABEL_303;
  }
  unint64_t v314 = v103;
  int v141 = (void *)(v109 + 48 * v133);
  long long v143 = (char *)v141[4];
  uint64_t v142 = v141[5];
  uint64_t v144 = v141[7];
  uint64_t v145 = v141[8];
  uint64_t v146 = v141[9];
  uint64_t v147 = *(void *)(v145 + 16);
  uint64_t v312 = v141[6];
  uint64_t v313 = v143;
  uint64_t v316 = v145;
  uint64_t v317 = v142;
  unint64_t v311 = (void (*)(void *, void))v144;
  uint64_t v318 = v146;
  if (v144)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v148 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v337, v145 + 32, v147, (void *)(v144 + 16), v144 + 32);
    char v150 = v149;
    swift_release();
    if ((v150 & 1) == 0)
    {
      uint64_t v151 = v307;
      if ((v148 & 0x8000000000000000) == 0) {
        goto LABEL_121;
      }
LABEL_307:
      __break(1u);
LABEL_308:
      __break(1u);
LABEL_309:
      __break(1u);
LABEL_310:
      __break(1u);
      goto LABEL_311;
    }
LABEL_79:
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Graph.Adjacent?((uint64_t)v313, v317);
    swift_bridgeObjectRelease();
    swift_release();
    int64_t v2 = v309;
    uint64_t v94 = v310;
    goto LABEL_80;
  }
  if (!v147)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    goto LABEL_79;
  }
  LODWORD(v308) = v320 ^ 1;
  swift_retain_n();
  long long v173 = (void (*)(void, void))v314;
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v174 = v316;
  swift_retain();
  swift_retain();
  unint64_t v148 = 0;
  long long v175 = (void *)(v174 + 80);
  while (2)
  {
    if (*(v175 - 6) != i) {
      goto LABEL_131;
    }
    uint64_t v176 = v147;
    uint64_t v177 = v173;
    uint64_t v178 = *(v175 - 5);
    uint64_t v179 = *(v175 - 4);
    uint64_t v180 = (void (*)(void, void))*(v175 - 3);
    uint64_t v322 = *(v175 - 2);
    char v181 = *((unsigned char *)v175 - 8);
    uint64_t v325 = *v175;
    uint64_t v182 = *(uint64_t (**)(Swift::UInt))(*(void *)v178 + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((v182(v327) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      long long v173 = v177;
      Swift::UInt i = v326;
      uint64_t v147 = v176;
      goto LABEL_131;
    }
    long long v173 = v177;
    if (v179 == v324 && v180 == v177)
    {
      swift_bridgeObjectRelease();
      swift_release();
      Swift::UInt i = v326;
      uint64_t v147 = v176;
      if (v181) {
        goto LABEL_140;
      }
      goto LABEL_145;
    }
    char v184 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_release();
    Swift::UInt i = v326;
    uint64_t v147 = v176;
    if ((v184 & 1) == 0) {
      goto LABEL_131;
    }
    if (v181)
    {
LABEL_140:
      char v185 = v320;
      if ((char *)v325 != v321) {
        char v185 = 0;
      }
      if (v185) {
        break;
      }
      goto LABEL_131;
    }
LABEL_145:
    int v186 = (int)v308;
    if (v322 != v319) {
      int v186 = 0;
    }
    if (v186 != 1 || (char *)v325 != v321)
    {
LABEL_131:
      v175 += 7;
      if (v147 == ++v148) {
        goto LABEL_79;
      }
      continue;
    }
    break;
  }
  uint64_t v151 = v307;
LABEL_121:
  if (v148 >= *(void *)(v318 + 16)) {
    goto LABEL_308;
  }
  long long v152 = (void *)(v318 + 56 * v148);
  uint64_t v154 = v152[4];
  uint64_t v153 = v152[5];
  uint64_t v156 = v152[6];
  uint64_t v155 = v152[7];
  uint64_t v158 = v152[8];
  uint64_t v157 = v152[9];
  uint64_t v159 = v152[10];
  outlined copy of Output?(v154, v153);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of Graph.Adjacent?((uint64_t)v313, v317);
  if (!v153)
  {
    uint64_t v187 = v306;
    swift_retain();
    swift_bridgeObjectRetain();
    outlined consume of Input?(v154, 0);
    outlined consume of Input?(v151, v187);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v98 = v323;
    int64_t v2 = v309;
    uint64_t v94 = v310;
    goto LABEL_81;
  }
  uint64_t v160 = v153;
  uint64_t v161 = v159;
  uint64_t v322 = v156;
  uint64_t v325 = v155;
  uint64_t v162 = v154;
  if (v154 != v151)
  {
    uint64_t v94 = v310;
    int64_t v2 = v309;
    goto LABEL_159;
  }
  uint64_t v317 = v154;
  uint64_t v318 = *(void *)(*(void *)v153 + 128);
  uint64_t v163 = v151;
  uint64_t v164 = v158;
  uint64_t v165 = v306;
  uint64_t v166 = v160;
  swift_retain();
  uint64_t v167 = v305;
  swift_bridgeObjectRetain();
  uint64_t v168 = v322;
  uint64_t v169 = v325;
  outlined copy of Output?(v163, v166);
  if ((((uint64_t (*)(uint64_t))v318)(v165) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Input?(v307, v166);
    int64_t v2 = v309;
    uint64_t v94 = v310;
    uint64_t v160 = v166;
    uint64_t v162 = v317;
    goto LABEL_159;
  }
  uint64_t v317 = v157;
  uint64_t v318 = v166;
  uint64_t v316 = v164;
  if (v168 == v304 && v169 == v167)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v170 = v307;
    char v171 = v317;
    uint64_t v172 = v316;
    outlined consume of Input?(v307, v318);
    goto LABEL_163;
  }
  char v188 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v170 = v307;
  char v171 = v317;
  uint64_t v172 = v316;
  outlined consume of Input?(v307, v318);
  if ((v188 & 1) == 0)
  {
    outlined consume of Input?(v170, v318);
    swift_bridgeObjectRelease();
    swift_release();
    int64_t v2 = v309;
    uint64_t v94 = v310;
LABEL_161:
    uint64_t v98 = v323;
    goto LABEL_81;
  }
LABEL_163:
  int64_t v2 = v309;
  uint64_t v94 = v310;
  if (v171)
  {
    uint64_t v162 = v170;
    Swift::UInt v190 = v327;
    uint64_t v160 = v318;
    if (!v300) {
      goto LABEL_159;
    }
  }
  else
  {
    int v189 = v291;
    if (v172 != v301) {
      int v189 = 0;
    }
    uint64_t v162 = v170;
    Swift::UInt v190 = v327;
    uint64_t v160 = v318;
    if (v189 != 1)
    {
LABEL_159:
      outlined consume of Input?(v162, v160);
      swift_bridgeObjectRelease();
      goto LABEL_160;
    }
  }
  uint64_t v162 = v170;
  if (v161 != v303) {
    goto LABEL_159;
  }
  long long v191 = (void (*)(void *, void))specialized OrderedDictionary.subscript.modify(v329, v326);
  if (!v192[1])
  {
    v191(v329, 0);
    uint64_t v162 = v170;
    uint64_t v160 = v318;
    goto LABEL_159;
  }
  uint64_t v193 = v192[3];
  unint64_t v281 = v192 + 3;
  uint64_t v194 = v192[4];
  uint64_t v195 = *(void *)(v194 + 16);
  Swift::UInt v196 = v190;
  unint64_t v311 = v191;
  if (v193)
  {
    uint64_t v279 = v192 + 4;
    uint64_t v308 = v192;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    Swift::Int v197 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v337, v194 + 32, v195, (void *)(v193 + 16), v193 + 32);
    char v199 = v198;
    uint64_t v201 = v200;
    swift_release();
    swift_release();
    if ((v199 & 1) == 0)
    {
      unint64_t v202 = v197;
      goto LABEL_174;
    }
    swift_bridgeObjectRelease();
    swift_release();
LABEL_249:
    uint64_t v94 = v310;
    goto LABEL_250;
  }
  uint64_t v274 = v194;
  if (!v195)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
LABEL_210:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    int64_t v2 = v309;
    uint64_t v94 = v310;
LABEL_250:
    v311(v329, 0);
    outlined consume of Input?(v307, v318);
    swift_bridgeObjectRelease();
LABEL_160:
    swift_release();
    goto LABEL_161;
  }
  uint64_t v279 = v192 + 4;
  uint64_t v308 = v192;
  int v278 = v320 ^ 1;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v202 = 0;
  uint64_t v213 = (void *)(v194 + 80);
  while (1)
  {
    if (*(v213 - 6) != v326) {
      goto LABEL_189;
    }
    uint64_t v214 = v195;
    unint64_t v215 = v202;
    uint64_t v216 = *(v213 - 5);
    uint64_t v217 = *(v213 - 4);
    long long v218 = (void (*)(void *, void))*(v213 - 3);
    char v219 = *((unsigned char *)v213 - 8);
    long long v220 = (char *)*v213;
    uint64_t v312 = *(v213 - 2);
    uint64_t v313 = v220;
    unint64_t v221 = *(uint64_t (**)(Swift::UInt))(*(void *)v216 + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((v221(v196) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      Swift::UInt v196 = v327;
      unint64_t v202 = v215;
      uint64_t v195 = v214;
      goto LABEL_189;
    }
    if (v217 != v324 || v218 != v314)
    {
      char v223 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_release();
      Swift::UInt v196 = v327;
      unint64_t v202 = v215;
      uint64_t v195 = v214;
      if ((v223 & 1) == 0) {
        goto LABEL_189;
      }
      if ((v219 & 1) == 0) {
        break;
      }
      goto LABEL_198;
    }
    swift_bridgeObjectRelease();
    swift_release();
    Swift::UInt v196 = v327;
    unint64_t v202 = v215;
    uint64_t v195 = v214;
    if ((v219 & 1) == 0) {
      break;
    }
LABEL_198:
    int v224 = v320;
    if (v313 != v321) {
      int v224 = 0;
    }
    if (v224 == 1) {
      goto LABEL_207;
    }
LABEL_189:
    v213 += 7;
    if (v195 == ++v202) {
      goto LABEL_210;
    }
  }
  int v225 = v278;
  if (v312 != v319) {
    int v225 = 0;
  }
  if (v225 != 1 || v313 != v321) {
    goto LABEL_189;
  }
LABEL_207:
  swift_release();
  uint64_t v201 = 0;
LABEL_174:
  uint64_t v203 = v279;
  uint64_t v204 = *v279;
  uint64_t v205 = *(void *)(*v279 + 16);
  uint64_t v206 = v281;
  uint64_t v207 = (void *)*v281;
  if (!*v281)
  {
    if (!v205) {
      goto LABEL_228;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v204 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v204);
    }
    unint64_t v226 = *(void *)(v204 + 16);
    if (v202 < v226)
    {
      unint64_t v227 = v226 - 1;
      uint64_t v228 = v226 - 1 - v202;
      if (v228 >= 0)
      {
        memmove((void *)(v204 + 56 * v202 + 32), (const void *)(v204 + 56 * v202 + 88), 56 * v228);
        *(void *)(v204 + 16) = v227;
        uint64_t *v203 = v204;
        swift_bridgeObjectRelease();
        goto LABEL_243;
      }
      goto LABEL_334;
    }
LABEL_328:
    __break(1u);
    goto LABEL_329;
  }
  swift_beginAccess();
  unint64_t v208 = v207[2] & 0x3FLL;
  if (v208 != (v207[3] & 0x3FLL) && v208 >= 5)
  {
    double v229 = (double)(1 << v208) * 0.25;
    if ((~*(void *)&v229 & 0x7FF0000000000000) == 0)
    {
LABEL_329:
      __break(1u);
      goto LABEL_330;
    }
    if (v229 <= -9.22337204e18)
    {
LABEL_330:
      __break(1u);
      goto LABEL_331;
    }
    if (v229 >= 9.22337204e18)
    {
LABEL_331:
      __break(1u);
      goto LABEL_332;
    }
    if (v205 <= (uint64_t)v229) {
      goto LABEL_228;
    }
    goto LABEL_221;
  }
  if (v205)
  {
LABEL_221:
    char isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
    uint64_t v231 = *v206;
    if ((isUniquelyReferenced_native & 1) == 0)
    {
      if (!v231)
      {
LABEL_333:
        __break(1u);
        goto LABEL_334;
      }
      uint64_t v231 = _HashTable.copy()((void *)*v206);
      swift_release();
      *uint64_t v206 = v231;
    }
    if (!v231)
    {
LABEL_332:
      __break(1u);
      goto LABEL_333;
    }
    swift_retain();
    specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v201, v231 + 16, v231 + 32, v206);
    if (__OFADD__(v202, 1)) {
      goto LABEL_326;
    }
    if ((uint64_t)(v202 + 1) >= (uint64_t)v202)
    {
      uint64_t v232 = *v203;
      swift_retain();
      specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(v202, v202 + 1, v232, (void *)(v231 + 16), v231 + 32);
      swift_release();
      swift_release();
      specialized ContiguousArray.remove(at:)(v202, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t)v334);
      long long v336 = *v272;
      swift_release();
      outlined release of String((uint64_t)&v336);
      goto LABEL_244;
    }
LABEL_327:
    __break(1u);
    goto LABEL_328;
  }
LABEL_228:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v204 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v204);
  }
  unint64_t v233 = *(void *)(v204 + 16);
  if (v202 >= v233) {
    goto LABEL_325;
  }
  unint64_t v234 = v233 - 1;
  uint64_t v235 = v233 - 1 - v202;
  if (v235 < 0) {
    goto LABEL_334;
  }
  memmove((void *)(v204 + 32 + 56 * v202), (const void *)(v204 + 32 + 56 * v202 + 56), 56 * v235);
  *(void *)(v204 + 16) = v234;
  uint64_t *v203 = v204;
  uint64_t v236 = *v206;
  if (*v206)
  {
    swift_beginAccess();
    uint64_t v237 = *(void *)(v236 + 24) & 0x3FLL;
    unint64_t v238 = *(void *)(v204 + 16);
    if (v237)
    {
LABEL_238:
      int64_t v239 = specialized static _HashTable.scale(forCapacity:)(v238);
      if (v237 <= v239) {
        int64_t v240 = v239;
      }
      else {
        int64_t v240 = v237;
      }
      uint64_t v241 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v204, v240, 0, v237);
      swift_release();
      *uint64_t v206 = v241;
      goto LABEL_242;
    }
  }
  else
  {
    uint64_t v237 = 0;
    unint64_t v238 = *(void *)(v204 + 16);
  }
  if (v238 >= 0x10) {
    goto LABEL_238;
  }
  swift_release();
  *uint64_t v206 = 0;
LABEL_242:
  swift_bridgeObjectRelease();
LABEL_243:
  swift_release();
LABEL_244:
  uint64_t v242 = (void *)v308[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v242 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v242);
  }
  unint64_t v243 = v242[2];
  if (v202 >= v243) {
    goto LABEL_324;
  }
  unint64_t v244 = v243 - 1;
  uint64_t v245 = v243 - 1 - v202;
  if (v245 >= 0)
  {
    long long v246 = &v242[7 * v202];
    uint64_t v247 = v246[4];
    v246 += 4;
    uint64_t v248 = v246[1];
    memmove(v246, v246 + 7, 56 * v245);
    v242[2] = v244;
    v308[5] = v242;
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Input?(v247, v248);
    int64_t v2 = v309;
    goto LABEL_249;
  }
LABEL_334:
  int v271 = 0;
  uint64_t v270 = 1046;
  char v269 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_335:
  specialized OrderedSet._regenerateHashTable()();
  __break(1u);
}

uint64_t Graph.nodes.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = (2 * *(void *)(v2 + 16)) | 1;
  *a1 = 0;
  a1[1] = v2;
  a1[2] = v2 + 32;
  a1[3] = 0;
  a1[4] = v3;
  a1[5] = closure #1 in Graph.nodes.getter;
  a1[6] = 0;
  return swift_bridgeObjectRetain();
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result, long long *a2)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v5 = result;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; ; i += 112)
    {
      uint64_t v7 = *(void *)(v5 + i + 136);
      char v8 = *(unsigned char *)(v5 + i + 128);
      uint64_t v10 = *(void *)(v5 + i + 112);
      uint64_t v9 = *(void *)(v5 + i + 120);
      uint64_t v12 = *(void *)(v5 + i + 96);
      uint64_t v11 = *(void *)(v5 + i + 104);
      char v13 = *(unsigned char *)(v5 + i + 72);
      unint64_t v15 = *(void *)(v5 + i + 56);
      unint64_t v14 = *(void *)(v5 + i + 64);
      unint64_t v17 = *(void *)(v5 + i + 40);
      unint64_t v16 = *(void *)(v5 + i + 48);
      v18[0] = *(void *)(v5 + i + 32);
      v18[1] = v17;
      v18[2] = v16;
      _OWORD v18[3] = v15;
      v18[4] = v14;
      char v19 = v13;
      long long v20 = *(_OWORD *)(v5 + i + 80);
      uint64_t v21 = v12;
      uint64_t v22 = v11;
      uint64_t v23 = v10;
      uint64_t v24 = v9;
      char v25 = v8;
      uint64_t v26 = v7;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      closure #3 in Graph.prune(_:)(v18, a2);
      if (v2) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      if (!--v3) {
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

unint64_t Graph.connectedUpstreamSubgraph(rootedAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode>);
  uint64_t inited = (_OWORD *)swift_initStackObject();
  inited[1] = xmmword_25C418EE0;
  outlined init with take of NodePersonality((void *)a1, &v118);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v116 = *(void *)(a1 + 16);
  uint64_t v117 = v5;
  long long v6 = *(_OWORD *)(a1 + 25);
  long long v7 = *(_OWORD *)(a1 + 16);
  unint64_t v69 = (_OWORD *)a1;
  inited[2] = *(_OWORD *)a1;
  inited[3] = v7;
  *(_OWORD *)((char *)inited + 57) = v6;
  outlined retain of Graph((uint64_t)v2);
  outlined retain of NodePersonality(&v118);
  outlined retain of [Input]((uint64_t)&v117);
  outlined retain of [Input]((uint64_t)&v116);
  specialized Graph.DepthFirstEdgeIterator.init(_:initial:)(v2, (uint64_t)inited, v97);
  int64_t v70 = v2;
  outlined release of Graph((uint64_t)v2);
  char v8 = (uint64_t *)MEMORY[0x263F8EE78];
  uint64_t v95 = 0;
  uint64_t v96 = (uint64_t *)MEMORY[0x263F8EE78];
  uint64_t v9 = v97[0];
  uint64_t v10 = (void *)v97[1];
  uint64_t v11 = v97[2];
  uint64_t v12 = v98;
  uint64_t v114 = v99;
  uint64_t v115 = v98;
  uint64_t v93 = v99;
  uint64_t v94 = v98;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of [Input]((uint64_t)&v115);
  outlined retain of [Input]((uint64_t)&v114);
  uint64_t v75 = v11;
  if (!v12[2])
  {
LABEL_77:
    double v72 = v8;
LABEL_78:
    uint64_t v94 = v12;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined retain of Graph((uint64_t)v70);
    uint64_t EdgeIteratorV5edgestAG_tFA2G2IDVXEfU0_AF0E0VTf1cn_nTf4xg_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF0dE4NodeV2IDVG_AJs5NeverOTg504_s11d54Graph0B0V25connectedUpstreamSubgraph8rootedAtSayAA0aB4H61VG5nodes_AC22DepthFirstEdgeIteratorV5edgestAG_tFA2G2IDVXEfU0_AF0E0VTf1cn_nTf4xg_nTm((uint64_t)v72, (uint64_t)v70);
    outlined release of Graph((uint64_t)v70);
    swift_release();
    swift_release();
    uint64_t v63 = (_OWORD *)swift_initStackObject();
    v63[1] = xmmword_25C418EE0;
    long long v64 = *(_OWORD *)((char *)v69 + 25);
    long long v65 = v69[1];
    _OWORD v63[2] = *v69;
    v63[3] = v65;
    *(_OWORD *)((char *)v63 + 57) = v64;
    outlined retain of Graph((uint64_t)v70);
    outlined retain of NodePersonality(&v118);
    outlined retain of [Input]((uint64_t)&v117);
    outlined retain of [Input]((uint64_t)&v116);
    specialized Graph.DepthFirstEdgeIterator.init(_:initial:)(v70, (uint64_t)v63, &v90);
    uint64_t v66 = v90;
    outlined release of Graph((uint64_t)v70);
    swift_release();
    swift_release();
    swift_release();
    outlined release of [Input]((uint64_t)&v115);
    unint64_t result = outlined release of [Input]((uint64_t)&v114);
    long long v67 = v91;
    long long v68 = v92;
    *(void *)a2 = EdgeIteratorV5edgestAG_tFA2G2IDVXEfU0_AF0E0VTf1cn_nTf4xg_nTm;
    *(void *)(a2 + 8) = v66;
    *(_OWORD *)(a2 + 16) = v67;
    *(_OWORD *)(a2 + 32) = v68;
    return result;
  }
  uint64_t v79 = v10 + 4;
  uint64_t v76 = v9 + 32;
  uint64_t v77 = (void *)(v9 + 16);
  uint64_t v73 = v10 + 7;
  uint64_t v74 = v11 + 32;
  double v72 = (uint64_t *)MEMORY[0x263F8EE78];
  uint64_t v81 = v9;
  uint64_t v78 = v10;
  while (1)
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v13 = v12[2];
      if (!v13) {
        goto LABEL_76;
      }
    }
    else
    {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew()(v12);
      uint64_t v13 = v12[2];
      if (!v13)
      {
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
    }
    uint64_t v14 = v13 - 1;
    unint64_t v15 = &v12[7 * v14];
    long long v16 = *((_OWORD *)v15 + 2);
    long long v17 = *((_OWORD *)v15 + 3);
    long long v18 = *((_OWORD *)v15 + 4);
    Swift::UInt v122 = v15[10];
    long long v120 = v17;
    long long v121 = v18;
    long long v119 = v16;
    _OWORD v12[2] = v14;
    if (*(void *)(v93 + 16))
    {
      uint64_t v88 = v93;
      Hasher.init(_seed:)();
      uint64_t v89 = v119;
      Hasher._combine(_:)(v119);
      uint64_t v19 = *((void *)&v119 + 1);
      long long v20 = *(void (**)(uint64_t *))(**((void **)&v119 + 1) + 120);
      swift_retain();
      v20(&v90);
      swift_release();
      long long v21 = v120;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::UInt v22 = v121;
      char v85 = BYTE8(v121);
      uint64_t v87 = v19;
      if (BYTE8(v121) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v22);
      }
      Swift::UInt v84 = v122;
      Hasher._combine(_:)(v122);
      Swift::Int v23 = Hasher._finalize()();
      uint64_t v24 = v88;
      uint64_t v25 = -1 << *(unsigned char *)(v88 + 32);
      unint64_t v26 = v23 & ~v25;
      if ((*(void *)(v88 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26))
      {
        Swift::UInt v80 = v22;
        uint64_t v82 = v12;
        uint64_t v27 = ~v25;
        while (1)
        {
          uint64_t v28 = *(void *)(v24 + 48) + 56 * v26;
          if (*(void *)v28 == v89)
          {
            char v8 = *(uint64_t **)(v28 + 8);
            uint64_t v29 = *(void *)(v28 + 16);
            uint64_t v30 = *(void *)(v28 + 24);
            uint64_t v86 = *(void *)(v28 + 32);
            char v31 = *(unsigned char *)(v28 + 40);
            uint64_t v32 = *(void *)(v28 + 48);
            uint64_t v33 = *(uint64_t (**)(uint64_t))(*v8 + 128);
            swift_retain();
            swift_bridgeObjectRetain();
            if (v33(v87))
            {
              if (v29 == (void)v21 && v30 == *((void *)&v21 + 1))
              {
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v24 = v88;
                if (v31)
                {
LABEL_24:
                  char v36 = v85;
                  if (v32 != v84) {
                    char v36 = 0;
                  }
                  if (v36)
                  {
LABEL_35:
                    swift_bridgeObjectRelease();
                    swift_release();
                    uint64_t v9 = v81;
                    uint64_t v12 = v82;
                    uint64_t v10 = v78;
                    goto LABEL_4;
                  }
                  goto LABEL_15;
                }
                goto LABEL_29;
              }
              char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_release();
              uint64_t v24 = v88;
              if (v35)
              {
                if (v31) {
                  goto LABEL_24;
                }
LABEL_29:
                if ((v85 & 1) == 0 && v86 == v80 && v32 == v84) {
                  goto LABEL_35;
                }
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_release();
              uint64_t v24 = v88;
            }
          }
LABEL_15:
          unint64_t v26 = (v26 + 1) & v27;
          if (((*(void *)(v88 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
          {
            uint64_t v9 = v81;
            uint64_t v12 = v82;
            uint64_t v10 = v78;
            goto LABEL_38;
          }
        }
      }
      uint64_t v9 = v81;
    }
LABEL_38:
    v123[0] = v120;
    swift_retain();
    outlined retain of String((uint64_t)v123);
    char v8 = &v93;
    specialized Set._Variant.insert(_:)((uint64_t)&v90, (Swift::Int)&v119, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<Input>);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v38 = v119;
    uint64_t v39 = v10[2];
    if (v9) {
      break;
    }
    if (v39)
    {
      if (*v79 == (void)v119)
      {
        unint64_t result = 0;
        uint64_t v42 = v75;
        goto LABEL_55;
      }
      if (v39 != 1)
      {
        if (v10[5] == (void)v119)
        {
          unint64_t result = 1;
          uint64_t v42 = v75;
          goto LABEL_55;
        }
        if (v39 != 2)
        {
          if (v10[6] == (void)v119)
          {
            unint64_t result = 2;
            uint64_t v42 = v75;
LABEL_55:
            if (result >= *(void *)(v42 + 16)) {
              goto LABEL_80;
            }
            uint64_t v83 = v12;
            Swift::UInt v45 = (void *)(v74 + 48 * result);
            char v8 = (uint64_t *)v45[3];
            uint64_t v46 = v45[4];
            uint64_t v47 = v45[5];
            uint64_t v48 = *(void *)(v46 + 16);
            if (v8)
            {
              swift_retain();
              outlined retain of String((uint64_t)v123);
              swift_retain();
              swift_retain();
              swift_retain();
              uint64_t v10 = v78;
              unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v119, v46 + 32, v48, v8 + 2, (uint64_t)(v8 + 4));
              if (v49)
              {
LABEL_66:
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                outlined release of String((uint64_t)v123);
LABEL_67:
                swift_release();
                outlined release of String((uint64_t)v123);
                uint64_t v9 = v81;
                uint64_t v12 = v83;
                goto LABEL_4;
              }
            }
            else
            {
              swift_retain();
              outlined retain of String((uint64_t)v123);
              swift_retain();
              swift_retain();
              unint64_t result = specialized Collection<>.firstIndex(of:)(&v119, v46 + 32, v48);
              if (v50)
              {
                char v8 = 0;
                goto LABEL_66;
              }
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_81;
            }
            if (result >= *(void *)(v47 + 16)) {
              goto LABEL_82;
            }
            uint64_t v51 = v47 + 56 * result;
            uint64_t v53 = *(void *)(v51 + 32);
            uint64_t v52 = *(void *)(v51 + 40);
            outlined copy of Output?(v53, v52);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            outlined release of String((uint64_t)v123);
            if (v52)
            {
              uint64_t v9 = v81;
              uint64_t v94 = v83;
              specialized OrderedDictionary.subscript.getter(v53, v81, v10, v75, v100);
              outlined init with take of MetalFunctionNode?((uint64_t)v100, (uint64_t)&v101, &demangling cache variable for type metadata for Graph.Adjacent?);
              if (*((void *)&v101 + 1))
              {
                long long v109 = v101;
                long long v106 = v103;
                uint64_t v54 = v102;
                uint64_t v55 = v104;
                outlined init with take of MetalFunctionNode?((uint64_t)&v106, (uint64_t)v108, &demangling cache variable for type metadata for _HashTable.Storage?);
                uint64_t v56 = *((void *)&v106 + 1);
                uint64_t v107 = *((void *)&v106 + 1);
                uint64_t v105 = v55;
                long long v111 = v109;
                outlined init with take of MetalFunctionNode?((uint64_t)&v111, (uint64_t)v113, &demangling cache variable for type metadata for _HashTable.Storage?);
                swift_retain();
                outlined retain of String((uint64_t)v123);
                outlined retain of _HashTable.Storage?((uint64_t)v108);
                outlined retain of _HashTable.Storage?((uint64_t)&v107);
                outlined retain of _HashTable.Storage?((uint64_t)&v105);
                outlined release of _HashTable.Storage?((uint64_t)v113);
                uint64_t v112 = *((void *)&v111 + 1);
                outlined release of _HashTable.Storage?((uint64_t)&v112);
                uint64_t v110 = v54;
                outlined release of _HashTable.Storage?((uint64_t)&v110);
                outlined release of _HashTable.Storage?((uint64_t)v108);
                outlined release of _HashTable.Storage?((uint64_t)&v107);
                outlined release of _HashTable.Storage?((uint64_t)&v105);
                outlined release of _HashTable.Storage?((uint64_t)&v105);
                outlined release of _HashTable.Storage?((uint64_t)v108);
              }
              else
              {
                swift_retain();
                outlined retain of String((uint64_t)v123);
                uint64_t v56 = MEMORY[0x263F8EE78];
              }
              int64_t v57 = v72;
              char v8 = (uint64_t *)&v94;
              specialized Array.append<A>(contentsOf:)(v56);
              swift_release();
              outlined release of String((uint64_t)v123);
              specialized OrderedSet._find(_:)(v38, v95, v72, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
              if (v59)
              {
                char v8 = &v95;
                specialized OrderedSet._appendNew(_:in:)(v38, v58);
                int64_t v57 = v96;
              }
              double v72 = v57;
              specialized OrderedSet._find(_:)(v53, v95, v57, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
              uint64_t v10 = v78;
              if (v61)
              {
                char v8 = &v95;
                specialized OrderedSet._appendNew(_:in:)(v53, v60);
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                double v72 = v96;
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
              }
              uint64_t v12 = v94;
              goto LABEL_4;
            }
            goto LABEL_67;
          }
          uint64_t v43 = 0;
          while (v39 - 3 != v43)
          {
            uint64_t v44 = v73[v43++];
            if (v44 == (void)v119)
            {
              unint64_t result = v43 + 2;
              uint64_t v42 = v75;
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_79;
              }
              goto LABEL_55;
            }
          }
        }
      }
    }
LABEL_3:
    swift_release();
    outlined release of String((uint64_t)v123);
LABEL_4:
    if (!v12[2]) {
      goto LABEL_78;
    }
  }
  unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v119, (uint64_t)v79, v39, v77, v76);
  if (v41) {
    goto LABEL_3;
  }
  uint64_t v42 = v75;
  if ((result & 0x8000000000000000) == 0) {
    goto LABEL_55;
  }
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  lazy protocol witness table accessor for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID();
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v3 = 0;
  uint64_t v10 = result;
  while (1)
  {
LABEL_6:
    unint64_t v7 = *(void *)(a1 + 16);
    if (v3 == v7)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
    if (v3 >= v7) {
      break;
    }
    uint64_t v8 = *(void *)(a1 + 32 + 8 * v3);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    ++v3;
    if (v8)
    {
      unint64_t v4 = *(void *)(v8 + 16);
      if (v4)
      {
        unint64_t v5 = 0;
        while (v5 < v4)
        {
          unint64_t v6 = v5 + 1;
          uint64_t result = specialized Set._Variant.insert(_:)(&v9, *(void *)(v8 + 32 + 8 * v5), &demangling cache variable for type metadata for _SetStorage<ShaderGraphNode.ID>);
          unint64_t v4 = *(void *)(v8 + 16);
          unint64_t v5 = v6;
          if (v6 == v4) {
            goto LABEL_6;
          }
        }
        __break(1u);
        break;
      }
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    unint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      unint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type DebugConfig.Group and conformance DebugConfig.Group();
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v7 = result;
  if (v2)
  {
    unint64_t v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      unint64_t v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  return specialized Set.init<A>(_:)(a1, (void (*)(void))lazy protocol witness table accessor for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID, (uint64_t)&type metadata for ShaderGraphNode.ID, &demangling cache variable for type metadata for _SetStorage<ShaderGraphNode.ID>);
}

{
  return specialized Set.init<A>(_:)(a1, (void (*)(void))lazy protocol witness table accessor for type FunctionNodeID and conformance FunctionNodeID, (uint64_t)&type metadata for FunctionNodeID, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<FunctionNodeID>);
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v11 = result;
  if (v3)
  {
    unint64_t v5 = 0;
    unint64_t v6 = (Swift::Int *)(a2 + 40);
    while (v5 < *(void *)(a2 + 16))
    {
      Swift::Int v7 = *(v6 - 1);
      Swift::Int v8 = *v6;
      ++v5;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v10, v7, v8);
      uint64_t result = swift_bridgeObjectRelease();
      v6 += 2;
      if (v3 == v5)
      {
        swift_release();
        swift_release();
        return v11;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v9 = result;
    swift_release();
    swift_release();
    return v9;
  }
  return result;
}

double Graph.insertNode(inputs:outputs:shaderGraphData:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(*(void *)(v4 + 40), a1, a2, a3, v4 + 64, v4, (unint64_t *)&v8);
  long long v6 = v9[0];
  *a4 = v8;
  a4[1] = v6;
  double result = *(double *)((char *)v9 + 9);
  *(_OWORD *)((char *)a4 + 25) = *(_OWORD *)((char *)v9 + 9);
  return result;
}

uint64_t Graph.replace(_:with:)(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v67 = v3;
  uint64_t v60 = *(void *)(v3 + 16);
  uint64_t v53 = a1;
  if (!v60) {
    goto LABEL_18;
  }
  uint64_t v52 = a2;
  uint64_t v58 = v3 + 32;
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  uint64_t v54 = (void *)(v4 + 80);
  uint64_t v56 = v5;
  while (2)
  {
    long long v8 = (uint64_t *)(v58 + 56 * v6);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    uint64_t v11 = v8[2];
    uint64_t v12 = v8[3];
    uint64_t v13 = v8[4];
    char v14 = *((unsigned char *)v8 + 40);
    uint64_t v15 = v8[6];
    *(void *)&long long v85 = v9;
    *((void *)&v85 + 1) = v10;
    uint64_t v86 = v11;
    uint64_t v87 = v12;
    uint64_t v88 = v13;
    char v89 = v14;
    uint64_t v90 = v15;
    if (!v5) {
      goto LABEL_6;
    }
    uint64_t v62 = v6;
    long long v16 = v54;
    do
    {
      uint64_t v18 = *(v16 - 6);
      uint64_t v17 = *(v16 - 5);
      uint64_t v19 = *(v16 - 4);
      uint64_t v20 = *(v16 - 2);
      char v21 = *((unsigned char *)v16 - 8);
      uint64_t v22 = *v16;
      if (v19 == v11 && *(v16 - 3) == v12)
      {
        uint64_t v7 = v12;
LABEL_4:
        uint64_t v78 = v18;
        uint64_t v79 = v17;
        uint64_t v80 = v11;
        uint64_t v81 = v7;
        uint64_t v82 = v20;
        char v83 = v21;
        uint64_t v84 = v22;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v78, &v85);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_5;
      }
      uint64_t v64 = *v16;
      uint64_t v24 = *(v16 - 5);
      uint64_t v7 = *(v16 - 3);
      uint64_t v25 = v11;
      uint64_t v26 = v12;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v11 = v19;
        uint64_t v17 = v24;
        uint64_t v22 = v64;
        goto LABEL_4;
      }
      v16 += 7;
      --v5;
      uint64_t v12 = v26;
      uint64_t v11 = v25;
    }
    while (v5);
    uint64_t v78 = v18;
    uint64_t v79 = v24;
    uint64_t v80 = v19;
    uint64_t v81 = v7;
    uint64_t v82 = v20;
    char v83 = v21;
    uint64_t v84 = v64;
LABEL_5:
    uint64_t v5 = v56;
    uint64_t v6 = v62;
LABEL_6:
    if (++v6 != v60) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v67);
  a2 = v52;
  a1 = v53;
LABEL_18:
  uint64_t v27 = *(void *)(a2 + 16);
  uint64_t v66 = v27;
  uint64_t v61 = *(void *)(v27 + 16);
  if (!v61) {
    return specialized Graph.remove(_:)(a1[3]);
  }
  uint64_t v59 = v27 + 32;
  uint64_t v28 = a1[2];
  uint64_t v29 = *(void *)(v28 + 16);
  swift_bridgeObjectRetain();
  uint64_t v30 = 0;
  uint64_t v55 = (void *)(v28 + 80);
  uint64_t v57 = v29;
  while (2)
  {
    uint64_t v32 = (uint64_t *)(v59 + 56 * v30);
    uint64_t v33 = *v32;
    uint64_t v34 = v32[1];
    uint64_t v35 = v32[2];
    uint64_t v36 = v32[3];
    uint64_t v37 = v32[4];
    char v38 = *((unsigned char *)v32 + 40);
    uint64_t v39 = v32[6];
    v75[0] = v33;
    v75[1] = v34;
    v75[2] = v35;
    v75[3] = v36;
    v75[4] = v37;
    char v76 = v38;
    uint64_t v77 = v39;
    if (!v29) {
      goto LABEL_23;
    }
    uint64_t v63 = v30;
    char v40 = v55;
    while (2)
    {
      uint64_t v42 = *(v40 - 6);
      uint64_t v41 = *(v40 - 5);
      uint64_t v43 = *(v40 - 4);
      uint64_t v44 = *(v40 - 2);
      char v45 = *((unsigned char *)v40 - 8);
      uint64_t v46 = *v40;
      if (v43 == v35 && *(v40 - 3) == v36)
      {
        uint64_t v31 = v36;
LABEL_21:
        uint64_t v68 = v42;
        uint64_t v69 = v41;
        uint64_t v70 = v35;
        uint64_t v71 = v31;
        uint64_t v72 = v44;
        char v73 = v45;
        uint64_t v74 = v46;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v68, (uint64_t)v75);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_22;
      }
      uint64_t v65 = *v40;
      uint64_t v48 = *(v40 - 5);
      uint64_t v31 = *(v40 - 3);
      uint64_t v49 = v35;
      uint64_t v50 = v36;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v35 = v43;
        uint64_t v41 = v48;
        uint64_t v46 = v65;
        goto LABEL_21;
      }
      v40 += 7;
      --v29;
      uint64_t v36 = v50;
      uint64_t v35 = v49;
      if (v29) {
        continue;
      }
      break;
    }
    uint64_t v68 = v42;
    uint64_t v69 = v48;
    uint64_t v70 = v43;
    uint64_t v71 = v31;
    uint64_t v72 = v44;
    char v73 = v45;
    uint64_t v74 = v65;
LABEL_22:
    uint64_t v29 = v57;
    uint64_t v30 = v63;
LABEL_23:
    if (++v30 != v61) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v66);
  a1 = v53;
  return specialized Graph.remove(_:)(a1[3]);
}

uint64_t ShaderGraphNode.out.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v27 = v1[1];
  uint64_t v28 = *v1;
  uint64_t v25 = v1[4];
  uint64_t v26 = v1[3];
  uint64_t v30 = v1[2];
  char v24 = *((unsigned char *)v1 + 40);
  uint64_t v39 = v30;
  uint64_t v2 = *(void *)(v30 + 16);
  if (v2)
  {
    uint64_t v3 = (void *)(v30 + 80);
    while (1)
    {
      uint64_t v4 = *(v3 - 6);
      uint64_t v5 = *(v3 - 5);
      uint64_t v6 = *(v3 - 4);
      unint64_t v7 = *(v3 - 3);
      uint64_t v8 = *(v3 - 2);
      char v9 = *((unsigned char *)v3 - 8);
      uint64_t v10 = *v3;
      if (v6 == 7632239 && v7 == 0xE300000000000000) {
        break;
      }
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_11;
      }
      v3 += 7;
      if (!--v2) {
        goto LABEL_9;
      }
    }
    unint64_t v7 = 0xE300000000000000;
LABEL_11:
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v8;
    *(unsigned char *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = v10;
  }
  else
  {
LABEL_9:
    outlined init with take of NodePersonality(v29, v38);
    uint64_t v37 = v29[1];
    v31[0] = v28;
    v31[1] = v27;
    v31[2] = v30;
    v31[3] = v26;
    v31[4] = v25;
    char v32 = v24 & 1;
    uint64_t v33 = 7632239;
    unint64_t v34 = 0xE300000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)v31);
    outlined init with take of UserGraphError.ErrorType((uint64_t)v31, (uint64_t)v35);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v36 = 0uLL;
    swift_allocError();
    *uint64_t v12 = v35[0];
    long long v13 = v35[4];
    long long v14 = v35[2];
    long long v15 = v35[1];
    void v12[3] = v35[3];
    v12[4] = v13;
    v12[1] = v15;
    _OWORD v12[2] = v14;
    long long v16 = v35[8];
    long long v17 = v35[6];
    long long v18 = v35[5];
    v12[7] = v35[7];
    v12[8] = v16;
    v12[5] = v18;
    v12[6] = v17;
    long long v19 = v36;
    long long v20 = v35[10];
    long long v21 = v35[9];
    v12[11] = v35[11];
    v12[12] = v19;
    _OWORD v12[9] = v21;
    v12[10] = v20;
    outlined retain of [Input]((uint64_t)&v39);
    outlined retain of NodePersonality(v38);
    outlined retain of [Input]((uint64_t)&v37);
    return swift_willThrow();
  }
  return result;
}

uint64_t ShaderGraphNode.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = *(_OWORD *)(v3 + 1);
  uint64_t v33 = v3[3];
  uint64_t v34 = *v3;
  uint64_t v32 = v3[4];
  char v31 = *((unsigned char *)v3 + 40);
  long long v35 = v6;
  uint64_t v50 = v3[1];
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = (void *)(v6 + 80);
    while (1)
    {
      uint64_t v9 = *(v8 - 6);
      uint64_t v10 = *(v8 - 5);
      uint64_t v11 = *(v8 - 4);
      uint64_t v12 = *(v8 - 3);
      uint64_t v38 = *(v8 - 2);
      char v37 = *((unsigned char *)v8 - 8);
      uint64_t v13 = *v8;
      if (v11 == a1 && v12 == a2) {
        break;
      }
      uint64_t v15 = a1;
      uint64_t v16 = a2;
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_11;
      }
      v8 += 7;
      --v7;
      a2 = v16;
      a1 = v15;
      if (!v7) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = a1;
    uint64_t v12 = a2;
LABEL_11:
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    *(void *)a3 = v9;
    *(void *)(a3 + 8) = v10;
    *(void *)(a3 + 16) = v11;
    *(void *)(a3 + 24) = v12;
    *(void *)(a3 + 32) = v38;
    *(unsigned char *)(a3 + 40) = v37;
    *(void *)(a3 + 48) = v13;
  }
  else
  {
LABEL_9:
    uint64_t v17 = a2;
    uint64_t v18 = a1;
    outlined init with take of NodePersonality(v36, v49);
    uint64_t v48 = v36[2];
    uint64_t v39 = v34;
    long long v40 = v35;
    uint64_t v41 = v33;
    uint64_t v42 = v32;
    char v43 = v31 & 1;
    uint64_t v44 = v18;
    uint64_t v45 = v17;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v39);
    outlined init with take of UserGraphError.ErrorType((uint64_t)&v39, (uint64_t)v46);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v47 = 0uLL;
    swift_allocError();
    _OWORD *v19 = v46[0];
    long long v20 = v46[4];
    long long v21 = v46[2];
    long long v22 = v46[1];
    v19[3] = v46[3];
    v19[4] = v20;
    v19[1] = v22;
    v19[2] = v21;
    long long v23 = v46[8];
    long long v24 = v46[6];
    long long v25 = v46[5];
    v19[7] = v46[7];
    v19[8] = v23;
    v19[5] = v25;
    v19[6] = v24;
    long long v26 = v47;
    long long v27 = v46[10];
    long long v28 = v46[9];
    v19[11] = v46[11];
    v19[12] = v26;
    v19[9] = v28;
    v19[10] = v27;
    outlined retain of [Input]((uint64_t)&v50);
    outlined retain of NodePersonality(v49);
    outlined retain of [Input]((uint64_t)&v48);
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t result;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  void v39[5];
  char v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD v43[12];
  long long v44;
  uint64_t v45;
  unint64_t v46[2];
  uint64_t v47;

  uint64_t v33 = v3[1];
  uint64_t v34 = *v3;
  uint64_t v32 = v3[3];
  char v31 = v3[4];
  long long v36 = v3[2];
  uint64_t v30 = *((unsigned char *)v3 + 40);
  long long v47 = v36;
  long long v6 = *(void *)(v36 + 16);
  if (v6)
  {
    uint64_t v7 = (void *)(v36 + 80);
    while (1)
    {
      uint64_t v9 = *(v7 - 6);
      uint64_t v8 = *(v7 - 5);
      uint64_t v10 = *(v7 - 4);
      uint64_t v11 = *(v7 - 3);
      uint64_t v38 = *(v7 - 2);
      char v37 = *((unsigned char *)v7 - 8);
      uint64_t v12 = *v7;
      if (v10 == a1 && v11 == a2) {
        break;
      }
      long long v14 = a1;
      uint64_t v15 = a2;
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_11;
      }
      v7 += 7;
      --v6;
      a2 = v15;
      a1 = v14;
      if (!v6) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = a1;
    uint64_t v11 = a2;
LABEL_11:
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    *(void *)a3 = v9;
    *(void *)(a3 + 8) = v8;
    *(void *)(a3 + 16) = v10;
    *(void *)(a3 + 24) = v11;
    *(void *)(a3 + 32) = v38;
    *(unsigned char *)(a3 + 40) = v37;
    *(void *)(a3 + 48) = v12;
  }
  else
  {
LABEL_9:
    uint64_t v16 = a2;
    uint64_t v17 = a1;
    outlined init with take of NodePersonality(v35, v46);
    uint64_t v45 = v35[1];
    v39[0] = v34;
    v39[1] = v33;
    v39[2] = v36;
    v39[3] = v32;
    v39[4] = v31;
    long long v40 = v30 & 1;
    uint64_t v41 = v17;
    uint64_t v42 = v16;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi9_((uint64_t)v39);
    outlined init with take of UserGraphError.ErrorType((uint64_t)v39, (uint64_t)v43);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    uint64_t v44 = 0uLL;
    swift_allocError();
    *uint64_t v18 = v43[0];
    long long v19 = v43[4];
    long long v20 = v43[2];
    long long v21 = v43[1];
    _OWORD v18[3] = v43[3];
    v18[4] = v19;
    v18[1] = v21;
    v18[2] = v20;
    long long v22 = v43[8];
    long long v23 = v43[6];
    long long v24 = v43[5];
    v18[7] = v43[7];
    v18[8] = v22;
    unint64_t v18[5] = v24;
    v18[6] = v23;
    long long v25 = v44;
    long long v26 = v43[10];
    long long v27 = v43[9];
    v18[11] = v43[11];
    v18[12] = v25;
    v18[9] = v27;
    v18[10] = v26;
    outlined retain of [Input]((uint64_t)&v47);
    outlined retain of NodePersonality(v46);
    outlined retain of [Input]((uint64_t)&v45);
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

uint64_t Graph.connect(_:to:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v57 = *(void *)(a1 + 16);
  uint64_t v58 = *(void *)(a1 + 8);
  uint64_t v55 = *(void *)(a1 + 32);
  uint64_t v56 = *(void *)(a1 + 24);
  char v52 = *(unsigned char *)(a1 + 40);
  uint64_t v53 = (long long *)(a1 + 16);
  uint64_t v54 = *(void *)(a1 + 48);
  uint64_t v59 = *(void *)a1;
  long long v6 = (void (*)(void, void))specialized OrderedDictionary.subscript.modify(v60, *(void *)a1);
  if (!v7[1])
  {
    v6(v60, 0);
    goto LABEL_20;
  }
  uint64_t v8 = v7;
  uint64_t v51 = v6;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  uint64_t v11 = *(void *)(v9 + 16);
  if (*v8)
  {
    swift_retain();
    swift_retain();
    unint64_t v12 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, v9 + 32, v11, (void *)(v10 + 16), v10 + 32);
    int64_t v14 = v13;
    unint64_t v16 = v15;
  }
  else
  {
    swift_retain();
    unint64_t v12 = specialized Collection<>.firstIndex(of:)(a1, v9 + 32, v11);
    int64_t v14 = v17;
    unint64_t v16 = 0;
  }
  uint64_t v18 = (uint64_t **)(v8 + 2);
  swift_release();
  swift_release();
  if (v14)
  {
LABEL_12:
    specialized OrderedSet._appendNew(_:in:)((long long *)a1, v16);
    unint64_t v12 = specialized OrderedSet.init<A>(_:)(MEMORY[0x263F8EE78]);
    uint64_t v9 = v21;
    long long v22 = (uint64_t *)v8[2];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    _OWORD v8[2] = (uint64_t)v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1);
      long long v22 = *v18;
    }
    unint64_t v16 = v22[2];
    unint64_t v20 = v22[3];
    int64_t v14 = v16 + 1;
    if (v16 < v20 >> 1)
    {
LABEL_15:
      id v22[2] = v14;
      long long v24 = &v22[2 * v16];
      v24[4] = v12;
      v24[5] = v9;
      long long v25 = *v18;
      long long v26 = (void *)(*v18)[2];
      char v27 = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v18 = v25;
      if ((v27 & 1) == 0)
      {
        long long v25 = (uint64_t *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v25);
        *uint64_t v18 = v25;
      }
      if (v26)
      {
        unint64_t v28 = v25[2];
        if ((unint64_t)v26 <= v28) {
          goto LABEL_19;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_44;
    }
LABEL_41:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v14, 1);
    long long v22 = *v18;
    goto LABEL_15;
  }
  uint64_t v8 = *v18;
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v18 = v8;
  if ((v19 & 1) == 0)
  {
    uint64_t v8 = (uint64_t *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v8);
    *uint64_t v18 = v8;
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v12 >= v8[2])
  {
    __break(1u);
    goto LABEL_12;
  }
LABEL_19:
  specialized OrderedSet._append(_:)((long long *)a2);
  v51(v60, 0);
LABEL_20:
  uint64_t v3 = (uint64_t (*)(void, void))specialized OrderedDictionary.subscript.modify(v60, *(void *)a2);
  if (!*(void *)(v29 + 8)) {
    return v3(v60, 0);
  }
  uint64_t v30 = (uint64_t *)(v29 + 24);
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  uint64_t v33 = *(void *)(v31 + 16);
  if (*v30)
  {
    swift_retain();
    swift_retain();
    unint64_t v34 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a2, v31 + 32, v33, (void *)(v32 + 16), v32 + 32);
    char v36 = v35;
    uint64_t v38 = v37;
  }
  else
  {
    swift_retain();
    unint64_t v34 = specialized Collection<>.firstIndex(of:)(a2, v31 + 32, v33);
    char v36 = v40;
    uint64_t v38 = 0;
  }
  unint64_t v16 = (unint64_t)(v30 + 2);
  swift_release();
  swift_release();
  if ((v36 & 1) == 0)
  {
    long long v26 = *(void **)v16;
    char v41 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)unint64_t v16 = v26;
    if ((v41 & 1) == 0)
    {
      long long v26 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v26);
      *(void *)unint64_t v16 = v26;
    }
    if ((v34 & 0x8000000000000000) == 0)
    {
      unint64_t v28 = v26[2];
      if (v34 < v28)
      {
        uint64_t v42 = &v26[7 * v34];
LABEL_39:
        uint64_t v48 = v42[4];
        uint64_t v49 = v42[5];
        uint64_t v50 = v42 + 4;
        outlined consume of Input?(v48, v49);
        long long v61 = *v53;
        *uint64_t v50 = v59;
        v50[1] = v58;
        v50[2] = v57;
        _OWORD v50[3] = v56;
        v50[4] = v55;
        v50[5] = v52 & 1;
        v50[6] = v54;
        swift_retain();
        outlined retain of String((uint64_t)&v61);
        return v3(v60, 0);
      }
      goto LABEL_45;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, (int64_t)v26, 1);
    char v43 = *(void **)v16;
    goto LABEL_34;
  }
  specialized OrderedSet._appendNew(_:in:)((long long *)a2, v38);
  char v43 = *(void **)v16;
  char v44 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)unint64_t v16 = v43;
  if ((v44 & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1);
    char v43 = *(void **)v16;
  }
  a2 = v43[2];
  unint64_t v28 = v43[3];
  long long v26 = (void *)(a2 + 1);
  if (a2 >= v28 >> 1) {
    goto LABEL_46;
  }
LABEL_34:
  _OWORD v43[2] = v26;
  uint64_t v45 = &v43[7 * a2];
  *((_OWORD *)v45 + 2) = 0u;
  *((_OWORD *)v45 + 3) = 0u;
  *((_OWORD *)v45 + 4) = 0u;
  v45[10] = 0;
  uint64_t v46 = *(void **)v16;
  unint64_t v47 = *(void *)(*(void *)v16 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)unint64_t v16 = v46;
  if ((result & 1) == 0)
  {
    uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v46);
    uint64_t v46 = (void *)result;
    *(void *)unint64_t v16 = result;
  }
  if (v47)
  {
    if (v47 <= v46[2])
    {
      uint64_t v42 = &v46[7 * v47 - 7];
      goto LABEL_39;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t ShaderGraphNode.output(labeled:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v7 = result;
    char v19 = a3;
    uint64_t v8 = (uint64_t *)(v4 + 80);
    while (1)
    {
      uint64_t v9 = *(v8 - 5);
      uint64_t v20 = *(v8 - 6);
      uint64_t v10 = *(v8 - 4);
      uint64_t v11 = *(v8 - 3);
      uint64_t v12 = *(v8 - 2);
      uint64_t v13 = *((unsigned __int8 *)v8 - 8);
      uint64_t v14 = *v8;
      if (v10 == v7 && v11 == a2) {
        break;
      }
      uint64_t v16 = v7;
      uint64_t v17 = a2;
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_12;
      }
      v8 += 7;
      --v5;
      a2 = v17;
      uint64_t v7 = v16;
      if (!v5)
      {
        uint64_t v18 = 0;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        a3 = v19;
        goto LABEL_13;
      }
    }
    uint64_t v10 = v7;
    uint64_t v11 = a2;
LABEL_12:
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    a3 = v19;
    uint64_t v18 = v20;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
LABEL_13:
  *a3 = v18;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  a3[4] = v12;
  a3[5] = v13;
  a3[6] = v14;
  return result;
}

unint64_t Graph.edges(from:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (void *)v1[1];
  uint64_t v5 = v1[2];
  unint64_t result = specialized OrderedSet._find(_:)(*(void *)a1, v3, v4, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if (v7) {
    return MEMORY[0x263F8EE78];
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)(v5 + 16))
  {
    uint64_t v8 = (void *)(v5 + 48 * result);
    uint64_t v9 = v8[4];
    uint64_t v10 = v8[5];
    uint64_t v11 = v8[6];
    long long v15 = *(_OWORD *)(a1 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    outlined retain of String((uint64_t)&v15);
    swift_retain();
    specialized OrderedDictionary.subscript.getter(a1, v9, v10, v11);
    uint64_t v13 = v12;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of String((uint64_t)&v15);
    if (v13)
    {
      swift_retain();
      outlined retain of String((uint64_t)&v15);
      uint64_t v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(v13, (uint64_t *)a1);
      swift_release();
      outlined release of String((uint64_t)&v15);
      swift_release();
      swift_release();
      return v14;
    }
    return MEMORY[0x263F8EE78];
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t result;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t result = specialized OrderedSet._find(_:)(*(void *)(a1 + 24), *(void *)v1, *(void **)(v1 + 8), (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if (v4) {
    return MEMORY[0x263F8EE78];
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)(v2 + 16))
  {
    uint64_t v5 = (void *)(v2 + 48 * result);
    long long v6 = v5[4];
    char v7 = v5[5];
    uint64_t v8 = v5[6];
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v9 = specialized Sequence.flatMap<A>(_:)(v6, v7, v8);
    swift_release();
    swift_release();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

unint64_t Graph.node(connectedTo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  unint64_t result = specialized OrderedSet._find(_:)(*(void *)a1, *(void *)v2, *(void **)(v2 + 8), (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if (v7) {
    goto LABEL_9;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (result >= *(void *)(v5 + 16))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = (void *)(v5 + 48 * result);
  uint64_t v9 = v8[7];
  uint64_t v10 = v8[8];
  uint64_t v11 = v8[9];
  long long v23 = *(_OWORD *)(a1 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of String((uint64_t)&v23);
  swift_retain();
  specialized OrderedDictionary.subscript.getter(a1, v9, v10, v11, v20);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined release of String((uint64_t)&v23);
  unint64_t result = outlined init with take of MetalFunctionNode?((uint64_t)v20, (uint64_t)&v21, &demangling cache variable for type metadata for Output??);
  if (v22 == 1)
  {
LABEL_9:
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    char v17 = 0;
LABEL_10:
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = v13;
    *(void *)(a2 + 16) = v14;
    *(void *)(a2 + 24) = v15;
    *(void *)(a2 + 32) = v16;
    *(unsigned char *)(a2 + 40) = v17;
    return result;
  }
  if (!v22)
  {
    unint64_t result = (unint64_t)outlined release of Output??(v20, (void (*)(void, void, void, void, void, void, void))outlined consume of Output??);
    goto LABEL_9;
  }
  if (v21 == -7)
  {
    swift_retain();
    outlined retain of String((uint64_t)&v23);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t result = swift_release();
    goto LABEL_9;
  }
  if ((v21 & 0x8000000000000000) != 0) {
    goto LABEL_16;
  }
  uint64_t v18 = *(void *)(v2 + 64);
  if (v21 < *(void *)(v18 + 16))
  {
    uint64_t v19 = v18 + 48 * v21;
    unint64_t v12 = *(void *)(v19 + 32);
    uint64_t v13 = *(void *)(v19 + 40);
    uint64_t v14 = *(void *)(v19 + 48);
    uint64_t v15 = *(void *)(v19 + 56);
    uint64_t v16 = *(void *)(v19 + 64);
    char v17 = *(unsigned char *)(v19 + 72);
    swift_retain();
    outlined retain of String((uint64_t)&v23);
    outlined copy of NodePersonality(v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t result = swift_release();
    goto LABEL_10;
  }
LABEL_17:
  __break(1u);
  return result;
}

unint64_t Graph.moveEdges(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t)v2;
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *v2;
  uint64_t v8 = (void *)v2[1];
  uint64_t v9 = v2[2];
  unint64_t result = specialized OrderedSet._find(_:)(*(void *)a1, v7, v8, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if (v11) {
    return result;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (result >= *(void *)(v9 + 16))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  unint64_t v12 = (void *)(v9 + 48 * result);
  uint64_t v13 = v12[4];
  uint64_t v14 = v12[5];
  uint64_t v15 = v12[6];
  uint64_t v28 = a2;
  long long v32 = *(_OWORD *)(a1 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of String((uint64_t)&v32);
  swift_retain();
  swift_retain();
  uint64_t v27 = specialized OrderedDictionary.subscript.getter(a1, v13, v14, v15);
  uint64_t v17 = v16;
  swift_release();
  outlined release of String((uint64_t)&v32);
  uint64_t v18 = v28;
  unint64_t result = outlined consume of Graph.Adjacent?(v13, v14);
  if (v17)
  {
    uint64_t v19 = (void (*)(_OWORD *, void))specialized OrderedDictionary.subscript.modify(v30, *(void *)v28);
    if (*(void *)(v20 + 8))
    {
      long long v31 = *(_OWORD *)(v28 + 16);
      swift_retain();
      outlined retain of String((uint64_t)&v31);
      unint64_t v21 = (void (*)(void *, void))specialized OrderedDictionary.subscript.modify(v29, (uint64_t *)v28);
      if (*(void *)(v22 + 8)) {
        specialized OrderedSet.append<A>(contentsOf:)(v27, v17);
      }
      v21(v29, 0);
      swift_release();
      outlined release of String((uint64_t)&v31);
      v19(v30, 0);
      uint64_t v18 = v28;
    }
    else
    {
      v19(v30, 0);
    }
    long long v23 = (void (*)(_OWORD *, void))specialized OrderedDictionary.subscript.modify(v30, v6);
    if (*(void *)(v24 + 8))
    {
      swift_retain();
      outlined retain of String((uint64_t)&v32);
      long long v25 = (void (*)(void *, void))specialized OrderedDictionary.subscript.modify(v29, (uint64_t *)a1);
      if (*(void *)(v26 + 8)) {
        specialized OrderedSet.removeAll(keepingCapacity:)(1);
      }
      v25(v29, 0);
      swift_release();
      outlined release of String((uint64_t)&v32);
      v23(v30, 0);
    }
    else
    {
      v23(v30, 0);
    }
    v30[0] = *(_OWORD *)(v18 + 16);
    swift_retain();
    outlined retain of String((uint64_t)v30);
    specialized Sequence.forEach(_:)(v27, v17, v3, (uint64_t *)v18);
    swift_release();
    outlined release of String((uint64_t)v30);
    return outlined consume of OrderedSet<Input>?(v27, v17);
  }
  return result;
}

uint64_t Graph.prune(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v521 = v5;
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v373 = a1;
  if (v6)
  {
    uint64_t v394 = 0;
    uint64_t v446 = v5 + 32;
    long long v7 = v1[9];
    long long v547 = v1[8];
    v548[0] = v7;
    *(_OWORD *)((char *)v548 + 9) = *(_OWORD *)((char *)v1 + 153);
    long long v8 = v1[5];
    long long v543 = v1[4];
    long long v544 = v8;
    long long v9 = v1[6];
    long long v546 = v1[7];
    long long v545 = v9;
    long long v10 = v1[1];
    long long v539 = *v1;
    long long v540 = v10;
    long long v11 = v1[2];
    unint64_t v12 = (void *)*((void *)&v539 + 1);
    uint64_t v13 = v539;
    int v438 = (void *)(*((void *)&v539 + 1) + 32);
    uint64_t v421 = v539 + 32;
    unint64_t v427 = (void *)(v539 + 16);
    uint64_t v413 = v540;
    uint64_t v404 = v540 + 32;
    long long v542 = v1[3];
    long long v541 = v11;
    swift_bridgeObjectRetain_n();
    uint64_t v14 = 0;
    uint64_t v386 = *((void *)&v539 + 1) + 56;
    long long v15 = v539;
    uint64_t v408 = v6;
    while (1)
    {
      uint64_t v16 = v446 + 56 * v14;
      Swift::UInt v18 = *(void *)v16;
      uint64_t v17 = *(void *)(v16 + 8);
      uint64_t v20 = *(void *)(v16 + 16);
      uint64_t v19 = *(void *)(v16 + 24);
      uint64_t v21 = *(void *)(v16 + 32);
      char v22 = *(unsigned char *)(v16 + 40);
      uint64_t v23 = *(void *)(v16 + 48);
      v561[0] = v18;
      v561[1] = v17;
      uint64_t v479 = v19;
      uint64_t v482 = v17;
      v561[2] = v20;
      v561[3] = v19;
      uint64_t v452 = v21;
      uint64_t v458 = v23;
      v561[4] = v21;
      char v464 = v22;
      char v562 = v22;
      uint64_t v563 = v23;
      uint64_t v24 = v12[2];
      if (v13)
      {
        unint64_t v25 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v18, (uint64_t)v438, v24, v427, v421);
        if (v26) {
          goto LABEL_14;
        }
        if ((v25 & 0x8000000000000000) != 0) {
          goto LABEL_368;
        }
      }
      else
      {
        if (!v24) {
          goto LABEL_14;
        }
        if (*v438 == v18)
        {
          unint64_t v25 = 0;
        }
        else
        {
          if (v24 == 1) {
            goto LABEL_14;
          }
          if (v12[5] == v18)
          {
            unint64_t v25 = 1;
          }
          else
          {
            if (v24 == 2)
            {
LABEL_14:
              swift_retain();
              swift_bridgeObjectRetain();
              outlined retain of Graph((uint64_t)&v539);
              uint64_t v27 = MEMORY[0x263F8EE78];
              goto LABEL_50;
            }
            if (v12[6] == v18)
            {
              unint64_t v25 = 2;
            }
            else
            {
              uint64_t v28 = 0;
              do
              {
                if (v24 - 3 == v28) {
                  goto LABEL_14;
                }
                uint64_t v29 = *(void *)(v386 + 8 * v28++);
              }
              while (v29 != v18);
              unint64_t v25 = v28 + 2;
              if (v28 + 2 < 0) {
                goto LABEL_368;
              }
            }
          }
        }
      }
      if (v25 >= *(void *)(v413 + 16)) {
        goto LABEL_369;
      }
      uint64_t v30 = (uint64_t *)(v404 + 48 * v25);
      uint64_t v31 = *v30;
      uint64_t v32 = v30[1];
      uint64_t v33 = v30[2];
      uint64_t v34 = *(void *)(v32 + 16);
      uint64_t v441 = v14;
      if (!*v30) {
        break;
      }
      uint64_t v35 = v30[2];
      swift_retain();
      swift_bridgeObjectRetain();
      outlined retain of Graph((uint64_t)&v539);
      swift_retain();
      swift_retain();
      swift_retain();
      Swift::Int v36 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v561, v32 + 32, v34, (void *)(v31 + 16), v31 + 32);
      if ((v37 & 1) == 0)
      {
        unint64_t v38 = v36;
        uint64_t v6 = v408;
        uint64_t v39 = v394;
        if ((v36 & 0x8000000000000000) == 0) {
          goto LABEL_25;
        }
        goto LABEL_374;
      }
      swift_release();
      swift_release();
      swift_release();
      uint64_t v27 = MEMORY[0x263F8EE78];
      unint64_t v12 = (void *)*((void *)&v15 + 1);
      uint64_t v6 = v408;
LABEL_50:
      outlined release of Graph((uint64_t)&v539);
      uint64_t v49 = *(void *)(v27 + 16);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      if (v49)
      {
        outlined release of [Input]((uint64_t)&v521);
        return outlined release of [Input]((uint64_t)&v521);
      }
      if (++v14 == v6)
      {
        outlined release of [Input]((uint64_t)&v521);
        outlined release of [Input]((uint64_t)&v521);
        uint64_t v4 = v394;
        goto LABEL_53;
      }
    }
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of Graph((uint64_t)&v539);
    swift_retain();
    uint64_t v391 = v33;
    swift_retain();
    if (!v34)
    {
LABEL_48:
      swift_release();
      swift_release();
      uint64_t v27 = MEMORY[0x263F8EE78];
      uint64_t v6 = v408;
      unint64_t v12 = (void *)*((void *)&v15 + 1);
      uint64_t v13 = v15;
      uint64_t v14 = v441;
      goto LABEL_50;
    }
    uint64_t v432 = v20;
    unint64_t v38 = 0;
    char v41 = (void *)(v32 + 80);
    while (1)
    {
      if (*(v41 - 6) != v18) {
        goto LABEL_30;
      }
      uint64_t v42 = *(v41 - 4);
      uint64_t v43 = *(v41 - 3);
      char v44 = *((unsigned char *)v41 - 8);
      uint64_t v469 = *(v41 - 2);
      uint64_t v474 = *v41;
      uint64_t v45 = *(uint64_t (**)(uint64_t))(*(void *)*(v41 - 5) + 128);
      swift_retain();
      swift_bridgeObjectRetain();
      if ((v45(v482) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v2 = v431;
        goto LABEL_30;
      }
      if (v42 == v432 && v43 == v479)
      {
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v2 = v431;
        if ((v44 & 1) == 0) {
          goto LABEL_44;
        }
      }
      else
      {
        char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v2 = v431;
        if ((v47 & 1) == 0) {
          goto LABEL_30;
        }
        if ((v44 & 1) == 0)
        {
LABEL_44:
          if ((v464 & 1) == 0 && v469 == v452 && v474 == v458) {
            goto LABEL_47;
          }
          goto LABEL_30;
        }
      }
      char v48 = v464;
      if (v474 != v458) {
        char v48 = 0;
      }
      if (v48)
      {
LABEL_47:
        uint64_t v35 = v391;
        uint64_t v39 = v394;
        uint64_t v6 = v408;
        uint64_t v13 = v15;
LABEL_25:
        if (v38 < *(void *)(v35 + 16))
        {
          uint64_t v40 = *(void *)(v35 + 16 * v38 + 40);
          swift_retain();
          swift_retain();
          swift_release();
          swift_release();
          swift_release();
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v27 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(v40, v561);
          uint64_t v394 = v39;
          swift_release();
          uint64_t v2 = v431;
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          unint64_t v12 = (void *)*((void *)&v15 + 1);
          uint64_t v14 = v441;
          goto LABEL_50;
        }
LABEL_375:
        __break(1u);
LABEL_376:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
LABEL_30:
      v41 += 7;
      if (v34 == ++v38) {
        goto LABEL_48;
      }
    }
  }
LABEL_53:
  uint64_t v50 = swift_bridgeObjectRetain();
  unint64_t v51 = specialized Sequence.compactMap<A>(_:)(v50, v2);
  uint64_t v439 = v4;
  swift_bridgeObjectRelease();
  uint64_t v376 = *(void *)(v51 + 16);
  if (!v376)
  {
    swift_bridgeObjectRelease();
    return specialized Graph.remove(_:)(*(void *)(v373 + 24));
  }
  unint64_t v377 = v51 + 32;
  swift_bridgeObjectRetain();
  uint64_t v52 = 0;
  while (2)
  {
    uint64_t v378 = v52;
    uint64_t v53 = (long long *)(v377 + 112 * v52);
    long long v54 = *v53;
    long long v55 = v53[1];
    v560[2] = v53[2];
    v560[1] = v55;
    v560[0] = v54;
    long long v56 = v53[3];
    long long v57 = v53[4];
    long long v58 = v53[5];
    v560[6] = v53[6];
    v560[5] = v58;
    v560[4] = v57;
    v560[3] = v56;
    outlined retain of Edge((uint64_t)v560);
    Graph.remove(_:)((uint64_t)v560);
    if (*(void *)&v560[0] == -7) {
      goto LABEL_55;
    }
    if ((*(void *)&v560[0] & 0x8000000000000000) != 0) {
      goto LABEL_372;
    }
    uint64_t v59 = *((void *)v2 + 8);
    if (*(void *)&v560[0] >= *(void *)(v59 + 16))
    {
LABEL_373:
      __break(1u);
LABEL_374:
      __break(1u);
      goto LABEL_375;
    }
    uint64_t v60 = (void *)(v59 + 48 * *(void *)&v560[0]);
    unint64_t v61 = v60[4];
    uint64_t v62 = v60[6];
    uint64_t v374 = v60[7];
    unint64_t v375 = v61;
    uint64_t v422 = *(void *)(v62 + 16);
    if (v422)
    {
      uint64_t v418 = v62 + 32;
      uint64_t v64 = (void *)*((void *)v2 + 1);
      uint64_t v65 = *((void *)v2 + 2);
      long long v66 = *(_OWORD *)((char *)v2 + 24);
      uint64_t v67 = *((void *)v2 + 5);
      char v68 = *((unsigned char *)v2 + 120);
      uint64_t v69 = *((void *)v2 + 16);
      char v70 = *((unsigned char *)v2 + 168);
      *(void *)unsigned __int8 v505 = *(void *)v2;
      uint64_t v63 = *(void *)v505;
      *(void *)&v505[8] = v64;
      *(_OWORD *)&v505[24] = v66;
      *(void *)&v505[16] = v65;
      *(void *)&v505[40] = v67;
      long long v506 = v2[3];
      *(void *)uint64_t v507 = v59;
      *(_OWORD *)&v507[8] = *(_OWORD *)((char *)v2 + 72);
      *(_OWORD *)&v507[24] = *(_OWORD *)((char *)v2 + 88);
      *(_OWORD *)&v507[40] = *(_OWORD *)((char *)v2 + 104);
      v507[56] = v68;
      *(void *)unint64_t v508 = v69;
      *(_OWORD *)&v508[8] = *(_OWORD *)((char *)v2 + 136);
      *(_OWORD *)&v508[24] = *(_OWORD *)((char *)v2 + 152);
      long long v409 = v64 + 4;
      v508[40] = v70;
      swift_bridgeObjectRetain_n();
      outlined copy of NodePersonality(v61);
      int v414 = (uint64_t *)(v63 + 16);
      uint64_t v442 = v63;
      uint64_t v483 = v63 + 32;
      uint64_t v397 = v65 + 32;
      uint64_t v400 = v65;
      swift_bridgeObjectRetain();
      uint64_t v71 = 0;
      long long v405 = v64;
      int v387 = v64 + 7;
      while (1)
      {
        uint64_t v72 = v418 + 56 * v71;
        Swift::UInt v73 = *(void *)v72;
        uint64_t v74 = *(void *)(v72 + 8);
        uint64_t v75 = *(void *)(v72 + 24);
        uint64_t v459 = *(void *)(v72 + 16);
        uint64_t v76 = *(void *)(v72 + 32);
        char v77 = *(unsigned char *)(v72 + 40);
        uint64_t v78 = *(void *)(v72 + 48);
        v557[0] = v73;
        v557[1] = v74;
        v557[2] = v459;
        v557[3] = v75;
        uint64_t v428 = v76;
        v557[4] = v76;
        char v447 = v77;
        char v558 = v77;
        uint64_t v433 = v78;
        uint64_t v559 = v78;
        uint64_t v475 = v71;
        if (v442)
        {
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v73);
          Swift::Int v79 = Hasher._finalize()();
          uint64_t v80 = *v414;
          uint64_t v81 = 1 << *v414;
          unint64_t v82 = v81 - 1;
          if (__OFSUB__(v81, 1)) {
            goto LABEL_363;
          }
          Swift::Int v83 = v82 & v79;
          uint64_t v84 = _HashTable.UnsafeHandle._startIterator(bucket:)(v82 & v79, v414, v483);
          if (!v84)
          {
LABEL_134:
            swift_retain();
            swift_bridgeObjectRetain();
            outlined retain of Graph((uint64_t)v505);
            uint64_t v102 = MEMORY[0x263F8EE78];
            goto LABEL_135;
          }
          uint64_t v87 = *(uint64_t *)(v442 + 24) >> 6;
          unint64_t v88 = v87 + (v84 ^ v82);
          if (v88 >= v82) {
            uint64_t v89 = (1 << v80) - 1;
          }
          else {
            uint64_t v89 = 0;
          }
          unint64_t v90 = v88 - v89;
          if (v409[v88 - v89] != v73)
          {
            char v103 = 0;
            uint64_t v104 = v80 & 0x3F;
            BOOL v105 = __OFADD__(v104 << v104, 64);
            uint64_t v106 = (v104 << v104) + 126;
            if ((v104 << v104) + 64 >= 1) {
              uint64_t v106 = (v104 << v104) + 63;
            }
            uint64_t v107 = v106 >> 6;
            do
            {
              if (++v83 == v81)
              {
                if (v103) {
                  goto LABEL_376;
                }
                Swift::Int v83 = 0;
                char v103 = 1;
              }
              if (v86 >= v104)
              {
                BOOL v114 = __OFSUB__(v86, v104);
                v86 -= v104;
                if (v114) {
                  goto LABEL_354;
                }
                unint64_t v118 = v85 >> v104;
                unint64_t v119 = v85 & v82;
                if ((v85 & v82) == 0) {
                  goto LABEL_134;
                }
              }
              else
              {
                uint64_t v110 = (v83 * v104) >> 6;
                if (v86)
                {
                  if (v105) {
                    goto LABEL_360;
                  }
                  if (v110 + 1 == v107) {
                    uint64_t v110 = 0;
                  }
                  else {
                    ++v110;
                  }
                }
                uint64_t v111 = v104 - v86;
                if (__OFSUB__(v104, v86)) {
                  goto LABEL_355;
                }
                BOOL v112 = v110 == 2 && v104 == 5;
                uint64_t v113 = 32;
                if (!v112) {
                  uint64_t v113 = 64;
                }
                BOOL v114 = __OFSUB__(v113, v111);
                uint64_t v115 = v113 - v111;
                if (v114)
                {
LABEL_356:
                  __break(1u);
LABEL_357:
                  __break(1u);
LABEL_358:
                  __break(1u);
LABEL_359:
                  __break(1u);
LABEL_360:
                  __break(1u);
                  goto LABEL_361;
                }
                unint64_t v116 = *(void *)(v483 + 8 * v110);
                uint64_t v117 = (v116 << v86) | v85;
                unint64_t v118 = v116 >> v111;
                uint64_t v86 = v115;
                unint64_t v119 = v117 & v82;
                if ((v117 & v82) == 0) {
                  goto LABEL_134;
                }
              }
              unint64_t v108 = (v119 ^ v82) + v87;
              if (v108 >= v82) {
                uint64_t v109 = (1 << v80) - 1;
              }
              else {
                uint64_t v109 = 0;
              }
              unint64_t v90 = v108 - v109;
              unint64_t v85 = v118;
            }
            while (v409[v90] != v73);
          }
          if ((v90 & 0x8000000000000000) != 0) {
            goto LABEL_364;
          }
        }
        else
        {
          uint64_t v91 = v405[2];
          if (!v91) {
            goto LABEL_134;
          }
          if (*v409 == v73)
          {
            unint64_t v90 = 0;
          }
          else
          {
            if (v91 == 1) {
              goto LABEL_134;
            }
            if (v405[5] == v73)
            {
              unint64_t v90 = 1;
            }
            else
            {
              if (v91 == 2) {
                goto LABEL_134;
              }
              if (v405[6] == v73)
              {
                unint64_t v90 = 2;
              }
              else
              {
                uint64_t v129 = 0;
                uint64_t v130 = v91 - 3;
                do
                {
                  if (v130 == v129) {
                    goto LABEL_134;
                  }
                  uint64_t v131 = v387[v129++];
                }
                while (v131 != v73);
                unint64_t v90 = v129 + 2;
                if (v129 + 2 < 0) {
                  goto LABEL_364;
                }
              }
            }
          }
        }
        if (v90 >= *(void *)(v400 + 16)) {
          goto LABEL_367;
        }
        uint64_t v92 = v74;
        uint64_t v93 = (uint64_t *)(v397 + 48 * v90);
        uint64_t v95 = *v93;
        uint64_t v94 = v93[1];
        uint64_t v96 = v93[2];
        uint64_t v97 = *(void *)(v94 + 16);
        if (!*v93) {
          break;
        }
        swift_retain();
        swift_bridgeObjectRetain();
        outlined retain of Graph((uint64_t)v505);
        swift_retain();
        swift_retain();
        swift_retain();
        Swift::Int v98 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v557, v94 + 32, v97, (void *)(v95 + 16), v95 + 32);
        if ((v99 & 1) == 0)
        {
          unint64_t v100 = v98;
          if ((v98 & 0x8000000000000000) == 0) {
            goto LABEL_77;
          }
          goto LABEL_370;
        }
        swift_release();
        swift_release();
        swift_release();
        uint64_t v102 = MEMORY[0x263F8EE78];
LABEL_135:
        outlined release of Graph((uint64_t)v505);
        uint64_t v128 = *(void *)(v102 + 16);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        if (v128)
        {
          swift_bridgeObjectRelease_n();
          outlined consume of NodePersonality(v375);
          swift_bridgeObjectRelease();
          uint64_t v52 = v378;
          goto LABEL_341;
        }
        uint64_t v71 = v475 + 1;
        if (v475 + 1 == v422)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_150;
        }
      }
      uint64_t v465 = v92;
      swift_retain();
      swift_bridgeObjectRetain();
      outlined retain of Graph((uint64_t)v505);
      swift_retain();
      uint64_t v392 = v96;
      swift_retain();
      if (!v97)
      {
LABEL_131:
        swift_release();
        swift_release();
        uint64_t v102 = MEMORY[0x263F8EE78];
        uint64_t v2 = v431;
        goto LABEL_135;
      }
      unint64_t v100 = 0;
      long long v120 = (void *)(v94 + 80);
      while (1)
      {
        if (*(v120 - 6) != v73) {
          goto LABEL_113;
        }
        uint64_t v121 = *(v120 - 4);
        uint64_t v122 = *(v120 - 3);
        uint64_t v453 = *(v120 - 2);
        char v123 = *((unsigned char *)v120 - 8);
        uint64_t v470 = *v120;
        uint64_t v124 = *(uint64_t (**)(uint64_t))(*(void *)*(v120 - 5) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v124(v465) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_113;
        }
        if (v121 == v459 && v122 == v75)
        {
          swift_bridgeObjectRelease();
          swift_release();
          if ((v123 & 1) == 0) {
            goto LABEL_127;
          }
        }
        else
        {
          char v126 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_release();
          if ((v126 & 1) == 0) {
            goto LABEL_113;
          }
          if ((v123 & 1) == 0)
          {
LABEL_127:
            if ((v447 & 1) == 0 && v453 == v428 && v470 == v433) {
              goto LABEL_130;
            }
            goto LABEL_113;
          }
        }
        char v127 = v447;
        if (v470 != v433) {
          char v127 = 0;
        }
        if (v127)
        {
LABEL_130:
          uint64_t v2 = v431;
          uint64_t v96 = v392;
LABEL_77:
          if (v100 < *(void *)(v96 + 16))
          {
            uint64_t v101 = *(void *)(v96 + 16 * v100 + 40);
            swift_retain();
            swift_retain();
            swift_release();
            swift_release();
            swift_release();
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v102 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(v101, v557);
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_135;
          }
LABEL_371:
          __break(1u);
LABEL_372:
          __break(1u);
          goto LABEL_373;
        }
LABEL_113:
        v120 += 7;
        if (v97 == ++v100) {
          goto LABEL_131;
        }
      }
    }
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v61);
    swift_bridgeObjectRetain();
LABEL_150:
    uint64_t v132 = swift_bridgeObjectRetain();
    unint64_t v133 = specialized Sequence.compactMap<A>(_:)(v132, v2);
    swift_bridgeObjectRelease();
    uint64_t v384 = *(void *)(v133 + 16);
    if (!v384)
    {
      swift_bridgeObjectRelease();
      goto LABEL_340;
    }
    unint64_t v383 = v133 + 32;
    swift_bridgeObjectRetain();
    uint64_t v134 = 0;
    while (2)
    {
      uint64_t v393 = v134;
      BOOL v135 = (long long *)(v383 + 112 * v134);
      long long v136 = *v135;
      long long v137 = v135[1];
      v556[2] = v135[2];
      v556[1] = v137;
      v556[0] = v136;
      long long v138 = v135[3];
      long long v139 = v135[4];
      long long v140 = v135[5];
      v556[6] = v135[6];
      v556[5] = v140;
      v556[4] = v139;
      v556[3] = v138;
      outlined retain of Edge((uint64_t)v556);
      Graph.remove(_:)((uint64_t)v556);
      if (*(void *)&v556[0] == -7) {
        goto LABEL_152;
      }
      if ((*(void *)&v556[0] & 0x8000000000000000) != 0) {
        goto LABEL_365;
      }
      uint64_t v141 = *((void *)v2 + 8);
      if (*(void *)&v556[0] >= *(void *)(v141 + 16))
      {
LABEL_366:
        __break(1u);
LABEL_367:
        __break(1u);
LABEL_368:
        __break(1u);
LABEL_369:
        __break(1u);
LABEL_370:
        __break(1u);
        goto LABEL_371;
      }
      uint64_t v142 = (void *)(v141 + 48 * *(void *)&v556[0]);
      unint64_t v144 = v142[4];
      uint64_t v143 = v142[5];
      uint64_t v145 = v142[6];
      uint64_t v379 = v142[7];
      uint64_t v380 = *((void *)v2 + 8);
      uint64_t v146 = *(void *)(v145 + 16);
      unint64_t v382 = v144;
      uint64_t v385 = v143;
      if (v146)
      {
        uint64_t v147 = v145 + 32;
        unint64_t v148 = (void *)*((void *)v2 + 1);
        uint64_t v150 = *((void *)v2 + 2);
        long long v151 = *(_OWORD *)((char *)v2 + 24);
        uint64_t v152 = *((void *)v2 + 5);
        char v153 = *((unsigned char *)v2 + 120);
        uint64_t v154 = *((void *)v2 + 16);
        char v155 = *((unsigned char *)v2 + 168);
        *(void *)unsigned __int8 v505 = *(void *)v2;
        uint64_t v149 = *(void *)v505;
        *(void *)&v505[8] = v148;
        *(_OWORD *)&v505[24] = v151;
        *(void *)&v505[16] = v150;
        *(void *)&v505[40] = v152;
        long long v506 = v2[3];
        *(void *)uint64_t v507 = v141;
        *(_OWORD *)&v507[8] = *(_OWORD *)((char *)v2 + 72);
        *(_OWORD *)&v507[24] = *(_OWORD *)((char *)v2 + 88);
        *(_OWORD *)&v507[40] = *(_OWORD *)((char *)v2 + 104);
        v507[56] = v153;
        *(void *)unint64_t v508 = v154;
        *(_OWORD *)&v508[8] = *(_OWORD *)((char *)v2 + 136);
        *(_OWORD *)&v508[24] = *(_OWORD *)((char *)v2 + 152);
        v508[40] = v155;
        swift_bridgeObjectRetain_n();
        outlined copy of NodePersonality(v144);
        unint64_t v443 = (void *)(v149 + 16);
        uint64_t v429 = v149 + 32;
        uint64_t v415 = v150;
        uint64_t v406 = v150 + 32;
        swift_bridgeObjectRetain();
        uint64_t v156 = 0;
        char v410 = v148;
        uint64_t v381 = v148 + 7;
        uint64_t v157 = v148 + 4;
        uint64_t v388 = v147;
        uint64_t v389 = v146;
        uint64_t v419 = v149;
        long long v401 = v157;
        while (1)
        {
          uint64_t v158 = v147 + 56 * v156;
          Swift::UInt v159 = *(void *)v158;
          uint64_t v160 = *(void *)(v158 + 8);
          uint64_t v162 = *(void *)(v158 + 16);
          uint64_t v161 = *(void *)(v158 + 24);
          uint64_t v163 = *(void *)(v158 + 32);
          char v164 = *(unsigned char *)(v158 + 40);
          uint64_t v165 = *(void *)(v158 + 48);
          v553[0] = v159;
          v553[1] = v160;
          uint64_t v466 = v162;
          v553[2] = v162;
          uint64_t v484 = v161;
          v553[3] = v161;
          uint64_t v434 = v163;
          v553[4] = v163;
          char v454 = v164;
          char v554 = v164;
          uint64_t v448 = v165;
          uint64_t v555 = v165;
          uint64_t v476 = v156;
          if (v149) {
            break;
          }
          uint64_t v186 = v410[2];
          if (!v186) {
            goto LABEL_194;
          }
          if (*v157 == v159)
          {
            unint64_t i = 0;
          }
          else
          {
            if (v186 == 1) {
              goto LABEL_194;
            }
            if (v410[5] == v159)
            {
              unint64_t i = 1;
            }
            else
            {
              if (v186 == 2) {
                goto LABEL_194;
              }
              if (v410[6] != v159)
              {
                uint64_t v195 = 0;
                uint64_t v196 = v186 - 3;
                do
                {
                  if (v196 == v195) {
                    goto LABEL_194;
                  }
                  uint64_t v197 = v381[v195++];
                }
                while (v197 != v159);
                unint64_t i = v195 + 2;
LABEL_204:
                if ((i & 0x8000000000000000) != 0) {
                  goto LABEL_352;
                }
                goto LABEL_205;
              }
              unint64_t i = 2;
            }
          }
LABEL_205:
          if (i >= *(void *)(v415 + 16)) {
            goto LABEL_353;
          }
          uint64_t v198 = v146;
          uint64_t v199 = v147;
          uint64_t v200 = (uint64_t *)(v406 + 48 * i);
          uint64_t v202 = *v200;
          uint64_t v201 = v200[1];
          uint64_t v203 = v200[2];
          uint64_t v204 = *(void *)(v201 + 16);
          if (*v200)
          {
            swift_retain();
            swift_bridgeObjectRetain();
            outlined retain of Graph((uint64_t)v505);
            swift_retain();
            swift_retain();
            swift_retain();
            Swift::Int v205 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v553, v201 + 32, v204, (void *)(v202 + 16), v202 + 32);
            if (v206)
            {
              swift_release();
              swift_release();
              swift_release();
              uint64_t v2 = v431;
              uint64_t v157 = v401;
              uint64_t v147 = v199;
              uint64_t v146 = v198;
              uint64_t v149 = v419;
              goto LABEL_239;
            }
            unint64_t v207 = v205;
            uint64_t v423 = v203;
            uint64_t v2 = v431;
            uint64_t v147 = v199;
            uint64_t v146 = v198;
            uint64_t v149 = v419;
            if ((v205 & 0x8000000000000000) == 0) {
              goto LABEL_209;
            }
LABEL_361:
            __break(1u);
LABEL_362:
            __break(1u);
LABEL_363:
            __break(1u);
LABEL_364:
            __break(1u);
LABEL_365:
            __break(1u);
            goto LABEL_366;
          }
          swift_retain();
          swift_bridgeObjectRetain();
          outlined retain of Graph((uint64_t)v505);
          swift_retain();
          uint64_t v423 = v203;
          swift_retain();
          if (!v204)
          {
LABEL_237:
            swift_release();
            swift_release();
            uint64_t v2 = v431;
            uint64_t v147 = v388;
            uint64_t v146 = v389;
            uint64_t v149 = v419;
            uint64_t v157 = v401;
            goto LABEL_239;
          }
          unint64_t v207 = 0;
          unint64_t v234 = (void *)(v201 + 80);
          while (1)
          {
            if (*(v234 - 6) != v159) {
              goto LABEL_219;
            }
            uint64_t v235 = *(v234 - 4);
            uint64_t v236 = *(v234 - 3);
            uint64_t v461 = *(v234 - 2);
            char v237 = *((unsigned char *)v234 - 8);
            uint64_t v471 = *v234;
            unint64_t v238 = *(uint64_t (**)(uint64_t))(*(void *)*(v234 - 5) + 128);
            swift_retain();
            swift_bridgeObjectRetain();
            if ((v238(v160) & 1) == 0)
            {
              swift_bridgeObjectRelease();
              swift_release();
              goto LABEL_219;
            }
            if (v235 != v466 || v236 != v484)
            {
              char v240 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_release();
              if ((v240 & 1) == 0) {
                goto LABEL_219;
              }
              if (v237) {
                break;
              }
              goto LABEL_233;
            }
            swift_bridgeObjectRelease();
            swift_release();
            if (v237) {
              break;
            }
LABEL_233:
            if ((v454 & 1) == 0 && v461 == v434 && v471 == v448) {
              goto LABEL_236;
            }
LABEL_219:
            v234 += 7;
            if (v204 == ++v207) {
              goto LABEL_237;
            }
          }
          char v241 = v454;
          if (v471 != v448) {
            char v241 = 0;
          }
          if ((v241 & 1) == 0) {
            goto LABEL_219;
          }
LABEL_236:
          uint64_t v2 = v431;
          uint64_t v147 = v388;
          uint64_t v146 = v389;
          uint64_t v149 = v419;
LABEL_209:
          if (v207 >= *(void *)(v423 + 16)) {
            goto LABEL_362;
          }
          uint64_t v208 = *(void *)(v423 + 16 * v207 + 40);
          swift_retain();
          swift_retain();
          swift_release();
          swift_release();
          swift_release();
          int64_t v209 = *(void *)(v208 + 16);
          if (v209)
          {
            uint64_t v504 = MEMORY[0x263F8EE78];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v209, 0);
            uint64_t v210 = v504;
            uint64_t v211 = (void *)(v208 + 80);
            uint64_t v212 = v439;
            do
            {
              long long v213 = *((_OWORD *)v211 - 2);
              uint64_t v214 = *(v211 - 2);
              char v215 = *((unsigned char *)v211 - 8);
              uint64_t v216 = *v211;
              v487[0] = *((_OWORD *)v211 - 3);
              v487[1] = v213;
              uint64_t v488 = v214;
              char v489 = v215;
              uint64_t v490 = v216;
              closure #1 in Graph.edges(from:)((uint64_t *)v487, v553, (uint64_t)&v491);
              uint64_t v217 = v491;
              uint64_t v218 = v492;
              Swift::Int v219 = v493;
              uint64_t v220 = v494;
              unint64_t v221 = v495;
              char v222 = v496;
              long long v223 = v497;
              uint64_t v224 = v498;
              uint64_t v225 = v499;
              uint64_t v226 = v500;
              uint64_t v227 = v501;
              unint64_t v229 = *(void *)(v210 + 16);
              unint64_t v228 = *(void *)(v210 + 24);
              char v230 = v502;
              uint64_t v231 = v503;
              uint64_t v504 = v210;
              if (v229 >= v228 >> 1)
              {
                uint64_t v440 = v212;
                long long v460 = v497;
                unint64_t v449 = v495;
                uint64_t v455 = v491;
                uint64_t v233 = v492;
                char v435 = v496;
                uint64_t v424 = v498;
                uint64_t v395 = v500;
                uint64_t v398 = v499;
                uint64_t v372 = v501;
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v228 > 1, v229 + 1, 1);
                uint64_t v227 = v372;
                uint64_t v226 = v395;
                uint64_t v225 = v398;
                uint64_t v224 = v424;
                char v222 = v435;
                unint64_t v221 = v449;
                uint64_t v217 = v455;
                uint64_t v218 = v233;
                long long v223 = v460;
                uint64_t v212 = v440;
                uint64_t v210 = v504;
              }
              v211 += 7;
              *(void *)(v210 + 16) = v229 + 1;
              uint64_t v232 = v210 + 112 * v229;
              *(void *)(v232 + 32) = v217;
              *(void *)(v232 + 40) = v218;
              *(void *)(v232 + 48) = v219;
              *(void *)(v232 + 56) = v220;
              *(void *)(v232 + 64) = v221;
              *(unsigned char *)(v232 + 72) = v222;
              *(_OWORD *)(v232 + 80) = v223;
              *(void *)(v232 + 96) = v224;
              *(void *)(v232 + 104) = v225;
              *(void *)(v232 + 112) = v226;
              *(void *)(v232 + 120) = v227;
              *(unsigned char *)(v232 + 128) = v230;
              *(void *)(v232 + 136) = v231;
              --v209;
            }
            while (v209);
            uint64_t v439 = v212;
            swift_release();
            swift_release();
            outlined release of Graph((uint64_t)v505);
            uint64_t v2 = v431;
            uint64_t v147 = v388;
            uint64_t v146 = v389;
            uint64_t v149 = v419;
          }
          else
          {
            swift_release();
            swift_release();
            outlined release of Graph((uint64_t)v505);
            uint64_t v210 = MEMORY[0x263F8EE78];
          }
          uint64_t v157 = v401;
LABEL_240:
          uint64_t v242 = *(void *)(v210 + 16);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          if (v242)
          {
            swift_bridgeObjectRelease_n();
            outlined consume of NodePersonality(v382);
            swift_bridgeObjectRelease();
            uint64_t v134 = v393;
            goto LABEL_337;
          }
          uint64_t v156 = v476 + 1;
          if (v476 + 1 == v146)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v143 = v385;
            goto LABEL_247;
          }
        }
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v159);
        Swift::Int v166 = Hasher._finalize()();
        uint64_t v167 = 1 << *v443;
        BOOL v114 = __OFSUB__(v167, 1);
        unint64_t v168 = v167 - 1;
        if (v114) {
          goto LABEL_350;
        }
        uint64_t v169 = *v443 & 0x3FLL;
        uint64_t v170 = (v168 & v166) * v169;
        uint64_t v171 = v170 >> 6;
        uint64_t v172 = v170 & 0x3F;
        unint64_t v173 = v172 + v169;
        if (v173 < 0x41)
        {
          uint64_t v174 = v429;
          unint64_t v188 = *(void *)(v429 + 8 * v171);
          unint64_t v183 = (v188 >> v172) & v168;
          BOOL v189 = v171 == 2 && v169 == 5;
          uint64_t v190 = 32;
          if (!v189) {
            uint64_t v190 = 64;
          }
          unint64_t v185 = v190 - v173;
          unint64_t v184 = v188 >> v173;
          if (!v185) {
            unint64_t v184 = 0;
          }
        }
        else
        {
          uint64_t v174 = v429;
          if (__OFADD__(v169 << v169, 64)) {
            goto LABEL_357;
          }
          unint64_t v175 = *(void *)(v429 + 8 * v171);
          uint64_t v176 = (v169 << v169) + 126;
          if ((v169 << v169) + 64 >= 1) {
            uint64_t v176 = (v169 << v169) + 63;
          }
          uint64_t v177 = v176 >> 6;
          if (v171 + 1 == v177) {
            uint64_t v178 = 0;
          }
          else {
            uint64_t v178 = v171 + 1;
          }
          unint64_t v179 = *(void *)(v429 + 8 * v178);
          uint64_t v180 = v169 - (64 - v172);
          BOOL v181 = v178 == v177 - 1 && v169 == 5;
          uint64_t v182 = 32;
          if (!v181) {
            uint64_t v182 = 64;
          }
          unint64_t v183 = ((v179 << (64 - v172)) | (v175 >> v172)) & v168;
          unint64_t v184 = v179 >> v180;
          unint64_t v185 = v182 - v180;
        }
        long long v491 = v443;
        uint64_t v492 = v174;
        Swift::Int v493 = v168 & v166;
        uint64_t v494 = v183;
        unint64_t v495 = v184;
        unint64_t v496 = v185;
        LOBYTE(v497) = 0;
        if (!v183)
        {
LABEL_194:
          swift_retain();
          swift_bridgeObjectRetain();
          outlined retain of Graph((uint64_t)v505);
          uint64_t v2 = v431;
LABEL_239:
          outlined release of Graph((uint64_t)v505);
          uint64_t v210 = MEMORY[0x263F8EE78];
          goto LABEL_240;
        }
        unint64_t v191 = (v183 ^ v168) + (*(uint64_t *)(v149 + 24) >> 6);
        if (v191 < v168) {
          unint64_t v168 = 0;
        }
        for (unint64_t i = v191 - v168; v157[i] != v159; unint64_t i = v193 - v194)
        {
          _HashTable.BucketIterator.advance()();
          if (!v494) {
            goto LABEL_194;
          }
          uint64_t v192 = -1 << *v491;
          unint64_t v193 = (v192 ^ ~v494) + ((uint64_t)v491[1] >> 6);
          if (v193 >= ~v192) {
            uint64_t v194 = ~v192;
          }
          else {
            uint64_t v194 = 0;
          }
        }
        goto LABEL_204;
      }
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v144);
      swift_bridgeObjectRetain();
LABEL_247:
      uint64_t v467 = *(void *)(v143 + 16);
      if (!v467)
      {
        uint64_t v300 = (void *)MEMORY[0x263F8EE78];
        uint64_t v301 = *(void *)(MEMORY[0x263F8EE78] + 16);
        if (!v301) {
          goto LABEL_335;
        }
LABEL_298:
        char v426 = v300 + 4;
        swift_bridgeObjectRetain();
        uint64_t v302 = 0;
        uint64_t v403 = v301;
        while (1)
        {
          uint64_t v437 = v302;
          uint64_t v303 = (long long *)&v426[14 * v302];
          long long v304 = *v303;
          long long v305 = v303[1];
          v549[2] = v303[2];
          v549[1] = v305;
          v549[0] = v304;
          long long v306 = v303[3];
          long long v307 = v303[4];
          long long v308 = v303[5];
          v549[6] = v303[6];
          v549[5] = v308;
          v549[4] = v307;
          v549[3] = v306;
          Graph.remove(_:)((uint64_t)v549);
          if (*(void *)&v549[0] != -7) {
            break;
          }
LABEL_301:
          uint64_t v302 = v437 + 1;
          if (v437 + 1 == v301)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_336;
          }
        }
        if ((*(void *)&v549[0] & 0x8000000000000000) != 0) {
          goto LABEL_348;
        }
        uint64_t v309 = *((void *)v2 + 8);
        if (*(void *)&v549[0] >= *(void *)(v309 + 16)) {
          goto LABEL_349;
        }
        uint64_t v310 = (void *)(v309 + 48 * *(void *)&v549[0]);
        unint64_t v312 = v310[4];
        uint64_t v311 = v310[5];
        uint64_t v313 = v310[6];
        uint64_t v417 = v310[7];
        uint64_t v314 = *(void *)(v313 + 16);
        if (v314)
        {
          uint64_t v315 = *(void *)v2;
          long long v316 = *(_OWORD *)((char *)v2 + 24);
          uint64_t v317 = *((void *)v2 + 5);
          char v318 = *((unsigned char *)v2 + 120);
          uint64_t v319 = *((void *)v2 + 16);
          char v320 = *((unsigned char *)v2 + 168);
          *(_OWORD *)&v505[8] = *(_OWORD *)((char *)v2 + 8);
          *(_OWORD *)&v505[24] = v316;
          *(void *)unsigned __int8 v505 = v315;
          *(void *)&v505[40] = v317;
          long long v506 = v2[3];
          *(void *)uint64_t v507 = v309;
          *(_OWORD *)&v507[8] = *(_OWORD *)((char *)v2 + 72);
          *(_OWORD *)&v507[24] = *(_OWORD *)((char *)v2 + 88);
          *(_OWORD *)&v507[40] = *(_OWORD *)((char *)v2 + 104);
          v507[56] = v318;
          *(void *)unint64_t v508 = v319;
          *(_OWORD *)&v508[8] = *(_OWORD *)((char *)v2 + 136);
          *(_OWORD *)&v508[24] = *(_OWORD *)((char *)v2 + 152);
          v508[40] = v320;
          long long v540 = *(_OWORD *)&v505[16];
          long long v539 = *(_OWORD *)v505;
          long long v547 = *(_OWORD *)v508;
          v548[0] = *(_OWORD *)&v508[16];
          *(_OWORD *)((char *)v548 + 9) = *(_OWORD *)&v508[25];
          long long v546 = *(_OWORD *)&v507[48];
          long long v545 = *(_OWORD *)&v507[32];
          long long v544 = *(_OWORD *)&v507[16];
          long long v543 = *(_OWORD *)v507;
          long long v541 = *(_OWORD *)&v505[32];
          long long v542 = v506;
          swift_bridgeObjectRetain_n();
          unint64_t v321 = v312;
          outlined copy of NodePersonality(v312);
          uint64_t v322 = v311;
          swift_bridgeObjectRetain();
          uint64_t v323 = (void *)(v313 + 80);
          do
          {
            uint64_t v324 = *v323;
            char v325 = *((unsigned char *)v323 - 8);
            uint64_t v327 = *(v323 - 3);
            uint64_t v326 = *(v323 - 2);
            uint64_t v329 = *(v323 - 5);
            uint64_t v328 = *(v323 - 4);
            v536[0] = *(v323 - 6);
            v536[1] = v329;
            v536[2] = v328;
            v536[3] = v327;
            v536[4] = v326;
            char v537 = v325;
            uint64_t v538 = v324;
            swift_retain();
            swift_bridgeObjectRetain();
            outlined retain of Graph((uint64_t)v505);
            unint64_t v330 = Graph.edges(from:)((uint64_t)v536);
            outlined release of Graph((uint64_t)v505);
            uint64_t v331 = *(void *)(v330 + 16);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            if (v331)
            {
              swift_bridgeObjectRelease_n();
              outlined consume of NodePersonality(v321);
              swift_bridgeObjectRelease();
              uint64_t v2 = v431;
              goto LABEL_300;
            }
            v323 += 7;
            --v314;
          }
          while (v314);
          swift_bridgeObjectRelease_n();
          uint64_t v2 = v431;
          uint64_t v311 = v322;
          unint64_t v312 = v321;
        }
        else
        {
          swift_bridgeObjectRetain();
          outlined copy of NodePersonality(v312);
          swift_bridgeObjectRetain();
        }
        unint64_t v412 = v312;
        uint64_t v332 = *(void *)(v311 + 16);
        if (v332)
        {
          uint64_t v333 = *(void *)v2;
          long long v334 = *(_OWORD *)((char *)v2 + 24);
          uint64_t v335 = *((void *)v2 + 5);
          char v336 = *((unsigned char *)v2 + 120);
          uint64_t v337 = *((void *)v2 + 16);
          char v338 = *((unsigned char *)v2 + 168);
          *(_OWORD *)&v505[8] = *(_OWORD *)((char *)v2 + 8);
          *(_OWORD *)&v505[24] = v334;
          *(void *)unsigned __int8 v505 = v333;
          *(void *)&v505[40] = v335;
          long long v506 = v2[3];
          *(void *)uint64_t v507 = v309;
          *(_OWORD *)&v507[8] = *(_OWORD *)((char *)v2 + 72);
          *(_OWORD *)&v507[24] = *(_OWORD *)((char *)v2 + 88);
          *(_OWORD *)&v507[40] = *(_OWORD *)((char *)v2 + 104);
          v507[56] = v336;
          *(void *)unint64_t v508 = v337;
          *(_OWORD *)&v508[8] = *(_OWORD *)((char *)v2 + 136);
          *(_OWORD *)&v508[24] = *(_OWORD *)((char *)v2 + 152);
          v508[40] = v338;
          long long v527 = *(_OWORD *)&v505[16];
          long long v526 = *(_OWORD *)v505;
          long long v534 = *(_OWORD *)v508;
          v535[0] = *(_OWORD *)&v508[16];
          *(_OWORD *)((char *)v535 + 9) = *(_OWORD *)&v508[25];
          long long v533 = *(_OWORD *)&v507[48];
          long long v532 = *(_OWORD *)&v507[32];
          long long v531 = *(_OWORD *)&v507[16];
          long long v530 = *(_OWORD *)v507;
          long long v528 = *(_OWORD *)&v505[32];
          long long v529 = v506;
          swift_bridgeObjectRetain();
          uint64_t v339 = (void *)(v311 + 80);
          long long v340 = (void *)MEMORY[0x263F8EE78];
          do
          {
            uint64_t v341 = v340;
            uint64_t v342 = *(v339 - 5);
            uint64_t v343 = *(v339 - 4);
            uint64_t v344 = *(v339 - 3);
            uint64_t v345 = *(v339 - 2);
            char v346 = *((unsigned char *)v339 - 8);
            uint64_t v347 = *v339;
            v523[0] = *(v339 - 6);
            v523[1] = v342;
            v523[2] = v343;
            v523[3] = v344;
            v523[4] = v345;
            char v524 = v346;
            uint64_t v525 = v347;
            swift_retain();
            swift_bridgeObjectRetain();
            outlined retain of Graph((uint64_t)v505);
            Graph.edge(to:)((uint64_t)v523, v509);
            uint64_t v348 = v509[0];
            uint64_t v349 = v509[1];
            uint64_t v350 = v509[2];
            uint64_t v351 = v509[3];
            uint64_t v445 = v509[4];
            char v451 = v510;
            uint64_t v478 = v512;
            uint64_t v481 = v511;
            uint64_t v468 = v514;
            uint64_t v473 = v513;
            uint64_t v457 = v516;
            uint64_t v463 = v515;
            char v486 = v517;
            uint64_t v352 = v518;
            outlined release of Graph((uint64_t)v505);
            swift_bridgeObjectRelease();
            swift_release();
            outlined init with take of MetalFunctionNode?((uint64_t)v509, (uint64_t)v519, &demangling cache variable for type metadata for Edge?);
            if (v520)
            {
              long long v340 = v341;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                long long v340 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v341[2] + 1, 1, v341);
              }
              unint64_t v354 = v340[2];
              unint64_t v353 = v340[3];
              if (v354 >= v353 >> 1) {
                long long v340 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v353 > 1), v354 + 1, 1, v340);
              }
              v340[2] = v354 + 1;
              unint64_t v355 = &v340[14 * v354];
              v355[4] = v348;
              void v355[5] = v349;
              v355[6] = v350;
              v355[7] = v351;
              v355[8] = v445;
              *((unsigned char *)v355 + 72) = v451 & 1;
              v355[10] = v481;
              v355[11] = v478;
              v355[12] = v473;
              v355[13] = v468;
              v355[14] = v463;
              v355[15] = v457;
              *((unsigned char *)v355 + 128) = v486 & 1;
              v355[17] = v352;
            }
            else
            {
              long long v340 = v341;
            }
            v339 += 7;
            --v332;
          }
          while (v332);
          swift_bridgeObjectRelease();
          uint64_t v2 = v431;
          uint64_t v356 = v340[2];
          if (!v356)
          {
LABEL_332:
            swift_bridgeObjectRelease();
            specialized Graph.remove(_:)(v417);
            outlined consume of NodePersonality(v412);
            swift_bridgeObjectRelease();
LABEL_300:
            uint64_t v301 = v403;
            swift_bridgeObjectRelease();
            goto LABEL_301;
          }
        }
        else
        {
          long long v340 = (void *)MEMORY[0x263F8EE78];
          uint64_t v356 = *(void *)(MEMORY[0x263F8EE78] + 16);
          if (!v356) {
            goto LABEL_332;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v357 = 4;
        do
        {
          long long v360 = *(_OWORD *)&v340[v357];
          long long v361 = *(_OWORD *)&v340[v357 + 4];
          v522[1] = *(_OWORD *)&v340[v357 + 2];
          v522[2] = v361;
          v522[0] = v360;
          long long v362 = *(_OWORD *)&v340[v357 + 6];
          long long v363 = *(_OWORD *)&v340[v357 + 8];
          long long v364 = *(_OWORD *)&v340[v357 + 10];
          v522[6] = *(_OWORD *)&v340[v357 + 12];
          void v522[5] = v364;
          v522[4] = v363;
          v522[3] = v362;
          Graph.remove(_:)((uint64_t)v522);
          uint64_t v365 = *(void *)&v522[0];
          if (*(void *)&v522[0] != -7)
          {
            uint64_t v366 = *((void *)v2 + 8);
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(*(void *)&v522[0], 1, v366);
            uint64_t v367 = v366 + 48 * v365;
            unint64_t v368 = *(void *)(v367 + 32);
            uint64_t v369 = *(void *)(v367 + 56);
            outlined copy of NodePersonality(v368);
            swift_bridgeObjectRetain();
            uint64_t v370 = swift_bridgeObjectRetain();
            if (specialized Sequence.allSatisfy(_:)(v370, v2))
            {
              uint64_t v358 = swift_bridgeObjectRetain();
              unint64_t v359 = specialized Sequence.compactMap<A>(_:)(v358, v2);
              swift_bridgeObjectRelease();
              specialized Sequence.forEach(_:)(v359, v2);
              swift_bridgeObjectRelease();
              specialized Graph.remove(_:)(v369);
            }
            outlined consume of NodePersonality(v368);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v357 += 14;
          --v356;
        }
        while (v356);
        swift_bridgeObjectRelease();
        goto LABEL_332;
      }
      uint64_t v243 = v143 + 32;
      unint64_t v244 = (void *)*((void *)v2 + 1);
      uint64_t v246 = *((void *)v2 + 2);
      long long v247 = *(_OWORD *)((char *)v2 + 24);
      uint64_t v248 = *((void *)v2 + 5);
      char v249 = *((unsigned char *)v2 + 120);
      uint64_t v250 = *((void *)v2 + 16);
      char v251 = *((unsigned char *)v2 + 168);
      *(void *)unsigned __int8 v505 = *(void *)v2;
      uint64_t v245 = *(void *)v505;
      *(void *)&v505[8] = v244;
      *(_OWORD *)&v505[24] = v247;
      *(void *)&v505[16] = v246;
      *(void *)&v505[40] = v248;
      long long v506 = v2[3];
      *(void *)uint64_t v507 = v380;
      *(_OWORD *)&v507[8] = *(_OWORD *)((char *)v2 + 72);
      *(_OWORD *)&v507[24] = *(_OWORD *)((char *)v2 + 88);
      *(_OWORD *)&v507[40] = *(_OWORD *)((char *)v2 + 104);
      v507[56] = v249;
      *(void *)unint64_t v508 = v250;
      *(_OWORD *)&v508[8] = *(_OWORD *)((char *)v2 + 136);
      long long v252 = v244 + 4;
      *(_OWORD *)&v508[24] = *(_OWORD *)((char *)v2 + 152);
      uint64_t v444 = *(void *)v505 + 32;
      uint64_t v450 = (void *)(*(void *)v505 + 16);
      uint64_t v430 = v246;
      uint64_t v420 = v246 + 32;
      v508[40] = v251;
      swift_bridgeObjectRetain();
      uint64_t v253 = v245;
      uint64_t v254 = 0;
      long long v425 = v244;
      char v390 = v244 + 7;
      long long v407 = (void *)MEMORY[0x263F8EE78];
      uint64_t v416 = v143 + 32;
      uint64_t v485 = v245;
      uint64_t v436 = v244 + 4;
      do
      {
        uint64_t v255 = v243 + 56 * v254;
        Swift::UInt v257 = *(void *)v255;
        uint64_t j = *(void *)(v255 + 8);
        uint64_t v258 = *(void *)(v255 + 16);
        uint64_t v259 = *(void *)(v255 + 24);
        uint64_t v260 = *(void *)(v255 + 32);
        char v261 = *(unsigned char *)(v255 + 40);
        uint64_t v262 = *(void *)(v255 + 48);
        v550[0] = v257;
        v550[1] = j;
        v550[2] = v258;
        v550[3] = v259;
        uint64_t v480 = v260;
        v550[4] = v260;
        char v477 = v261;
        char v551 = v261;
        uint64_t v472 = v262;
        uint64_t v552 = v262;
        if (v253)
        {
          uint64_t v456 = v258;
          uint64_t v263 = j;
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v257);
          Swift::Int v264 = Hasher._finalize()();
          uint64_t v265 = 1 << *v450;
          unint64_t v266 = v265 - 1;
          if (__OFSUB__(v265, 1))
          {
            __break(1u);
LABEL_347:
            __break(1u);
LABEL_348:
            __break(1u);
LABEL_349:
            __break(1u);
LABEL_350:
            __break(1u);
LABEL_351:
            __break(1u);
LABEL_352:
            __break(1u);
LABEL_353:
            __break(1u);
LABEL_354:
            __break(1u);
LABEL_355:
            __break(1u);
            goto LABEL_356;
          }
          Swift::Int v267 = v266 & v264;
          uint64_t v268 = _HashTable.UnsafeHandle._startIterator(bucket:)(v266 & v264, v450, v444);
          long long v491 = v450;
          uint64_t v492 = v444;
          Swift::Int v493 = v267;
          uint64_t v494 = v268;
          unint64_t v495 = v269;
          unint64_t v496 = v270;
          LOBYTE(v497) = 0;
          if (!v268) {
            goto LABEL_249;
          }
          unint64_t v271 = (v268 ^ v266) + (*(uint64_t *)(v485 + 24) >> 6);
          if (v271 >= v266) {
            unint64_t v272 = v266;
          }
          else {
            unint64_t v272 = 0;
          }
          unint64_t v273 = v271 - v272;
          for (uint64_t j = v263; v252[v273] != v257; v273 = v275 - v276)
          {
            _HashTable.BucketIterator.advance()();
            if (!v494) {
              goto LABEL_249;
            }
            uint64_t v274 = -1 << *v491;
            unint64_t v275 = (v274 ^ ~v494) + ((uint64_t)v491[1] >> 6);
            if (v275 >= ~v274) {
              uint64_t v276 = ~v274;
            }
            else {
              uint64_t v276 = 0;
            }
          }
          if ((v273 & 0x8000000000000000) != 0) {
            goto LABEL_347;
          }
        }
        else
        {
          uint64_t v277 = v425[2];
          if (!v277) {
            goto LABEL_250;
          }
          uint64_t v456 = v258;
          if (*v252 == v257)
          {
            unint64_t v273 = 0;
          }
          else
          {
            if (v277 == 1) {
              goto LABEL_250;
            }
            if (v425[5] == v257)
            {
              unint64_t v273 = 1;
            }
            else
            {
              if (v277 == 2) {
                goto LABEL_250;
              }
              if (v425[6] == v257)
              {
                unint64_t v273 = 2;
              }
              else
              {
                uint64_t v297 = 0;
                uint64_t v298 = v277 - 3;
                do
                {
                  if (v298 == v297) {
                    goto LABEL_250;
                  }
                  uint64_t v299 = v390[v297++];
                }
                while (v299 != v257);
                unint64_t v273 = v297 + 2;
                if (v297 + 2 < 0) {
                  goto LABEL_347;
                }
              }
            }
          }
        }
        if (v273 >= *(void *)(v430 + 16)) {
          goto LABEL_351;
        }
        Swift::UInt v462 = v257;
        int v278 = (void *)(v420 + 48 * v273);
        uint64_t v279 = v278[3];
        uint64_t v280 = v278[4];
        uint64_t v281 = v278[5];
        uint64_t v282 = *(void *)(v280 + 16);
        if (v279)
        {
          swift_bridgeObjectRetain_n();
          swift_retain_n();
          outlined retain of Graph((uint64_t)v505);
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v2 = v431;
          unint64_t v283 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v550, v280 + 32, v282, (void *)(v279 + 16), v279 + 32);
          long long v252 = v436;
          if (v284) {
            goto LABEL_285;
          }
        }
        else
        {
          swift_bridgeObjectRetain_n();
          swift_retain_n();
          outlined retain of Graph((uint64_t)v505);
          swift_retain();
          swift_retain();
          unint64_t v283 = specialized Collection<>.firstIndex(of:)(v550, v280 + 32, v282);
          if (v285)
          {
            long long v252 = v436;
LABEL_285:
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            outlined release of Graph((uint64_t)v505);
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v243 = v416;
LABEL_249:
            uint64_t v253 = v485;
            goto LABEL_250;
          }
        }
        if ((v283 & 0x8000000000000000) != 0) {
          goto LABEL_358;
        }
        if (v283 >= *(void *)(v281 + 16)) {
          goto LABEL_359;
        }
        uint64_t v286 = (void *)(v281 + 56 * v283);
        uint64_t v288 = v286[4];
        uint64_t v287 = v286[5];
        uint64_t v289 = v286[6];
        uint64_t v396 = v286[8];
        uint64_t v399 = v286[7];
        uint64_t v402 = v286[9];
        uint64_t v411 = v286[10];
        outlined copy of Output?(v288, v287);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined release of Graph((uint64_t)v505);
        if (v287)
        {
          uint64_t v290 = v259;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v243 = v416;
          uint64_t v253 = v485;
          uint64_t v292 = j;
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v293 = v407;
          }
          else
          {
            uint64_t v293 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v407[2] + 1, 1, v407);
            uint64_t v253 = v485;
          }
          unint64_t v295 = v293[2];
          unint64_t v294 = v293[3];
          if (v295 >= v294 >> 1)
          {
            uint64_t v293 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v294 > 1), v295 + 1, 1, v293);
            uint64_t v253 = v485;
          }
          v293[2] = v295 + 1;
          long long v407 = v293;
          uint64_t v296 = &v293[14 * v295];
          v296[4] = v288;
          v296[5] = v287;
          v296[6] = v289;
          v296[7] = v399;
          v296[8] = v396;
          *((unsigned char *)v296 + 72) = v402 & 1;
          v296[10] = v411;
          v296[11] = v462;
          v296[12] = v292;
          v296[13] = v456;
          v296[14] = v290;
          v296[15] = v480;
          *((unsigned char *)v296 + 128) = v477;
          v296[17] = v472;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v243 = v416;
          uint64_t v253 = v485;
        }
        long long v252 = v436;
LABEL_250:
        ++v254;
      }
      while (v254 != v467);
      swift_bridgeObjectRelease();
      uint64_t v300 = v407;
      uint64_t v301 = v407[2];
      if (v301) {
        goto LABEL_298;
      }
LABEL_335:
      swift_bridgeObjectRelease();
LABEL_336:
      specialized Graph.remove(_:)(v379);
      outlined consume of NodePersonality(v382);
      swift_bridgeObjectRelease();
      uint64_t v134 = v393;
LABEL_337:
      swift_bridgeObjectRelease();
LABEL_152:
      outlined release of Edge((uint64_t)v556);
      if (++v134 != v384) {
        continue;
      }
      break;
    }
    swift_bridgeObjectRelease_n();
LABEL_340:
    specialized Graph.remove(_:)(v374);
    outlined consume of NodePersonality(v375);
    swift_bridgeObjectRelease();
    uint64_t v52 = v378;
LABEL_341:
    swift_bridgeObjectRelease();
LABEL_55:
    outlined release of Edge((uint64_t)v560);
    if (++v52 != v376) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease_n();
  return specialized Graph.remove(_:)(*(void *)(v373 + 24));
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x263F8EE78];
  uint64_t v35 = MEMORY[0x263F8EE78];
  uint64_t v22 = *(void *)(a3 + 16);
  if (!v22) {
    return v3;
  }
  uint64_t v19 = a3 + 32;
  uint64_t v20 = a2 + 32;
  uint64_t v21 = *(void *)(a2 + 16);
  swift_retain();
  swift_retain();
  uint64_t result = swift_retain();
  uint64_t v5 = 0;
  while (v5 != v21)
  {
    uint64_t v6 = (uint64_t *)(v20 + 56 * v5);
    uint64_t v7 = v6[1];
    uint64_t v8 = v6[3];
    uint64_t v9 = *(void *)(v19 + 16 * v5 + 8);
    int64_t v10 = *(void *)(v9 + 16);
    if (v10)
    {
      uint64_t v27 = v6[2];
      uint64_t v28 = *v6;
      uint64_t v26 = v6[4];
      char v25 = *((unsigned char *)v6 + 40);
      uint64_t v23 = v5;
      uint64_t v24 = v6[6];
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_retain();
      swift_retain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
      uint64_t v11 = v3;
      unint64_t v12 = (void *)(v9 + 80);
      do
      {
        uint64_t v13 = *(v12 - 5);
        uint64_t v14 = *(v12 - 3);
        uint64_t v32 = *(v12 - 4);
        uint64_t v33 = *(v12 - 6);
        uint64_t v31 = *(v12 - 2);
        char v30 = *((unsigned char *)v12 - 8);
        uint64_t v29 = *v12;
        uint64_t v15 = v8;
        unint64_t v17 = *(void *)(v11 + 16);
        unint64_t v16 = *(void *)(v11 + 24);
        int64_t v34 = v17 + 1;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        if (v17 >= v16 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v34, 1);
        }
        v12 += 7;
        *(void *)(v11 + 16) = v34;
        uint64_t v18 = v11 + 112 * v17;
        *(void *)(v18 + 32) = v28;
        *(void *)(v18 + 40) = v7;
        *(void *)(v18 + 48) = v27;
        *(void *)(v18 + 56) = v15;
        *(void *)(v18 + 64) = v26;
        *(unsigned char *)(v18 + 72) = v25;
        *(void *)(v18 + 80) = v24;
        *(void *)(v18 + 88) = v33;
        *(void *)(v18 + 96) = v13;
        *(void *)(v18 + 104) = v32;
        *(void *)(v18 + 112) = v14;
        *(void *)(v18 + 120) = v31;
        *(unsigned char *)(v18 + 128) = v30;
        *(void *)(v18 + 136) = v29;
        --v10;
        uint64_t v8 = v15;
      }
      while (v10);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v3 = MEMORY[0x263F8EE78];
      uint64_t v5 = v23;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v11 = v3;
    }
    ++v5;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = specialized Array.append<A>(contentsOf:)(v11);
    if (v5 == v22)
    {
      swift_release();
      swift_release();
      swift_release();
      return v35;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(a4 + 16);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v25 = a4 + 32;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t result = swift_retain();
  unint64_t v8 = 0;
  uint64_t v9 = (uint64_t *)(a2 + 80);
  unint64_t v26 = v5;
  while (1)
  {
    if (v8 == v5)
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v27 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      unint64_t v28 = v5;
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_10;
    }
    if (v8 >= v5) {
      break;
    }
    uint64_t v14 = v25 + 56 * v8;
    uint64_t v15 = *(void *)(v14 + 48);
    uint64_t v16 = *(unsigned __int8 *)(v14 + 40);
    uint64_t v17 = *(void *)(v14 + 24);
    uint64_t v18 = *(void *)(v14 + 32);
    uint64_t v10 = *(void *)(v14 + 8);
    uint64_t v33 = *(void *)(v14 + 16);
    uint64_t v11 = *(void *)v14;
    swift_retain();
    uint64_t v32 = v17;
    swift_bridgeObjectRetain();
    if (!v6)
    {
      if (v10)
      {
LABEL_27:
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v23 = v11;
        uint64_t v24 = v10;
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
LABEL_22:
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        if (!v12) {
          return 1;
        }
        uint64_t v23 = v13;
        uint64_t v24 = v12;
      }
      outlined consume of Input?(v23, v24);
      return 0;
    }
    uint64_t v30 = v15;
    uint64_t v31 = v16;
    uint64_t v27 = v18;
    unint64_t v28 = v8 + 1;
LABEL_10:
    uint64_t v29 = *v9;
    uint64_t v19 = *((unsigned __int8 *)v9 - 8);
    uint64_t v20 = *(v9 - 3);
    uint64_t v21 = *(v9 - 2);
    uint64_t v12 = *(v9 - 5);
    uint64_t v22 = *(v9 - 4);
    uint64_t v13 = *(v9 - 6);
    swift_retain();
    swift_bridgeObjectRetain();
    if (!v10) {
      goto LABEL_22;
    }
    if (!v12) {
      goto LABEL_27;
    }
    if (v11 != v13
      || ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 128))(v12) & 1) == 0
      || (v33 != v22 || v32 != v20) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_21:
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return 0;
    }
    if (v31)
    {
      if (!v19) {
        goto LABEL_20;
      }
    }
    else if ((v19 & 1) != 0 || v27 != v21)
    {
      goto LABEL_20;
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    --v6;
    v9 += 7;
    unint64_t v5 = v26;
    unint64_t v8 = v28;
    if (v30 != v29) {
      goto LABEL_21;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(uint64_t a1, int64_t a2, char a3, uint64_t a4)
{
  return specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))specialized closure #1 in static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))specialized closure #1 in static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:));
}

{
  return specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))specialized closure #1 in static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))specialized closure #1 in static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:));
}

{
  return specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:));
}

uint64_t specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(result + 16);
  if ((unint64_t)v5 >= 0x10)
  {
    double v6 = ceil((double)v5 / 0.75);
    if ((~*(void *)&v6 & 0x7FF0000000000000) != 0)
    {
      if (v6 > -9.22337204e18)
      {
        if (v6 < 9.22337204e18)
        {
          if (v5 + 1 > (uint64_t)v6) {
            uint64_t v7 = v5 + 1;
          }
          else {
            uint64_t v7 = (uint64_t)v6;
          }
          int64_t v8 = 64 - __clz(v7 - 1);
          goto LABEL_10;
        }
LABEL_24:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_24;
  }
  int64_t v8 = 0;
LABEL_10:
  if (v8 <= a2) {
    int64_t v9 = a2;
  }
  else {
    int64_t v9 = v8;
  }
  if ((a3 & 1) == 0) {
    int64_t v8 = v9;
  }
  if (v8 <= a4) {
    unint64_t v10 = a4;
  }
  else {
    unint64_t v10 = v8;
  }
  if (v10 < 5) {
    return 0;
  }
  uint64_t v11 = specialized _HashTable.init(scale:reservedScale:)(v10, a4);
  specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(v4, (void *)(v11 + 16), v11 + 32);
  return v11;
}

uint64_t specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(uint64_t result, int64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = result;
  int64_t v7 = 0;
  uint64_t v8 = *(void *)(result + 16);
  if ((unint64_t)v8 >= 0x10)
  {
    double v9 = ceil((double)v8 / 0.75);
    if ((~*(void *)&v9 & 0x7FF0000000000000) != 0)
    {
      if (v9 > -9.22337204e18)
      {
        if (v9 < 9.22337204e18)
        {
          if (v8 + 1 > (uint64_t)v9) {
            uint64_t v10 = v8 + 1;
          }
          else {
            uint64_t v10 = (uint64_t)v9;
          }
          int64_t v7 = 64 - __clz(v10 - 1);
          goto LABEL_9;
        }
LABEL_23:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
LABEL_9:
  if (v7 <= a2) {
    int64_t v11 = a2;
  }
  else {
    int64_t v11 = v7;
  }
  if (a3) {
    int64_t v11 = v7;
  }
  if (v11 <= a4) {
    unint64_t v12 = a4;
  }
  else {
    unint64_t v12 = v11;
  }
  if (v12 < 5) {
    return 0;
  }
  uint64_t v13 = specialized _HashTable.init(scale:reservedScale:)(v12, a4);
  a5(v13 + 16, v13 + 32, v6);
  return v13;
}

{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;

  uint64_t v6 = result;
  int64_t v7 = *(void *)(result + 16);
  if ((unint64_t)v7 >= 0x10)
  {
    uint64_t v8 = ceil((double)v7 / 0.75);
    if ((~*(void *)&v8 & 0x7FF0000000000000) != 0)
    {
      if (v8 > -9.22337204e18)
      {
        if (v8 < 9.22337204e18)
        {
          if (v7 + 1 > (uint64_t)v8) {
            double v9 = v7 + 1;
          }
          else {
            double v9 = (uint64_t)v8;
          }
          uint64_t v10 = 64 - __clz(v9 - 1);
          goto LABEL_10;
        }
LABEL_24:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v10 = 0;
LABEL_10:
  if (v10 <= a2) {
    int64_t v11 = a2;
  }
  else {
    int64_t v11 = v10;
  }
  if ((a3 & 1) == 0) {
    uint64_t v10 = v11;
  }
  if (v10 <= a4) {
    unint64_t v12 = a4;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12 < 5) {
    return 0;
  }
  uint64_t v13 = specialized _HashTable.init(scale:reservedScale:)(v12, a4);
  a5(v6, v13 + 16, v13 + 32);
  return v13;
}

{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;

  uint64_t v6 = result;
  int64_t v7 = 0;
  uint64_t v8 = *(void *)(result + 16);
  if ((unint64_t)v8 >= 0x10)
  {
    double v9 = ceil((double)v8 / 0.75);
    if ((~*(void *)&v9 & 0x7FF0000000000000) != 0)
    {
      if (v9 > -9.22337204e18)
      {
        if (v9 < 9.22337204e18)
        {
          if (v8 + 1 > (uint64_t)v9) {
            uint64_t v10 = v8 + 1;
          }
          else {
            uint64_t v10 = (uint64_t)v9;
          }
          int64_t v7 = 64 - __clz(v10 - 1);
          goto LABEL_9;
        }
LABEL_23:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
LABEL_9:
  if (v7 <= a2) {
    int64_t v11 = a2;
  }
  else {
    int64_t v11 = v7;
  }
  if (a3) {
    int64_t v11 = v7;
  }
  if (v11 <= a4) {
    unint64_t v12 = a4;
  }
  else {
    unint64_t v12 = v11;
  }
  if (v12 < 5) {
    return 0;
  }
  uint64_t v13 = specialized _HashTable.init(scale:reservedScale:)(v12, a4);
  a5(v13 + 16, v13 + 32, v6);
  return v13;
}

uint64_t specialized OrderedSet.append<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *(void *)(a2 + 16);
  if (!v31) {
    return result;
  }
  uint64_t v30 = a2 + 32;
  swift_retain();
  swift_retain();
  uint64_t v2 = 0;
  do
  {
    uint64_t v3 = (uint64_t *)(v30 + 56 * v2);
    uint64_t v5 = *v3;
    uint64_t v4 = v3[1];
    uint64_t v6 = v3[2];
    uint64_t v7 = v3[3];
    uint64_t v8 = v3[4];
    int v9 = *((unsigned __int8 *)v3 + 40);
    uint64_t v10 = v3[6];
    *(void *)&long long v39 = *v3;
    *((void *)&v39 + 1) = v4;
    uint64_t v40 = v6;
    uint64_t v41 = v7;
    uint64_t v42 = v8;
    char v43 = v9;
    uint64_t v44 = v10;
    uint64_t v11 = *v33;
    uint64_t v12 = v33[1];
    uint64_t v13 = *(void *)(v12 + 16);
    uint64_t v35 = v2;
    uint64_t v38 = v4;
    if (!*v33)
    {
      if (!v13)
      {
        swift_retain();
        swift_bridgeObjectRetain();
LABEL_4:
        specialized OrderedSet._appendNew(_:in:)(&v39, v13);
        goto LABEL_5;
      }
      uint64_t v32 = v10;
      uint64_t v29 = v8;
      uint64_t v34 = v6;
      int v27 = v9 ^ 1;
      char v28 = v9;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v17 = (void *)(v12 + 80);
      while (1)
      {
        if (*(v17 - 6) != v5) {
          goto LABEL_12;
        }
        uint64_t v18 = *(v17 - 4);
        uint64_t v19 = *(v17 - 3);
        char v20 = *((unsigned char *)v17 - 8);
        uint64_t v36 = *(v17 - 2);
        uint64_t v37 = *v17;
        uint64_t v21 = *(uint64_t (**)(uint64_t))(*(void *)*(v17 - 5) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v21(v38) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_12;
        }
        if (v18 == v34 && v19 == v7)
        {
          swift_bridgeObjectRelease();
          swift_release();
          if (v20) {
            goto LABEL_21;
          }
        }
        else
        {
          char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_release();
          if ((v23 & 1) == 0) {
            goto LABEL_12;
          }
          if (v20)
          {
LABEL_21:
            char v24 = v28;
            if (v37 != v32) {
              char v24 = 0;
            }
            if (v24) {
              goto LABEL_5;
            }
            goto LABEL_12;
          }
        }
        int v25 = v27;
        if (v36 != v29) {
          int v25 = 0;
        }
        if (v25 == 1 && v37 == v32) {
          goto LABEL_5;
        }
LABEL_12:
        v17 += 7;
        if (!--v13) {
          goto LABEL_4;
        }
      }
    }
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v39, v12 + 32, v13, (void *)(v11 + 16), v11 + 32);
    char v15 = v14;
    uint64_t v13 = v16;
    swift_release();
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v2 = v35 + 1;
    swift_bridgeObjectRelease();
    swift_release();
  }
  while (v35 + 1 != v31);
  swift_release();
  return swift_release();
}

uint64_t specialized OrderedSet.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized OrderedSet.append<A>(contentsOf:)(a1, a2, a3, a4, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:), (void (*)(_OWORD *, uint64_t))specialized OrderedSet._appendNew(_:in:));
}

{
  return specialized OrderedSet.append<A>(contentsOf:)(a1, a2, a3, a4, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:), (void (*)(_OWORD *, uint64_t))specialized OrderedSet._appendNew(_:in:));
}

{
  return specialized OrderedSet.append<A>(contentsOf:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for SGEdge, (void (*)(void *, Swift::Int))specialized OrderedSet._appendNew(_:in:));
}

{
  return specialized OrderedSet.append<A>(contentsOf:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for SGNode, (void (*)(void *, Swift::Int))specialized OrderedSet._appendNew(_:in:));
}

uint64_t specialized OrderedSet.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t), void (*a6)(_OWORD *, uint64_t))
{
  int64_t v6 = a4 >> 1;
  if (a4 >> 1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v34 = v6;
    while (1)
    {
      if (v7 >= v6)
      {
        __break(1u);
        return result;
      }
      uint64_t v40 = v7;
      uint64_t v10 = a2 + 56 * v7;
      long long v11 = *(_OWORD *)(v10 + 16);
      v43[0] = *(_OWORD *)v10;
      v43[1] = v11;
      long long v44 = *(_OWORD *)(v10 + 32);
      uint64_t v45 = *(void *)(v10 + 48);
      v46[0] = v11;
      uint64_t v12 = *v37;
      uint64_t v13 = v37[1];
      uint64_t v14 = *(void *)(v13 + 16);
      uint64_t v42 = *((void *)&v43[0] + 1);
      if (*v37)
      {
        swift_retain();
        outlined retain of String((uint64_t)v46);
        swift_retain();
        a5(v43, v13 + 32, v14, v12 + 16, v12 + 32);
        char v16 = v15;
        uint64_t v9 = v17;
        swift_release();
        if ((v16 & 1) == 0) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
      if (v14) {
        break;
      }
      swift_retain();
      outlined retain of String((uint64_t)v46);
LABEL_4:
      uint64_t v9 = 0;
LABEL_5:
      a6(v43, v9);
LABEL_6:
      uint64_t v7 = v40 + 1;
      swift_release();
      uint64_t result = outlined release of String((uint64_t)v46);
      int64_t v6 = v34;
      if (v40 + 1 == v34) {
        return swift_unknownObjectRelease();
      }
    }
    uint64_t v38 = *((void *)&v46[0] + 1);
    uint64_t v39 = *(void *)&v46[0];
    uint64_t v18 = *(void *)&v43[0];
    swift_retain();
    outlined retain of String((uint64_t)v46);
    uint64_t v32 = v44;
    uint64_t v36 = v45;
    char v33 = BYTE8(v44);
    int v31 = BYTE8(v44) ^ 1;
    uint64_t v19 = (void *)(v13 + 80);
    while (1)
    {
      if (*(v19 - 6) != v18) {
        goto LABEL_14;
      }
      uint64_t v20 = *(v19 - 4);
      uint64_t v21 = *(v19 - 3);
      uint64_t v41 = *(v19 - 2);
      char v22 = *((unsigned char *)v19 - 8);
      uint64_t v23 = *v19;
      char v24 = *(uint64_t (**)(uint64_t))(*(void *)*(v19 - 5) + 128);
      swift_retain();
      swift_bridgeObjectRetain();
      if ((v24(v42) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_14;
      }
      if (v20 == v39 && v21 == v38)
      {
        swift_bridgeObjectRelease();
        swift_release();
        if (v22) {
          goto LABEL_23;
        }
      }
      else
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_release();
        if ((v26 & 1) == 0) {
          goto LABEL_14;
        }
        if (v22)
        {
LABEL_23:
          char v27 = v33;
          if (v23 != v36) {
            char v27 = 0;
          }
          if (v27) {
            goto LABEL_6;
          }
          goto LABEL_14;
        }
      }
      int v28 = v31;
      if (v41 != v32) {
        int v28 = 0;
      }
      if (v28 == 1 && v23 == v36) {
        goto LABEL_6;
      }
LABEL_14:
      v19 += 7;
      if (!--v14) {
        goto LABEL_4;
      }
    }
  }
  return result;
}

uint64_t specialized OrderedSet.append<A>(contentsOf:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v5 = a4 >> 1;
  if (a4 >> 1 == a3) {
    return result;
  }
  uint64_t v6 = a3;
  swift_unknownObjectRetain();
  while (1)
  {
    if (v6 >= v5) {
      goto LABEL_66;
    }
    uint64_t v8 = *(void *)(a2 + 8 * v6);
    uint64_t v10 = *v4;
    uint64_t v9 = (void *)v4[1];
    long long v11 = v9 + 4;
    if (*v4) {
      break;
    }
    uint64_t v39 = v9[2];
    if (v39)
    {
      if (*v11 == v8) {
        goto LABEL_5;
      }
      if (v39 != 1)
      {
        if (v9[5] == v8) {
          goto LABEL_5;
        }
        if (v39 != 2)
        {
          if (v9[6] == v8) {
            goto LABEL_5;
          }
          if (v39 != 3)
          {
            if (v9[7] == v8) {
              goto LABEL_5;
            }
            uint64_t v40 = v39 - 4;
            uint64_t v41 = v9 + 8;
            while (v40)
            {
              uint64_t v42 = *v41++;
              --v40;
              if (v42 == v8) {
                goto LABEL_5;
              }
            }
          }
        }
      }
    }
    uint64_t v7 = 0;
LABEL_4:
    specialized OrderedSet._appendNew(_:in:)(v8, v7);
LABEL_5:
    if (++v6 == v5)
    {
      return swift_unknownObjectRelease();
    }
  }
  uint64_t v12 = *(void *)(v10 + 16);
  uint64_t v13 = *(void *)(a2 + 8 * v6);
  uint64_t v14 = static Hasher._hash(seed:_:)();
  unint64_t v15 = (1 << v12) - 1;
  if (__OFSUB__(1 << v12, 1)) {
    goto LABEL_67;
  }
  uint64_t v7 = v15 & v14;
  uint64_t v16 = _HashTable.UnsafeHandle._startIterator(bucket:)(v15 & v14, (void *)(v10 + 16), v10 + 32);
  if (!v16)
  {
    uint64_t v8 = v13;
    goto LABEL_4;
  }
  uint64_t v19 = *(uint64_t *)(v10 + 24) >> 6;
  unint64_t v20 = v19 + (v16 ^ v15);
  if (v20 >= v15) {
    uint64_t v21 = (1 << v12) - 1;
  }
  else {
    uint64_t v21 = 0;
  }
  if (v11[v20 - v21] == v13) {
    goto LABEL_5;
  }
  uint64_t v8 = v13;
  char v22 = 0;
  uint64_t v23 = v12 & 0x3F;
  BOOL v24 = __OFADD__(v23 << v23, 64);
  uint64_t v25 = (v23 << v23) + 126;
  if ((v23 << v23) + 64 >= 1) {
    uint64_t v25 = (v23 << v23) + 63;
  }
  uint64_t v26 = v25 >> 6;
  while (1)
  {
    if (++v7 == 1 << v12)
    {
      if (v22) {
        goto LABEL_68;
      }
      uint64_t v7 = 0;
      char v22 = 1;
    }
    if (v18 >= v23) {
      break;
    }
    uint64_t v27 = (v7 * v23) >> 6;
    if (v18)
    {
      if (v24) {
        goto LABEL_65;
      }
      if (v27 + 1 == v26) {
        uint64_t v27 = 0;
      }
      else {
        ++v27;
      }
    }
    uint64_t v28 = v23 - v18;
    if (__OFSUB__(v23, v18)) {
      goto LABEL_63;
    }
    if (v27 == 2 && v23 == 5) {
      uint64_t v30 = 32;
    }
    else {
      uint64_t v30 = 64;
    }
    BOOL v31 = __OFSUB__(v30, v28);
    uint64_t v32 = v30 - v28;
    if (v31) {
      goto LABEL_64;
    }
    unint64_t v33 = *(void *)(v10 + 32 + 8 * v27);
    uint64_t v34 = (v33 << v18) | v17;
    unint64_t v35 = v33 >> v28;
    uint64_t v18 = v32;
    unint64_t v36 = v34 & v15;
    if ((v34 & v15) == 0) {
      goto LABEL_4;
    }
LABEL_41:
    unint64_t v37 = (v36 ^ v15) + v19;
    if (v37 >= v15) {
      uint64_t v38 = (1 << v12) - 1;
    }
    else {
      uint64_t v38 = 0;
    }
    unint64_t v17 = v35;
    if (v11[v37 - v38] == v13) {
      goto LABEL_5;
    }
  }
  BOOL v31 = __OFSUB__(v18, v23);
  v18 -= v23;
  if (!v31)
  {
    unint64_t v35 = v17 >> v23;
    unint64_t v36 = v17 & v15;
    if ((v17 & v15) == 0) {
      goto LABEL_4;
    }
    goto LABEL_41;
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet.append<A>(contentsOf:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void), void (*a6)(void *, Swift::Int))
{
  int64_t v7 = a4 >> 1;
  if (a4 >> 1 == a3) {
    return result;
  }
  uint64_t v8 = v6;
  char v9 = a4;
  uint64_t v10 = a3;
  BOOL v112 = v6;
  unint64_t v116 = a4 >> 1;
  swift_unknownObjectRetain();
  if ((v9 & 1) == 0)
  {
    while (1)
    {
      if (v10 >= v7) {
        goto LABEL_125;
      }
      long long v11 = *(void **)(a2 + 8 * v10);
      uint64_t v13 = *v8;
      uint64_t v12 = v8[1];
      uint64_t v121 = (void **)(v12 + 32);
      if (*v8)
      {
        unint64_t v15 = (void *)(v13 + 16);
        Swift::Int v14 = *(void *)(v13 + 16);
        id v16 = v11;
        swift_retain();
        Swift::Int v17 = NSObject._rawHashValue(seed:)(v14);
        uint64_t v18 = 1 << *(void *)(v13 + 16);
        unint64_t v19 = v18 - 1;
        if (__OFSUB__(v18, 1)) {
          goto LABEL_129;
        }
        uint64_t v113 = v11;
        Swift::Int v20 = v19 & v17;
        uint64_t v119 = v10;
        uint64_t v21 = _HashTable.UnsafeHandle._startIterator(bucket:)(v19 & v17, (void *)(v13 + 16), v13 + 32);
        if (v21)
        {
          unint64_t v24 = v22;
          uint64_t v25 = v23;
          unint64_t v26 = (v21 ^ v19) + (*(uint64_t *)(v13 + 24) >> 6);
          if (v26 >= v19) {
            unint64_t v27 = v19;
          }
          else {
            unint64_t v27 = 0;
          }
          unint64_t v28 = v26 - v27;
          a5(0);
          id v29 = v121[v28];
          LOBYTE(v28) = static NSObject.== infix(_:_:)();

          if ((v28 & 1) == 0)
          {
            char v30 = 0;
            do
            {
              ++v20;
              uint64_t v31 = *v15 & 0x3FLL;
              uint64_t v32 = 1 << *v15;
              if (v20 == v32)
              {
                if (v30) {
                  goto LABEL_131;
                }
                Swift::Int v20 = 0;
                char v30 = 1;
              }
              if (v25 >= v31)
              {
                BOOL v38 = __OFSUB__(v25, v31);
                v25 -= v31;
                if (v38)
                {
                  __break(1u);
                  goto LABEL_120;
                }
                uint64_t v41 = (v32 - 1) & v24;
                v24 >>= v31;
                if (!v41) {
                  goto LABEL_48;
                }
              }
              else
              {
                uint64_t v33 = (v20 * v31) >> 6;
                if (v25)
                {
                  if (__OFADD__(v31 << v31, 64)) {
                    goto LABEL_127;
                  }
                  uint64_t v34 = (v31 << v31) + 126;
                  if ((v31 << v31) + 64 >= 1) {
                    uint64_t v34 = (v31 << v31) + 63;
                  }
                  if (v33 + 1 == v34 >> 6) {
                    uint64_t v33 = 0;
                  }
                  else {
                    ++v33;
                  }
                }
                uint64_t v35 = v31 - v25;
                if (__OFSUB__(v31, v25)) {
                  goto LABEL_121;
                }
                BOOL v36 = v33 == 2 && v31 == 5;
                uint64_t v37 = 64;
                if (v36) {
                  uint64_t v37 = 32;
                }
                BOOL v38 = __OFSUB__(v37, v35);
                uint64_t v39 = v37 - v35;
                if (v38) {
                  goto LABEL_123;
                }
                unint64_t v40 = *(void *)(v13 + 32 + 8 * v33);
                uint64_t v41 = ((v40 << v25) | v24) & (v32 - 1);
                unint64_t v24 = v40 >> v35;
                uint64_t v25 = v39;
                if (!v41)
                {
LABEL_48:
                  uint64_t v8 = v112;
                  goto LABEL_49;
                }
              }
              unint64_t v42 = v32 - 1;
              unint64_t v43 = (v41 ^ v42) + (*(uint64_t *)(v13 + 24) >> 6);
              if (v43 < v42) {
                unint64_t v42 = 0;
              }
              id v44 = v121[v43 - v42];
              char v45 = static NSObject.== infix(_:_:)();
            }
            while ((v45 & 1) == 0);
          }

          swift_release();
          uint64_t v8 = v112;
          uint64_t v10 = v119;
          int64_t v7 = v116;
          goto LABEL_5;
        }
LABEL_49:
        swift_release();
        uint64_t v10 = v119;
        int64_t v7 = v116;
        long long v11 = v113;
        goto LABEL_50;
      }
      Swift::Int v20 = *(void *)(v12 + 16);
      if (!v20) {
        break;
      }
      a5(0);
      uint64_t v46 = *v121;
      char v47 = v11;
      id v48 = v11;
      id v49 = v46;
      char v50 = static NSObject.== infix(_:_:)();

      if ((v50 & 1) == 0)
      {
        if (v20 == 1) {
          goto LABEL_46;
        }
        id v52 = *(id *)(v12 + 40);
        char v53 = static NSObject.== infix(_:_:)();

        if ((v53 & 1) == 0)
        {
          if (v20 == 2) {
            goto LABEL_46;
          }
          id v54 = *(id *)(v12 + 48);
          char v55 = static NSObject.== infix(_:_:)();

          if ((v55 & 1) == 0)
          {
            if (v20 == 3)
            {
LABEL_46:
              Swift::Int v20 = 0;
              goto LABEL_47;
            }
            id v56 = *(id *)(v12 + 56);
            char v57 = static NSObject.== infix(_:_:)();

            if ((v57 & 1) == 0)
            {
              v20 -= 4;
              long long v58 = (void **)(v12 + 64);
              while (v20)
              {
                uint64_t v59 = *v58++;
                id v60 = v59;
                char v61 = static NSObject.== infix(_:_:)();

                --v20;
                if (v61) {
                  goto LABEL_43;
                }
              }
LABEL_47:
              long long v11 = v47;
LABEL_50:
              a6(v11, v20);

              goto LABEL_5;
            }
          }
        }
      }
LABEL_43:

LABEL_5:
      if (++v10 == v7) {
        goto LABEL_116;
      }
    }
    id v51 = v11;
    goto LABEL_50;
  }
  while (1)
  {
    if (v10 >= v7) {
      goto LABEL_126;
    }
    uint64_t v62 = *(void **)(a2 + 8 * v10);
    uint64_t v64 = *v8;
    uint64_t v63 = v8[1];
    uint64_t v122 = (void **)(v63 + 32);
    if (!*v8)
    {
      Swift::Int v71 = *(void *)(v63 + 16);
      if (!v71)
      {
        id v101 = v62;
LABEL_106:
        a6(v62, v71);

        goto LABEL_61;
      }
      a5(0);
      uint64_t v96 = *v122;
      uint64_t v97 = v62;
      id v98 = v62;
      id v99 = v96;
      char v100 = static NSObject.== infix(_:_:)();

      if ((v100 & 1) == 0)
      {
        if (v71 == 1) {
          goto LABEL_102;
        }
        id v102 = *(id *)(v63 + 40);
        char v103 = static NSObject.== infix(_:_:)();

        if ((v103 & 1) == 0)
        {
          if (v71 == 2) {
            goto LABEL_102;
          }
          id v104 = *(id *)(v63 + 48);
          char v105 = static NSObject.== infix(_:_:)();

          if ((v105 & 1) == 0)
          {
            if (v71 == 3)
            {
LABEL_102:
              Swift::Int v71 = 0;
LABEL_103:
              uint64_t v62 = v97;
              goto LABEL_106;
            }
            id v106 = *(id *)(v63 + 56);
            char v107 = static NSObject.== infix(_:_:)();

            if ((v107 & 1) == 0)
            {
              v71 -= 4;
              unint64_t v108 = (void **)(v63 + 64);
              while (v71)
              {
                uint64_t v109 = *v108++;
                id v110 = v109;
                char v111 = static NSObject.== infix(_:_:)();

                --v71;
                if (v111) {
                  goto LABEL_99;
                }
              }
              goto LABEL_103;
            }
          }
        }
      }
LABEL_99:

      goto LABEL_61;
    }
    long long v66 = (void *)(v64 + 16);
    Swift::Int v65 = *(void *)(v64 + 16);
    id v67 = v62;
    swift_retain();
    Swift::Int v68 = NSObject._rawHashValue(seed:)(v65);
    uint64_t v69 = 1 << *(void *)(v64 + 16);
    unint64_t v70 = v69 - 1;
    if (__OFSUB__(v69, 1)) {
      goto LABEL_130;
    }
    BOOL v114 = v62;
    Swift::Int v71 = v70 & v68;
    uint64_t v120 = v10;
    uint64_t v72 = _HashTable.UnsafeHandle._startIterator(bucket:)(v70 & v68, (void *)(v64 + 16), v64 + 32);
    if (!v72)
    {
LABEL_105:
      swift_release();
      uint64_t v10 = v120;
      int64_t v7 = v116;
      uint64_t v62 = v114;
      goto LABEL_106;
    }
    unint64_t v75 = v73;
    uint64_t v76 = v74;
    unint64_t v77 = (v72 ^ v70) + (*(uint64_t *)(v64 + 24) >> 6);
    unint64_t v78 = v77 >= v70 ? v70 : 0;
    unint64_t v79 = v77 - v78;
    a5(0);
    id v80 = v122[v79];
    LOBYTE(v79) = static NSObject.== infix(_:_:)();

    if ((v79 & 1) == 0) {
      break;
    }
LABEL_60:

    swift_release();
    uint64_t v8 = v112;
    uint64_t v10 = v120;
    int64_t v7 = v116;
LABEL_61:
    if (++v10 == v7)
    {
LABEL_116:
      return swift_unknownObjectRelease();
    }
  }
  char v81 = 0;
  while (1)
  {
    ++v71;
    uint64_t v82 = *v66 & 0x3FLL;
    uint64_t v83 = 1 << *v66;
    if (v71 == v83)
    {
      if (v81) {
        goto LABEL_131;
      }
      Swift::Int v71 = 0;
      char v81 = 1;
    }
    if (v76 >= v82) {
      break;
    }
    uint64_t v84 = (v71 * v82) >> 6;
    if (v76)
    {
      if (__OFADD__(v82 << v82, 64)) {
        goto LABEL_128;
      }
      uint64_t v85 = (v82 << v82) + 126;
      if ((v82 << v82) + 64 >= 1) {
        uint64_t v85 = (v82 << v82) + 63;
      }
      if (v84 + 1 == v85 >> 6) {
        uint64_t v84 = 0;
      }
      else {
        ++v84;
      }
    }
    uint64_t v86 = v82 - v76;
    if (__OFSUB__(v82, v76)) {
      goto LABEL_122;
    }
    BOOL v87 = v84 == 2 && v82 == 5;
    uint64_t v88 = 64;
    if (v87) {
      uint64_t v88 = 32;
    }
    BOOL v38 = __OFSUB__(v88, v86);
    uint64_t v89 = v88 - v86;
    if (v38) {
      goto LABEL_124;
    }
    unint64_t v90 = *(void *)(v64 + 32 + 8 * v84);
    uint64_t v91 = ((v90 << v76) | v75) & (v83 - 1);
    unint64_t v75 = v90 >> v86;
    uint64_t v76 = v89;
    if (!v91) {
      goto LABEL_104;
    }
LABEL_93:
    unint64_t v92 = v83 - 1;
    unint64_t v93 = (v91 ^ v92) + (*(uint64_t *)(v64 + 24) >> 6);
    if (v93 < v92) {
      unint64_t v92 = 0;
    }
    id v94 = v122[v93 - v92];
    char v95 = static NSObject.== infix(_:_:)();

    if (v95) {
      goto LABEL_60;
    }
  }
  BOOL v38 = __OFSUB__(v76, v82);
  v76 -= v82;
  if (!v38)
  {
    uint64_t v91 = (v83 - 1) & v75;
    v75 >>= v82;
    if (!v91)
    {
LABEL_104:
      uint64_t v8 = v112;
      goto LABEL_105;
    }
    goto LABEL_93;
  }
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized OrderedDictionary<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::UInt v7 = *(void *)(a4 + 16);
  Hasher._combine(_:)(v7);
  Swift::UInt v20 = v7;
  if (v7)
  {
    uint64_t v18 = a3 + 32;
    uint64_t v19 = *(void *)(a3 + 16);
    swift_retain();
    swift_retain();
    uint64_t v8 = a4;
    swift_retain();
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      if (v19 == v10)
      {
        __break(1u);
        return;
      }
      Swift::UInt v11 = *(void *)(v18 + 8 * v10++);
      uint64_t v12 = *(void *)(v8 + v9 + 64);
      uint64_t v13 = *(void *)(v8 + v9 + 72);
      uint64_t v14 = *(void *)(v8 + v9 + 48);
      uint64_t v15 = *(void *)(v8 + v9 + 56);
      uint64_t v16 = *(void *)(v8 + v9 + 32);
      uint64_t v17 = *(void *)(v8 + v9 + 40);
      Hasher._combine(_:)(v11);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      specialized OrderedDictionary<>.hash(into:)(a1, v16, v17, v14);
      swift_release();
      swift_release();
      swift_release();
      swift_retain();
      swift_retain();
      swift_retain();
      specialized OrderedDictionary<>.hash(into:)(a1, v15, v12, v13);
      swift_release();
      swift_release();
      swift_release();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      v9 += 48;
    }
    while (v20 != v10);
    swift_release();
    swift_release();
    swift_release();
  }
}

{
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  Swift::UInt v12;
  void (*v13)(uint64_t);
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  Swift::UInt v17;
  int v18;
  Swift::UInt v19;
  uint64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t vars8;

  uint64_t v6 = *(void *)(a4 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    Swift::UInt v7 = *(void *)(a3 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v8 = 0;
    uint64_t v15 = a3;
    uint64_t v16 = a4 + 80;
    do
    {
      if (!v7)
      {
        __break(1u);
        return;
      }
      uint64_t v21 = v6;
      uint64_t v17 = *(void *)(a3 + v8 + 64);
      uint64_t v19 = *(void *)(a3 + v8 + 80);
      Swift::UInt v20 = v8;
      uint64_t v18 = *(unsigned __int8 *)(a3 + v8 + 72);
      uint64_t v9 = *(void *)(a3 + v8 + 40);
      uint64_t v10 = *(void *)(v16 + v8 - 48);
      Swift::UInt v11 = *(void *)(v16 + v8 - 8);
      unint64_t v22 = *(void *)(v16 + v8 - 40);
      uint64_t v23 = *(void *)(v16 + v8 - 16);
      uint64_t v12 = *(void *)(v16 + v8);
      Hasher._combine(_:)(*(void *)(a3 + v8 + 32));
      uint64_t v13 = *(void (**)(uint64_t))(*(void *)v9 + 120);
      swift_retain_n();
      swift_bridgeObjectRetain();
      outlined copy of Output?(v10, v22);
      v13(a1);
      swift_release();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v18 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v17);
      }
      Hasher._combine(_:)(v19);
      if (v22)
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v10);
        uint64_t v14 = *(void (**)(uint64_t))(*(void *)v22 + 120);
        swift_retain();
        outlined copy of Output?(v10, v22);
        v14(a1);
        swift_release();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (v11)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v23);
        }
        a3 = v15;
        Hasher._combine(_:)(v12);
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of Input?(v10, v22);
      }
      else
      {
        Hasher._combine(_:)(0);
        a3 = v15;
      }
      swift_bridgeObjectRelease();
      swift_release();
      --v7;
      uint64_t v8 = v20 + 56;
      uint64_t v6 = v21 - 1;
    }
    while (v21 != 1);
    swift_release();
    swift_release();
    swift_release();
  }
}

{
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  Swift::UInt v14;
  uint64_t v15;
  Swift::UInt *v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  uint64_t v23;
  Swift::UInt v24;
  Swift::UInt v25;
  int v26;
  Swift::UInt v27;
  Swift::UInt v28;
  uint64_t vars8;

  Swift::UInt v7 = *(void *)(a4 + 16);
  Hasher._combine(_:)(v7);
  unint64_t v22 = v7;
  if (v7)
  {
    uint64_t v19 = a4 + 32;
    Swift::UInt v20 = a3 + 32;
    uint64_t v21 = *(void *)(a3 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v8 = 0;
    do
    {
      if (v8 == v21) {
        goto LABEL_22;
      }
      uint64_t v9 = v20 + 56 * v8;
      uint64_t v25 = *(void *)(v9 + 32);
      unint64_t v27 = *(void *)(v9 + 48);
      uint64_t v10 = *(unsigned __int8 *)(v9 + 40);
      Swift::UInt v11 = *(void *)(v9 + 8);
      uint64_t v23 = v8;
      uint64_t v12 = *(void *)(v19 + 16 * v8 + 8);
      Hasher._combine(_:)(*(void *)v9);
      uint64_t v13 = *(void (**)(uint64_t))(*(void *)v11 + 120);
      swift_retain();
      swift_retain_n();
      swift_bridgeObjectRetain();
      swift_retain();
      v13(a1);
      swift_release();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v10 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v25);
      }
      Hasher._combine(_:)(v27);
      uint64_t v14 = *(void *)(v12 + 16);
      Hasher._combine(_:)(v14);
      if (v14)
      {
        uint64_t v15 = *(void *)(v12 + 16);
        swift_retain();
        uint64_t v16 = (Swift::UInt *)(v12 + 80);
        while (v15)
        {
          uint64_t v17 = *(v16 - 5);
          unint64_t v24 = *(v16 - 2);
          unint64_t v26 = *((unsigned __int8 *)v16 - 8);
          unint64_t v28 = *v16;
          Hasher._combine(_:)(*(v16 - 6));
          uint64_t v18 = *(void (**)(uint64_t))(*(void *)v17 + 120);
          swift_retain();
          v18(a1);
          swift_release();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          if (v26 == 1)
          {
            Hasher._combine(_:)(0);
          }
          else
          {
            Hasher._combine(_:)(1u);
            Hasher._combine(_:)(v24);
          }
          Hasher._combine(_:)(v28);
          --v15;
          v16 += 7;
          if (!--v14)
          {
            swift_release();
            swift_release_n();
            goto LABEL_4;
          }
        }
        __break(1u);
LABEL_22:
        __break(1u);
        return;
      }
      swift_release();
      swift_release();
LABEL_4:
      uint64_t v8 = v23 + 1;
      swift_bridgeObjectRelease();
      swift_release();
    }
    while (v23 + 1 != v22);
    swift_release();
    swift_release();
    swift_release();
  }
}

unint64_t specialized OrderedDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unint64_t result = specialized OrderedSet._find(_:)(a1, a2, a3, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if (v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    goto LABEL_6;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)(a4 + 16))
  {
    uint64_t v9 = (void *)(a4 + 48 * result);
    uint64_t v10 = v9[4];
    uint64_t v11 = v9[5];
    uint64_t v12 = v9[6];
    uint64_t v13 = v9[7];
    uint64_t v14 = v9[8];
    uint64_t v15 = v9[9];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    unint64_t result = swift_retain();
LABEL_6:
    *a5 = v10;
    a5[1] = v11;
    a5[2] = v12;
    a5[3] = v13;
    a5[4] = v14;
    a5[5] = v15;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8 = a3 + 32;
  uint64_t v9 = *(void *)(a3 + 16);
  if (a2)
  {
    uint64_t v10 = (void *)(a2 + 16);
    uint64_t v11 = a2 + 32;
    swift_retain();
    unint64_t v12 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, v8, v9, v10, v11);
    char v14 = v13;
    uint64_t result = swift_release();
    if ((v14 & 1) == 0)
    {
      if ((v12 & 0x8000000000000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
LABEL_9:
    uint64_t v17 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v18 = 1;
    goto LABEL_10;
  }
  uint64_t result = specialized Collection<>.firstIndex(of:)(a1, a3 + 32, *(void *)(a3 + 16));
  if (v24) {
    goto LABEL_9;
  }
  unint64_t v12 = result;
  if (result < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_4:
  if (v12 < *(void *)(a4 + 16))
  {
    uint64_t v16 = (void *)(a4 + 56 * v12);
    uint64_t v17 = v16[4];
    uint64_t v18 = v16[5];
    uint64_t v19 = v16[6];
    uint64_t v20 = v16[7];
    uint64_t v21 = v16[8];
    uint64_t v22 = v16[9];
    uint64_t v23 = v16[10];
    uint64_t result = outlined copy of Output?(v17, v18);
LABEL_10:
    *a5 = v17;
    a5[1] = v18;
    a5[2] = v19;
    a5[3] = v20;
    a5[4] = v21;
    a5[5] = v22;
    a5[6] = v23;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedDictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a3 + 32;
  uint64_t v7 = *(void *)(a3 + 16);
  if (a2)
  {
    uint64_t v8 = (void *)(a2 + 16);
    uint64_t v9 = a2 + 32;
    swift_retain();
    unint64_t v10 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, v6, v7, v8, v9);
    char v12 = v11;
    uint64_t result = swift_release();
    if ((v12 & 1) == 0)
    {
      if ((v10 & 0x8000000000000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
    return 0;
  }
  uint64_t result = specialized Collection<>.firstIndex(of:)(a1, a3 + 32, *(void *)(a3 + 16));
  if (v15) {
    return 0;
  }
  unint64_t v10 = result;
  if (result < 0)
  {
LABEL_8:
    __break(1u);
    return 0;
  }
LABEL_4:
  if (v10 < *(void *)(a4 + 16))
  {
    uint64_t v14 = *(void *)(a4 + 16 * v10 + 32);
    swift_retain();
    swift_retain();
    return v14;
  }
  __break(1u);
  return result;
}

unint64_t specialized OrderedDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  unint64_t result = specialized OrderedSet._find(_:)(a1, a2, a3, a4);
  if (v9)
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    goto LABEL_6;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)(a5 + 16))
  {
    unint64_t v10 = (void *)(a5 + 48 * result);
    uint64_t v12 = v10[4];
    uint64_t v11 = v10[5];
    uint64_t v13 = v10[6];
    uint64_t v14 = v10[7];
    uint64_t v15 = v10[8];
    uint64_t v16 = v10[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = outlined copy of MaterialXAvailability(v15, v16);
LABEL_6:
    *a6 = v12;
    a6[1] = v11;
    a6[2] = v13;
    a6[3] = v14;
    a6[4] = v15;
    a6[5] = v16;
    return result;
  }
  __break(1u);
  return result;
}

void Graph.createSubgraph(labeled:inputs:outputs:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7 = *(void *)(v5 + 72);
  unint64_t v8 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v5 + 72) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Graph.init(id:label:inputs:outputs:)(v8, a1, a2, a3, a4, (uint64_t)v18);
    long long v13 = v19[0];
    a5[8] = v18[8];
    a5[9] = v13;
    *(_OWORD *)((char *)a5 + 153) = *(_OWORD *)((char *)v19 + 9);
    long long v14 = v18[5];
    a5[4] = v18[4];
    a5[5] = v14;
    long long v15 = v18[7];
    a5[6] = v18[6];
    a5[7] = v15;
    long long v16 = v18[1];
    *a5 = v18[0];
    a5[1] = v16;
    long long v17 = v18[3];
    a5[2] = v18[2];
    a5[3] = v17;
  }
}

__n128 Graph.init(label:inputs:outputs:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  specialized Graph.init(id:label:inputs:outputs:)(0, a1, a2, a3, a4, (uint64_t)v11);
  long long v6 = v12[0];
  *(_OWORD *)(a5 + 128) = v11[8];
  *(_OWORD *)(a5 + 144) = v6;
  *(_OWORD *)(a5 + 153) = *(_OWORD *)((char *)v12 + 9);
  long long v7 = v11[5];
  *(_OWORD *)(a5 + 64) = v11[4];
  *(_OWORD *)(a5 + 80) = v7;
  long long v8 = v11[7];
  *(_OWORD *)(a5 + 96) = v11[6];
  *(_OWORD *)(a5 + 112) = v8;
  long long v9 = v11[1];
  *(_OWORD *)a5 = v11[0];
  *(_OWORD *)(a5 + 16) = v9;
  __n128 result = (__n128)v11[3];
  *(_OWORD *)(a5 + 32) = v11[2];
  *(__n128 *)(a5 + 48) = result;
  return result;
}

unint64_t Graph.node(withID:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result == -7)
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    char v7 = 0;
    long long v8 = 0uLL;
LABEL_6:
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(_OWORD *)(a2 + 24) = v8;
    *(unsigned char *)(a2 + 40) = v7;
    return result;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = *(void *)(v2 + 64);
    if (*(void *)(v9 + 16) > result)
    {
      uint64_t v10 = v9 + 48 * result;
      unint64_t v4 = *(void *)(v10 + 32);
      uint64_t v5 = *(void *)(v10 + 40);
      uint64_t v6 = *(void *)(v10 + 48);
      long long v11 = *(_OWORD *)(v10 + 56);
      char v7 = *(unsigned char *)(v10 + 72);
      outlined copy of NodePersonality(v4);
      swift_bridgeObjectRetain();
      __n128 result = swift_bridgeObjectRetain();
      long long v8 = v11;
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t ShaderGraphNode.input(labeled:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v7 = result;
    uint64_t v19 = a3;
    long long v8 = (uint64_t *)(v4 + 80);
    while (1)
    {
      uint64_t v9 = *(v8 - 5);
      uint64_t v20 = *(v8 - 6);
      uint64_t v10 = *(v8 - 4);
      uint64_t v11 = *(v8 - 3);
      uint64_t v12 = *(v8 - 2);
      uint64_t v13 = *((unsigned __int8 *)v8 - 8);
      uint64_t v14 = *v8;
      if (v10 == v7 && v11 == a2) {
        break;
      }
      uint64_t v16 = v7;
      uint64_t v17 = a2;
      __n128 result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_12;
      }
      v8 += 7;
      --v5;
      a2 = v17;
      uint64_t v7 = v16;
      if (!v5)
      {
        uint64_t v18 = 0;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        a3 = v19;
        goto LABEL_13;
      }
    }
    uint64_t v10 = v7;
    uint64_t v11 = a2;
LABEL_12:
    swift_retain();
    __n128 result = swift_bridgeObjectRetain();
    a3 = v19;
    uint64_t v18 = v20;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
LABEL_13:
  *a3 = v18;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  a3[4] = v12;
  a3[5] = v13;
  a3[6] = v14;
  return result;
}

__n128 Edge.init(from:to:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result = *(__n128 *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  char v6 = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  long long v8 = *(_OWORD *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v8;
  *(void *)(a3 + 32) = v9;
  *(unsigned char *)(a3 + 40) = v10 & 1;
  *(void *)(a3 + 48) = v11;
  *(__n128 *)(a3 + 56) = result;
  *(_OWORD *)(a3 + 72) = v4;
  *(void *)(a3 + 88) = v5;
  *(unsigned char *)(a3 + 96) = v6 & 1;
  *(void *)(a3 + 104) = v7;
  return result;
}

uint64_t Graph.insert<A>(_:)()
{
  return Sequence.forEach(_:)();
}

void specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    goto LABEL_131;
  }
  if (v5 < 1) {
    return;
  }
  unint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = v10 - v5;
  if ((uint64_t)v10 < v5) {
    ++v11;
  }
  if (a1 < v11 >> 1)
  {
    if (specialized static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3F) / 3 <= a1)
    {
      uint64_t v74 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a4, (uint64_t)a5);
      if (v74)
      {
        unint64_t v75 = ~(-1 << *a4);
        uint64_t v76 = a4[1] >> 6;
        unint64_t v77 = v76 + (v74 ^ v75);
        uint64_t v78 = v77 >= v75 ? ~(-1 << *a4) : 0;
        int64_t v79 = v77 - v78;
        if (v79 < a1)
        {
          BOOL v36 = __OFADD__(v79, v5);
          int64_t v80 = v79 + v5;
          if (v36) {
            goto LABEL_129;
          }
          *a5 ^= ((v75 & ((v80 - v76) >> 63)) + v80 - v76) ^ v75 ^ v74;
        }
      }
      _HashTable.BucketIterator.advance()();
    }
    else
    {
      if (a1 < 0) {
        goto LABEL_134;
      }
      if (v10 < a1) {
        goto LABEL_135;
      }
      if (a1)
      {
        uint64_t v12 = 0;
        uint64_t v88 = a3 + 32;
        do
        {
          Swift::UInt v13 = *(void *)(v88 + 8 * v12);
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v13);
          Swift::Int v14 = Hasher._finalize()();
          uint64_t v15 = *a4;
          uint64_t v16 = 1 << *a4;
          unint64_t v17 = v16 - 1;
          if (__OFSUB__(v16, 1)) {
            goto LABEL_125;
          }
          Swift::Int v18 = v17 & v14;
          uint64_t v19 = _HashTable.UnsafeHandle._startIterator(bucket:)(v17 & v14, a4, (uint64_t)a5);
          if (v19)
          {
            uint64_t v22 = a4[1] >> 6;
            unint64_t v23 = v22 + (v19 ^ v17);
            uint64_t v24 = v23 >= v17 ? v16 - 1 : 0;
            if (v23 - v24 != v12)
            {
              char v25 = 0;
              uint64_t v26 = v15 & 0x3F;
              BOOL v27 = __OFADD__(v26 << v26, 64);
              uint64_t v28 = (v26 << v26) + 126;
              if ((v26 << v26) + 64 >= 1) {
                uint64_t v28 = (v26 << v26) + 63;
              }
              uint64_t v29 = v28 >> 6;
              do
              {
                if (++v18 == v16)
                {
                  if (v25) {
                    goto LABEL_139;
                  }
                  Swift::Int v18 = 0;
                  char v25 = 1;
                }
                if (v21 >= v26)
                {
                  BOOL v36 = __OFSUB__(v21, v26);
                  v21 -= v26;
                  if (v36)
                  {
                    __break(1u);
LABEL_118:
                    __break(1u);
LABEL_119:
                    __break(1u);
LABEL_120:
                    __break(1u);
LABEL_121:
                    __break(1u);
                    goto LABEL_122;
                  }
                  unint64_t v40 = v20 >> v26;
                  unint64_t v41 = v20 & v17;
                  if ((v20 & v17) == 0) {
                    break;
                  }
                }
                else
                {
                  uint64_t v32 = (v18 * v26) >> 6;
                  if (v21)
                  {
                    if (v27) {
                      goto LABEL_123;
                    }
                    if (v32 + 1 == v29) {
                      uint64_t v32 = 0;
                    }
                    else {
                      ++v32;
                    }
                  }
                  uint64_t v33 = v26 - v21;
                  if (__OFSUB__(v26, v21)) {
                    goto LABEL_118;
                  }
                  if (v32 == 2 && v26 == 5) {
                    uint64_t v35 = 32;
                  }
                  else {
                    uint64_t v35 = 64;
                  }
                  BOOL v36 = __OFSUB__(v35, v33);
                  uint64_t v37 = v35 - v33;
                  if (v36) {
                    goto LABEL_119;
                  }
                  unint64_t v38 = a5[v32];
                  uint64_t v39 = (v38 << v21) | v20;
                  unint64_t v40 = v38 >> v33;
                  uint64_t v21 = v37;
                  unint64_t v41 = v39 & v17;
                  if ((v39 & v17) == 0) {
                    break;
                  }
                }
                unint64_t v30 = v22 + (v41 ^ v17);
                if (v30 >= v17) {
                  uint64_t v31 = v16 - 1;
                }
                else {
                  uint64_t v31 = 0;
                }
                unint64_t v20 = v40;
              }
              while (v30 - v31 != v12);
            }
          }
          uint64_t v42 = v12 + v5;
          if (__OFADD__(v12, v5)) {
            goto LABEL_126;
          }
          ++v12;
          _HashTable.BucketIterator.currentValue.setter(v42, 0);
        }
        while (v12 != a1);
      }
    }
    uint64_t v43 = a4[1] >> 6;
    if (__OFSUB__(v43, v5)) {
      goto LABEL_133;
    }
    _HashTable.Header.bias.setter(v43 - v5);
    return;
  }
  int64_t v44 = a2;
  if (__OFSUB__(v10, a2)) {
    goto LABEL_132;
  }
  if ((uint64_t)(v10 - a2) >= specialized static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3F) / 3)
  {
    uint64_t v81 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a4, (uint64_t)a5);
    if (v81)
    {
      unint64_t v82 = ~(-1 << *a4);
      uint64_t v83 = a4[1] >> 6;
      unint64_t v84 = v83 + (v81 ^ v82);
      uint64_t v85 = v84 >= v82 ? ~(-1 << *a4) : 0;
      int64_t v86 = v84 - v85;
      if (v86 >= v44)
      {
        BOOL v36 = __OFSUB__(v86, v5);
        int64_t v87 = v86 - v5;
        if (v36) {
          goto LABEL_130;
        }
        *a5 ^= ((v82 & ((v87 - v83) >> 63)) + v87 - v83) ^ v82 ^ v81;
      }
    }
    _HashTable.BucketIterator.advance()();
    return;
  }
  if ((uint64_t)v10 < v44) {
    goto LABEL_136;
  }
  if (v44 < 0)
  {
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v10 == v44) {
    return;
  }
  if (v10 <= v44) {
    goto LABEL_138;
  }
  uint64_t v89 = a3 + 32;
  do
  {
    Swift::UInt v45 = *(void *)(v89 + 8 * v44);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v45);
    Swift::Int v46 = Hasher._finalize()();
    uint64_t v47 = *a4;
    uint64_t v48 = 1 << *a4;
    unint64_t v49 = v48 - 1;
    if (__OFSUB__(v48, 1)) {
      goto LABEL_127;
    }
    Swift::Int v50 = v49 & v46;
    uint64_t v51 = _HashTable.UnsafeHandle._startIterator(bucket:)(v49 & v46, a4, (uint64_t)a5);
    if (v51)
    {
      uint64_t v54 = a4[1] >> 6;
      unint64_t v55 = v54 + (v51 ^ v49);
      uint64_t v56 = v55 >= v49 ? v48 - 1 : 0;
      if (v55 - v56 != v44)
      {
        char v57 = 0;
        uint64_t v58 = v47 & 0x3F;
        BOOL v59 = __OFADD__(v58 << v58, 64);
        uint64_t v60 = (v58 << v58) + 126;
        if ((v58 << v58) + 64 >= 1) {
          uint64_t v60 = (v58 << v58) + 63;
        }
        uint64_t v61 = v60 >> 6;
        do
        {
          if (++v50 == v48)
          {
            if (v57) {
              goto LABEL_139;
            }
            Swift::Int v50 = 0;
            char v57 = 1;
          }
          if (v53 >= v58)
          {
            BOOL v36 = __OFSUB__(v53, v58);
            v53 -= v58;
            if (v36) {
              goto LABEL_120;
            }
            unint64_t v71 = v52 >> v58;
            unint64_t v72 = v52 & v49;
            if ((v52 & v49) == 0) {
              break;
            }
          }
          else
          {
            uint64_t v64 = (v50 * v58) >> 6;
            if (v53)
            {
              if (v59) {
                goto LABEL_124;
              }
              if (v64 + 1 == v61) {
                uint64_t v64 = 0;
              }
              else {
                ++v64;
              }
            }
            uint64_t v65 = v58 - v53;
            if (__OFSUB__(v58, v53)) {
              goto LABEL_121;
            }
            if (v64 == 2 && v58 == 5) {
              uint64_t v67 = 32;
            }
            else {
              uint64_t v67 = 64;
            }
            BOOL v36 = __OFSUB__(v67, v65);
            uint64_t v68 = v67 - v65;
            if (v36)
            {
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
              goto LABEL_137;
            }
            unint64_t v69 = a5[v64];
            uint64_t v70 = (v69 << v53) | v52;
            unint64_t v71 = v69 >> v65;
            uint64_t v53 = v68;
            unint64_t v72 = v70 & v49;
            if ((v70 & v49) == 0) {
              break;
            }
          }
          unint64_t v62 = v54 + (v72 ^ v49);
          if (v62 >= v49) {
            uint64_t v63 = v48 - 1;
          }
          else {
            uint64_t v63 = 0;
          }
          unint64_t v52 = v71;
        }
        while (v62 - v63 != v44);
      }
    }
    uint64_t v73 = v44 - v5;
    if (__OFSUB__(v44, v5)) {
      goto LABEL_128;
    }
    ++v44;
    _HashTable.BucketIterator.currentValue.setter(v73, 0);
  }
  while (v44 != v10);
}

{
  uint64_t v5;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  Swift::Int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  Swift::Int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int64_t v83;
  int64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int64_t v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[8];

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    goto LABEL_139;
  }
  if (v5 < 1) {
    return;
  }
  unint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = v10 - v5;
  if ((uint64_t)v10 < v5) {
    ++v11;
  }
  if (a1 < v11 >> 1)
  {
    if (specialized static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3F) / 3 <= a1)
    {
      uint64_t v78 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a4, (uint64_t)a5);
      if (v78)
      {
        int64_t v79 = ~(-1 << *a4);
        int64_t v80 = a4[1] >> 6;
        uint64_t v81 = v80 + (v78 ^ v79);
        unint64_t v82 = v81 >= v79 ? ~(-1 << *a4) : 0;
        uint64_t v83 = v81 - v82;
        if (v83 < a1)
        {
          unint64_t v38 = __OFADD__(v83, v5);
          unint64_t v84 = v83 + v5;
          if (v38) {
            goto LABEL_137;
          }
          *a5 ^= ((v79 & ((v84 - v80) >> 63)) + v84 - v80) ^ v79 ^ v78;
        }
      }
      _HashTable.BucketIterator.advance()();
    }
    else
    {
      if (a1 < 0) {
        goto LABEL_142;
      }
      if (v10 < a1) {
        goto LABEL_143;
      }
      if (a1)
      {
        unint64_t v92 = a3 + 32;
        swift_retain();
        uint64_t v12 = 0;
        while (1)
        {
          outlined init with copy of WeakBox<SGEdge>(v92 + 8 * v12, (uint64_t)v94);
          Hasher.init(_seed:)();
          Swift::UInt v13 = MEMORY[0x261185960](v94);
          if (v13)
          {
            Swift::Int v14 = (void *)v13;
            Hasher._combine(_:)(1u);
            uint64_t v15 = v14;
            NSObject.hash(into:)();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          uint64_t v16 = Hasher._finalize()();
          unint64_t v17 = *a4;
          Swift::Int v18 = 1 << *a4;
          uint64_t v19 = v18 - 1;
          if (__OFSUB__(v18, 1)) {
            goto LABEL_133;
          }
          unint64_t v20 = v19 & v16;
          uint64_t v21 = _HashTable.UnsafeHandle._startIterator(bucket:)(v19 & v16, a4, (uint64_t)a5);
          if (v21)
          {
            uint64_t v24 = a4[1] >> 6;
            char v25 = v24 + (v21 ^ v19);
            uint64_t v26 = v25 >= v19 ? v18 - 1 : 0;
            if (v25 - v26 != v12)
            {
              BOOL v27 = 0;
              uint64_t v28 = v17 & 0x3F;
              uint64_t v29 = __OFADD__(v28 << v28, 64);
              unint64_t v30 = (v28 << v28) + 126;
              if ((v28 << v28) + 64 >= 1) {
                unint64_t v30 = (v28 << v28) + 63;
              }
              uint64_t v31 = v30 >> 6;
              do
              {
                if (++v20 == v18)
                {
                  if (v27) {
                    goto LABEL_147;
                  }
                  unint64_t v20 = 0;
                  BOOL v27 = 1;
                }
                if (v23 >= v28)
                {
                  unint64_t v38 = __OFSUB__(v23, v28);
                  v23 -= v28;
                  if (v38)
                  {
                    __break(1u);
LABEL_126:
                    __break(1u);
LABEL_127:
                    __break(1u);
LABEL_128:
                    __break(1u);
LABEL_129:
                    __break(1u);
                    goto LABEL_130;
                  }
                  uint64_t v42 = v22 >> v28;
                  uint64_t v43 = v22 & v19;
                  if ((v22 & v19) == 0) {
                    break;
                  }
                }
                else
                {
                  uint64_t v34 = (v20 * v28) >> 6;
                  if (v23)
                  {
                    if (v29) {
                      goto LABEL_131;
                    }
                    if (v34 + 1 == v31) {
                      uint64_t v34 = 0;
                    }
                    else {
                      ++v34;
                    }
                  }
                  uint64_t v35 = v28 - v23;
                  if (__OFSUB__(v28, v23)) {
                    goto LABEL_126;
                  }
                  if (v34 == 2 && v28 == 5) {
                    uint64_t v37 = 32;
                  }
                  else {
                    uint64_t v37 = 64;
                  }
                  unint64_t v38 = __OFSUB__(v37, v35);
                  uint64_t v39 = v37 - v35;
                  if (v38) {
                    goto LABEL_127;
                  }
                  unint64_t v40 = a5[v34];
                  unint64_t v41 = (v40 << v23) | v22;
                  uint64_t v42 = v40 >> v35;
                  unint64_t v23 = v39;
                  uint64_t v43 = v41 & v19;
                  if ((v41 & v19) == 0) {
                    break;
                  }
                }
                uint64_t v32 = v24 + (v43 ^ v19);
                if (v32 >= v19) {
                  uint64_t v33 = v18 - 1;
                }
                else {
                  uint64_t v33 = 0;
                }
                uint64_t v22 = v42;
              }
              while (v32 - v33 != v12);
            }
          }
          int64_t v44 = v12 + v5;
          if (__OFADD__(v12, v5)) {
            goto LABEL_134;
          }
          ++v12;
          _HashTable.BucketIterator.currentValue.setter(v44, 0);
          outlined destroy of WeakBox<SGEdge>((uint64_t)v94);
          if (v12 == a1)
          {
            swift_release();
            break;
          }
        }
      }
    }
    Swift::UInt v45 = a4[1] >> 6;
    if (__OFSUB__(v45, v5)) {
      goto LABEL_141;
    }
    _HashTable.Header.bias.setter(v45 - v5);
    return;
  }
  Swift::Int v46 = a2;
  if (__OFSUB__(v10, a2)) {
    goto LABEL_140;
  }
  if ((uint64_t)(v10 - a2) >= specialized static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3F) / 3)
  {
    uint64_t v85 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a4, (uint64_t)a5);
    if (v85)
    {
      int64_t v86 = ~(-1 << *a4);
      int64_t v87 = a4[1] >> 6;
      uint64_t v88 = v87 + (v85 ^ v86);
      uint64_t v89 = v88 >= v86 ? ~(-1 << *a4) : 0;
      unint64_t v90 = v88 - v89;
      if (v90 >= v46)
      {
        unint64_t v38 = __OFSUB__(v90, v5);
        uint64_t v91 = v90 - v5;
        if (v38) {
          goto LABEL_138;
        }
        *a5 ^= ((v86 & ((v91 - v87) >> 63)) + v91 - v87) ^ v86 ^ v85;
      }
    }
    _HashTable.BucketIterator.advance()();
    return;
  }
  if ((uint64_t)v10 < v46) {
    goto LABEL_144;
  }
  if (v46 < 0)
  {
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v10 == v46) {
    return;
  }
  if (v10 <= v46) {
    goto LABEL_146;
  }
  unint64_t v93 = a3 + 32;
  swift_retain();
  do
  {
    outlined init with copy of WeakBox<SGEdge>(v93 + 8 * v46, (uint64_t)v94);
    Hasher.init(_seed:)();
    uint64_t v47 = MEMORY[0x261185960](v94);
    if (v47)
    {
      uint64_t v48 = (void *)v47;
      Hasher._combine(_:)(1u);
      unint64_t v49 = v48;
      NSObject.hash(into:)();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    Swift::Int v50 = Hasher._finalize()();
    uint64_t v51 = *a4;
    unint64_t v52 = 1 << *a4;
    uint64_t v53 = v52 - 1;
    if (__OFSUB__(v52, 1)) {
      goto LABEL_135;
    }
    uint64_t v54 = v53 & v50;
    unint64_t v55 = _HashTable.UnsafeHandle._startIterator(bucket:)(v53 & v50, a4, (uint64_t)a5);
    if (v55)
    {
      uint64_t v58 = a4[1] >> 6;
      BOOL v59 = v58 + (v55 ^ v53);
      uint64_t v60 = v59 >= v53 ? v52 - 1 : 0;
      if (v59 - v60 != v46)
      {
        uint64_t v61 = 0;
        unint64_t v62 = v51 & 0x3F;
        uint64_t v63 = __OFADD__(v62 << v62, 64);
        uint64_t v64 = (v62 << v62) + 126;
        if ((v62 << v62) + 64 >= 1) {
          uint64_t v64 = (v62 << v62) + 63;
        }
        uint64_t v65 = v64 >> 6;
        do
        {
          if (++v54 == v52)
          {
            if (v61) {
              goto LABEL_147;
            }
            uint64_t v54 = 0;
            uint64_t v61 = 1;
          }
          if (v57 >= v62)
          {
            unint64_t v38 = __OFSUB__(v57, v62);
            v57 -= v62;
            if (v38) {
              goto LABEL_128;
            }
            unint64_t v75 = v56 >> v62;
            uint64_t v76 = v56 & v53;
            if ((v56 & v53) == 0) {
              break;
            }
          }
          else
          {
            uint64_t v68 = (v54 * v62) >> 6;
            if (v57)
            {
              if (v63) {
                goto LABEL_132;
              }
              if (v68 + 1 == v65) {
                uint64_t v68 = 0;
              }
              else {
                ++v68;
              }
            }
            unint64_t v69 = v62 - v57;
            if (__OFSUB__(v62, v57)) {
              goto LABEL_129;
            }
            if (v68 == 2 && v62 == 5) {
              unint64_t v71 = 32;
            }
            else {
              unint64_t v71 = 64;
            }
            unint64_t v38 = __OFSUB__(v71, v69);
            unint64_t v72 = v71 - v69;
            if (v38)
            {
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
              goto LABEL_145;
            }
            uint64_t v73 = a5[v68];
            uint64_t v74 = (v73 << v57) | v56;
            unint64_t v75 = v73 >> v69;
            char v57 = v72;
            uint64_t v76 = v74 & v53;
            if ((v74 & v53) == 0) {
              break;
            }
          }
          long long v66 = v58 + (v76 ^ v53);
          if (v66 >= v53) {
            uint64_t v67 = v52 - 1;
          }
          else {
            uint64_t v67 = 0;
          }
          uint64_t v56 = v75;
        }
        while (v66 - v67 != v46);
      }
    }
    unint64_t v77 = v46 - v5;
    if (__OFSUB__(v46, v5)) {
      goto LABEL_136;
    }
    ++v46;
    _HashTable.BucketIterator.currentValue.setter(v77, 0);
    outlined destroy of WeakBox<SGEdge>((uint64_t)v94);
  }
  while (v46 != v10);
  swift_release();
}

{
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int64_t v55;
  int64_t v56;
  Swift::Int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  Swift::Int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t vars8;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    goto LABEL_135;
  }
  if (v5 < 1) {
    return;
  }
  uint64_t v9 = *(void *)(a3 + 16);
  unint64_t v10 = v9 - v5;
  if ((uint64_t)v9 < v5) {
    ++v10;
  }
  if (a1 < v10 >> 1)
  {
    if (specialized static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3F) / 3 <= a1)
    {
      uint64_t v43 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a4, (uint64_t)a5);
      if (v43)
      {
        int64_t v44 = ~(-1 << *a4);
        Swift::UInt v45 = a4[1] >> 6;
        Swift::Int v46 = v45 + (v43 ^ v44);
        uint64_t v47 = v46 >= v44 ? ~(-1 << *a4) : 0;
        uint64_t v48 = v46 - v47;
        if (v48 < a1)
        {
          uint64_t v34 = __OFADD__(v48, v5);
          unint64_t v49 = v48 + v5;
          if (v34) {
            goto LABEL_133;
          }
          *a5 ^= ((v44 & ((v49 - v45) >> 63)) + v49 - v45) ^ v44 ^ v43;
        }
      }
      _HashTable.BucketIterator.advance()();
    }
    else
    {
      if (a1 < 0) {
        goto LABEL_138;
      }
      if (v9 < a1) {
        goto LABEL_139;
      }
      if (a1)
      {
        swift_retain();
        uint64_t v11 = 0;
        while (1)
        {
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          uint64_t v12 = Hasher._finalize()();
          Swift::UInt v13 = *a4;
          Swift::Int v14 = 1 << *a4;
          uint64_t v15 = v14 - 1;
          if (__OFSUB__(v14, 1)) {
            goto LABEL_129;
          }
          uint64_t v16 = v15 & v12;
          unint64_t v17 = _HashTable.UnsafeHandle._startIterator(bucket:)(v15 & v12, a4, (uint64_t)a5);
          if (v17)
          {
            unint64_t v20 = a4[1] >> 6;
            uint64_t v21 = v20 + (v17 ^ v15);
            uint64_t v22 = v21 >= v15 ? v14 - 1 : 0;
            if (v21 - v22 != v11)
            {
              unint64_t v23 = 0;
              uint64_t v24 = v13 & 0x3F;
              char v25 = __OFADD__(v24 << v24, 64);
              uint64_t v26 = (v24 << v24) + 126;
              if ((v24 << v24) + 64 >= 1) {
                uint64_t v26 = (v24 << v24) + 63;
              }
              BOOL v27 = v26 >> 6;
              do
              {
                if (++v16 == v14)
                {
                  if (v23) {
                    goto LABEL_143;
                  }
                  uint64_t v16 = 0;
                  unint64_t v23 = 1;
                }
                if (v19 >= v24)
                {
                  uint64_t v34 = __OFSUB__(v19, v24);
                  v19 -= v24;
                  if (v34)
                  {
                    __break(1u);
LABEL_122:
                    __break(1u);
LABEL_123:
                    __break(1u);
LABEL_124:
                    __break(1u);
LABEL_125:
                    __break(1u);
                    goto LABEL_126;
                  }
                  unint64_t v38 = v18 >> v24;
                  uint64_t v39 = v18 & v15;
                  if ((v18 & v15) == 0) {
                    break;
                  }
                }
                else
                {
                  unint64_t v30 = (v16 * v24) >> 6;
                  if (v19)
                  {
                    if (v25) {
                      goto LABEL_127;
                    }
                    if (v30 + 1 == v27) {
                      unint64_t v30 = 0;
                    }
                    else {
                      ++v30;
                    }
                  }
                  uint64_t v31 = v24 - v19;
                  if (__OFSUB__(v24, v19)) {
                    goto LABEL_122;
                  }
                  if (v30 == 2 && v24 == 5) {
                    uint64_t v33 = 32;
                  }
                  else {
                    uint64_t v33 = 64;
                  }
                  uint64_t v34 = __OFSUB__(v33, v31);
                  uint64_t v35 = v33 - v31;
                  if (v34) {
                    goto LABEL_123;
                  }
                  BOOL v36 = a5[v30];
                  uint64_t v37 = (v36 << v19) | v18;
                  unint64_t v38 = v36 >> v31;
                  uint64_t v19 = v35;
                  uint64_t v39 = v37 & v15;
                  if ((v37 & v15) == 0) {
                    break;
                  }
                }
                uint64_t v28 = v20 + (v39 ^ v15);
                if (v28 >= v15) {
                  uint64_t v29 = v14 - 1;
                }
                else {
                  uint64_t v29 = 0;
                }
                Swift::Int v18 = v38;
              }
              while (v28 - v29 != v11);
            }
          }
          unint64_t v40 = v11 + v5;
          if (__OFADD__(v11, v5)) {
            goto LABEL_130;
          }
          ++v11;
          _HashTable.BucketIterator.currentValue.setter(v40, 0);
          swift_bridgeObjectRelease();
          if (v11 == a1)
          {
            swift_release();
            break;
          }
        }
      }
    }
    unint64_t v41 = a4[1] >> 6;
    if (__OFSUB__(v41, v5)) {
      goto LABEL_137;
    }
    _HashTable.Header.bias.setter(v41 - v5);
    return;
  }
  uint64_t v42 = a2;
  if (__OFSUB__(v9, a2)) {
    goto LABEL_136;
  }
  if ((uint64_t)(v9 - a2) >= specialized static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3F) / 3)
  {
    Swift::Int v50 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a4, (uint64_t)a5);
    if (v50)
    {
      uint64_t v51 = ~(-1 << *a4);
      unint64_t v52 = a4[1] >> 6;
      uint64_t v53 = v52 + (v50 ^ v51);
      uint64_t v54 = v53 >= v51 ? ~(-1 << *a4) : 0;
      unint64_t v55 = v53 - v54;
      if (v55 >= v42)
      {
        uint64_t v34 = __OFSUB__(v55, v5);
        uint64_t v56 = v55 - v5;
        if (v34) {
          goto LABEL_134;
        }
        *a5 ^= ((v51 & ((v56 - v52) >> 63)) + v56 - v52) ^ v51 ^ v50;
      }
    }
    _HashTable.BucketIterator.advance()();
    return;
  }
  if ((uint64_t)v9 < v42) {
    goto LABEL_140;
  }
  if (v42 < 0)
  {
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v9 == v42) {
    return;
  }
  if (v9 <= v42) {
    goto LABEL_142;
  }
  swift_retain();
  do
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    char v57 = Hasher._finalize()();
    uint64_t v58 = *a4;
    BOOL v59 = 1 << *a4;
    uint64_t v60 = v59 - 1;
    if (__OFSUB__(v59, 1)) {
      goto LABEL_131;
    }
    uint64_t v61 = v60 & v57;
    unint64_t v62 = _HashTable.UnsafeHandle._startIterator(bucket:)(v60 & v57, a4, (uint64_t)a5);
    if (v62)
    {
      uint64_t v65 = a4[1] >> 6;
      long long v66 = v65 + (v62 ^ v60);
      uint64_t v67 = v66 >= v60 ? v59 - 1 : 0;
      if (v66 - v67 != v42)
      {
        uint64_t v68 = 0;
        unint64_t v69 = v58 & 0x3F;
        uint64_t v70 = __OFADD__(v69 << v69, 64);
        unint64_t v71 = (v69 << v69) + 126;
        if ((v69 << v69) + 64 >= 1) {
          unint64_t v71 = (v69 << v69) + 63;
        }
        unint64_t v72 = v71 >> 6;
        do
        {
          if (++v61 == v59)
          {
            if (v68) {
              goto LABEL_143;
            }
            uint64_t v61 = 0;
            uint64_t v68 = 1;
          }
          if (v64 >= v69)
          {
            uint64_t v34 = __OFSUB__(v64, v69);
            v64 -= v69;
            if (v34) {
              goto LABEL_124;
            }
            unint64_t v82 = v63 >> v69;
            uint64_t v83 = v63 & v60;
            if ((v63 & v60) == 0) {
              break;
            }
          }
          else
          {
            unint64_t v75 = (v61 * v69) >> 6;
            if (v64)
            {
              if (v70) {
                goto LABEL_128;
              }
              if (v75 + 1 == v72) {
                unint64_t v75 = 0;
              }
              else {
                ++v75;
              }
            }
            uint64_t v76 = v69 - v64;
            if (__OFSUB__(v69, v64)) {
              goto LABEL_125;
            }
            if (v75 == 2 && v69 == 5) {
              uint64_t v78 = 32;
            }
            else {
              uint64_t v78 = 64;
            }
            uint64_t v34 = __OFSUB__(v78, v76);
            int64_t v79 = v78 - v76;
            if (v34)
            {
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            int64_t v80 = a5[v75];
            uint64_t v81 = (v80 << v64) | v63;
            unint64_t v82 = v80 >> v76;
            uint64_t v64 = v79;
            uint64_t v83 = v81 & v60;
            if ((v81 & v60) == 0) {
              break;
            }
          }
          uint64_t v73 = v65 + (v83 ^ v60);
          if (v73 >= v60) {
            uint64_t v74 = v59 - 1;
          }
          else {
            uint64_t v74 = 0;
          }
          uint64_t v63 = v82;
        }
        while (v73 - v74 != v42);
      }
    }
    unint64_t v84 = v42 - v5;
    if (__OFSUB__(v42, v5)) {
      goto LABEL_132;
    }
    ++v42;
    _HashTable.BucketIterator.currentValue.setter(v84, 0);
    swift_bridgeObjectRelease();
  }
  while (v42 != v9);
  swift_release();
}

void specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(uint64_t a1, int64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    goto LABEL_166;
  }
  if (v6 < 1) {
    return;
  }
  uint64_t v8 = (uint64_t)a4;
  unint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = v11 - v6;
  if ((uint64_t)v11 < v6) {
    ++v12;
  }
  uint64_t v136 = a2 - a1;
  if (a1 < v12 >> 1)
  {
    if (specialized static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3FLL) / 3 <= a1)
    {
      uint64_t v83 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, (void *)v8, a5);
      Swift::Int v84 = 0;
      long long v139 = (void *)v8;
      uint64_t v140 = a5;
      Swift::Int v141 = 0;
      uint64_t v142 = v83;
      unint64_t v143 = v85;
      uint64_t v144 = v86;
      uint64_t v8 = -1;
      char v145 = 0;
      do
      {
        if (v142)
        {
          uint64_t v91 = v139;
          unint64_t v92 = ~(-1 << *v139);
          uint64_t v93 = (uint64_t)v139[1] >> 6;
          unint64_t v94 = v93 + (v142 ^ v92);
          uint64_t v95 = v94 >= v92 ? ~(-1 << *v139) : 0;
          int64_t v96 = v94 - v95;
          if (v96 < a1)
          {
            BOOL v43 = __OFADD__(v96, v6);
            int64_t v97 = v96 + v6;
            if (v43) {
              goto LABEL_164;
            }
            uint64_t v98 = *v139 & 0x3FLL;
            uint64_t v99 = v140;
            uint64_t v100 = ((v92 & ((v97 - v93) >> 63)) + v97 - v93) ^ v92;
            unint64_t v101 = v100 ^ v142;
            char v102 = v98 * v84;
            uint64_t v103 = (v98 * v84) >> 6;
            *(void *)(v140 + 8 * v103) ^= (v100 ^ v142) << v102;
            unint64_t v104 = 64 - (v102 & 0x3F);
            unint64_t v105 = *v91 & 0x3FLL;
            if (v104 < v105)
            {
              unint64_t v106 = v105 << v105;
              BOOL v43 = __OFADD__(v106, 64);
              uint64_t v107 = v106 + 64;
              if (v43)
              {
                __break(1u);
                goto LABEL_131;
              }
              uint64_t v88 = v107 - 1;
              BOOL v87 = v107 < 1;
              uint64_t v89 = v107 + 62;
              if (!v87) {
                uint64_t v89 = v88;
              }
              if (v103 + 1 == v89 >> 6) {
                uint64_t v90 = 0;
              }
              else {
                uint64_t v90 = v103 + 1;
              }
              *(void *)(v99 + 8 * v90) ^= v101 >> v104;
            }
            uint64_t v142 = v100;
          }
        }
        _HashTable.BucketIterator.advance()();
        Swift::Int v84 = v141;
      }
      while (v141);
      uint64_t v8 = (uint64_t)a4;
    }
    else
    {
      if (a1 < 0) {
        goto LABEL_170;
      }
      if (v11 < a1) {
        goto LABEL_171;
      }
      if (a1)
      {
        uint64_t v134 = a3 + 32;
        swift_retain();
        uint64_t v13 = 0;
        while (1)
        {
          uint64_t v14 = v134 + 56 * v13;
          Swift::UInt v15 = *(void *)v14;
          uint64_t v16 = *(void *)(v14 + 8);
          Swift::UInt v17 = *(void *)(v14 + 32);
          int v18 = *(unsigned __int8 *)(v14 + 40);
          Swift::UInt v19 = *(void *)(v14 + 48);
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v15);
          unint64_t v20 = *(void (**)(void **))(*(void *)v16 + 120);
          swift_retain();
          swift_bridgeObjectRetain();
          v20(&v139);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          if (v18 == 1)
          {
            Hasher._combine(_:)(0);
          }
          else
          {
            Hasher._combine(_:)(1u);
            Hasher._combine(_:)(v17);
          }
          Hasher._combine(_:)(v19);
          Swift::Int v21 = Hasher._finalize()();
          uint64_t v8 = (uint64_t)a4;
          uint64_t v22 = *a4;
          uint64_t v23 = 1 << *a4;
          unint64_t v24 = v23 - 1;
          if (__OFSUB__(v23, 1)) {
            goto LABEL_160;
          }
          Swift::Int v25 = v24 & v21;
          uint64_t v26 = _HashTable.UnsafeHandle._startIterator(bucket:)(v24 & v21, a4, a5);
          long long v139 = a4;
          uint64_t v140 = a5;
          Swift::Int v141 = v25;
          uint64_t v142 = v26;
          unint64_t v143 = v27;
          uint64_t v144 = v28;
          char v145 = 0;
          if (v26)
          {
            uint64_t v29 = (uint64_t)a4[1] >> 6;
            unint64_t v30 = v29 + (v26 ^ v24);
            if (v30 >= v24) {
              uint64_t v31 = v23 - 1;
            }
            else {
              uint64_t v31 = 0;
            }
            if (v30 - v31 != v13)
            {
              char v32 = 0;
              uint64_t v33 = v22 & 0x3F;
              BOOL v34 = __OFADD__(v33 << v33, 64);
              uint64_t v35 = (v33 << v33) + 126;
              if ((v33 << v33) + 64 >= 1) {
                uint64_t v35 = (v33 << v33) + 63;
              }
              uint64_t v36 = v35 >> 6;
              while (1)
              {
                if (++v25 == v23)
                {
                  if (v32) {
                    goto LABEL_175;
                  }
                  Swift::Int v25 = 0;
                  char v32 = 1;
                }
                if (v28 >= v33)
                {
                  BOOL v43 = __OFSUB__(v28, v33);
                  v28 -= v33;
                  if (v43)
                  {
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
                    goto LABEL_157;
                  }
                  unint64_t v47 = v27 >> v33;
                  uint64_t v26 = v27 & v24;
                  if ((v27 & v24) == 0) {
                    goto LABEL_52;
                  }
                }
                else
                {
                  uint64_t v39 = (v25 * v33) >> 6;
                  if (v28)
                  {
                    if (v34) {
                      goto LABEL_158;
                    }
                    if (v39 + 1 == v36) {
                      uint64_t v39 = 0;
                    }
                    else {
                      ++v39;
                    }
                  }
                  uint64_t v40 = v33 - v28;
                  if (__OFSUB__(v33, v28)) {
                    goto LABEL_153;
                  }
                  if (v39 == 2 && v33 == 5) {
                    uint64_t v42 = 32;
                  }
                  else {
                    uint64_t v42 = 64;
                  }
                  BOOL v43 = __OFSUB__(v42, v40);
                  uint64_t v44 = v42 - v40;
                  if (v43) {
                    goto LABEL_154;
                  }
                  unint64_t v45 = *(void *)(a5 + 8 * v39);
                  uint64_t v46 = (v45 << v28) | v27;
                  unint64_t v47 = v45 >> v40;
                  uint64_t v28 = v44;
                  uint64_t v26 = v46 & v24;
                  if ((v46 & v24) == 0) {
                    goto LABEL_52;
                  }
                }
                unint64_t v37 = v29 + (v26 ^ v24);
                if (v37 >= v24) {
                  uint64_t v38 = v23 - 1;
                }
                else {
                  uint64_t v38 = 0;
                }
                unint64_t v27 = v47;
                if (v37 - v38 == v13)
                {
LABEL_52:
                  unint64_t v27 = v47;
                  goto LABEL_53;
                }
              }
            }
            char v32 = 0;
LABEL_53:
            char v145 = v32;
            Swift::Int v141 = v25;
            uint64_t v142 = v26;
            unint64_t v143 = v27;
            uint64_t v144 = v28;
          }
          uint64_t v6 = v136;
          uint64_t v48 = v13 + v136;
          if (__OFADD__(v13, v136)) {
            goto LABEL_161;
          }
          ++v13;
          _HashTable.BucketIterator.currentValue.setter(v48, 0);
          swift_bridgeObjectRelease();
          swift_release();
          if (v13 == a1)
          {
            swift_release();
            break;
          }
        }
      }
    }
    uint64_t v132 = *(uint64_t *)(v8 + 8) >> 6;
    if (__OFSUB__(v132, v6)) {
      goto LABEL_169;
    }
    _HashTable.Header.bias.setter(v132 - v6);
    return;
  }
  int64_t v5 = a2;
  if (__OFSUB__(v11, a2)) {
    goto LABEL_168;
  }
  if ((uint64_t)(v11 - a2) >= specialized static _HashTable.maximumCapacity(forScale:)(*a4 & 0x3FLL) / 3)
  {
LABEL_131:
    uint64_t v108 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, (void *)v8, a5);
    Swift::Int v109 = 0;
    long long v139 = (void *)v8;
    uint64_t v140 = a5;
    Swift::Int v141 = 0;
    uint64_t v142 = v108;
    unint64_t v143 = v110;
    uint64_t v144 = v111;
    char v145 = 0;
    while (1)
    {
      if (v142)
      {
        BOOL v112 = v139;
        unint64_t v113 = ~(-1 << *v139);
        uint64_t v114 = (uint64_t)v139[1] >> 6;
        unint64_t v115 = v114 + (v142 ^ v113);
        uint64_t v116 = v115 >= v113 ? ~(-1 << *v139) : 0;
        int64_t v117 = v115 - v116;
        if (v117 >= v5)
        {
          BOOL v43 = __OFSUB__(v117, v6);
          int64_t v118 = v117 - v6;
          if (v43) {
            goto LABEL_165;
          }
          uint64_t v119 = *v139 & 0x3FLL;
          uint64_t v120 = v140;
          uint64_t v121 = ((v113 & ((v118 - v114) >> 63)) + v118 - v114) ^ v113;
          unint64_t v122 = v121 ^ v142;
          char v123 = v119 * v109;
          uint64_t v124 = (v119 * v109) >> 6;
          *(void *)(v140 + 8 * v124) ^= (v121 ^ v142) << v123;
          unint64_t v125 = 64 - (v123 & 0x3F);
          unint64_t v126 = *v112 & 0x3FLL;
          if (v125 < v126)
          {
            unint64_t v127 = v126 << v126;
            BOOL v43 = __OFADD__(v127, 64);
            uint64_t v128 = v127 + 64;
            if (v43) {
              goto LABEL_167;
            }
            uint64_t v129 = v128 - 1;
            BOOL v87 = v128 < 1;
            uint64_t v130 = v128 + 62;
            if (!v87) {
              uint64_t v130 = v129;
            }
            if (v124 + 1 == v130 >> 6) {
              uint64_t v131 = 0;
            }
            else {
              uint64_t v131 = v124 + 1;
            }
            *(void *)(v120 + 8 * v131) ^= v122 >> v125;
          }
          uint64_t v142 = v121;
        }
      }
      _HashTable.BucketIterator.advance()();
      Swift::Int v109 = v141;
      if (!v141) {
        return;
      }
    }
  }
  if ((uint64_t)v11 < v5) {
    goto LABEL_172;
  }
  if (v5 < 0)
  {
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v11 == v5) {
    return;
  }
  if (v11 <= v5) {
    goto LABEL_174;
  }
  uint64_t v135 = a3 + 32;
  swift_retain();
  unint64_t v133 = v11;
  do
  {
    uint64_t v49 = v135 + 56 * v5;
    Swift::UInt v51 = *(void *)v49;
    uint64_t v50 = *(void *)(v49 + 8);
    Swift::UInt v52 = *(void *)(v49 + 32);
    int v53 = *(unsigned __int8 *)(v49 + 40);
    Swift::UInt v54 = *(void *)(v49 + 48);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v51);
    unint64_t v55 = *(void (**)(void **))(*(void *)v50 + 120);
    swift_retain();
    swift_bridgeObjectRetain();
    v55(&v139);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v53 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v52);
    }
    Hasher._combine(_:)(v54);
    Swift::Int v56 = Hasher._finalize()();
    uint64_t v57 = *a4;
    uint64_t v58 = 1 << *a4;
    unint64_t v59 = v58 - 1;
    if (__OFSUB__(v58, 1)) {
      goto LABEL_162;
    }
    Swift::Int v60 = v59 & v56;
    uint64_t v61 = _HashTable.UnsafeHandle._startIterator(bucket:)(v59 & v56, a4, a5);
    long long v139 = a4;
    uint64_t v140 = a5;
    Swift::Int v141 = v60;
    uint64_t v142 = v61;
    unint64_t v143 = v62;
    uint64_t v144 = v63;
    char v145 = 0;
    if (v61)
    {
      uint64_t v64 = (uint64_t)a4[1] >> 6;
      unint64_t v65 = v64 + (v61 ^ v59);
      if (v65 >= v59) {
        uint64_t v66 = v58 - 1;
      }
      else {
        uint64_t v66 = 0;
      }
      if (v65 - v66 != v5)
      {
        char v67 = 0;
        uint64_t v68 = v57 & 0x3F;
        BOOL v69 = __OFADD__(v68 << v68, 64);
        uint64_t v70 = (v68 << v68) + 126;
        if ((v68 << v68) + 64 >= 1) {
          uint64_t v70 = (v68 << v68) + 63;
        }
        uint64_t v71 = v70 >> 6;
        while (1)
        {
          if (++v60 == v58)
          {
            if (v67) {
              goto LABEL_175;
            }
            Swift::Int v60 = 0;
            char v67 = 1;
          }
          if (v63 >= v68)
          {
            BOOL v43 = __OFSUB__(v63, v68);
            v63 -= v68;
            if (v43) {
              goto LABEL_155;
            }
            unint64_t v81 = v62 >> v68;
            uint64_t v61 = v62 & v59;
            if ((v62 & v59) == 0)
            {
LABEL_105:
              unint64_t v62 = v81;
              goto LABEL_106;
            }
          }
          else
          {
            uint64_t v74 = (v60 * v68) >> 6;
            if (v63)
            {
              if (v69) {
                goto LABEL_159;
              }
              if (v74 + 1 == v71) {
                uint64_t v74 = 0;
              }
              else {
                ++v74;
              }
            }
            uint64_t v75 = v68 - v63;
            if (__OFSUB__(v68, v63)) {
              goto LABEL_156;
            }
            if (v74 == 2 && v68 == 5) {
              uint64_t v77 = 32;
            }
            else {
              uint64_t v77 = 64;
            }
            BOOL v43 = __OFSUB__(v77, v75);
            uint64_t v78 = v77 - v75;
            if (v43)
            {
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
LABEL_162:
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
LABEL_171:
              __break(1u);
LABEL_172:
              __break(1u);
              goto LABEL_173;
            }
            unint64_t v79 = *(void *)(a5 + 8 * v74);
            uint64_t v80 = (v79 << v63) | v62;
            unint64_t v81 = v79 >> v75;
            uint64_t v63 = v78;
            uint64_t v61 = v80 & v59;
            if ((v80 & v59) == 0) {
              goto LABEL_105;
            }
          }
          unint64_t v72 = v64 + (v61 ^ v59);
          if (v72 >= v59) {
            uint64_t v73 = v58 - 1;
          }
          else {
            uint64_t v73 = 0;
          }
          unint64_t v62 = v81;
          if (v72 - v73 == v5) {
            goto LABEL_105;
          }
        }
      }
      char v67 = 0;
LABEL_106:
      char v145 = v67;
      Swift::Int v141 = v60;
      uint64_t v142 = v61;
      unint64_t v143 = v62;
      uint64_t v144 = v63;
    }
    uint64_t v82 = v5 - v136;
    if (__OFSUB__(v5, v136)) {
      goto LABEL_163;
    }
    ++v5;
    _HashTable.BucketIterator.currentValue.setter(v82, 0);
    swift_bridgeObjectRelease();
    swift_release();
  }
  while (v5 != v133);
  swift_release();
}

uint64_t specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v40 = *(void *)(result + 16);
  if (!v40) {
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v39 = result + 32;
  while (1)
  {
    uint64_t v42 = v5;
    uint64_t v6 = v39 + 56 * v5;
    Swift::UInt v8 = *(void *)v6;
    uint64_t v7 = *(void *)(v6 + 8);
    Swift::UInt v41 = *(void *)(v6 + 32);
    int v9 = *(unsigned __int8 *)(v6 + 40);
    Swift::UInt v10 = *(void *)(v6 + 48);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v8);
    unint64_t v11 = *(void (**)(void *))(*(void *)v7 + 120);
    swift_retain();
    swift_bridgeObjectRetain();
    v11(v43);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v9 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v41);
    }
    Hasher._combine(_:)(v10);
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = 1 << *a2;
    BOOL v14 = __OFSUB__(v13, 1);
    uint64_t v15 = v13 - 1;
    if (v14) {
      goto LABEL_42;
    }
    Swift::Int v16 = v15 & v12;
    uint64_t v17 = _HashTable.UnsafeHandle._startIterator(bucket:)(v15 & v12, a2, a3);
    unint64_t v19 = v18;
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    swift_release();
    v43[0] = a2;
    v43[1] = a3;
    Swift::Int v44 = v16;
    uint64_t v45 = v17;
    unint64_t v46 = v19;
    uint64_t v47 = v21;
    char v48 = 0;
    if (v17) {
      break;
    }
LABEL_4:
    __n128 result = _HashTable.BucketIterator.currentValue.setter(v42, 0);
    uint64_t v5 = v42 + 1;
    if (v42 + 1 == v40) {
      return result;
    }
  }
  char v22 = 0;
  uint64_t v23 = *a2 & 0x3FLL;
  uint64_t v24 = 1 << *a2;
  uint64_t v25 = v23 << *a2;
  uint64_t v26 = v25 + 64;
  BOOL v27 = __OFADD__(v25, 64);
  uint64_t v29 = v26 - 1;
  BOOL v28 = v26 < 1;
  uint64_t v30 = v26 + 62;
  if (!v28) {
    uint64_t v30 = v29;
  }
  uint64_t v31 = v30 >> 6;
  while (1)
  {
    if (++v16 == v24)
    {
      if (v22) {
        goto LABEL_43;
      }
      Swift::Int v16 = 0;
      char v22 = 1;
    }
    if (v21 >= v23) {
      break;
    }
    uint64_t v32 = (v16 * v23) >> 6;
    if (v21)
    {
      if (v27) {
        goto LABEL_41;
      }
      if (v32 + 1 == v31) {
        uint64_t v32 = 0;
      }
      else {
        ++v32;
      }
    }
    uint64_t v33 = v23 - v21;
    if (__OFSUB__(v23, v21)) {
      goto LABEL_39;
    }
    if (v32 == 2 && v23 == 5) {
      uint64_t v35 = 32;
    }
    else {
      uint64_t v35 = 64;
    }
    BOOL v14 = __OFSUB__(v35, v33);
    uint64_t v36 = v35 - v33;
    if (v14) {
      goto LABEL_40;
    }
    unint64_t v37 = *(void *)(a3 + 8 * v32);
    uint64_t v38 = (v37 << v21) | v19;
    unint64_t v19 = v37 >> v33;
    uint64_t v21 = v36;
LABEL_16:
    if ((v38 & (v24 - 1)) == 0)
    {
      char v48 = v22;
      unint64_t v46 = v19;
      uint64_t v47 = v21;
      Swift::Int v44 = v16;
      uint64_t v45 = 0;
      goto LABEL_4;
    }
  }
  BOOL v14 = __OFSUB__(v21, v23);
  v21 -= v23;
  if (!v14)
  {
    uint64_t v38 = v19;
    v19 >>= v23;
    goto LABEL_16;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __n128 result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  Swift::Int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37[8];

  uint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    return result;
  }
  uint64_t v6 = 0;
  uint64_t v36 = result + 32;
  while (1)
  {
    outlined init with copy of WeakBox<SGEdge>(v36 + 8 * v6, (uint64_t)v37);
    Hasher.init(_seed:)();
    uint64_t v7 = MEMORY[0x261185960](v37);
    if (v7)
    {
      Swift::UInt v8 = (void *)v7;
      Hasher._combine(_:)(1u);
      int v9 = v8;
      NSObject.hash(into:)();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    Swift::UInt v10 = Hasher._finalize()();
    unint64_t v11 = 1 << *a2;
    Swift::Int v12 = __OFSUB__(v11, 1);
    uint64_t v13 = v11 - 1;
    if (v12) {
      goto LABEL_41;
    }
    BOOL v14 = v13 & v10;
    uint64_t v15 = _HashTable.UnsafeHandle._startIterator(bucket:)(v13 & v10, a2, a3);
    uint64_t v17 = v16;
    unint64_t v19 = v18;
    outlined destroy of WeakBox<SGEdge>((uint64_t)v37);
    if (v15) {
      break;
    }
LABEL_3:
    __n128 result = _HashTable.BucketIterator.currentValue.setter(v6++, 0);
    if (v6 == v3) {
      return result;
    }
  }
  uint64_t v20 = 0;
  uint64_t v21 = *a2 & 0x3FLL;
  char v22 = 1 << *a2;
  uint64_t v23 = v21 << *a2;
  uint64_t v24 = v23 + 64;
  uint64_t v25 = __OFADD__(v23, 64);
  BOOL v27 = v24 - 1;
  uint64_t v26 = v24 < 1;
  BOOL v28 = v24 + 62;
  if (!v26) {
    BOOL v28 = v27;
  }
  while (1)
  {
    if (++v14 == v22)
    {
      if (v20) {
        goto LABEL_42;
      }
      BOOL v14 = 0;
      uint64_t v20 = 1;
    }
    if (v19 >= v21) {
      break;
    }
    uint64_t v29 = (v14 * v21) >> 6;
    if (v19)
    {
      if (v25) {
        goto LABEL_40;
      }
      if (v29 + 1 == v28 >> 6) {
        uint64_t v29 = 0;
      }
      else {
        ++v29;
      }
    }
    uint64_t v30 = v21 - v19;
    if (__OFSUB__(v21, v19)) {
      goto LABEL_38;
    }
    if (v29 == 2 && v21 == 5) {
      uint64_t v32 = 32;
    }
    else {
      uint64_t v32 = 64;
    }
    Swift::Int v12 = __OFSUB__(v32, v30);
    uint64_t v33 = v32 - v30;
    if (v12) {
      goto LABEL_39;
    }
    BOOL v34 = *(void *)(a3 + 8 * v29);
    uint64_t v35 = (v34 << v19) | v17;
    uint64_t v17 = v34 >> v30;
    unint64_t v19 = v33;
LABEL_15:
    if ((v35 & (v22 - 1)) == 0) {
      goto LABEL_3;
    }
  }
  Swift::Int v12 = __OFSUB__(v19, v21);
  v19 -= v21;
  if (!v12)
  {
    uint64_t v35 = v17;
    v17 >>= v21;
    goto LABEL_15;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __n128 result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  Swift::UInt v6;
  Swift::Int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  uint64_t v35 = *(void *)(result + 16);
  if (!v35) {
    return result;
  }
  uint64_t v5 = 0;
  BOOL v34 = result + 32;
  while (1)
  {
    uint64_t v6 = *(unsigned __int8 *)(v34 + 24 * v5 + 16);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v6);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t v7 = Hasher._finalize()();
    Swift::UInt v8 = 1 << *a2;
    int v9 = __OFSUB__(v8, 1);
    Swift::UInt v10 = v8 - 1;
    if (v9) {
      goto LABEL_38;
    }
    unint64_t v11 = v10 & v7;
    Swift::Int v12 = _HashTable.UnsafeHandle._startIterator(bucket:)(v10 & v7, a2, a3);
    BOOL v14 = v13;
    Swift::Int v16 = v15;
    outlined consume of TextureSource();
    if (v12) {
      break;
    }
LABEL_3:
    __n128 result = _HashTable.BucketIterator.currentValue.setter(v5++, 0);
    if (v5 == v35) {
      return result;
    }
  }
  uint64_t v17 = 0;
  unint64_t v18 = *a2 & 0x3FLL;
  unint64_t v19 = 1 << *a2;
  uint64_t v20 = v18 << *a2;
  uint64_t v21 = v20 + 64;
  char v22 = __OFADD__(v20, 64);
  uint64_t v24 = v21 - 1;
  uint64_t v23 = v21 < 1;
  uint64_t v25 = v21 + 62;
  if (!v23) {
    uint64_t v25 = v24;
  }
  uint64_t v26 = v25 >> 6;
  while (1)
  {
    if (++v11 == v19)
    {
      if (v17) {
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v17 = 1;
    }
    if (v16 >= v18) {
      break;
    }
    BOOL v27 = (v11 * v18) >> 6;
    if (v16)
    {
      if (v22) {
        goto LABEL_37;
      }
      if (v27 + 1 == v26) {
        BOOL v27 = 0;
      }
      else {
        ++v27;
      }
    }
    BOOL v28 = v18 - v16;
    if (__OFSUB__(v18, v16)) {
      goto LABEL_35;
    }
    if (v27 == 2 && v18 == 5) {
      uint64_t v30 = 32;
    }
    else {
      uint64_t v30 = 64;
    }
    int v9 = __OFSUB__(v30, v28);
    uint64_t v31 = v30 - v28;
    if (v9) {
      goto LABEL_36;
    }
    uint64_t v32 = *(void *)(a3 + 8 * v27);
    uint64_t v33 = (v32 << v16) | v14;
    BOOL v14 = v32 >> v28;
    Swift::Int v16 = v31;
LABEL_12:
    if ((v33 & (v19 - 1)) == 0) {
      goto LABEL_3;
    }
  }
  int v9 = __OFSUB__(v16, v18);
  v16 -= v18;
  if (!v9)
  {
    uint64_t v33 = v14;
    v14 >>= v18;
    goto LABEL_12;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __n128 result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet._find(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  return specialized OrderedSet._find(_:)(a1, a2, a3, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
}

{
  void *v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  uint64_t v5 = a3 + 4;
  uint64_t v6 = a3[2];
  if (a2) {
    return specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, (uint64_t)v5, v6, (uint64_t *)(a2 + 16), a2 + 32);
  }
  if (!v6) {
    return 0;
  }
  if (*v5 == a1) {
    return 0;
  }
  if (v6 == 1) {
    return 0;
  }
  if (a3[5] == a1) {
    return 1;
  }
  if (v6 == 2) {
    return 0;
  }
  if (a3[6] == a1) {
    return 2;
  }
  Swift::UInt v8 = 0;
  int v9 = a3 + 7;
  while (v6 - 3 != v8)
  {
    Swift::UInt v10 = v9[v8++];
    if (v10 == a1) {
      return v8 + 2;
    }
  }
  return 0;
}

uint64_t specialized OrderedSet._find(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = a4[2];
  if (a3)
  {
    Swift::UInt v8 = (void *)(a3 + 16);
    uint64_t v9 = a3 + 32;
    swift_retain();
    Swift::Int v10 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, a2, (uint64_t)(a4 + 4), v7, v8, v9);
    swift_release();
  }
  else
  {
    if (!v7) {
      return 0;
    }
    BOOL v11 = a4[4] == a1 && a4[5] == a2;
    if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 0;
    }
    if (v7 == 1) {
      return 0;
    }
    if (a4[6] == a1 && a4[7] == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    if (v7 == 2) {
      return 0;
    }
    if (a4[8] == a1 && a4[9] == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      return 2;
    }
    else
    {
      uint64_t v13 = a4 + 11;
      uint64_t v14 = 2;
      uint64_t v15 = 3;
      while (1)
      {
        if (v7 == v15) {
          return 0;
        }
        ++v14;
        if (*(v13 - 1) == a1 && *v13 == a2) {
          break;
        }
        Swift::Int v10 = v15++;
        v13 += 2;
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          return v10;
        }
      }
      return v14;
    }
  }
  return v10;
}

Swift::Int specialized OrderedSet._find(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + 32;
  uint64_t v5 = *(void *)(a3 + 16);
  if (!a2)
  {
    if (!v5) {
      return 0;
    }
    Swift::Int v8 = 0;
    while (1)
    {
      outlined init with copy of WeakBox<SGEdge>(v4, (uint64_t)v15);
      uint64_t v9 = (void *)MEMORY[0x261185960](v15);
      uint64_t v10 = MEMORY[0x261185960](a1);
      BOOL v11 = (void *)v10;
      if (!v9) {
        break;
      }
      if (!v10)
      {
        BOOL v11 = v9;
LABEL_6:

        goto LABEL_7;
      }
      type metadata accessor for SGEdge();
      id v12 = v9;
      char v13 = static NSObject.== infix(_:_:)();

      if (v13)
      {
LABEL_14:
        outlined destroy of WeakBox<SGEdge>((uint64_t)v15);
        return v8;
      }
LABEL_7:
      outlined destroy of WeakBox<SGEdge>((uint64_t)v15);
      ++v8;
      v4 += 8;
      if (v5 == v8) {
        return 0;
      }
    }
    if (!v10) {
      goto LABEL_14;
    }
    goto LABEL_6;
  }
  uint64_t v6 = (void *)(a2 + 16);
  uint64_t v7 = a2 + 32;
  swift_retain();
  Swift::Int v8 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, v4, v5, v6, v7);
  swift_release();
  return v8;
}