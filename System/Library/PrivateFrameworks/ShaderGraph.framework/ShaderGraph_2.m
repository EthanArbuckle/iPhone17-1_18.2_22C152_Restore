uint64_t specialized OrderedSet._find(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v4;
  uint64_t v5;
  Swift::Int *v6;
  uint64_t v7;
  Swift::Int v8;
  id v11;
  char v12;
  id v13;
  char v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;

  v4 = (id *)(a3 + 32);
  v5 = *(void *)(a3 + 16);
  if (!a2)
  {
    if (v5)
    {
      type metadata accessor for SGNode();
      v11 = *v4;
      v12 = static NSObject.== infix(_:_:)();

      if (v12) {
        return 0;
      }
      if (v5 == 1) {
        return 0;
      }
      v13 = *(id *)(a3 + 40);
      v14 = static NSObject.== infix(_:_:)();

      if (v14) {
        return 1;
      }
      if (v5 != 2)
      {
        v15 = *(id *)(a3 + 48);
        v16 = static NSObject.== infix(_:_:)();

        if (v16) {
          return 2;
        }
        v17 = 0;
        v18 = a3 + 56;
        while (v5 - 3 != v17)
        {
          v19 = *(id *)(v18 + 8 * v17);
          v20 = static NSObject.== infix(_:_:)();

          ++v17;
          if (v20) {
            return v17 + 2;
          }
        }
        return 0;
      }
    }
    return 0;
  }
  v6 = (Swift::Int *)(a2 + 16);
  v7 = a2 + 32;
  swift_retain();
  v8 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, (uint64_t)v4, v5, v6, v7);
  swift_release();
  return v8;
}

uint64_t specialized OrderedSet._find(_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, void *, uint64_t, uint64_t, uint64_t))
{
  v6 = a3 + 4;
  uint64_t v7 = a3[2];
  if (a2) {
    return a4(a1, v6, v7, a2 + 16, a2 + 32);
  }
  if (!v7) {
    return 0;
  }
  if (*v6 == a1) {
    return 0;
  }
  if (v7 == 1) {
    return 0;
  }
  if (a3[5] == a1) {
    return 1;
  }
  if (v7 == 2) {
    return 0;
  }
  if (a3[6] == a1) {
    return 2;
  }
  uint64_t v9 = 0;
  v10 = a3 + 7;
  while (v7 - 3 != v9)
  {
    uint64_t v11 = v10[v9++];
    if (v11 == a1) {
      return v9 + 2;
    }
  }
  return 0;
}

uint64_t Graph.insert(_:)(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v1;
  v6[2] = *(_OWORD *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  long long v2 = *(_OWORD *)(a1 + 72);
  v4[0] = *(_OWORD *)(a1 + 56);
  v4[1] = v2;
  v4[2] = *(_OWORD *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 104);
  return Graph.connect(_:to:)((uint64_t)v6, (unint64_t)v4);
}

uint64_t specialized OrderedDictionary.subscript.setter(uint64_t *a1, uint64_t a2)
{
  outlined init with take of MetalFunctionNode?((uint64_t)a1, (uint64_t)v32, &demangling cache variable for type metadata for Graph.Adjacent?);
  unint64_t v5 = v32[0];
  unint64_t v6 = v32[1];
  unint64_t v7 = v32[2];
  uint64_t v27 = v32[3];
  unint64_t v8 = v32[4];
  unint64_t v9 = v32[5];
  uint64_t v10 = specialized OrderedSet._find(_:)(a2, *(void *)v2, *(void **)(v2 + 8), (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  uint64_t v12 = v11;
  if (v13)
  {
    uint64_t result = outlined init with take of MetalFunctionNode?((uint64_t)a1, (uint64_t)v33, &demangling cache variable for type metadata for Graph.Adjacent?);
    if (v34)
    {
      v26 = a1;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      specialized OrderedSet._appendNew(_:in:)(a2, v12);
      uint64_t v20 = *(void *)(v2 + 16);
      v2 += 16;
      uint64_t v19 = v20;
      unint64_t v21 = v6;
      unint64_t v6 = v5;
      swift_retain();
      unint64_t v22 = v7;
      unint64_t v7 = v21;
      swift_retain();
      unint64_t v14 = v22;
      swift_retain();
      swift_retain();
      swift_retain();
      unint64_t v5 = v9;
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v2 = v20;
      unint64_t v9 = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1);
        uint64_t v19 = *(void *)v2;
      }
      unint64_t v8 = *(void *)(v19 + 16);
      unint64_t v16 = *(void *)(v19 + 24);
      uint64_t v12 = v8 + 1;
      if (v8 < v16 >> 1) {
        goto LABEL_12;
      }
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v14 = v10;
    outlined init with take of MetalFunctionNode?((uint64_t)a1, (uint64_t)v33, &demangling cache variable for type metadata for Graph.Adjacent?);
    if (v34)
    {
      uint64_t v15 = *(void *)(v2 + 16);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v15 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v15);
      }
      if ((v14 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else
      {
        unint64_t v16 = *(void *)(v15 + 16);
        if (v14 < v16)
        {
          v17 = (void *)(v15 + 48 * v14);
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v17[4] = v5;
          v17[5] = v6;
          v17[6] = v7;
          v17[7] = v27;
          v17[8] = v8;
          v17[9] = v9;
          outlined release of Graph.Adjacent?(a1);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          *(void *)(v2 + 16) = v15;
          swift_release();
          return swift_release();
        }
      }
      __break(1u);
LABEL_17:
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v12, 1);
      uint64_t v19 = *(void *)v2;
LABEL_12:
      *(void *)(v19 + 16) = v12;
      v24 = (void *)(v19 + 48 * v8);
      v24[4] = v6;
      v24[5] = v7;
      v24[6] = v14;
      v24[7] = v27;
      v24[8] = v9;
      v24[9] = v5;
      outlined release of Graph.Adjacent?(v26);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      *(void *)uint64_t v2 = v19;
      swift_release();
      return swift_release();
    }
    specialized OrderedSet._removeExistingMember(at:in:)(v14, v12, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (void (*)(void))specialized OrderedSet._regenerateHashTable(), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:), (void (*)(int64_t))specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:));
    specialized ContiguousArray.remove(at:)(v14, (uint64_t)&v28);
    long long v40 = v28;
    uint64_t v25 = v31;
    uint64_t v39 = v29;
    outlined init with take of MetalFunctionNode?((uint64_t)&v40, (uint64_t)v42, &demangling cache variable for type metadata for _HashTable.Storage?);
    outlined release of _HashTable.Storage?((uint64_t)v42);
    uint64_t v41 = *((void *)&v40 + 1);
    outlined release of _HashTable.Storage?((uint64_t)&v41);
    outlined release of _HashTable.Storage?((uint64_t)&v39);
    long long v36 = v30;
    uint64_t v35 = v25;
    outlined init with take of MetalFunctionNode?((uint64_t)&v36, (uint64_t)v38, &demangling cache variable for type metadata for _HashTable.Storage?);
    outlined release of _HashTable.Storage?((uint64_t)v38);
    uint64_t v37 = *((void *)&v36 + 1);
    outlined release of _HashTable.Storage?((uint64_t)&v37);
    return outlined release of _HashTable.Storage?((uint64_t)&v35);
  }
  return result;
}

uint64_t *specialized OrderedDictionary.subscript.setter(void *a1, long long *a2)
{
  outlined init with take of MetalFunctionNode?((uint64_t)a1, (uint64_t)v34, &demangling cache variable for type metadata for Output??);
  uint64_t v4 = v34[0];
  uint64_t v25 = v34[1];
  uint64_t v26 = v34[2];
  uint64_t v27 = v34[3];
  uint64_t v28 = v34[4];
  uint64_t v22 = v34[6];
  uint64_t v29 = v34[5];
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  unint64_t v7 = *(void *)(v5 + 16);
  if (*v2)
  {
    swift_retain();
    swift_retain();
    unint64_t v8 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)a2, v5 + 32, v7, (void *)(v6 + 16), v6 + 32);
    char v10 = v9;
    uint64_t v12 = v11;
  }
  else
  {
    swift_retain();
    unint64_t v8 = specialized Collection<>.firstIndex(of:)(a2, v5 + 32, v7);
    char v10 = v13;
    uint64_t v12 = 0;
  }
  v38[0] = a2[1];
  swift_release();
  swift_release();
  if (v10)
  {
    outlined init with take of MetalFunctionNode?((uint64_t)a1, (uint64_t)v35, &demangling cache variable for type metadata for Output??);
    if (v36 == 1)
    {
      swift_release();
      return (uint64_t *)outlined release of String((uint64_t)v38);
    }
    uint64_t v5 = v22;
    outlined copy of Output?(v4, v25);
    specialized OrderedSet._appendNew(_:in:)(a2, v12);
    uint64_t v18 = v2[2];
    v23 = v2 + 2;
    outlined copy of Output?(v4, v25);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v2[2] = v18;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1);
      uint64_t v18 = *v23;
    }
    unint64_t v7 = *(void *)(v18 + 16);
    unint64_t v16 = *(void *)(v18 + 24);
    uint64_t v15 = (void *)(v7 + 1);
    uint64_t v12 = v4;
    if (v7 < v16 >> 1) {
      goto LABEL_17;
    }
  }
  else
  {
    outlined init with take of MetalFunctionNode?((uint64_t)a1, (uint64_t)v35, &demangling cache variable for type metadata for Output??);
    if (v36 == 1)
    {
      specialized OrderedSet._removeExistingMember(at:in:)(v8, v12, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(uint64_t))specialized OrderedSet._regenerateHashTable(), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:), (uint64_t)v31);
      swift_release();
      long long v37 = v32;
      outlined release of String((uint64_t)&v37);
      specialized ContiguousArray.remove(at:)(v8, (uint64_t)v33);
      swift_release();
      outlined release of String((uint64_t)v38);
      return outlined release of Input?(v33);
    }
    uint64_t v15 = (void *)v2[2];
    outlined copy of Output?(v4, v25);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v15 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v15);
    }
    if ((v8 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v16 = v15[2];
      if (v8 < v16)
      {
        v17 = &v15[7 * v8];
        uint64_t v24 = v17[4];
        uint64_t v21 = v17[5];
        outlined copy of Output?(v4, v25);
        outlined consume of Input?(v24, v21);
        v17[4] = v4;
        v17[5] = v25;
        v17[6] = v26;
        v17[7] = v27;
        v17[8] = v28;
        v17[9] = v29;
        v17[10] = v22;
        swift_release();
        outlined release of String((uint64_t)v38);
        outlined release of Output??(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of Output??);
        uint64_t result = outlined release of Output??(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of Output??);
        v2[2] = (uint64_t)v15;
        return result;
      }
    }
    __break(1u);
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, (int64_t)v15, 1);
  uint64_t v18 = *v23;
LABEL_17:
  *(void *)(v18 + 16) = v15;
  uint64_t v20 = (void *)(v18 + 56 * v7);
  v20[4] = v12;
  v20[5] = v25;
  v20[6] = v26;
  v20[7] = v27;
  v20[8] = v28;
  v20[9] = v29;
  v20[10] = v5;
  swift_release();
  outlined release of String((uint64_t)v38);
  outlined release of Output??(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of Output??);
  uint64_t result = outlined release of Output??(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of Output??);
  uint64_t *v23 = v18;
  return result;
}

uint64_t specialized OrderedDictionary.subscript.setter(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  char v9 = (void *)v4[1];
  swift_retain();
  swift_retain();
  unint64_t v10 = specialized OrderedSet._find(_:)(a2, a3, v8, v9);
  char v12 = v11;
  uint64_t v14 = v13;
  swift_release();
  swift_release();
  if ((v12 & 1) == 0)
  {
    if (!a1)
    {
      specialized OrderedSet._removeExistingMember(at:in:)(v10, v14);
      swift_bridgeObjectRelease();
      id v16 = (id)specialized ContiguousArray.remove(at:)(v10);
      goto LABEL_12;
    }
    uint64_t v15 = v4[2];
    id v16 = a1;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    v4[2] = v15;
    if ((result & 1) == 0) {
      specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v15);
    }
    if ((v10 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v10 < *(void *)(v15 + 16))
    {
      objc_storeStrong((id *)(v15 + 8 * v10 + 32), a1);
LABEL_10:
      specialized ContiguousArray._endMutation()();

LABEL_12:
      goto LABEL_13;
    }
    __break(1u);
    return result;
  }
  if (a1)
  {
    id v18 = a1;
    specialized OrderedSet._appendNew(_:in:)(a2, a3, v14);
    id v16 = v18;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    goto LABEL_10;
  }
LABEL_13:
  return swift_bridgeObjectRelease();
}

uint64_t specialized OrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  char v9 = (void *)v4[1];
  swift_retain();
  swift_retain();
  unint64_t v10 = specialized OrderedSet._find(_:)(a2, a3, v8, v9);
  char v12 = v11;
  uint64_t v14 = v13;
  swift_release();
  swift_release();
  if ((v12 & 1) == 0)
  {
    if (!a1)
    {
      specialized OrderedSet._removeExistingMember(at:in:)(v10, v14);
      swift_bridgeObjectRelease();
      specialized ContiguousArray.remove(at:)(v10, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
      swift_unknownObjectRelease();
      goto LABEL_12;
    }
    uint64_t v15 = v4[2];
    swift_unknownObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    v4[2] = v15;
    if ((result & 1) == 0) {
      specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v15);
    }
    if ((v10 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v10 < *(void *)(v15 + 16))
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(void *)(v15 + 8 * v10 + 32) = a1;
LABEL_10:
      specialized ContiguousArray._endMutation()();
      swift_unknownObjectRelease_n();
      goto LABEL_12;
    }
    __break(1u);
    return result;
  }
  if (a1)
  {
    swift_unknownObjectRetain();
    specialized OrderedSet._appendNew(_:in:)(a2, a3, v14);
    swift_unknownObjectRetain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    goto LABEL_10;
  }
LABEL_12:
  return swift_bridgeObjectRelease();
}

uint64_t specialized OrderedDictionary.subscript.setter(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  unint64_t v10 = (void *)v4[1];
  swift_retain();
  swift_retain();
  unint64_t v11 = specialized OrderedSet._find(_:)(a3, a4, v9, v10);
  char v13 = v12;
  unint64_t v15 = v14;
  swift_release();
  swift_release();
  if (v13)
  {
    if (a2 != 0xFF)
    {
      outlined copy of MetalLibrary(a1, a2 & 1);
      specialized OrderedSet._appendNew(_:in:)(a3, a4, v15);
      uint64_t v23 = v4[2];
      v4 += 2;
      uint64_t v22 = v23;
      outlined copy of MetalLibrary(a1, a2 & 1);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v4 = v23;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1);
        uint64_t v22 = *v4;
      }
      unint64_t v15 = *(void *)(v22 + 16);
      unint64_t v17 = *(void *)(v22 + 24);
      uint64_t v16 = v15 + 1;
      if (v15 < v17 >> 1) {
        goto LABEL_12;
      }
      goto LABEL_21;
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (a2 != 0xFF)
    {
      uint64_t v16 = v4[2];
      outlined copy of MetalLibrary(a1, a2 & 1);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v16);
      }
      if ((v11 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else
      {
        unint64_t v17 = *(void *)(v16 + 16);
        if (v11 < v17)
        {
          unint64_t v18 = v16 + 16 * v11;
          uint64_t v19 = *(void *)(v18 + 32);
          char v20 = *(unsigned char *)(v18 + 40);
          outlined copy of MetalLibrary(a1, a2 & 1);
          outlined consume of MetalLibrary(v19, v20);
          *(void *)(v18 + 32) = a1;
          *(unsigned char *)(v18 + 40) = a2 & 1;
          swift_bridgeObjectRelease();
          outlined consume of MetalLibrary?(a1, a2);
          uint64_t result = outlined consume of MetalLibrary?(a1, a2);
          v4[2] = v16;
          return result;
        }
      }
      __break(1u);
LABEL_21:
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v16, 1);
      uint64_t v22 = *v4;
LABEL_12:
      *(void *)(v22 + 16) = v16;
      unint64_t v25 = v22 + 16 * v15;
      *(void *)(v25 + 32) = a1;
      *(unsigned char *)(v25 + 40) = a2 & 1;
      swift_bridgeObjectRelease();
      outlined consume of MetalLibrary?(a1, a2);
      uint64_t result = outlined consume of MetalLibrary?(a1, a2);
      *uint64_t v4 = v22;
      return result;
    }
    specialized OrderedSet._removeExistingMember(at:in:)(v11, v15);
    swift_bridgeObjectRelease();
    uint64_t v26 = specialized ContiguousArray.remove(at:)(v11);
    char v28 = v27;
    swift_bridgeObjectRelease();
    return outlined consume of MetalLibrary(v26, v28 & 1);
  }
}

int64_t specialized OrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t result = specialized OrderedSet._find(_:)(a2, *(void *)v2, *(void **)(v2 + 8), (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  uint64_t v8 = v7;
  if (v9)
  {
    if (!a1) {
      return result;
    }
    swift_unknownObjectRetain();
    specialized OrderedSet._appendNew(_:in:)(a2, v8);
    swift_unknownObjectRetain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    goto LABEL_10;
  }
  unint64_t v10 = result;
  unint64_t v11 = (uint64_t *)(v3 + 16);
  if (a1)
  {
    uint64_t v12 = *v11;
    swift_unknownObjectRetain();
    int64_t result = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v11 = v12;
    if ((result & 1) == 0) {
      specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v12);
    }
    if ((v10 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v10 < *(void *)(v12 + 16))
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(void *)(v12 + 8 * v10 + 32) = a1;
LABEL_10:
      specialized ContiguousArray._endMutation()();
      return swift_unknownObjectRelease_n();
    }
    __break(1u);
    return result;
  }
  specialized OrderedSet._removeExistingMember(at:in:)(result, v7, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (void (*)(void))specialized OrderedSet._regenerateHashTable(), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:), (void (*)(int64_t))specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:));
  specialized ContiguousArray.remove(at:)(v10, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
  return swift_unknownObjectRelease();
}

void specialized OrderedSet.removeAll(keepingCapacity:)(char a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = v1 + 1;
  if ((a1 & 1) == 0)
  {
    v2[1] = MEMORY[0x263F8EE78];
    swift_release();
    swift_release();
    *uint64_t v2 = 0;
    return;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v5 = *v3;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized ContiguousArray.replaceSubrange<A>(_:with:)(0, *(void *)(v5 + 16));
    if (!*v2) {
      return;
    }
  }
  else
  {
    if (*(void *)(v5 + 24) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Input>);
      uint64_t v6 = (void *)swift_allocObject();
      size_t v7 = _swift_stdlib_malloc_size(v6);
      v6[2] = 0;
      _OWORD v6[3] = 2 * ((uint64_t)(v7 - 32) / 56);
    }
    else
    {
      uint64_t v6 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t *v3 = (uint64_t)v6;
    swift_release();
    if (!*v2) {
      return;
    }
  }
  int isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
  uint64_t v9 = *v2;
  if (!isUniquelyReferenced_native)
  {
    if (!v9)
    {
LABEL_26:
      __break(1u);
      return;
    }
    uint64_t v9 = _HashTable.copy()((void *)*v2);
    swift_release();
    *uint64_t v2 = v9;
  }
  if (!v9)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v10 = (*(void *)(v9 + 16) & 0x3FLL) << *(void *)(v9 + 16);
  BOOL v11 = __OFADD__(v10, 64);
  uint64_t v12 = v10 + 64;
  if (v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v13 = v12 - 1;
  if (v12 < 1) {
    uint64_t v13 = v12 + 62;
  }
  if (v12 < -62) {
    goto LABEL_24;
  }
  if ((unint64_t)(v12 + 62) >= 0x7F)
  {
    bzero((void *)(v9 + 32), 8 * (v13 >> 6));
  }
}

uint64_t specialized ContiguousArray.remove(at:)(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  }
  unint64_t v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      size_t v7 = &v3[2 * a1];
      uint64_t v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *long long v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  uint64_t v3 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *long long v1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  }
  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v5 - 1;
    size_t v7 = v5 - 1 - a1;
    if (v7 >= 0)
    {
      uint64_t v8 = v3 + 8 * a1;
      uint64_t v9 = *(void *)(v8 + 32);
      memmove((void *)(v8 + 32), (const void *)(v8 + 40), 8 * v7);
      *(void *)(v3 + 16) = v6;
      specialized ContiguousArray._endMutation()();
      return v9;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  }
  unint64_t v4 = *(void *)(v3 + 16);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      size_t v7 = v3 + 16 * a1;
      uint64_t v8 = *(void *)(v7 + 32);
      memmove((void *)(v7 + 32), (const void *)(v7 + 48), 16 * v6);
      *(void *)(v3 + 16) = v5;
      *long long v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  }
  unint64_t v4 = *(void *)(v3 + 16);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      size_t v7 = v3 + 16 * a1;
      uint64_t v8 = *(void *)(v7 + 32);
      memmove((void *)(v7 + 32), (const void *)(v7 + 48), 16 * v6);
      *(void *)(v3 + 16) = v5;
      *long long v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 48 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      v9 += 32;
      uint64_t v11 = *(void *)(v9 + 24);
      long long v13 = *(_OWORD *)(v9 + 8);
      long long v14 = *(_OWORD *)(v9 + 32);
      uint64_t result = (uint64_t)memmove((void *)v9, (const void *)(v9 + 48), 48 * v8);
      *(void *)(v5 + 16) = v7;
      *uint64_t v2 = v5;
      *(void *)a2 = v10;
      *(_OWORD *)(a2 + 8) = v13;
      *(void *)(a2 + 24) = v11;
      *(_OWORD *)(a2 + 32) = v14;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v2;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  long long v10;
  uint64_t v11;
  uint64_t result;
  long long v13;
  long long v14;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = &v5[7 * a1];
      uint64_t v10 = *((_OWORD *)v9 + 2);
      v9 += 4;
      uint64_t v11 = v9[6];
      long long v14 = *((_OWORD *)v9 + 1);
      long long v13 = *((_OWORD *)v9 + 2);
      uint64_t result = (uint64_t)memmove(v9, v9 + 7, 56 * v8);
      v5[2] = v7;
      *uint64_t v2 = v5;
      *(_OWORD *)a2 = v10;
      *(_OWORD *)(a2 + 16) = v14;
      *(_OWORD *)(a2 + 32) = v13;
      *(void *)(a2 + 48) = v11;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v2;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    outlined init with take of MetalFunctionNode?((uint64_t)&v5[a1 + 4], a2, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
    if ((uint64_t)(v7 - a1) >= 0)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
      v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = a2(v7);
  }
  unint64_t v8 = *(void *)(v7 + 16);
  if (v8 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v9 = v8 - 1;
    uint64_t v10 = v8 - 1 - a1;
    if (v10 >= 0)
    {
      uint64_t v11 = v7 + 56 * a1;
      long long v12 = *(_OWORD *)(v11 + 32);
      v11 += 32;
      uint64_t v13 = *(void *)(v11 + 48);
      char v14 = *(unsigned char *)(v11 + 40);
      uint64_t v15 = *(void *)(v11 + 32);
      long long v17 = *(_OWORD *)(v11 + 16);
      uint64_t result = (uint64_t)memmove((void *)v11, (const void *)(v11 + 56), 56 * v10);
      *(void *)(v7 + 16) = v9;
      uint64_t *v3 = v7;
      *(_OWORD *)a3 = v12;
      *(_OWORD *)(a3 + 16) = v17;
      *(void *)(a3 + 32) = v15;
      *(unsigned char *)(a3 + 40) = v14;
      *(void *)(a3 + 48) = v13;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.remove(at:)(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = *v2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v5 = a2(v5);
    *uint64_t v2 = v5;
  }
  unint64_t v7 = *(void *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v8 = v7 - 1;
    uint64_t v9 = v7 - 1 - a1;
    if (v9 >= 0)
    {
      uint64_t v10 = v5 + 8 * a1;
      uint64_t v11 = *(void *)(v10 + 32);
      memmove((void *)(v10 + 32), (const void *)(v10 + 40), 8 * v9);
      *(void *)(v5 + 16) = v8;
      specialized ContiguousArray._endMutation()();
      return v11;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = a2(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    unint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)(v5 + 16) = v7;
      *uint64_t v2 = v5;
      return v10;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Graph.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v3;
  if (v8 >= ArraySlice.endIndex.getter())
  {
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
    return v13(a2, 1, 1, v5);
  }
  else
  {
    uint64_t v16 = a2;
    unint64_t v18 = (uint64_t (**)(char *, uint64_t))(v17 + 8);
    while (1)
    {
      uint64_t v9 = (uint64_t (*)(char *))v3[5];
      ArraySlice.subscript.getter();
      char v10 = v9(v7);
      uint64_t result = (*v18)(v7, v5);
      if (v10) {
        break;
      }
      uint64_t v12 = *v3 + 1;
      if (__OFADD__(*v3, 1))
      {
        __break(1u);
        goto LABEL_14;
      }
      uint64_t *v3 = v12;
      if (v12 >= ArraySlice.endIndex.getter()) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v16, 1, 1, v5);
      }
    }
    uint64_t v14 = v16;
    ArraySlice.subscript.getter();
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v5);
    if (!__OFADD__(*v3, 1))
    {
      ++*v3;
      return result;
    }
LABEL_14:
    __break(1u);
  }
  return result;
}

unint64_t Graph.output(connectedTo:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  unint64_t result = specialized OrderedSet._find(_:)(*(void *)a1, *(void *)v2, *(void **)(v2 + 8), (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if (v7) {
    goto LABEL_6;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)(v5 + 16))
  {
    uint64_t v8 = (void *)(v5 + 48 * result);
    uint64_t v9 = v8[7];
    uint64_t v10 = v8[8];
    uint64_t v11 = v8[9];
    long long v27 = *(_OWORD *)(a1 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    outlined retain of String((uint64_t)&v27);
    swift_retain();
    specialized OrderedDictionary.subscript.getter(a1, v9, v10, v11, v19);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of String((uint64_t)&v27);
    unint64_t result = outlined init with take of MetalFunctionNode?((uint64_t)v19, (uint64_t)&v20, &demangling cache variable for type metadata for Output??);
    uint64_t v12 = v21;
    if (!v21)
    {
      unint64_t result = (unint64_t)outlined release of Output??(v19, (void (*)(void, void, void, void, void, void, void))outlined consume of Output??);
      uint64_t v13 = 0;
      goto LABEL_7;
    }
    if (v21 != 1)
    {
      uint64_t v17 = v25;
      uint64_t v18 = v26;
      uint64_t v15 = v23;
      uint64_t v16 = v24;
      uint64_t v14 = v22;
      uint64_t v13 = v20;
      swift_retain();
      outlined retain of String((uint64_t)&v27);
      swift_bridgeObjectRelease();
      unint64_t result = swift_release();
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v13 = 0;
    uint64_t v12 = 0;
LABEL_7:
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
LABEL_8:
    *a2 = v13;
    a2[1] = v12;
    a2[2] = v14;
    a2[3] = v15;
    a2[4] = v16;
    a2[5] = v17;
    a2[6] = v18;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t Graph.remove(_:)(uint64_t a1)
{
  return specialized Graph.remove(_:)(*(void *)(a1 + 24));
}

{
  long long v1;
  uint64_t v2;
  long long v3;
  unint64_t v4;
  void (*v5)(void *, void);
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int64_t *v17;
  void *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  char v33;
  int v34;
  uint64_t result;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  char v40;
  int64_t v41;
  void *v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  void *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t *v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  long long *v70;
  long long *v71;
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  void *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t);
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  BOOL v92;
  uint64_t v93;
  uint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned int v123;
  unsigned int v124;
  unint64_t v125;
  unint64_t v126;
  void (*v127)(void *, void);
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void v146[4];
  long long v147[3];
  uint64_t v148;
  long long v149;
  long long v150[2];
  long long v151;
  unint64_t v152;
  _OWORD v153[2];

  long long v1 = *(_OWORD *)(a1 + 72);
  v150[0] = *(_OWORD *)(a1 + 56);
  v150[1] = v1;
  v151 = *(_OWORD *)(a1 + 88);
  v152 = *(void *)(a1 + 104);
  uint64_t v2 = *((void *)&v150[0] + 1);
  v153[0] = v1;
  uint64_t v3 = *(_OWORD *)(a1 + 16);
  v147[0] = *(_OWORD *)a1;
  v147[1] = v3;
  v147[2] = *(_OWORD *)(a1 + 32);
  v148 = *(void *)(a1 + 48);
  v149 = v3;
  swift_retain();
  outlined retain of String((uint64_t)v153);
  swift_retain();
  outlined retain of String((uint64_t)&v149);
  unint64_t v4 = (unint64_t)v146;
  uint64_t v5 = (void (*)(void *, void))specialized OrderedDictionary.subscript.modify(v146, *(uint64_t *)&v147[0]);
  if (!v6[1])
  {
    v5(v146, 0);
    goto LABEL_77;
  }
  char v7 = v6;
  v127 = v5;
  v145 = v2;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  uint64_t v10 = *(void *)(v8 + 16);
  if (*v7)
  {
    swift_retain();
    swift_retain();
    uint64_t v11 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v147, v8 + 32, v10, (void *)(v9 + 16), v9 + 32);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
  }
  else
  {
    swift_retain();
    uint64_t v11 = specialized Collection<>.firstIndex(of:)(v147, v8 + 32, v10);
    uint64_t v13 = v16;
    uint64_t v15 = 0;
  }
  uint64_t v17 = v7 + 2;
  v141 = *((void *)&v153[0] + 1);
  v142 = *(void *)&v153[0];
  swift_release();
  swift_release();
  if ((v13 & 1) == 0)
  {
    uint64_t v18 = (void *)*v17;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    void *v17 = (int64_t)v18;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v18 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v18);
      void *v17 = (int64_t)v18;
    }
    if ((v11 & 0x8000000000000000) != 0) {
      goto LABEL_172;
    }
    uint64_t v20 = v18[2];
    if (v11 < v20)
    {
      uint64_t v21 = &v18[2 * v11];
      uint64_t v24 = v21[5];
      uint64_t v22 = v21 + 5;
      uint64_t v23 = v24;
      uint64_t v25 = *(void *)(v24 + 16);
      if (!v25) {
        goto LABEL_72;
      }
      v128 = v22;
      v143 = *(void *)&v150[0];
      v121 = v151;
      v125 = v152;
      v123 = BYTE8(v151);
      v115 = BYTE8(v151) ^ 1;
      swift_retain();
      uint64_t v26 = 0;
      uint64_t v11 = 0;
      while (1)
      {
        long long v27 = v23 + v26;
        if (*(void *)(v23 + v26 + 32) == v143)
        {
          char v28 = (void *)v25;
          uint64_t v29 = *(void *)(v27 + 40);
          uint64_t v15 = *(void *)(v27 + 48);
          long long v30 = *(void *)(v27 + 56);
          uint64_t v8 = *(unsigned __int8 *)(v27 + 72);
          v129 = *(void *)(v27 + 64);
          v135 = *(void *)(v27 + 80);
          uint64_t v31 = *(uint64_t (**)(uint64_t))(*(void *)v29 + 128);
          uint64_t v17 = (int64_t *)(*(void *)v29 + 128);
          swift_retain();
          swift_bridgeObjectRetain();
          if (v31(v145))
          {
            if (v15 == v142 && v30 == v141)
            {
              swift_bridgeObjectRelease();
              swift_release();
              uint64_t v25 = (uint64_t)v28;
              if ((v8 & 1) == 0)
              {
LABEL_28:
                uint64_t v34 = v115;
                if (v129 != v121) {
                  uint64_t v34 = 0;
                }
                if (v34 == 1 && v135 == v125)
                {
LABEL_32:
                  unint64_t result = swift_release();
                  uint64_t v36 = v11 + 1;
                  if (!__OFADD__(v11, 1))
                  {
                    long long v37 = *v128;
                    uint64_t v20 = *(void *)(*v128 + 16);
                    if (v36 == v20)
                    {
                      uint64_t v25 = v11;
                      goto LABEL_67;
                    }
                    unint64_t v4 = v26 + 136;
                    uint64_t v25 = v11;
LABEL_99:
                    if (v36 >= v20)
                    {
                      __break(1u);
LABEL_169:
                      __break(1u);
LABEL_170:
                      __break(1u);
LABEL_171:
                      __break(1u);
LABEL_172:
                      __break(1u);
                      break;
                    }
                    uint64_t v11 = v37 + v4;
                    uint64_t v20 = *(void *)(v37 + v4 - 48);
                    if (v20 != v143) {
                      goto LABEL_114;
                    }
                    uint64_t v8 = v25;
                    v80 = *(void *)(v11 - 40);
                    uint64_t v15 = *(void *)(v11 - 32);
                    v81 = *(void *)(v11 - 24);
                    v117 = *(void *)(v11 - 16);
                    v137 = *(unsigned char *)(v11 - 8);
                    v131 = *(void *)v11;
                    v82 = *(uint64_t (**)(uint64_t))(*(void *)v80 + 128);
                    uint64_t v17 = (int64_t *)(*(void *)v80 + 128);
                    swift_retain();
                    swift_bridgeObjectRetain();
                    if ((v82(v145) & 1) == 0)
                    {
                      swift_bridgeObjectRelease();
                      unint64_t result = swift_release();
                      uint64_t v25 = v8;
                      goto LABEL_114;
                    }
                    if (v15 == v142 && v81 == v141)
                    {
                      swift_bridgeObjectRelease();
                      unint64_t result = swift_release();
                      uint64_t v25 = v8;
                      if ((v137 & 1) == 0) {
                        goto LABEL_129;
                      }
LABEL_108:
                      if (v131 == v125) {
                        uint64_t v20 = v123;
                      }
                      else {
                        uint64_t v20 = 0;
                      }
                      if ((v20 & 1) == 0) {
                        goto LABEL_114;
                      }
LABEL_132:
                      v84 = v128;
                    }
                    else
                    {
                      uint64_t v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      unint64_t result = swift_release();
                      uint64_t v25 = v8;
                      if (v15)
                      {
                        if (v137) {
                          goto LABEL_108;
                        }
LABEL_129:
                        uint64_t v20 = v123;
                        if ((v123 & 1) == 0)
                        {
                          uint64_t v20 = v121;
                          if (v117 == v121)
                          {
                            uint64_t v20 = v125;
                            if (v131 == v125) {
                              goto LABEL_132;
                            }
                          }
                        }
                      }
LABEL_114:
                      v84 = v128;
                      if (v36 != v25)
                      {
                        if (v25 < 0) {
                          goto LABEL_181;
                        }
                        v85 = *(void *)(v37 + 16);
                        if (v25 >= v85) {
                          goto LABEL_182;
                        }
                        if (v36 >= v85) {
                          goto LABEL_183;
                        }
                        v86 = v37 + 32 + 56 * v25;
                        uint64_t v8 = *(void *)(v86 + 24);
                        v109 = *(void *)(v86 + 16);
                        v111 = *(void *)(v86 + 8);
                        v107 = *(void *)(v86 + 32);
                        v105 = *(unsigned char *)(v86 + 40);
                        v103 = *(void *)(v86 + 48);
                        v87 = *(void *)(v11 - 40);
                        uint64_t v17 = *(int64_t **)(v11 - 32);
                        uint64_t v15 = *(void *)(v11 - 24);
                        v132 = *(void *)(v11 - 16);
                        v138 = *(void *)(v11 - 48);
                        uint64_t v11 = *(unsigned __int8 *)(v11 - 8);
                        v113 = *(void *)v86;
                        v118 = *(void *)(v37 + v4);
                        v88 = *v128;
                        swift_retain();
                        swift_bridgeObjectRetain();
                        swift_retain();
                        swift_bridgeObjectRetain();
                        unint64_t result = swift_isUniquelyReferenced_nonNull_native();
                        *v128 = v88;
                        if ((result & 1) == 0)
                        {
                          unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v88);
                          v88 = result;
                          *v128 = result;
                        }
                        if ((unint64_t)v25 >= *(void *)(v88 + 16)) {
                          goto LABEL_184;
                        }
                        v89 = v88 + 56 * v25;
                        *(void *)(v89 + 32) = v138;
                        *(void *)(v89 + 40) = v87;
                        *(void *)(v89 + 48) = v17;
                        *(void *)(v89 + 56) = v15;
                        *(void *)(v89 + 64) = v132;
                        *(unsigned char *)(v89 + 72) = v11;
                        *(void *)(v89 + 80) = v118;
                        swift_bridgeObjectRelease();
                        swift_release();
                        v84 = v128;
                        v90 = *v128;
                        unint64_t result = swift_isUniquelyReferenced_nonNull_native();
                        *v128 = v90;
                        if ((result & 1) == 0)
                        {
                          unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v90);
                          v90 = result;
                          *v128 = result;
                        }
                        if (v36 >= *(void *)(v90 + 16)) {
                          goto LABEL_185;
                        }
                        v91 = (void *)(v90 + v4);
                        *(v91 - 6) = v113;
                        *(v91 - 5) = v111;
                        *(v91 - 4) = v109;
                        *(v91 - 3) = v8;
                        *(v91 - 2) = v107;
                        *((unsigned char *)v91 - 8) = v105;
                        *v91 = v103;
                        swift_bridgeObjectRelease();
                        unint64_t result = swift_release();
                      }
                      v92 = __OFADD__(v25++, 1);
                      if (v92) {
                        goto LABEL_170;
                      }
                    }
                    ++v36;
                    long long v37 = *v84;
                    uint64_t v20 = *(void *)(*v84 + 16);
                    v4 += 56;
                    if (v36 == v20) {
                      goto LABEL_67;
                    }
                    goto LABEL_99;
                  }
LABEL_191:
                  __break(1u);
                  goto LABEL_192;
                }
                goto LABEL_14;
              }
              goto LABEL_23;
            }
            uint64_t v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v25 = (uint64_t)v28;
            if (v15)
            {
              if ((v8 & 1) == 0) {
                goto LABEL_28;
              }
LABEL_23:
              v33 = v123;
              if (v135 != v125) {
                v33 = 0;
              }
              if (v33) {
                goto LABEL_32;
              }
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v25 = (uint64_t)v28;
          }
        }
LABEL_14:
        ++v11;
        v26 += 56;
        if (v25 == v11)
        {
          swift_release();
          uint64_t v36 = *(void *)(*v128 + 16);
LABEL_67:
          if ((uint64_t)v36 >= v25) {
            goto LABEL_73;
          }
          __break(1u);
LABEL_69:
          swift_release();
          uint64_t v36 = *(void *)(*v128 + 16);
LABEL_70:
          if ((uint64_t)v36 < (uint64_t)v11)
          {
            __break(1u);
LABEL_72:
            uint64_t v36 = 0;
LABEL_73:
            v60 = v25;
LABEL_76:
            specialized ContiguousArray.replaceSubrange<A>(_:with:)(v60, v36);
            specialized OrderedSet._regenerateHashTable()();
            v127(v146, 0);
LABEL_77:
            v43 = (unint64_t)v146;
            uint64_t v15 = specialized OrderedDictionary.subscript.modify(v146, *(uint64_t *)&v150[0]);
            if (!*(void *)(v61 + 8))
            {
              ((void (*)(void *, void))v15)(v146, 0);
              v70 = &v149;
              v71 = v153;
              goto LABEL_97;
            }
            v62 = (int64_t *)(v61 + 24);
            swift_retain();
            swift_retain();
            swift_release();
            swift_release();
            uint64_t v39 = *v62;
            v63 = v62[1];
            v64 = *(void *)(v63 + 16);
            if (*v62)
            {
              swift_retain();
              swift_retain();
              v65 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v150, v63 + 32, v64, (void *)(v39 + 16), v39 + 32);
              v67 = v66;
              v69 = v68;
            }
            else
            {
              swift_retain();
              v65 = specialized Collection<>.firstIndex(of:)(v150, v63 + 32, v64);
              v67 = v72;
              v69 = 0;
            }
            uint64_t v8 = (uint64_t)(v62 + 2);
            swift_release();
            swift_release();
            if (v67)
            {
LABEL_88:
              specialized OrderedSet._appendNew(_:in:)(v150, v69);
              v75 = *(void **)v8;
              v76 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)uint64_t v8 = v75;
              if ((v76 & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v75[2] + 1, 1);
                v75 = *(void **)v8;
              }
              v43 = v75[2];
              v45 = v75[3];
              uint64_t v39 = v43 + 1;
              if (v43 >= v45 >> 1) {
                goto LABEL_178;
              }
            }
            else
            {
              v73 = *(void **)v8;
              v74 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)uint64_t v8 = v73;
              if ((v74 & 1) == 0)
              {
                v73 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v73);
                *(void *)uint64_t v8 = v73;
              }
              if ((v65 & 0x8000000000000000) == 0)
              {
                if (v65 >= v73[2])
                {
                  __break(1u);
                  goto LABEL_88;
                }
LABEL_96:
                v79 = &v73[7 * v65];
                outlined consume of Input?(v79[4], v79[5]);
                v79[10] = 0;
                *((_OWORD *)v79 + 3) = 0u;
                *((_OWORD *)v79 + 4) = 0u;
                *((_OWORD *)v79 + 2) = 0u;
                ((void (*)(void *, void))v15)(v146, 0);
                v70 = v153;
                v71 = &v149;
LABEL_97:
                swift_release();
                outlined release of String((uint64_t)v71);
                swift_release();
                return outlined release of String((uint64_t)v70);
              }
LABEL_177:
              __break(1u);
LABEL_178:
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v39, 1);
              v75 = *(void **)v8;
            }
            v75[2] = v39;
            v77 = &v75[7 * v43];
            *((_OWORD *)v77 + 2) = 0u;
            *((_OWORD *)v77 + 3) = 0u;
            *((_OWORD *)v77 + 4) = 0u;
            v77[10] = 0;
            v73 = *(void **)v8;
            v78 = *(void *)(*(void *)v8 + 16);
            unint64_t result = swift_isUniquelyReferenced_nonNull_native();
            *(void *)uint64_t v8 = v73;
            if ((result & 1) == 0)
            {
              unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v73);
              v73 = (void *)result;
              *(void *)uint64_t v8 = result;
            }
            if (v78)
            {
              if (v78 <= v73[2])
              {
                v65 = v78 - 1;
                goto LABEL_96;
              }
            }
            else
            {
              __break(1u);
            }
            __break(1u);
LABEL_181:
            __break(1u);
LABEL_182:
            __break(1u);
LABEL_183:
            __break(1u);
LABEL_184:
            __break(1u);
LABEL_185:
            __break(1u);
LABEL_186:
            __break(1u);
LABEL_187:
            __break(1u);
LABEL_188:
            __break(1u);
LABEL_189:
            __break(1u);
LABEL_190:
            __break(1u);
            goto LABEL_191;
          }
LABEL_75:
          v60 = v11;
          goto LABEL_76;
        }
      }
    }
    __break(1u);
    goto LABEL_174;
  }
  specialized OrderedSet._appendNew(_:in:)(v147, v15);
  uint64_t v8 = specialized OrderedSet.init<A>(_:)(MEMORY[0x263F8EE78]);
  uint64_t v11 = v38;
  uint64_t v39 = v7[2];
  long long v40 = swift_isUniquelyReferenced_nonNull_native();
  v7[2] = v39;
  if ((v40 & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v39 + 16) + 1, 1);
    uint64_t v39 = *v17;
  }
  unint64_t v4 = *(void *)(v39 + 16);
  uint64_t v20 = *(void *)(v39 + 24);
  uint64_t v15 = v4 + 1;
  if (v4 >= v20 >> 1)
  {
LABEL_174:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v15, 1);
    uint64_t v39 = *v17;
  }
  *(void *)(v39 + 16) = v15;
  uint64_t v41 = v39 + 16 * v4;
  *(void *)(v41 + 32) = v8;
  *(void *)(v41 + 40) = v11;
  v42 = (void *)*v17;
  v43 = *(void *)(*v17 + 16);
  v44 = swift_isUniquelyReferenced_nonNull_native();
  void *v17 = (int64_t)v42;
  if ((v44 & 1) == 0)
  {
    v42 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v42);
    void *v17 = (int64_t)v42;
  }
  if (!v43)
  {
    __break(1u);
    goto LABEL_176;
  }
  v45 = v42[2];
  if (v43 > v45)
  {
LABEL_176:
    __break(1u);
    goto LABEL_177;
  }
  v46 = &v42[2 * v43 - 2];
  v49 = v46[5];
  v47 = v46 + 5;
  v48 = v49;
  uint64_t v11 = *(void *)(v49 + 16);
  if (!v11)
  {
    uint64_t v36 = 0;
    goto LABEL_75;
  }
  v128 = v47;
  v144 = *(void *)&v150[0];
  v122 = v151;
  v126 = v152;
  v124 = BYTE8(v151);
  v116 = BYTE8(v151) ^ 1;
  swift_retain();
  v50 = 0;
  uint64_t v25 = 0;
  while (1)
  {
    v51 = v48 + v50;
    if (*(void *)(v48 + v50 + 32) != v144) {
      goto LABEL_45;
    }
    v52 = v11;
    v53 = *(void *)(v51 + 40);
    uint64_t v15 = *(void *)(v51 + 48);
    v54 = *(void *)(v51 + 56);
    uint64_t v8 = *(unsigned __int8 *)(v51 + 72);
    v130 = *(void *)(v51 + 64);
    v136 = *(void *)(v51 + 80);
    v55 = *(uint64_t (**)(uint64_t))(*(void *)v53 + 128);
    uint64_t v17 = (int64_t *)(*(void *)v53 + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((v55(v145) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v11 = v52;
      goto LABEL_45;
    }
    if (v15 != v142 || v54 != v141)
    {
      uint64_t v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v11 = v52;
      if ((v15 & 1) == 0) {
        goto LABEL_45;
      }
      if ((v8 & 1) == 0) {
        break;
      }
      goto LABEL_54;
    }
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v11 = v52;
    if ((v8 & 1) == 0) {
      break;
    }
LABEL_54:
    v57 = v124;
    if (v136 != v126) {
      v57 = 0;
    }
    if (v57) {
      goto LABEL_63;
    }
LABEL_45:
    ++v25;
    v50 += 56;
    if (v11 == v25) {
      goto LABEL_69;
    }
  }
  v58 = v116;
  if (v130 != v122) {
    v58 = 0;
  }
  if (v58 != 1 || v136 != v126) {
    goto LABEL_45;
  }
LABEL_63:
  unint64_t result = swift_release();
  uint64_t v36 = v25 + 1;
  if (!__OFADD__(v25, 1))
  {
    v59 = *v128;
    uint64_t v20 = *(void *)(*v128 + 16);
    if (v36 == v20)
    {
      uint64_t v11 = v25;
      goto LABEL_70;
    }
    unint64_t v4 = v50 + 136;
    uint64_t v11 = v25;
    while (2)
    {
      if (v36 >= v20) {
        goto LABEL_169;
      }
      uint64_t v25 = v59 + v4;
      uint64_t v20 = *(void *)(v59 + v4 - 48);
      if (v20 != v144) {
        goto LABEL_149;
      }
      uint64_t v8 = v11;
      uint64_t v15 = *(void *)(v25 - 32);
      v93 = *(void *)(v25 - 24);
      v119 = *(void *)(v25 - 16);
      v139 = *(unsigned char *)(v25 - 8);
      v133 = *(void *)v25;
      uint64_t v17 = *(int64_t **)(**(void **)(v25 - 40) + 128);
      swift_retain();
      swift_bridgeObjectRetain();
      if ((((uint64_t (*)(uint64_t))v17)(v145) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        unint64_t result = swift_release();
        goto LABEL_149;
      }
      if (v15 == v142 && v93 == v141)
      {
        swift_bridgeObjectRelease();
        unint64_t result = swift_release();
        if ((v139 & 1) == 0) {
          goto LABEL_164;
        }
LABEL_143:
        if (v133 == v126) {
          uint64_t v20 = v124;
        }
        else {
          uint64_t v20 = 0;
        }
        if ((v20 & 1) == 0) {
          goto LABEL_149;
        }
LABEL_167:
        v95 = v128;
      }
      else
      {
        uint64_t v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        unint64_t result = swift_release();
        if (v15)
        {
          if (v139) {
            goto LABEL_143;
          }
LABEL_164:
          uint64_t v20 = v124;
          if ((v124 & 1) == 0)
          {
            uint64_t v20 = v122;
            if (v119 == v122)
            {
              uint64_t v20 = v126;
              if (v133 == v126) {
                goto LABEL_167;
              }
            }
          }
        }
LABEL_149:
        v95 = v128;
        if (v36 != v11)
        {
          if ((v11 & 0x8000000000000000) != 0) {
            goto LABEL_186;
          }
          v96 = *(void *)(v59 + 16);
          if (v11 >= v96) {
            goto LABEL_187;
          }
          if (v36 >= v96) {
            goto LABEL_188;
          }
          v97 = v59 + 32 + 56 * v11;
          uint64_t v8 = *(void *)(v97 + 24);
          v110 = *(void *)(v97 + 16);
          v112 = *(void *)(v97 + 8);
          v108 = *(void *)(v97 + 32);
          v106 = *(unsigned char *)(v97 + 40);
          v104 = *(void *)(v97 + 48);
          v98 = *(void *)(v25 - 40);
          uint64_t v17 = *(int64_t **)(v25 - 32);
          uint64_t v15 = *(void *)(v25 - 24);
          v134 = *(void *)(v25 - 16);
          v140 = *(void *)(v25 - 48);
          uint64_t v25 = *(unsigned __int8 *)(v25 - 8);
          v114 = *(void *)v97;
          v120 = *(void *)(v59 + v4);
          v99 = *v128;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          unint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *v128 = v99;
          if ((result & 1) == 0)
          {
            unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v99);
            v99 = result;
            *v128 = result;
          }
          if (v11 >= *(void *)(v99 + 16)) {
            goto LABEL_189;
          }
          v100 = v99 + 56 * v11;
          *(void *)(v100 + 32) = v140;
          *(void *)(v100 + 40) = v98;
          *(void *)(v100 + 48) = v17;
          *(void *)(v100 + 56) = v15;
          *(void *)(v100 + 64) = v134;
          *(unsigned char *)(v100 + 72) = v25;
          *(void *)(v100 + 80) = v120;
          swift_bridgeObjectRelease();
          swift_release();
          v95 = v128;
          v101 = *v128;
          unint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *v128 = v101;
          if ((result & 1) == 0)
          {
            unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v101);
            v101 = result;
            *v128 = result;
          }
          if (v36 >= *(void *)(v101 + 16)) {
            goto LABEL_190;
          }
          v102 = (void *)(v101 + v4);
          *(v102 - 6) = v114;
          *(v102 - 5) = v112;
          *(v102 - 4) = v110;
          *(v102 - 3) = v8;
          *(v102 - 2) = v108;
          *((unsigned char *)v102 - 8) = v106;
          *v102 = v104;
          swift_bridgeObjectRelease();
          unint64_t result = swift_release();
        }
        v92 = __OFADD__(v11++, 1);
        if (v92) {
          goto LABEL_171;
        }
      }
      ++v36;
      v59 = *v95;
      uint64_t v20 = *(void *)(*v95 + 16);
      v4 += 56;
      if (v36 == v20) {
        goto LABEL_70;
      }
      continue;
    }
  }
LABEL_192:
  __break(1u);
  return result;
}

unint64_t Graph.moveEdge(from:to:)(uint64_t a1, long long *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(v3 + 16);
  unint64_t result = specialized OrderedSet._find(_:)(*(void *)a1, *(void *)v3, *(void **)(v3 + 8), (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if (v9) {
    return result;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (result >= *(void *)(v7 + 16))
  {
LABEL_23:
    __break(1u);
    return result;
  }
  uint64_t v10 = (void *)(v7 + 48 * result);
  long long v37 = a2;
  uint64_t v11 = v10[4];
  uint64_t v12 = v10[5];
  uint64_t v13 = v10[7];
  uint64_t v15 = v10[8];
  uint64_t v14 = v10[9];
  long long v50 = *(_OWORD *)(a1 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of String((uint64_t)&v50);
  swift_retain();
  swift_retain();
  specialized OrderedDictionary.subscript.getter(a1, v13, v15, v14, v40);
  swift_release();
  outlined release of String((uint64_t)&v50);
  outlined consume of Graph.Adjacent?(v11, v12);
  unint64_t result = outlined init with take of MetalFunctionNode?((uint64_t)v40, (uint64_t)&v42, &demangling cache variable for type metadata for Output??);
  unint64_t v16 = v43;
  if (v43 >= 2)
  {
    uint64_t v17 = v42;
    uint64_t v18 = v45;
    uint64_t v19 = v47 & 1;
    v51[0] = v42;
    v51[1] = v43;
    uint64_t v34 = v46;
    uint64_t v35 = v44;
    v51[2] = v44;
    v51[3] = v45;
    v51[4] = v46;
    char v52 = v47 & 1;
    uint64_t v36 = v48;
    uint64_t v53 = v48;
    uint64_t v20 = *(void *)v37;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v21 = (void (*)(_OWORD *, void))specialized OrderedDictionary.subscript.modify(v54, v20);
    if (*(void *)(v22 + 8))
    {
      long long v49 = v37[1];
      v56[0] = v17;
      v56[1] = v16;
      v56[2] = v35;
      v56[3] = v18;
      v56[4] = v34;
      v56[5] = v19;
      v56[6] = v36;
      uint64_t v23 = v21;
      swift_retain();
      outlined retain of String((uint64_t)&v49);
      swift_retain();
      swift_bridgeObjectRetain();
      specialized OrderedDictionary.subscript.setter(v56, v37);
      v23(v54, 0);
    }
    else
    {
      v21(v54, 0);
    }
    uint64_t v24 = (void (*)(uint64_t *, void))specialized OrderedDictionary.subscript.modify(v41, v6);
    if (*(void *)(v25 + 8))
    {
      v54[0] = xmmword_25C41A100;
      memset(&v54[1], 0, 32);
      uint64_t v55 = 0;
      swift_retain();
      outlined retain of String((uint64_t)&v50);
      specialized OrderedDictionary.subscript.setter(v54, (long long *)a1);
    }
    v24(v41, 0);
    uint64_t v26 = (void (*)(void *, void))specialized OrderedDictionary.subscript.modify(v39, v17);
    if (*(void *)(v27 + 8))
    {
      swift_retain();
      swift_retain();
      swift_release();
      swift_release();
      swift_retain();
      swift_bridgeObjectRetain();
      char v28 = (void (*)(void *, void))specialized OrderedDictionary.subscript.modify(v38, v51);
      if (*(void *)(v29 + 8))
      {
        specialized OrderedSet.remove(_:)(a1, v41);
        v28(v38, 0);
        swift_bridgeObjectRelease();
        swift_release();
        v26(v39, 0);
        outlined release of Input?(v41);
      }
      else
      {
        v28(v38, 0);
        swift_bridgeObjectRelease();
        swift_release();
        v26(v39, 0);
      }
    }
    else
    {
      v26(v39, 0);
    }
    long long v30 = (void (*)(void *, void))specialized OrderedDictionary.subscript.modify(v39, v17);
    if (*(void *)(v31 + 8))
    {
      swift_retain();
      swift_retain();
      swift_release();
      swift_release();
      swift_retain();
      swift_bridgeObjectRetain();
      long long v32 = (void (*)(void *, void))specialized OrderedDictionary.subscript.modify(v38, v51);
      if (*(void *)(v33 + 8)) {
        specialized OrderedSet._append(_:)(v37);
      }
      v32(v38, 0);
      swift_bridgeObjectRelease();
      swift_release();
      v30(v39, 0);
    }
    else
    {
      v30(v39, 0);
    }
    outlined release of Output??(v40, (void (*)(void, void, void, void, void, void, void))outlined consume of Output??);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

unint64_t Graph.copyEdge(originalDestination:newDestination:)(uint64_t a1, unint64_t a2)
{
  long long v5 = v2[9];
  long long v37 = v2[8];
  v38[0] = v5;
  *(_OWORD *)((char *)v38 + 9) = *(long long *)((char *)v2 + 153);
  long long v6 = v2[5];
  long long v33 = v2[4];
  long long v34 = v6;
  long long v7 = v2[7];
  long long v35 = v2[6];
  long long v36 = v7;
  long long v8 = v2[1];
  long long v29 = *v2;
  long long v30 = v8;
  long long v9 = v2[3];
  long long v31 = v2[2];
  long long v32 = v9;
  uint64_t v10 = v8;
  unint64_t result = specialized OrderedSet._find(_:)(*(void *)a2, v29, *((void **)&v29 + 1), (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if (v12)
  {
LABEL_8:
    Graph.edge(to:)(a1, v18);
    outlined init with take of MetalFunctionNode?((uint64_t)v18, (uint64_t)&v19, &demangling cache variable for type metadata for Edge?);
    if (*((void *)&v19 + 1))
    {
      v25[0] = v19;
      v25[1] = v20;
      v25[2] = v21;
      uint64_t v26 = v22;
      long long v27 = v20;
      swift_retain();
      outlined retain of String((uint64_t)&v27);
      outlined release of Edge?(v18);
      Graph.connect(_:to:)((uint64_t)v25, a2);
      swift_release();
      outlined release of String((uint64_t)&v27);
      return 1;
    }
    return 0;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (result >= *(void *)(v10 + 16))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v13 = (void *)(v10 + 48 * result);
  uint64_t v14 = v13[7];
  uint64_t v15 = v13[8];
  uint64_t v16 = v13[9];
  long long v28 = *(_OWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of String((uint64_t)&v28);
  swift_retain();
  specialized OrderedDictionary.subscript.getter(a2, v14, v15, v16, v17);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined release of String((uint64_t)&v28);
  outlined init with take of MetalFunctionNode?((uint64_t)v17, (uint64_t)v23, &demangling cache variable for type metadata for Output??);
  if (!v24)
  {
    outlined release of Output??(v17, (void (*)(void, void, void, void, void, void, void))outlined consume of Output??);
    goto LABEL_8;
  }
  if (v24 == 1) {
    goto LABEL_8;
  }
  swift_retain();
  outlined retain of String((uint64_t)&v28);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return 0;
}

unint64_t Graph.replaceShaderGraphData(for:with:)(uint64_t a1, unint64_t a2)
{
  long long v5 = *(void **)(v2 + 64);
  outlined copy of NodePersonality(a2);
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    unint64_t v7 = *(void *)(a1 + 24);
    if ((v7 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  long long v5 = (void *)result;
  unint64_t v7 = *(void *)(a1 + 24);
  if ((v7 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v7 < v5[2])
  {
    long long v8 = &v5[6 * v7];
    unint64_t v9 = v8[4];
    v8[4] = a2;
    unint64_t result = outlined consume of NodePersonality(v9);
    *(void *)(v2 + 64) = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void Graph.hoist(_:)(void *a1)
{
  outlined init with take of NodePersonality(a1, &v116);
  outlined init with take of NodePersonality(&v116, v119);
  unint64_t v2 = v119[0];
  if (v119[0] >> 61 == 6)
  {
    v73 = a1;
    v119[0] &= 0x1FFFFFFFFFFFFFFFuLL;
    long long v3 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
    long long v4 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x50);
    long long v5 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x60);
    v87[6] = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x70);
    long long v6 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    long long v7 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
    v87[1] = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
    v87[2] = v7;
    v87[4] = v4;
    v87[5] = v5;
    v87[3] = v3;
    long long v8 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x80);
    long long v9 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x90);
    long long v10 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0xA0);
    *(_OWORD *)((char *)v88 + 9) = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0xA9);
    v87[8] = v9;
    v88[0] = v10;
    v87[7] = v8;
    v87[0] = v6;
    long long v11 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x90);
    long long v96 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x80);
    long long v97 = v11;
    *(_OWORD *)v98 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0xA0);
    *(_OWORD *)&v98[9] = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0xA9);
    long long v12 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x50);
    long long v92 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
    long long v93 = v12;
    long long v13 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x70);
    long long v94 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x60);
    long long v95 = v13;
    long long v14 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
    long long v89 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    long long v90 = v14;
    long long v91 = *(_OWORD *)((v2 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
    outlined retain of Graph((uint64_t)v87);
    Graph.flatten()();
    unint64_t v15 = v94;
    unint64_t v16 = v97;
    uint64_t v79 = *(void *)&v98[8];
    uint64_t v80 = *((void *)&v95 + 1);
    unint64_t v86 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    unint64_t v72 = v15;
    unint64_t v71 = v16;
    if (*(void *)(v93 + 16))
    {
      uint64_t v17 = v93 + 32;
      unint64_t v75 = *(void *)(v93 + 16);
      swift_bridgeObjectRetain_n();
      outlined copy of NodePersonality(v15);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v18 = v17;
      unint64_t v19 = v75;
      unint64_t v20 = 0;
      uint64_t v74 = v17;
      while (1)
      {
        long long v21 = (unint64_t *)(v18 + 48 * v20);
        unint64_t v22 = v21[3];
        if (v22 == -7) {
          goto LABEL_32;
        }
        if (v80 == v22 || v79 == v22) {
          goto LABEL_32;
        }
        unint64_t v77 = v20;
        unint64_t v25 = *v21;
        unint64_t v24 = v21[1];
        unint64_t v26 = v21[2];
        int64_t v27 = *(void *)(v24 + 16);
        unint64_t v82 = v21[3];
        unint64_t v83 = v26;
        unint64_t v81 = *v21;
        if (v27)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of NodePersonality(v25);
          *(void *)&v117[0] = MEMORY[0x263F8EE78];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
          uint64_t v28 = *(void *)&v117[0];
          long long v29 = (uint64_t *)(v24 + 56);
          do
          {
            uint64_t v30 = *(v29 - 2);
            uint64_t v31 = *(v29 - 1);
            uint64_t v32 = *v29;
            *(void *)&v117[0] = v28;
            unint64_t v34 = *(void *)(v28 + 16);
            unint64_t v33 = *(void *)(v28 + 24);
            swift_retain();
            swift_bridgeObjectRetain();
            if (v34 >= v33 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
              uint64_t v28 = *(void *)&v117[0];
            }
            *(void *)(v28 + 16) = v34 + 1;
            long long v35 = (void *)(v28 + 24 * v34);
            v35[4] = v31;
            v35[5] = v32;
            v35[6] = v30;
            v29 += 7;
            --v27;
          }
          while (v27);
          uint64_t v78 = v28;
          swift_bridgeObjectRelease();
          unint64_t v25 = v81;
          unint64_t v26 = v83;
          int64_t v36 = *(void *)(v83 + 16);
          if (v36)
          {
LABEL_15:
            *(void *)&v117[0] = MEMORY[0x263F8EE78];
            swift_bridgeObjectRetain();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36, 0);
            uint64_t v37 = *(void *)&v117[0];
            v38 = (uint64_t *)(v26 + 56);
            do
            {
              uint64_t v39 = *(v38 - 2);
              uint64_t v40 = *(v38 - 1);
              uint64_t v41 = *v38;
              *(void *)&v117[0] = v37;
              unint64_t v43 = *(void *)(v37 + 16);
              unint64_t v42 = *(void *)(v37 + 24);
              swift_retain();
              swift_bridgeObjectRetain();
              if (v43 >= v42 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
                uint64_t v37 = *(void *)&v117[0];
              }
              *(void *)(v37 + 16) = v43 + 1;
              uint64_t v44 = (void *)(v37 + 24 * v43);
              v44[4] = v40;
              v44[5] = v41;
              v44[6] = v39;
              v38 += 7;
              --v36;
            }
            while (v36);
            swift_bridgeObjectRelease();
            unint64_t v25 = v81;
            goto LABEL_22;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          outlined copy of NodePersonality(v25);
          swift_bridgeObjectRetain();
          uint64_t v78 = MEMORY[0x263F8EE78];
          int64_t v36 = *(void *)(v26 + 16);
          if (v36) {
            goto LABEL_15;
          }
        }
        uint64_t v37 = MEMORY[0x263F8EE78];
LABEL_22:
        specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(*(void *)(v76 + 40), v78, v37, v25, v76 + 64, v76, v99);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&v117[0] = v86;
        uint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v82);
        uint64_t v48 = *(void *)(v86 + 16);
        BOOL v49 = (v46 & 1) == 0;
        uint64_t v50 = v48 + v49;
        if (__OFADD__(v48, v49)) {
          goto LABEL_42;
        }
        char v51 = v46;
        if (*(void *)(v86 + 24) >= v50)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v50, isUniquelyReferenced_nonNull_native);
          uint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v82);
          if ((v51 & 1) != (v53 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return;
          }
          uint64_t v47 = v52;
        }
        unint64_t v54 = *(void *)&v117[0];
        if (v51) {
          *(void *)(*(void *)(*(void *)&v117[0] + 56) + 8 * v47) = v100;
        }
        else {
          specialized _NativeDictionary._insert(at:key:value:)(v47, v82, v100, *(void *)&v117[0]);
        }
        unint64_t v86 = v54;
        swift_bridgeObjectRelease();
        outlined init with take of NodePersonality(v99, &v115);
        outlined release of NodePersonality(&v115);
        unint64_t v114 = v99[1];
        outlined release of [Input]((uint64_t)&v114);
        unint64_t v113 = v99[2];
        outlined release of [Input]((uint64_t)&v113);
        outlined consume of NodePersonality(v25);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v19 = v75;
        uint64_t v18 = v74;
        unint64_t v20 = v77;
LABEL_32:
        if ((uint64_t)++v20 >= (uint64_t)v19)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_41;
        }
        if (v20 >= v19)
        {
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
      }
    }
    outlined copy of NodePersonality(v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_41:
    uint64_t v60 = swift_bridgeObjectRetain();
    uint64_t v61 = specialized Set.init<A>(_:)(v60, (void (*)(void))lazy protocol witness table accessor for type Output and conformance Output, (uint64_t)&type metadata for Output, &demangling cache variable for type metadata for _SetStorage<Output>);
    swift_bridgeObjectRelease();
    uint64_t v62 = swift_bridgeObjectRetain();
    uint64_t v63 = specialized Set.init<A>(_:)(v62, (void (*)(void))lazy protocol witness table accessor for type Input and conformance Input, (uint64_t)&type metadata for Input, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<Input>);
    uint64_t v64 = swift_bridgeObjectRelease();
    v117[7] = v96;
    v117[8] = v97;
    v118[0] = *(_OWORD *)v98;
    *(_OWORD *)((char *)v118 + 9) = *(_OWORD *)&v98[9];
    v117[4] = v93;
    v117[5] = v94;
    v117[6] = v95;
    v117[0] = v89;
    v117[1] = v90;
    v117[2] = v91;
    v117[3] = v92;
    long long v65 = v89;
    uint64_t v66 = v90;
    MEMORY[0x270FA5388](v64);
    outlined retain of Graph((uint64_t)v117);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v67 = specialized Sequence.compactMap<A>(_:)(v65, *((uint64_t *)&v65 + 1), v66, (void (*)(void *__return_ptr, uint64_t, long long *))partial apply for closure #1 in Graph.sinkNodes());
    swift_release();
    swift_release();
    swift_release();
    specialized Graph.DepthFirstEdgeIterator.init(_:initial:)((uint64_t *)v117, v67, &v101);
    outlined release of Graph((uint64_t)v117);
    uint64_t v69 = v73[2];
    uint64_t v112 = v73[1];
    uint64_t v68 = v112;
    uint64_t v111 = v69;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of NodePersonality(&v116);
    outlined retain of [Input]((uint64_t)&v112);
    outlined retain of [Input]((uint64_t)&v111);
    specialized Sequence.forEach(_:)((uint64_t *)&v101, v61, v63, v68, v69, (long long *)v76, (uint64_t *)&v86);
    outlined release of NodePersonality(&v116);
    outlined release of [Input]((uint64_t)&v112);
    outlined release of [Input]((uint64_t)&v111);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v108 = v101;
    uint64_t v70 = v102;
    outlined init with take of MetalFunctionNode?((uint64_t)&v108, (uint64_t)&v110, &demangling cache variable for type metadata for _HashTable.Storage?);
    outlined release of _HashTable.Storage?((uint64_t)&v110);
    uint64_t v109 = *((void *)&v108 + 1);
    outlined release of _HashTable.Storage?((uint64_t)&v109);
    uint64_t v107 = v70;
    outlined release of _HashTable.Storage?((uint64_t)&v107);
    uint64_t v106 = v103;
    outlined release of [Input]((uint64_t)&v106);
    uint64_t v105 = v104;
    outlined release of [Input]((uint64_t)&v105);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Graph.remove(_:)(v73[3]);
    outlined consume of NodePersonality(v71);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v84[8] = v97;
    v85[0] = *(_OWORD *)v98;
    *(_OWORD *)((char *)v85 + 9) = *(_OWORD *)&v98[9];
    v84[4] = v93;
    v84[5] = v94;
    v84[6] = v95;
    v84[7] = v96;
    v84[0] = v89;
    v84[1] = v90;
    v84[2] = v91;
    v84[3] = v92;
    outlined release of Graph((uint64_t)v84);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for logger != -1) {
LABEL_43:
    }
      swift_once();
    uint64_t v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)logger);
    v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      *(void *)&v117[0] = v59;
      *(_DWORD *)v58 = 136315138;
      *(void *)&long long v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x3A5F287473696F68, 0xE900000000000029, (uint64_t *)v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25C27E000, v56, v57, "%s: Called on a non-graph node.", v58, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261185880](v59, -1, -1);
      MEMORY[0x261185880](v58, -1, -1);
    }
  }
}

unint64_t *Graph.node(containingInput:)@<X0>(unint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *result;
  if (*result == -7)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    char v8 = 0;
    long long v9 = 0uLL;
LABEL_6:
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v6;
    *(void *)(a2 + 16) = v7;
    *(_OWORD *)(a2 + 24) = v9;
    *(unsigned char *)(a2 + 40) = v8;
    return result;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = *(void *)(v2 + 64);
    if (v4 < *(void *)(v10 + 16))
    {
      uint64_t v11 = v10 + 48 * v4;
      unint64_t v5 = *(void *)(v11 + 32);
      uint64_t v6 = *(void *)(v11 + 40);
      uint64_t v7 = *(void *)(v11 + 48);
      long long v12 = *(_OWORD *)(v11 + 56);
      char v8 = *(unsigned char *)(v11 + 72);
      outlined copy of NodePersonality(v5);
      swift_bridgeObjectRetain();
      unint64_t result = (unint64_t *)swift_bridgeObjectRetain();
      long long v9 = v12;
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

__n128 Graph.connectedBreathFirstUpstreamSubgraph(rootedAt:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode>);
  inited = (_OWORD *)swift_initStackObject();
  inited[1] = xmmword_25C418EE0;
  outlined init with take of NodePersonality((void *)a1, v44);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v42 = *(void *)(a1 + 16);
  uint64_t v43 = v7;
  long long v8 = *(_OWORD *)(a1 + 25);
  long long v9 = *(_OWORD *)(a1 + 16);
  inited[2] = *(_OWORD *)a1;
  inited[3] = v9;
  *(_OWORD *)((char *)inited + 57) = v8;
  outlined retain of Graph((uint64_t)v3);
  outlined retain of NodePersonality(v44);
  outlined retain of [Input]((uint64_t)&v43);
  outlined retain of [Input]((uint64_t)&v42);
  specialized Graph.BreathFirstEdgeIterator.init(_:initial:)(v3, (uint64_t)inited, &v27);
  outlined release of Graph((uint64_t)v3);
  uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  unint64_t v26 = (void *)MEMORY[0x263F8EE78];
  long long v39 = v27;
  uint64_t v11 = v28;
  outlined init with take of MetalFunctionNode?((uint64_t)&v39, (uint64_t)v41, &demangling cache variable for type metadata for _HashTable.Storage?);
  uint64_t v40 = *((void *)&v39 + 1);
  uint64_t v37 = *((void *)&v28 + 1);
  uint64_t v38 = v11;
  uint64_t v35 = *((void *)&v29 + 1);
  uint64_t v36 = v29;
  *(_OWORD *)uint64_t v32 = v27;
  *(_OWORD *)&v32[16] = v28;
  *(_OWORD *)&v32[32] = v29;
  outlined retain of _HashTable.Storage?((uint64_t)v41);
  outlined retain of _HashTable.Storage?((uint64_t)&v40);
  outlined retain of _HashTable.Storage?((uint64_t)&v38);
  outlined retain of [Input]((uint64_t)&v37);
  outlined retain of [Input]((uint64_t)&v36);
  outlined retain of [Input]((uint64_t)&v35);
  Graph.BreathFirstEdgeIterator.next()(v30);
  uint64_t v12 = v30[0];
  uint64_t v13 = v31;
  outlined init with take of MetalFunctionNode?((uint64_t)v30, (uint64_t)v33, &demangling cache variable for type metadata for Edge?);
  while (v34)
  {
    specialized OrderedSet._find(_:)(v13, 0, v10, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
    if (v15)
    {
      specialized OrderedSet._appendNew(_:in:)(v13, v14);
      uint64_t v10 = v26;
    }
    specialized OrderedSet._find(_:)(v12, 0, v10, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
    if (v17)
    {
      specialized OrderedSet._appendNew(_:in:)(v12, v16);
      outlined release of Edge?(v30);
      uint64_t v10 = v26;
    }
    else
    {
      outlined release of Edge?(v30);
    }
    Graph.BreathFirstEdgeIterator.next()(v30);
    uint64_t v12 = v30[0];
    uint64_t v13 = v31;
    outlined init with take of MetalFunctionNode?((uint64_t)v30, (uint64_t)v33, &demangling cache variable for type metadata for Edge?);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined retain of Graph((uint64_t)v3);
  uint64_t EdgeIteratorV5edgestAG_tFA2G2IDVXEfU0_AF0E0VTf1cn_nTf4xg_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF0dE4NodeV2IDVG_AJs5NeverOTg504_s11d54Graph0B0V25connectedUpstreamSubgraph8rootedAtSayAA0aB4H61VG5nodes_AC22DepthFirstEdgeIteratorV5edgestAG_tFA2G2IDVXEfU0_AF0E0VTf1cn_nTf4xg_nTm((uint64_t)v10, (uint64_t)v3);
  outlined release of Graph((uint64_t)v3);
  swift_release();
  swift_release();
  unint64_t v19 = (_OWORD *)swift_initStackObject();
  v19[1] = xmmword_25C418EE0;
  long long v20 = *(_OWORD *)(a1 + 25);
  long long v21 = *(_OWORD *)(a1 + 16);
  v19[2] = *(_OWORD *)a1;
  v19[3] = v21;
  *(_OWORD *)((char *)v19 + 57) = v20;
  outlined retain of Graph((uint64_t)v3);
  outlined retain of NodePersonality(v44);
  outlined retain of [Input]((uint64_t)&v43);
  outlined retain of [Input]((uint64_t)&v42);
  specialized Graph.BreathFirstEdgeIterator.init(_:initial:)(v3, (uint64_t)v19, v32);
  uint64_t v22 = *(void *)v32;
  uint64_t v23 = *(void *)&v32[40];
  outlined release of Graph((uint64_t)v3);
  outlined release of _HashTable.Storage?((uint64_t)v41);
  outlined release of _HashTable.Storage?((uint64_t)&v40);
  outlined release of _HashTable.Storage?((uint64_t)&v38);
  outlined release of [Input]((uint64_t)&v37);
  outlined release of [Input]((uint64_t)&v36);
  outlined release of [Input]((uint64_t)&v35);
  __n128 result = *(__n128 *)&v32[8];
  long long v25 = *(_OWORD *)&v32[24];
  *(void *)a2 = EdgeIteratorV5edgestAG_tFA2G2IDVXEfU0_AF0E0VTf1cn_nTf4xg_nTm;
  *(void *)(a2 + 8) = v22;
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v25;
  *(void *)(a2 + 48) = v23;
  return result;
}

unint64_t Graph.removeEdge(to:)(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v22 = *(void *)(a1 + 8);
  unint64_t v4 = (long long *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  char v21 = *(unsigned char *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(v1 + 16);
  unint64_t result = specialized OrderedSet._find(_:)(*(void *)a1, *(void *)v1, *(void **)(v1 + 8), (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if (v11) {
    return result;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (result >= *(void *)(v9 + 16))
  {
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v12 = (void *)(v9 + 48 * result);
  uint64_t v20 = v6;
  uint64_t v13 = v12[4];
  uint64_t v14 = v12[5];
  uint64_t v18 = v7;
  uint64_t v19 = v5;
  uint64_t v15 = v12[7];
  uint64_t v17 = v12[8];
  uint64_t v16 = v12[9];
  long long v34 = *v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of String((uint64_t)&v34);
  swift_retain();
  swift_retain();
  specialized OrderedDictionary.subscript.getter(a1, v15, v17, v16, v23);
  swift_release();
  outlined release of String((uint64_t)&v34);
  outlined consume of Graph.Adjacent?(v13, v14);
  unint64_t result = outlined init with take of MetalFunctionNode?((uint64_t)v23, (uint64_t)v24, &demangling cache variable for type metadata for Output??);
  if (v25 != 1)
  {
    outlined init with take of MetalFunctionNode?((uint64_t)v24, (uint64_t)v26, &demangling cache variable for type metadata for Output?);
    unint64_t result = outlined init with take of MetalFunctionNode?((uint64_t)v26, (uint64_t)&v27, &demangling cache variable for type metadata for Output?);
    if (v28)
    {
      v35[0] = v27;
      v35[1] = v28;
      v35[2] = v29;
      v35[3] = v30;
      v35[4] = v31;
      char v36 = v32;
      uint64_t v37 = v33;
      uint64_t v38 = v3;
      uint64_t v39 = v22;
      uint64_t v40 = v19;
      uint64_t v41 = v20;
      uint64_t v42 = v18;
      char v43 = v21 & 1;
      uint64_t v44 = v8;
      swift_retain();
      outlined retain of String((uint64_t)&v34);
      outlined release of Output??(v23, (void (*)(void, void, void, void, void, void, void))outlined copy of Output??);
      swift_retain();
      swift_bridgeObjectRetain();
      Graph.remove(_:)((uint64_t)v35);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      return (unint64_t)outlined release of Output??(v23, (void (*)(void, void, void, void, void, void, void))outlined consume of Output??);
    }
  }
  return result;
}

uint64_t specialized OrderedSet._removeExistingMember(at:in:)@<X0>(int64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized OrderedSet._removeExistingMember(at:in:)(a1, a2, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(uint64_t))specialized OrderedSet._regenerateHashTable(), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:), a3);
}

uint64_t specialized OrderedSet._removeExistingMember(at:in:)(int64_t a1, uint64_t a2)
{
  return specialized OrderedSet._removeExistingMember(at:in:)(a1, a2, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (void (*)(void))specialized OrderedSet._regenerateHashTable(), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:), (void (*)(int64_t))specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:));
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v5 = *(void *)(v2[1] + 16);
  uint64_t v6 = *v2;
  if (v5 <= specialized OrderedSet._minimumCapacity.getter(*v2))
  {
    uint64_t v10 = specialized ContiguousArray.remove(at:)(a1);
    specialized OrderedSet._regenerateHashTable()();
    return v10;
  }
  if (!v6) {
    return specialized ContiguousArray.remove(at:)(a1);
  }
  unint64_t result = swift_isUniquelyReferenced_native();
  uint64_t v8 = *v2;
  if (result) {
    goto LABEL_6;
  }
  if (v8)
  {
    uint64_t v8 = _HashTable.copy()((void *)*v2);
    unint64_t result = swift_release();
    *uint64_t v2 = v8;
LABEL_6:
    if (v8)
    {
      swift_retain();
      unint64_t result = specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(a2, v8 + 16, v8 + 32, v2);
      if (__OFADD__(a1, 1))
      {
        __break(1u);
      }
      else if (a1 + 1 >= a1)
      {
        uint64_t v9 = v2[1];
        swift_retain();
        specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(a1, a1 + 1, v9, (uint64_t *)(v8 + 16), (void *)(v8 + 32));
        swift_release();
        swift_release();
        return specialized ContiguousArray.remove(at:)(a1);
      }
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet._removeExistingMember(at:in:)@<X0>(int64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t *)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = *(void *)(v6[1] + 16);
  uint64_t v14 = *v6;
  if (v13 <= specialized OrderedSet._minimumCapacity.getter(*v6))
  {
    uint64_t v18 = specialized ContiguousArray.remove(at:)(a1, a3, (uint64_t)v23);
    uint64_t result = a4(v18);
    goto LABEL_12;
  }
  if (!v14)
  {
LABEL_10:
    uint64_t result = specialized ContiguousArray.remove(at:)(a1, a3, (uint64_t)v23);
LABEL_12:
    uint64_t v19 = v26;
    uint64_t v20 = v24;
    char v21 = v25;
    long long v22 = v23[1];
    *(_OWORD *)a6 = v23[0];
    *(_OWORD *)(a6 + 16) = v22;
    *(void *)(a6 + 32) = v20;
    *(unsigned char *)(a6 + 40) = v21;
    *(void *)(a6 + 48) = v19;
    return result;
  }
  uint64_t result = swift_isUniquelyReferenced_native();
  uint64_t v16 = *v6;
  if (!result)
  {
    if (!v16) {
      goto LABEL_16;
    }
    uint64_t v16 = _HashTable.copy()((void *)*v6);
    uint64_t result = swift_release();
    uint64_t *v6 = v16;
  }
  if (v16)
  {
    swift_retain();
    uint64_t result = a5(a2, v16 + 16, v16 + 32, v6);
    if (__OFADD__(a1, 1))
    {
      __break(1u);
    }
    else if (a1 + 1 >= a1)
    {
      uint64_t v17 = v6[1];
      swift_retain();
      specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(a1, a1 + 1, v17, (void *)(v16 + 16), v16 + 32);
      swift_release();
      swift_release();
      goto LABEL_10;
    }
    __break(1u);
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

void specialized OrderedSet._removeExistingMember(at:in:)(int64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(v3[1] + 16);
  uint64_t v8 = *v3;
  if (v7 > specialized OrderedSet._minimumCapacity.getter(*v3))
  {
    if (!v8)
    {
LABEL_10:
      specialized ContiguousArray.remove(at:)(a1, a3);
      return;
    }
    int isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
    uint64_t v10 = *v3;
    if (!isUniquelyReferenced_native)
    {
      if (!v10)
      {
LABEL_17:
        __break(1u);
        return;
      }
      uint64_t v10 = _HashTable.copy()((void *)*v3);
      swift_release();
      uint64_t *v3 = v10;
    }
    if (v10)
    {
      swift_retain();
      specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(a2, (void *)(v10 + 16), v10 + 32, (uint64_t)v3);
      if (__OFADD__(a1, 1))
      {
        __break(1u);
      }
      else if (a1 + 1 >= a1)
      {
        uint64_t v11 = v3[1];
        swift_retain();
        specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(a1, a1 + 1, v11, (uint64_t *)(v10 + 16), (void *)(v10 + 32));
        swift_release();
        swift_release();
        goto LABEL_10;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
  specialized ContiguousArray.remove(at:)(a1, a3);
  specialized OrderedSet._regenerateHashTable()();
}

uint64_t specialized OrderedSet._removeExistingMember(at:in:)(int64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), void (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t *), void (*a6)(int64_t))
{
  uint64_t v13 = *(void *)(v6[1] + 16);
  uint64_t v14 = *v6;
  if (v13 <= specialized OrderedSet._minimumCapacity.getter(*v6))
  {
    uint64_t v17 = specialized ContiguousArray.remove(at:)(a1, a3);
    a4();
    return v17;
  }
  if (!v14) {
    return specialized ContiguousArray.remove(at:)(a1, a3);
  }
  uint64_t result = swift_isUniquelyReferenced_native();
  uint64_t v16 = *v6;
  if (!result)
  {
    if (!v16) {
      goto LABEL_16;
    }
    uint64_t v16 = _HashTable.copy()((void *)*v6);
    uint64_t result = swift_release();
    uint64_t *v6 = v16;
  }
  if (v16)
  {
    uint64_t result = a5(a2, v16 + 16, v16 + 32, v6);
    if (__OFADD__(a1, 1))
    {
      __break(1u);
    }
    else if (a1 + 1 >= a1)
    {
      a6(a1);
      return specialized ContiguousArray.remove(at:)(a1, a3);
    }
    __break(1u);
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t Input.nodeid.getter()
{
  return *(void *)v0;
}

uint64_t Input.type.getter()
{
  return swift_retain();
}

uint64_t Input.label.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Input.graphid.getter()
{
  return *(void *)(v0 + 32);
}

BOOL static Input.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static Input.== infix(_:_:)(a1, a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Input(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return specialized static Input.== infix(_:_:)((uint64_t)v5, (uint64_t)v7);
}

uint64_t Output.nodeid.getter()
{
  return *(void *)v0;
}

void Input.hash(into:)(uint64_t a1)
{
  Hasher._combine(_:)(*(void *)v1);
  long long v3 = *(void (**)(uint64_t))(**(void **)(v1 + 8) + 120);
  swift_retain();
  v3(a1);
  swift_release();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v1 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v4 = *(void *)(v1 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  Hasher._combine(_:)(*(void *)(v1 + 48));
}

BOOL static Output.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static Input.== infix(_:_:)(a1, a2);
}

Swift::Int Input.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)v0);
  uint64_t v1 = *(void (**)(unsigned char *))(**(void **)(v0 + 8) + 120);
  swift_retain();
  v1(v4);
  swift_release();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v2 = *(void *)(v0 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  Hasher._combine(_:)(*(void *)(v0 + 48));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Input(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  Swift::UInt v4 = *(void *)(v1 + 32);
  int v5 = *(unsigned __int8 *)(v1 + 40);
  Swift::UInt v6 = *(void *)(v1 + 48);
  Hasher._combine(_:)(*(void *)v1);
  uint64_t v7 = *(void (**)(uint64_t))(*(void *)v3 + 120);
  swift_retain();
  v7(a1);
  swift_release();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  Hasher._combine(_:)(v6);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Input()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 32);
  int v4 = *(unsigned __int8 *)(v0 + 40);
  Swift::UInt v5 = *(void *)(v0 + 48);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Swift::UInt v6 = *(void (**)(unsigned char *))(*(void *)v2 + 120);
  swift_retain();
  v6(v8);
  swift_release();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v4 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t Output.dotID.getter()
{
  outlined init with take of MetalFunctionNode?(v0 + 32, (uint64_t)v11, &demangling cache variable for type metadata for Graph.ID?);
  outlined init with take of MetalFunctionNode?((uint64_t)v11, (uint64_t)&v12, &demangling cache variable for type metadata for Graph.ID?);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 110;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x5F7475706E695FLL;
  v4._object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  Swift::String_optional v5 = String.Iterator.next()();
  object = v5.value._object;
  if (v5.value._object)
  {
    uint64_t countAndFlagsBits = v5.value._countAndFlagsBits;
    do
    {
      if ((countAndFlagsBits != 58 || object != (void *)0xE100000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        MEMORY[0x261183F40](countAndFlagsBits, object);
      }
      swift_bridgeObjectRelease();
      Swift::String_optional v8 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v8.value._countAndFlagsBits;
      object = v8.value._object;
    }
    while (v8.value._object);
    object = 0;
  }
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = (uint64_t)object;
  v9._object = (void *)0xE000000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return 103;
}

uint64_t Input.dotID.getter()
{
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  outlined init with take of MetalFunctionNode?(v0 + 32, (uint64_t)v11, &demangling cache variable for type metadata for Graph.ID?);
  outlined init with take of MetalFunctionNode?((uint64_t)v11, (uint64_t)&v12, &demangling cache variable for type metadata for Graph.ID?);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 110;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x5F74757074756F5FLL;
  v4._object = (void *)0xE800000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  Swift::String_optional v5 = String.Iterator.next()();
  object = v5.value._object;
  if (v5.value._object)
  {
    uint64_t countAndFlagsBits = v5.value._countAndFlagsBits;
    do
    {
      if ((countAndFlagsBits != 58 || object != (void *)0xE100000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        MEMORY[0x261183F40](countAndFlagsBits, object);
      }
      swift_bridgeObjectRelease();
      Swift::String_optional v8 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v8.value._countAndFlagsBits;
      object = v8.value._object;
    }
    while (v8.value._object);
    object = 0;
  }
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = (uint64_t)object;
  v9._object = (void *)0xE000000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return 103;
}

uint64_t ShaderGraphNode.dotID.getter()
{
  return specialized ShaderGraphNode.dotID.getter();
}

uint64_t Edge.from.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  char v6 = *(unsigned char *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t Edge.to.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 72);
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v5 = *(void *)(v1 + 88);
  char v6 = *(unsigned char *)(v1 + 96);
  uint64_t v7 = *(void *)(v1 + 104);
  *(void *)a1 = *(void *)(v1 + 56);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t Edge.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  Swift::UInt v13 = *(void *)(v1 + 32);
  char v4 = *(unsigned char *)(v1 + 40);
  Swift::UInt v5 = *(void *)(v1 + 48);
  Hasher._combine(_:)(*(void *)v1);
  char v6 = *(void (**)(uint64_t))(*(void *)v3 + 120);
  swift_retain();
  swift_bridgeObjectRetain();
  v6(a1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13);
  }
  Hasher._combine(_:)(v5);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v7 = *(void *)(v1 + 64);
  Swift::UInt v8 = *(void *)(v1 + 88);
  char v9 = *(unsigned char *)(v1 + 96);
  Swift::UInt v10 = *(void *)(v1 + 104);
  Hasher._combine(_:)(*(void *)(v1 + 56));
  uint64_t v11 = *(void (**)(uint64_t))(*(void *)v7 + 120);
  swift_retain();
  swift_bridgeObjectRetain();
  v11(a1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
  }
  Hasher._combine(_:)(v10);
  swift_bridgeObjectRelease();
  return swift_release();
}

Swift::Int Edge.hashValue.getter()
{
  Hasher.init(_seed:)();
  Edge.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Edge()
{
  Hasher.init(_seed:)();
  Edge.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Edge()
{
  Hasher.init(_seed:)();
  Edge.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Edge(_OWORD *a1, long long *a2)
{
  long long v2 = a1[5];
  v13[4] = a1[4];
  v13[5] = v2;
  long long v3 = a1[6];
  long long v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  long long v5 = a1[3];
  v13[2] = a1[2];
  v13[3] = v5;
  long long v6 = *a2;
  long long v7 = a2[1];
  v13[6] = v3;
  v14[0] = v6;
  long long v8 = a2[2];
  long long v9 = a2[3];
  long long v10 = a2[6];
  v14[5] = a2[5];
  v14[6] = v10;
  long long v11 = a2[4];
  v14[3] = v9;
  v14[4] = v11;
  v14[1] = v7;
  v14[2] = v8;
  return specialized static Edge.== infix(_:_:)((uint64_t)v13, (uint64_t)v14);
}

unint64_t ShaderGraphNode.shaderGraphData.getter()
{
  unint64_t v1 = *v0;
  outlined copy of NodePersonality(*v0);
  return v1;
}

unint64_t ShaderGraphNode.shaderGraphData.setter(unint64_t a1)
{
  unint64_t result = outlined consume of NodePersonality(*v1);
  *unint64_t v1 = a1;
  return result;
}

uint64_t (*ShaderGraphNode.shaderGraphData.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t ShaderGraphNode.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ShaderGraphNode.outputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ShaderGraphNode.id.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t ShaderGraphNode.graphid.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t ShaderGraphNode.ID.description.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 1701080942;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ShaderGraphNode.ID()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 1701080942;
}

Swift::Void __swiftcall ShaderGraphNode.update(id:)(ShaderGraph::ShaderGraphNode::ID id)
{
  v1[3].value = id.value;
  value = (void *)v1[1].value;
  uint64_t v4 = value[2];
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    long long v7 = value;
    while (1)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
      }
      if (v6 >= v7[2]) {
        break;
      }
      ++v6;
      v7[v5 + 4] = id.value;
      swift_bridgeObjectRelease();
      swift_release();
      v5 += 7;
      if (v4 == v6)
      {
        swift_bridgeObjectRelease();
        v1[1].value = (Swift::Int)v7;
        goto LABEL_8;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_8:
  long long v8 = (void *)v1[2].value;
  uint64_t v9 = v8[2];
  if (v9)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = v8;
    while (1)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew()(v12);
      }
      if (v11 >= v12[2]) {
        break;
      }
      ++v11;
      v12[v10 + 4] = id.value;
      swift_bridgeObjectRelease();
      swift_release();
      v10 += 7;
      if (v9 == v11)
      {
        swift_bridgeObjectRelease();
        v1[2].value = (Swift::Int)v12;
        return;
      }
    }
LABEL_17:
    __break(1u);
  }
}

BOOL ShaderGraphNode.containsInput(_:)(void *a1)
{
  return *a1 == *(void *)(v1 + 24);
}

BOOL ShaderGraphNode.isAlive.getter()
{
  return *(void *)(v0 + 24) != -7;
}

void ShaderGraphNode.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = *(void *)v2;
  outlined copy of NodePersonality(*(void *)v2);
  NodePersonality.hash(into:)(a1, v4);
  outlined consume of NodePersonality(v4);
  uint64_t v5 = *(void *)(v2 + 8);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v6);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v2 + 24));
  if (*(unsigned char *)(v2 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v7 = *(void *)(v2 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7);
  }
}

Swift::Int ShaderGraphNode.hashValue.getter()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  unint64_t v2 = *v0;
  outlined copy of NodePersonality(v2);
  NodePersonality.hash(into:)((uint64_t)v7, v2);
  outlined consume of NodePersonality(v2);
  unint64_t v3 = v1[1];
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(v7, v3);
  swift_bridgeObjectRelease();
  unint64_t v4 = v1[2];
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(v7, v4);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1[3]);
  if (*((unsigned char *)v1 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v5 = v1[4];
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ShaderGraphNode(uint64_t a1)
{
  unint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  Swift::UInt v6 = *(void *)(v1 + 24);
  Swift::UInt v7 = *(void *)(v1 + 32);
  int v8 = *(unsigned __int8 *)(v1 + 40);
  outlined copy of NodePersonality(*(void *)v1);
  NodePersonality.hash(into:)(a1, v3);
  outlined consume of NodePersonality(v3);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v5);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v6);
  if (v8 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ShaderGraphNode()
{
  unint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  Swift::UInt v4 = *(void *)(v0 + 24);
  Swift::UInt v5 = *(void *)(v0 + 32);
  int v6 = *(unsigned __int8 *)(v0 + 40);
  Hasher.init(_seed:)();
  outlined copy of NodePersonality(v1);
  NodePersonality.hash(into:)((uint64_t)v8, v1);
  outlined consume of NodePersonality(v1);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(v8, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(v8, v3);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v4);
  if (v6 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ShaderGraphNode(long long *a1, long long *a2)
{
  long long v2 = a1[1];
  long long v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(long long *)((char *)a1 + 25);
  long long v3 = a2[1];
  long long v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(long long *)((char *)a2 + 25);
  return specialized static ShaderGraphNode.== infix(_:_:)((uint64_t)&v5, (uint64_t)&v7) & 1;
}

uint64_t Graph.Iterator.index.getter()
{
  return *(void *)v0;
}

uint64_t Graph.Iterator.index.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*Graph.Iterator.index.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t Graph.Iterator.elements.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t Graph.Iterator.isLiving.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_retain();
  return v1;
}

uint64_t Graph.Iterator.init(elements:isLiving:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v14 = ArraySlice.startIndex.getter();
  swift_unknownObjectRelease();
  uint64_t result = swift_release();
  *a7 = v14;
  a7[1] = a1;
  a7[2] = a2;
  a7[3] = a3;
  a7[4] = a4;
  a7[5] = a5;
  a7[6] = a6;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Graph.Iterator<A>()
{
  return MEMORY[0x270F9D928]();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Graph.Iterator<A>()
{
  uint64_t v0 = specialized Sequence._copyToContiguousArray()();
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

void Graph.DepthFirstEdgeIterator.next()(uint64_t *a1@<X8>)
{
  long long v2 = *(void **)(v1 + 24);
  uint64_t v70 = v1 + 24;
  uint64_t v3 = v2[2];
  if (v3)
  {
    unint64_t v54 = a1;
    Swift::UInt v4 = (void *)(v1 + 32);
    uint64_t v64 = v4;
    while (1)
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v6 = v2[2];
        if (!v6) {
          goto LABEL_23;
        }
      }
      else
      {
        long long v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
        uint64_t v6 = v2[2];
        if (!v6)
        {
LABEL_23:
          __break(1u);
LABEL_24:
          uint64_t v39 = 0;
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          uint64_t v37 = 0;
          uint64_t v43 = 0;
          uint64_t v44 = 0;
          uint64_t v69 = 0;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          uint64_t v47 = 0;
          uint64_t v48 = 0;
          uint64_t v3 = 0;
          uint64_t v49 = 0;
          a1 = v54;
          goto LABEL_26;
        }
      }
      uint64_t v7 = v6 - 1;
      int v8 = &v2[7 * v7];
      long long v9 = *((_OWORD *)v8 + 2);
      long long v10 = *((_OWORD *)v8 + 3);
      long long v11 = *((_OWORD *)v8 + 4);
      uint64_t v88 = v8[10];
      long long v86 = v10;
      long long v87 = v11;
      long long v85 = v9;
      uint64_t v12 = v8[5];
      uint64_t v69 = v8[4];
      uint64_t v13 = v8[6];
      uint64_t v14 = v8[7];
      uint64_t v15 = v8[8];
      uint64_t v16 = *((unsigned __int8 *)v8 + 72);
      uint64_t v17 = v8[10];
      v2[2] = v7;
      *(void *)uint64_t v70 = v2;
      if ((specialized Set.contains(_:)(&v85, *v4) & 1) == 0) {
        break;
      }
      swift_release();
      long long v89 = v86;
      long long v5 = &v89;
LABEL_4:
      outlined release of String((uint64_t)v5);
      long long v2 = *(void **)v70;
      if (!*(void *)(*(void *)v70 + 16)) {
        goto LABEL_24;
      }
    }
    uint64_t v62 = v17;
    uint64_t v63 = v16;
    v90[0] = v86;
    swift_retain();
    outlined retain of String((uint64_t)v90);
    specialized Set._Variant.insert(_:)((uint64_t)&v71, (Swift::Int)&v85, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<Input>);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v19 = *v66;
    uint64_t v18 = (void *)v66[1];
    uint64_t v20 = v66[2];
    unint64_t v21 = specialized OrderedSet._find(_:)(v85, *v66, v18, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
    if ((v22 & 1) == 0)
    {
      if ((v21 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        return;
      }
      if (v21 >= *(void *)(v20 + 16)) {
        goto LABEL_32;
      }
      uint64_t v58 = v15;
      uint64_t v59 = v14;
      uint64_t v60 = v13;
      uint64_t v61 = v12;
      uint64_t v23 = (void *)(v20 + 48 * v21);
      uint64_t v25 = v23[7];
      uint64_t v24 = v23[8];
      uint64_t v26 = v23[9];
      uint64_t v27 = *(void *)(v24 + 16);
      os_log_type_t v57 = v18;
      if (v25)
      {
        swift_retain();
        outlined retain of String((uint64_t)v90);
        swift_retain();
        swift_retain();
        swift_retain();
        unint64_t v28 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v85, v24 + 32, v27, (void *)(v25 + 16), v25 + 32);
        if (v29) {
          goto LABEL_20;
        }
      }
      else
      {
        swift_retain();
        outlined retain of String((uint64_t)v90);
        swift_retain();
        swift_retain();
        unint64_t v28 = specialized Collection<>.firstIndex(of:)(&v85, v24 + 32, v27);
        if (v30)
        {
LABEL_20:
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          long long v5 = v90;
          outlined release of String((uint64_t)v90);
          swift_release();
          goto LABEL_21;
        }
      }
      if ((v28 & 0x8000000000000000) != 0) {
        goto LABEL_33;
      }
      if (v28 >= *(void *)(v26 + 16)) {
        goto LABEL_34;
      }
      uint64_t v55 = v19;
      uint64_t v31 = (void *)(v26 + 56 * v28);
      uint64_t v32 = v31[4];
      uint64_t v33 = v31[5];
      uint64_t v34 = v31[6];
      uint64_t v35 = v31[7];
      uint64_t v37 = v31[8];
      uint64_t v36 = v31[9];
      uint64_t v38 = v31[10];
      outlined copy of Output?(v32, v33);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined release of String((uint64_t)v90);
      if (v33)
      {
        uint64_t v53 = v38;
        uint64_t v56 = v35;
        uint64_t v65 = v34;
        uint64_t v67 = v33;
        uint64_t v43 = v36 & 1;
        uint64_t v68 = v32;
        specialized OrderedDictionary.subscript.getter(v32, v55, v57, v20, v75);
        outlined init with take of MetalFunctionNode?((uint64_t)v75, (uint64_t)&v71, &demangling cache variable for type metadata for Graph.Adjacent?);
        if (*((void *)&v71 + 1))
        {
          long long v80 = v71;
          uint64_t v50 = v72;
          long long v77 = v73;
          uint64_t v51 = v74;
          outlined init with take of MetalFunctionNode?((uint64_t)&v77, (uint64_t)v79, &demangling cache variable for type metadata for _HashTable.Storage?);
          uint64_t v52 = *((void *)&v77 + 1);
          uint64_t v78 = *((void *)&v77 + 1);
          uint64_t v76 = v51;
          long long v82 = v80;
          outlined init with take of MetalFunctionNode?((uint64_t)&v82, (uint64_t)v84, &demangling cache variable for type metadata for _HashTable.Storage?);
          swift_retain();
          outlined retain of String((uint64_t)v90);
          outlined retain of _HashTable.Storage?((uint64_t)v79);
          outlined retain of _HashTable.Storage?((uint64_t)&v78);
          outlined retain of _HashTable.Storage?((uint64_t)&v76);
          outlined release of _HashTable.Storage?((uint64_t)v84);
          uint64_t v83 = *((void *)&v82 + 1);
          outlined release of _HashTable.Storage?((uint64_t)&v83);
          uint64_t v81 = v50;
          outlined release of _HashTable.Storage?((uint64_t)&v81);
          outlined release of _HashTable.Storage?((uint64_t)v79);
          outlined release of _HashTable.Storage?((uint64_t)&v78);
          outlined release of _HashTable.Storage?((uint64_t)&v76);
          outlined release of _HashTable.Storage?((uint64_t)&v76);
          outlined release of _HashTable.Storage?((uint64_t)v79);
        }
        else
        {
          swift_retain();
          outlined retain of String((uint64_t)v90);
          uint64_t v52 = MEMORY[0x263F8EE78];
        }
        uint64_t v46 = v60;
        uint64_t v45 = v61;
        uint64_t v48 = v58;
        uint64_t v47 = v59;
        uint64_t v49 = v62;
        specialized Array.append<A>(contentsOf:)(v52);
        swift_release();
        outlined release of String((uint64_t)v90);
        uint64_t v44 = v53;
        a1 = v54;
        uint64_t v3 = v63;
        uint64_t v41 = v65;
        uint64_t v39 = v68;
        uint64_t v40 = v67;
        uint64_t v42 = v56;
        goto LABEL_26;
      }
    }
    swift_release();
    long long v5 = v90;
LABEL_21:
    Swift::UInt v4 = v64;
    goto LABEL_4;
  }
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v37 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v69 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
LABEL_26:
  *a1 = v39;
  a1[1] = v40;
  a1[2] = v41;
  a1[3] = v42;
  a1[4] = v37;
  a1[5] = v43;
  a1[6] = v44;
  a1[7] = v69;
  a1[8] = v45;
  a1[9] = v46;
  a1[10] = v47;
  a1[11] = v48;
  a1[12] = v3;
  a1[13] = v49;
}

double Graph.DepthFirstEdgeIterator.init(_:initial:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  specialized Graph.DepthFirstEdgeIterator.init(_:initial:)(a1, a2, v7);
  outlined release of Graph((uint64_t)a1);
  double result = *(double *)v7;
  long long v6 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + 16) = v6;
  *(void *)(a3 + 32) = v8;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance Graph.DepthFirstEdgeIterator@<Q0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  __n128 result = *(__n128 *)(v1 + 24);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

unint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Graph.DepthFirstEdgeIterator()
{
  long long v1 = v0[1];
  long long v5 = *v0;
  long long v6 = v1;
  uint64_t v7 = *((void *)v0 + 4);
  unint64_t v2 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t *)&v5);
  long long v9 = v5;
  uint64_t v3 = v6;
  outlined init with take of MetalFunctionNode?((uint64_t)&v9, (uint64_t)v11, &demangling cache variable for type metadata for _HashTable.Storage?);
  outlined release of _HashTable.Storage?((uint64_t)v11);
  uint64_t v10 = *((void *)&v9 + 1);
  outlined release of _HashTable.Storage?((uint64_t)&v10);
  uint64_t v8 = v3;
  outlined release of _HashTable.Storage?((uint64_t)&v8);
  uint64_t v12 = *((void *)&v6 + 1);
  outlined release of [Input]((uint64_t)&v12);
  uint64_t v13 = v7;
  outlined release of [Input]((uint64_t)&v13);
  return v2;
}

unint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Graph.DepthFirstEdgeIterator(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance Graph.DepthFirstEdgeIterator@<X0>(uint64_t a1@<X8>)
{
  Graph.DepthFirstEdgeIterator.next()(v3);
  return outlined init with take of MetalFunctionNode?((uint64_t)v3, a1, &demangling cache variable for type metadata for Edge?);
}

uint64_t Graph.BreathFirstEdgeIterator.next()@<X0>(uint64_t *a1@<X8>)
{
  unint64_t v2 = v1 + 3;
  uint64_t v3 = (void *)v1[3];
  uint64_t v4 = v3[2];
  if (!v4)
  {
    uint64_t v91 = 0;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    uint64_t result = 0;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    uint64_t v90 = 0;
    goto LABEL_101;
  }
  uint64_t v105 = a1;
  uint64_t v106 = v1 + 4;
  uint64_t v112 = v1 + 3;
  while (1)
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v5 = v3[2];
      if (!v5) {
        goto LABEL_98;
      }
    }
    else
    {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      uint64_t v5 = v3[2];
      if (!v5)
      {
LABEL_98:
        __break(1u);
LABEL_99:
        uint64_t v91 = 0;
        uint64_t v79 = 0;
        uint64_t v80 = 0;
        uint64_t result = 0;
        uint64_t v82 = 0;
        uint64_t v83 = 0;
        uint64_t v84 = 0;
        uint64_t v4 = 0;
        uint64_t v85 = 0;
        uint64_t v86 = 0;
        uint64_t v87 = 0;
        uint64_t v88 = 0;
        uint64_t v89 = 0;
        uint64_t v90 = 0;
        a1 = v105;
        goto LABEL_101;
      }
    }
    uint64_t v6 = v5 - 1;
    uint64_t v7 = &v3[7 * v6];
    long long v8 = *((_OWORD *)v7 + 2);
    long long v9 = *((_OWORD *)v7 + 3);
    long long v10 = *((_OWORD *)v7 + 4);
    uint64_t v162 = v7[10];
    long long v161 = v10;
    long long v160 = v9;
    long long v159 = v8;
    uint64_t v124 = v7[5];
    uint64_t v125 = v7[4];
    uint64_t v122 = v7[7];
    uint64_t v123 = v7[6];
    uint64_t v120 = *((unsigned __int8 *)v7 + 72);
    uint64_t v121 = v7[8];
    uint64_t v119 = v7[10];
    v3[2] = v6;
    v1[3] = (uint64_t)v3;
    long long v11 = (void *)v1[1];
    uint64_t v129 = v1[2];
    Swift::UInt v12 = v159;
    uint64_t v13 = v11 + 4;
    uint64_t v136 = v159;
    uint64_t v133 = *v1;
    if (*v1)
    {
      uint64_t v14 = v1[1];
      uint64_t v15 = (uint64_t *)(*v1 + 16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v12);
      Swift::Int v16 = Hasher._finalize()();
      uint64_t v17 = *v15;
      uint64_t v18 = 1 << *v15;
      unint64_t v19 = v18 - 1;
      if (__OFSUB__(v18, 1)) {
        goto LABEL_118;
      }
      Swift::Int v20 = v19 & v16;
      uint64_t v21 = _HashTable.UnsafeHandle._startIterator(bucket:)(v19 & v16, v15, (uint64_t)(v15 + 2));
      if (!v21) {
        goto LABEL_6;
      }
      uint64_t v24 = *(uint64_t *)(v133 + 24) >> 6;
      unint64_t v25 = v24 + (v21 ^ v19);
      if (v25 >= v19) {
        uint64_t v26 = v18 - 1;
      }
      else {
        uint64_t v26 = 0;
      }
      unint64_t v27 = v25 - v26;
      if (v13[v25 - v26] != v136)
      {
        char v28 = 0;
        uint64_t v29 = v17 & 0x3F;
        BOOL v30 = __OFADD__(v29 << v29, 64);
        uint64_t v31 = (v29 << v29) + 126;
        if ((v29 << v29) + 64 >= 1) {
          uint64_t v31 = (v29 << v29) + 63;
        }
        uint64_t v32 = v31 >> 6;
        do
        {
          if (++v20 == v18)
          {
            if (v28) {
              goto LABEL_123;
            }
            Swift::Int v20 = 0;
            char v28 = 1;
          }
          if (v23 >= v29)
          {
            BOOL v39 = __OFSUB__(v23, v29);
            v23 -= v29;
            if (v39)
            {
              __break(1u);
LABEL_115:
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              uint64_t result = _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
            unint64_t v43 = v22 >> v29;
            unint64_t v44 = v22 & v19;
            if ((v22 & v19) == 0) {
              goto LABEL_6;
            }
          }
          else
          {
            uint64_t v35 = (v20 * v29) >> 6;
            if (v23)
            {
              if (v30) {
                goto LABEL_117;
              }
              if (v35 + 1 == v32) {
                uint64_t v35 = 0;
              }
              else {
                ++v35;
              }
            }
            uint64_t v36 = v29 - v23;
            if (__OFSUB__(v29, v23)) {
              goto LABEL_115;
            }
            BOOL v37 = v35 == 2 && v29 == 5;
            uint64_t v38 = 64;
            if (v37) {
              uint64_t v38 = 32;
            }
            BOOL v39 = __OFSUB__(v38, v36);
            uint64_t v40 = v38 - v36;
            if (v39) {
              goto LABEL_116;
            }
            unint64_t v41 = v15[v35 + 2];
            uint64_t v42 = (v41 << v23) | v22;
            unint64_t v43 = v41 >> v36;
            uint64_t v23 = v40;
            unint64_t v44 = v42 & v19;
            if ((v42 & v19) == 0) {
              goto LABEL_6;
            }
          }
          unint64_t v33 = (v44 ^ v19) + v24;
          if (v33 >= v19) {
            uint64_t v34 = v18 - 1;
          }
          else {
            uint64_t v34 = 0;
          }
          unint64_t v27 = v33 - v34;
          unint64_t v22 = v43;
        }
        while (v13[v33 - v34] != v136);
      }
      swift_retain();
      goto LABEL_55;
    }
    uint64_t v45 = v11[2];
    if (!v45) {
      goto LABEL_6;
    }
    uint64_t v14 = v1[1];
    if (*v13 == (void)v159)
    {
      unint64_t v27 = 0;
      uint64_t v46 = (void *)v1[1];
LABEL_50:
      uint64_t v47 = v1[2];
      goto LABEL_56;
    }
    if (v45 == 1) {
      goto LABEL_6;
    }
    if (v11[5] == (void)v159)
    {
      uint64_t v46 = (void *)v1[1];
      unint64_t v27 = 1;
      goto LABEL_50;
    }
    if (v45 == 2) {
      goto LABEL_6;
    }
    if (v11[6] == (void)v159)
    {
      uint64_t v46 = (void *)v1[1];
      unint64_t v27 = 2;
      goto LABEL_50;
    }
    if (v45 == 3) {
      goto LABEL_6;
    }
    uint64_t v46 = (void *)v1[1];
    if (v11[7] == (void)v159)
    {
      unint64_t v27 = 3;
      goto LABEL_50;
    }
    uint64_t v76 = 0;
    uint64_t v77 = v45 - 4;
    do
    {
      if (v77 == v76) {
        goto LABEL_6;
      }
      uint64_t v78 = *(void *)(v14 + 64 + 8 * v76++);
    }
    while (v78 != (void)v159);
    unint64_t v27 = v76 + 3;
LABEL_55:
    uint64_t v47 = v129;
    uint64_t v46 = (void *)v14;
    if ((v27 & 0x8000000000000000) != 0) {
      goto LABEL_119;
    }
LABEL_56:
    if (v27 >= *(void *)(v47 + 16)) {
      goto LABEL_120;
    }
    uint64_t v48 = (void *)(v47 + 48 * v27);
    uint64_t v50 = v48[7];
    uint64_t v49 = v48[8];
    uint64_t v51 = v48[9];
    v164[0] = v160;
    uint64_t v52 = *(void *)(v49 + 16);
    v118 = v46;
    uint64_t v135 = *((void *)&v159 + 1);
    if (v50)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      outlined retain of String((uint64_t)v164);
      swift_retain();
      Swift::Int v53 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v159, v49 + 32, v52, (void *)(v50 + 16), v50 + 32);
      if ((v54 & 1) == 0)
      {
        unint64_t v55 = v53;
        if ((v53 & 0x8000000000000000) == 0) {
          goto LABEL_60;
        }
        goto LABEL_121;
      }
      swift_release();
      swift_release();
      goto LABEL_4;
    }
    uint64_t v107 = v51;
    if (v52) {
      break;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined retain of String((uint64_t)v164);
LABEL_86:
    swift_release();
LABEL_4:
    swift_release();
    swift_release();
    outlined release of String((uint64_t)v164);
    unint64_t v2 = v112;
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
LABEL_6:
    swift_release();
    long long v163 = v160;
    outlined release of String((uint64_t)&v163);
    uint64_t v3 = (void *)*v2;
    long long v1 = v126;
    if (!*(void *)(*v2 + 16)) {
      goto LABEL_99;
    }
  }
  uint64_t v114 = *((void *)&v164[0] + 1);
  uint64_t v116 = *(void *)&v164[0];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of String((uint64_t)v164);
  uint64_t v65 = v136;
  unint64_t v55 = 0;
  uint64_t v109 = v161;
  uint64_t v111 = v162;
  uint64_t v110 = BYTE8(v161);
  int v108 = BYTE8(v161) ^ 1;
  uint64_t v66 = (void *)(v49 + 80);
  while (1)
  {
    if (*(v66 - 6) != v65) {
      goto LABEL_66;
    }
    uint64_t v67 = *(v66 - 4);
    uint64_t v68 = *(v66 - 3);
    uint64_t v131 = *(v66 - 2);
    char v69 = *((unsigned char *)v66 - 8);
    uint64_t v70 = *v66;
    long long v71 = *(uint64_t (**)(uint64_t))(*(void *)*(v66 - 5) + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    if ((v71(v135) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v65 = v136;
      goto LABEL_66;
    }
    if (v67 != v116 || v68 != v114)
    {
      char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v65 = v136;
      if ((v73 & 1) == 0) {
        goto LABEL_66;
      }
      if ((v69 & 1) == 0) {
        break;
      }
      goto LABEL_75;
    }
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v65 = v136;
    if ((v69 & 1) == 0) {
      break;
    }
LABEL_75:
    char v74 = v110;
    if (v70 != v111) {
      char v74 = 0;
    }
    if (v74) {
      goto LABEL_84;
    }
LABEL_66:
    v66 += 7;
    if (v52 == ++v55) {
      goto LABEL_86;
    }
  }
  int v75 = v108;
  if (v131 != v109) {
    int v75 = 0;
  }
  if (v75 != 1 || v70 != v111) {
    goto LABEL_66;
  }
LABEL_84:
  uint64_t v51 = v107;
  uint64_t v47 = v129;
LABEL_60:
  if (v55 >= *(void *)(v51 + 16)) {
    goto LABEL_122;
  }
  uint64_t v56 = v51;
  uint64_t v57 = v47;
  uint64_t v58 = (void *)(v56 + 56 * v55);
  uint64_t v59 = v58[5];
  uint64_t v61 = v58[6];
  uint64_t v60 = v58[7];
  uint64_t v63 = v58[8];
  uint64_t v62 = v58[9];
  uint64_t v64 = v58[10];
  uint64_t v137 = v58[4];
  outlined copy of Output?(v137, v59);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined release of String((uint64_t)v164);
  unint64_t v2 = v112;
  if (!v59) {
    goto LABEL_5;
  }
  char v115 = v62;
  uint64_t v117 = v64;
  uint64_t v127 = v63;
  uint64_t v128 = v60;
  uint64_t v130 = v61;
  uint64_t v132 = v59;
  swift_retain();
  outlined retain of String((uint64_t)v164);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v91 = v137;
  specialized OrderedDictionary.subscript.getter(v137, v133, v118, v57, v142);
  outlined init with take of MetalFunctionNode?((uint64_t)v142, (uint64_t)&v143, &demangling cache variable for type metadata for Graph.Adjacent?);
  if (*((void *)&v143 + 1))
  {
    long long v151 = v143;
    long long v148 = v145;
    uint64_t v113 = v144;
    uint64_t v92 = v146;
    outlined init with take of MetalFunctionNode?((uint64_t)&v148, (uint64_t)v150, &demangling cache variable for type metadata for _HashTable.Storage?);
    uint64_t v93 = *((void *)&v148 + 1);
    uint64_t v149 = *((void *)&v148 + 1);
    uint64_t v147 = v92;
    long long v153 = v151;
    uint64_t v91 = v137;
    outlined init with take of MetalFunctionNode?((uint64_t)&v153, (uint64_t)v155, &demangling cache variable for type metadata for _HashTable.Storage?);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    outlined retain of _HashTable.Storage?((uint64_t)v150);
    outlined retain of _HashTable.Storage?((uint64_t)&v149);
    outlined retain of _HashTable.Storage?((uint64_t)&v147);
    outlined release of _HashTable.Storage?((uint64_t)v155);
    uint64_t v154 = *((void *)&v153 + 1);
    outlined release of _HashTable.Storage?((uint64_t)&v154);
    uint64_t v152 = v113;
    outlined release of _HashTable.Storage?((uint64_t)&v152);
    outlined release of _HashTable.Storage?((uint64_t)v150);
    outlined release of _HashTable.Storage?((uint64_t)&v149);
    outlined release of _HashTable.Storage?((uint64_t)&v147);
    outlined release of _HashTable.Storage?((uint64_t)&v147);
    outlined release of _HashTable.Storage?((uint64_t)v150);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v93 = MEMORY[0x263F8EE78];
  }
  uint64_t v83 = v62 & 1;
  uint64_t v94 = *(void *)(v93 + 16);
  if (v94)
  {
    swift_bridgeObjectRetain();
    long long v95 = (void *)(v93 + 80);
    long long v96 = v106;
    do
    {
      uint64_t v97 = *(v95 - 5);
      uint64_t v98 = *(v95 - 4);
      uint64_t v99 = *(v95 - 3);
      uint64_t v100 = *(v95 - 2);
      char v101 = *((unsigned char *)v95 - 8);
      uint64_t v102 = *v95;
      uint64_t v134 = *(v95 - 6);
      v138[0] = v134;
      v138[1] = v97;
      v138[2] = v98;
      v138[3] = v99;
      v138[4] = v100;
      char v139 = v101;
      uint64_t v140 = v102;
      uint64_t v103 = *v96;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v104 = specialized Set.contains(_:)(v138, v103);
      swift_bridgeObjectRelease();
      if (v104)
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        swift_retain();
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)((uint64_t)v141, (Swift::Int)v138, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<Input>);
        swift_release();
        swift_bridgeObjectRelease();
        v156[0] = v134;
        v156[1] = v97;
        v156[2] = v98;
        v156[3] = v99;
        v156[4] = v100;
        char v157 = v101;
        uint64_t v158 = v102;
        specialized Array.replaceSubrange<A>(_:with:)(0, 0, (uint64_t)v156);
      }
      v95 += 7;
      --v94;
      long long v96 = v106;
    }
    while (v94);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v91 = v137;
    uint64_t v83 = v115 & 1;
  }
  else
  {
    swift_release();
  }
  outlined release of String((uint64_t)v164);
  swift_bridgeObjectRelease();
  a1 = v105;
  uint64_t v85 = v124;
  uint64_t v4 = v125;
  uint64_t v87 = v122;
  uint64_t v86 = v123;
  uint64_t v89 = v120;
  uint64_t v88 = v121;
  uint64_t v90 = v119;
  uint64_t v80 = v130;
  uint64_t v79 = v132;
  uint64_t v82 = v127;
  uint64_t result = v128;
  uint64_t v84 = v117;
LABEL_101:
  *a1 = v91;
  a1[1] = v79;
  a1[2] = v80;
  a1[3] = result;
  a1[4] = v82;
  a1[5] = v83;
  a1[6] = v84;
  a1[7] = v4;
  a1[8] = v85;
  a1[9] = v86;
  a1[10] = v87;
  a1[11] = v88;
  a1[12] = v89;
  a1[13] = v90;
  return result;
}

double Graph.BreathFirstEdgeIterator.init(_:initial:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  specialized Graph.BreathFirstEdgeIterator.init(_:initial:)(a1, a2, v7);
  outlined release of Graph((uint64_t)a1);
  long long v5 = v7[1];
  *a3 = v7[0];
  a3[1] = v5;
  double result = *(double *)&v8;
  a3[2] = v8;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance Graph.BreathFirstEdgeIterator@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  __n128 result = *(__n128 *)(v1 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(void *)(a1 + 40) = v2;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Graph.BreathFirstEdgeIterator()
{
  long long v1 = v0[1];
  long long v5 = *v0;
  long long v6 = v1;
  long long v7 = v0[2];
  uint64_t v2 = specialized _copySequenceToContiguousArray<A>(_:)(&v5);
  long long v9 = v5;
  uint64_t v3 = v6;
  outlined init with take of MetalFunctionNode?((uint64_t)&v9, (uint64_t)v11, &demangling cache variable for type metadata for _HashTable.Storage?);
  outlined release of _HashTable.Storage?((uint64_t)v11);
  uint64_t v10 = *((void *)&v9 + 1);
  outlined release of _HashTable.Storage?((uint64_t)&v10);
  uint64_t v8 = v3;
  outlined release of _HashTable.Storage?((uint64_t)&v8);
  uint64_t v12 = *((void *)&v6 + 1);
  outlined release of [Input]((uint64_t)&v12);
  uint64_t v13 = v7;
  outlined release of [Input]((uint64_t)&v13);
  uint64_t v14 = *((void *)&v7 + 1);
  outlined release of [Input]((uint64_t)&v14);
  return v2;
}

_OWORD *protocol witness for Sequence._copyContents(initializing:) in conformance Graph.BreathFirstEdgeIterator(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance Graph.BreathFirstEdgeIterator@<X0>(uint64_t a1@<X8>)
{
  Graph.BreathFirstEdgeIterator.next()(v3);
  return outlined init with take of MetalFunctionNode?((uint64_t)v3, a1, &demangling cache variable for type metadata for Edge?);
}

void Graph.ID.hash(into:)(int a1, Swift::UInt a2)
{
}

BOOL static Graph.ID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

Swift::Int ShaderGraphNode.ID.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

uint64_t Graph.Adjacent.outgoing.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  swift_retain();
  swift_retain();
  return v1;
}

uint64_t Graph.Adjacent.outgoing.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  void *v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*Graph.Adjacent.outgoing.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t Graph.Adjacent.incoming.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  return v1;
}

uint64_t Graph.Adjacent.incoming.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  v3[3] = a1;
  v3[4] = a2;
  v3[5] = a3;
  return result;
}

uint64_t (*Graph.Adjacent.incoming.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

double Graph.Adjacent.init(_:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = a1[2];
  uint64_t v10 = a1[1];
  uint64_t v11 = v4;
  specialized Graph.Adjacent.init(_:)(v10, v4, (uint64_t *)v7);
  outlined init with take of NodePersonality(a1, &v9);
  outlined release of NodePersonality(&v9);
  outlined release of [Input]((uint64_t)&v10);
  outlined release of [Input]((uint64_t)&v11);
  long long v5 = v7[1];
  *a2 = v7[0];
  a2[1] = v5;
  double result = *(double *)&v8;
  a2[2] = v8;
  return result;
}

uint64_t Graph.Adjacent.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)(a1, v3, v4, v5);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)(a1, v6, v7, v8);
  swift_release();
  swift_release();
  return swift_release();
}

BOOL static Graph.Adjacent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a2[2];
  BOOL result = 0;
  if ((specialized Sequence<>.elementsEqual<A>(_:)(*a2, a2[1], *a1, a1[1]) & 1) != 0
    && (specialized static ContiguousArray<A>.== infix(_:_:)(v4, v5) & 1) != 0)
  {
    uint64_t v6 = a1[3];
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v9 = a2[3];
    uint64_t v10 = a2[4];
    uint64_t v11 = a2[5];
    if ((specialized Sequence<>.elementsEqual<A>(_:)(v9, v10, v6, v7) & 1) != 0
      && (specialized static ContiguousArray<A>.== infix(_:_:)(v8, v11) & 1) != 0)
    {
      return 1;
    }
  }
  return result;
}

Swift::Int Graph.Adjacent.hashValue.getter()
{
  Hasher.init(_seed:)();
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)((uint64_t)v8, v1, v2, v3);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)((uint64_t)v8, v4, v5, v6);
  swift_release();
  swift_release();
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Graph.Adjacent(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v7 = v1[5];
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)(a1, v3, v4, v6);
  swift_release();
  swift_release();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)(a1, v5, v8, v7);
  swift_release();
  swift_release();
  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Graph.Adjacent()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  Hasher.init(_seed:)();
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)((uint64_t)v8, v1, v2, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)((uint64_t)v8, v3, v6, v5);
  swift_release();
  swift_release();
  swift_release();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Graph.Adjacent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  uint64_t v2 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  return (specialized Sequence<>.elementsEqual<A>(_:)(*a2, a2[1], *a1, a1[1]) & 1) != 0
      && (specialized static ContiguousArray<A>.== infix(_:_:)(v3, v7) & 1) != 0
      && (specialized Sequence<>.elementsEqual<A>(_:)(v6, v9, v2, v5) & 1) != 0
      && (specialized static ContiguousArray<A>.== infix(_:_:)(v4, v8) & 1) != 0;
}

uint64_t Graph.label.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Graph.id.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t Graph.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Graph.outputs.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL closure #1 in Graph.nodes.getter(uint64_t a1)
{
  return *(void *)(a1 + 24) != -7;
}

double Graph.edges.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  outlined retain of Graph((uint64_t)v1);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v6 = specialized Sequence.compactMap<A>(_:)(v3, v4, v5, (void (*)(void *__return_ptr, uint64_t, long long *))closure #1 in Graph.sinkNodes()partial apply);
  swift_release();
  swift_release();
  swift_release();
  specialized Graph.DepthFirstEdgeIterator.init(_:initial:)(v1, v6, v9);
  outlined release of Graph((uint64_t)v1);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(void *)(a1 + 32) = v10;
  return result;
}

uint64_t Graph.sinkNodes()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v4 = specialized Sequence.compactMap<A>(_:)(v1, v2, v3, (void (*)(void *__return_ptr, uint64_t, long long *))closure #1 in Graph.sinkNodes()partial apply);
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

double Graph.edgesBreathFirst.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  outlined retain of Graph((uint64_t)v1);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v6 = specialized Sequence.compactMap<A>(_:)(v3, v4, v5, (void (*)(void *__return_ptr, uint64_t, long long *))closure #1 in Graph.sinkNodes()partial apply);
  swift_release();
  swift_release();
  swift_release();
  specialized Graph.BreathFirstEdgeIterator.init(_:initial:)(v1, v6, v9);
  outlined release of Graph((uint64_t)v1);
  long long v7 = v9[1];
  *a1 = v9[0];
  a1[1] = v7;
  double result = *(double *)&v10;
  a1[2] = v10;
  return result;
}

ShaderGraph::Graph::ID __swiftcall Graph.nextGraphID()()
{
  uint64_t v1 = *(void *)(v0 + 72);
  result.value = v1 + 1;
  if (__OFADD__(v1, 1)) {
    __break(1u);
  }
  else {
    *(ShaderGraph::Graph::ID *)(v0 + 72) = result;
  }
  return result;
}

uint64_t Graph.argumentsNode.getter@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)(v1 + 80);
  uint64_t v4 = *(void *)(v1 + 88);
  uint64_t v5 = *(void *)(v1 + 96);
  uint64_t v6 = *(void *)(v1 + 104);
  uint64_t v7 = *(void *)(v1 + 112);
  char v8 = *(unsigned char *)(v1 + 120);
  outlined copy of NodePersonality(v3);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Graph.resultNode.getter@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)(v1 + 128);
  uint64_t v4 = *(void *)(v1 + 136);
  uint64_t v5 = *(void *)(v1 + 144);
  uint64_t v6 = *(void *)(v1 + 152);
  uint64_t v7 = *(void *)(v1 + 160);
  char v8 = *(unsigned char *)(v1 + 168);
  outlined copy of NodePersonality(v3);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Graph.removeEdges(connectedTo:)(uint64_t a1)
{
  return specialized Graph.removeEdges(connectedTo:)(*(void *)(a1 + 24));
}

uint64_t closure #1 in Graph.sinkNodes()@<X0>(unint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v26 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t result = outlined init with take of MetalFunctionNode?((uint64_t)&v26, (uint64_t)v28, &demangling cache variable for type metadata for _HashTable.Storage?);
  uint64_t v27 = *((void *)&v26 + 1);
  uint64_t v25 = v7;
  uint64_t v9 = *(void *)(v7 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(*((void *)&v26 + 1) + 16);
    outlined retain of _HashTable.Storage?((uint64_t)v28);
    outlined retain of _HashTable.Storage?((uint64_t)&v27);
    outlined retain of _HashTable.Storage?((uint64_t)&v25);
    outlined retain of _HashTable.Storage?((uint64_t)v28);
    outlined retain of _HashTable.Storage?((uint64_t)&v27);
    uint64_t result = outlined retain of _HashTable.Storage?((uint64_t)&v25);
    uint64_t v11 = 0;
    uint64_t v12 = v7 + 40;
    do
    {
      if (!v10)
      {
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      uint64_t v13 = *(void *)(*(void *)v12 + 16);
      BOOL v14 = __OFADD__(v11, v13);
      v11 += v13;
      if (v14) {
        goto LABEL_20;
      }
      --v10;
      v12 += 16;
      --v9;
    }
    while (v9);
    outlined release of _HashTable.Storage?((uint64_t)v28);
    outlined release of _HashTable.Storage?((uint64_t)&v27);
    outlined release of _HashTable.Storage?((uint64_t)&v25);
    outlined release of _HashTable.Storage?((uint64_t)v28);
    outlined release of _HashTable.Storage?((uint64_t)&v27);
    uint64_t result = outlined release of _HashTable.Storage?((uint64_t)&v25);
    if (v11) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = a1 == -7;
    }
    if (v15) {
      goto LABEL_16;
    }
  }
  else if (a1 == -7)
  {
    goto LABEL_16;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_21:
    __break(1u);
  }
  else
  {
    uint64_t v16 = *(void *)(a3 + 64);
    if (*(void *)(v16 + 16) > a1)
    {
      uint64_t v17 = v16 + 48 * a1;
      uint64_t v18 = *(void *)(v17 + 56);
      if (v18 != -7)
      {
        uint64_t v24 = v17 + 32;
        char v23 = *(unsigned char *)(v24 + 40);
        uint64_t v22 = *(void *)(v24 + 32);
        uint64_t v20 = *(void *)(v24 + 8);
        uint64_t v21 = *(void *)(v24 + 16);
        unint64_t v19 = *(void *)v24;
        outlined copy of NodePersonality(*(void *)v24);
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRetain();
        goto LABEL_18;
      }
LABEL_16:
      unint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v18 = 0;
      uint64_t v22 = 0;
      char v23 = 0;
LABEL_18:
      *(void *)a4 = v19;
      *(void *)(a4 + 8) = v20;
      *(void *)(a4 + 16) = v21;
      *(void *)(a4 + 24) = v18;
      *(void *)(a4 + 32) = v22;
      *(unsigned char *)(a4 + 40) = v23;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t Graph.removeEdges(from:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t result = specialized OrderedSet._find(_:)(*(void *)a1, *(void *)v1, *(void **)(v1 + 8), (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if ((v5 & 1) == 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (result < *(void *)(v3 + 16))
    {
      uint64_t v6 = (void *)(v3 + 48 * result);
      uint64_t v7 = v6[4];
      uint64_t v8 = v6[5];
      uint64_t v9 = v6[6];
      long long v20 = *(_OWORD *)(a1 + 16);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      outlined retain of String((uint64_t)&v20);
      swift_retain();
      swift_retain();
      specialized OrderedDictionary.subscript.getter(a1, v7, v8, v9);
      uint64_t v11 = v10;
      swift_release();
      outlined release of String((uint64_t)&v20);
      if (!v11) {
        return outlined consume of Graph.Adjacent?(v7, v8);
      }
      outlined consume of Graph.Adjacent?(v7, v8);
      swift_retain();
      outlined retain of String((uint64_t)&v20);
      uint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(v11, (uint64_t *)a1);
      swift_release();
      outlined release of String((uint64_t)&v20);
      swift_release();
      swift_release();
      uint64_t v13 = *(void *)(v12 + 16);
      if (!v13) {
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      uint64_t v14 = 32;
      do
      {
        long long v15 = *(_OWORD *)(v12 + v14);
        long long v16 = *(_OWORD *)(v12 + v14 + 32);
        v21[1] = *(_OWORD *)(v12 + v14 + 16);
        v21[2] = v16;
        v21[0] = v15;
        long long v17 = *(_OWORD *)(v12 + v14 + 48);
        long long v18 = *(_OWORD *)(v12 + v14 + 64);
        long long v19 = *(_OWORD *)(v12 + v14 + 96);
        v21[5] = *(_OWORD *)(v12 + v14 + 80);
        v21[6] = v19;
        v21[3] = v17;
        v21[4] = v18;
        outlined retain of Edge((uint64_t)v21);
        Graph.remove(_:)((uint64_t)v21);
        outlined release of Edge((uint64_t)v21);
        v14 += 112;
        --v13;
      }
      while (v13);
      return swift_bridgeObjectRelease_n();
    }
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in Graph.removeEdges(connectedTo:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of MetalFunctionNode?(a2, (uint64_t)v16, &demangling cache variable for type metadata for Output?);
  uint64_t result = outlined init with take of MetalFunctionNode?(a2, (uint64_t)v17, &demangling cache variable for type metadata for Output?);
  if (*((void *)&v17[0] + 1))
  {
    long long v19 = v17[0];
    long long v20 = v17[1];
    long long v21 = v17[2];
    uint64_t v22 = v18;
    uint64_t v5 = *(void *)&v17[0];
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v6 = (void (*)(_OWORD *, void))specialized OrderedDictionary.subscript.modify(v15, v5);
    if (*(void *)(v7 + 8))
    {
      swift_retain();
      swift_retain();
      swift_release();
      swift_release();
      long long v23 = v20;
      swift_retain();
      outlined retain of String((uint64_t)&v23);
      uint64_t v8 = (void (*)(void *, void))specialized OrderedDictionary.subscript.modify(v14, (uint64_t *)&v19);
      uint64_t v10 = (uint64_t *)(v9 + 8);
      if (*(void *)(v9 + 8))
      {
        long long v24 = *(_OWORD *)(a1 + 16);
        swift_retain();
        outlined retain of String((uint64_t)&v24);
        uint64_t v11 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(v10, (void *)a1);
        swift_release();
        outlined release of String((uint64_t)&v24);
        int64_t v12 = *(void *)(*v10 + 16);
        if (v12 < v11)
        {
          __break(1u);
          swift_release();
          outlined release of String((uint64_t)&v24);
          uint64_t result = specialized OrderedSet._regenerateHashTable()();
          __break(1u);
          return result;
        }
        specialized ContiguousArray.replaceSubrange<A>(_:with:)(v11, v12);
        specialized OrderedSet._regenerateHashTable()();
        v8(v14, 0);
      }
      else
      {
        v8(v14, 0);
      }
      swift_release();
      uint64_t v13 = &v23;
      outlined release of String((uint64_t)&v23);
      v6(v15, 0);
      swift_release();
    }
    else
    {
      v6(v15, 0);
      swift_release();
      v15[0] = v20;
      uint64_t v13 = v15;
    }
    return outlined release of String((uint64_t)v13);
  }
  return result;
}

uint64_t closure #2 in Graph.removeEdges(connectedTo:)(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  long long v9 = *(_OWORD *)(a1 + 16);
  swift_retain();
  outlined retain of String((uint64_t)&v9);
  specialized Sequence.forEach(_:)(a2, a3, a4, a1);
  swift_release();
  return outlined release of String((uint64_t)&v9);
}

uint64_t specialized OrderedSet.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v7 = v5 + 32;
  uint64_t v8 = *(void *)(v5 + 16);
  if (!*v2)
  {
    uint64_t result = specialized Collection<>.firstIndex(of:)(a1, v5 + 32, *(void *)(v5 + 16));
    uint64_t v13 = 0;
    if (v21)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      goto LABEL_8;
    }
    Swift::Int v9 = result;
    goto LABEL_6;
  }
  swift_retain();
  Swift::Int v9 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, v7, v8, (void *)(v6 + 16), v6 + 32);
  char v11 = v10;
  uint64_t v13 = v12;
  uint64_t result = swift_release();
  if ((v11 & 1) == 0)
  {
LABEL_6:
    uint64_t result = specialized OrderedSet._removeExistingMember(at:in:)(v9, v13, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(uint64_t))specialized OrderedSet._regenerateHashTable(), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:), (uint64_t)v22);
    uint64_t v13 = v22[0];
    uint64_t v15 = v22[1];
    uint64_t v16 = v22[2];
    uint64_t v17 = v22[3];
    uint64_t v18 = v22[4];
    uint64_t v19 = v23;
    uint64_t v20 = v24;
    goto LABEL_8;
  }
  uint64_t v13 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
LABEL_8:
  *a2 = v13;
  a2[1] = v15;
  a2[2] = v16;
  a2[3] = v17;
  a2[4] = v18;
  a2[5] = v19;
  a2[6] = v20;
  return result;
}

unint64_t Graph.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v4 = *(void *)(v2 + 64);
  if (*(void *)(v4 + 16) <= result)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v5 = v4 + 48 * result;
  uint64_t v6 = *(void *)(v5 + 56);
  if (v6 == -7)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v6 = 0;
    uint64_t v10 = 0;
    char v11 = 0;
  }
  else
  {
    uint64_t v12 = v5 + 32;
    char v11 = *(unsigned char *)(v12 + 40);
    uint64_t v10 = *(void *)(v12 + 32);
    uint64_t v8 = *(void *)(v12 + 8);
    uint64_t v9 = *(void *)(v12 + 16);
    unint64_t v7 = *(void *)v12;
    outlined copy of NodePersonality(*(void *)v12);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
  }
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = v10;
  *(unsigned char *)(a2 + 40) = v11;
  return result;
}

uint64_t Graph.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v2;
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v6 = *(void *)(v2 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  specialized OrderedDictionary<>.hash(into:)(a1, v4, v5, v6);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v2 + 40));
  uint64_t v7 = *(void *)(v2 + 48);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v2 + 56);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v2 + 64);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v9);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v2 + 72));
  unint64_t v11 = *(void *)(v2 + 80);
  uint64_t v10 = *(void *)(v2 + 88);
  uint64_t v12 = *(void *)(v2 + 96);
  Swift::UInt v13 = *(void *)(v2 + 104);
  Swift::UInt v14 = *(void *)(v2 + 112);
  char v15 = *(unsigned char *)(v2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v11);
  NodePersonality.hash(into:)(a1, v11);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v12);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v13);
  if (v15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  outlined consume of NodePersonality(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v17 = *(void *)(v2 + 128);
  uint64_t v16 = *(void *)(v2 + 136);
  uint64_t v18 = *(void *)(v2 + 144);
  Swift::UInt v19 = *(void *)(v2 + 152);
  Swift::UInt v20 = *(void *)(v2 + 160);
  char v21 = *(unsigned char *)(v2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v17);
  NodePersonality.hash(into:)(a1, v17);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v18);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v19);
  if (v21)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
  }
  outlined consume of NodePersonality(v17);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Int Graph.hashValue.getter()
{
  Hasher.init(_seed:)();
  Graph.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Graph()
{
  Hasher.init(_seed:)();
  Graph.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Graph()
{
  Hasher.init(_seed:)();
  Graph.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Graph(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[9];
  v13[8] = a1[8];
  v14[0] = v2;
  *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)((char *)a1 + 153);
  long long v3 = a1[5];
  v13[4] = a1[4];
  v13[5] = v3;
  long long v4 = a1[7];
  v13[6] = a1[6];
  _OWORD v13[7] = v4;
  long long v5 = a1[1];
  v13[0] = *a1;
  v13[1] = v5;
  long long v6 = a1[3];
  v13[2] = a1[2];
  v13[3] = v6;
  long long v7 = a2[9];
  v15[8] = a2[8];
  v16[0] = v7;
  *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)a2 + 153);
  long long v8 = a2[5];
  v15[4] = a2[4];
  v15[5] = v8;
  long long v9 = a2[7];
  v15[6] = a2[6];
  v15[7] = v9;
  long long v10 = a2[1];
  v15[0] = *a2;
  v15[1] = v10;
  long long v11 = a2[3];
  _OWORD v15[2] = a2[2];
  v15[3] = v11;
  return specialized static Graph.== infix(_:_:)((uint64_t)v13, (uint64_t)v15) & 1;
}

uint64_t closure #1 in Graph.edges(from:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v6 = a2[4];
  char v7 = *((unsigned char *)a2 + 40);
  uint64_t v8 = a2[6];
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  char v14 = *((unsigned char *)a1 + 40);
  uint64_t v15 = a1[6];
  long long v17 = *((_OWORD *)a2 + 1);
  long long v5 = v17;
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v3;
  *(_OWORD *)(a3 + 16) = v5;
  *(void *)(a3 + 32) = v6;
  *(unsigned char *)(a3 + 40) = v7 & 1;
  *(void *)(a3 + 48) = v8;
  *(void *)(a3 + 56) = v9;
  *(void *)(a3 + 64) = v10;
  *(void *)(a3 + 72) = v11;
  *(void *)(a3 + 80) = v12;
  *(void *)(a3 + 88) = v13;
  *(unsigned char *)(a3 + 96) = v14;
  *(void *)(a3 + 104) = v15;
  swift_retain();
  outlined retain of String((uint64_t)&v17);
  swift_retain();
  return swift_bridgeObjectRetain();
}

unint64_t Graph.edges(to:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t result = specialized OrderedSet._find(_:)(*(void *)(a1 + 24), *(void *)v1, *(void **)(v1 + 8), (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))specialized _HashTable.UnsafeHandle._find<A>(_:in:));
  if (v4) {
    return MEMORY[0x263F8EE78];
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)(v2 + 16))
  {
    long long v5 = (void *)(v2 + 48 * result);
    uint64_t v6 = v5[7];
    uint64_t v7 = v5[8];
    uint64_t v8 = v5[9];
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v9 = specialized Sequence.compactMap<A>(_:)(v6, v7, v8);
    swift_release();
    swift_release();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

BOOL Graph.isEmpty.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = (uint64_t *)(v1 + 56);
  uint64_t v4 = v2 - 1;
  do
  {
    uint64_t v6 = *v3;
    v3 += 6;
    uint64_t v5 = v6;
    BOOL v8 = v4-- != 0;
    BOOL result = v5 == -7;
  }
  while (v5 == -7 && v8);
  return result;
}

uint64_t closure #1 in Graph.insert<A>(_:)(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v1;
  v4[2] = *(_OWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  long long v2 = *(_OWORD *)(a1 + 72);
  v6[0] = *(_OWORD *)(a1 + 56);
  v6[1] = v2;
  _OWORD v6[2] = *(_OWORD *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 104);
  return Graph.connect(_:to:)((uint64_t)v4, (unint64_t)v6);
}

unint64_t closure #3 in Graph.prune(_:)(unint64_t *a1, long long *a2)
{
  unint64_t v3 = *a1;
  unint64_t result = Graph.remove(_:)((uint64_t)a1);
  if (v3 == -7) {
    return result;
  }
  if ((v3 & 0x8000000000000000) != 0) {
    goto LABEL_72;
  }
  uint64_t v5 = *((void *)a2 + 8);
  if (v3 >= *(void *)(v5 + 16))
  {
LABEL_73:
    __break(1u);
    return result;
  }
  uint64_t v6 = (void *)(v5 + 48 * v3);
  unint64_t v7 = v6[4];
  uint64_t v8 = v6[6];
  uint64_t v67 = v6[7];
  uint64_t v9 = *(void *)(v8 + 16);
  unint64_t v68 = v7;
  if (!v9)
  {
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v7);
    swift_bridgeObjectRetain();
    goto LABEL_61;
  }
  swift_bridgeObjectRetain_n();
  outlined copy of NodePersonality(v7);
  swift_bridgeObjectRetain();
  uint64_t v10 = (uint64_t *)(v8 + 40);
  uint64_t v11 = (uint64_t *)(v8 + 48);
  uint64_t v12 = (uint64_t *)(v8 + 56);
  uint64_t v13 = (uint64_t *)(v8 + 64);
  char v14 = (char *)(v8 + 72);
  uint64_t v15 = (uint64_t *)(v8 + 80);
  uint64_t v16 = 1;
  uint64_t v73 = v8 + 32;
  long long v17 = (Swift::UInt *)(v8 + 32);
  char v69 = a2;
  uint64_t v71 = v9;
  while (1)
  {
    Swift::UInt v18 = *v17;
    uint64_t v19 = *v10;
    uint64_t v20 = *v11;
    uint64_t v21 = *v12;
    uint64_t v22 = *v13;
    char v23 = *v14;
    uint64_t v24 = *v15;
    v91[0] = *v17;
    v91[1] = v19;
    v91[2] = v20;
    v91[3] = v21;
    uint64_t v74 = v22;
    uint64_t v75 = v24;
    v91[4] = v22;
    char v76 = v23;
    char v92 = v23;
    uint64_t v93 = v24;
    long long v25 = a2[9];
    long long v89 = a2[8];
    v90[0] = v25;
    *(_OWORD *)((char *)v90 + 9) = *(long long *)((char *)a2 + 153);
    long long v26 = a2[5];
    long long v85 = a2[4];
    long long v86 = v26;
    long long v27 = a2[7];
    long long v87 = a2[6];
    long long v88 = v27;
    long long v28 = a2[1];
    long long v81 = *a2;
    long long v82 = v28;
    long long v29 = a2[3];
    long long v83 = a2[2];
    long long v84 = v29;
    uint64_t v30 = v28;
    uint64_t v31 = (void *)(*((void *)&v81 + 1) + 32);
    uint64_t v32 = *(void *)(*((void *)&v81 + 1) + 16);
    uint64_t v94 = v21;
    uint64_t v79 = v16;
    if ((void)v81)
    {
      unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v18, (uint64_t)v31, v32, (void *)(v81 + 16), v81 + 32);
      if (v33) {
        goto LABEL_18;
      }
      if ((result & 0x8000000000000000) != 0) {
        goto LABEL_68;
      }
    }
    else
    {
      if (!v32) {
        goto LABEL_18;
      }
      if (*v31 == v18)
      {
        unint64_t result = 0;
      }
      else
      {
        if (v32 == 1) {
          goto LABEL_18;
        }
        if (*(void *)(*((void *)&v81 + 1) + 40) == v18)
        {
          unint64_t result = 1;
        }
        else
        {
          if (v32 == 2)
          {
LABEL_18:
            swift_retain();
            swift_bridgeObjectRetain();
            outlined retain of Graph((uint64_t)&v81);
            uint64_t v34 = MEMORY[0x263F8EE78];
            goto LABEL_55;
          }
          if (*(void *)(*((void *)&v81 + 1) + 48) == v18)
          {
            unint64_t result = 2;
          }
          else
          {
            uint64_t v35 = 0;
            do
            {
              if (v32 - 3 == v35) {
                goto LABEL_18;
              }
              uint64_t v36 = *(void *)(*((void *)&v81 + 1) + 56 + 8 * v35++);
            }
            while (v36 != v18);
            unint64_t result = v35 + 2;
            if (v35 + 2 < 0)
            {
LABEL_68:
              __break(1u);
LABEL_69:
              __break(1u);
LABEL_70:
              __break(1u);
              goto LABEL_71;
            }
          }
        }
      }
    }
    if (result >= *(void *)(v30 + 16)) {
      goto LABEL_69;
    }
    BOOL v37 = (void *)(v30 + 48 * result);
    uint64_t v39 = v37[4];
    uint64_t v38 = v37[5];
    uint64_t v40 = v37[6];
    uint64_t v41 = *(void *)(v38 + 16);
    uint64_t v80 = v19;
    if (!v39)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      outlined retain of Graph((uint64_t)&v81);
      swift_retain();
      uint64_t v70 = v40;
      swift_retain();
      if (!v41)
      {
LABEL_52:
        swift_release();
        swift_release();
        uint64_t v34 = MEMORY[0x263F8EE78];
        a2 = v69;
        uint64_t v9 = v71;
        goto LABEL_55;
      }
      uint64_t v45 = v41;
      uint64_t v72 = v20;
      unint64_t v43 = 0;
      uint64_t v46 = (void *)(v38 + 80);
      while (1)
      {
        if (*(v46 - 6) != v18) {
          goto LABEL_34;
        }
        uint64_t v47 = *(v46 - 4);
        uint64_t v48 = *(v46 - 3);
        char v49 = *((unsigned char *)v46 - 8);
        uint64_t v77 = *(v46 - 2);
        uint64_t v78 = *v46;
        uint64_t v50 = *(uint64_t (**)(uint64_t))(*(void *)*(v46 - 5) + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        if ((v50(v80) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_34;
        }
        if (v47 == v72 && v48 == v94)
        {
          swift_bridgeObjectRelease();
          unint64_t result = swift_release();
          if ((v49 & 1) == 0) {
            goto LABEL_48;
          }
        }
        else
        {
          char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          unint64_t result = swift_release();
          if ((v52 & 1) == 0) {
            goto LABEL_34;
          }
          if ((v49 & 1) == 0)
          {
LABEL_48:
            if ((v76 & 1) == 0 && v77 == v74 && v78 == v75) {
              goto LABEL_51;
            }
            goto LABEL_34;
          }
        }
        char v53 = v76;
        if (v78 != v75) {
          char v53 = 0;
        }
        if (v53)
        {
LABEL_51:
          a2 = v69;
          uint64_t v40 = v70;
LABEL_29:
          if (v43 < *(void *)(v40 + 16))
          {
            uint64_t v44 = *(void *)(v40 + 16 * v43 + 40);
            swift_retain();
            swift_retain();
            swift_release();
            swift_release();
            swift_release();
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v34 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(v44, v91);
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_54;
          }
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
          goto LABEL_73;
        }
LABEL_34:
        v46 += 7;
        if (v45 == ++v43) {
          goto LABEL_52;
        }
      }
    }
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of Graph((uint64_t)&v81);
    swift_retain();
    swift_retain();
    swift_retain();
    unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v91, v38 + 32, v41, (void *)(v39 + 16), v39 + 32);
    if ((v42 & 1) == 0)
    {
      unint64_t v43 = result;
      if ((result & 0x8000000000000000) == 0) {
        goto LABEL_29;
      }
      goto LABEL_70;
    }
    swift_release();
    swift_release();
    swift_release();
    uint64_t v34 = MEMORY[0x263F8EE78];
LABEL_54:
    uint64_t v9 = v71;
LABEL_55:
    outlined release of Graph((uint64_t)&v81);
    uint64_t v54 = *(void *)(v34 + 16);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    if (v54)
    {
      swift_bridgeObjectRelease_n();
      outlined consume of NodePersonality(v68);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    if (v79 == v9) {
      break;
    }
    long long v17 = (Swift::UInt *)(v73 + 56 * v79);
    uint64_t v10 = (uint64_t *)(v17 + 1);
    uint64_t v11 = (uint64_t *)(v17 + 2);
    uint64_t v12 = (uint64_t *)(v17 + 3);
    uint64_t v13 = (uint64_t *)(v17 + 4);
    char v14 = (char *)(v17 + 5);
    uint64_t v15 = (uint64_t *)(v17 + 6);
    uint64_t v16 = v79 + 1;
  }
  swift_bridgeObjectRelease_n();
LABEL_61:
  uint64_t v55 = swift_bridgeObjectRetain();
  unint64_t v56 = specialized Sequence.compactMap<A>(_:)(v55, a2);
  swift_bridgeObjectRelease();
  uint64_t v57 = *(void *)(v56 + 16);
  if (v57)
  {
    swift_bridgeObjectRetain();
    uint64_t v58 = 0;
    do
    {
      uint64_t v59 = *(void *)(v56 + v58 + 136);
      char v60 = *(unsigned char *)(v56 + v58 + 128);
      uint64_t v62 = *(void *)(v56 + v58 + 112);
      uint64_t v61 = *(void *)(v56 + v58 + 120);
      long long v63 = *(_OWORD *)(v56 + v58 + 96);
      char v64 = *(unsigned char *)(v56 + v58 + 72);
      uint64_t v65 = *(void *)(v56 + v58 + 64);
      long long v66 = *(_OWORD *)(v56 + v58 + 48);
      long long v81 = *(_OWORD *)(v56 + v58 + 32);
      long long v82 = v66;
      *(void *)&long long v83 = v65;
      BYTE8(v83) = v64;
      long long v84 = *(_OWORD *)(v56 + v58 + 80);
      long long v85 = v63;
      *(void *)&long long v86 = v62;
      *((void *)&v86 + 1) = v61;
      LOBYTE(v87) = v60;
      *((void *)&v87 + 1) = v59;
      closure #3 in Graph.prune(_:)(&v81, a2);
      v58 += 112;
      --v57;
    }
    while (v57);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  specialized Graph.remove(_:)(v67);
  outlined consume of NodePersonality(v68);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t Graph.prune(at:)(unint64_t *a1)
{
  long long v2 = v1;
  unint64_t result = Graph.remove(_:)((uint64_t)a1);
  unint64_t v5 = *a1;
  if (*a1 != -7)
  {
    if ((v5 & 0x8000000000000000) != 0) {
      goto LABEL_70;
    }
    uint64_t v6 = v1[8];
    if (v5 >= *(void *)(v6 + 16))
    {
LABEL_71:
      __break(1u);
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = (void *)(v6 + 48 * v5);
      unint64_t v9 = v8[4];
      uint64_t v10 = v8[6];
      uint64_t v68 = v8[7];
      uint64_t v11 = *(void *)(v10 + 16);
      if (v11)
      {
        uint64_t v12 = v10 + 32;
        uint64_t v14 = *v1;
        uint64_t v13 = (void *)v1[1];
        uint64_t v15 = v1[2];
        long long v16 = *(_OWORD *)(v2 + 3);
        uint64_t v17 = v2[5];
        char v18 = *((unsigned char *)v2 + 120);
        uint64_t v19 = v2[16];
        char v20 = *((unsigned char *)v2 + 168);
        *(void *)&long long v88 = *v2;
        *((void *)&v88 + 1) = v13;
        *(void *)long long v89 = v15;
        *(_OWORD *)&v89[8] = v16;
        uint64_t v90 = v17;
        long long v91 = *((_OWORD *)v2 + 3);
        *(void *)char v92 = v6;
        *(_OWORD *)&v92[8] = *(_OWORD *)(v2 + 9);
        long long v93 = *(_OWORD *)(v2 + 11);
        long long v94 = *(_OWORD *)(v2 + 13);
        char v95 = v18;
        uint64_t v96 = v19;
        long long v97 = *(_OWORD *)(v2 + 17);
        long long v66 = v2;
        long long v98 = *(_OWORD *)(v2 + 19);
        uint64_t v80 = v13 + 4;
        char v99 = v20;
        swift_bridgeObjectRetain_n();
        unint64_t v67 = v9;
        outlined copy of NodePersonality(v9);
        uint64_t v77 = v14 + 32;
        uint64_t v78 = (void *)(v14 + 16);
        uint64_t v75 = v15 + 32;
        uint64_t v76 = v15;
        swift_bridgeObjectRetain();
        uint64_t v21 = 0;
        long long v81 = v13;
        char v69 = v13 + 7;
        uint64_t v72 = v14;
        uint64_t v73 = v12;
        uint64_t v74 = v11;
        while (1)
        {
          uint64_t v22 = v12 + 56 * v21;
          Swift::UInt v24 = *(void *)v22;
          uint64_t v23 = *(void *)(v22 + 8);
          uint64_t v26 = *(void *)(v22 + 16);
          uint64_t v25 = *(void *)(v22 + 24);
          uint64_t v27 = *(void *)(v22 + 32);
          char v28 = *(unsigned char *)(v22 + 40);
          uint64_t v29 = *(void *)(v22 + 48);
          v100[0] = v24;
          v100[1] = v23;
          uint64_t v86 = v25;
          uint64_t v87 = v23;
          v100[2] = v26;
          v100[3] = v25;
          v100[4] = v27;
          char v101 = v28;
          uint64_t v82 = v29;
          uint64_t v102 = v29;
          uint64_t v30 = v81[2];
          uint64_t v85 = v21;
          if (v14)
          {
            unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v24, (uint64_t)v80, v30, v78, v77);
            if (v31) {
              goto LABEL_17;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_66;
            }
          }
          else
          {
            if (!v30) {
              goto LABEL_17;
            }
            if (*v80 == v24)
            {
              unint64_t result = 0;
            }
            else
            {
              if (v30 == 1) {
                goto LABEL_17;
              }
              if (v81[5] == v24)
              {
                unint64_t result = 1;
              }
              else
              {
                if (v30 == 2)
                {
LABEL_17:
                  swift_retain();
                  swift_bridgeObjectRetain();
                  outlined retain of Graph((uint64_t)&v88);
                  uint64_t v32 = MEMORY[0x263F8EE78];
                  goto LABEL_54;
                }
                if (v81[6] == v24)
                {
                  unint64_t result = 2;
                }
                else
                {
                  uint64_t v33 = 0;
                  do
                  {
                    if (v30 - 3 == v33) {
                      goto LABEL_17;
                    }
                    uint64_t v34 = v69[v33++];
                  }
                  while (v34 != v24);
                  unint64_t result = v33 + 2;
                  if (v33 + 2 < 0)
                  {
LABEL_66:
                    __break(1u);
LABEL_67:
                    __break(1u);
LABEL_68:
                    __break(1u);
                    goto LABEL_69;
                  }
                }
              }
            }
          }
          if (result >= *(void *)(v76 + 16)) {
            goto LABEL_67;
          }
          uint64_t v35 = (uint64_t *)(v75 + 48 * result);
          uint64_t v37 = *v35;
          uint64_t v36 = v35[1];
          uint64_t v38 = v35[2];
          uint64_t v39 = *(void *)(v36 + 16);
          if (!*v35) {
            break;
          }
          swift_retain();
          swift_bridgeObjectRetain();
          outlined retain of Graph((uint64_t)&v88);
          swift_retain();
          swift_retain();
          swift_retain();
          unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v100, v36 + 32, v39, (void *)(v37 + 16), v37 + 32);
          if ((v40 & 1) == 0)
          {
            unint64_t v41 = result;
            if ((result & 0x8000000000000000) == 0) {
              goto LABEL_28;
            }
            goto LABEL_68;
          }
          swift_release();
          swift_release();
          swift_release();
          uint64_t v32 = MEMORY[0x263F8EE78];
          uint64_t v14 = v72;
          uint64_t v12 = v73;
LABEL_53:
          uint64_t v11 = v74;
LABEL_54:
          outlined release of Graph((uint64_t)&v88);
          uint64_t v53 = *(void *)(v32 + 16);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          if (v53)
          {
            swift_bridgeObjectRelease_n();
            outlined consume of NodePersonality(v67);
            goto LABEL_64;
          }
          uint64_t v21 = v85 + 1;
          if (v85 + 1 == v11)
          {
            swift_bridgeObjectRelease_n();
            unint64_t v9 = v67;
            long long v2 = v66;
            goto LABEL_58;
          }
        }
        uint64_t v71 = v7;
        swift_retain();
        swift_bridgeObjectRetain();
        outlined retain of Graph((uint64_t)&v88);
        swift_retain();
        uint64_t v70 = v38;
        swift_retain();
        if (!v39)
        {
LABEL_51:
          swift_release();
          swift_release();
          uint64_t v32 = MEMORY[0x263F8EE78];
          uint64_t v7 = v71;
          uint64_t v14 = v72;
          uint64_t v12 = v73;
          uint64_t v11 = v74;
          goto LABEL_54;
        }
        uint64_t v43 = v36;
        char v79 = v28;
        unint64_t v41 = 0;
        uint64_t v44 = (void *)(v43 + 80);
        while (1)
        {
          if (*(v44 - 6) != v24) {
            goto LABEL_33;
          }
          uint64_t v45 = v39;
          uint64_t v46 = *(v44 - 4);
          uint64_t v47 = *(v44 - 3);
          char v48 = *((unsigned char *)v44 - 8);
          uint64_t v83 = *(v44 - 2);
          uint64_t v84 = *v44;
          char v49 = *(uint64_t (**)(uint64_t))(*(void *)*(v44 - 5) + 128);
          swift_retain();
          swift_bridgeObjectRetain();
          if ((v49(v87) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v39 = v45;
            goto LABEL_33;
          }
          if (v46 == v26 && v47 == v86)
          {
            swift_bridgeObjectRelease();
            unint64_t result = swift_release();
            uint64_t v39 = v45;
            if ((v48 & 1) == 0) {
              goto LABEL_47;
            }
          }
          else
          {
            char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            unint64_t result = swift_release();
            uint64_t v39 = v45;
            if ((v51 & 1) == 0) {
              goto LABEL_33;
            }
            if ((v48 & 1) == 0)
            {
LABEL_47:
              if ((v79 & 1) == 0 && v83 == v27 && v84 == v82) {
                goto LABEL_50;
              }
              goto LABEL_33;
            }
          }
          char v52 = v79;
          if (v84 != v82) {
            char v52 = 0;
          }
          if (v52)
          {
LABEL_50:
            uint64_t v38 = v70;
            uint64_t v7 = v71;
LABEL_28:
            if (v41 < *(void *)(v38 + 16))
            {
              uint64_t v42 = *(void *)(v38 + 16 * v41 + 40);
              swift_retain();
              swift_retain();
              swift_release();
              swift_release();
              swift_release();
              swift_retain();
              swift_bridgeObjectRetain();
              uint64_t v32 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(v42, v100);
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              uint64_t v14 = v72;
              uint64_t v12 = v73;
              goto LABEL_53;
            }
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
            goto LABEL_71;
          }
LABEL_33:
          v44 += 7;
          if (v39 == ++v41) {
            goto LABEL_51;
          }
        }
      }
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v9);
      swift_bridgeObjectRetain();
LABEL_58:
      uint64_t v54 = swift_bridgeObjectRetain();
      unint64_t v55 = specialized Sequence.compactMap<A>(_:)(v54, v2);
      swift_bridgeObjectRelease();
      uint64_t v56 = *(void *)(v55 + 16);
      if (v56)
      {
        swift_bridgeObjectRetain();
        uint64_t v57 = 0;
        do
        {
          uint64_t v58 = *(void *)(v55 + v57 + 136);
          char v59 = *(unsigned char *)(v55 + v57 + 128);
          uint64_t v61 = *(void *)(v55 + v57 + 112);
          uint64_t v60 = *(void *)(v55 + v57 + 120);
          long long v62 = *(_OWORD *)(v55 + v57 + 96);
          char v63 = *(unsigned char *)(v55 + v57 + 72);
          uint64_t v64 = *(void *)(v55 + v57 + 64);
          long long v65 = *(_OWORD *)(v55 + v57 + 48);
          long long v88 = *(_OWORD *)(v55 + v57 + 32);
          *(_OWORD *)long long v89 = v65;
          *(void *)&v89[16] = v64;
          LOBYTE(v90) = v63;
          long long v91 = *(_OWORD *)(v55 + v57 + 80);
          *(_OWORD *)char v92 = v62;
          *(void *)&v92[16] = v61;
          *(void *)&long long v93 = v60;
          BYTE8(v93) = v59;
          *(void *)&long long v94 = v58;
          closure #3 in Graph.prune(_:)((unint64_t *)&v88, (long long *)v2);
          v57 += 112;
          --v56;
        }
        while (v56);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      specialized Graph.remove(_:)(v68);
      outlined consume of NodePersonality(v9);
LABEL_64:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t Graph.describeEdge(_:)(uint64_t result)
{
  uint64_t v2 = result;
  unint64_t v3 = *(void *)result;
  if (*(void *)result == -7)
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    char v9 = 0;
    goto LABEL_6;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(v1 + 64);
  if (v3 >= *(void *)(v10 + 16))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v11 = v10 + 48 * v3;
  unint64_t v4 = *(void *)(v11 + 32);
  uint64_t v5 = *(void *)(v11 + 40);
  uint64_t v6 = *(void *)(v11 + 48);
  uint64_t v7 = *(void *)(v11 + 56);
  uint64_t v8 = *(void *)(v11 + 64);
  char v9 = *(unsigned char *)(v11 + 72);
  outlined copy of NodePersonality(v4);
  swift_bridgeObjectRetain();
  unint64_t result = swift_bridgeObjectRetain();
LABEL_6:
  v39[0] = v4;
  v39[1] = v5;
  v39[2] = v6;
  v39[3] = v7;
  void v39[4] = v8;
  char v40 = v9;
  unint64_t v12 = *(void *)(v2 + 56);
  uint64_t v34 = v5;
  if (v12 != -7)
  {
    if ((v12 & 0x8000000000000000) == 0)
    {
      uint64_t v19 = *(void *)(v1 + 64);
      if (v12 < *(void *)(v19 + 16))
      {
        uint64_t v20 = v19 + 48 * v12;
        unint64_t v13 = *(void *)(v20 + 32);
        uint64_t v14 = *(void *)(v20 + 40);
        uint64_t v15 = *(void *)(v20 + 48);
        uint64_t v16 = *(void *)(v20 + 56);
        uint64_t v17 = *(void *)(v20 + 64);
        char v18 = *(unsigned char *)(v20 + 72);
        outlined copy of NodePersonality(v13);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_11;
      }
LABEL_25:
      __break(1u);
      return result;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
LABEL_11:
  uint64_t v33 = v14;
  v37[0] = v13;
  v37[1] = v14;
  v37[2] = v15;
  v37[3] = v16;
  v37[4] = v17;
  char v38 = v18;
  outlined retain of Edge(v2);
  uint64_t v21 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11ShaderGraph0cD4NodeV_s5NeverOSSTg504_s11c41Graph0B0V12describeEdgeySSAA0D0VFSSAA0aB4E6VXEfU_AD4EdgeVTf1cn_nTf4ng_nTm((uint64_t)v39, v2, (uint64_t)v36, (void (*)(uint64_t *__return_ptr, void *, uint64_t))closure #1 in Graph.describeEdge(_:));
  uint64_t v23 = v22;
  outlined release of Edge(v2);
  if (v23) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = 0xD000000000000010;
  }
  if (!v23) {
    uint64_t v23 = (void *)0x800000025C4262B0;
  }
  outlined retain of Edge(v2);
  uint64_t v25 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11ShaderGraph0cD4NodeV_s5NeverOSSTg504_s11c41Graph0B0V12describeEdgeySSAA0D0VFSSAA0aB4E6VXEfU_AD4EdgeVTf1cn_nTf4ng_nTm((uint64_t)v37, v2, (uint64_t)v35, (void (*)(uint64_t *__return_ptr, void *, uint64_t))closure #2 in Graph.describeEdge(_:));
  uint64_t v27 = v26;
  outlined release of Edge(v2);
  if (v27) {
    uint64_t v28 = v25;
  }
  else {
    uint64_t v28 = 0xD000000000000010;
  }
  if (!v27) {
    uint64_t v27 = (void *)0x800000025C4262B0;
  }
  v29._uint64_t countAndFlagsBits = v24;
  v29._object = v23;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 0x28203E2D2029;
  v30._object = (void *)0xE600000000000000;
  String.append(_:)(v30);
  v31._uint64_t countAndFlagsBits = v28;
  v31._object = v27;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = 41;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  outlined consume of ShaderGraphNode?(v13, v33);
  outlined consume of ShaderGraphNode?(v4, v34);
  return 40;
}

uint64_t closure #1 in Graph.describeEdge(_:)@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void **)(a1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 8236;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v3;
  v7._object = v4;
  String.append(_:)(v7);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease_n();
  *a2 = 1701080942;
  a2[1] = v9;
  return result;
}

uint64_t closure #2 in Graph.describeEdge(_:)@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 72);
  unint64_t v4 = *(void **)(a1 + 80);
  swift_retain();
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 8236;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v3;
  v7._object = v4;
  String.append(_:)(v7);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease_n();
  *a2 = 1701080942;
  a2[1] = v9;
  return result;
}

uint64_t Edge.debugDescription.getter()
{
  v0._uint64_t countAndFlagsBits = 1701274693;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = 10272;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 540945696;
  v2._object = (void *)0xE400000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0;
}

uint64_t specialized OrderedSet._append(_:)(long long *a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v3 + 32;
  uint64_t v6 = *(void *)(v3 + 16);
  if (*v1)
  {
    swift_retain();
    specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)a1, v5, v6, (void *)(v4 + 16), v4 + 32);
    char v8 = v7;
    uint64_t v10 = v9;
    swift_release();
    if (v8) {
      goto LABEL_7;
    }
    return 0;
  }
  specialized Collection<>.firstIndex(of:)(a1, v3 + 32, *(void *)(v3 + 16));
  if ((v11 & 1) == 0) {
    return 0;
  }
  uint64_t v10 = 0;
LABEL_7:
  specialized OrderedSet._appendNew(_:in:)(a1, v10);
  return 1;
}

uint64_t specialized closure #1 in static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = *(void *)(a3 + 16);
  if (!v33) {
    return result;
  }
  uint64_t v4 = (void *)result;
  uint64_t v5 = 0;
  while (1)
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = 1 << *v4;
    BOOL v8 = __OFSUB__(v7, 1);
    uint64_t v9 = v7 - 1;
    if (v8) {
      goto LABEL_38;
    }
    Swift::Int v10 = v9 & v6;
    uint64_t v11 = _HashTable.UnsafeHandle._startIterator(bucket:)(v9 & v6, v4, a2);
    unint64_t v13 = v12;
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    if (v11) {
      break;
    }
LABEL_3:
    uint64_t result = _HashTable.BucketIterator.currentValue.setter(v5++, 0);
    if (v5 == v33) {
      return result;
    }
  }
  char v16 = 0;
  uint64_t v17 = *v4 & 0x3FLL;
  uint64_t v18 = 1 << *v4;
  uint64_t v19 = v17 << *v4;
  uint64_t v20 = v19 + 64;
  BOOL v21 = __OFADD__(v19, 64);
  uint64_t v23 = v20 - 1;
  BOOL v22 = v20 < 1;
  uint64_t v24 = v20 + 62;
  if (!v22) {
    uint64_t v24 = v23;
  }
  uint64_t v25 = v24 >> 6;
  while (1)
  {
    if (++v10 == v18)
    {
      if (v16) {
        goto LABEL_39;
      }
      Swift::Int v10 = 0;
      char v16 = 1;
    }
    if (v15 >= v17) {
      break;
    }
    uint64_t v26 = (v10 * v17) >> 6;
    if (v15)
    {
      if (v21) {
        goto LABEL_37;
      }
      if (v26 + 1 == v25) {
        uint64_t v26 = 0;
      }
      else {
        ++v26;
      }
    }
    uint64_t v27 = v17 - v15;
    if (__OFSUB__(v17, v15)) {
      goto LABEL_35;
    }
    if (v26 == 2 && v17 == 5) {
      uint64_t v29 = 32;
    }
    else {
      uint64_t v29 = 64;
    }
    BOOL v8 = __OFSUB__(v29, v27);
    uint64_t v30 = v29 - v27;
    if (v8) {
      goto LABEL_36;
    }
    unint64_t v31 = *(void *)(a2 + 8 * v26);
    uint64_t v32 = (v31 << v15) | v13;
    unint64_t v13 = v31 >> v27;
    uint64_t v15 = v30;
LABEL_12:
    if ((v32 & (v18 - 1)) == 0) {
      goto LABEL_3;
    }
  }
  BOOL v8 = __OFSUB__(v15, v17);
  v15 -= v17;
  if (!v8)
  {
    uint64_t v32 = v13;
    v13 >>= v17;
    goto LABEL_12;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v36 = *(void *)(a3 + 16);
  if (!v36) {
    return result;
  }
  uint64_t v4 = (uint64_t *)result;
  for (i = 0; i != v36; ++i)
  {
    Swift::Int v6 = *v4;
    uint64_t v7 = static Hasher._hash(seed:_:)();
    BOOL v8 = 1 << v6;
    uint64_t v9 = (1 << v6) - 1;
    if (__OFSUB__(1 << v6, 1)) {
      goto LABEL_46;
    }
    Swift::Int v10 = v6 & 0x3F;
    uint64_t v11 = v9 & v7;
    uint64_t result = _HashTable.UnsafeHandle._startIterator(bucket:)(v9 & v7, v4, a2);
    if (result)
    {
      uint64_t v14 = 0;
      uint64_t v15 = __OFADD__(v10 << v10, 64);
      char v16 = (v10 << v10) + 126;
      if ((v10 << v10) + 64 >= 1) {
        char v16 = (v10 << v10) + 63;
      }
      uint64_t v17 = v16 >> 6;
      do
      {
        if (++v11 == v8)
        {
          if (v14) {
            goto LABEL_48;
          }
          uint64_t v11 = 0;
          uint64_t v14 = 1;
        }
        if (v13 >= v10)
        {
          BOOL v22 = __OFSUB__(v13, v10);
          v13 -= v10;
          if (v22)
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            uint64_t result = _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          uint64_t v25 = v12 >> v10;
        }
        else
        {
          uint64_t v18 = (v11 * v10) >> 6;
          if (v13)
          {
            if (v15) {
              goto LABEL_45;
            }
            if (v18 + 1 == v17) {
              uint64_t v18 = 0;
            }
            else {
              ++v18;
            }
          }
          uint64_t v19 = v10 - v13;
          if (__OFSUB__(v10, v13)) {
            goto LABEL_43;
          }
          uint64_t v20 = v18 == 2 && v10 == 5;
          if (v20) {
            BOOL v21 = 32;
          }
          else {
            BOOL v21 = 64;
          }
          BOOL v22 = __OFSUB__(v21, v19);
          uint64_t v23 = v21 - v19;
          if (v22) {
            goto LABEL_44;
          }
          uint64_t v24 = *(void *)(a2 + 8 * v18);
          v12 |= v24 << v13;
          uint64_t v25 = v24 >> v19;
          unint64_t v13 = v23;
        }
        uint64_t v20 = (v12 & v9) == 0;
        unint64_t v12 = v25;
      }
      while (!v20);
    }
    uint64_t v26 = ((v9 & ((i - (v4[1] >> 6)) >> 63)) + i - (v4[1] >> 6)) ^ v9;
    uint64_t v27 = (v11 * v10) >> 6;
    *(void *)(a2 + 8 * v27) ^= v26 << (v11 * v10);
    uint64_t v28 = 64 - ((v11 * v10) & 0x3F);
    uint64_t v29 = *v4 & 0x3F;
    if (v28 < v29)
    {
      uint64_t v30 = v29 << v29;
      BOOL v22 = __OFADD__(v30, 64);
      unint64_t v31 = v30 + 64;
      if (v22) {
        goto LABEL_47;
      }
      uint64_t v33 = v31 - 1;
      uint64_t v32 = v31 < 1;
      uint64_t v34 = v31 + 62;
      if (!v32) {
        uint64_t v34 = v33;
      }
      if (v27 + 1 == v34 >> 6) {
        uint64_t v35 = 0;
      }
      else {
        uint64_t v35 = v27 + 1;
      }
      *(void *)(a2 + 8 * v35) ^= v26 >> v28;
    }
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t v5;
  Swift::UInt v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v28 = *(void *)(a3 + 16);
  if (!v28) {
    return result;
  }
  uint64_t v4 = (uint64_t *)result;
  uint64_t v5 = 0;
  uint64_t v27 = a3 + 32;
  while (1)
  {
    Swift::Int v6 = *(void *)(v27 + 8 * v5);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v6);
    uint64_t v7 = Hasher._finalize()();
    BOOL v8 = *v4;
    uint64_t v9 = 1 << *v4;
    Swift::Int v10 = v9 - 1;
    if (__OFSUB__(v9, 1)) {
      goto LABEL_38;
    }
    uint64_t v11 = v10 & v7;
    if (_HashTable.UnsafeHandle._startIterator(bucket:)(v10 & v7, v4, a2)) {
      break;
    }
LABEL_3:
    uint64_t result = _HashTable.BucketIterator.currentValue.setter(v5++, 0);
    if (v5 == v28) {
      return result;
    }
  }
  uint64_t v14 = 0;
  uint64_t v15 = v8 & 0x3F;
  char v16 = __OFADD__(v15 << v15, 64);
  uint64_t v17 = (v15 << v15) + 126;
  if ((v15 << v15) + 64 >= 1) {
    uint64_t v17 = (v15 << v15) + 63;
  }
  uint64_t v18 = v17 >> 6;
  while (1)
  {
    if (++v11 == v9)
    {
      if (v14) {
        goto LABEL_39;
      }
      uint64_t v11 = 0;
      uint64_t v14 = 1;
    }
    if (v13 >= v15) {
      break;
    }
    uint64_t v19 = (v11 * v15) >> 6;
    if (v13)
    {
      if (v16) {
        goto LABEL_37;
      }
      if (v19 + 1 == v18) {
        uint64_t v19 = 0;
      }
      else {
        ++v19;
      }
    }
    uint64_t v20 = v15 - v13;
    if (__OFSUB__(v15, v13)) {
      goto LABEL_35;
    }
    if (v19 == 2 && v15 == 5) {
      BOOL v22 = 32;
    }
    else {
      BOOL v22 = 64;
    }
    uint64_t v23 = __OFSUB__(v22, v20);
    uint64_t v24 = v22 - v20;
    if (v23) {
      goto LABEL_36;
    }
    uint64_t v25 = *(void *)(a2 + 8 * v19);
    uint64_t v26 = (v25 << v13) | v12;
    unint64_t v12 = v25 >> v20;
    unint64_t v13 = v24;
LABEL_12:
    if ((v26 & v10) == 0) {
      goto LABEL_3;
    }
  }
  uint64_t v23 = __OFSUB__(v13, v15);
  v13 -= v15;
  if (!v23)
  {
    uint64_t v26 = v12;
    v12 >>= v15;
    goto LABEL_12;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized closure #1 in static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(Swift::Int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v48 = *(void *)(a3 + 16);
  if (!v48) {
    return;
  }
  uint64_t v5 = 0;
  uint64_t v47 = a3 + 32;
  do
  {
    Swift::Int v6 = *a1;
    id v7 = *(id *)(v47 + 8 * v5);
    Swift::Int v8 = NSObject._rawHashValue(seed:)(v6);
    uint64_t v9 = 1 << *a1;
    BOOL v10 = __OFSUB__(v9, 1);
    uint64_t v11 = v9 - 1;
    if (v10) {
      goto LABEL_47;
    }
    Swift::Int v12 = v11 & v8;
    uint64_t v13 = _HashTable.UnsafeHandle._startIterator(bucket:)(v11 & v8, a1, a2);
    unint64_t v15 = v14;
    uint64_t v17 = v16;

    Swift::Int v18 = *a1;
    if (v13)
    {
      char v19 = 0;
      uint64_t v20 = *a1 & 0x3F;
      uint64_t v21 = 1 << v18;
      uint64_t v22 = (1 << v18) - 1;
      uint64_t v23 = v20 << v18;
      uint64_t v24 = v23 + 64;
      BOOL v25 = __OFADD__(v23, 64);
      uint64_t v27 = v24 - 1;
      BOOL v26 = v24 < 1;
      uint64_t v28 = v24 + 62;
      if (!v26) {
        uint64_t v28 = v27;
      }
      uint64_t v29 = v28 >> 6;
      while (1)
      {
        if (++v12 == v21)
        {
          if (v19) {
            goto LABEL_49;
          }
          Swift::Int v12 = 0;
          char v19 = 1;
        }
        if (v17 >= v20)
        {
          BOOL v10 = __OFSUB__(v17, v20);
          v17 -= v20;
          if (v10)
          {
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return;
          }
          unint64_t v36 = v15 >> v20;
        }
        else
        {
          uint64_t v30 = (v12 * v20) >> 6;
          if (v17)
          {
            if (v25) {
              goto LABEL_46;
            }
            if (v30 + 1 == v29) {
              uint64_t v30 = 0;
            }
            else {
              ++v30;
            }
          }
          uint64_t v31 = v20 - v17;
          if (__OFSUB__(v20, v17)) {
            goto LABEL_44;
          }
          BOOL v32 = v30 == 2 && v20 == 5;
          if (v32) {
            uint64_t v33 = 32;
          }
          else {
            uint64_t v33 = 64;
          }
          BOOL v10 = __OFSUB__(v33, v31);
          uint64_t v34 = v33 - v31;
          if (v10) {
            goto LABEL_45;
          }
          unint64_t v35 = *(void *)(a2 + 8 * v30);
          v15 |= v35 << v17;
          unint64_t v36 = v35 >> v31;
          uint64_t v17 = v34;
        }
        BOOL v32 = (v15 & v22) == 0;
        unint64_t v15 = v36;
        if (v32) {
          goto LABEL_34;
        }
      }
    }
    uint64_t v20 = *a1 & 0x3F;
LABEL_34:
    unint64_t v37 = (-1 << v20) ^ ~((((v5 - (a1[1] >> 6)) >> 63) & ~(-1 << v20)) + v5 - (a1[1] >> 6));
    char v38 = v20 * v12;
    uint64_t v39 = (v20 * v12) >> 6;
    *(void *)(a2 + 8 * v39) ^= v37 << v38;
    unint64_t v40 = 64 - (v38 & 0x3F);
    unint64_t v41 = *a1 & 0x3F;
    if (v40 < v41)
    {
      unint64_t v42 = v41 << v41;
      BOOL v10 = __OFADD__(v42, 64);
      uint64_t v43 = v42 + 64;
      if (v10) {
        goto LABEL_48;
      }
      uint64_t v44 = v43 - 1;
      BOOL v26 = v43 < 1;
      uint64_t v45 = v43 + 62;
      if (!v26) {
        uint64_t v45 = v44;
      }
      if (v39 + 1 == v45 >> 6) {
        uint64_t v46 = 0;
      }
      else {
        uint64_t v46 = v39 + 1;
      }
      *(void *)(a2 + 8 * v46) ^= v37 >> v40;
    }
    ++v5;
  }
  while (v5 != v48);
}

uint64_t specialized static ContiguousArray<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16))
  {
LABEL_13:
    char v14 = 0;
    return v14 & 1;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = v2 - 1;
    uint64_t v4 = (uint64_t *)(a2 + 40);
    uint64_t v5 = (uint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      uint64_t v8 = v5[3];
      uint64_t v9 = v5[4];
      uint64_t v10 = *(v5 - 1);
      uint64_t v11 = v4[1];
      uint64_t v19 = *v4;
      uint64_t v20 = *(v4 - 1);
      uint64_t v12 = v4[2];
      uint64_t v13 = v4[3];
      uint64_t v16 = v4[4];
      uint64_t v17 = v3;
      uint64_t v18 = v5[2];
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      if ((specialized Sequence<>.elementsEqual<A>(_:)(v20, v19, v10, v7) & 1) == 0
        || (specialized static ContiguousArray<A>.== infix(_:_:)(v6, v11) & 1) == 0
        || (specialized Sequence<>.elementsEqual<A>(_:)(v12, v13, v18, v8) & 1) == 0)
      {
        break;
      }
      char v14 = specialized static ContiguousArray<A>.== infix(_:_:)(v9, v16);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v3 = v17 - 1;
      if (v14)
      {
        v4 += 6;
        v5 += 6;
        if (v17) {
          continue;
        }
      }
      return v14 & 1;
    }
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_13;
  }
  char v14 = 1;
  return v14 & 1;
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = (uint64_t *)(a2 + 80);
  for (i = (uint64_t *)(a1 + 40); ; i += 7)
  {
    uint64_t v6 = *(i - 1);
    uint64_t v5 = *i;
    uint64_t v7 = i[1];
    uint64_t v8 = i[2];
    uint64_t v9 = i[3];
    uint64_t v11 = *(v3 - 5);
    uint64_t v12 = *(v3 - 4);
    uint64_t v13 = *(v3 - 2);
    uint64_t v24 = *v3;
    if (!*i)
    {
      if (v11) {
        goto LABEL_22;
      }
      goto LABEL_6;
    }
    if (!v11)
    {
LABEL_22:
      uint64_t v22 = *(v3 - 5);
      unint64_t v15 = *(v3 - 6);
      outlined copy of Output?(v6, v5);
      outlined copy of Output?(v15, v22);
      outlined consume of Input?(v6, v5);
      outlined consume of Input?(v15, v22);
      return 0;
    }
    uint64_t v10 = i[5];
    uint64_t v23 = i[4];
    uint64_t v18 = *(v3 - 3);
    uint64_t v19 = *(v3 - 1);
    uint64_t v21 = *(v3 - 5);
    if (v6 != *(v3 - 6)) {
      break;
    }
    uint64_t v16 = v2;
    uint64_t v17 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 128);
    outlined copy of Output?(v6, v5);
    outlined copy of Output?(v6, v5);
    outlined copy of Output?(v6, v5);
    outlined copy of Output?(v6, v21);
    if ((v17(v21) & 1) == 0 || (v7 != v12 || v8 != v18) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_24;
    }
    if (v23)
    {
      if ((v19 & 1) == 0) {
        goto LABEL_24;
      }
    }
    else if ((v19 & 1) != 0 || v9 != v13)
    {
      goto LABEL_24;
    }
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Input?(v6, v5);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    uint64_t v2 = v16;
    if (v10 != v24) {
      return 0;
    }
LABEL_6:
    v3 += 7;
    if (!--v2) {
      return 1;
    }
  }
  uint64_t v20 = *(v3 - 6);
  outlined copy of Output?(v6, v5);
  outlined copy of Output?(v6, v5);
  outlined copy of Output?(v6, v5);
  outlined copy of Output?(v20, v21);
LABEL_24:
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of Input?(v6, v5);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  BOOL v12;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v3 = v2 - 1;
      uint64_t v4 = (uint64_t *)(a2 + 40);
      uint64_t v5 = (uint64_t *)(a1 + 40);
      do
      {
        uint64_t v7 = *(v5 - 1);
        uint64_t v6 = *v5;
        uint64_t v8 = *(v4 - 1);
        uint64_t v9 = *v4;
        swift_retain();
        swift_retain();
        uint64_t v10 = specialized Sequence<>.elementsEqual<A>(_:)(v8, v9, v7, v6);
        swift_release();
        swift_release();
        uint64_t v12 = v3-- != 0;
        if ((v10 & 1) == 0) {
          break;
        }
        v4 += 2;
        v5 += 2;
      }
      while (v12);
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  return v10 & 1;
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x2611848B0);
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, Swift::Int a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<Input>);
}

uint64_t specialized Set._Variant.insert(_:)(unsigned char *a1, Swift::Int a2)
{
  uint64_t v4 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v7, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v17;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_30;
  }
  uint64_t v8 = ~v6;
  while (2)
  {
    unint64_t v9 = 0xE400000000000000;
    uint64_t v10 = 1701736302;
    switch(*(unsigned char *)(*(void *)(v4 + 48) + v7))
    {
      case 1:
        unint64_t v9 = 0xE700000000000000;
        uint64_t v10 = 0x7972616D6D7573;
        break;
      case 2:
        unint64_t v9 = 0xE700000000000000;
        uint64_t v10 = 0x65766968637261;
        break;
      case 3:
        unint64_t v9 = 0xE300000000000000;
        uint64_t v10 = 7630692;
        break;
      case 4:
        uint64_t v10 = 0x62694C6C6174656DLL;
        unint64_t v9 = 0xEC00000079726172;
        break;
      case 5:
        uint64_t v10 = 0x6E69686374697473;
        unint64_t v9 = 0xEE00687061724767;
        break;
      case 6:
        uint64_t v10 = 0x446C616D696E696DLL;
        unint64_t v9 = 0xEA0000000000746FLL;
        break;
      default:
        break;
    }
    unint64_t v11 = 0xE400000000000000;
    uint64_t v12 = 1701736302;
    switch((char)a2)
    {
      case 1:
        unint64_t v11 = 0xE700000000000000;
        if (v10 == 0x7972616D6D7573) {
          goto LABEL_21;
        }
        goto LABEL_22;
      case 2:
        unint64_t v11 = 0xE700000000000000;
        if (v10 != 0x65766968637261) {
          goto LABEL_22;
        }
        goto LABEL_21;
      case 3:
        unint64_t v11 = 0xE300000000000000;
        if (v10 != 7630692) {
          goto LABEL_22;
        }
        goto LABEL_21;
      case 4:
        unint64_t v11 = 0xEC00000079726172;
        if (v10 != 0x62694C6C6174656DLL) {
          goto LABEL_22;
        }
        goto LABEL_21;
      case 5:
        uint64_t v12 = 0x6E69686374697473;
        unint64_t v11 = 0xEE00687061724767;
        goto LABEL_20;
      case 6:
        unint64_t v11 = 0xEA0000000000746FLL;
        if (v10 != 0x446C616D696E696DLL) {
          goto LABEL_22;
        }
        goto LABEL_21;
      default:
LABEL_20:
        if (v10 != v12) {
          goto LABEL_22;
        }
LABEL_21:
        if (v9 != v11)
        {
LABEL_22:
          char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v13) {
            goto LABEL_29;
          }
          unint64_t v7 = (v7 + 1) & v8;
          if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
            goto LABEL_27;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_29:
        swift_bridgeObjectRelease();
        uint64_t result = 0;
        LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v7);
LABEL_30:
        *a1 = a2;
        return result;
    }
  }
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<ShaderGraphNode.ID>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<FunctionNodeID>);
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v23[9] = v8;
      type metadata accessor for MaterialXTarget();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v23[0];
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v19 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v23[0] = v19;
    if (*(void *)(v19 + 24) <= *(void *)(v19 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      uint64_t v20 = v23[0];
    }
    else
    {
      uint64_t v20 = v19;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)a2, v20);
    uint64_t *v3 = v20;
  }
  else
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v10 = a2[4];
    swift_retain();
    specialized Optional<A>.hash(into:)((uint64_t)v23, v10);
    swift_release();
    Swift::Int v11 = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      char v14 = (void *)swift_retain();
      BOOL v15 = specialized static MaterialXTarget.== infix(_:_:)(v14, a2);
      swift_release();
      if (v15)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v3 + 48) + 8 * v13);
        swift_retain();
        return 0;
      }
      uint64_t v16 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        uint64_t v17 = (void *)swift_retain();
        BOOL v18 = specialized static MaterialXTarget.== infix(_:_:)(v17, a2);
        swift_release();
        if (v18) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23[0] = *v3;
    uint64_t *v3 = 0x8000000000000000;
    Swift::Int v22 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v22, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v23[0];
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      BOOL v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2, uint64_t *a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v10, isUniquelyReferenced_nonNull_native, a3);
    uint64_t *v3 = v15;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v11 = *(void *)(v7 + 48);
  if (*(void *)(v11 + 8 * v10) != a2)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v10 = (v10 + 1) & v12;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v11 + 8 * v10) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v3 + 48) + 8 * v10);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, Swift::Int a2, uint64_t *a3)
{
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  Swift::UInt v50 = *(void *)a2;
  Hasher._combine(_:)(*(void *)a2);
  unint64_t v10 = *(void (**)(void *))(*(void *)v7 + 120);
  uint64_t v48 = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  v10(v51);
  uint64_t v49 = v7;
  swift_release();
  swift_bridgeObjectRetain();
  uint64_t v45 = v6;
  String.hash(into:)();
  uint64_t v46 = v8;
  swift_bridgeObjectRelease();
  Swift::UInt v11 = *(void *)(a2 + 32);
  int v44 = *(unsigned __int8 *)(a2 + 40);
  if (v44 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  uint64_t v12 = v9;
  Swift::UInt v43 = *(void *)(a2 + 48);
  Hasher._combine(_:)(v43);
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v15 = v13 & ~v14;
  uint64_t v16 = v9 + 56;
  Swift::Int v40 = a2;
  if ((*(void *)(v9 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
  {
    Swift::UInt v39 = v11;
    uint64_t v17 = ~v14;
    do
    {
      uint64_t v18 = *(void *)(v12 + 48) + 56 * v15;
      if (*(void *)v18 != v50) {
        goto LABEL_7;
      }
      uint64_t v19 = *(void *)(v18 + 16);
      uint64_t v20 = *(void *)(v18 + 24);
      uint64_t v47 = *(void *)(v18 + 32);
      char v21 = *(unsigned char *)(v18 + 40);
      uint64_t v22 = *(void *)(v18 + 48);
      uint64_t v23 = *(uint64_t (**)(uint64_t))(**(void **)(v18 + 8) + 128);
      swift_retain();
      swift_bridgeObjectRetain();
      if ((v23(v49) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v12 = v48;
        goto LABEL_7;
      }
      if (v19 == v45 && v20 == v46)
      {
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v12 = v48;
        if (v21) {
          goto LABEL_16;
        }
      }
      else
      {
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v12 = v48;
        if ((v25 & 1) == 0) {
          goto LABEL_7;
        }
        if (v21)
        {
LABEL_16:
          char v26 = v44;
          if (v22 != v43) {
            char v26 = 0;
          }
          if (v26) {
            goto LABEL_27;
          }
          goto LABEL_7;
        }
      }
      if ((v44 & 1) == 0 && v47 == v39 && v22 == v43)
      {
LABEL_27:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v28 = *(void *)(*(void *)v41 + 48) + 56 * v15;
        uint64_t v30 = *(void *)v28;
        uint64_t v29 = *(void *)(v28 + 8);
        uint64_t v31 = *(void *)(v28 + 16);
        uint64_t v32 = *(void *)(v28 + 24);
        uint64_t v33 = *(void *)(v28 + 32);
        char v34 = *(unsigned char *)(v28 + 40);
        uint64_t v35 = *(void *)(v28 + 48);
        *(void *)a1 = v30;
        *(void *)(a1 + 8) = v29;
        *(void *)(a1 + 16) = v31;
        *(void *)(a1 + 24) = v32;
        *(void *)(a1 + 32) = v33;
        *(unsigned char *)(a1 + 40) = v34;
        *(void *)(a1 + 48) = v35;
        swift_retain();
        swift_bridgeObjectRetain();
        return 0;
      }
LABEL_7:
      unint64_t v15 = (v15 + 1) & v17;
    }
    while (((*(void *)(v16 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v51[0] = *(void *)v41;
  *(void *)uint64_t v41 = 0x8000000000000000;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(v40, v15, isUniquelyReferenced_nonNull_native, a3);
  *(void *)uint64_t v41 = v51[0];
  swift_bridgeObjectRelease();
  long long v38 = *(_OWORD *)(v40 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v40;
  *(_OWORD *)(a1 + 16) = v38;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v40 + 32);
  *(void *)(a1 + 48) = *(void *)(v40 + 48);
  return 1;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MaterialXTarget>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaSet.makeIterator()();
    uint64_t v3 = __CocoaSet.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      type metadata accessor for MaterialXTarget();
      do
      {
        v17[0] = v4;
        swift_dynamicCast();
        uint64_t v2 = v18;
        if (*(void *)(v18 + 24) <= *(void *)(v18 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v18;
        }
        uint64_t v5 = v17[9];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v6 = *(void *)(v5 + 32);
        swift_retain();
        specialized Optional<A>.hash(into:)((uint64_t)v17, v6);
        swift_release();
        Swift::Int result = Hasher._finalize()();
        uint64_t v8 = v2 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v2 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v2 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v11 == v14;
            if (v11 == v14) {
              unint64_t v11 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v8 + 8 * v11);
          }
          while (v16 == -1);
          unint64_t v12 = __clz(__rbit64(~v16)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v2 + 48) + 8 * v12) = v5;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaSet.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  Swift::String v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<DebugConfig.Group>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = (void *)(v2 + 56);
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v11 << 6);
      goto LABEL_33;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v19 >= v9) {
      break;
    }
    unint64_t v20 = v6[v19];
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v9) {
        break;
      }
      unint64_t v20 = v6[v11];
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v9) {
          break;
        }
        unint64_t v20 = v6[v11];
        if (!v20)
        {
          int64_t v21 = v19 + 3;
          if (v21 >= v9) {
            break;
          }
          unint64_t v20 = v6[v21];
          if (!v20)
          {
            while (1)
            {
              int64_t v11 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_40;
              }
              if (v11 >= v9) {
                goto LABEL_34;
              }
              unint64_t v20 = v6[v11];
              ++v21;
              if (v20) {
                goto LABEL_32;
              }
            }
          }
          int64_t v11 = v21;
        }
      }
    }
LABEL_32:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_33:
    char v26 = *(unsigned char *)(*(void *)(v2 + 48) + v18);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v14 = v12 & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v22 = 0;
    unint64_t v23 = (unint64_t)(63 - v13) >> 6;
    do
    {
      if (++v15 == v23 && (v22 & 1) != 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        JUMPOUT(0x25C37B954);
      }
      BOOL v24 = v15 == v23;
      if (v15 == v23) {
        unint64_t v15 = 0;
      }
      v22 |= v24;
      uint64_t v25 = *(void *)(v10 + 8 * v15);
    }
    while (v25 == -1);
    unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
LABEL_8:
    *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(unsigned char *)(*(void *)(v4 + 48) + v16) = v26;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  swift_release();
  Swift::String v1 = v0;
  uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
  if (v27 > 63) {
    bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v6 = -1 << v27;
  }
  *(void *)(v2 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *Swift::String v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  void *v29;
  char v30[72];

  Swift::String v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MaterialXTarget>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v28 = v0;
    uint64_t v29 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    unint64_t v8 = (unint64_t)(v5 + 63) >> 6;
    int64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        uint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v11 << 6);
      }
      else
      {
        unint64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8) {
          goto LABEL_33;
        }
        unint64_t v16 = v29[v15];
        ++v11;
        if (!v16)
        {
          int64_t v11 = v15 + 1;
          if (v15 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v16 = v29[v11];
          if (!v16)
          {
            int64_t v11 = v15 + 2;
            if (v15 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v16 = v29[v11];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                Swift::String v1 = v28;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero(v29, ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v29 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v29[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v11 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v29[v11];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      unint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      int64_t v19 = *(void *)(v18 + 32);
      swift_retain();
      specialized Optional<A>.hash(into:)((uint64_t)v30, v19);
      swift_release();
      uint64_t result = Hasher._finalize()();
      unint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      int64_t v21 = result & ~v20;
      char v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) != 0)
      {
        Swift::Int v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        BOOL v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v25 = v22 == v24;
          if (v22 == v24) {
            char v22 = 0;
          }
          v23 |= v25;
          char v26 = *(void *)(v9 + 8 * v22);
        }
        while (v26 == -1);
        Swift::Int v12 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *Swift::String v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  Swift::String v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    unint64_t v8 = (unint64_t)(v5 + 63) >> 6;
    int64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        unint64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              unint64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                Swift::String v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      unint64_t v20 = *v19;
      int64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      char v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      BOOL v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        Swift::Int v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        char v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            BOOL v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        Swift::Int v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *uint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *Swift::String v1 = v4;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (*(void *)(v4 + 16))
  {
    int64_t v7 = 0;
    unint64_t v8 = (void *)(v4 + 56);
    uint64_t v9 = 1 << *(unsigned char *)(v4 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v4 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }
      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v12) {
          goto LABEL_33;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_33;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_33:
                uint64_t v28 = 1 << *(unsigned char *)(v4 + 32);
                if (v28 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v8 = -1 << v28;
                }
                uint64_t v3 = v2;
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v7 >= v12) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v7 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      Swift::UInt v20 = *(void *)(*(void *)(v4 + 48) + 8 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt v25;
  int v26;
  uint64_t v27;
  void (*v28)(char *);
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  Swift::UInt v42;
  char v43[72];

  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    int64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    long long v38 = (void *)(v4 + 56);
    if (v7 < 64) {
      unint64_t v8 = ~(-1 << v7);
    }
    else {
      unint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v4 + 56);
    unint64_t v37 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    Swift::UInt v39 = v4;
    while (1)
    {
      if (v9)
      {
        Swift::Int v40 = (v9 - 1) & v9;
        uint64_t v41 = v12;
        unint64_t v15 = __clz(__rbit64(v9)) | (v12 << 6);
      }
      else
      {
        unint64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v16 >= v37) {
          goto LABEL_36;
        }
        int64_t v17 = v38[v16];
        unint64_t v18 = v12 + 1;
        if (!v17)
        {
          unint64_t v18 = v12 + 2;
          if (v12 + 2 >= v37) {
            goto LABEL_36;
          }
          int64_t v17 = v38[v18];
          if (!v17)
          {
            unint64_t v18 = v12 + 3;
            if (v12 + 3 >= v37) {
              goto LABEL_36;
            }
            int64_t v17 = v38[v18];
            if (!v17)
            {
              int64_t v19 = v12 + 4;
              if (v12 + 4 >= v37)
              {
LABEL_36:
                swift_release();
                uint64_t v3 = v2;
                unint64_t v36 = 1 << *(unsigned char *)(v4 + 32);
                if (v36 > 63) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  uint64_t *v38 = -1 << v36;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              int64_t v17 = v38[v19];
              if (!v17)
              {
                while (1)
                {
                  unint64_t v18 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_42;
                  }
                  if (v18 >= v37) {
                    goto LABEL_36;
                  }
                  int64_t v17 = v38[v18];
                  ++v19;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v18 = v12 + 4;
            }
          }
        }
LABEL_23:
        Swift::Int v40 = (v17 - 1) & v17;
        uint64_t v41 = v18;
        unint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
      }
      Swift::UInt v20 = *(void *)(v4 + 48) + 56 * v15;
      uint64_t v21 = *(void *)v20;
      unint64_t v22 = *(void *)(v20 + 8);
      unint64_t v23 = *(void *)(v20 + 16);
      char v24 = *(void *)(v20 + 24);
      unint64_t v25 = *(void *)(v20 + 32);
      BOOL v26 = *(unsigned __int8 *)(v20 + 40);
      unint64_t v42 = *(void *)(v20 + 48);
      uint64_t v27 = v6;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      uint64_t v28 = *(void (**)(char *))(*(void *)v22 + 120);
      swift_retain();
      v28(v43);
      swift_release();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v26 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v25);
      }
      uint64_t v6 = v27;
      Hasher._combine(_:)(v42);
      uint64_t result = Hasher._finalize()();
      uint64_t v29 = -1 << *(unsigned char *)(v27 + 32);
      uint64_t v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v10 + 8 * (v30 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v30) & ~*(void *)(v10 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          char v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v10 + 8 * v31);
        }
        while (v35 == -1);
        uint64_t v13 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      unint64_t v14 = *(void *)(v27 + 48) + 56 * v13;
      *(void *)unint64_t v14 = v21;
      *(void *)(v14 + 8) = v22;
      uint64_t v4 = v39;
      *(void *)(v14 + 16) = v23;
      *(void *)(v14 + 24) = v24;
      *(void *)(v14 + 32) = v25;
      *(unsigned char *)(v14 + 40) = v26;
      *(void *)(v14 + 48) = v42;
      ++*(void *)(v6 + 16);
      uint64_t v9 = v40;
      int64_t v12 = v41;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v6;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a1 + 32);
  swift_retain();
  specialized Optional<A>.hash(into:)((uint64_t)v6, v4);
  swift_release();
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  char v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if (a3)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v7 > v6)
      {
        unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
        goto LABEL_34;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v8 = *v3;
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    unint64_t result = Hasher._finalize()();
    uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
    a2 = result & ~v9;
    if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v10 = ~v9;
      while (2)
      {
        unint64_t v11 = 0xE400000000000000;
        uint64_t v12 = 1701736302;
        switch(*(unsigned char *)(*(void *)(v8 + 48) + a2))
        {
          case 1:
            unint64_t v11 = 0xE700000000000000;
            uint64_t v12 = 0x7972616D6D7573;
            break;
          case 2:
            unint64_t v11 = 0xE700000000000000;
            uint64_t v12 = 0x65766968637261;
            break;
          case 3:
            unint64_t v11 = 0xE300000000000000;
            uint64_t v12 = 7630692;
            break;
          case 4:
            uint64_t v12 = 0x62694C6C6174656DLL;
            unint64_t v11 = 0xEC00000079726172;
            break;
          case 5:
            uint64_t v12 = 0x6E69686374697473;
            unint64_t v11 = 0xEE00687061724767;
            break;
          case 6:
            uint64_t v12 = 0x446C616D696E696DLL;
            unint64_t v11 = 0xEA0000000000746FLL;
            break;
          default:
            break;
        }
        unint64_t v13 = 0xE400000000000000;
        uint64_t v14 = 1701736302;
        switch(v5)
        {
          case 1:
            unint64_t v13 = 0xE700000000000000;
            if (v12 != 0x7972616D6D7573) {
              goto LABEL_29;
            }
            goto LABEL_28;
          case 2:
            unint64_t v13 = 0xE700000000000000;
            if (v12 != 0x65766968637261) {
              goto LABEL_29;
            }
            goto LABEL_28;
          case 3:
            unint64_t v13 = 0xE300000000000000;
            if (v12 != 7630692) {
              goto LABEL_29;
            }
            goto LABEL_28;
          case 4:
            unint64_t v13 = 0xEC00000079726172;
            if (v12 != 0x62694C6C6174656DLL) {
              goto LABEL_29;
            }
            goto LABEL_28;
          case 5:
            uint64_t v14 = 0x6E69686374697473;
            unint64_t v13 = 0xEE00687061724767;
            goto LABEL_27;
          case 6:
            unint64_t v13 = 0xEA0000000000746FLL;
            if (v12 != 0x446C616D696E696DLL) {
              goto LABEL_29;
            }
            goto LABEL_28;
          default:
LABEL_27:
            if (v12 != v14) {
              goto LABEL_29;
            }
LABEL_28:
            if (v11 == v13) {
              goto LABEL_37;
            }
LABEL_29:
            char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            unint64_t result = swift_bridgeObjectRelease();
            if (v15) {
              goto LABEL_38;
            }
            a2 = (a2 + 1) & v10;
            if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              break;
            }
            continue;
        }
        break;
      }
    }
  }
LABEL_34:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v16 + 48) + a2) = v5;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18)
  {
    __break(1u);
LABEL_37:
    swift_bridgeObjectRelease_n();
LABEL_38:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x25C37CAF0);
  }
  *(void *)(v16 + 16) = v19;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  uint64_t v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unsigned char v21[72];

  uint64_t v4 = v3;
  unint64_t v6 = (void *)result;
  unint64_t v7 = *(void *)(*v3 + 16);
  uint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = v6[4];
  swift_retain();
  specialized Optional<A>.hash(into:)((uint64_t)v21, v10);
  swift_release();
  unint64_t result = Hasher._finalize()();
  unint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v11;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v12 = (void *)swift_retain();
    unint64_t v13 = specialized static MaterialXTarget.== infix(_:_:)(v12, v6);
    unint64_t result = swift_release();
    if (v13)
    {
LABEL_13:
      type metadata accessor for MaterialXTarget();
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        char v15 = (void *)swift_retain();
        uint64_t v16 = specialized static MaterialXTarget.== infix(_:_:)(v15, v6);
        unint64_t result = swift_release();
        if (v16) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v17 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v17 + 48) + 8 * a2) = v6;
  BOOL v18 = *(void *)(v17 + 16);
  uint64_t v19 = __OFADD__(v18, 1);
  Swift::UInt v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(v17 + 16) = v20;
  }
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  char v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    char v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        BOOL v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3, uint64_t *a4)
{
  Swift::UInt v6 = result;
  unint64_t v7 = *(void *)(*v4 + 16);
  unint64_t v8 = *(void *)(*v4 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v9, a4);
  }
  else
  {
    if (v8 > v7)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()(a4);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v9, a4);
  }
  uint64_t v10 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v6);
  unint64_t result = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v10 + 32);
  a2 = result & ~v11;
  if ((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v12 = *(void *)(v10 + 48);
    if (*(void *)(v12 + 8 * a2) == v6)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v12 + 8 * a2) == v6) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v6;
  uint64_t v15 = *(void *)(v14 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

{
  uint64_t *v4;
  Swift::Int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  uint64_t v12;
  void (*v13)(unsigned char *);
  uint64_t v14;
  uint64_t v15;
  Swift::UInt v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  char v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  long long v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  int v37;
  uint64_t *v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unsigned char v45[80];

  Swift::UInt v6 = result;
  unint64_t v7 = *(void *)(*v4 + 16);
  unint64_t v8 = *(void *)(*v4 + 24);
  Swift::UInt v39 = result;
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_35;
  }
  uint64_t v9 = v7 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v9, a4);
  }
  else
  {
    if (v8 > v7)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()(a4);
      goto LABEL_35;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v9, a4);
  }
  uint64_t v10 = *v4;
  Hasher.init(_seed:)();
  uint64_t v11 = *(void *)v6;
  Hasher._combine(_:)(*(void *)v6);
  uint64_t v12 = *(void *)(v6 + 8);
  uint64_t v13 = *(void (**)(unsigned char *))(*(void *)v12 + 120);
  swift_retain();
  v13(v45);
  unint64_t v42 = v12;
  swift_release();
  uint64_t v14 = *(void *)(v6 + 16);
  uint64_t v15 = *(void *)(v6 + 24);
  swift_bridgeObjectRetain();
  Swift::Int v40 = v14;
  String.hash(into:)();
  swift_bridgeObjectRelease();
  BOOL v16 = *(void *)(v6 + 32);
  unint64_t v37 = *(unsigned __int8 *)(v6 + 40);
  if (v37 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
  }
  unint64_t v36 = *(void *)(v6 + 48);
  Hasher._combine(_:)(v36);
  unint64_t result = Hasher._finalize()();
  uint64_t v17 = -1 << *(unsigned char *)(v10 + 32);
  a2 = result & ~v17;
  BOOL v18 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v35 = v16;
    uint64_t v19 = ~v17;
    do
    {
      uint64_t v20 = *(void *)(v10 + 48) + 56 * a2;
      if (*(void *)v20 != v11) {
        goto LABEL_14;
      }
      uint64_t v21 = v18;
      uint64_t v22 = *(void *)(v20 + 16);
      BOOL v23 = *(void *)(v20 + 24);
      uint64_t v41 = *(void *)(v20 + 32);
      int v44 = *(unsigned char *)(v20 + 40);
      Swift::UInt v43 = *(void *)(v20 + 48);
      uint64_t v24 = *(uint64_t (**)(uint64_t))(**(void **)(v20 + 8) + 128);
      swift_retain();
      swift_bridgeObjectRetain();
      if ((v24(v42) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        unint64_t result = swift_release();
        BOOL v18 = v21;
        goto LABEL_14;
      }
      if (v22 == v40 && v23 == v15)
      {
        swift_bridgeObjectRelease();
        unint64_t result = swift_release();
        BOOL v18 = v21;
        if ((v44 & 1) == 0) {
          goto LABEL_28;
        }
      }
      else
      {
        BOOL v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        unint64_t result = swift_release();
        BOOL v18 = v21;
        if ((v26 & 1) == 0) {
          goto LABEL_14;
        }
        if ((v44 & 1) == 0)
        {
LABEL_28:
          if ((v37 & 1) == 0 && v41 == v35 && v43 == v36) {
            goto LABEL_34;
          }
          goto LABEL_14;
        }
      }
      uint64_t v27 = v37;
      if (v43 != v36) {
        uint64_t v27 = 0;
      }
      if (v27)
      {
LABEL_34:
        unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        break;
      }
LABEL_14:
      a2 = (a2 + 1) & v19;
    }
    while (((*(void *)(v18 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_35:
  uint64_t v29 = *v38;
  *(void *)(*v38 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v30 = *(void *)(v29 + 48) + 56 * a2;
  uint64_t v31 = *(_OWORD *)(v39 + 16);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v39;
  *(_OWORD *)(v30 + 16) = v31;
  *(_OWORD *)(v30 + 32) = *(_OWORD *)(v39 + 32);
  *(void *)(v30 + 48) = *(void *)(v39 + 48);
  uint64_t v32 = *(void *)(v29 + 16);
  uint64_t v33 = __OFADD__(v32, 1);
  char v34 = v32 + 1;
  if (v33) {
    __break(1u);
  }
  else {
    *(void *)(v29 + 16) = v34;
  }
  return result;
}

void *specialized _NativeSet.copy()()
{
  Swift::String v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<DebugConfig.Group>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *Swift::String v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  Swift::String v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MaterialXTarget>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *Swift::String v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t result = (void *)swift_retain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  Swift::String v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *Swift::String v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    int64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()((uint64_t *)&demangling cache variable for type metadata for _SetStorage<FunctionNodeID>);
}

void *specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    uint64_t v27 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v14) {
      goto LABEL_28;
    }
    uint64_t v28 = *(void *)(v7 + 8 * v27);
    ++v10;
    if (!v28)
    {
      int64_t v10 = v27 + 1;
      if (v27 + 1 >= v14) {
        goto LABEL_28;
      }
      uint64_t v28 = *(void *)(v7 + 8 * v10);
      if (!v28)
      {
        int64_t v10 = v27 + 2;
        if (v27 + 2 >= v14) {
          goto LABEL_28;
        }
        uint64_t v28 = *(void *)(v7 + 8 * v10);
        if (!v28) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v28 - 1) & v28;
    unint64_t v16 = __clz(__rbit64(v28)) + (v10 << 6);
LABEL_12:
    int64_t v17 = 56 * v16;
    unint64_t v18 = *(void *)(v3 + 48) + v17;
    uint64_t v20 = *(void *)v18;
    int64_t v19 = *(void *)(v18 + 8);
    uint64_t v21 = *(void *)(v18 + 16);
    uint64_t v22 = *(void *)(v18 + 24);
    BOOL v23 = *(void *)(v18 + 32);
    uint64_t v24 = *(unsigned char *)(v18 + 40);
    unint64_t v25 = *(void *)(v18 + 48);
    BOOL v26 = *(void *)(v5 + 48) + v17;
    *(void *)BOOL v26 = v20;
    *(void *)(v26 + 8) = v19;
    *(void *)(v26 + 16) = v21;
    *(void *)(v26 + 24) = v22;
    *(void *)(v26 + 32) = v23;
    *(unsigned char *)(v26 + 40) = v24;
    *(void *)(v26 + 48) = v25;
    swift_retain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v29 = v27 + 3;
  if (v29 >= v14) {
    goto LABEL_28;
  }
  uint64_t v28 = *(void *)(v7 + 8 * v29);
  if (v28)
  {
    int64_t v10 = v29;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    uint64_t v28 = *(void *)(v7 + 8 * v10);
    ++v29;
    if (v28) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  Swift::String v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<DebugConfig.Group>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_36;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v11 << 6);
      goto LABEL_33;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_37;
    }
    if (v19 >= v9) {
      break;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v9) {
        break;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v11);
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v9) {
          break;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v11);
        if (!v20)
        {
          int64_t v21 = v19 + 3;
          if (v21 >= v9) {
            break;
          }
          unint64_t v20 = *(void *)(v6 + 8 * v21);
          if (!v20)
          {
            while (1)
            {
              int64_t v11 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_38;
              }
              if (v11 >= v9) {
                goto LABEL_34;
              }
              unint64_t v20 = *(void *)(v6 + 8 * v11);
              ++v21;
              if (v20) {
                goto LABEL_32;
              }
            }
          }
          int64_t v11 = v21;
        }
      }
    }
LABEL_32:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_33:
    char v26 = *(unsigned char *)(*(void *)(v2 + 48) + v18);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v14 = v12 & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v22 = 0;
    unint64_t v23 = (unint64_t)(63 - v13) >> 6;
    do
    {
      if (++v15 == v23 && (v22 & 1) != 0)
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        JUMPOUT(0x25C37DF4CLL);
      }
      BOOL v24 = v15 == v23;
      if (v15 == v23) {
        unint64_t v15 = 0;
      }
      v22 |= v24;
      uint64_t v25 = *(void *)(v10 + 8 * v15);
    }
    while (v25 == -1);
    unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
LABEL_8:
    *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(unsigned char *)(*(void *)(v4 + 48) + v16) = v26;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  uint64_t result = swift_release_n();
  Swift::String v1 = v0;
LABEL_36:
  *Swift::String v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  int64_t v28;
  char v29[72];

  Swift::String v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MaterialXTarget>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *Swift::String v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v27 = v0;
  uint64_t v28 = (unint64_t)(v5 + 63) >> 6;
  int64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      uint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v28) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v28) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v28) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    unint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    swift_retain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    int64_t v19 = *(void *)(v18 + 32);
    swift_retain();
    specialized Optional<A>.hash(into:)((uint64_t)v29, v19);
    swift_release();
    uint64_t result = Hasher._finalize()();
    unint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    int64_t v21 = result & ~v20;
    char v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) != 0)
    {
      Swift::Int v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v23 = 0;
      BOOL v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v25 = v22 == v24;
        if (v22 == v24) {
          char v22 = 0;
        }
        v23 |= v25;
        char v26 = *(void *)(v9 + 8 * v22);
      }
      while (v26 == -1);
      Swift::Int v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v28)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    Swift::String v1 = v27;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v28) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  Swift::String v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *Swift::String v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  uint64_t v29 = (unint64_t)(v5 + 63) >> 6;
  int64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    unint64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v20 = *v19;
    int64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    char v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    BOOL v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      Swift::Int v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      char v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v27 = v24 == v26;
        if (v24 == v26) {
          BOOL v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      Swift::Int v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  unint64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    Swift::String v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v3 = v6;
    return result;
  }
  int64_t v7 = 0;
  uint64_t v8 = v4 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(v4 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v4 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_24;
    }
    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v12) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_24:
    Swift::UInt v20 = *(void *)(*(void *)(v4 + 48) + 8 * v16);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v20);
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v3 = v2;
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    int64_t v7 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt v25;
  int v26;
  void (*v27)(char *);
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  Swift::UInt v39;
  uint64_t v40;
  int64_t v41;
  Swift::UInt v42;
  char v43[72];

  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    uint64_t *v3 = v6;
    return result;
  }
  int64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v35 = v2;
  unint64_t v36 = v4 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  uint64_t v9 = v8 & *(void *)(v4 + 56);
  unint64_t v37 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  long long v38 = v4;
  while (1)
  {
    if (v9)
    {
      Swift::Int v40 = (v9 - 1) & v9;
      uint64_t v41 = v12;
      unint64_t v15 = __clz(__rbit64(v9)) | (v12 << 6);
      goto LABEL_24;
    }
    unint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v37) {
      goto LABEL_36;
    }
    int64_t v17 = *(void *)(v36 + 8 * v16);
    unint64_t v18 = v12 + 1;
    if (!v17)
    {
      unint64_t v18 = v12 + 2;
      if (v12 + 2 >= v37) {
        goto LABEL_36;
      }
      int64_t v17 = *(void *)(v36 + 8 * v18);
      if (!v17)
      {
        unint64_t v18 = v12 + 3;
        if (v12 + 3 >= v37) {
          goto LABEL_36;
        }
        int64_t v17 = *(void *)(v36 + 8 * v18);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    Swift::Int v40 = (v17 - 1) & v17;
    uint64_t v41 = v18;
    unint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_24:
    Swift::UInt v20 = *(void *)(v4 + 48) + 56 * v15;
    unint64_t v22 = *(void *)v20;
    uint64_t v21 = *(void *)(v20 + 8);
    char v24 = *(void *)(v20 + 16);
    unint64_t v23 = *(void *)(v20 + 24);
    unint64_t v25 = *(void *)(v20 + 32);
    BOOL v26 = *(unsigned __int8 *)(v20 + 40);
    unint64_t v42 = *(void *)(v20 + 48);
    Hasher.init(_seed:)();
    Swift::UInt v39 = v22;
    Hasher._combine(_:)(v22);
    uint64_t v27 = *(void (**)(char *))(*(void *)v21 + 120);
    swift_retain_n();
    swift_bridgeObjectRetain();
    v27(v43);
    swift_release();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v26 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v25);
    }
    Hasher._combine(_:)(v42);
    uint64_t result = Hasher._finalize()();
    uint64_t v28 = -1 << *(unsigned char *)(v6 + 32);
    uint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v10 + 8 * (v29 >> 6))) != 0)
    {
      uint64_t v13 = __clz(__rbit64((-1 << v29) & ~*(void *)(v10 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v31 = 0;
      uint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0;
        }
        v31 |= v33;
        char v34 = *(void *)(v10 + 8 * v30);
      }
      while (v34 == -1);
      uint64_t v13 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    unint64_t v14 = *(void *)(v6 + 48) + 56 * v13;
    uint64_t v9 = v40;
    *(void *)unint64_t v14 = v39;
    *(void *)(v14 + 8) = v21;
    *(void *)(v14 + 16) = v24;
    *(void *)(v14 + 24) = v23;
    *(void *)(v14 + 32) = v25;
    *(unsigned char *)(v14 + 40) = v26;
    *(void *)(v14 + 48) = v42;
    ++*(void *)(v6 + 16);
    uint64_t v4 = v38;
    int64_t v12 = v41;
  }
  int64_t v19 = v12 + 4;
  if (v12 + 4 >= v37)
  {
LABEL_36:
    uint64_t result = swift_release_n();
    uint64_t v3 = v35;
    goto LABEL_38;
  }
  int64_t v17 = *(void *)(v36 + 8 * v19);
  if (v17)
  {
    unint64_t v18 = v12 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v18 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v18 >= v37) {
      goto LABEL_36;
    }
    int64_t v17 = *(void *)(v36 + 8 * v18);
    ++v19;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  uint64_t v14 = (uint64_t)&v5[7 * a1 + 4];
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v16 = v5[2];
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_26;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v14 + 56);
    int64_t v19 = (char *)&v5[7 * a2 + 4];
    if ((char *)(v14 + 56) != v19 || result >= &v19[56 * v18]) {
      uint64_t result = (char *)memmove(result, v19, 56 * v18);
    }
    uint64_t v20 = v5[2];
    BOOL v17 = __OFADD__(v20, v9);
    uint64_t v21 = v20 + v9;
    if (!v17)
    {
      v5[2] = v21;
LABEL_20:
      uint64_t v22 = *(void *)(a3 + 8);
      *(void *)uint64_t v14 = *(void *)a3;
      *(void *)(v14 + 8) = v22;
      long long v23 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v14 + 16) = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v14 + 32) = v23;
      *(void *)(v14 + 48) = *(void *)(a3 + 48);
      *(void *)uint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1, v5);
    uint64_t v5 = result;
  }
  uint64_t v14 = &v5[a1 + 4];
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v15 = v5[2];
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_26;
  }
  if ((v17 & 0x8000000000000000) == 0)
  {
    uint64_t result = v14 + 1;
    uint64_t v18 = &v5[a2 + 4];
    if (v14 + 1 != v18 || result >= &v18[v17]) {
      uint64_t result = memmove(result, v18, 8 * v17);
    }
    uint64_t v19 = v5[2];
    BOOL v16 = __OFADD__(v19, v9);
    uint64_t v20 = v19 + v9;
    if (!v16)
    {
      v5[2] = v20;
LABEL_20:
      *uint64_t v14 = a3;
      *(void *)uint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t *a1, void *a2)
{
  uint64_t v4 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(a1, a2);
  swift_release();
  uint64_t v5 = (long long *)(a2 + 2);
  if (v2)
  {
    long long v9 = *v5;
    int64_t v6 = &v9;
  }
  else
  {
    long long v8 = *v5;
    int64_t v6 = &v8;
  }
  outlined release of String((uint64_t)v6);
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  char v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  void *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;

  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = a2;
  long long v66 = *a2;
  swift_retain();
  uint64_t v5 = 0;
  int64_t v6 = 136;
  uint64_t v58 = v3;
  while (1)
  {
    int64_t v7 = v2 + v6;
    if (*(void *)(v2 + v6 - 104) != v66) {
      goto LABEL_4;
    }
    long long v8 = *(void *)(v7 - 88);
    long long v9 = *(void *)(v7 - 80);
    uint64_t v64 = *(unsigned char *)(v7 - 64);
    uint64_t v60 = *(void *)(v7 - 72);
    char v63 = *(void *)(v7 - 56);
    int64_t v10 = v4[1];
    unint64_t v11 = v4;
    int64_t v12 = *(uint64_t (**)(uint64_t))(**(void **)(v7 - 96) + 128);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v57 = v10;
    if ((v12(v10) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v3 = v58;
      uint64_t v4 = v11;
      goto LABEL_4;
    }
    int64_t v13 = v11[3];
    uint64_t v14 = v11;
    uint64_t v15 = v11[2];
    if (v8 == v15 && v9 == v13)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v3 = v58;
      uint64_t v4 = v14;
    }
    else
    {
      uint64_t v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v3 = v58;
      uint64_t v4 = v14;
      if ((v17 & 1) == 0) {
        goto LABEL_4;
      }
    }
    uint64_t v18 = v4[4];
    uint64_t v19 = *((unsigned char *)v4 + 40);
    if ((v64 & 1) == 0) {
      break;
    }
    if (*((unsigned char *)v4 + 40)) {
      goto LABEL_21;
    }
LABEL_4:
    ++v5;
    v6 += 56;
    if (v3 == v5)
    {
      swift_release();
      return *(void *)(v2 + 16);
    }
  }
  if (v60 == v18) {
    uint64_t v20 = *((unsigned char *)v4 + 40);
  }
  else {
    uint64_t v20 = 1;
  }
  if (v20) {
    goto LABEL_4;
  }
LABEL_21:
  if (v63 != v4[6]) {
    goto LABEL_4;
  }
  uint64_t result = swift_release();
  uint64_t v22 = *(void *)(v2 + 16);
  if (v22 - 1 == v5) {
    return v5;
  }
  long long v23 = v5 + 1;
  uint64_t v45 = v13;
  uint64_t v46 = v15;
  int v44 = v18;
  uint64_t v47 = v19;
  while (v23 < v22)
  {
    char v24 = (void *)(v2 + v6);
    if (*(void *)(v2 + v6 - 48) == v66)
    {
      unint64_t v25 = *(v24 - 4);
      BOOL v26 = *(v24 - 3);
      uint64_t v54 = *(v24 - 2);
      uint64_t v61 = *((unsigned char *)v24 - 8);
      char v59 = *v24;
      uint64_t v27 = *(uint64_t (**)(uint64_t))(*(void *)*(v24 - 5) + 128);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v27(v57))
      {
        if (v25 == v46 && v26 == v45)
        {
          swift_bridgeObjectRelease();
          uint64_t result = swift_release();
          uint64_t v30 = v44;
          if ((v61 & 1) == 0)
          {
LABEL_52:
            if ((v19 & 1) == 0 && v54 == v30 && v59 == v63) {
              goto LABEL_49;
            }
            goto LABEL_39;
          }
          goto LABEL_33;
        }
        uint64_t v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = swift_release();
        uint64_t v30 = v44;
        if (v29)
        {
          if ((v61 & 1) == 0) {
            goto LABEL_52;
          }
LABEL_33:
          if (v59 == v63) {
            uint64_t v31 = v19;
          }
          else {
            uint64_t v31 = 0;
          }
          if (v31) {
            goto LABEL_49;
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_release();
      }
    }
LABEL_39:
    if (v23 != v5)
    {
      if ((v5 & 0x8000000000000000) != 0) {
        goto LABEL_61;
      }
      uint64_t v32 = *(void *)(v2 + 16);
      if (v5 >= v32) {
        goto LABEL_62;
      }
      if (v23 >= v32) {
        goto LABEL_63;
      }
      uint64_t v33 = v2 + 32 + 56 * v5;
      char v34 = *(void *)v33;
      unint64_t v36 = *(void *)(v33 + 16);
      uint64_t v35 = *(void *)(v33 + 24);
      Swift::UInt v50 = *(void *)(v33 + 32);
      uint64_t v49 = *(unsigned char *)(v33 + 40);
      uint64_t v48 = *(void *)(v33 + 48);
      unint64_t v37 = *(v24 - 5);
      long long v65 = *(v24 - 6);
      long long v38 = *(v24 - 3);
      long long v62 = *(v24 - 4);
      Swift::UInt v39 = *(v24 - 2);
      Swift::Int v40 = *((unsigned char *)v24 - 8);
      char v52 = *(void *)(v2 + v6);
      uint64_t v53 = v39;
      char v51 = *(void *)(v33 + 8);
      swift_retain();
      swift_bridgeObjectRetain();
      unint64_t v55 = v37;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
        uint64_t v2 = result;
      }
      uint64_t v19 = v47;
      if (v5 >= *(void *)(v2 + 16)) {
        goto LABEL_64;
      }
      uint64_t v41 = v2 + 56 * v5;
      *(void *)(v41 + 32) = v65;
      *(void *)(v41 + 40) = v55;
      *(void *)(v41 + 48) = v62;
      *(void *)(v41 + 56) = v38;
      *(void *)(v41 + 64) = v53;
      *(unsigned char *)(v41 + 72) = v40;
      *(void *)(v41 + 80) = v52;
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      if (v23 >= *(void *)(v2 + 16)) {
        goto LABEL_65;
      }
      unint64_t v42 = (void *)(v2 + v6);
      *(v42 - 6) = v34;
      *(v42 - 5) = v51;
      *(v42 - 4) = v36;
      *(v42 - 3) = v35;
      *(v42 - 2) = v50;
      *((unsigned char *)v42 - 8) = v49;
      *unint64_t v42 = v48;
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      *a1 = v2;
    }
    if (__OFADD__(v5++, 1)) {
      goto LABEL_60;
    }
LABEL_49:
    ++v23;
    uint64_t v22 = *(void *)(v2 + 16);
    v6 += 56;
    if (v23 == v22) {
      return v5;
    }
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2 = 0;
  unint64_t v3 = 0;
  unint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(result + 16);
  uint64_t v6 = result + 32;
  while (1)
  {
    if (v3 == v4)
    {
      uint64_t v7 = 0;
      unint64_t v8 = *(void *)(a2 + 16);
      goto LABEL_6;
    }
    if (v3 >= v4) {
      break;
    }
    uint64_t v7 = *(void *)(a2 + 32 + 8 * v3);
    unint64_t v8 = v3 + 1;
LABEL_6:
    uint64_t result = v2 == v5;
    if (v2 == v5)
    {
      uint64_t v9 = 0;
      unint64_t v10 = v5;
      if (v3 == v4) {
        return result;
      }
    }
    else
    {
      if (v2 >= v5) {
        goto LABEL_15;
      }
      uint64_t v9 = *(void *)(v6 + 8 * v2);
      unint64_t v10 = v2 + 1;
      if (v3 == v4) {
        return result;
      }
    }
    uint64_t result = 0;
    if (v2 != v5)
    {
      unint64_t v2 = v10;
      unint64_t v3 = v8;
      if (v7 == v9) {
        continue;
      }
    }
    return result;
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized static ShaderGraphNode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static NodePersonality.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 8), *(void *)(a2 + 8)) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 16), *(void *)(a2 + 16)) & 1) == 0
    || *(void *)(a1 + 24) != *(void *)(a2 + 24))
  {
    return 0;
  }
  char v4 = *(unsigned char *)(a2 + 40);
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  return 1;
}

uint64_t specialized static Graph.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if ((specialized Sequence<>.elementsEqual<A>(_:)(*(void *)(a2 + 8), *(void *)(a1 + 8)) & 1) == 0
    || (specialized static ContiguousArray<A>.== infix(_:_:)(v4, v5) & 1) == 0)
  {
    goto LABEL_15;
  }
  BOOL v6 = *(void *)(a1 + 24) == *(void *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32);
  if (v6 || (char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), v8 = 0, (v7 & 1) != 0))
  {
    if (*(void *)(a1 + 40) == *(void *)(a2 + 40)
      && (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 48), *(void *)(a2 + 48)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 56), *(void *)(a2 + 56)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 64), *(void *)(a2 + 64)) & 1) != 0
      && *(void *)(a1 + 72) == *(void *)(a2 + 72))
    {
      long long v9 = *(_OWORD *)(a1 + 96);
      long long v20 = *(_OWORD *)(a1 + 80);
      v21[0] = v9;
      *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)(a1 + 105);
      long long v10 = *(_OWORD *)(a2 + 96);
      long long v18 = *(_OWORD *)(a2 + 80);
      v19[0] = v10;
      *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)(a2 + 105);
      if (specialized static ShaderGraphNode.== infix(_:_:)((uint64_t)&v20, (uint64_t)&v18))
      {
        long long v11 = *(_OWORD *)(a1 + 144);
        long long v16 = *(_OWORD *)(a1 + 128);
        v17[0] = v11;
        *(_OWORD *)((char *)v17 + 9) = *(_OWORD *)(a1 + 153);
        long long v12 = *(_OWORD *)(a2 + 144);
        long long v14 = *(_OWORD *)(a2 + 128);
        v15[0] = v12;
        *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)(a2 + 153);
        char v8 = specialized static ShaderGraphNode.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v14);
        return v8 & 1;
      }
    }
LABEL_15:
    char v8 = 0;
  }
  return v8 & 1;
}

BOOL specialized static Edge.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  char v5 = *(unsigned char *)(a1 + 40);
  uint64_t v23 = *(void *)(a1 + 32);
  uint64_t v25 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v22 = *(void *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a1 + 16);
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 128))(*(void *)(a2 + 8)) & 1) == 0) {
    return 0;
  }
  if (v10 == v9 && v4 == v6 || (char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v11 & 1) != 0))
  {
    BOOL result = 0;
    if (v5)
    {
      if ((v7 & 1) == 0) {
        return result;
      }
    }
    else if ((v7 & 1) != 0 || v23 != v22)
    {
      return result;
    }
    if (v25 != v8) {
      return result;
    }
    if (*(void *)(a1 + 56) == *(void *)(a2 + 56))
    {
      uint64_t v13 = *(void *)(a1 + 80);
      char v14 = *(unsigned char *)(a1 + 96);
      uint64_t v24 = *(void *)(a1 + 88);
      uint64_t v26 = *(void *)(a1 + 104);
      uint64_t v15 = *(void *)(a2 + 80);
      uint64_t v16 = *(void *)(a2 + 88);
      char v17 = *(unsigned char *)(a2 + 96);
      uint64_t v18 = *(void *)(a2 + 104);
      uint64_t v19 = *(void *)(a2 + 64);
      uint64_t v20 = *(void *)(a2 + 72);
      uint64_t v21 = *(void *)(a1 + 72);
      if (((*(uint64_t (**)(uint64_t))(**(void **)(a1 + 64) + 128))(v19) & 1) != 0
        && (v21 == v20 && v13 == v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if ((v14 & 1) == 0)
        {
          if ((v17 & 1) != 0 || v24 != v16) {
            return 0;
          }
          return v26 == v18;
        }
        if (v17) {
          return v26 == v18;
        }
      }
    }
    return 0;
  }
  return result;
}

BOOL specialized static Input.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2
    || ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 128))(*(void *)(a2 + 8)) & 1) == 0)
  {
    return 0;
  }
  BOOL v4 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    char v7 = *(unsigned char *)(a2 + 40);
    if (*(unsigned char *)(a1 + 40))
    {
      if (!*(unsigned char *)(a2 + 40)) {
        return 0;
      }
    }
    else
    {
      if (*(void *)(a1 + 32) != *(void *)(a2 + 32)) {
        char v7 = 1;
      }
      if (v7) {
        return 0;
      }
    }
    return *(void *)(a1 + 48) == *(void *)(a2 + 48);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(uint64_t a1, uint64_t *a2)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(a1, a2);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *__return_ptr, uint64_t, long long *))
{
  uint64_t v26 = *(void *)(a3 + 16);
  if (!v26) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  uint64_t v25 = *(void *)(a2 + 16);
  swift_retain();
  swift_retain();
  uint64_t result = swift_retain();
  uint64_t v7 = 0;
  uint64_t v29 = (void *)MEMORY[0x263F8EE78];
  uint64_t v8 = 32;
  uint64_t v23 = v4;
  uint64_t v24 = v5;
  while (v25 != v7)
  {
    uint64_t v10 = *(void *)(v5 + 8 * v7 + 32);
    long long v11 = *(_OWORD *)(v4 + v8 + 16);
    long long v34 = *(_OWORD *)(v4 + v8);
    *(_OWORD *)uint64_t v35 = v11;
    *(_OWORD *)&v35[16] = *(_OWORD *)(v4 + v8 + 32);
    long long v37 = v34;
    uint64_t v12 = v11;
    outlined init with take of MetalFunctionNode?((uint64_t)&v37, (uint64_t)v39, &demangling cache variable for type metadata for _HashTable.Storage?);
    uint64_t v38 = *((void *)&v37 + 1);
    uint64_t v36 = v12;
    long long v41 = *(_OWORD *)&v35[8];
    uint64_t v13 = *(void *)&v35[24];
    outlined init with take of MetalFunctionNode?((uint64_t)&v41, (uint64_t)v43, &demangling cache variable for type metadata for _HashTable.Storage?);
    v42[0] = *((void *)&v41 + 1);
    uint64_t v40 = v13;
    outlined retain of _HashTable.Storage?((uint64_t)&v38);
    outlined retain of _HashTable.Storage?((uint64_t)&v36);
    outlined retain of _HashTable.Storage?((uint64_t)v42);
    outlined retain of _HashTable.Storage?((uint64_t)&v40);
    outlined retain of _HashTable.Storage?((uint64_t)v39);
    outlined retain of _HashTable.Storage?((uint64_t)v43);
    a4(v30, v10, &v34);
    uint64_t v14 = v30[0];
    uint64_t v15 = v30[1];
    uint64_t v16 = v30[2];
    uint64_t v17 = v30[3];
    uint64_t v18 = v30[4];
    char v19 = v31;
    outlined release of _HashTable.Storage?((uint64_t)v39);
    outlined release of _HashTable.Storage?((uint64_t)&v38);
    outlined release of _HashTable.Storage?((uint64_t)&v36);
    outlined release of _HashTable.Storage?((uint64_t)v43);
    outlined release of _HashTable.Storage?((uint64_t)v42);
    outlined release of _HashTable.Storage?((uint64_t)&v40);
    uint64_t result = outlined init with take of MetalFunctionNode?((uint64_t)v30, (uint64_t)v32, &demangling cache variable for type metadata for ShaderGraphNode?);
    if (v33)
    {
      uint64_t v28 = v16;
      uint64_t v20 = v29;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        uint64_t v20 = (void *)result;
      }
      unint64_t v22 = v20[2];
      unint64_t v21 = v20[3];
      uint64_t v29 = v20;
      if (v22 >= v21 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v20);
        uint64_t v29 = (void *)result;
      }
      v29[2] = v22 + 1;
      uint64_t v9 = &v29[6 * v22];
      v9[4] = v14;
      v9[5] = v15;
      v9[6] = v28;
      v9[7] = v17;
      v9[8] = v18;
      *((unsigned char *)v9 + 72) = v19 & 1;
    }
    ++v7;
    v8 += 48;
    uint64_t v4 = v23;
    uint64_t v5 = v24;
    if (v26 == v7)
    {
      swift_release();
      swift_release();
      swift_release();
      return (uint64_t)v29;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Graph.Adjacent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6)
  {
    uint64_t v32 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v9 = v32;
    unint64_t v10 = *(void *)(v32 + 16);
    uint64_t v11 = 16 * v10;
    int64_t v12 = v6;
    do
    {
      unint64_t v13 = *(void *)(v32 + 24);
      BOOL v14 = v10++ >= v13 >> 1;
      if (v14) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v10, 1);
      }
      *(void *)(v32 + 16) = v10;
      uint64_t v15 = v32 + v11;
      *(void *)(v15 + 32) = 0;
      *(void *)(v15 + 40) = v7;
      v11 += 16;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v10 = *(void *)(v7 + 16);
    uint64_t v9 = v7;
  }
  if (v6 != v10) {
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = specialized OrderedSet.init<A>(_:)(a2);
  uint64_t v18 = v17;
  uint64_t v19 = *(void *)(v17 + 16);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v19 != v6)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int64_t v20 = *(void *)(a1 + 16);
  if (!v20)
  {
    uint64_t result = swift_bridgeObjectRetain();
    if (!*(void *)(v7 + 16)) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
  uint64_t v31 = v16;
  swift_bridgeObjectRetain();
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  unint64_t v21 = *(void *)(v7 + 16);
  uint64_t v22 = 56 * v21 + 32;
  long long v23 = 0uLL;
  int64_t v24 = v20;
  do
  {
    unint64_t v25 = *(void *)(v7 + 24);
    BOOL v14 = v21++ >= v25 >> 1;
    if (v14)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v21, 1);
      long long v23 = 0uLL;
    }
    *(void *)(v7 + 16) = v21;
    uint64_t v26 = v7 + v22;
    *(void *)(v26 + 48) = 0;
    *(_OWORD *)(v26 + 16) = v23;
    *(_OWORD *)(v26 + 32) = v23;
    v22 += 56;
    *(_OWORD *)uint64_t v26 = v23;
    --v24;
  }
  while (v24);
  uint64_t v16 = v31;
  if (v20 != v21)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_16:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v27 = specialized OrderedSet.init<A>(_:)(a1);
  uint64_t v29 = v28;
  uint64_t v30 = *(void *)(v28 + 16);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v30 == v20)
  {
    *a3 = v16;
    a3[1] = v18;
    a3[2] = v9;
    a3[3] = v27;
    a3[4] = v29;
    a3[5] = v7;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  v54[1] = a6;
  uint64_t v58 = a5;
  unint64_t v61 = a1;
  uint64_t v56 = a7;
  swift_bridgeObjectRetain();
  uint64_t v59 = a3;
  swift_bridgeObjectRetain();
  unint64_t v55 = a4;
  outlined copy of NodePersonality(a4);
  long long v66 = (void *)MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  unint64_t v10 = v66;
  uint64_t v11 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  uint64_t v60 = a2;
  if (v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = (uint64_t *)(a2 + 48);
    do
    {
      uint64_t v14 = *(v13 - 2);
      uint64_t v15 = *(v13 - 1);
      uint64_t v16 = *v13;
      long long v66 = v10;
      unint64_t v18 = v10[2];
      unint64_t v17 = v10[3];
      swift_retain();
      swift_bridgeObjectRetain();
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        unint64_t v10 = v66;
      }
      v10[2] = v18 + 1;
      uint64_t v19 = &v10[7 * v18];
      v19[10] = v12;
      v13 += 3;
      v19[4] = -7;
      v19[5] = v16;
      v19[6] = v14;
      uint64_t v19[7] = v15;
      v19[8] = 0;
      *((unsigned char *)v19 + 72) = 1;
      ++v12;
    }
    while (v11 != v12);
  }
  swift_bridgeObjectRelease_n();
  uint64_t v57 = v54;
  long long v66 = (void *)MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v20 = (uint64_t)v66;
  uint64_t v21 = *(void *)(v59 + 16);
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v60 = v21;
  if (v21)
  {
    uint64_t v23 = 0;
    int64_t v24 = (uint64_t *)(v22 + 48);
    do
    {
      uint64_t v25 = *(v24 - 2);
      uint64_t v26 = *(v24 - 1);
      uint64_t v27 = *v24;
      long long v66 = (void *)v20;
      unint64_t v28 = *(void *)(v20 + 16);
      unint64_t v29 = *(void *)(v20 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v28 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v28 + 1, 1);
        uint64_t v20 = (uint64_t)v66;
      }
      *(void *)(v20 + 16) = v28 + 1;
      uint64_t v30 = v20 + 56 * v28;
      *(void *)(v30 + 80) = v23;
      v24 += 3;
      *(void *)(v30 + 32) = -7;
      *(void *)(v30 + 40) = v27;
      *(void *)(v30 + 48) = v25;
      *(void *)(v30 + 56) = v26;
      *(void *)(v30 + 64) = 0;
      *(unsigned char *)(v30 + 72) = 1;
      ++v23;
    }
    while (v60 != v23);
  }
  swift_bridgeObjectRelease_n();
  uint64_t v31 = *(void **)v58;
  uint64_t v32 = *(void *)(*(void *)v58 + 16);
  uint64_t v33 = v10[2];
  if (v33)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    uint64_t v36 = v10;
    do
    {
      swift_retain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew()(v36);
      }
      if (v35 >= v36[2])
      {
        __break(1u);
        goto LABEL_45;
      }
      ++v35;
      v36[v34 + 4] = v32;
      swift_bridgeObjectRelease();
      swift_release();
      v34 += 7;
    }
    while (v33 != v35);
    swift_release();
    uint64_t v37 = *(void *)(v20 + 16);
    if (!v37) {
      goto LABEL_37;
    }
    goto LABEL_18;
  }
  uint64_t v36 = v10;
  uint64_t v37 = *(void *)(v20 + 16);
  if (v37)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v38 = 0;
    unint64_t v35 = 0;
    Swift::UInt v39 = (void *)v20;
    while (1)
    {
      unint64_t v10 = *(void **)(v20 + v38 * 8 + 40);
      swift_retain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::UInt v39 = specialized _ArrayBuffer._consumeAndCreateNew()(v39);
      }
      if (v35 >= v39[2]) {
        break;
      }
      ++v35;
      v39[v38 + 4] = v32;
      swift_bridgeObjectRelease();
      swift_release();
      v38 += 7;
      if (v37 == v35)
      {
        swift_release();
        uint64_t v40 = v36[2];
        if (!v40) {
          goto LABEL_38;
        }
        goto LABEL_24;
      }
    }
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_37:
  Swift::UInt v39 = (void *)v20;
  uint64_t v40 = v36[2];
  if (v40)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    uint64_t v41 = 0;
    unint64_t v35 = 0;
    unint64_t v10 = v36;
    while (1)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      }
      if (v35 >= v10[2]) {
        break;
      }
      ++v35;
      unint64_t v42 = &v10[v41];
      v42[8] = v61;
      *((unsigned char *)v42 + 72) = 0;
      swift_bridgeObjectRelease();
      swift_release();
      v41 += 7;
      if (v40 == v35)
      {
        swift_bridgeObjectRelease();
        uint64_t v43 = v39[2];
        if (!v43) {
          goto LABEL_39;
        }
        goto LABEL_30;
      }
    }
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
    goto LABEL_41;
  }
LABEL_38:
  unint64_t v10 = v36;
  uint64_t v43 = v39[2];
  if (v43)
  {
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v44 = 0;
    unint64_t v35 = 0;
    uint64_t v36 = v39;
    while (1)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew()(v36);
      }
      if (v35 >= v36[2]) {
        goto LABEL_47;
      }
      ++v35;
      uint64_t v45 = &v36[v44];
      v45[8] = v61;
      *((unsigned char *)v45 + 72) = 0;
      swift_bridgeObjectRelease();
      swift_release();
      v44 += 7;
      if (v43 == v35)
      {
        swift_bridgeObjectRelease();
        goto LABEL_40;
      }
    }
  }
LABEL_39:
  uint64_t v36 = v39;
LABEL_40:
  unint64_t v35 = v55;
  outlined copy of NodePersonality(v55);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_48;
  }
LABEL_41:
  unint64_t v47 = v31[2];
  unint64_t v46 = v31[3];
  if (v47 >= v46 >> 1) {
    uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v46 > 1), v47 + 1, 1, v31);
  }
  v31[2] = v47 + 1;
  uint64_t v48 = &v31[6 * v47];
  v48[4] = v35;
  v48[5] = v10;
  v48[6] = v36;
  v48[7] = v32;
  unint64_t v49 = v61;
  v48[8] = v61;
  *((unsigned char *)v48 + 72) = 0;
  *(void *)uint64_t v58 = v31;
  outlined copy of NodePersonality(v35);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Graph.Adjacent.init(_:)((uint64_t)v10, (uint64_t)v36, &v62);
  uint64_t v50 = v62;
  uint64_t v51 = v64;
  outlined consume of NodePersonality(v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v66 = (void *)v50;
  long long v67 = v63;
  uint64_t v68 = v51;
  long long v69 = v65;
  uint64_t result = specialized OrderedDictionary.subscript.setter((uint64_t *)&v66, v32);
  uint64_t v53 = v56;
  unint64_t *v56 = v35;
  v53[1] = (unint64_t)v10;
  v53[2] = (unint64_t)v36;
  v53[3] = v32;
  v53[4] = v49;
  *((unsigned char *)v53 + 40) = 0;
  return result;
}

__n128 specialized Graph.init(id:label:inputs:outputs:)@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = MEMORY[0x263F8EE78];
  specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x263F8EE78]);
  uint64_t v61 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v58 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(v10);
  uint64_t v59 = v11;
  uint64_t v60 = v12;
  int64_t v13 = *(void *)(a5 + 16);
  unint64_t v45 = a5;
  if (v13)
  {
    *(void *)&long long v50 = v10;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    uint64_t v14 = (_OWORD *)(a5 + 40);
    do
    {
      uint64_t v15 = *((void *)v14 - 1);
      long long v47 = *v14;
      *(void *)&long long v50 = v10;
      unint64_t v17 = *(void *)(v10 + 16);
      unint64_t v16 = *(void *)(v10 + 24);
      swift_bridgeObjectRetain();
      swift_retain();
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v10 = v50;
      }
      uint64_t v14 = (_OWORD *)((char *)v14 + 24);
      *(void *)(v10 + 16) = v17 + 1;
      uint64_t v18 = v10 + 24 * v17;
      *(void *)(v18 + 32) = v15;
      *(_OWORD *)(v18 + 40) = v47;
      --v13;
    }
    while (v13);
  }
  uint64_t v19 = MEMORY[0x263F8EE78];
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(a1, v10, MEMORY[0x263F8EE78], 0xE000000000000010, (uint64_t)&v61, (uint64_t)&v58, &v62);
  long long v43 = v63;
  uint64_t v41 = v64;
  unint64_t v42 = v62;
  uint64_t v40 = v65;
  char v39 = v66;
  swift_bridgeObjectRelease();
  outlined init with take of NodePersonality(&v62, v77);
  uint64_t v75 = *((void *)&v63 + 1);
  uint64_t v76 = v63;
  int64_t v20 = *(void *)(a4 + 16);
  if (v20)
  {
    outlined retain of NodePersonality(v77);
    outlined retain of [Input]((uint64_t)&v76);
    outlined retain of [Input]((uint64_t)&v75);
    *(void *)&long long v50 = v19;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
    uint64_t v21 = v19;
    uint64_t v22 = (_OWORD *)(a4 + 40);
    do
    {
      uint64_t v23 = *((void *)v22 - 1);
      long long v48 = *v22;
      *(void *)&long long v50 = v21;
      unint64_t v25 = *(void *)(v21 + 16);
      unint64_t v24 = *(void *)(v21 + 24);
      swift_bridgeObjectRetain();
      swift_retain();
      if (v25 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
        uint64_t v21 = v50;
      }
      uint64_t v22 = (_OWORD *)((char *)v22 + 24);
      *(void *)(v21 + 16) = v25 + 1;
      uint64_t v26 = v21 + 24 * v25;
      *(void *)(v26 + 32) = v23;
      *(_OWORD *)(v26 + 40) = v48;
      --v20;
    }
    while (v20);
  }
  else
  {
    outlined retain of NodePersonality(v77);
    outlined retain of [Input]((uint64_t)&v76);
    outlined retain of [Input]((uint64_t)&v75);
    uint64_t v21 = MEMORY[0x263F8EE78];
  }
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(a1, MEMORY[0x263F8EE78], v21, 0xE000000000000000, (uint64_t)&v61, (uint64_t)&v58, &v67);
  unint64_t v27 = v67;
  uint64_t v28 = v69;
  uint64_t v49 = v70;
  char v38 = v71;
  long long v37 = v68;
  swift_bridgeObjectRelease();
  outlined init with take of NodePersonality(&v67, &v74);
  uint64_t v72 = *((void *)&v68 + 1);
  uint64_t v73 = v68;
  uint64_t v29 = v58;
  uint64_t v30 = v59;
  uint64_t v31 = v60;
  outlined retain of NodePersonality(&v74);
  outlined retain of [Input]((uint64_t)&v73);
  outlined retain of [Input]((uint64_t)&v72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  *(void *)&long long v50 = v29;
  *((void *)&v50 + 1) = v30;
  *(void *)&long long v51 = v31;
  *((void *)&v51 + 1) = a2;
  *(void *)&long long v52 = a3;
  *((void *)&v52 + 1) = a1;
  v53.n128_u64[0] = a4;
  v53.n128_u64[1] = v45;
  long long v54 = (unint64_t)v61;
  *(void *)unint64_t v55 = v27;
  *(_OWORD *)&v55[8] = v37;
  *(void *)&v55[24] = v28;
  *(void *)&long long v56 = v49;
  BYTE8(v56) = v38;
  *(_OWORD *)&v57[8] = v43;
  *(void *)uint64_t v57 = v42;
  *(void *)&v57[24] = v41;
  *(void *)&v57[32] = v40;
  v57[40] = v39;
  swift_bridgeObjectRetain();
  outlined retain of Graph((uint64_t)&v50);
  outlined release of NodePersonality(v77);
  outlined release of [Input]((uint64_t)&v76);
  outlined release of [Input]((uint64_t)&v75);
  outlined release of NodePersonality(&v74);
  outlined release of [Input]((uint64_t)&v73);
  outlined release of [Input]((uint64_t)&v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined release of Graph((uint64_t)&v50);
  long long v32 = *(_OWORD *)&v57[16];
  *(_OWORD *)(a6 + 128) = *(_OWORD *)v57;
  *(_OWORD *)(a6 + 144) = v32;
  *(_OWORD *)(a6 + 153) = *(_OWORD *)&v57[25];
  long long v33 = *(_OWORD *)v55;
  *(_OWORD *)(a6 + 64) = v54;
  *(_OWORD *)(a6 + 80) = v33;
  long long v34 = v56;
  *(_OWORD *)(a6 + 96) = *(_OWORD *)&v55[16];
  *(_OWORD *)(a6 + 112) = v34;
  long long v35 = v51;
  *(_OWORD *)a6 = v50;
  *(_OWORD *)(a6 + 16) = v35;
  __n128 result = v53;
  *(_OWORD *)(a6 + 32) = v52;
  *(__n128 *)(a6 + 48) = result;
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for MaterialXTarget();
  lazy protocol witness table accessor for type MaterialXTarget and conformance MaterialXTarget();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        int64_t v6 = (void *)MEMORY[0x2611848A0](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);
        swift_release();
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        swift_retain();
        specialized Set._Variant.insert(_:)(&v9, v8);
        swift_release();
        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized ShaderGraphNode.dotID.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 110;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 103;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF0dE4NodeV2IDVG_AJs5NeverOTg504_s11d54Graph0B0V25connectedUpstreamSubgraph8rootedAtSayAA0aB4H61VG5nodes_AC22DepthFirstEdgeIteratorV5edgestAG_tFA2G2IDVXEfU0_AF0E0VTf1cn_nTf4xg_nTm(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v23 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  uint64_t v3 = v23;
  uint64_t v7 = (unint64_t *)(a1 + 32);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v19 = v8 + 32;
  unint64_t v20 = *(void *)(v8 + 16);
  while (1)
  {
    unint64_t v10 = *v7++;
    unint64_t v9 = v10;
    if (v10 >= v20) {
      break;
    }
    uint64_t v11 = v19 + 48 * v9;
    unint64_t v12 = *(void *)v11;
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t v14 = *(void *)(v11 + 16);
    uint64_t v15 = *(void *)(v11 + 24);
    uint64_t v22 = *(void *)(v11 + 32);
    char v21 = *(unsigned char *)(v11 + 40);
    outlined copy of NodePersonality(*(void *)v11);
    unint64_t v16 = *(void *)(v23 + 16);
    unint64_t v17 = *(void *)(v23 + 24);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v16 >= v17 >> 1) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v16 + 1, 1);
    }
    *(void *)(v23 + 16) = v16 + 1;
    uint64_t v18 = v23 + 48 * v16;
    *(void *)(v18 + 32) = v12;
    *(void *)(v18 + 40) = v13;
    *(void *)(v18 + 48) = v14;
    *(void *)(v18 + 56) = v15;
    *(void *)(v18 + 64) = v22;
    *(unsigned char *)(v18 + 72) = v21;
    if (!--v2) {
      return v3;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Graph.DepthFirstEdgeIterator.init(_:initial:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v17 = (void *)MEMORY[0x263F8EE78];
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = 40;
    do
    {
      uint64_t v7 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v7);
      v6 += 48;
      --v5;
    }
    while (v5);
    uint64_t result = swift_bridgeObjectRelease_n();
    unint64_t v9 = v17;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v9 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v10 = *(void *)(a1[8] + 16);
  Swift::Int v11 = 10 * v10;
  if ((unsigned __int128)(v10 * (__int128)10) >> 64 == (10 * v10) >> 63)
  {
    char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v11 > v9[3] >> 1)
    {
      if (v9[2] <= v11) {
        int64_t v13 = v11;
      }
      else {
        int64_t v13 = v9[2];
      }
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 0, v9);
    }
    uint64_t v18 = MEMORY[0x263F8EE88];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Input>);
    Set.reserveCapacity(_:)(v11);
    uint64_t v14 = *a1;
    uint64_t v15 = a1[1];
    uint64_t v16 = a1[2];
    *a3 = v14;
    a3[1] = v15;
    a3[2] = v16;
    a3[3] = v9;
    a3[4] = v18;
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_nTm(uint64_t a1, uint64_t *a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v5 = (long long *)(a2 + 2);
    uint64_t v6 = a2[1];
    uint64_t v20 = *a2;
    uint64_t v21 = a2[2];
    uint64_t v18 = a2[4];
    uint64_t v19 = a2[3];
    char v7 = *((unsigned char *)a2 + 40);
    uint64_t v17 = a2[6];
    uint64_t v27 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v27;
    long long v26 = *v5;
    uint64_t v8 = (void *)(a1 + 80);
    char v16 = v7 & 1;
    do
    {
      uint64_t v10 = *(v8 - 6);
      uint64_t v9 = *(v8 - 5);
      uint64_t v11 = *(v8 - 3);
      uint64_t v24 = *(v8 - 2);
      uint64_t v25 = *(v8 - 4);
      char v23 = *((unsigned char *)v8 - 8);
      uint64_t v22 = *v8;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      outlined retain of String((uint64_t)&v26);
      uint64_t v27 = v3;
      unint64_t v13 = *(void *)(v3 + 16);
      unint64_t v12 = *(void *)(v3 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v3 = v27;
      }
      v8 += 7;
      *(void *)(v3 + 16) = v13 + 1;
      uint64_t v14 = v3 + 112 * v13;
      *(void *)(v14 + 32) = v20;
      *(void *)(v14 + 40) = v6;
      *(void *)(v14 + 48) = v21;
      *(void *)(v14 + 56) = v19;
      *(void *)(v14 + 64) = v18;
      *(unsigned char *)(v14 + 72) = v16;
      *(void *)(v14 + 80) = v17;
      *(void *)(v14 + 88) = v10;
      *(void *)(v14 + 96) = v9;
      *(void *)(v14 + 104) = v25;
      *(void *)(v14 + 112) = v11;
      *(void *)(v14 + 120) = v24;
      *(unsigned char *)(v14 + 128) = v23;
      *(void *)(v14 + 136) = v22;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a1 + 16);
  a2();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v6)
  {
    uint64_t v8 = (void *)(a1 + 80);
    do
    {
      uint64_t v10 = *(v8 - 6);
      uint64_t v9 = *(v8 - 5);
      uint64_t v11 = *(v8 - 4);
      uint64_t v12 = *(v8 - 3);
      uint64_t v13 = *(v8 - 2);
      char v14 = *((unsigned char *)v8 - 8);
      uint64_t v15 = *v8;
      v8 += 7;
      v18[0] = v10;
      v18[1] = v9;
      v18[2] = v11;
      v18[3] = v12;
      v18[4] = v13;
      char v19 = v14;
      uint64_t v20 = v15;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((uint64_t)v16, (Swift::Int)v18, a4);
      swift_release();
      swift_bridgeObjectRelease();
      --v6;
    }
    while (v6);
    return v17;
  }
  return result;
}

{
  uint64_t v6;
  uint64_t result;
  Swift::UInt *v8;
  Swift::UInt v9;
  Swift::UInt v10;
  uint64_t v11;

  uint64_t v6 = *(void *)(a1 + 16);
  a2();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v11 = result;
  if (v6)
  {
    uint64_t v8 = (Swift::UInt *)(a1 + 32);
    do
    {
      uint64_t v9 = *v8++;
      specialized Set._Variant.insert(_:)(&v10, v9, a4);
      --v6;
    }
    while (v6);
    return v11;
  }
  return result;
}

uint64_t specialized closure #2 in Graph.hoist(_:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t *a7)
{
  long long v12 = *a1;
  long long v13 = a1[1];
  long long v14 = a1[2];
  uint64_t v242 = *((void *)a1 + 6);
  long long v240 = v13;
  long long v241 = v14;
  long long v239 = v12;
  long long v15 = *(long long *)((char *)a1 + 56);
  long long v16 = *(long long *)((char *)a1 + 72);
  long long v17 = *(long long *)((char *)a1 + 88);
  uint64_t v238 = *((void *)a1 + 13);
  long long v236 = v16;
  long long v237 = v17;
  long long v235 = v15;
  long long v243 = v240;
  unint64_t v245 = *((void *)&v240 + 1);
  uint64_t v18 = v240;
  swift_retain();
  outlined retain of String((uint64_t)&v243);
  LOBYTE(a2) = specialized Set.contains(_:)(&v239, a2);
  swift_release();
  outlined release of String((uint64_t)&v243);
  v244[0] = v236;
  long long v174 = v236;
  swift_retain();
  outlined retain of String((uint64_t)v244);
  char v19 = specialized Set.contains(_:)(&v235, a3);
  swift_release();
  uint64_t result = outlined release of String((uint64_t)v244);
  if (a2)
  {
    uint64_t v21 = *(void *)(a4 + 16);
    if (v19)
    {
      uint64_t v164 = a5;
      if (!v21) {
        return result;
      }
      for (uint64_t i = (void *)(a4 + 80); ; i += 7)
      {
        uint64_t v23 = *(i - 6);
        uint64_t v176 = *(i - 5);
        uint64_t v24 = *(i - 4);
        unint64_t v25 = *(i - 3);
        uint64_t v26 = *(i - 2);
        char v27 = *((unsigned char *)i - 8);
        uint64_t v28 = *i;
        if (v24 == v18 && v25 == v245) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          goto LABEL_53;
        }
        if (!--v21) {
          return result;
        }
      }
      uint64_t v24 = v18;
      unint64_t v25 = v245;
LABEL_53:
      uint64_t v218 = v23;
      uint64_t v219 = v176;
      uint64_t v220 = v24;
      unint64_t v221 = v25;
      uint64_t v222 = v26;
      char v223 = v27;
      uint64_t v224 = v28;
      long long v68 = a6[9];
      long long v233 = a6[8];
      v234[0] = v68;
      *(_OWORD *)((char *)v234 + 9) = *(long long *)((char *)a6 + 153);
      long long v69 = a6[5];
      long long v229 = a6[4];
      long long v230 = v69;
      long long v70 = a6[7];
      long long v231 = a6[6];
      long long v232 = v70;
      long long v71 = a6[1];
      long long v225 = *a6;
      long long v226 = v71;
      long long v72 = a6[3];
      long long v227 = a6[2];
      long long v228 = v72;
      swift_retain();
      swift_bridgeObjectRetain();
      outlined retain of Graph((uint64_t)&v225);
      Graph.edge(to:)((uint64_t)&v218, &v180);
      outlined init with take of MetalFunctionNode?((uint64_t)&v180, (uint64_t)&v187, &demangling cache variable for type metadata for Edge?);
      if (v188)
      {
        *(_DWORD *)v198 = *(_DWORD *)v192;
        *(_DWORD *)&v198[3] = *(_DWORD *)&v192[3];
        v194[0] = v187;
        v194[1] = v188;
        long long v195 = v189;
        uint64_t v196 = v190;
        char v197 = v191;
        uint64_t v199 = v193;
        long long v200 = v189;
        unint64_t v245 = v188;
        swift_retain();
        outlined retain of String((uint64_t)&v200);
        outlined release of Edge?(&v180);
        outlined release of Graph((uint64_t)&v225);
        uint64_t v73 = *(void *)(v164 + 16);
        if (v73)
        {
          unint64_t v74 = (void *)(v164 + 80);
          while (1)
          {
            uint64_t v75 = *(v74 - 6);
            uint64_t v167 = *(v74 - 5);
            uint64_t v76 = *(v74 - 4);
            uint64_t v77 = *(v74 - 3);
            uint64_t v78 = *(v74 - 2);
            char v79 = *((unsigned char *)v74 - 8);
            uint64_t v80 = *v74;
            if (v76 == (void)v174 && v77 == *((void *)&v174 + 1)) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              goto LABEL_73;
            }
            v74 += 7;
            if (!--v73) {
              goto LABEL_62;
            }
          }
          uint64_t v77 = *((void *)&v174 + 1);
          uint64_t v76 = v174;
LABEL_73:
          long long v91 = a6[6];
          *(_OWORD *)&v216[48] = a6[7];
          long long v92 = a6[9];
          *(_OWORD *)v217 = a6[8];
          *(_OWORD *)&v217[16] = v92;
          *(_OWORD *)&v217[25] = *(long long *)((char *)a6 + 153);
          long long v93 = a6[2];
          long long v215 = a6[3];
          long long v94 = a6[5];
          *(_OWORD *)v216 = a6[4];
          *(_OWORD *)&v216[16] = v94;
          *(_OWORD *)&v216[32] = v91;
          long long v95 = a6[1];
          *(_OWORD *)v214 = *a6;
          *(_OWORD *)&v214[16] = v95;
          uint64_t v207 = v75;
          uint64_t v208 = v167;
          *(void *)&long long v209 = v76;
          *((void *)&v209 + 1) = v77;
          uint64_t v210 = v78;
          char v211 = v79;
          uint64_t v213 = v80;
          *(_OWORD *)&v214[32] = v93;
          swift_retain();
          swift_bridgeObjectRetain();
          outlined retain of Graph((uint64_t)v214);
          unint64_t v96 = Graph.edges(from:)((uint64_t)&v207);
          outlined release of Graph((uint64_t)v214);
          uint64_t v97 = *(void *)(v96 + 16);
          if (v97)
          {
            swift_bridgeObjectRetain();
            uint64_t v98 = 0;
            unint64_t v175 = v96;
            do
            {
              uint64_t v99 = v96 + v98;
              uint64_t v100 = *(void *)(v96 + v98 + 88);
              uint64_t v101 = *(void *)(v96 + v98 + 96);
              uint64_t v102 = *(void *)(v96 + v98 + 104);
              uint64_t v103 = *(void *)(v96 + v98 + 112);
              uint64_t v104 = *(void *)(v99 + 120);
              char v105 = *(unsigned char *)(v99 + 128);
              uint64_t v106 = *(void *)(v99 + 136);
              *(void *)&long long v201 = v100;
              *((void *)&v201 + 1) = v101;
              uint64_t v202 = v102;
              uint64_t v203 = v103;
              uint64_t v204 = v104;
              char v205 = v105;
              uint64_t v206 = v106;
              swift_retain();
              outlined retain of String((uint64_t)&v200);
              swift_retain();
              swift_bridgeObjectRetain();
              swift_retain_n();
              swift_bridgeObjectRetain_n();
              Graph.connect(_:to:)((uint64_t)v194, (unint64_t)&v201);
              swift_bridgeObjectRelease();
              swift_release();
              unint64_t v96 = v175;
              swift_bridgeObjectRelease_n();
              swift_release_n();
              swift_bridgeObjectRelease();
              swift_release();
              v98 += 112;
              --v97;
            }
            while (v97);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          outlined release of String((uint64_t)&v200);
          return swift_bridgeObjectRelease();
        }
LABEL_62:
        swift_release();
        uint64_t v82 = &v200;
        goto LABEL_122;
      }
      outlined release of Graph((uint64_t)&v225);
      swift_bridgeObjectRelease();
      return swift_release();
    }
    v170 = a7;
    if (!v21) {
      return result;
    }
    for (j = (void *)(a4 + 80); ; j += 7)
    {
      uint64_t v46 = *(j - 6);
      uint64_t v178 = *(j - 5);
      uint64_t v47 = *(j - 4);
      unint64_t v48 = *(j - 3);
      uint64_t v49 = *(j - 2);
      char v50 = *((unsigned char *)j - 8);
      uint64_t v51 = *j;
      if (v47 == v18 && v48 == v245) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_64;
      }
      if (!--v21) {
        return result;
      }
    }
    uint64_t v47 = v18;
    unint64_t v48 = v245;
LABEL_64:
    uint64_t v180 = v46;
    uint64_t v181 = v178;
    uint64_t v182 = v47;
    unint64_t v183 = v48;
    uint64_t v184 = v49;
    char v185 = v50;
    uint64_t v186 = v51;
    long long v83 = a6[9];
    long long v233 = a6[8];
    v234[0] = v83;
    *(_OWORD *)((char *)v234 + 9) = *(long long *)((char *)a6 + 153);
    long long v84 = a6[5];
    long long v229 = a6[4];
    long long v230 = v84;
    long long v85 = a6[7];
    long long v231 = a6[6];
    long long v232 = v85;
    long long v86 = a6[1];
    long long v225 = *a6;
    long long v226 = v86;
    long long v87 = a6[3];
    long long v227 = a6[2];
    long long v228 = v87;
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of Graph((uint64_t)&v225);
    Graph.edge(to:)((uint64_t)&v180, &v187);
    outlined init with take of MetalFunctionNode?((uint64_t)&v187, (uint64_t)v214, &demangling cache variable for type metadata for Edge?);
    if (!*(void *)&v214[8])
    {
      outlined release of Graph((uint64_t)&v225);
      goto LABEL_71;
    }
    *(_DWORD *)v212 = *(_DWORD *)&v214[41];
    *(_DWORD *)&v212[3] = *(_DWORD *)&v214[44];
    uint64_t v207 = *(void *)v214;
    uint64_t v208 = *(void *)&v214[8];
    long long v209 = *(_OWORD *)&v214[16];
    uint64_t v210 = *(void *)&v214[32];
    char v211 = v214[40];
    uint64_t v213 = v215;
    long long v201 = *(_OWORD *)&v214[16];
    swift_retain();
    outlined retain of String((uint64_t)&v201);
    outlined release of Edge?(&v187);
    outlined release of Graph((uint64_t)&v225);
    uint64_t v88 = *v170;
    if (!*(void *)(*v170 + 16)
      || (uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v235), (v89 & 1) == 0)
      || (unint64_t v90 = *(void *)(*(void *)(v88 + 56) + 8 * result), v90 == -7))
    {
      swift_release();
      outlined release of String((uint64_t)&v201);
LABEL_71:
      swift_bridgeObjectRelease();
      return swift_release();
    }
    if ((v90 & 0x8000000000000000) == 0)
    {
      uint64_t v107 = *((void *)a6 + 8);
      if (v90 < *(void *)(v107 + 16))
      {
        uint64_t v108 = v107 + 48 * v90;
        uint64_t v172 = *(void *)(v108 + 40);
        uint64_t v109 = *(void *)(v172 + 16);
        if (v109)
        {
          unint64_t v158 = *(void *)(v108 + 32);
          uint64_t v110 = (uint64_t *)(v172 + 80);
          while (1)
          {
            uint64_t v112 = *(v110 - 6);
            uint64_t v111 = *(v110 - 5);
            uint64_t v114 = *(v110 - 4);
            unint64_t v113 = *(v110 - 3);
            uint64_t v115 = *(v110 - 2);
            LODWORD(v245) = *((unsigned __int8 *)v110 - 8);
            uint64_t v116 = *v110;
            if (v114 == (void)v174 && v113 == *((void *)&v174 + 1)) {
              break;
            }
            unint64_t v118 = v113;
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              goto LABEL_120;
            }
            v110 += 7;
            if (!--v109) {
              goto LABEL_89;
            }
          }
          unint64_t v118 = *((void *)&v174 + 1);
          uint64_t v114 = v174;
LABEL_120:
          uint64_t v218 = v112;
          uint64_t v219 = v111;
          uint64_t v220 = v114;
          unint64_t v221 = v118;
          uint64_t v222 = v115;
          char v223 = v245;
          uint64_t v224 = v116;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          outlined retain of String((uint64_t)&v201);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of NodePersonality(v158);
          Graph.connect(_:to:)((uint64_t)&v207, (unint64_t)&v218);
          swift_bridgeObjectRelease_n();
          swift_release_n();
          swift_bridgeObjectRelease();
          swift_release();
          outlined consume of NodePersonality(v158);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_89:
          swift_release();
        }
        uint64_t v82 = &v201;
LABEL_122:
        outlined release of String((uint64_t)v82);
        swift_bridgeObjectRelease();
        return swift_release();
      }
      goto LABEL_132;
    }
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  uint64_t v30 = *a7;
  uint64_t v31 = *(void *)(*a7 + 16);
  if (v19)
  {
    uint64_t v165 = a5;
    if (!v31) {
      return result;
    }
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v239);
    if ((v32 & 1) == 0) {
      return result;
    }
    unint64_t v33 = *(void *)(*(void *)(v30 + 56) + 8 * result);
    if (v33 == -7) {
      return result;
    }
    if ((v33 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v34 = *((void *)a6 + 8);
      if (v33 < *(void *)(v34 + 16))
      {
        uint64_t v162 = *((void *)a6 + 8);
        uint64_t v35 = v34 + 48 * v33;
        uint64_t v169 = *(void *)(v35 + 48);
        uint64_t v36 = *(void *)(v169 + 16);
        if (v36)
        {
          unint64_t v159 = *(void *)(v35 + 32);
          for (k = (void *)(v169 + 80); ; k += 7)
          {
            uint64_t v39 = *(k - 6);
            uint64_t v38 = *(k - 5);
            uint64_t v40 = *(k - 4);
            unint64_t v41 = *(k - 3);
            uint64_t v42 = *(k - 2);
            char v43 = *((unsigned char *)k - 8);
            uint64_t v177 = *k;
            if (v40 == v18 && v41 == v245) {
              break;
            }
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if (result) {
              goto LABEL_91;
            }
            if (!--v36) {
              return result;
            }
          }
          uint64_t v40 = v18;
          unint64_t v41 = v245;
LABEL_91:
          uint64_t v218 = v39;
          uint64_t v219 = v38;
          uint64_t v220 = v40;
          unint64_t v221 = v41;
          uint64_t v222 = v42;
          char v223 = v43;
          uint64_t v224 = v177;
          uint64_t v119 = *(void *)(v165 + 16);
          if (v119)
          {
            for (m = (void *)(v165 + 80); ; m += 7)
            {
              uint64_t v121 = *(m - 6);
              unint64_t v122 = *(m - 5);
              uint64_t v123 = *(m - 4);
              uint64_t v124 = *(m - 3);
              uint64_t v125 = *(m - 2);
              char v126 = *((unsigned char *)m - 8);
              uint64_t v127 = *m;
              if (v123 == (void)v174 && v124 == *((void *)&v174 + 1)) {
                break;
              }
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if (result) {
                goto LABEL_101;
              }
              if (!--v119) {
                return result;
              }
            }
            uint64_t v124 = *((void *)&v174 + 1);
            uint64_t v123 = v174;
LABEL_101:
            uint64_t v187 = v121;
            unint64_t v188 = v122;
            *(void *)&long long v189 = v123;
            *((void *)&v189 + 1) = v124;
            uint64_t v190 = v125;
            char v191 = v126;
            uint64_t v193 = v127;
            uint64_t v129 = *(void *)a6;
            long long v130 = *(long long *)((char *)a6 + 24);
            uint64_t v131 = *((void *)a6 + 5);
            char v132 = *((unsigned char *)a6 + 120);
            uint64_t v133 = *((void *)a6 + 16);
            char v134 = *((unsigned char *)a6 + 168);
            *(_OWORD *)&v214[8] = *(long long *)((char *)a6 + 8);
            *(_OWORD *)&v214[24] = v130;
            *(void *)v214 = v129;
            *(void *)&v214[40] = v131;
            long long v215 = a6[3];
            *(void *)v216 = v162;
            long long v135 = *(long long *)((char *)a6 + 88);
            *(_OWORD *)&v216[8] = *(long long *)((char *)a6 + 72);
            *(_OWORD *)&v216[24] = v135;
            *(_OWORD *)&v216[40] = *(long long *)((char *)a6 + 104);
            v216[56] = v132;
            *(void *)v217 = v133;
            long long v136 = *(long long *)((char *)a6 + 152);
            *(_OWORD *)&v217[8] = *(long long *)((char *)a6 + 136);
            *(_OWORD *)&v217[24] = v136;
            v217[40] = v134;
            long long v225 = *(_OWORD *)v214;
            long long v226 = *(_OWORD *)&v214[16];
            long long v233 = *(_OWORD *)v217;
            v234[0] = *(_OWORD *)&v217[16];
            *(_OWORD *)((char *)v234 + 9) = *(_OWORD *)&v217[25];
            long long v231 = *(_OWORD *)&v216[32];
            long long v232 = *(_OWORD *)&v216[48];
            long long v229 = *(_OWORD *)v216;
            long long v230 = *(_OWORD *)&v216[16];
            long long v227 = *(_OWORD *)&v214[32];
            long long v228 = v215;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of NodePersonality(v159);
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            outlined retain of Graph((uint64_t)v214);
            unint64_t v137 = Graph.edges(from:)((uint64_t)&v187);
            outlined release of Graph((uint64_t)v214);
            unint64_t v245 = v137;
            uint64_t v138 = *(void *)(v137 + 16);
            if (v138)
            {
              swift_bridgeObjectRetain();
              uint64_t v139 = 0;
              do
              {
                uint64_t v140 = *(void *)(v245 + v139 + 96);
                uint64_t v141 = *(void *)(v245 + v139 + 104);
                unint64_t v142 = *(void *)(v245 + v139 + 112);
                uint64_t v143 = *(void *)(v245 + v139 + 120);
                char v144 = *(unsigned char *)(v245 + v139 + 128);
                uint64_t v145 = *(void *)(v245 + v139 + 136);
                uint64_t v180 = *(void *)(v245 + v139 + 88);
                uint64_t v181 = v140;
                uint64_t v182 = v141;
                unint64_t v183 = v142;
                uint64_t v184 = v143;
                char v185 = v144;
                uint64_t v186 = v145;
                swift_retain();
                swift_bridgeObjectRetain();
                swift_retain();
                swift_bridgeObjectRetain();
                swift_retain_n();
                swift_bridgeObjectRetain_n();
                Graph.connect(_:to:)((uint64_t)&v218, (unint64_t)&v180);
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease_n();
                swift_release_n();
                swift_bridgeObjectRelease();
                swift_release();
                v139 += 112;
                --v138;
              }
              while (v138);
              swift_bridgeObjectRelease();
            }
            outlined consume of NodePersonality(v159);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            return swift_bridgeObjectRelease();
          }
        }
        return result;
      }
    }
    __break(1u);
    goto LABEL_129;
  }
  if (!v31) {
    return result;
  }
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v239);
  if ((v53 & 1) == 0) {
    return result;
  }
  uint64_t v54 = *a7;
  if (!*(void *)(*a7 + 16)) {
    return result;
  }
  unint64_t v55 = *(void *)(*(void *)(v30 + 56) + 8 * result);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v235);
  if ((v56 & 1) == 0 || v55 == -7) {
    return result;
  }
  if ((v55 & 0x8000000000000000) != 0)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  uint64_t v57 = *((void *)a6 + 8);
  if (v55 >= *(void *)(v57 + 16))
  {
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }
  uint64_t v163 = *((void *)a6 + 8);
  uint64_t v160 = v57 + 32;
  uint64_t v58 = (unint64_t *)(v57 + 32 + 48 * v55);
  unint64_t v171 = v58[2];
  uint64_t v59 = *(void *)(v171 + 16);
  if (v59)
  {
    unint64_t v166 = *(void *)(*(void *)(v54 + 56) + 8 * result);
    unint64_t v157 = *v58;
    for (n = (void *)(v171 + 80); ; n += 7)
    {
      unint64_t v61 = *(n - 5);
      uint64_t v179 = *(n - 6);
      uint64_t v62 = *(n - 4);
      unint64_t v63 = *(n - 3);
      uint64_t v64 = *(n - 2);
      char v65 = *((unsigned char *)n - 8);
      uint64_t v66 = *n;
      if (v62 == v18 && v63 == v245) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_107;
      }
      if (!--v59) {
        return result;
      }
    }
    uint64_t v62 = v18;
    unint64_t v63 = v245;
LABEL_107:
    *(void *)v214 = v179;
    unint64_t v245 = v61;
    *(void *)&v214[8] = v61;
    *(void *)&v214[16] = v62;
    *(void *)&v214[24] = v63;
    *(void *)&v214[32] = v64;
    v214[40] = v65;
    *(void *)&long long v215 = v66;
    if (v166 != -7)
    {
      if ((v166 & 0x8000000000000000) != 0)
      {
LABEL_133:
        __break(1u);
        goto LABEL_134;
      }
      if (v166 >= *(void *)(v163 + 16))
      {
LABEL_134:
        __break(1u);
        return result;
      }
      uint64_t v146 = (unint64_t *)(v160 + 48 * v166);
      unint64_t v168 = v146[1];
      uint64_t v147 = *(void *)(v168 + 16);
      if (v147)
      {
        unint64_t v161 = *v146;
        for (iuint64_t i = (void *)(v168 + 80); ; ii += 7)
        {
          uint64_t v149 = *(ii - 6);
          uint64_t v150 = *(ii - 5);
          uint64_t v151 = *(ii - 4);
          uint64_t v152 = *(ii - 3);
          uint64_t v153 = *(ii - 2);
          char v154 = *((unsigned char *)ii - 8);
          uint64_t v155 = *ii;
          if (v151 == (void)v174 && v152 == *((void *)&v174 + 1)) {
            break;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if (result) {
            goto LABEL_126;
          }
          if (!--v147) {
            return result;
          }
        }
        uint64_t v152 = *((void *)&v174 + 1);
        uint64_t v151 = v174;
LABEL_126:
        *(void *)&long long v225 = v149;
        *((void *)&v225 + 1) = v150;
        *(void *)&long long v226 = v151;
        *((void *)&v226 + 1) = v152;
        *(void *)&long long v227 = v153;
        BYTE8(v227) = v154;
        *(void *)&long long v228 = v155;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v157);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v161);
        Graph.connect(_:to:)((uint64_t)v214, (unint64_t)&v225);
        swift_bridgeObjectRelease_n();
        swift_release_n();
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of NodePersonality(v161);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v157);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

unint64_t specialized Sequence.forEach(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t *a7)
{
  uint64_t v8 = *a1;
  char v7 = (void *)a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = (void *)a1[3];
  uint64_t v124 = a1[4];
  uint64_t v125 = v10;
  uint64_t v108 = v124;
  uint64_t v109 = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of [Input]((uint64_t)&v125);
  outlined retain of [Input]((uint64_t)&v124);
  uint64_t v73 = v9;
  if (!v10[2])
  {
LABEL_73:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  uint64_t v76 = v8;
  unint64_t v74 = v7;
  uint64_t v75 = v7 + 4;
  uint64_t v71 = v8 + 32;
  long long v72 = (void *)(v8 + 16);
  uint64_t v70 = v9 + 32;
  uint64_t v62 = v7 + 7;
  while (1)
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v11 = v10[2];
      if (!v11) {
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      uint64_t v11 = v10[2];
      if (!v11)
      {
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
    }
    uint64_t v12 = v11 - 1;
    long long v13 = &v10[7 * v12];
    long long v14 = *((_OWORD *)v13 + 2);
    long long v15 = *((_OWORD *)v13 + 3);
    long long v16 = *((_OWORD *)v13 + 4);
    Swift::UInt v129 = v13[10];
    long long v127 = v15;
    long long v128 = v16;
    long long v126 = v14;
    uint64_t v17 = v13[4];
    uint64_t v18 = v13[6];
    uint64_t v82 = v13[7];
    uint64_t v83 = v13[5];
    uint64_t v19 = v13[8];
    char v20 = *((unsigned char *)v13 + 72);
    uint64_t v21 = v13[10];
    v10[2] = v12;
    uint64_t v109 = v10;
    uint64_t v22 = v108;
    uint64_t v80 = v18;
    uint64_t v81 = v17;
    uint64_t v79 = v19;
    char v78 = v20;
    uint64_t v77 = v21;
    if (*(void *)(v108 + 16))
    {
      Hasher.init(_seed:)();
      uint64_t v131 = v126;
      Hasher._combine(_:)(v126);
      uint64_t v23 = *((void *)&v126 + 1);
      uint64_t v24 = *(void (**)(long long *))(**((void **)&v126 + 1) + 120);
      swift_retain();
      v24(&v95);
      swift_release();
      long long v25 = v127;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::UInt v26 = v128;
      char v88 = BYTE8(v128);
      uint64_t v84 = v128;
      if (BYTE8(v128) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v26);
      }
      Swift::UInt v87 = v129;
      Hasher._combine(_:)(v129);
      Swift::Int v27 = Hasher._finalize()();
      uint64_t v28 = -1 << *(unsigned char *)(v22 + 32);
      unint64_t v29 = v27 & ~v28;
      if ((*(void *)(v22 + 56 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29))
      {
        long long v85 = v10;
        uint64_t v30 = ~v28;
        while (1)
        {
          uint64_t v31 = *(void *)(v22 + 48) + 56 * v29;
          if (*(void *)v31 == v131)
          {
            uint64_t v32 = *(void *)(v31 + 16);
            uint64_t v33 = *(void *)(v31 + 24);
            uint64_t v90 = *(void *)(v31 + 32);
            char v34 = *(unsigned char *)(v31 + 40);
            uint64_t v93 = *(void *)(v31 + 48);
            uint64_t v35 = *(uint64_t (**)(uint64_t))(**(void **)(v31 + 8) + 128);
            swift_retain();
            swift_bridgeObjectRetain();
            if (v35(v23))
            {
              if (v32 == (void)v25 && v33 == *((void *)&v25 + 1))
              {
                swift_bridgeObjectRelease();
                swift_release();
                if (v34)
                {
LABEL_24:
                  char v38 = v88;
                  if (v93 != v87) {
                    char v38 = 0;
                  }
                  if (v38)
                  {
LABEL_35:
                    swift_bridgeObjectRelease();
                    swift_release();
                    uint64_t v8 = v76;
                    char v7 = v74;
                    uint64_t v10 = v85;
                    goto LABEL_4;
                  }
                  goto LABEL_15;
                }
                goto LABEL_29;
              }
              char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_release();
              if (v37)
              {
                if (v34) {
                  goto LABEL_24;
                }
LABEL_29:
                if ((v88 & 1) == 0 && v90 == v84 && v93 == v87) {
                  goto LABEL_35;
                }
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
          }
LABEL_15:
          unint64_t v29 = (v29 + 1) & v30;
          if (((*(void *)(v22 + 56 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
          {
            uint64_t v8 = v76;
            char v7 = v74;
            uint64_t v10 = v85;
            goto LABEL_38;
          }
        }
      }
      char v7 = v74;
    }
LABEL_38:
    v130[0] = v127;
    swift_retain();
    outlined retain of String((uint64_t)v130);
    specialized Set._Variant.insert(_:)((uint64_t)&v95, (Swift::Int)&v126, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<Input>);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v40 = v7[2];
    if (v8) {
      break;
    }
    if (!v40) {
      goto LABEL_3;
    }
    if (*v75 == (void)v126)
    {
      unint64_t result = 0;
      uint64_t v43 = v73;
    }
    else
    {
      if (v40 == 1) {
        goto LABEL_3;
      }
      if (v7[5] == (void)v126)
      {
        unint64_t result = 1;
        uint64_t v43 = v73;
      }
      else
      {
        if (v40 == 2) {
          goto LABEL_3;
        }
        if (v7[6] != (void)v126)
        {
          uint64_t v44 = 0;
          while (v40 - 3 != v44)
          {
            uint64_t v45 = v62[v44++];
            if (v45 == (void)v126)
            {
              unint64_t result = v44 + 2;
              uint64_t v43 = v73;
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_76;
              }
              goto LABEL_55;
            }
          }
LABEL_3:
          swift_release();
          outlined release of String((uint64_t)v130);
          goto LABEL_4;
        }
        unint64_t result = 2;
        uint64_t v43 = v73;
      }
    }
LABEL_55:
    if (result >= *(void *)(v43 + 16)) {
      goto LABEL_77;
    }
    long long v86 = v10;
    uint64_t v46 = (void *)(v70 + 48 * result);
    uint64_t v47 = v46[3];
    uint64_t v48 = v46[4];
    uint64_t v49 = v46[5];
    uint64_t v50 = *(void *)(v48 + 16);
    if (v47)
    {
      swift_retain();
      outlined retain of String((uint64_t)v130);
      swift_retain();
      swift_retain();
      swift_retain();
      unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v126, v48 + 32, v50, (void *)(v47 + 16), v47 + 32);
      if (v51) {
        goto LABEL_65;
      }
    }
    else
    {
      swift_retain();
      outlined retain of String((uint64_t)v130);
      swift_retain();
      swift_retain();
      unint64_t result = specialized Collection<>.firstIndex(of:)(&v126, v48 + 32, v50);
      if (v52)
      {
LABEL_65:
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined release of String((uint64_t)v130);
        swift_release();
        outlined release of String((uint64_t)v130);
LABEL_67:
        uint64_t v10 = v86;
        uint64_t v8 = v76;
        goto LABEL_4;
      }
    }
    if ((result & 0x8000000000000000) != 0) {
      goto LABEL_78;
    }
    if (result >= *(void *)(v49 + 16)) {
      goto LABEL_79;
    }
    char v53 = (void *)(v49 + 56 * result);
    uint64_t v55 = v53[4];
    uint64_t v54 = v53[5];
    uint64_t v56 = v53[6];
    uint64_t v57 = v53[8];
    uint64_t v58 = v53[9];
    uint64_t v59 = v53[10];
    uint64_t v131 = v53[7];
    uint64_t v92 = v57;
    char v94 = v58;
    outlined copy of Output?(v55, v54);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of String((uint64_t)v130);
    if (!v54)
    {
      swift_release();
      outlined release of String((uint64_t)v130);
      goto LABEL_67;
    }
    uint64_t v91 = v59;
    uint64_t v8 = v76;
    specialized OrderedDictionary.subscript.getter(v55, v76, v7, v73, v110);
    outlined init with take of MetalFunctionNode?((uint64_t)v110, (uint64_t)&v111, &demangling cache variable for type metadata for Graph.Adjacent?);
    if (*((void *)&v111 + 1))
    {
      long long v119 = v111;
      long long v116 = v113;
      uint64_t v89 = v112;
      uint64_t v60 = v114;
      outlined init with take of MetalFunctionNode?((uint64_t)&v116, (uint64_t)v118, &demangling cache variable for type metadata for _HashTable.Storage?);
      uint64_t v61 = *((void *)&v116 + 1);
      uint64_t v117 = *((void *)&v116 + 1);
      uint64_t v115 = v60;
      long long v121 = v119;
      outlined init with take of MetalFunctionNode?((uint64_t)&v121, (uint64_t)v123, &demangling cache variable for type metadata for _HashTable.Storage?);
      swift_retain();
      outlined retain of String((uint64_t)v130);
      outlined retain of _HashTable.Storage?((uint64_t)v118);
      outlined retain of _HashTable.Storage?((uint64_t)&v117);
      outlined retain of _HashTable.Storage?((uint64_t)&v115);
      outlined release of _HashTable.Storage?((uint64_t)v123);
      uint64_t v122 = *((void *)&v121 + 1);
      outlined release of _HashTable.Storage?((uint64_t)&v122);
      uint64_t v120 = v89;
      outlined release of _HashTable.Storage?((uint64_t)&v120);
      outlined release of _HashTable.Storage?((uint64_t)v118);
      outlined release of _HashTable.Storage?((uint64_t)&v117);
      outlined release of _HashTable.Storage?((uint64_t)&v115);
      outlined release of _HashTable.Storage?((uint64_t)&v115);
      outlined release of _HashTable.Storage?((uint64_t)v118);
    }
    else
    {
      swift_retain();
      outlined retain of String((uint64_t)v130);
      uint64_t v61 = MEMORY[0x263F8EE78];
    }
    specialized Array.append<A>(contentsOf:)(v61);
    swift_release();
    outlined release of String((uint64_t)v130);
    *(void *)&long long v95 = v55;
    *((void *)&v95 + 1) = v54;
    uint64_t v96 = v56;
    uint64_t v97 = v131;
    uint64_t v98 = v92;
    char v99 = v94 & 1;
    uint64_t v100 = v91;
    uint64_t v101 = v81;
    uint64_t v102 = v83;
    uint64_t v103 = v80;
    uint64_t v104 = v82;
    uint64_t v105 = v79;
    char v106 = v78;
    uint64_t v107 = v77;
    specialized closure #2 in Graph.hoist(_:)(&v95, a2, a3, a4, a5, a6, a7);
    if (v69)
    {
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v69 = 0;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v10 = v109;
    char v7 = v74;
LABEL_4:
    if (!v10[2]) {
      goto LABEL_73;
    }
  }
  unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v126, (uint64_t)v75, v40, v72, v71);
  if (v42) {
    goto LABEL_3;
  }
  uint64_t v43 = v73;
  if ((result & 0x8000000000000000) == 0) {
    goto LABEL_55;
  }
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *, void *))
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    swift_retain();
    swift_retain();
    uint64_t v14 = a3;
    uint64_t result = swift_retain();
    uint64_t v9 = 0;
    while (v7)
    {
      long long v10 = *(_OWORD *)(a2 + v9 + 48);
      v15[0] = *(_OWORD *)(a2 + v9 + 32);
      v15[1] = v10;
      _OWORD v15[2] = *(_OWORD *)(a2 + v9 + 64);
      uint64_t v16 = *(void *)(a2 + v9 + 80);
      uint64_t v19 = *(void *)(a2 + v9 + 40);
      long long v18 = v10;
      outlined init with take of MetalFunctionNode?(v14 + v9 + 32, (uint64_t)v17, &demangling cache variable for type metadata for Output?);
      uint64_t v11 = *(void *)(v14 + v9 + 40);
      uint64_t v12 = *(void *)(v14 + v9 + 32);
      swift_retain();
      outlined retain of String((uint64_t)&v18);
      outlined release of Output??(v17, (void (*)(void, void, void, void, void, void, void))outlined copy of Output?);
      a4(v15, v17);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = outlined consume of Input?(v12, v11);
      --v7;
      v9 += 56;
      if (!--v4)
      {
        swift_release();
        swift_release();
        return swift_release();
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *, uint64_t, uint64_t))
{
  uint64_t v16 = a4;
  uint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    uint64_t v6 = a2 + 32;
    uint64_t v7 = *(void *)(a2 + 16);
    swift_retain();
    swift_retain();
    uint64_t result = swift_retain();
    uint64_t v9 = (uint64_t *)(a3 + 40);
    while (v7)
    {
      long long v10 = *(_OWORD *)(v6 + 16);
      v13[0] = *(_OWORD *)v6;
      v13[1] = v10;
      v13[2] = *(_OWORD *)(v6 + 32);
      uint64_t v14 = *(void *)(v6 + 48);
      long long v15 = v10;
      uint64_t v11 = *(v9 - 1);
      uint64_t v12 = *v9;
      swift_retain();
      outlined retain of String((uint64_t)&v15);
      swift_retain();
      swift_retain();
      v16(v13, v11, v12);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      --v7;
      v9 += 2;
      v6 += 56;
      if (!--v4)
      {
        swift_release();
        swift_release();
        return swift_release();
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized Graph.removeEdges(connectedTo:)(uint64_t a1)
{
  specialized OrderedDictionary.subscript.getter(a1, *(void *)v1, *(void **)(v1 + 8), *(void *)(v1 + 16), v15);
  outlined init with take of MetalFunctionNode?((uint64_t)v15, (uint64_t)&v17, &demangling cache variable for type metadata for Graph.Adjacent?);
  outlined init with take of MetalFunctionNode?((uint64_t)v15, (uint64_t)v22, &demangling cache variable for type metadata for Graph.Adjacent?);
  if (v23)
  {
    uint64_t v3 = v20;
    uint64_t v4 = v21;
    uint64_t v5 = v17;
    uint64_t v6 = v18;
    uint64_t v7 = v19;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v8 = outlined consume of Graph.Adjacent?(v5, v6);
    MEMORY[0x270FA5388](v8);
    specialized Sequence.forEach(_:)(v7, v3, v4, (void (*)(_OWORD *, void *))closure #1 in Graph.removeEdges(connectedTo:)partial apply);
    swift_release();
    swift_release();
    swift_release();
  }
  specialized OrderedDictionary.subscript.getter(a1, *(void *)v1, *(void **)(v1 + 8), *(void *)(v1 + 16), v16);
  outlined init with take of MetalFunctionNode?((uint64_t)v16, (uint64_t)v14, &demangling cache variable for type metadata for Graph.Adjacent?);
  uint64_t result = outlined init with take of MetalFunctionNode?((uint64_t)v16, (uint64_t)&v17, &demangling cache variable for type metadata for Graph.Adjacent?);
  if (v18)
  {
    uint64_t v10 = v14[0];
    uint64_t v11 = v14[1];
    uint64_t v12 = v14[2];
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v13 = outlined consume of Graph.Adjacent?(v10, v11);
    MEMORY[0x270FA5388](v13);
    specialized Sequence.forEach(_:)(v10, v11, v12, (void (*)(_OWORD *, uint64_t, uint64_t))closure #2 in Graph.removeEdges(connectedTo:)partial apply);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized Graph.remove(_:)(uint64_t a1)
{
  unint64_t v2 = a1;
  specialized Graph.removeEdges(connectedTo:)(a1);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_21;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_22:
    __break(1u);
  }
  else
  {
    while (*(void *)(v3 + 16) > v2)
    {
      uint64_t v16 = v1;
      uint64_t v1 = v3;
      uint64_t v5 = v3 + 48 * v2;
      uint64_t v6 = v5 + 32;
      *(void *)(v5 + 56) = -7;
      unint64_t v2 = *(void *)(v5 + 40);
      uint64_t v7 = *(void *)(v2 + 16);
      if (v7)
      {
        swift_bridgeObjectRetain();
        uint64_t v3 = 0;
        unint64_t v8 = 0;
        while (1)
        {
          uint64_t v9 = *(void **)(v6 + 8);
          swift_retain();
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v6 + 8) = v9;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
            *(void *)(v6 + 8) = v9;
          }
          if (v8 >= v9[2]) {
            break;
          }
          ++v8;
          *(void *)((char *)v9 + v3 + 32) = -7;
          swift_bridgeObjectRelease();
          swift_release();
          v3 += 56;
          if (v7 == v8)
          {
            uint64_t result = swift_bridgeObjectRelease();
            goto LABEL_11;
          }
        }
        __break(1u);
      }
      else
      {
LABEL_11:
        unint64_t v2 = *(void *)(v6 + 16);
        uint64_t v11 = *(void *)(v2 + 16);
        if (!v11)
        {
LABEL_18:
          *(void *)(v16 + 64) = v1;
          return result;
        }
        swift_bridgeObjectRetain();
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        uint64_t v3 = -7;
        while (1)
        {
          uint64_t v14 = *(void **)(v6 + 16);
          swift_retain();
          swift_bridgeObjectRetain();
          char v15 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v6 + 16) = v14;
          if ((v15 & 1) == 0)
          {
            uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
            *(void *)(v6 + 16) = v14;
          }
          if (v13 >= v14[2]) {
            break;
          }
          ++v13;
          v14[v12 + 4] = -7;
          swift_bridgeObjectRelease();
          swift_release();
          v12 += 7;
          if (v11 == v13)
          {
            uint64_t result = swift_bridgeObjectRelease();
            goto LABEL_18;
          }
        }
      }
      __break(1u);
LABEL_21:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v3);
      uint64_t v3 = result;
      if ((v2 & 0x8000000000000000) != 0) {
        goto LABEL_22;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Graph.BreathFirstEdgeIterator.init(_:initial:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v31 = (void *)MEMORY[0x263F8EE78];
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = 40;
    do
    {
      uint64_t v7 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v7);
      v6 += 48;
      --v5;
    }
    while (v5);
    uint64_t result = swift_bridgeObjectRelease_n();
    uint64_t v9 = v31;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v9 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v10 = a1[8];
  uint64_t v11 = *(void *)(v10 + 16);
  Swift::Int v12 = 10 * v11;
  if ((unsigned __int128)(v11 * (__int128)10) >> 64 == (10 * v11) >> 63)
  {
    char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v12 <= v9[3] >> 1)
    {
      uint64_t v14 = v9[2];
      if (v14)
      {
LABEL_10:
        char v15 = &v9[7 * v14];
        uint64_t v17 = *(v15 - 3);
        uint64_t v16 = *(v15 - 2);
        uint64_t v29 = v10;
        uint64_t v30 = a1;
        uint64_t v18 = *(v15 - 1);
        uint64_t v19 = *v15;
        uint64_t v20 = v15[1];
        char v28 = *((unsigned char *)v15 + 16);
        uint64_t v27 = v15[3];
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Input>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_25C418EE0;
        *(void *)(inited + 32) = v17;
        *(void *)(inited + 40) = v16;
        *(void *)(inited + 48) = v18;
        *(void *)(inited + 56) = v19;
        *(void *)(inited + 64) = v20;
        uint64_t v10 = v29;
        a1 = v30;
        *(unsigned char *)(inited + 72) = v28;
        *(void *)(inited + 80) = v27;
        swift_retain();
        swift_bridgeObjectRetain();
        Swift::Int v22 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
        swift_setDeallocating();
        swift_arrayDestroy();
LABEL_16:
        Swift::Int v32 = v22;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Input>);
        Set.reserveCapacity(_:)(v12);
        uint64_t v24 = *a1;
        uint64_t v25 = a1[1];
        uint64_t v26 = a1[2];
        *a3 = v24;
        a3[1] = v25;
        a3[2] = v26;
        a3[3] = v9;
        a3[4] = v32;
        a3[5] = v10;
        swift_retain();
        swift_retain();
        swift_retain();
        return swift_bridgeObjectRetain();
      }
    }
    else
    {
      if (v9[2] <= v12) {
        int64_t v23 = v12;
      }
      else {
        int64_t v23 = v9[2];
      }
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 0, v9);
      uint64_t v14 = v9[2];
      if (v14) {
        goto LABEL_10;
      }
    }
    Swift::Int v22 = MEMORY[0x263F8EE88];
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[14 * a2 + 4];
    if (a1 != a2 || &v4[14 * a1 + 4] >= (void *)&v16[112 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[14 * a1 + 4], v16, 112 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v6 = (long long *)(a4 + 2);
    uint64_t v33 = a4[2];
    uint64_t v22 = a4[5] & 1;
    uint64_t v23 = a4[6];
    uint64_t v20 = a4[3];
    uint64_t v21 = a4[4];
    uint64_t v18 = a4[1];
    uint64_t v19 = *a4;
    swift_retain();
    swift_retain();
    uint64_t v7 = (void *)(a2 + 80);
    do
    {
      uint64_t v8 = *v7;
      char v9 = *((unsigned char *)v7 - 8);
      uint64_t v11 = *(v7 - 3);
      uint64_t v10 = *(v7 - 2);
      uint64_t v13 = *(v7 - 5);
      uint64_t v12 = *(v7 - 4);
      *(void *)&long long v27 = *(v7 - 6);
      uint64_t v14 = v27;
      *((void *)&v27 + 1) = v13;
      uint64_t v28 = v12;
      uint64_t v29 = v11;
      uint64_t v30 = v10;
      char v31 = v9;
      uint64_t v32 = v8;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v15 = (void (*)(void *, void))specialized OrderedDictionary.subscript.modify(v24, v14);
      if (*(void *)(v16 + 8))
      {
        v26[0] = v19;
        v26[1] = v18;
        v26[2] = v33;
        v26[3] = v20;
        v26[4] = v21;
        v26[5] = v22;
        v26[6] = v23;
        long long v25 = *v6;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        outlined retain of String((uint64_t)&v25);
        specialized OrderedDictionary.subscript.setter(v26, &v27);
      }
      v15(v24, 0);
      v7 += 7;
      swift_bridgeObjectRelease();
      swift_release();
      --v4;
    }
    while (v4);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in Graph.insert<A>(_:)(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v1;
  v4[2] = *(_OWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  long long v2 = *(_OWORD *)(a1 + 72);
  v6[0] = *(_OWORD *)(a1 + 56);
  v6[1] = v2;
  _OWORD v6[2] = *(_OWORD *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 104);
  return Graph.connect(_:to:)((uint64_t)v4, (unint64_t)v6);
}

uint64_t partial apply for closure #1 in Graph.sinkNodes()@<X0>(unint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in Graph.sinkNodes()(a1, a2, *(void *)(v3 + 16), a3);
}

void *outlined release of Output??(void *a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t outlined copy of Output??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return outlined copy of Output?(a1, a2);
  }
  return a1;
}

unint64_t specialized Sequence.forEach(_:)(unint64_t result, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    return result;
  }
  uint64_t v85 = *(void *)(a4 + 8);
  uint64_t v86 = *(void *)a4;
  Swift::UInt v87 = (long long *)(a4 + 16);
  uint64_t v6 = a2 + 32;
  swift_retain();
  swift_retain();
  uint64_t v7 = 0;
  uint64_t v89 = a3;
  uint64_t v90 = v4;
  uint64_t v91 = v6;
  while (1)
  {
    uint64_t v8 = v6 + 56 * v7;
    Swift::UInt v9 = *(void *)v8;
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t v12 = *(void *)(v8 + 16);
    uint64_t v11 = *(void *)(v8 + 24);
    uint64_t v13 = *(void *)(v8 + 32);
    int v14 = *(unsigned __int8 *)(v8 + 40);
    uint64_t v15 = *(void *)(v8 + 48);
    v117[0] = v9;
    v117[1] = v10;
    uint64_t v107 = v12;
    v117[2] = v12;
    v117[3] = v11;
    uint64_t v120 = v11;
    uint64_t v101 = v13;
    v117[4] = v13;
    int v102 = v14;
    char v118 = v14;
    uint64_t v103 = v15;
    uint64_t v119 = v15;
    uint64_t v16 = (void *)a3[1];
    uint64_t v17 = a3[2];
    uint64_t v18 = v16 + 4;
    uint64_t v19 = v16[2];
    if (*a3)
    {
      uint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v9, (uint64_t)v18, v19, (void *)(*a3 + 16), *a3 + 32);
      if (v20) {
        goto LABEL_6;
      }
      if ((result & 0x8000000000000000) != 0) {
        break;
      }
      goto LABEL_24;
    }
    if (!v19) {
      goto LABEL_6;
    }
    if (*v18 == v9)
    {
      uint64_t result = 0;
      goto LABEL_24;
    }
    if (v19 == 1) {
      goto LABEL_6;
    }
    if (v16[5] == v9)
    {
      uint64_t result = 1;
      goto LABEL_24;
    }
    if (v19 == 2) {
      goto LABEL_6;
    }
    if (v16[6] == v9)
    {
      uint64_t result = 2;
      goto LABEL_24;
    }
    uint64_t v21 = 0;
    uint64_t v22 = v16 + 7;
    do
    {
      if (v19 - 3 == v21) {
        goto LABEL_6;
      }
      uint64_t v23 = v22[v21++];
    }
    while (v23 != v9);
    uint64_t result = v21 + 2;
    if (v21 + 2 < 0) {
      break;
    }
LABEL_24:
    if (result >= *(void *)(v17 + 16)) {
      goto LABEL_106;
    }
    uint64_t v24 = (void *)(v17 + 48 * result);
    uint64_t v25 = v24[7];
    uint64_t v26 = v24[8];
    uint64_t v27 = *(void *)(v26 + 16);
    uint64_t v108 = v9;
    uint64_t v109 = v10;
    uint64_t v97 = v24[9];
    uint64_t v100 = v7;
    uint64_t v94 = v24[5];
    uint64_t v96 = v24[4];
    if (!v25)
    {
      if (!v27)
      {
        swift_retain();
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
LABEL_4:
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of Graph.Adjacent?(v96, v94);
        swift_bridgeObjectRelease();
LABEL_5:
        swift_release();
        a3 = v89;
        uint64_t v4 = v90;
        uint64_t v6 = v91;
        uint64_t v7 = v100;
        goto LABEL_6;
      }
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      unint64_t v28 = 0;
      uint64_t v47 = (void *)(v26 + 80);
      uint64_t v106 = v27;
      while (2)
      {
        if (*(v47 - 6) == v9)
        {
          uint64_t v48 = *(v47 - 4);
          uint64_t v50 = *(v47 - 3);
          uint64_t v49 = *(v47 - 2);
          char v51 = *((unsigned char *)v47 - 8);
          uint64_t v52 = *v47;
          char v53 = *(uint64_t (**)(uint64_t))(*(void *)*(v47 - 5) + 128);
          swift_retain();
          swift_bridgeObjectRetain();
          if (v53(v109))
          {
            if (v48 == v107 && v50 == v120)
            {
              swift_bridgeObjectRelease();
              uint64_t result = swift_release();
              Swift::UInt v9 = v108;
              uint64_t v27 = v106;
              if (v51) {
                goto LABEL_46;
              }
              goto LABEL_51;
            }
            char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            Swift::UInt v9 = v108;
            uint64_t v27 = v106;
            if (v55)
            {
              if (v51)
              {
LABEL_46:
                char v56 = v102;
                if (v52 != v103) {
                  char v56 = 0;
                }
                if (v56) {
                  goto LABEL_28;
                }
                goto LABEL_37;
              }
LABEL_51:
              int v57 = v102 ^ 1;
              if (v49 != v101) {
                int v57 = 0;
              }
              if (v57 == 1 && v52 == v103) {
                goto LABEL_28;
              }
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_release();
            Swift::UInt v9 = v108;
            uint64_t v27 = v106;
          }
        }
LABEL_37:
        v47 += 7;
        if (v27 == ++v28) {
          goto LABEL_4;
        }
        continue;
      }
    }
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    unint64_t v28 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v117, v26 + 32, v27, (void *)(v25 + 16), v25 + 32);
    char v30 = v29;
    uint64_t result = swift_release();
    if (v30) {
      goto LABEL_4;
    }
    if ((v28 & 0x8000000000000000) != 0) {
      goto LABEL_108;
    }
LABEL_28:
    if (v28 >= *(void *)(v97 + 16)) {
      goto LABEL_107;
    }
    char v31 = (void *)(v97 + 56 * v28);
    uint64_t v33 = v31[4];
    uint64_t v32 = v31[5];
    unint64_t v35 = v31[6];
    unint64_t v34 = v31[7];
    uint64_t v37 = v31[8];
    uint64_t v36 = v31[9];
    uint64_t v38 = v31[10];
    outlined copy of Output?(v33, v32);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Graph.Adjacent?(v96, v94);
    if (!v32)
    {
      long long v116 = *v87;
      swift_retain();
      outlined retain of String((uint64_t)&v116);
      outlined consume of Input?(v33, 0);
      outlined consume of Input?(v86, v85);
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    char v39 = v36;
    uint64_t v105 = v38;
    uint64_t v6 = v91;
    uint64_t v7 = v100;
    if (v33 != *(void *)a4)
    {
      uint64_t v58 = v33;
      uint64_t v59 = v32;
LABEL_59:
      outlined consume of Input?(v58, v59);
      swift_bridgeObjectRelease();
      swift_release();
      a3 = v89;
      uint64_t v4 = v90;
      goto LABEL_6;
    }
    uint64_t v40 = *(void *)(a4 + 8);
    long long v115 = *v87;
    uint64_t v98 = *(uint64_t (**)(uint64_t))(*(void *)v32 + 128);
    unint64_t v41 = v35;
    unint64_t v104 = v34;
    char v42 = v39;
    outlined copy of Output?(v33, v32);
    swift_retain();
    outlined retain of String((uint64_t)&v115);
    uint64_t v43 = v37;
    if ((v98(v40) & 1) == 0)
    {
      swift_release();
      outlined release of String((uint64_t)&v115);
      outlined consume of Input?(v33, v32);
      uint64_t v58 = v33;
      uint64_t v59 = v32;
      goto LABEL_59;
    }
    char v93 = v42;
    uint64_t v95 = v33;
    uint64_t v99 = v32;
    if (__PAIR128__(v104, v41) == v115)
    {
      swift_release();
      outlined release of String((uint64_t)&v115);
      uint64_t v45 = v37;
      char v44 = v93;
      uint64_t v46 = v105;
      outlined consume of Input?(v33, v32);
      a3 = v89;
      uint64_t v4 = v90;
    }
    else
    {
      char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      outlined release of String((uint64_t)&v115);
      char v44 = v42;
      uint64_t v45 = v43;
      uint64_t v46 = v105;
      outlined consume of Input?(v33, v32);
      a3 = v89;
      uint64_t v4 = v90;
      if ((v60 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_102;
      }
    }
    char v61 = *(unsigned char *)(a4 + 40);
    if (v44)
    {
      if (*(unsigned char *)(a4 + 40)) {
        goto LABEL_65;
      }
    }
    else
    {
      if (v45 != *(void *)(a4 + 32)) {
        char v61 = 1;
      }
      if ((v61 & 1) == 0)
      {
LABEL_65:
        if (v46 == *(void *)(a4 + 48))
        {
          uint64_t v62 = (void (*)(void *, void))specialized OrderedDictionary.subscript.modify(v110, v108);
          if (v63[1])
          {
            uint64_t v64 = v63[3];
            uint64_t v65 = v63[4];
            uint64_t v66 = *(void *)(v65 + 16);
            uint64_t v84 = v62;
            if (v64)
            {
              swift_retain();
              swift_bridgeObjectRetain();
              swift_retain();
              swift_retain();
              Swift::Int v67 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v117, v65 + 32, v66, (void *)(v64 + 16), v64 + 32);
              char v69 = v68;
              uint64_t v71 = v70;
              swift_release();
              swift_release();
              if ((v69 & 1) == 0)
              {
                uint64_t v72 = v71;
                uint64_t v4 = v90;
                uint64_t v6 = v91;
                goto LABEL_70;
              }
              swift_bridgeObjectRelease();
              swift_release();
              uint64_t v4 = v90;
              uint64_t v6 = v91;
LABEL_101:
              v84(v110, 0);
              outlined consume of Input?(v95, v99);
              swift_bridgeObjectRelease();
              goto LABEL_102;
            }
            if (!v66)
            {
              swift_retain();
              swift_bridgeObjectRetain();
              swift_retain();
LABEL_100:
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              a3 = v89;
              uint64_t v4 = v90;
              uint64_t v6 = v91;
              uint64_t v7 = v100;
              goto LABEL_101;
            }
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
            Swift::Int v67 = 0;
            uint64_t v73 = (void *)(v65 + 80);
            uint64_t v92 = v66;
            while (1)
            {
              if (*(v73 - 6) != v108) {
                goto LABEL_79;
              }
              uint64_t v74 = *(v73 - 4);
              uint64_t v75 = *(v73 - 3);
              uint64_t v76 = *(v73 - 2);
              char v77 = *((unsigned char *)v73 - 8);
              uint64_t v78 = *v73;
              uint64_t v79 = *(uint64_t (**)(uint64_t))(*(void *)*(v73 - 5) + 128);
              swift_retain();
              swift_bridgeObjectRetain();
              if ((v79(v109) & 1) == 0)
              {
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v66 = v92;
                goto LABEL_79;
              }
              if (v74 == v107 && v75 == v120)
              {
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v66 = v92;
                if (v77) {
                  goto LABEL_88;
                }
              }
              else
              {
                char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v66 = v92;
                if ((v81 & 1) == 0) {
                  goto LABEL_79;
                }
                if (v77)
                {
LABEL_88:
                  int v82 = v102;
                  if (v78 != v103) {
                    int v82 = 0;
                  }
                  if (v82 == 1) {
                    goto LABEL_97;
                  }
                  goto LABEL_79;
                }
              }
              int v83 = v102 ^ 1;
              if (v76 != v101) {
                int v83 = 0;
              }
              if (v83 == 1 && v78 == v103)
              {
LABEL_97:
                swift_release();
                uint64_t v72 = 0;
                a3 = v89;
                uint64_t v4 = v90;
                uint64_t v6 = v91;
                uint64_t v7 = v100;
LABEL_70:
                specialized OrderedSet._removeExistingMember(at:in:)(v67, v72, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(uint64_t))specialized OrderedSet._regenerateHashTable(), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:), (uint64_t)v111);
                swift_release();
                long long v114 = v112;
                outlined release of String((uint64_t)&v114);
                specialized ContiguousArray.remove(at:)(v67, (uint64_t)v113);
                swift_bridgeObjectRelease();
                swift_release();
                outlined release of Input?(v113);
                goto LABEL_101;
              }
LABEL_79:
              v73 += 7;
              if (v66 == ++v67) {
                goto LABEL_100;
              }
            }
          }
          v62(v110, 0);
        }
        outlined consume of Input?(v33, v99);
        swift_bridgeObjectRelease();
LABEL_102:
        swift_release();
        goto LABEL_6;
      }
    }
    outlined consume of Input?(v33, v99);
    swift_release();
    swift_bridgeObjectRelease();
LABEL_6:
    if (++v7 == v4)
    {
      swift_release();
      return swift_release();
    }
  }
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11ShaderGraph0cD4NodeV_s5NeverOSSTg504_s11c41Graph0B0V12describeEdgeySSAA0D0VFSSAA0aB4E6VXEfU_AD4EdgeVTf1cn_nTf4ng_nTm(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, void *, uint64_t))
{
  void (*v21)(uint64_t *__return_ptr, void *, uint64_t);

  uint64_t v21 = a4;
  outlined init with take of MetalFunctionNode?(a1, (uint64_t)v17, &demangling cache variable for type metadata for ShaderGraphNode?);
  unint64_t v7 = v17[0];
  uint64_t v6 = v17[1];
  uint64_t v8 = v17[2];
  uint64_t v9 = v17[3];
  uint64_t v10 = v17[4];
  char v11 = v18;
  outlined init with take of MetalFunctionNode?(a1, (uint64_t)v19, &demangling cache variable for type metadata for ShaderGraphNode?);
  if (!v20) {
    return 0;
  }
  v14[0] = v7;
  v14[1] = v6;
  _OWORD v14[2] = v8;
  v14[3] = v9;
  void v14[4] = v10;
  char v15 = v11 & 1;
  outlined copy of NodePersonality(v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(&v16, v14, a2);
  outlined consume of NodePersonality(v7);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4) {
    return v16;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Input and conformance Input()
{
  unint64_t result = lazy protocol witness table cache variable for type Input and conformance Input;
  if (!lazy protocol witness table cache variable for type Input and conformance Input)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Input and conformance Input;
  if (!lazy protocol witness table cache variable for type Input and conformance Input)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Output and conformance Output()
{
  unint64_t result = lazy protocol witness table cache variable for type Output and conformance Output;
  if (!lazy protocol witness table cache variable for type Output and conformance Output)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Output and conformance Output);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Output and conformance Output;
  if (!lazy protocol witness table cache variable for type Output and conformance Output)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Output and conformance Output);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Edge and conformance Edge()
{
  unint64_t result = lazy protocol witness table cache variable for type Edge and conformance Edge;
  if (!lazy protocol witness table cache variable for type Edge and conformance Edge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Edge and conformance Edge);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID;
  if (!lazy protocol witness table cache variable for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID;
  if (!lazy protocol witness table cache variable for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderGraphNode.ID and conformance ShaderGraphNode.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShaderGraphNode and conformance ShaderGraphNode()
{
  unint64_t result = lazy protocol witness table cache variable for type ShaderGraphNode and conformance ShaderGraphNode;
  if (!lazy protocol witness table cache variable for type ShaderGraphNode and conformance ShaderGraphNode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderGraphNode and conformance ShaderGraphNode);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Graph.Iterator<A>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type Graph.DepthFirstEdgeIterator and conformance Graph.DepthFirstEdgeIterator()
{
  unint64_t result = lazy protocol witness table cache variable for type Graph.DepthFirstEdgeIterator and conformance Graph.DepthFirstEdgeIterator;
  if (!lazy protocol witness table cache variable for type Graph.DepthFirstEdgeIterator and conformance Graph.DepthFirstEdgeIterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Graph.DepthFirstEdgeIterator and conformance Graph.DepthFirstEdgeIterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Graph.BreathFirstEdgeIterator and conformance Graph.BreathFirstEdgeIterator()
{
  unint64_t result = lazy protocol witness table cache variable for type Graph.BreathFirstEdgeIterator and conformance Graph.BreathFirstEdgeIterator;
  if (!lazy protocol witness table cache variable for type Graph.BreathFirstEdgeIterator and conformance Graph.BreathFirstEdgeIterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Graph.BreathFirstEdgeIterator and conformance Graph.BreathFirstEdgeIterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Graph.ID and conformance Graph.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type Graph.ID and conformance Graph.ID;
  if (!lazy protocol witness table cache variable for type Graph.ID and conformance Graph.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Graph.ID and conformance Graph.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Graph.Adjacent and conformance Graph.Adjacent()
{
  unint64_t result = lazy protocol witness table cache variable for type Graph.Adjacent and conformance Graph.Adjacent;
  if (!lazy protocol witness table cache variable for type Graph.Adjacent and conformance Graph.Adjacent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Graph.Adjacent and conformance Graph.Adjacent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Graph and conformance Graph()
{
  unint64_t result = lazy protocol witness table cache variable for type Graph and conformance Graph;
  if (!lazy protocol witness table cache variable for type Graph and conformance Graph)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Graph and conformance Graph);
  }
  return result;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for Input()
{
  return &type metadata for Input;
}

uint64_t destroy for Input()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Input(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Input(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for Input(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for Output()
{
  return &type metadata for Output;
}

uint64_t destroy for Edge()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Edge(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Edge(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v5;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for Edge(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for Edge(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Edge(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Edge()
{
  return &type metadata for Edge;
}

uint64_t destroy for ShaderGraphNode(unint64_t *a1)
{
  outlined consume of NodePersonality(*a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ShaderGraphNode(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a2;
  outlined copy of NodePersonality(*(void *)a2);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ShaderGraphNode(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a2;
  outlined copy of NodePersonality(*(void *)a2);
  unint64_t v5 = *(void *)a1;
  *(void *)a1 = v4;
  outlined consume of NodePersonality(v5);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  return a1;
}

uint64_t assignWithTake for ShaderGraphNode(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  outlined consume of NodePersonality(v4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for ShaderGraphNode()
{
  return &type metadata for ShaderGraphNode;
}

ValueMetadata *type metadata accessor for ShaderGraphNode.ID()
{
  return &type metadata for ShaderGraphNode.ID;
}

uint64_t destroy for Graph(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(*(void *)(a1 + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(*(void *)(a1 + 128));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Graph(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  unint64_t v9 = *(void *)(a2 + 80);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v9);
  uint64_t v10 = *(void *)(a2 + 88);
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 88) = v10;
  uint64_t v12 = *(void *)(a2 + 104);
  uint64_t v13 = *(void *)(a2 + 112);
  *(void *)(a1 + 96) = v11;
  *(void *)(a1 + 104) = v12;
  *(void *)(a1 + 112) = v13;
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  unint64_t v14 = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v14);
  uint64_t v15 = *(void *)(a2 + 136);
  uint64_t v16 = *(void *)(a2 + 144);
  *(void *)(a1 + 128) = v14;
  *(void *)(a1 + 136) = v15;
  uint64_t v17 = *(void *)(a2 + 152);
  uint64_t v18 = *(void *)(a2 + 160);
  *(void *)(a1 + 144) = v16;
  *(void *)(a1 + 152) = v17;
  *(void *)(a1 + 160) = v18;
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Graph(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  unint64_t v4 = *(void *)(a2 + 80);
  outlined copy of NodePersonality(v4);
  unint64_t v5 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v4;
  outlined consume of NodePersonality(v5);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v6 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v6;
  unint64_t v7 = *(void *)(a2 + 128);
  outlined copy of NodePersonality(v7);
  unint64_t v8 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = v7;
  outlined consume of NodePersonality(v8);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v9 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v9;
  return a1;
}

__n128 __swift_memcpy169_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(_OWORD *)(a1 + 153) = *(long long *)((char *)a2 + 153);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for Graph(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  unint64_t v5 = *(void *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  outlined consume of NodePersonality(v5);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v6;
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  unint64_t v7 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  outlined consume of NodePersonality(v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v8;
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for Graph(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 169)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Graph(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 168) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 169) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 169) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Graph()
{
  return &type metadata for Graph;
}

uint64_t destroy for Graph.Iterator()
{
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for Graph.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for Graph.Iterator(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Graph.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Input(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Input(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for Graph.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for Graph.DepthFirstEdgeIterator()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Graph.DepthFirstEdgeIterator(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Graph.DepthFirstEdgeIterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Graph.DepthFirstEdgeIterator(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Graph.DepthFirstEdgeIterator()
{
  return &type metadata for Graph.DepthFirstEdgeIterator;
}

uint64_t destroy for Graph.BreathFirstEdgeIterator(void *a1, uint64_t a2)
{
  return destroy for Graph.BreathFirstEdgeIterator(a1, a2, MEMORY[0x263F8EEA0]);
}

void *initializeWithCopy for Graph.BreathFirstEdgeIterator(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Graph.BreathFirstEdgeIterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Graph.BreathFirstEdgeIterator(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for Graph.BreathFirstEdgeIterator(a1, a2, a3, MEMORY[0x263F8EEA0]);
}

ValueMetadata *type metadata accessor for Graph.BreathFirstEdgeIterator()
{
  return &type metadata for Graph.BreathFirstEdgeIterator;
}

ValueMetadata *type metadata accessor for Graph.ID()
{
  return &type metadata for Graph.ID;
}

uint64_t destroy for Graph.Adjacent(void *a1, uint64_t a2)
{
  return destroy for Graph.BreathFirstEdgeIterator(a1, a2, MEMORY[0x263F8EED8]);
}

uint64_t destroy for Graph.BreathFirstEdgeIterator(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  swift_release();
  swift_release();
  swift_release();
  a3(a1[3]);
  a3(a1[4]);
  uint64_t v4 = a1[5];
  return a3(v4);
}

void *initializeWithCopy for Graph.Adjacent(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for Graph.Adjacent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Graph.Adjacent(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for Graph.BreathFirstEdgeIterator(a1, a2, a3, MEMORY[0x263F8EED8]);
}

uint64_t assignWithTake for Graph.BreathFirstEdgeIterator(uint64_t a1, _OWORD *a2, uint64_t a3, void (*a4)(uint64_t))
{
  swift_release();
  *(_OWORD *)a1 = *a2;
  swift_release();
  swift_release();
  uint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];
  a4(v7);
  a4(*(void *)(a1 + 32));
  uint64_t v8 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = a2[2];
  a4(v8);
  return a1;
}

ValueMetadata *type metadata accessor for Graph.Adjacent()
{
  return &type metadata for Graph.Adjacent;
}

uint64_t sub_25C385644()
{
  unint64_t v1 = *(void *)(v0 + 16);
  if ((~v1 & 0xF000000000000007) != 0) {
    outlined consume of NestedError(v1);
  }
  return MEMORY[0x270FA0238](v0, 24, 7);
}

unint64_t lazy protocol witness table accessor for type MaterialXTarget and conformance MaterialXTarget()
{
  unint64_t result = lazy protocol witness table cache variable for type MaterialXTarget and conformance MaterialXTarget;
  if (!lazy protocol witness table cache variable for type MaterialXTarget and conformance MaterialXTarget)
  {
    type metadata accessor for MaterialXTarget();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialXTarget and conformance MaterialXTarget);
  }
  return result;
}

uint64_t closure #1 in Graph.removeEdges(connectedTo:)partial apply(uint64_t a1, uint64_t a2)
{
  return closure #1 in Graph.removeEdges(connectedTo:)(a1, a2);
}

uint64_t closure #2 in Graph.removeEdges(connectedTo:)partial apply(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return closure #2 in Graph.removeEdges(connectedTo:)(a1, a2, a3, *(void **)(v3 + 16));
}

unint64_t lazy protocol witness table accessor for type FunctionNodeID and conformance FunctionNodeID()
{
  unint64_t result = lazy protocol witness table cache variable for type FunctionNodeID and conformance FunctionNodeID;
  if (!lazy protocol witness table cache variable for type FunctionNodeID and conformance FunctionNodeID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FunctionNodeID and conformance FunctionNodeID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FunctionNodeID and conformance FunctionNodeID;
  if (!lazy protocol witness table cache variable for type FunctionNodeID and conformance FunctionNodeID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FunctionNodeID and conformance FunctionNodeID);
  }
  return result;
}

uint64_t specialized OrderedSet._minimumCapacity.getter(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    swift_beginAccess();
    unint64_t result = 0;
    unint64_t v2 = *(void *)(v1 + 16) & 0x3FLL;
    if (v2 >= 5 && v2 != (*(void *)(v1 + 24) & 0x3FLL))
    {
      double v4 = (double)(1 << v2) * 0.25;
      if ((~*(void *)&v4 & 0x7FF0000000000000) != 0)
      {
        if (v4 > -9.22337204e18)
        {
          if (v4 < 9.22337204e18) {
            return (uint64_t)v4;
          }
LABEL_13:
          __break(1u);
          return result;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t outlined consume of MetalLibrary?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return outlined consume of MetalLibrary(result, a2 & 1);
  }
  return result;
}

uint64_t *outlined release of Graph.Adjacent?(uint64_t *a1)
{
  return a1;
}

uint64_t *SGMaterialConfiguration.default.unsafeMutableAddressor()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  return &static SGMaterialConfiguration.default;
}

id SGMaterialConfiguration.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id SGMaterialConfiguration.init()()
{
  *(void *)&v0[OBJC_IVAR___SGMaterialConfiguration_customGeometryProperties] = MEMORY[0x263F8EE78];
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SGMaterialConfiguration();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t SGMaterialConfiguration.customGeometryProperties.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SGMaterialConfiguration.customGeometryProperties.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___SGMaterialConfiguration_customGeometryProperties);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SGMaterialConfiguration.customGeometryProperties.modify())()
{
  return XMLParserDelegate.StringNode.children.modify;
}

id one-time initialization function for default()
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SGMaterialConfiguration()), sel_init);
  static SGMaterialConfiguration.default = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for SGMaterialConfiguration()
{
  return self;
}

id static SGMaterialConfiguration.default.getter()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static SGMaterialConfiguration.default;
  return v0;
}

uint64_t static SGMaterialConfiguration.CodingKeys.== infix(_:_:)()
{
  return 1;
}

void SGMaterialConfiguration.CodingKeys.hash(into:)()
{
}

uint64_t SGMaterialConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  return specialized SGMaterialConfiguration.CodingKeys.init(stringValue:)(a1, a2) & 1;
}

uint64_t SGMaterialConfiguration.CodingKeys.init(intValue:)()
{
  return 1;
}

Swift::Int SGMaterialConfiguration.CodingKeys.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t SGMaterialConfiguration.CodingKeys.intValue.getter()
{
  return 0;
}

unint64_t SGMaterialConfiguration.CodingKeys.stringValue.getter()
{
  return 0xD000000000000018;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SGMaterialConfiguration.CodingKeys()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SGMaterialConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SGMaterialConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SGMaterialConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SGMaterialConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SGMaterialConfiguration.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SGMaterialConfiguration.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys();
  uint64_t v8 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[1] = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v2) + 0x58))(v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGGeometryPropertyDefinition]);
  lazy protocol witness table accessor for type [SGGeometryPropertyDefinition] and conformance <A> [A](&lazy protocol witness table cache variable for type [SGGeometryPropertyDefinition] and conformance <A> [A], &lazy protocol witness table cache variable for type SGGeometryPropertyDefinition and conformance SGGeometryPropertyDefinition);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void *SGMaterialConfiguration.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SGMaterialConfiguration.init(from:)(a1);
}

void *SGMaterialConfiguration.init(from:)(void *a1)
{
  id v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SGMaterialConfiguration.CodingKeys>);
  uint64_t v17 = *(void *)(v5 - 8);
  uint64_t v18 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = &v1[OBJC_IVAR___SGMaterialConfiguration_customGeometryProperties];
  *(void *)&v1[OBJC_IVAR___SGMaterialConfiguration_customGeometryProperties] = MEMORY[0x263F8EE78];
  long long v9 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys();
  id v10 = v3;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);

    swift_bridgeObjectRelease();
    type metadata accessor for SGMaterialConfiguration();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v11 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGGeometryPropertyDefinition]);
    lazy protocol witness table accessor for type [SGGeometryPropertyDefinition] and conformance <A> [A](&lazy protocol witness table cache variable for type [SGGeometryPropertyDefinition] and conformance <A> [A], &lazy protocol witness table cache variable for type SGGeometryPropertyDefinition and conformance SGGeometryPropertyDefinition);
    uint64_t v12 = v18;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v12);
    uint64_t v14 = v20;
    swift_beginAccess();
    *(void *)uint64_t v8 = v14;

    swift_bridgeObjectRelease();
    uint64_t v15 = (objc_class *)type metadata accessor for SGMaterialConfiguration();
    v19.receiver = v10;
    v19.super_class = v15;
    long long v9 = objc_msgSendSuper2(&v19, sel_init);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  return v9;
}

uint64_t SGMaterialConfiguration.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v9);
  if (!v10)
  {
    outlined destroy of Any?((uint64_t)v9);
    goto LABEL_6;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    unsigned __int8 v6 = 0;
    return v6 & 1;
  }
  if (v8 == v1)
  {

    unsigned __int8 v6 = 1;
  }
  else
  {
    id v3 = (void *)MEMORY[0x263F8EED0];
    unint64_t v4 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x58))();
    uint64_t v5 = (*(uint64_t (**)(void))((*v3 & *v8) + 0x58))();
    unsigned __int8 v6 = specialized static Array<A>.== infix(_:_:)(v4, v5);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v6 & 1;
}

id SGMaterialConfiguration.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SGMaterialConfiguration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SGMaterialConfiguration@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 120))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SGMaterialConfiguration()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **v0) + 0x70))();
}

uint64_t specialized SGMaterialConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000018 && a2 == 0x800000025C4262D0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t lazy protocol witness table accessor for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGMaterialConfiguration.CodingKeys and conformance SGMaterialConfiguration.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [SGGeometryPropertyDefinition] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGGeometryPropertyDefinition]);
    lazy protocol witness table accessor for type SGGeometryPropertyDefinition and conformance SGGeometryPropertyDefinition(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SGGeometryPropertyDefinition and conformance SGGeometryPropertyDefinition(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SGGeometryPropertyDefinition();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25C386D88@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x58))();
  *a2 = result;
  return result;
}

uint64_t sub_25C386DE4(uint64_t a1, void **a2)
{
  char v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & **a2) + 0x60);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t method lookup function for SGMaterialConfiguration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SGMaterialConfiguration);
}

uint64_t dispatch thunk of SGMaterialConfiguration.customGeometryProperties.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x58))();
}

uint64_t dispatch thunk of SGMaterialConfiguration.customGeometryProperties.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of SGMaterialConfiguration.customGeometryProperties.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of SGMaterialConfiguration.encode(to:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SGMaterialConfiguration.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

unsigned char *storeEnumTagSinglePayload for SGMaterialConfiguration.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25C387008);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SGMaterialConfiguration.CodingKeys()
{
  return &type metadata for SGMaterialConfiguration.CodingKeys;
}

uint64_t OrderedDictionary<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v42 = a8;
  uint64_t v39 = a7;
  uint64_t v31 = a4;
  uint64_t v37 = *(void (***)(char *, uint64_t))(a6 - 8);
  uint64_t v33 = a9;
  uint64_t v14 = MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v38 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v44 = type metadata accessor for Optional();
  unint64_t v41 = *(void (***)(char *, char *, uint64_t))(v44 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v44);
  uint64_t v43 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v31 - v22;
  uint64_t v24 = a1[3];
  uint64_t v40 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v24);
  dispatch thunk of Encoder.unkeyedContainer()();
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v47 = v31;
  uint64_t v48 = 0;
  uint64_t v25 = type metadata accessor for OrderedDictionary.Iterator();
  v41 += 4;
  uint64_t v42 = v25;
  uint64_t v40 = TupleTypeMetadata2 - 8;
  unint64_t v34 = (void (**)(char *, char *, uint64_t))(v37 + 4);
  unint64_t v35 = (void (**)(char *, char *, uint64_t))(v32 + 32);
  uint64_t v36 = v37 + 1;
  uint64_t v37 = (void (**)(char *, uint64_t))(v32 + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v26 = v38;
  while (1)
  {
    uint64_t v27 = v43;
    OrderedDictionary.Iterator.next()(v42, v43);
    (*v41)(v23, v27, v44);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v23, 1, TupleTypeMetadata2) == 1)break; {
    unint64_t v28 = &v23[*(int *)(TupleTypeMetadata2 + 48)];
    }
    (*v35)(v26, v23, a5);
    (*v34)(v16, v28, a6);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v49, v50);
    uint64_t v29 = v51;
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    if (v29)
    {
      (*v36)(v16, a6);
      (*v37)(v26, a5);
      break;
    }
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v49, v50);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    (*v36)(v16, a6);
    (*v37)(v26, a5);
    uint64_t v51 = 0;
  }
  swift_release();
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> OrderedDictionary<A, B>(void *a1, uint64_t *a2, uint64_t a3)
{
  return OrderedDictionary<>.encode(to:)(a1, *v3, v3[1], v3[2], a2[2], a2[3], *(void *)(a3 - 8), a2[4], *(void *)(a3 - 16));
}

uint64_t OrderedDictionary<>.init(from:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v56 = a6;
  uint64_t v51 = a5;
  uint64_t v57 = a4;
  uint64_t v47 = type metadata accessor for DecodingError.Context();
  uint64_t v46 = *(void *)(v47 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v47);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = *(void (***)(uint64_t, uint64_t))(a3 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v44 - v16;
  uint64_t v58 = a2;
  uint64_t v48 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v15);
  objc_super v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v20 = v55;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v20)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return (uint64_t)v14;
  }
  char v53 = v14;
  uint64_t v54 = v17;
  uint64_t v44 = v11;
  char v55 = v19;
  uint64_t v45 = a1;
  uint64_t v14 = (char *)OrderedSet.init()();
  uint64_t v22 = v21;
  static Array._allocateUninitialized(_:)();
  uint64_t v23 = ContiguousArray.init(arrayLiteral:)();
  uint64_t v64 = v14;
  uint64_t v65 = v22;
  uint64_t v66 = v23;
  __swift_project_boxed_opaque_existential_1(v62, (uint64_t)v63);
  if (dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter())
  {
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v62);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v45);
    return (uint64_t)v14;
  }
  uint64_t v49 = (void (**)(char *, uint64_t))(v52 + 1);
  uint64_t v50 = (void (**)(char *, char *, uint64_t))(v52 + 2);
  uint64_t v52 = (void (**)(uint64_t, uint64_t))(v48 + 8);
  uint64_t v25 = v54;
  while (1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v62, (uint64_t)v63);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    swift_retain();
    swift_retain();
    OrderedSet._find(_:)();
    char v27 = v26;
    uint64_t v29 = v28;
    swift_release();
    swift_release();
    __swift_project_boxed_opaque_existential_1(v62, (uint64_t)v63);
    if ((v27 & 1) == 0) {
      break;
    }
    if (dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter())
    {
      uint64_t v39 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v41 = v40;
      uint64_t v42 = (void (**)(char *, uint64_t))v52;
      uint64_t v14 = v63;
      __swift_project_boxed_opaque_existential_1(v62, (uint64_t)v63);
      dispatch thunk of UnkeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104))(v41, *MEMORY[0x263F8DCB8], v39);
      swift_willThrow();
      (*v42)(v55, v58);
      goto LABEL_14;
    }
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v62, (uint64_t)v63);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    uint64_t v30 = (uint64_t)v55;
    uint64_t v31 = v58;
    type metadata accessor for OrderedSet();
    OrderedSet._appendNew(_:in:)(v30, v29);
    (*v50)(v53, v25, a3);
    type metadata accessor for ContiguousArray();
    ContiguousArray.append(_:)();
    (*v49)(v25, a3);
    (*v52)(v30, v31);
    __swift_project_boxed_opaque_existential_1(v62, (uint64_t)v63);
    if (dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter())
    {
      uint64_t v14 = v64;
      goto LABEL_4;
    }
  }
  uint64_t v32 = (void (**)(char *, uint64_t))v52;
  dispatch thunk of UnkeyedDecodingContainer.codingPath.getter();
  unint64_t v60 = 0;
  unint64_t v61 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  unint64_t v60 = 0xD000000000000018;
  unint64_t v61 = 0x800000025C426350;
  __swift_project_boxed_opaque_existential_1(v62, (uint64_t)v63);
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.currentIndex.getter();
  if (!__OFSUB__(result, 1))
  {
    uint64_t v59 = result - 1;
    v33._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    uint64_t v14 = v44;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    uint64_t v34 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v36 = v35;
    uint64_t v37 = v46;
    uint64_t v38 = v47;
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 16))(v35, v14, v47);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v34 - 8) + 104))(v36, *MEMORY[0x263F8DCB8], v34);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v38);
    (*v32)(v55, v58);
LABEL_14:
    uint64_t v43 = (uint64_t)v45;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v62);
    __swift_destroy_boxed_opaque_existential_1Tm(v43);
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v14;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> OrderedDictionary<A, B>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = OrderedDictionary<>.init(from:)(a1, a2[2], a2[3], *(void *)(a3 - 8), a2[4], *(void *)(a3 - 16));
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

Swift::Void __swiftcall OrderedDictionary.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
}

void *OrderedDictionary.partition(by:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 24);
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v8 + 16);
  v12[0] = v8
         + ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80));
  uint64_t v10 = v12[0];
  v12[1] = v9;
  closure #1 in OrderedDictionary.partition(by:)(v12, a1, a2, v7, &v13);
  if (v4) {
    return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v12, v10, v9);
  }
  $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v12, v10, v9);
  return (void *)v13;
}

uint64_t OrderedDictionary.sort(by:)()
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getWitnessTable();
  uint64_t v1 = Sequence.sorted(by:)();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (!v0)
  {
    swift_getTupleTypeMetadata2();
    uint64_t v4 = MEMORY[0x261184200](v1);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v3 = ContiguousArray.count.getter();
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    if (v4 == v3)
    {
      MEMORY[0x270FA5388](result);
      Array.withUnsafeBufferPointer<A>(_:)();
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t OrderedDictionary<>.sort()()
{
  return OrderedDictionary.sort(by:)();
}

Swift::Void __swiftcall OrderedDictionary.shuffle()()
{
  OrderedDictionary.shuffle<A>(using:)((uint64_t)v0, v0);
}

uint64_t OrderedDictionary.shuffle<A>(using:)(uint64_t a1, void *a2)
{
  uint64_t v4 = v2[2];
  uint64_t v5 = a2[3];
  uint64_t result = ContiguousArray.count.getter();
  if (result >= 2)
  {
    uint64_t v7 = a2[2];
    uint64_t v8 = v2;
    uint64_t v9 = a2[4];
    uint64_t v29 = v4;
    uint64_t v30 = OrderedSet.elements.getter();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_getTupleTypeMetadata2();
    uint64_t v10 = static Array._allocateUninitialized(_:)();
    specialized OrderedDictionary.init(dictionaryLiteral:)(v10, v7, v5, v9);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v11 = MEMORY[0x261184200](v30, v7);
    swift_bridgeObjectRelease();
    if (v11 >= 2)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v12 = 0;
      while (1)
      {
        v27[1] = v11;
        uint64_t result = static FixedWidthInteger.random<A>(in:using:)();
        v27[0] = v12;
        if (__OFADD__(v12, v28)) {
          break;
        }
        --v11;
        type metadata accessor for Array();
        swift_getWitnessTable();
        MutableCollection.swapAt(_:_:)();
        v27[0] = v12;
        v28 += v12;
        type metadata accessor for ContiguousArray();
        swift_getWitnessTable();
        MutableCollection.swapAt(_:_:)();
        ++v12;
        if (v11 == 1)
        {
          uint64_t v4 = v29;
          goto LABEL_7;
        }
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_7:
    uint64_t v13 = v8;
    type metadata accessor for Array();
    swift_bridgeObjectRetain_n();
    swift_getWitnessTable();
    uint64_t v14 = Array.init<A>(_:)();
    v27[0] = v14;
    uint64_t v15 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
    uint64_t v16 = type metadata accessor for ContiguousArray();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v18 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)v27, 0, 1, v15, v16, WitnessTable, v9);
    uint64_t v19 = ContiguousArray.count.getter();
    uint64_t v20 = 0;
    if (v19 >= 16)
    {
      swift_retain();
      uint64_t v20 = v18;
    }
    uint64_t v21 = OrderedSet.init(_uniqueElements:_:)(v14, v20);
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    swift_release();
    v27[0] = v4;
    type metadata accessor for ContiguousArray();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_getWitnessTable();
    uint64_t v24 = Array.init<A>(_:)();
    uint64_t v25 = ContiguousArray.count.getter();
    uint64_t v26 = ContiguousArray.count.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    if (v25 != v26)
    {
LABEL_13:
      __break(1u);
      return result;
    }
    *uint64_t v13 = v21;
    v13[1] = v23;
    v13[2] = v24;
  }
  return result;
}

Swift::Void __swiftcall OrderedDictionary.reverse()()
{
}

uint64_t closure #1 in OrderedDictionary.partition(by:)@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(char *, char *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = type metadata accessor for OrderedSet();
  uint64_t result = OrderedSet._partition<A>(values:by:)(v10, v11, a2, a3, v12, a4);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

uint64_t closure #1 in OrderedDictionary.sort(by:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *((void *)&v25 + 1) = a2;
  *(void *)&long long v25 = a1;
  *(void *)&long long v30 = a1;
  *((void *)&v30 + 1) = a2;
  swift_getTupleTypeMetadata2();
  uint64_t v9 = type metadata accessor for UnsafeBufferPointer();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x2611840A0](&v27, v9, WitnessTable);
  long long v29 = v27;
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = a6;
  type metadata accessor for LazySequence();
  swift_getWitnessTable();
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  long long v27 = v30;
  long long v28 = v31;
  type metadata accessor for LazyMapSequence();
  swift_retain();
  swift_getWitnessTable();
  uint64_t v12 = Array.init<A>(_:)();
  *(void *)&long long v27 = v12;
  uint64_t v13 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  uint64_t v14 = type metadata accessor for ContiguousArray();
  uint64_t v15 = swift_getWitnessTable();
  uint64_t v16 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)&v27, 0, 1, v13, v14, v15, a6);
  uint64_t v17 = ContiguousArray.count.getter();
  uint64_t v18 = 0;
  if (v17 >= 16)
  {
    swift_retain();
    uint64_t v18 = v16;
  }
  uint64_t v19 = OrderedSet.init(_uniqueElements:_:)(v12, v18);
  uint64_t v21 = v20;
  swift_release();
  swift_release();
  *a3 = v19;
  a3[1] = v21;
  swift_release();
  swift_release();
  long long v30 = v25;
  MEMORY[0x2611840A0](&v27, v9, WitnessTable);
  long long v29 = v27;
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = a4;
  v22[3] = a5;
  v22[4] = a6;
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  long long v27 = v30;
  long long v28 = v31;
  type metadata accessor for LazyMapSequence();
  swift_getWitnessTable();
  a3[2] = Array.init<A>(_:)();
  return swift_release();
}

uint64_t closure #1 in closure #1 in OrderedDictionary.sort(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = *(int *)(v9 + 56);
  uint64_t v13 = &v11[v12];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, a1, a2);
  uint64_t v16 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v14, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a4, v11, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v13, a3);
}

uint64_t closure #2 in closure #1 in OrderedDictionary.sort(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = *(int *)(v9 + 56);
  uint64_t v13 = &v11[v12];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, a1, a2);
  uint64_t v16 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v14, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a4, v13, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v11, a2);
}

uint64_t closure #1 in OrderedDictionary<>.sort()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v24 = a4;
  uint64_t v25 = a7;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v23 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v20 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16);
  v16((char *)&v20 - v14, a1, a5);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16);
  v17(&v15[*(int *)(TupleTypeMetadata2 + 48)], v21, a6);
  v16(v13, v22, a5);
  v17(&v13[*(int *)(TupleTypeMetadata2 + 48)], v24, a6);
  LOBYTE(v17) = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v23 + 8);
  v18(v13, TupleTypeMetadata2);
  v18(v15, TupleTypeMetadata2);
  return v17 & 1;
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed A, @in_guaranteed B, @in_guaranteed A, @in_guaranteed B) -> (@unowned Bool, @error @owned Error)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 40);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v5(a1, a1 + *(int *)(TupleTypeMetadata2 + 48), a2, a2 + *(int *)(TupleTypeMetadata2 + 48)) & 1;
}

uint64_t partial apply for closure #1 in OrderedDictionary.sort(by:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in OrderedDictionary.sort(by:)(a1, a2, *(uint64_t **)(v2 + 40), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t partial apply for closure #1 in OrderedDictionary<>.sort()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in OrderedDictionary<>.sort()(a1, a2, a3, a4, v4[2], v4[3], v4[4]) & 1;
}

uint64_t sub_25C388F90()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #1 in OrderedDictionary.sort(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in OrderedDictionary.sort(by:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_25C388FAC()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #2 in closure #1 in OrderedDictionary.sort(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in closure #1 in OrderedDictionary.sort(by:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph14FunctionNodeIDVGG_SSs5NeverOTg506_sSi11f7Graph14hi36IDVSSIgyyo_Si6offset_AC7elementtSSs5K194OIegnrzr_TR04_s11a41Graph13createDotText12representing12inputd43IDs06outputhI0SSAA05MetalA7ProgramC_SayAA08c29H2IDVGAJtKF0cH10StatementsL_yS42SSGSayAA0kmH0_pGFSSAaM_pXEfU_SSSi_AItXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v11 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._uint64_t countAndFlagsBits = 2367550;
      v5._object = (void *)0xE300000000000000;
      String.append(_:)(v5);
      v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      ++v3;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = 1735549244;
      *(void *)(v9 + 40) = 0xE400000000000000;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return v11;
}

void createDotText(representing:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  uint64_t v292 = v1;
  int64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
LABEL_5:
    lazy protocol witness table accessor for type DotError and conformance DotError();
    unint64_t v7 = (void *)swift_allocError();
    swift_willThrow();
    goto LABEL_6;
  }
  Swift::String v4 = (uint64_t *)(v1 + 56);
  uint64_t v5 = *(void *)(v1 + 16);
  while (1)
  {
    uint64_t v6 = *v4;
    v4 += 6;
    if (v6 != -7) {
      break;
    }
    if (!--v5) {
      goto LABEL_5;
    }
  }
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Graph>);
  uint64_t v10 = (_OWORD *)swift_allocObject();
  long long v11 = *(_OWORD *)(a1 + 128);
  long long v12 = *(_OWORD *)(a1 + 144);
  long long v13 = *(_OWORD *)(a1 + 96);
  v10[9] = *(_OWORD *)(a1 + 112);
  v10[10] = v11;
  v10[11] = v12;
  *(_OWORD *)((char *)v10 + 185) = *(_OWORD *)(a1 + 153);
  long long v14 = *(_OWORD *)(a1 + 64);
  long long v15 = *(_OWORD *)(a1 + 80);
  long long v16 = *(_OWORD *)(a1 + 32);
  v10[5] = *(_OWORD *)(a1 + 48);
  v10[6] = v14;
  v10[7] = v15;
  v10[8] = v13;
  long long v17 = *(_OWORD *)a1;
  long long v18 = *(_OWORD *)(a1 + 16);
  v10[1] = xmmword_25C418EE0;
  void v10[2] = v17;
  v10[3] = v18;
  v10[4] = v16;
  swift_bridgeObjectRetain();
  outlined retain of [Input]((uint64_t)&v292);
  outlined retain of Graph(a1);
  unint64_t v19 = 0;
  uint64_t v20 = (void *)MEMORY[0x263F8EE78];
  uint64_t v21 = v1 + 56;
  uint64_t v22 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v23 = (void *)(v21 + 48 * v19);
    while (1)
    {
      if (v19 >= v2)
      {
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
        goto LABEL_203;
      }
      if (*v23 != -7) {
        break;
      }
      uint64_t v24 = v19 + 1;
      if (__OFADD__(v19, 1)) {
        goto LABEL_183;
      }
      ++v19;
      v23 += 6;
      if (v24 >= v2) {
        goto LABEL_173;
      }
    }
    unint64_t v25 = *(v23 - 3);
    uint64_t v295 = v21;
    if (v25 >> 61 == 6) {
      break;
    }
    v173 = v20;
    uint64_t v174 = v9;
LABEL_154:
    uint64_t v176 = v173[2];
    int64_t v177 = v22[2];
    int64_t v178 = v177 + v176;
    if (__OFADD__(v177, v176)) {
      goto LABEL_188;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v178 > v22[3] >> 1)
    {
      if (v177 <= v178) {
        int64_t v180 = v177 + v176;
      }
      else {
        int64_t v180 = v177;
      }
      uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)isUniquelyReferenced_nonNull_native, v180, 1, v22);
    }
    uint64_t v21 = v295;
    uint64_t v9 = v174;
    if (v173[2])
    {
      uint64_t v181 = v22[2];
      if ((v22[3] >> 1) - v181 < v176) {
        goto LABEL_192;
      }
      unint64_t v182 = (unint64_t)&v22[22 * v181 + 4];
      if ((unint64_t)(v173 + 4) < v182 + 176 * v176 && v182 < (unint64_t)&v173[22 * v176 + 4]) {
        goto LABEL_215;
      }
      uint64_t v20 = (void *)MEMORY[0x263F8EE78];
      swift_arrayInitWithCopy();
      if (v176)
      {
        uint64_t v184 = v22[2];
        BOOL v116 = __OFADD__(v184, v176);
        uint64_t v185 = v184 + v176;
        if (v116) {
          goto LABEL_193;
        }
        v22[2] = v185;
      }
    }
    else
    {
      uint64_t v20 = (void *)MEMORY[0x263F8EE78];
      if (v176) {
        goto LABEL_189;
      }
    }
    ++v19;
    swift_bridgeObjectRelease();
    if ((uint64_t)v19 >= v2)
    {
LABEL_173:
      outlined release of [Input]((uint64_t)&v292);
      outlined release of [Input]((uint64_t)&v292);
      *(void *)&long long v282 = v10;
      specialized Array.append<A>(contentsOf:)((uint64_t)v22);
      uint64_t v186 = v282;
      *(void *)&long long v282 = v20;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
      uint64_t v187 = v282;
      uint64_t v295 = *(void *)(v186 + 16);
      if (!v295)
      {
LABEL_181:
        swift_bridgeObjectRelease();
        *(void *)&long long v282 = v187;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
        uint64_t v207 = BidirectionalCollection<>.joined(separator:)();
        long long v209 = v208;
        swift_release();
        *(void *)&long long v282 = 0;
        *((void *)&v282 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(136);
        v210._object = (void *)0x800000025C426370;
        v210._uint64_t countAndFlagsBits = 0xD000000000000083;
        String.append(_:)(v210);
        v211._uint64_t countAndFlagsBits = v207;
        v211._object = v209;
        String.append(_:)(v211);
        swift_bridgeObjectRelease();
        v212._uint64_t countAndFlagsBits = 8194570;
        v212._object = (void *)0xE300000000000000;
        String.append(_:)(v212);
        return;
      }
      swift_bridgeObjectRetain();
      uint64_t v188 = 0;
      uint64_t v189 = 32;
      uint64_t v190 = v245;
      while (1)
      {
        long long v191 = *(_OWORD *)(v186 + v189);
        long long v192 = *(_OWORD *)(v186 + v189 + 32);
        v293[1] = *(_OWORD *)(v186 + v189 + 16);
        v293[2] = v192;
        v293[0] = v191;
        long long v193 = *(_OWORD *)(v186 + v189 + 48);
        long long v194 = *(_OWORD *)(v186 + v189 + 64);
        long long v195 = *(_OWORD *)(v186 + v189 + 96);
        v293[5] = *(_OWORD *)(v186 + v189 + 80);
        v293[6] = v195;
        v293[3] = v193;
        v293[4] = v194;
        long long v196 = *(_OWORD *)(v186 + v189 + 112);
        long long v197 = *(_OWORD *)(v186 + v189 + 128);
        long long v198 = *(_OWORD *)(v186 + v189 + 144);
        *(_OWORD *)((char *)v294 + 9) = *(_OWORD *)(v186 + v189 + 153);
        v293[8] = v197;
        v294[0] = v198;
        v293[7] = v196;
        outlined retain of Graph((uint64_t)v293);
        uint64_t v199 = graphDotText(representing:index:)((uint64_t)v293, v188);
        if (v190) {
          break;
        }
        uint64_t v201 = v199;
        uint64_t v202 = v200;
        uint64_t v203 = v186;
        outlined release of Graph((uint64_t)v293);
        *(void *)&long long v282 = v187;
        unint64_t v205 = *(void *)(v187 + 16);
        unint64_t v204 = *(void *)(v187 + 24);
        if (v205 >= v204 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v204 > 1, v205 + 1, 1);
          uint64_t v190 = 0;
          uint64_t v187 = v282;
        }
        ++v188;
        *(void *)(v187 + 16) = v205 + 1;
        uint64_t v206 = v187 + 16 * v205;
        *(void *)(v206 + 32) = v201;
        *(void *)(v206 + 40) = v202;
        v189 += 176;
        uint64_t v186 = v203;
        if (v295 == v188)
        {
          swift_bridgeObjectRelease();
          goto LABEL_181;
        }
      }
      outlined release of Graph((uint64_t)v293);
      swift_release();
      swift_bridgeObjectRelease_n();
      unint64_t v7 = v190;
LABEL_6:
      type metadata accessor for SGError();
      id v8 = v7;
      SGError.__allocating_init(_:)(v7);
      swift_willThrow();

      return;
    }
  }
  v244 = v22;
  long long v26 = *(_OWORD *)((v25 & 0x1FFFFFFFFFFFFFFFLL) + 0x90);
  long long v289 = *(_OWORD *)((v25 & 0x1FFFFFFFFFFFFFFFLL) + 0x80);
  long long v290 = v26;
  v291[0] = *(_OWORD *)((v25 & 0x1FFFFFFFFFFFFFFFLL) + 0xA0);
  *(_OWORD *)((char *)v291 + 9) = *(_OWORD *)((v25 & 0x1FFFFFFFFFFFFFFFLL) + 0xA9);
  long long v27 = *(_OWORD *)((v25 & 0x1FFFFFFFFFFFFFFFLL) + 0x50);
  long long v285 = *(_OWORD *)((v25 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
  long long v286 = v27;
  long long v28 = *(_OWORD *)((v25 & 0x1FFFFFFFFFFFFFFFLL) + 0x70);
  long long v287 = *(_OWORD *)((v25 & 0x1FFFFFFFFFFFFFFFLL) + 0x60);
  long long v288 = v28;
  long long v29 = *(_OWORD *)((v25 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
  long long v282 = *(_OWORD *)((v25 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  long long v283 = v29;
  long long v284 = *(_OWORD *)((v25 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
  uint64_t v243 = v9;
  long long v30 = (_OWORD *)swift_allocObject();
  long long v31 = v286;
  long long v32 = v288;
  long long v33 = v289;
  uint64_t v30[7] = v287;
  v30[8] = v32;
  long long v34 = v284;
  void v30[5] = v285;
  v30[6] = v31;
  *(_OWORD *)((char *)v30 + 185) = *(_OWORD *)((char *)v291 + 9);
  long long v35 = v291[0];
  v30[10] = v290;
  v30[11] = v35;
  v30[9] = v33;
  long long v36 = v282;
  long long v37 = v283;
  v30[1] = xmmword_25C418EE0;
  v30[2] = v36;
  v30[3] = v37;
  v30[4] = v34;
  uint64_t v242 = v30;
  uint64_t v38 = v286;
  unint64_t v39 = *(void *)(v286 + 16);
  if (!v39)
  {
    outlined retain of Graph((uint64_t)&v282);
    outlined retain of Graph((uint64_t)&v282);
    outlined copy of NodePersonality(v25);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v172 = v25;
LABEL_153:
    *(void *)&long long v272 = v242;
    swift_bridgeObjectRetain();
    uint64_t v175 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v175);
    outlined release of Graph((uint64_t)&v282);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v172);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v173 = (void *)v272;
    uint64_t v174 = v243;
    goto LABEL_154;
  }
  long long v241 = v10;
  outlined retain of Graph((uint64_t)&v282);
  swift_bridgeObjectRetain();
  outlined retain of Graph((uint64_t)&v282);
  swift_bridgeObjectRetain();
  unint64_t v240 = v25;
  outlined copy of NodePersonality(v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v40 = 0;
  uint64_t v41 = v38 + 56;
  uint64_t v42 = v20;
  while (1)
  {
    uint64_t v43 = (void *)(v41 + 48 * v40);
    while (1)
    {
      if (v40 >= v39) {
        goto LABEL_184;
      }
      if (*v43 != -7) {
        break;
      }
      uint64_t v44 = v40 + 1;
      if (__OFADD__(v40, 1)) {
        goto LABEL_185;
      }
      ++v40;
      v43 += 6;
      if (v44 >= (uint64_t)v39) {
        goto LABEL_150;
      }
    }
    unint64_t v45 = *(v43 - 3);
    uint64_t v237 = v41;
    uint64_t v238 = v38;
    uint64_t v239 = v39;
    if (v45 >> 61 == 6) {
      break;
    }
    uint64_t v154 = MEMORY[0x263F8EE78];
LABEL_131:
    uint64_t v156 = *(void *)(v154 + 16);
    int64_t v157 = v42[2];
    int64_t v158 = v157 + v156;
    if (__OFADD__(v157, v156)) {
      goto LABEL_194;
    }
    uint64_t v159 = v154;
    uint64_t v160 = v42;
    uint64_t v161 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v162 = v160;
    if ((v161 & 1) == 0 || v158 > v160[3] >> 1)
    {
      if (v157 <= v158) {
        int64_t v163 = v157 + v156;
      }
      else {
        int64_t v163 = v157;
      }
      uint64_t v162 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)v161, v163, 1, v160);
    }
    uint64_t v22 = v244;
    uint64_t v164 = v159;
    uint64_t v165 = *(void *)(v159 + 16);
    unint64_t v39 = v239;
    if (v165)
    {
      uint64_t v166 = v162[2];
      if ((v162[3] >> 1) - v166 < v156) {
        goto LABEL_198;
      }
      unint64_t v167 = (unint64_t)&v162[22 * v166 + 4];
      if (v164 + 32 < v167 + 176 * v156 && v167 < v164 + 32 + 176 * v156) {
        goto LABEL_215;
      }
      uint64_t v169 = v162;
      swift_arrayInitWithCopy();
      if (v156)
      {
        uint64_t v170 = v169[2];
        BOOL v116 = __OFADD__(v170, v156);
        uint64_t v171 = v170 + v156;
        if (v116) {
          goto LABEL_199;
        }
        v169[2] = v171;
      }
    }
    else
    {
      uint64_t v169 = v162;
      if (v156) {
        goto LABEL_195;
      }
    }
    ++v40;
    swift_bridgeObjectRelease();
    uint64_t v42 = v169;
    uint64_t v41 = v237;
    uint64_t v38 = v238;
    if ((uint64_t)v40 >= v239)
    {
LABEL_150:
      swift_bridgeObjectRelease_n();
      unint64_t v172 = v240;
      uint64_t v10 = v241;
      goto LABEL_153;
    }
  }
  long long v232 = v42;
  long long v46 = *(_OWORD *)((v45 & 0x1FFFFFFFFFFFFFFFLL) + 0x90);
  long long v279 = *(_OWORD *)((v45 & 0x1FFFFFFFFFFFFFFFLL) + 0x80);
  long long v280 = v46;
  v281[0] = *(_OWORD *)((v45 & 0x1FFFFFFFFFFFFFFFLL) + 0xA0);
  *(_OWORD *)((char *)v281 + 9) = *(_OWORD *)((v45 & 0x1FFFFFFFFFFFFFFFLL) + 0xA9);
  long long v47 = *(_OWORD *)((v45 & 0x1FFFFFFFFFFFFFFFLL) + 0x50);
  long long v275 = *(_OWORD *)((v45 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
  long long v276 = v47;
  long long v48 = *(_OWORD *)((v45 & 0x1FFFFFFFFFFFFFFFLL) + 0x70);
  long long v277 = *(_OWORD *)((v45 & 0x1FFFFFFFFFFFFFFFLL) + 0x60);
  long long v278 = v48;
  long long v49 = *(_OWORD *)((v45 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
  long long v272 = *(_OWORD *)((v45 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  long long v273 = v49;
  long long v274 = *(_OWORD *)((v45 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
  uint64_t v50 = (_OWORD *)swift_allocObject();
  long long v51 = v276;
  long long v52 = v278;
  long long v53 = v279;
  v50[7] = v277;
  v50[8] = v52;
  long long v54 = v274;
  v50[5] = v275;
  v50[6] = v51;
  *(_OWORD *)((char *)v50 + 185) = *(_OWORD *)((char *)v281 + 9);
  long long v55 = v281[0];
  v50[10] = v280;
  v50[11] = v55;
  v50[9] = v53;
  long long v56 = v272;
  long long v57 = v273;
  v50[1] = xmmword_25C418EE0;
  v50[2] = v56;
  v50[3] = v57;
  v50[4] = v54;
  long long v231 = v50;
  uint64_t v58 = v276;
  if (!*(void *)(v276 + 16))
  {
    outlined retain of Graph((uint64_t)&v272);
    outlined retain of Graph((uint64_t)&v272);
    outlined copy of NodePersonality(v45);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_130:
    *(void *)&long long v262 = v231;
    swift_bridgeObjectRetain();
    uint64_t v155 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v155);
    outlined release of Graph((uint64_t)&v272);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v154 = v262;
    uint64_t v42 = v232;
    goto LABEL_131;
  }
  uint64_t v230 = *(void *)(v276 + 16);
  outlined retain of Graph((uint64_t)&v272);
  swift_bridgeObjectRetain();
  outlined retain of Graph((uint64_t)&v272);
  swift_bridgeObjectRetain();
  unint64_t v229 = v45;
  outlined copy of NodePersonality(v45);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v59 = v230;
  unint64_t v60 = 0;
  uint64_t v61 = v58 + 56;
  uint64_t v62 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    unint64_t v63 = (void *)(v61 + 48 * v60);
    while (1)
    {
      if (v60 >= v59) {
        goto LABEL_186;
      }
      if (*v63 != -7) {
        break;
      }
      uint64_t v64 = v60 + 1;
      if (__OFADD__(v60, 1)) {
        goto LABEL_187;
      }
      ++v60;
      v63 += 6;
      if (v64 >= (uint64_t)v59) {
        goto LABEL_127;
      }
    }
    unint64_t v65 = *(v63 - 3);
    uint64_t v227 = v61;
    uint64_t v228 = v58;
    if (v65 >> 61 == 6) {
      break;
    }
    uint64_t v133 = (void *)MEMORY[0x263F8EE78];
LABEL_108:
    long long v236 = v133;
    uint64_t v144 = v133[2];
    int64_t v145 = v62[2];
    int64_t v146 = v145 + v144;
    if (__OFADD__(v145, v144)) {
      goto LABEL_200;
    }
    uint64_t v147 = swift_isUniquelyReferenced_nonNull_native();
    if ((v147 & 1) == 0 || v146 > v62[3] >> 1)
    {
      if (v145 <= v146) {
        int64_t v148 = v145 + v144;
      }
      else {
        int64_t v148 = v145;
      }
      uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)v147, v148, 1, v62);
    }
    uint64_t v58 = v228;
    if (v236[2])
    {
      uint64_t v149 = v62[2];
      if ((v62[3] >> 1) - v149 < v144) {
        goto LABEL_202;
      }
      unint64_t v150 = (unint64_t)&v62[22 * v149 + 4];
      if ((unint64_t)(v236 + 4) < v150 + 176 * v144 && v150 < (unint64_t)&v236[22 * v144 + 4]) {
        goto LABEL_215;
      }
      swift_arrayInitWithCopy();
      if (v144)
      {
        uint64_t v152 = v62[2];
        BOOL v116 = __OFADD__(v152, v144);
        uint64_t v153 = v152 + v144;
        if (v116) {
          goto LABEL_204;
        }
        v62[2] = v153;
      }
    }
    else if (v144)
    {
      goto LABEL_201;
    }
    ++v60;
    swift_bridgeObjectRelease();
    unint64_t v59 = v230;
    uint64_t v61 = v227;
    if ((uint64_t)v60 >= v230)
    {
LABEL_127:
      swift_bridgeObjectRelease_n();
      unint64_t v45 = v229;
      goto LABEL_130;
    }
  }
  long long v66 = *(_OWORD *)((v65 & 0x1FFFFFFFFFFFFFFFLL) + 0x90);
  long long v269 = *(_OWORD *)((v65 & 0x1FFFFFFFFFFFFFFFLL) + 0x80);
  long long v270 = v66;
  v271[0] = *(_OWORD *)((v65 & 0x1FFFFFFFFFFFFFFFLL) + 0xA0);
  *(_OWORD *)((char *)v271 + 9) = *(_OWORD *)((v65 & 0x1FFFFFFFFFFFFFFFLL) + 0xA9);
  long long v67 = *(_OWORD *)((v65 & 0x1FFFFFFFFFFFFFFFLL) + 0x50);
  long long v265 = *(_OWORD *)((v65 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
  long long v266 = v67;
  long long v68 = *(_OWORD *)((v65 & 0x1FFFFFFFFFFFFFFFLL) + 0x70);
  long long v267 = *(_OWORD *)((v65 & 0x1FFFFFFFFFFFFFFFLL) + 0x60);
  long long v268 = v68;
  long long v69 = *(_OWORD *)((v65 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
  long long v262 = *(_OWORD *)((v65 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  long long v263 = v69;
  long long v264 = *(_OWORD *)((v65 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
  uint64_t v70 = (_OWORD *)swift_allocObject();
  long long v71 = v266;
  long long v72 = v268;
  long long v73 = v269;
  v70[7] = v267;
  v70[8] = v72;
  long long v74 = v264;
  v70[5] = v265;
  v70[6] = v71;
  *(_OWORD *)((char *)v70 + 185) = *(_OWORD *)((char *)v271 + 9);
  long long v75 = v271[0];
  v70[10] = v270;
  v70[11] = v75;
  v70[9] = v73;
  long long v76 = v262;
  long long v77 = v263;
  v70[1] = xmmword_25C418EE0;
  v70[2] = v76;
  v70[3] = v77;
  v70[4] = v74;
  long long v226 = v70;
  uint64_t v78 = v266;
  unint64_t v225 = v65;
  if (!*(void *)(v266 + 16))
  {
    outlined retain of Graph((uint64_t)&v262);
    outlined retain of Graph((uint64_t)&v262);
    outlined copy of NodePersonality(v65);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    long long v135 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_95;
  }
  char v223 = v62;
  uint64_t v224 = *(void *)(v266 + 16);
  outlined retain of Graph((uint64_t)&v262);
  swift_bridgeObjectRetain();
  outlined retain of Graph((uint64_t)&v262);
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v65);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v79 = v224;
  unint64_t v80 = 0;
  uint64_t v81 = v78 + 56;
  int v82 = (void *)MEMORY[0x263F8EE78];
LABEL_35:
  int v83 = (void *)(v81 + 48 * v80);
  uint64_t v84 = v226;
  do
  {
    if (v80 >= v79) {
      goto LABEL_190;
    }
    if (*v83 != -7)
    {
      unint64_t v86 = *(v83 - 3);
      uint64_t v221 = v81;
      uint64_t v222 = v78;
      if (v86 >> 61 == 6)
      {
        uint64_t v219 = v82;
        long long v87 = *(_OWORD *)((v86 & 0x1FFFFFFFFFFFFFFFLL) + 0x90);
        long long v259 = *(_OWORD *)((v86 & 0x1FFFFFFFFFFFFFFFLL) + 0x80);
        long long v260 = v87;
        v261[0] = *(_OWORD *)((v86 & 0x1FFFFFFFFFFFFFFFLL) + 0xA0);
        *(_OWORD *)((char *)v261 + 9) = *(_OWORD *)((v86 & 0x1FFFFFFFFFFFFFFFLL) + 0xA9);
        long long v88 = *(_OWORD *)((v86 & 0x1FFFFFFFFFFFFFFFLL) + 0x50);
        long long v255 = *(_OWORD *)((v86 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
        long long v256 = v88;
        long long v89 = *(_OWORD *)((v86 & 0x1FFFFFFFFFFFFFFFLL) + 0x70);
        long long v257 = *(_OWORD *)((v86 & 0x1FFFFFFFFFFFFFFFLL) + 0x60);
        long long v258 = v89;
        long long v90 = *(_OWORD *)((v86 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
        long long v252 = *(_OWORD *)((v86 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
        long long v253 = v90;
        long long v254 = *(_OWORD *)((v86 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
        unint64_t v233 = v86;
        uint64_t v91 = (_OWORD *)swift_allocObject();
        long long v92 = v258;
        v91[7] = v257;
        v91[8] = v92;
        long long v93 = v256;
        uint64_t v91[5] = v255;
        v91[6] = v93;
        *(_OWORD *)((char *)v91 + 185) = *(_OWORD *)((char *)v261 + 9);
        long long v94 = v261[0];
        long long v95 = v259;
        v91[10] = v260;
        v91[11] = v94;
        v91[9] = v95;
        long long v96 = v252;
        long long v97 = v253;
        long long v98 = v254;
        v91[1] = xmmword_25C418EE0;
        v91[2] = v96;
        v91[3] = v97;
        v91[4] = v98;
        uint64_t v218 = v91;
        uint64_t v99 = v256;
        if (*(void *)(v256 + 16))
        {
          uint64_t v216 = *(void *)(v256 + 16);
          outlined retain of Graph((uint64_t)&v252);
          swift_bridgeObjectRetain();
          outlined retain of Graph((uint64_t)&v252);
          swift_bridgeObjectRetain();
          outlined copy of NodePersonality(v233);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v100 = v216;
          unint64_t v101 = 0;
          int v102 = (void *)MEMORY[0x263F8EE78];
          while (2)
          {
            uint64_t v103 = 48 * v101;
            while (1)
            {
              if (v101 >= v100) {
                goto LABEL_196;
              }
              uint64_t v104 = v99 + v103;
              uint64_t v105 = *(void *)(v99 + v103 + 56);
              if (v105 != -7) {
                break;
              }
              uint64_t v106 = v101 + 1;
              if (__OFADD__(v101, 1)) {
                goto LABEL_197;
              }
              ++v101;
              v103 += 48;
              if (v106 >= (uint64_t)v100) {
                goto LABEL_69;
              }
            }
            uint64_t v214 = v99;
            char v107 = *(unsigned char *)(v104 + 72);
            uint64_t v108 = *(void *)(v104 + 64);
            v247 = *(_OWORD **)(v104 + 32);
            long long v248 = *(_OWORD *)(v104 + 40);
            uint64_t v249 = v105;
            uint64_t v250 = v108;
            char v251 = v107;
            closure #1 in Graph.subgraphs()(&v247, &v246);
            uint64_t v215 = v246;
            uint64_t v217 = *(void *)(v246 + 16);
            int64_t v213 = v102[2];
            int64_t v109 = v213 + v217;
            if (__OFADD__(v213, v217)) {
              goto LABEL_211;
            }
            uint64_t v110 = (void *)swift_isUniquelyReferenced_nonNull_native();
            if (!v110 || v109 > v102[3] >> 1)
            {
              if (v213 <= v109) {
                int64_t v111 = v213 + v217;
              }
              else {
                int64_t v111 = v213;
              }
              int v102 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v110, v111, 1, v102);
            }
            uint64_t v99 = v214;
            if (*(void *)(v215 + 16))
            {
              uint64_t v112 = v102[2];
              if ((v102[3] >> 1) - v112 < v217) {
                goto LABEL_213;
              }
              unint64_t v113 = (unint64_t)&v102[22 * v112 + 4];
              if (v215 + 32 < v113 + 176 * v217 && v113 < v215 + 32 + 176 * v217) {
                goto LABEL_215;
              }
              swift_arrayInitWithCopy();
              if (v217)
              {
                uint64_t v115 = v102[2];
                BOOL v116 = __OFADD__(v115, v217);
                uint64_t v117 = v115 + v217;
                if (v116) {
                  goto LABEL_214;
                }
                v102[2] = v117;
              }
            }
            else if (v217)
            {
              goto LABEL_212;
            }
            ++v101;
            swift_bridgeObjectRelease();
            unint64_t v100 = v216;
            if ((uint64_t)v101 < v216) {
              continue;
            }
            break;
          }
LABEL_69:
          swift_bridgeObjectRelease_n();
          goto LABEL_72;
        }
        outlined retain of Graph((uint64_t)&v252);
        outlined retain of Graph((uint64_t)&v252);
        outlined copy of NodePersonality(v233);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_72:
        v247 = v218;
        swift_bridgeObjectRetain();
        uint64_t v119 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v119);
        outlined release of Graph((uint64_t)&v252);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v233);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v118 = v247;
        int v82 = v219;
      }
      else
      {
        char v118 = (_OWORD *)MEMORY[0x263F8EE78];
      }
      uint64_t v220 = v118;
      int64_t v120 = v82[2];
      uint64_t v234 = *((void *)v118 + 2);
      int64_t v121 = v120 + v234;
      if (__OFADD__(v120, v234)) {
        goto LABEL_207;
      }
      uint64_t v122 = v82;
      uint64_t v123 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v124 = v122;
      if ((v123 & 1) == 0 || v121 > v122[3] >> 1)
      {
        if (v120 <= v121) {
          int64_t v125 = v120 + v234;
        }
        else {
          int64_t v125 = v120;
        }
        uint64_t v124 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)v123, v125, 1, v122);
      }
      if (*((void *)v220 + 2))
      {
        uint64_t v126 = v124[2];
        if ((v124[3] >> 1) - v126 < v234) {
          goto LABEL_209;
        }
        unint64_t v127 = (unint64_t)&v124[22 * v126 + 4];
        if ((unint64_t)(v220 + 2) < v127 + 176 * v234 && v127 < (unint64_t)&v220[11 * v234 + 2]) {
          goto LABEL_215;
        }
        Swift::UInt v129 = v124;
        swift_arrayInitWithCopy();
        if (v234)
        {
          uint64_t v130 = v129[2];
          BOOL v116 = __OFADD__(v130, v234);
          uint64_t v131 = v130 + v234;
          if (v116) {
            goto LABEL_210;
          }
          v129[2] = v131;
        }
      }
      else
      {
        Swift::UInt v129 = v124;
        if (v234) {
          goto LABEL_208;
        }
      }
      ++v80;
      swift_bridgeObjectRelease();
      unint64_t v79 = v224;
      int v82 = v129;
      uint64_t v81 = v221;
      uint64_t v78 = v222;
      if ((uint64_t)v80 >= v224)
      {
        char v132 = v82;
        swift_bridgeObjectRelease_n();
        long long v135 = v132;
        uint64_t v62 = v223;
LABEL_95:
        uint64_t v84 = v226;
        goto LABEL_96;
      }
      goto LABEL_35;
    }
    uint64_t v85 = v80 + 1;
    if (__OFADD__(v80, 1)) {
      goto LABEL_191;
    }
    ++v80;
    v83 += 6;
  }
  while (v85 < (uint64_t)v79);
  char v134 = v82;
  swift_bridgeObjectRelease_n();
  long long v135 = v134;
  uint64_t v62 = v223;
LABEL_96:
  unint64_t v136 = v135[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v137 = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!v137 || (uint64_t v138 = v84, v136)) {
    uint64_t v138 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v137, v136 + 1, 1, v84);
  }
  unint64_t v139 = v135[2];
  long long v235 = v138;
  if (!v139)
  {
    if (v136) {
      goto LABEL_203;
    }
LABEL_107:
    swift_bridgeObjectRelease();
    outlined release of Graph((uint64_t)&v262);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v225);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v133 = v235;
    goto LABEL_108;
  }
  uint64_t v140 = v138[2];
  if ((v138[3] >> 1) - v140 < (uint64_t)v139) {
    goto LABEL_205;
  }
  unint64_t v141 = (unint64_t)&v138[22 * v140 + 4];
  if ((unint64_t)(v135 + 4) < v141 + 176 * v139 && v141 < (unint64_t)&v135[22 * v139 + 4]) {
    goto LABEL_215;
  }
  swift_arrayInitWithCopy();
  if (v139 < v136)
  {
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
    goto LABEL_206;
  }
  uint64_t v142 = v235[2];
  BOOL v116 = __OFADD__(v142, v139);
  uint64_t v143 = v142 + v139;
  if (!v116)
  {
    v235[2] = v143;
    goto LABEL_107;
  }
LABEL_206:
  __break(1u);
LABEL_207:
  __break(1u);
LABEL_208:
  __break(1u);
LABEL_209:
  __break(1u);
LABEL_210:
  __break(1u);
LABEL_211:
  __break(1u);
LABEL_212:
  __break(1u);
LABEL_213:
  __break(1u);
LABEL_214:
  __break(1u);
LABEL_215:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
}

void createDotText(representing:)(char *a1)
{
  int64_t v2 = &a1[OBJC_IVAR___SGGraph_nodes];
  swift_beginAccess();
  unint64_t v3 = *(void *)v2;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v31) {
      goto LABEL_3;
    }
LABEL_15:
    lazy protocol witness table accessor for type DotError and conformance DotError();
    long long v32 = (void *)swift_allocError();
    swift_willThrow();
    type metadata accessor for SGError();
    id v33 = v32;
    SGError.__allocating_init(_:)(v32);
    swift_willThrow();

    return;
  }
  if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_15;
  }
LABEL_3:
  SGGraph.nodegraphs(_:)(0);
  uint64_t v5 = v4;
  v34._uint64_t countAndFlagsBits = graphDotText(_:callNode:)(a1, 0);
  v34._object = v6;
  uint64_t v7 = *(void *)(v5 + 16);
  if (v7)
  {
    swift_retain();
    swift_retain();
    uint64_t v8 = 0;
    uint64_t v9 = (void *)MEMORY[0x263F8EE78];
    uint64_t v35 = v7;
    uint64_t v36 = v5;
    do
    {
      long long v11 = *(unsigned char **)(v5 + 8 * v8 + 32);
      long long v12 = &v11[OBJC_IVAR___SGNode_data];
      unsigned __int8 v13 = v11[OBJC_IVAR___SGNode_data + 80];
      if ((v13 & 0xC0) == 0x40)
      {
        uint64_t v14 = *((void *)v12 + 9);
        uint64_t v38 = *((void *)v12 + 8);
        uint64_t v43 = *((void *)v12 + 7);
        uint64_t v15 = *((void *)v12 + 5);
        uint64_t v41 = v9;
        *(void *)uint64_t v42 = *((void *)v12 + 6);
        uint64_t v16 = *((void *)v12 + 4);
        id v37 = (id)*((void *)v12 + 3);
        uint64_t v17 = *((void *)v12 + 1);
        long long v18 = (void *)*((void *)v12 + 2);
        unint64_t v19 = *(void **)v12;
        unint64_t v39 = v11;
        outlined copy of NodeData(v19, v17, v18, v37, v16, v15, v42[0], v43, v38, v14, v13);
        uint64_t v20 = graphDotText(_:callNode:)((char *)v19, (uint64_t)v11);
        uint64_t v40 = v21;
        uint64_t v22 = v19;
        uint64_t v9 = v41;
        outlined consume of NodeData(v22, v17, v18, v37, v16, v15, v42[0], v43, v38, v14, v13);

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41[2] + 1, 1, v41);
        }
        unint64_t v24 = v9[2];
        unint64_t v23 = v9[3];
        uint64_t v7 = v35;
        if (v24 >= v23 >> 1) {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v9);
        }
        _OWORD v9[2] = v24 + 1;
        uint64_t v10 = &v9[2 * v24];
        v10[4] = v20;
        v10[5] = v40;
        uint64_t v5 = v36;
      }
      ++v8;
    }
    while (v7 != v8);
    swift_release();
    swift_release();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
  long long v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v28._uint64_t countAndFlagsBits = v25;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(136);
  v29._object = (void *)0x800000025C426370;
  v29._uint64_t countAndFlagsBits = 0xD000000000000083;
  String.append(_:)(v29);
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 8194570;
  v30._object = (void *)0xE300000000000000;
  String.append(_:)(v30);
  swift_release();
  swift_release();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v8 = v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      int64_t v9 = v4 + v2;
    }
    else {
      int64_t v9 = v4;
    }
    unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    int64_t v8 = v3[3] >> 1;
  }
  uint64_t v10 = v3[2];
  uint64_t v11 = v8 - v10;
  uint64_t result = specialized Sequence._copySequenceContents(initializing:)(&v48, (uint64_t)&v3[7 * v10 + 4], v8 - v10, v6);
  if (result < v2) {
    goto LABEL_16;
  }
  if (result)
  {
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, result);
    uint64_t v15 = v13 + result;
    if (v14)
    {
      __break(1u);
      goto LABEL_33;
    }
    v3[2] = v15;
  }
  if (result != v11)
  {
LABEL_13:
    uint64_t result = swift_bridgeObjectRelease();
LABEL_14:
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_17:
  if (!v49) {
    goto LABEL_13;
  }
  uint64_t v41 = v1;
  if (__OFSUB__(v49, 1)) {
    goto LABEL_35;
  }
  int64_t v16 = v3[2];
  unint64_t v45 = v49 - 1;
  uint64_t v42 = v48;
  uint64_t v17 = specialized Array.subscript.read(v47, v49 - 1, v48);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  uint64_t v22 = v18[2];
  uint64_t v21 = v18[3];
  uint64_t v23 = v18[4];
  char v24 = *((unsigned char *)v18 + 40);
  uint64_t v25 = v18[6];
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = ((uint64_t (*)(void (**)(void **), void))v17)(v47, 0);
  uint64_t v26 = v19;
  uint64_t v27 = v25;
  uint64_t v28 = v22;
LABEL_21:
  while (1)
  {
    unint64_t v29 = v3[3];
    int64_t v30 = v29 >> 1;
    int64_t v12 = v16 + 1;
    if ((uint64_t)(v29 >> 1) < v16 + 1) {
      break;
    }
    if (v16 < v30) {
      goto LABEL_23;
    }
LABEL_20:
    v3[2] = v16;
  }
  unint64_t v39 = v3;
  uint64_t v40 = v26;
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v16 + 1, 1, v39);
  int64_t v12 = v16 + 1;
  uint64_t v26 = v40;
  unint64_t v3 = (void *)result;
  int64_t v30 = *(void *)(result + 24) >> 1;
  if (v16 >= v30) {
    goto LABEL_20;
  }
LABEL_23:
  uint64_t v31 = &v3[7 * v16];
  v31[4] = v26;
  v31[5] = v20;
  v31[6] = v28;
  v31[7] = v21;
  unsigned char v31[8] = v23;
  *((unsigned char *)v31 + 72) = v24 & 1;
  v31[10] = v27;
  unint64_t v32 = v45;
  if (!v45)
  {
LABEL_33:
    v3[2] = v12;
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v1 = v41;
    goto LABEL_14;
  }
  id v33 = &v3[7 * v16 + 17];
  int64_t v43 = v30;
  while (1)
  {
    BOOL v14 = __OFSUB__(v32, 1);
    unint64_t v34 = v32 - 1;
    if (v14) {
      break;
    }
    unint64_t v35 = v34;
    uint64_t v46 = v12;
    uint64_t v44 = specialized Array.subscript.read(v47, v34, v42);
    uint64_t v37 = *v36;
    uint64_t v20 = v36[1];
    uint64_t v28 = v36[2];
    uint64_t v21 = v36[3];
    uint64_t v23 = v36[4];
    char v38 = *((unsigned char *)v36 + 40);
    uint64_t v27 = v36[6];
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t result = ((uint64_t (*)(void (**)(void **), void))v44)(v47, 0);
    if (v43 == v46)
    {
      unint64_t v45 = v35;
      int64_t v16 = v43;
      uint64_t v26 = v37;
      char v24 = v38;
      v3[2] = v43;
      goto LABEL_21;
    }
    *(v33 - 6) = v37;
    *(v33 - 5) = v20;
    *(v33 - 4) = v28;
    *(v33 - 3) = v21;
    *(v33 - 2) = v23;
    *((unsigned char *)v33 - 8) = v38;
    int64_t v12 = v46 + 1;
    *id v33 = v27;
    v33 += 7;
    unint64_t v32 = v35;
    if (!v35) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t (*v18)();
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  void *v25;
  uint64_t (*v26)();
  uint64_t *v27;
  unsigned char v28[32];
  uint64_t v29;
  uint64_t v30;

  uint64_t v2 = *(void *)(result + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = result;
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v8 = v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      int64_t v9 = v4 + v2;
    }
    else {
      int64_t v9 = v4;
    }
    unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    int64_t v8 = v3[3] >> 1;
  }
  uint64_t v10 = v3[2];
  uint64_t v11 = v8 - v10;
  uint64_t result = specialized Sequence._copySequenceContents(initializing:)(&v29, &v3[2 * v10 + 4], v8 - v10, v6);
  if (result < v2) {
    goto LABEL_15;
  }
  if (result)
  {
    int64_t v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, result);
    BOOL v14 = v12 + result;
    if (v13)
    {
      __break(1u);
      goto LABEL_32;
    }
    v3[2] = v14;
  }
  if (result != v11)
  {
LABEL_13:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_16:
  if (!v30) {
    goto LABEL_13;
  }
  uint64_t v15 = v30 - 1;
  if (__OFSUB__(v30, 1)) {
    goto LABEL_34;
  }
  int64_t v16 = v3[2];
  uint64_t v17 = v29;
  long long v18 = specialized Array.subscript.read((uint64_t (*)())v28, v30 - 1, v29);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  swift_bridgeObjectRetain();
  uint64_t result = ((uint64_t (*)(unsigned char *, void))v18)(v28, 0);
LABEL_20:
  while (1)
  {
    uint64_t v22 = v3[3];
    uint64_t v23 = v22 >> 1;
    int64_t v5 = v16 + 1;
    if ((uint64_t)(v22 >> 1) < v16 + 1) {
      break;
    }
    if (v16 < v23) {
      goto LABEL_22;
    }
LABEL_19:
    v3[2] = v16;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v16 + 1, 1, v3);
  unint64_t v3 = (void *)result;
  uint64_t v23 = *(void *)(result + 24) >> 1;
  if (v16 >= v23) {
    goto LABEL_19;
  }
LABEL_22:
  char v24 = &v3[2 * v16];
  void v24[4] = v21;
  v24[5] = v20;
  if (!v15)
  {
LABEL_32:
    v3[2] = v5;
    goto LABEL_13;
  }
  uint64_t v25 = v24 + 7;
  while (1)
  {
    uint64_t v13 = __OFSUB__(v15--, 1);
    if (v13) {
      break;
    }
    uint64_t v26 = specialized Array.subscript.read((uint64_t (*)())v28, v15, v17);
    uint64_t v21 = *v27;
    uint64_t v20 = v27[1];
    swift_bridgeObjectRetain();
    uint64_t result = ((uint64_t (*)(unsigned char *, void))v26)(v28, 0);
    if (v23 == v5)
    {
      int64_t v16 = v23;
      v3[2] = v23;
      goto LABEL_20;
    }
    *(v25 - 1) = v21;
    *uint64_t v25 = v20;
    ++v5;
    v25 += 2;
    if (!v15) {
      goto LABEL_32;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[6 * v8 + 4];
  if (a1 + 32 < v9 + 48 * v2 && v9 < a1 + 32 + 48 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    uint64_t v15 = v4 + v2;
  }
  else {
    uint64_t v15 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  unint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = (unint64_t)&v3[22 * v9 + 4];
  if (a1 + 32 < v10 + 176 * v8 && v10 < a1 + 32 + 176 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  BOOL v12 = v3[2];
  uint64_t v13 = __OFADD__(v12, v8);
  int64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[7 * v8 + 4];
  if (a1 + 32 < v9 + 56 * v2 && v9 < a1 + 32 + 56 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    uint64_t v23 = v4 + v2;
  }
  else {
    uint64_t v23 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  unint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(type metadata accessor for URL() - 8);
  BOOL v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  int64_t v14 = v3 + v13 + v12 * v9;
  uint64_t v15 = a1 + v13;
  int64_t v16 = v12 * v8;
  uint64_t v17 = v14 + v16;
  long long v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  uint64_t v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    uint64_t v15 = v4 + v2;
  }
  else {
    uint64_t v15 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  unint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = (unint64_t)&v3[4 * v9 + 4];
  if (a1 + 32 < v10 + 32 * v8 && v10 < a1 + 32 + 32 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  BOOL v12 = v3[2];
  uint64_t v13 = __OFADD__(v12, v8);
  int64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[14 * v8 + 4];
  if (a1 + 32 < v9 + 112 * v2 && v9 < a1 + 32 + 112 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for (String, SGOutput));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for (String, SGInput));
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for SGNode, (unint64_t *)&lazy protocol witness table cache variable for type [SGNode] and conformance [A], &demangling cache variable for type metadata for [SGNode], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for SGEdge, (unint64_t *)&lazy protocol witness table cache variable for type [SGEdge] and conformance [A], &demangling cache variable for type metadata for [SGEdge], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t vars8;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  int64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    int64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  int64_t v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  int64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    int64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  unint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      unint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    int64_t v4 = MEMORY[0x2611848B0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1, &demangling cache variable for type metadata for MTLLibrary, &lazy protocol witness table cache variable for type [MTLLibrary] and conformance [A], &demangling cache variable for type metadata for [MTLLibrary], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    unint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    BOOL v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v13 = __OFADD__(v12, v11);
    int64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t vars8;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  int64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    int64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  int64_t v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  int64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    int64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  unint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      unint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    int64_t v4 = MEMORY[0x2611848B0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1, (void (*)(void))type metadata accessor for MetalShaderCompiler.Scope, &lazy protocol witness table cache variable for type [MetalShaderCompiler.Scope] and conformance [A], &demangling cache variable for type metadata for [MetalShaderCompiler.Scope], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    unint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    BOOL v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v13 = __OFADD__(v12, v11);
    int64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 16);
  int64_t v7 = *v2;
  if ((unint64_t)*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v9 = v24 + v6;
    if (!__OFADD__(v24, v6)) {
      goto LABEL_3;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6)) {
    goto LABEL_32;
  }
LABEL_3:
  unint64_t v10 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v10;
  uint64_t v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v10 & 0x8000000000000000) == 0
    && (v10 & 0x4000000000000000) == 0)
  {
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_13;
    }
    uint64_t v12 = 1;
  }
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v14 <= v9) {
    uint64_t v14 = v9;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = MEMORY[0x2611848B0](v12, v14, 1, v10);
  swift_bridgeObjectRelease();
  *uint64_t v2 = v15;
  uint64_t v13 = v15 & 0xFFFFFFFFFFFFFF8;
LABEL_13:
  uint64_t v16 = *(void *)(v13 + 16);
  int64_t v7 = (*(void *)(v13 + 24) >> 1) - v16;
  if (!v6)
  {
    uint64_t v17 = 0;
LABEL_28:
    if (v17 != v7)
    {
LABEL_29:
      swift_release();
      swift_release();
      return specialized Array._endMutation()();
    }
LABEL_33:
    uint64_t v25 = *(void *)(a2 + 16);
    if (v7 == v25) {
      goto LABEL_29;
    }
    uint64_t v3 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v26 = specialized OrderedSet.subscript.read((void (*)(id *))v39, v7, a1, a2);
    id v28 = *v27;
    ((void (*)(unsigned char *, void))v26)(v39, 0);
    unint64_t v29 = v7 + 1;
    while (1)
    {
LABEL_36:
      uint64_t v30 = *v2 & 0xFFFFFFFFFFFFFF8;
      uint64_t v31 = v3 + 1;
      if (v3 + 1 > *(void *)(v30 + 0x18) >> 1)
      {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v30 = *v2 & 0xFFFFFFFFFFFFFF8;
      }
      uint64_t v32 = *(void *)(v30 + 24) >> 1;
      if (v3 < v32) {
        break;
      }
      *(void *)(v30 + 16) = v3;
    }
    *(void *)(v30 + 8 * v3 + 32) = v28;
    if (v29 != v25)
    {
      uint64_t v38 = v32;
      uint64_t v33 = v32 - 1;
      uint64_t v34 = v30 + 40;
      while (1)
      {
        unint64_t v35 = specialized OrderedSet.subscript.read((void (*)(id *))v39, v29, a1, a2);
        id v28 = *v36;
        ((void (*)(unsigned char *, void))v35)(v39, 0);
        unint64_t v37 = v29 + 1;
        if (__OFADD__(v29, 1)) {
          goto LABEL_51;
        }
        if (v33 == v3)
        {
          ++v29;
          uint64_t v3 = v38;
          *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v38;
          goto LABEL_36;
        }
        *(void *)(v34 + 8 * v3) = v28;
        ++v29;
        ++v3;
        if (v37 == v25) {
          goto LABEL_48;
        }
      }
    }
LABEL_49:
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v31;
    goto LABEL_29;
  }
  if (v7 >= *(void *)(a2 + 16)) {
    uint64_t v17 = *(void *)(a2 + 16);
  }
  else {
    uint64_t v17 = (*(void *)(v13 + 24) >> 1) - v16;
  }
  if (v17 < 0) {
    goto LABEL_52;
  }
  unint64_t v18 = v13 + 8 * v16 + 32;
  if (a2 + 32 < v18 + 8 * v17 && v18 < a2 + 32 + 8 * v17) {
    goto LABEL_52;
  }
  type metadata accessor for SGNode();
  swift_arrayInitWithCopy();
  if (v17 < v6)
  {
    __break(1u);
LABEL_48:
    uint64_t v31 = v3 + 1;
    goto LABEL_49;
  }
  if (!v17) {
    goto LABEL_28;
  }
  uint64_t v20 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  BOOL v21 = __OFADD__(v20, v17);
  uint64_t v22 = v20 + v17;
  if (!v21)
  {
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
    goto LABEL_28;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  void *v7;
  int64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t (*v19)();
  uint64_t v20;
  void *v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  char v28[8];
  char v29[8];
  char v30;
  uint64_t v31;
  BOOL v32;
  uint64_t vars8;

  uint64_t v6 = *(void *)(a2 + 16);
  int64_t v7 = (void *)*v3;
  uint64_t v8 = *(void *)(*v3 + 16);
  uint64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int64_t v4 = a2;
  uint64_t v2 = a1;
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  void *v3 = (unint64_t)v7;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v11 = v7[3] >> 1, v11 < v9))
  {
    if (v8 <= v9) {
      uint64_t v12 = v8 + v6;
    }
    else {
      uint64_t v12 = v8;
    }
    int64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v12, 1, (unint64_t)v7);
    void *v3 = (unint64_t)v7;
    uint64_t v11 = v7[3] >> 1;
  }
  int64_t v5 = v7[2];
  uint64_t v8 = v11 - v5;
  if (!v6)
  {
    if (v8) {
      goto LABEL_21;
    }
    goto LABEL_25;
  }
  if (v8 >= *(void *)(v4 + 16)) {
    uint64_t v13 = *(void *)(v4 + 16);
  }
  else {
    uint64_t v13 = v11 - v5;
  }
  if ((v13 & 0x8000000000000000) != 0
    || ((uint64_t v14 = (unint64_t)&v7[v5 + 4], v4 + 32 < v14 + 8 * v13) ? (v15 = v14 >= v4 + 32 + 8 * v13) : (v15 = 1),
        !v15))
  {
LABEL_51:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  swift_arrayInitWithCopy();
  if (v13 < v6) {
    goto LABEL_28;
  }
  uint64_t v16 = v7[2];
  int64_t v5 = v16 + v13;
  if (__OFADD__(v16, v13))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  _OWORD v7[2] = v5;
  if (v13 != v8)
  {
LABEL_21:
    swift_release();
    return swift_release();
  }
LABEL_25:
  uint64_t v6 = *(void *)(v4 + 16);
  if (v8 != v6)
  {
LABEL_30:
    uint64_t v19 = specialized OrderedSet.subscript.read((uint64_t)v29, v8, v2, v4);
    outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v20, (uint64_t)&v31, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
    ((void (*)(char *, void))v19)(v29, 0);
    unint64_t v18 = v8 + 1;
    goto LABEL_31;
  }
  uint64_t v31 = 0;
  unint64_t v18 = v8;
LABEL_31:
  uint64_t v32 = v8 == v6;
  outlined init with copy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v31, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
  while ((v30 & 1) == 0)
  {
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
    BOOL v21 = (void *)*v3;
    uint64_t v22 = *(void *)(*v3 + 24);
    uint64_t v23 = v22 >> 1;
    if ((uint64_t)(v22 >> 1) < v5 + 1)
    {
      BOOL v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v5 + 1, 1, *v3);
      void *v3 = (unint64_t)v21;
      uint64_t v23 = v21[3] >> 1;
    }
    outlined init with copy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v31, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
    if ((v30 & 1) == 0)
    {
      if (v5 > v23) {
        uint64_t v23 = v5;
      }
      uint64_t v25 = (uint64_t)&v21[v5 + 4];
      while (1)
      {
        outlined init with take of MetalFunctionNode?((uint64_t)v29, (uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
        if (v23 == v5)
        {
          outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
          int64_t v5 = v23;
          goto LABEL_35;
        }
        outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v31, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
        outlined init with take of MetalFunctionNode?((uint64_t)v28, v25, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
        if (v18 == v6)
        {
          uint64_t v31 = 0;
          uint64_t v24 = v6;
        }
        else
        {
          uint64_t v26 = specialized OrderedSet.subscript.read((uint64_t)v29, v18, v2, v4);
          outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v27, (uint64_t)&v31, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
          ((void (*)(char *, void))v26)(v29, 0);
          uint64_t v24 = v18 + 1;
          if (__OFADD__(v18, 1))
          {
            __break(1u);
            goto LABEL_51;
          }
        }
        uint64_t v32 = v18 == v6;
        outlined init with copy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v31, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
        v25 += 8;
        ++v5;
        unint64_t v18 = v24;
        if (v30) {
          goto LABEL_40;
        }
      }
    }
    uint64_t v24 = v18;
LABEL_40:
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
    uint64_t v23 = v5;
    unint64_t v18 = v24;
LABEL_35:
    *(void *)(*v3 + 16) = v23;
    outlined init with copy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v31, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
  }
  outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v31, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
  swift_release();
  swift_release();
  return outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v14 = v13 + v11;
    if (!__OFADD__(v13, v11)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v14 = v13 + v11;
  if (__OFADD__(v13, v11)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v12 = *v5;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *int64_t v5 = v12;
  uint64_t v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v13 = 1;
  }
  uint64_t v23 = v11;
  uint64_t v11 = (uint64_t)a2;
  a2 = a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62) {
    goto LABEL_27;
  }
  uint64_t v17 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14) {
      uint64_t v17 = v14;
    }
    swift_bridgeObjectRetain();
    unint64_t v12 = MEMORY[0x2611848B0](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *int64_t v5 = v12;
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = a2;
    a2 = (unint64_t *)v11;
    uint64_t v11 = v23;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v16 + 8 * *(void *)(v16 + 16) + 32, (*(void *)(v16 + 24) >> 1) - *(void *)(v16 + 16), a1, (void (*)(void))a2, a3, a4, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v19 >= 1)
  {
    uint64_t v20 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v21 = __OFADD__(v20, v19);
    uint64_t v22 = v20 + v19;
    if (v21)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  if ((*(void *)(v5 + 24) >> 1) - v10 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v11 = v5 + 24 * v10 + 32;
  if (a1 + 32 < v11 + 24 * v4 && v11 < a1 + 32 + 24 * v4) {
    goto LABEL_21;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t *v3 = v5;
    return result;
  }
  uint64_t v13 = *(void *)(v5 + 16);
  BOOL v14 = __OFADD__(v13, v4);
  uint64_t v15 = v13 + v4;
  if (!v14)
  {
    *(void *)(v5 + 16) = v15;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*specialized OrderedSet.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3, uint64_t a4))(id *a1)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a4 + 16) > a2)
  {
    uint64_t v4 = *(void **)(a4 + 8 * a2 + 32);
    *(void *)uint64_t result = v4;
    id v5 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t (*specialized OrderedSet.subscript.read(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4))()
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a4 + 16) > a2)
  {
    return destructiveProjectEnumData for NodePersonality.ShaderType;
  }
  __break(1u);
  return result;
}

uint64_t createDotText(representing:inputNodeIDs:outputNodeIDs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph14FunctionNodeIDVG_AF05MetalfG0_psAE_pTg504_s11d41Graph13createDotText12representing12inputg20IDs06outputhI0SSAA05i18A7ProgramC_SayAA08F28H2IDVGAJtKFAA0kmH0_pAIKXEfU_AF0idR0CTf1cn_nTf4ng_nTm(a2, a1);
  uint64_t v9 = swift_release();
  if (!v4)
  {
    long long v47 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 120);
    uint64_t v10 = v47(v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _ArrayProtocol.filter(_:)(v10, a2, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph14FunctionNodeIDVG_AF05MetalfG0_psAE_pTg504_s11d41Graph13createDotText12representing12inputg20IDs06outputhI0SSAA05i18A7ProgramC_SayAA08F28H2IDVGAJtKFAA0kmH0_pAIKXEfU_AF0idR0CTf1cn_nTf4ng_nTm(a3, a1);
    swift_release();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17MetalFunctionNode_pG_SSs5NeverOTg504_s11d41Graph13createDotText12representing12inputh20IDs06outputhI0SSAA05f18A7ProgramC_SayAA08g29H2IDVGAJtKF0cH10StatementsL_yS29SSGSayAA0kmH0_pGFSSAaM_pXEfU_SayAF0gH2IDVGTf1cn_nTf4ng_n(v8, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17MetalFunctionNode_pG_SSs5NeverOTg504_s11d41Graph13createDotText12representing12inputh20IDs06outputhI0SSAA05f18A7ProgramC_SayAA08g29H2IDVGAJtKF0cH10StatementsL_yS29SSGSayAA0kmH0_pGFSSAaM_pXEfU_SayAF0gH2IDVGTf1cn_nTf4ng_n(v11, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17MetalFunctionNode_pG_SSs5NeverOTg504_s11d41Graph13createDotText12representing12inputh20IDs06outputhI0SSAA05f18A7ProgramC_SayAA08g29H2IDVGAJtKF0cH10StatementsL_yS29SSGSayAA0kmH0_pGFSSAaM_pXEfU_SayAF0gH2IDVGTf1cn_nTf4ng_n(v13, a2);
    swift_bridgeObjectRelease();
    uint64_t v14 = swift_bridgeObjectRelease();
    uint64_t v15 = v47(v14);
    uint64_t v16 = *(void *)(v15 + 16);
    if (v16)
    {
      uint64_t v17 = (void *)(v15 + 32);
      do
      {
        uint64_t v20 = v17[3];
        uint64_t v19 = v17[4];
        __swift_project_boxed_opaque_existential_1(v17, v20);
        uint64_t v21 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(v19 + 48))(v20, v19) + 16);
        swift_bridgeObjectRelease();
        if (v21)
        {
          uint64_t v22 = v17[3];
          uint64_t v23 = v17[4];
          __swift_project_boxed_opaque_existential_1(v17, v22);
          uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 48))(v22, v23);
          uint64_t v25 = MEMORY[0x270FA5388](v24);
          uint64_t v18 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph14FunctionNodeIDVGG_SSsAE_pTg506_sSi11f7Graph14hi7IDVSSs5C48_pIgyyozo_Si6offset_AC7elementtSSsAD_pIegnrzr_TRSiAJSSsAE_pIgyyozo_Tf1cn_nTf4ng_n(v25, partial apply for closure #1 in closure #4 in createDotText(representing:inputNodeIDs:outputNodeIDs:));
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v18 = MEMORY[0x263F8EE78];
        }
        specialized Array.append<A>(contentsOf:)(v18);
        v17 += 5;
        --v16;
      }
      while (v16);
    }
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(609);
    v26._uint64_t countAndFlagsBits = 0xD000000000000170;
    v26._object = (void *)0x800000025C426400;
    String.append(_:)(v26);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
    uint64_t v27 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v29 = v28;
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = v27;
    v30._object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._object = (void *)0x800000025C426580;
    v31._uint64_t countAndFlagsBits = 0xD000000000000067;
    String.append(_:)(v31);
    uint64_t v32 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    v35._uint64_t countAndFlagsBits = v32;
    v35._object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._object = (void *)0x800000025C4265F0;
    v36._uint64_t countAndFlagsBits = 0xD000000000000067;
    String.append(_:)(v36);
    uint64_t v37 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v39 = v38;
    swift_bridgeObjectRelease();
    v40._uint64_t countAndFlagsBits = v37;
    v40._object = v39;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._uint64_t countAndFlagsBits = 0xD000000000000014;
    v41._object = (void *)0x800000025C426660;
    String.append(_:)(v41);
    uint64_t v42 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v44 = v43;
    swift_bridgeObjectRelease();
    v45._uint64_t countAndFlagsBits = v42;
    v45._object = v44;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._uint64_t countAndFlagsBits = 0x7D202020200A0ALL;
    v46._object = (void *)0xE700000000000000;
    String.append(_:)(v46);
    uint64_t v3 = 0;
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t graphDotText(_:callNode:)(char *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)&a1[OBJC_IVAR___SGGraph_argumentsNode];
  id v5 = *(void **)&a1[OBJC_IVAR___SGGraph_resultsNode];
  swift_beginAccess();
  id v6 = v4;
  id v7 = v5;
  unint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = specialized _ArrayProtocol.filter(_:)(v8);
  swift_bridgeObjectRelease();

  unint64_t v113 = v9;
  int64_t v111 = v7;
  uint64_t v112 = v6;
  uint64_t v110 = a2;
  if (a2)
  {
    uint64_t v10 = (uint64_t *)(a2 + OBJC_IVAR___SGNode_name);
    swift_beginAccess();
    uint64_t v12 = *v10;
    uint64_t v11 = (void *)v10[1];
    uint64_t v13 = a2 + OBJC_IVAR___SGNode_graph;
    swift_beginAccess();
    uint64_t v14 = MEMORY[0x261185960](v13);
    if (v14)
    {
      uint64_t v15 = (void *)v14;
      uint64_t v16 = (uint64_t *)(v14 + OBJC_IVAR___SGGraph_name);
      swift_beginAccess();
      uint64_t v18 = *v16;
      uint64_t v17 = (void *)v16[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = 0;
      uint64_t v17 = (void *)0xE000000000000000;
    }
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v12 = 0;
    uint64_t v17 = (void *)0xE000000000000000;
    uint64_t v11 = (void *)0xE000000000000000;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_25C418EE0;
  uint64_t v20 = ObjectIdentifier.hashValue.getter();
  uint64_t v21 = MEMORY[0x263F8D750];
  *(void *)(v19 + 56) = MEMORY[0x263F8D6C8];
  *(void *)(v19 + 64) = v21;
  *(void *)(v19 + 32) = v20;
  uint64_t v22 = String.init(format:_:)();
  uint64_t v24 = v23;
  uint64_t v115 = v12;
  swift_bridgeObjectRetain();
  uint64_t v109 = v18;
  v25._uint64_t countAndFlagsBits = v18;
  v25._object = v17;
  String.append(_:)(v25);
  long long v114 = a1;
  Swift::String v26 = &a1[OBJC_IVAR___SGGraph_name];
  uint64_t v27 = *(void *)&a1[OBJC_IVAR___SGGraph_name];
  id v28 = (void *)*((void *)v26 + 1);
  uint64_t v29 = v12;
  swift_bridgeObjectRetain();
  v30._uint64_t countAndFlagsBits = v27;
  v30._object = v28;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v31._uint64_t countAndFlagsBits = 95;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v32 = v22;
  v33._uint64_t countAndFlagsBits = v22;
  v33._object = v24;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  uint64_t v35 = v115;
  uint64_t v34 = v11;
  if (v110)
  {
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = v29;
    v36._object = v11;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._uint64_t countAndFlagsBits = 0x70617267206E6920;
    v37._object = (void *)0xEA00000000002068;
    String.append(_:)(v37);
    v38._uint64_t countAndFlagsBits = v109;
    v38._object = v17;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    uint64_t v40 = 0x206D6F7266;
    unint64_t v39 = (void *)0xE500000000000000;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v40 = 0;
    unint64_t v39 = (void *)0xE000000000000000;
  }
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v41._uint64_t countAndFlagsBits = v27;
  v41._object = v28;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._uint64_t countAndFlagsBits = 2128928;
  v42._object = (void *)0xE300000000000000;
  String.append(_:)(v42);
  v43._uint64_t countAndFlagsBits = v32;
  v43._object = v24;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._uint64_t countAndFlagsBits = 2629673;
  v44._object = (void *)0xE300000000000000;
  String.append(_:)(v44);
  v45._uint64_t countAndFlagsBits = v40;
  v45._object = v39;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v46._uint64_t countAndFlagsBits = 41;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C4195A0;
  *(void *)(inited + 32) = v112;
  unint64_t v116 = inited;
  specialized Array._endMutation()();
  id v48 = v112;
  id v49 = v111;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGNodeCG_SSs5NeverOTg504_s11d46Graph12graphDotText_8callNodeSSAA7SGGraphC_AA6F51CSgtF06createG10StatementsL_ySaySSGSayAGGFSSAGXEfU_SSA2HTf1cn_nTf4nggg_n(v116, v35, v34, (uint64_t)v48, (uint64_t)v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v50 = swift_initStackObject();
  *(_OWORD *)(v50 + 16) = xmmword_25C4195A0;
  *(void *)(v50 + 32) = v49;
  unint64_t v117 = v50;
  specialized Array._endMutation()();
  id v51 = v48;
  id v52 = v49;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGNodeCG_SSs5NeverOTg504_s11d46Graph12graphDotText_8callNodeSSAA7SGGraphC_AA6F51CSgtF06createG10StatementsL_ySaySSGSayAGGFSSAGXEfU_SSA2HTf1cn_nTf4nggg_n(v117, v35, v34, (uint64_t)v51, (uint64_t)v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  id v53 = v51;
  id v54 = v52;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGNodeCG_SSs5NeverOTg504_s11d46Graph12graphDotText_8callNodeSSAA7SGGraphC_AA6F51CSgtF06createG10StatementsL_ySaySSGSayAGGFSSAGXEfU_SSA2HTf1cn_nTf4nggg_n(v113, v35, v34, (uint64_t)v53, (uint64_t)v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v55 = v114;
  unint64_t v56 = swift_bridgeObjectRetain();
  specialized Sequence.compactMap<A>(_:)(v56, (uint64_t)v55, v35, v34);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(528);
  v57._uint64_t countAndFlagsBits = 0xD000000000000012;
  v57._object = (void *)0x800000025C426680;
  String.append(_:)(v57);
  v58._uint64_t countAndFlagsBits = v35;
  v58._object = v34;
  String.append(_:)(v58);
  v59._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v59._object = (void *)0x800000025C4266A0;
  String.append(_:)(v59);
  v60._uint64_t countAndFlagsBits = 0x286870617247;
  v60._object = (void *)0xE600000000000000;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  v61._uint64_t countAndFlagsBits = 0x22202020200A0A22;
  v61._object = (void *)0xE800000000000000;
  String.append(_:)(v61);
  v62._uint64_t countAndFlagsBits = v35;
  v62._object = v34;
  String.append(_:)(v62);
  v63._object = (void *)0x800000025C4266D0;
  v63._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v63);
  v64._uint64_t countAndFlagsBits = v35;
  v64._object = v34;
  String.append(_:)(v64);
  v65._uint64_t countAndFlagsBits = 0xD000000000000017;
  v65._object = (void *)0x800000025C4266F0;
  String.append(_:)(v65);
  v66._uint64_t countAndFlagsBits = v35;
  v66._object = v34;
  String.append(_:)(v66);
  v67._object = (void *)0x800000025C426710;
  v67._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v67);
  v68._uint64_t countAndFlagsBits = v35;
  v68._object = v34;
  String.append(_:)(v68);
  v69._uint64_t countAndFlagsBits = 0x22203E2D2022315FLL;
  v69._object = (void *)0xE800000000000000;
  String.append(_:)(v69);
  v70._uint64_t countAndFlagsBits = v35;
  v70._object = v34;
  String.append(_:)(v70);
  v71._uint64_t countAndFlagsBits = 0xD000000000000017;
  v71._object = (void *)0x800000025C4266F0;
  String.append(_:)(v71);
  v72._uint64_t countAndFlagsBits = v35;
  v72._object = v34;
  String.append(_:)(v72);
  v73._uint64_t countAndFlagsBits = 0x22203E2D2022325FLL;
  v73._object = (void *)0xE800000000000000;
  String.append(_:)(v73);
  v74._uint64_t countAndFlagsBits = v35;
  v74._object = v34;
  String.append(_:)(v74);
  v75._uint64_t countAndFlagsBits = 0xD000000000000029;
  v75._object = (void *)0x800000025C426730;
  String.append(_:)(v75);
  v76._uint64_t countAndFlagsBits = v35;
  v76._object = v34;
  String.append(_:)(v76);
  v77._uint64_t countAndFlagsBits = 0xD000000000000035;
  v77._object = (void *)0x800000025C426760;
  String.append(_:)(v77);
  v78._uint64_t countAndFlagsBits = v35;
  v78._object = v34;
  String.append(_:)(v78);
  v79._uint64_t countAndFlagsBits = 0x2020200A3B22315FLL;
  v79._object = (void *)0xED00002020202020;
  String.append(_:)(v79);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t v80 = BidirectionalCollection<>.joined(separator:)();
  int v82 = v81;
  swift_bridgeObjectRelease();
  v83._uint64_t countAndFlagsBits = v80;
  v83._object = v82;
  String.append(_:)(v83);
  swift_bridgeObjectRelease();
  v84._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v84._object = (void *)0x800000025C4267A0;
  String.append(_:)(v84);
  v85._uint64_t countAndFlagsBits = v35;
  v85._object = v34;
  String.append(_:)(v85);
  v86._uint64_t countAndFlagsBits = 0xD000000000000034;
  v86._object = (void *)0x800000025C4267C0;
  String.append(_:)(v86);
  v87._uint64_t countAndFlagsBits = v35;
  v87._object = v34;
  String.append(_:)(v87);
  v88._uint64_t countAndFlagsBits = 0x2020200A3B22325FLL;
  v88._object = (void *)0xED00002020202020;
  String.append(_:)(v88);
  uint64_t v89 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v91 = v90;
  swift_bridgeObjectRelease();
  v92._uint64_t countAndFlagsBits = v89;
  v92._object = v91;
  String.append(_:)(v92);
  swift_bridgeObjectRelease();
  v93._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v93._object = (void *)0x800000025C4267A0;
  String.append(_:)(v93);
  v94._uint64_t countAndFlagsBits = v35;
  v94._object = v34;
  String.append(_:)(v94);
  v95._uint64_t countAndFlagsBits = 0xD000000000000036;
  v95._object = (void *)0x800000025C426800;
  String.append(_:)(v95);
  v96._uint64_t countAndFlagsBits = v35;
  v96._object = v34;
  String.append(_:)(v96);
  swift_bridgeObjectRelease();
  v97._uint64_t countAndFlagsBits = 0x2020200A3B22335FLL;
  v97._object = (void *)0xED00002020202020;
  String.append(_:)(v97);
  uint64_t v98 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v100 = v99;
  swift_bridgeObjectRelease();
  v101._uint64_t countAndFlagsBits = v98;
  v101._object = v100;
  String.append(_:)(v101);
  swift_bridgeObjectRelease();
  v102._uint64_t countAndFlagsBits = 0xA0A7D202020200ALL;
  v102._object = (void *)0xEC00000020202020;
  String.append(_:)(v102);
  uint64_t v103 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v105 = v104;
  swift_bridgeObjectRelease();
  v106._uint64_t countAndFlagsBits = v103;
  v106._object = v105;
  String.append(_:)(v106);
  swift_bridgeObjectRelease();
  v107._uint64_t countAndFlagsBits = 32010;
  v107._object = (void *)0xE200000000000000;
  String.append(_:)(v107);
  return 0;
}

uint64_t key path getter for SGNode.graph : SGNode@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR___SGNode_graph;
  swift_beginAccess();
  uint64_t result = MEMORY[0x261185960](v3);
  *a2 = result;
  return result;
}

void closure #1 in createNodeStatements #1 (_:) in graphDotText(_:callNode:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *a1 + OBJC_IVAR___SGNode_data;
  unint64_t v8 = *(char **)v7;
  uint64_t v109 = *(void **)(v7 + 8);
  uint64_t v9 = *(void *)(v7 + 32);
  uint64_t v10 = *(void *)(v7 + 40);
  uint64_t v11 = *(void *)(v7 + 72);
  unsigned int v12 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v114 = *a1;
  uint64_t v111 = v9;
  if (v12 >> 6)
  {
    if (v12 >> 6 == 1)
    {
      uint64_t v103 = *(void **)(v7 + 24);
      Swift::String v106 = *(void **)(v7 + 16);
      uint64_t v100 = *(void *)(v7 + 40);
      uint64_t v14 = *(void *)(v6 + OBJC_IVAR___SGNode_name);
      uint64_t v13 = *(void **)(v6 + OBJC_IVAR___SGNode_name + 8);
      uint64_t v16 = *(void *)&v8[OBJC_IVAR___SGGraph_name];
      uint64_t v15 = *(void **)&v8[OBJC_IVAR___SGGraph_name + 8];
      if (v14 != v16 || v13 != v15)
      {
        int v18 = *(void *)(v7 + 56);
        Swift::String v97 = *(char **)v7;
        uint64_t v19 = *(void *)(v7 + 72);
        uint64_t v20 = *(void *)(v7 + 64);
        unsigned __int8 v21 = *(unsigned char *)(v7 + 80);
        int v22 = *(void *)(v7 + 48);
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          outlined copy of NodeData(v97, (int)v109, v106, v103, v111, v100, v22, v18, v20, v19, v21);
          swift_bridgeObjectRetain();
          v23._uint64_t countAndFlagsBits = 28252;
          v23._object = (void *)0xE200000000000000;
          String.append(_:)(v23);
          swift_bridgeObjectRetain();
          v24._uint64_t countAndFlagsBits = v16;
          v24._object = v15;
          String.append(_:)(v24);
          swift_bridgeObjectRelease();
          outlined consume of NodeData(v97, (int)v109, v106, v103, v111, v100, v22, v18, v20, v19, v21);
          goto LABEL_18;
        }
      }
      goto LABEL_15;
    }
    int v33 = v9;
    uint64_t v34 = *(void **)(v7 + 16);
    uint64_t v35 = *(void **)(v7 + 24);
    uint64_t v36 = *(void *)(v7 + 64);
    int v99 = *(void *)(v7 + 48);
    int v108 = *(void *)(v7 + 56);
    unsigned __int8 v96 = *(unsigned char *)(v7 + 80);
    outlined copy of SGDataTypeStorage(v34, v35, v33, v10, v99, v108, v36, v11, v12 & 0x3F);
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v37._uint64_t countAndFlagsBits = 0x203A657079746E5CLL;
    v37._object = (void *)0xE800000000000000;
    String.append(_:)(v37);
    v38._uint64_t countAndFlagsBits = SGDataType.stringValue.getter();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._uint64_t countAndFlagsBits = 28252;
    v39._object = (void *)0xE200000000000000;
    String.append(_:)(v39);
    v40._uint64_t countAndFlagsBits = SGDataTypeStorage.valueString.getter();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    outlined consume of NodeData(v8, (int)v109, v34, v35, v111, v10, v99, v108, v36, v11, v96);
  }
  else
  {
    int v98 = *(void *)(v7 + 48);
    uint64_t v101 = *(void *)(v7 + 40);
    uint64_t v104 = *(void **)(v7 + 24);
    Swift::String v107 = *(void **)(v7 + 16);
    Swift::String v25 = (void **)(v6 + OBJC_IVAR___SGNode_name);
    Swift::String v26 = *(void **)(v6 + OBJC_IVAR___SGNode_name + 8);
    BOOL v27 = *v25 == v8 && v109 == v26;
    if (v27
      || (id v28 = *(char **)v7,
          int v29 = *(void *)(v7 + 56),
          uint64_t v30 = *(void *)(v7 + 72),
          uint64_t v31 = *(void *)(v7 + 64),
          unsigned __int8 v32 = *(unsigned char *)(v7 + 80),
          (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of MaterialXAvailability(v111, v101);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of MaterialXAvailability(v111, v101);
LABEL_15:
      swift_bridgeObjectRetain();
      goto LABEL_18;
    }
    outlined copy of NodeData(v28, (int)v109, v107, v104, v111, v101, v98, v29, v31, v30, v32);
    swift_bridgeObjectRetain();
    v41._uint64_t countAndFlagsBits = 28252;
    v41._object = (void *)0xE200000000000000;
    String.append(_:)(v41);
    swift_bridgeObjectRetain();
    v42._uint64_t countAndFlagsBits = (uint64_t)v28;
    v42._object = v109;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v111, v101);
    swift_bridgeObjectRelease();
  }
LABEL_18:
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  v110._uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v110._object = v43;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v44._uint64_t countAndFlagsBits = 95;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  uint64_t v46 = *(void *)(v114 + OBJC_IVAR___SGNode_name);
  Swift::String v45 = *(void **)(v114 + OBJC_IVAR___SGNode_name + 8);
  swift_bridgeObjectRetain();
  v47._uint64_t countAndFlagsBits = v46;
  v47._object = v45;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v105._uint64_t countAndFlagsBits = a2;
  unint64_t v48 = *(void *)(v114 + OBJC_IVAR___SGNode_inputs);
  if (v48 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v49 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v50 = MEMORY[0x263F8EE78];
  v105._object = a3;
  if (v49)
  {
    uint64_t v121 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49 & ~(v49 >> 63), 0);
    if (v49 < 0)
    {
      __break(1u);
      goto LABEL_50;
    }
    uint64_t v51 = 0;
    unint64_t v116 = v48 & 0xC000000000000001;
    unint64_t v119 = v48;
    do
    {
      uint64_t v52 = v49;
      if (v116) {
        id v53 = (char *)MEMORY[0x2611848A0](v51, v48);
      }
      else {
        id v53 = (char *)*(id *)(v48 + 8 * v51 + 32);
      }
      id v54 = v53;
      id v55 = (uint64_t *)&v53[OBJC_IVAR___SGInput_name];
      v56._uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      v57._uint64_t countAndFlagsBits = 62;
      v57._object = (void *)0xE100000000000000;
      String.append(_:)(v57);
      uint64_t v58 = *v55;
      Swift::String v59 = (void *)v55[1];
      swift_bridgeObjectRetain();
      v60._uint64_t countAndFlagsBits = v58;
      v60._object = v59;
      String.append(_:)(v60);

      swift_bridgeObjectRelease();
      unint64_t v62 = *(void *)(v121 + 16);
      unint64_t v61 = *(void *)(v121 + 24);
      if (v62 >= v61 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
      }
      ++v51;
      *(void *)(v121 + 16) = v62 + 1;
      uint64_t v63 = v121 + 16 * v62;
      *(void *)(v63 + 32) = 0x5F7475706E693CLL;
      *(void *)(v63 + 40) = 0xE700000000000000;
      uint64_t v49 = v52;
      unint64_t v48 = v119;
    }
    while (v52 != v51);
    swift_bridgeObjectRelease();
    uint64_t v50 = MEMORY[0x263F8EE78];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t v64 = BidirectionalCollection<>.joined(separator:)();
  Swift::String v66 = v65;
  swift_bridgeObjectRelease();
  unint64_t v67 = *(void *)(v114 + OBJC_IVAR___SGNode_outputs);
  uint64_t v102 = v64;
  if (v67 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v68 = _CocoaArrayWrapper.endIndex.getter();
    if (v68)
    {
LABEL_33:
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68 & ~(v68 >> 63), 0);
      if ((v68 & 0x8000000000000000) == 0)
      {
        uint64_t v94 = (uint64_t)v66;
        uint64_t v69 = 0;
        uint64_t v70 = v50;
        unint64_t v117 = v67 & 0xC000000000000001;
        uint64_t v120 = v68;
        unint64_t v71 = v67;
        do
        {
          if (v117) {
            Swift::String v72 = (char *)MEMORY[0x2611848A0](v69, v67);
          }
          else {
            Swift::String v72 = (char *)*(id *)(v67 + 8 * v69 + 32);
          }
          Swift::String v73 = v72;
          Swift::String v74 = (uint64_t *)&v72[OBJC_IVAR___SGOutput_name];
          v75._uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          String.append(_:)(v75);
          swift_bridgeObjectRelease();
          v76._uint64_t countAndFlagsBits = 62;
          v76._object = (void *)0xE100000000000000;
          String.append(_:)(v76);
          uint64_t v78 = *v74;
          Swift::String v77 = (void *)v74[1];
          swift_bridgeObjectRetain();
          v79._uint64_t countAndFlagsBits = v78;
          v79._object = v77;
          String.append(_:)(v79);

          swift_bridgeObjectRelease();
          unint64_t v81 = *(void *)(v70 + 16);
          unint64_t v80 = *(void *)(v70 + 24);
          if (v81 >= v80 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1);
          }
          ++v69;
          *(void *)(v70 + 16) = v81 + 1;
          uint64_t v82 = v70 + 16 * v81;
          *(void *)(v82 + 32) = 0x5F74757074756F3CLL;
          *(void *)(v82 + 40) = 0xE800000000000000;
          unint64_t v67 = v71;
        }
        while (v120 != v69);
        swift_bridgeObjectRelease();
        Swift::String v66 = (void *)v94;
        goto LABEL_45;
      }
LABEL_50:
      __break(1u);
      return;
    }
  }
  else
  {
    uint64_t v68 = *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v68) {
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRelease();
LABEL_45:
  uint64_t v83 = BidirectionalCollection<>.joined(separator:)();
  Swift::String v85 = v84;
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  String.append(_:)(v105);
  swift_bridgeObjectRelease();
  v86._uint64_t countAndFlagsBits = 0x6C6562616C5B2022;
  v86._object = (void *)0xEC0000007B7B223DLL;
  String.append(_:)(v86);
  v87._uint64_t countAndFlagsBits = v102;
  v87._object = v66;
  String.append(_:)(v87);
  swift_bridgeObjectRelease();
  v88._uint64_t countAndFlagsBits = 2129021;
  v88._object = (void *)0xE300000000000000;
  String.append(_:)(v88);
  String.append(_:)(v110);
  swift_bridgeObjectRelease();
  v89._uint64_t countAndFlagsBits = 2065726496;
  v89._object = (void *)0xE400000000000000;
  String.append(_:)(v89);
  v90._uint64_t countAndFlagsBits = v83;
  v90._object = v85;
  String.append(_:)(v90);
  swift_bridgeObjectRelease();
  v91._uint64_t countAndFlagsBits = 2260349;
  v91._object = (void *)0xE300000000000000;
  String.append(_:)(v91);
  if (v114 == a4 || v114 == a5)
  {
    v92._uint64_t countAndFlagsBits = 0x746469776E657020;
    v92._object = (void *)0xEB00000000323D68;
    String.append(_:)(v92);
  }
  v93._uint64_t countAndFlagsBits = 93;
  v93._object = (void *)0xE100000000000000;
  String.append(_:)(v93);
  *a6 = 34;
  a6[1] = 0xE100000000000000;
}

void closure #2 in graphDotText(_:callNode:)(uint64_t *a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = OBJC_IVAR___SGEdge_from;
  unint64_t v9 = SGGraph.nodeWithOutput(_:)(*(char **)(*a1 + OBJC_IVAR___SGEdge_from));
  if (!v9) {
    goto LABEL_7;
  }
  uint64_t v10 = (char *)v9;
  uint64_t v11 = OBJC_IVAR___SGEdge_to;
  unint64_t v12 = SGGraph.nodeWithInput(_:)(*(char **)(v7 + OBJC_IVAR___SGEdge_to));
  if (!v12)
  {

LABEL_7:
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  uint64_t v58 = a4;
  uint64_t v59 = v11;
  uint64_t v13 = (char *)v12;
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = 95;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  Swift::String v57 = v10;
  uint64_t v15 = *(void *)&v10[OBJC_IVAR___SGNode_name];
  uint64_t v16 = *(void **)&v10[OBJC_IVAR___SGNode_name + 8];
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  int v18 = a3;
  unint64_t v61 = a3;
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = 95;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  Swift::String v60 = v13;
  uint64_t v21 = *(void *)&v13[OBJC_IVAR___SGNode_name];
  uint64_t v20 = *(void **)&v13[OBJC_IVAR___SGNode_name + 8];
  swift_bridgeObjectRetain();
  v22._uint64_t countAndFlagsBits = v21;
  v22._object = v20;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = a2;
  v23._object = v18;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 0x74757074756F3A22;
  v24._object = (void *)0xE90000000000005FLL;
  String.append(_:)(v24);
  lazy protocol witness table accessor for type String and conformance String();
  v25._uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 0x22203E2D20653ALL;
  v26._object = (void *)0xE700000000000000;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = a2;
  v27._object = v61;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 0x5F7475706E693A22;
  v28._object = (void *)0xE800000000000000;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 30522;
  v30._object = (void *)0xE200000000000000;
  String.append(_:)(v30);
  uint64_t v31 = (uint64_t *)(*(void *)(v7 + v8) + OBJC_IVAR___SGOutput_type);
  swift_beginAccess();
  SGDataType.canonicalized()(*v31);
  unint64_t v32 = SGDataType.stringValue.getter();
  uint64_t v34 = v33;
  uint64_t v35 = (uint64_t *)(*(void *)(v7 + v59) + OBJC_IVAR___SGInput_type);
  swift_beginAccess();
  SGDataType.canonicalized()(*v35);
  unint64_t v37 = SGDataType.stringValue.getter();
  Swift::String v38 = v36;
  if (v32 == v37 && v34 == v36)
  {
    Swift::String v39 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_14;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
    Swift::String v39 = (void *)MEMORY[0x263F8EE78];
    if (v32 != v37) {
      goto LABEL_15;
    }
LABEL_14:
    if (v34 == v38) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  Swift::String v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v41 = v39[2];
  unint64_t v40 = v39[3];
  if (v41 >= v40 >> 1) {
    Swift::String v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v39);
  }
  v39[2] = v41 + 1;
  Swift::String v42 = &v39[2 * v41];
  v42[4] = 0xD000000000000043;
  v42[5] = 0x800000025C4268D0;
  if (v32 == v37) {
    goto LABEL_14;
  }
LABEL_15:
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v44._uint64_t countAndFlagsBits = v32;
    v44._object = v34;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._uint64_t countAndFlagsBits = 0x209286E220;
    v45._object = (void *)0xA500000000000000;
    String.append(_:)(v45);
    v46._uint64_t countAndFlagsBits = v37;
    v46._object = v38;
    String.append(_:)(v46);
    goto LABEL_18;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  v43._uint64_t countAndFlagsBits = v32;
  v43._object = v34;
  String.append(_:)(v43);
LABEL_18:
  swift_bridgeObjectRelease();
  v47._uint64_t countAndFlagsBits = 34;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
  }
  unint64_t v49 = v39[2];
  unint64_t v48 = v39[3];
  if (v49 >= v48 >> 1) {
    Swift::String v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v48 > 1), v49 + 1, 1, v39);
  }
  v39[2] = v49 + 1;
  uint64_t v50 = &v39[2 * v49];
  v50[4] = 0x6562616C6C696174;
  v50[5] = 0xEB00000000223D6CLL;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t v51 = BidirectionalCollection<>.joined(separator:)();
  id v53 = v52;
  swift_bridgeObjectRelease();
  v54._uint64_t countAndFlagsBits = v51;
  v54._object = v53;
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  v55._uint64_t countAndFlagsBits = 93;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  v56._uint64_t countAndFlagsBits = 23328;
  v56._object = (void *)0xE200000000000000;
  String.append(_:)(v56);
  swift_bridgeObjectRelease();

  void *v58 = 34;
  v58[1] = 0xE100000000000000;
}

Swift::String __swiftcall tabs(_:)(Swift::Int a1)
{
}

uint64_t SGGraph.nodegraphs(_:)(unint64_t a1)
{
  uint64_t v3 = (unint64_t *)(v1 + OBJC_IVAR___SGGraph_nodes);
  swift_beginAccess();
  unint64_t v4 = *v3;
  unint64_t v150 = MEMORY[0x263F8EE78];
  if (*v3 >> 62) {
    goto LABEL_136;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v5)
  {
LABEL_137:
    swift_bridgeObjectRelease_n();
    unint64_t v119 = MEMORY[0x263F8EE78];
    return specialized OrderedSet.init<A>(_:)(v119);
  }
  while (2)
  {
    uint64_t v6 = 0;
    unint64_t v134 = v4 & 0xC000000000000001;
    uint64_t v121 = (void *)(v4 + 32);
    unint64_t v124 = a1 + 1;
    BOOL v7 = __OFADD__(a1, 1);
    BOOL v125 = v7;
    uint64_t v122 = v5;
    uint64_t v123 = (void *)v4;
    while (1)
    {
      if (v134) {
        uint64_t v11 = (unsigned char *)MEMORY[0x2611848A0](v6, v4);
      }
      else {
        uint64_t v11 = (id)v121[v6];
      }
      a1 = (unint64_t)v11;
      BOOL v12 = __OFADD__(v6, 1);
      uint64_t v13 = v6 + 1;
      if (v12) {
        goto LABEL_132;
      }
      uint64_t v138 = v13;
      Swift::String v14 = &v11[OBJC_IVAR___SGNode_data];
      if ((v11[OBJC_IVAR___SGNode_data + 80] & 0xC0) != 0x40)
      {
        uint64_t v8 = (void *)specialized OrderedSet.init<A>(_:)(MEMORY[0x263F8EE78]);
        uint64_t v10 = v9;
        goto LABEL_8;
      }
      uint64_t v15 = *(void **)v14;
      unint64_t v136 = (void *)*((void *)v14 + 2);
      uint64_t v137 = *((void *)v14 + 1);
      uint64_t v16 = *((void *)v14 + 4);
      id v135 = (id)*((void *)v14 + 3);
      uint64_t v17 = *((void *)v14 + 5);
      unint64_t v4 = *((void *)v14 + 6);
      uint64_t v19 = *((void *)v14 + 7);
      uint64_t v18 = *((void *)v14 + 8);
      uint64_t v20 = *((void *)v14 + 9);
      unsigned __int8 v21 = v11[OBJC_IVAR___SGNode_data + 80];
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_25C4195A0;
      *(void *)(v22 + 32) = a1;
      unint64_t v148 = v22;
      specialized Array._endMutation()();
      unsigned __int8 v133 = v21;
      uint64_t v127 = v20;
      uint64_t v128 = v18;
      uint64_t v131 = v17;
      uint64_t v132 = v16;
      int v129 = v19;
      int v130 = v4;
      outlined copy of NodeData(v15, v137, v136, v135, v16, v17, v4, v19, v18, v20, v21);
      a1 = (unint64_t)(id)a1;
      uint64_t v23 = specialized OrderedSet.init<A>(_:)(v148);
      if (v125) {
        goto LABEL_135;
      }
      Swift::String v25 = (void *)v23;
      uint64_t v26 = v24;
      Swift::String v27 = v15;
      SGGraph.nodegraphs(_:)(v124);
      uint64_t v149 = v26;
      uint64_t v29 = *(void *)(v28 + 16);
      if (v29) {
        break;
      }
      swift_retain();
      swift_retain();
      swift_release();
      uint64_t v8 = v25;
      uint64_t v5 = v122;
      unint64_t v4 = (unint64_t)v123;
LABEL_119:
      swift_release();
      swift_release();
      swift_release();
      uint64_t v10 = v149;
      outlined consume of NodeData(v27, v137, v136, v135, v132, v131, v130, v129, v128, v127, v133);
LABEL_8:

      specialized Array.append<A>(contentsOf:)((uint64_t)v8, v10);
      uint64_t v6 = v138;
      if (v138 == v5)
      {
        swift_bridgeObjectRelease_n();
        unint64_t v119 = v150;
        return specialized OrderedSet.init<A>(_:)(v119);
      }
    }
    unint64_t v126 = a1;
    uint64_t v141 = v28 + 32;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v30 = 0;
    uint64_t v8 = v25;
    uint64_t v31 = v15;
    uint64_t v140 = v15;
    uint64_t v139 = v29;
    while (1)
    {
      unint64_t v32 = *(void **)(v141 + 8 * v30);
      uint64_t v147 = (void **)(v149 + 32);
      if (v8) {
        break;
      }
      uint64_t v63 = *(void *)(v149 + 16);
      if (!v63)
      {
        uint64_t v144 = *(void **)(v141 + 8 * v30);
        id v68 = v32;
        unint64_t v37 = 0;
        uint64_t v69 = v144;
        goto LABEL_61;
      }
      type metadata accessor for SGNode();
      uint64_t v64 = *v147;
      id v65 = v32;
      id v66 = v64;
      char v67 = static NSObject.== infix(_:_:)();

      if ((v67 & 1) == 0)
      {
        if (v63 == 1) {
          goto LABEL_58;
        }
        id v106 = *(id *)(v149 + 40);
        char v107 = static NSObject.== infix(_:_:)();

        if ((v107 & 1) == 0)
        {
          if (v63 == 2) {
            goto LABEL_58;
          }
          id v108 = *(id *)(v149 + 48);
          char v109 = static NSObject.== infix(_:_:)();

          if ((v109 & 1) == 0)
          {
            if (v63 == 3) {
              goto LABEL_58;
            }
            id v110 = *(id *)(v149 + 56);
            char v111 = static NSObject.== infix(_:_:)();

            if ((v111 & 1) == 0)
            {
              if (v63 == 4) {
                goto LABEL_58;
              }
              id v112 = *(id *)(v149 + 64);
              char v113 = static NSObject.== infix(_:_:)();

              if ((v113 & 1) == 0)
              {
                uint64_t v114 = v63 - 5;
                uint64_t v115 = (void **)(v149 + 72);
                while (v114)
                {
                  unint64_t v116 = *v115++;
                  id v117 = v116;
                  char v118 = static NSObject.== infix(_:_:)();

                  --v114;
                  if (v118) {
                    goto LABEL_55;
                  }
                }
LABEL_58:
                int64_t v145 = v32;
                unint64_t v37 = 0;
                uint64_t v31 = v140;
                uint64_t v69 = v145;
                goto LABEL_61;
              }
            }
          }
        }
      }
LABEL_55:

      uint64_t v8 = 0;
      uint64_t v31 = v140;
LABEL_18:
      if (++v30 == v29)
      {
        Swift::String v27 = v31;
        swift_release_n();
        swift_release();
        uint64_t v5 = v122;
        unint64_t v4 = (unint64_t)v123;
        a1 = v126;
        goto LABEL_119;
      }
    }
    unint64_t v4 = (unint64_t)(v8 + 2);
    Swift::Int v33 = v8[2];
    id v34 = v32;
    swift_retain();
    Swift::Int v35 = NSObject._rawHashValue(seed:)(v33);
    uint64_t v36 = 1 << v8[2];
    a1 = v36 - 1;
    if (__OFSUB__(v36, 1))
    {
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      swift_bridgeObjectRetain_n();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5) {
        goto LABEL_137;
      }
      continue;
    }
    break;
  }
  uint64_t v142 = v30;
  uint64_t v143 = v32;
  unint64_t v37 = a1 & v35;
  int64_t v146 = v8 + 4;
  uint64_t v38 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1 & v35, v8 + 2, (uint64_t)(v8 + 4));
  if (v38)
  {
    unint64_t v41 = v39;
    uint64_t v42 = v40;
    Swift::String v43 = v8;
    unint64_t v44 = (v38 ^ a1) + ((uint64_t)v8[3] >> 6);
    if (v44 >= a1) {
      unint64_t v45 = a1;
    }
    else {
      unint64_t v45 = 0;
    }
    unint64_t v46 = v44 - v45;
    type metadata accessor for SGNode();
    id v47 = v147[v46];
    char v48 = static NSObject.== infix(_:_:)();

    if ((v48 & 1) == 0)
    {
      a1 = 0;
      do
      {
        ++v37;
        uint64_t v49 = *(void *)v4 & 0x3FLL;
        uint64_t v50 = 1 << *(void *)v4;
        if (v37 == v50)
        {
          if (a1)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            goto LABEL_140;
          }
          uint64_t v8 = v43;
          unint64_t v37 = 0;
          a1 = 1;
          if (v42 < v49)
          {
LABEL_34:
            uint64_t v52 = (uint64_t)(v37 * v49) >> 6;
            if (v42)
            {
              if (__OFADD__(v49 << v49, 64)) {
                goto LABEL_124;
              }
              uint64_t v53 = (v49 << v49) + 126;
              if ((v49 << v49) + 64 >= 1) {
                uint64_t v53 = (v49 << v49) + 63;
              }
              if (v52 + 1 == v53 >> 6) {
                uint64_t v52 = 0;
              }
              else {
                ++v52;
              }
            }
            uint64_t v54 = v49 - v42;
            if (__OFSUB__(v49, v42)) {
              goto LABEL_122;
            }
            BOOL v55 = v52 == 2 && v49 == 5;
            uint64_t v56 = 64;
            if (v55) {
              uint64_t v56 = 32;
            }
            BOOL v12 = __OFSUB__(v56, v54);
            uint64_t v57 = v56 - v54;
            if (v12) {
              goto LABEL_123;
            }
            unint64_t v58 = v146[v52];
            uint64_t v51 = ((v58 << v42) | v41) & (v50 - 1);
            unint64_t v41 = v58 >> v54;
            uint64_t v42 = v57;
            if (!v51)
            {
LABEL_59:
              uint64_t v31 = v140;
              uint64_t v29 = v139;
              goto LABEL_60;
            }
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v8 = v43;
          if (v42 < v49) {
            goto LABEL_34;
          }
        }
        BOOL v12 = __OFSUB__(v42, v49);
        v42 -= v49;
        if (v12)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
          goto LABEL_125;
        }
        uint64_t v51 = (v50 - 1) & v41;
        v41 >>= v49;
        if (!v51) {
          goto LABEL_59;
        }
LABEL_49:
        unint64_t v59 = v50 - 1;
        unint64_t v60 = (v51 ^ v59) + ((uint64_t)v8[3] >> 6);
        if (v60 < v59) {
          unint64_t v59 = 0;
        }
        id v61 = v147[v60 - v59];
        char v62 = static NSObject.== infix(_:_:)();
      }
      while ((v62 & 1) == 0);
    }

    uint64_t v8 = v43;
    swift_release();
    uint64_t v31 = v140;
    uint64_t v29 = v139;
    uint64_t v30 = v142;
    goto LABEL_18;
  }
LABEL_60:
  swift_release();
  uint64_t v30 = v142;
  uint64_t v69 = v143;
LABEL_61:
  unint64_t v4 = (unint64_t)v69;
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  a1 = v149;
  unint64_t v70 = *(void *)(v149 + 16);
  if (!v8)
  {
    if (v70 <= 0xF)
    {

      uint64_t v8 = 0;
      goto LABEL_18;
    }
    uint64_t v72 = 0;
LABEL_73:
    double v76 = ceil((double)(uint64_t)v70 / 0.75);
    if ((~*(void *)&v76 & 0x7FF0000000000000) == 0) {
      goto LABEL_126;
    }
    if (v76 <= -9.22337204e18) {
      goto LABEL_127;
    }
    if (v76 >= 9.22337204e18) {
      goto LABEL_128;
    }
    if ((uint64_t)(v70 + 1) > (uint64_t)v76) {
      uint64_t v77 = v70 + 1;
    }
    else {
      uint64_t v77 = (uint64_t)v76;
    }
    int64_t v78 = 64 - __clz(v77 - 1);
    if (v72 <= v78) {
      int64_t v75 = v78;
    }
    else {
      int64_t v75 = v72;
    }
LABEL_82:
    uint64_t v79 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v149, v75, 0, v72);
    swift_release();

    uint64_t v8 = (void *)v79;
    goto LABEL_18;
  }
  swift_beginAccess();
  unint64_t v71 = v8[2] & 0x3FLL;
  if (v71 <= 4)
  {
    if (v70 < 0x10) {
      goto LABEL_83;
    }
    uint64_t v72 = v8[3] & 0x3FLL;
    goto LABEL_73;
  }
  double v73 = (double)(1 << v71) * 0.75;
  if ((~*(void *)&v73 & 0x7FF0000000000000) == 0) {
    goto LABEL_129;
  }
  if (v73 <= -9.22337204e18) {
    goto LABEL_130;
  }
  if (v73 >= 9.22337204e18) {
    goto LABEL_131;
  }
  if ((uint64_t)v70 > (uint64_t)v73)
  {
    uint64_t v74 = v8[3];
    int64_t v75 = v74 & 0x3F;
    if (v70 > 0xF)
    {
      uint64_t v72 = v74 & 0x3F;
      goto LABEL_73;
    }
    uint64_t v72 = v74 & 0x3F;
    if ((v74 & 0x3F) == 0)
    {

      swift_release();
      uint64_t v8 = 0;
      goto LABEL_18;
    }
    goto LABEL_82;
  }
LABEL_83:
  if (swift_isUniquelyReferenced_native())
  {
LABEL_94:
    uint64_t v92 = -1 << v8[2];
    uint64_t v93 = v92 + 1;
    uint64_t v94 = *(void *)(v149 + 16) + ~((uint64_t)v8[3] >> 6);
    unint64_t v95 = v92 ^ ~(((v94 >> 63) & ~v92) + v94);
    uint64_t v96 = (v8[2] & 0x3FLL) * v37;
    uint64_t v97 = v96 >> 6;
    v8[(v96 >> 6) + 4] = (v95 << v96) | ((v93 << v96) - 1) & v8[(v96 >> 6) + 4];
    unint64_t v98 = 64 - (v96 & 0x3F);
    uint64_t v99 = v8[2];
    if (v98 < (v99 & 0x3Fu))
    {
      uint64_t v100 = (v99 & 0x3F) << (v99 & 0x3F);
      BOOL v12 = __OFADD__(v100, 64);
      uint64_t v101 = v100 + 64;
      if (v12) {
        goto LABEL_134;
      }
      uint64_t v103 = v101 - 1;
      BOOL v102 = v101 < 1;
      uint64_t v104 = v101 + 62;
      if (!v102) {
        uint64_t v104 = v103;
      }
      if (v97 + 1 == v104 >> 6) {
        uint64_t v105 = 0;
      }
      else {
        uint64_t v105 = v97 + 1;
      }
      v8[v105 + 4] = v8[v105 + 4] & (-1 << (v99 - v98)) | (v95 >> v98);
    }

    goto LABEL_18;
  }
  unint64_t v80 = v31;
  uint64_t v81 = v8[2];
  uint64_t v82 = (v81 & 0x3F) << v81;
  uint64_t v83 = v82 + 64;
  if (__OFADD__(v82, 64)) {
    goto LABEL_133;
  }
  uint64_t v84 = v82 + 63;
  if (v83 < 1) {
    uint64_t v84 = v83 + 62;
  }
  uint64_t v85 = v84 >> 6;
  type metadata accessor for _HashTable.Storage();
  size_t v86 = 8 * v85;
  uint64_t v87 = swift_allocObject();
  uint64_t v88 = v8[3];
  *(void *)(v87 + 16) = v81;
  *(void *)(v87 + 24) = v88;
  if (v83 > -63)
  {
    Swift::String v89 = (void *)v87;
    Swift::String v90 = (char *)(v87 + 32);
    if (v8 + 4 >= (void *)&v90[v86] || v90 >= (char *)&v8[v86 / 8 + 4])
    {
      uint64_t v31 = v80;
      memcpy(v90, v8 + 4, v86);
      swift_release();
      uint64_t v8 = v89;
      uint64_t v29 = v139;
      goto LABEL_94;
    }
  }
LABEL_140:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static DotError.== infix(_:_:)()
{
  return 1;
}

void DotError.hash(into:)()
{
}

Swift::Int DotError.hashValue.getter()
{
  return Hasher._finalize()();
}

void *closure #1 in Graph.subgraphs()@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  if (*result >> 61 != 6)
  {
    uint64_t v40 = (_OWORD *)MEMORY[0x263F8EE78];
LABEL_33:
    *a2 = v40;
    return result;
  }
  uint64_t v5 = (_OWORD *)(*result & 0x1FFFFFFFFFFFFFFFLL);
  long long v6 = v5[9];
  long long v56 = v5[8];
  long long v57 = v6;
  v58[0] = v5[10];
  *(_OWORD *)((char *)v58 + 9) = *(_OWORD *)((char *)v5 + 169);
  long long v7 = v5[5];
  long long v52 = v5[4];
  long long v53 = v7;
  long long v8 = v5[7];
  long long v54 = v5[6];
  long long v55 = v8;
  long long v9 = v5[2];
  long long v49 = v5[1];
  long long v50 = v9;
  long long v51 = v5[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Graph>);
  uint64_t v10 = (_OWORD *)swift_allocObject();
  long long v11 = v55;
  v10[7] = v54;
  v10[8] = v11;
  long long v12 = v53;
  v10[5] = v52;
  v10[6] = v12;
  *(_OWORD *)((char *)v10 + 185) = *(_OWORD *)((char *)v58 + 9);
  long long v13 = v58[0];
  long long v14 = v56;
  v10[10] = v57;
  v10[11] = v13;
  v10[9] = v14;
  long long v15 = v49;
  long long v16 = v50;
  long long v17 = v51;
  v10[1] = xmmword_25C418EE0;
  void v10[2] = v15;
  v10[3] = v16;
  v10[4] = v17;
  uint64_t v18 = v53;
  int64_t v19 = *(void *)(v53 + 16);
  if (!v19)
  {
    outlined retain of Graph((uint64_t)&v49);
    outlined retain of Graph((uint64_t)&v49);
LABEL_32:
    unint64_t v44 = v10;
    swift_bridgeObjectRetain();
    uint64_t v41 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v41);
    outlined release of Graph((uint64_t)&v49);
    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    uint64_t v40 = v44;
    goto LABEL_33;
  }
  outlined retain of Graph((uint64_t)&v49);
  swift_bridgeObjectRetain();
  outlined retain of Graph((uint64_t)&v49);
  swift_bridgeObjectRetain();
  unint64_t v20 = 0;
  unsigned __int8 v21 = (void *)MEMORY[0x263F8EE78];
  while (2)
  {
    uint64_t v22 = 48 * v20;
    while (1)
    {
      if (v20 >= v19)
      {
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v23 = v18 + v22;
      uint64_t v24 = *(void *)(v18 + v22 + 56);
      if (v24 != -7) {
        break;
      }
      uint64_t v25 = v20 + 1;
      if (__OFADD__(v20, 1)) {
        goto LABEL_35;
      }
      ++v20;
      v22 += 48;
      if (v25 >= v19) {
        goto LABEL_29;
      }
    }
    uint64_t v42 = a2;
    char v26 = *(unsigned char *)(v23 + 72);
    uint64_t v27 = *(void *)(v23 + 64);
    unint64_t v44 = *(_OWORD **)(v23 + 32);
    long long v45 = *(_OWORD *)(v23 + 40);
    uint64_t v46 = v24;
    uint64_t v47 = v27;
    char v48 = v26;
    closure #1 in Graph.subgraphs()(&v43, &v44);
    uint64_t v59 = v3;
    uint64_t v28 = v43;
    uint64_t v29 = *(void *)(v43 + 16);
    int64_t v30 = v21[2];
    int64_t v31 = v30 + v29;
    if (__OFADD__(v30, v29))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v31 <= v21[3] >> 1)
    {
      if (*(void *)(v28 + 16)) {
        goto LABEL_14;
      }
LABEL_27:
      if (!v29)
      {
LABEL_28:
        ++v20;
        swift_bridgeObjectRelease();
        uint64_t v3 = v59;
        a2 = v42;
        if ((uint64_t)v20 < v19) {
          continue;
        }
LABEL_29:
        swift_bridgeObjectRelease_n();
        goto LABEL_32;
      }
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    break;
  }
  if (v30 <= v31) {
    int64_t v39 = v30 + v29;
  }
  else {
    int64_t v39 = v30;
  }
  unsigned __int8 v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v39, 1, v21);
  if (!*(void *)(v28 + 16)) {
    goto LABEL_27;
  }
LABEL_14:
  uint64_t v33 = v21[2];
  if ((v21[3] >> 1) - v33 < v29) {
    goto LABEL_38;
  }
  unint64_t v34 = (unint64_t)&v21[22 * v33 + 4];
  if (v28 + 32 >= v34 + 176 * v29 || v34 >= v28 + 32 + 176 * v29)
  {
    swift_arrayInitWithCopy();
    if (!v29) {
      goto LABEL_28;
    }
    uint64_t v36 = v21[2];
    BOOL v37 = __OFADD__(v36, v29);
    uint64_t v38 = v36 + v29;
    if (!v37)
    {
      _OWORD v21[2] = v38;
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_40:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t graphDotText(representing:index:)(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v126 = 95;
  *((void *)&v126 + 1) = 0xE100000000000000;
  *(void *)&long long v124 = a2;
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  long long v4 = v126;
  uint64_t v100 = *(void **)(a1 + 32);
  uint64_t v101 = *(void *)(a1 + 24);
  long long v5 = *(_OWORD *)(a1 + 96);
  long long v126 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)uint64_t v127 = v5;
  *(_OWORD *)&v127[9] = *(_OWORD *)(a1 + 105);
  uint64_t v6 = v5;
  long long v7 = *(_OWORD *)(a1 + 128);
  long long v8 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)&v125[9] = *(_OWORD *)(a1 + 153);
  long long v124 = v7;
  *(_OWORD *)BOOL v125 = v8;
  long long v9 = v7;
  uint64_t v10 = v8;
  uint64_t v99 = (uint64_t *)a1;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v123 = v11;
  int64_t v12 = *(void *)(v11 + 16);
  unint64_t v112 = v126;
  outlined copy of NodePersonality(v126);
  uint64_t v128 = *((void *)&v126 + 1);
  swift_bridgeObjectRetain();
  uint64_t v110 = v6;
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v9);
  swift_bridgeObjectRetain();
  uint64_t v111 = v10;
  swift_bridgeObjectRetain();
  uint64_t result = outlined retain of [Input]((uint64_t)&v123);
  if (!v12)
  {
    uint64_t v105 = MEMORY[0x263F8EE78];
    goto LABEL_43;
  }
  uint64_t v14 = 0;
  uint64_t v108 = v11 + 56;
  char v96 = v127[24];
  uint64_t v95 = *(void *)&v127[16];
  char v102 = v125[24];
  uint64_t v103 = *(void *)&v125[8];
  uint64_t v104 = v11 + 32;
  uint64_t v97 = *(void *)&v127[8];
  uint64_t v98 = *(void *)&v125[16];
  uint64_t v15 = v11 + 104;
  uint64_t v105 = MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v16 = 48 * v14;
    if (*(void *)(v108 + 48 * v14) == -7) {
      break;
    }
LABEL_12:
    uint64_t v20 = v104 + v16;
    unint64_t v21 = *(void *)v20;
    uint64_t v22 = *(void *)(v20 + 8);
    uint64_t v24 = *(void *)(v20 + 16);
    uint64_t v23 = *(void *)(v20 + 24);
    uint64_t v107 = *(void *)(v20 + 32);
    ++v14;
    char v109 = *(unsigned char *)(v20 + 40);
    outlined copy of NodePersonality(*(void *)v20);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((specialized static NodePersonality.== infix(_:_:)(v21, v112) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(v22, v128) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(v24, v110) & 1) != 0
      && v23 == v97)
    {
      if (v109)
      {
        if (v96) {
          goto LABEL_32;
        }
      }
      else
      {
        char v25 = v96;
        if (v107 != v95) {
          char v25 = 1;
        }
        if ((v25 & 1) == 0) {
          goto LABEL_32;
        }
      }
    }
    if ((specialized static NodePersonality.== infix(_:_:)(v21, v9) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(v22, *((void *)&v9 + 1)) & 1) != 0
      && (specialized static Array<A>.== infix(_:_:)(v24, v111) & 1) != 0
      && v23 == v103)
    {
      if ((v109 & 1) == 0)
      {
        char v26 = v102;
        if (v107 != v98) {
          char v26 = 1;
        }
        if ((v26 & 1) == 0) {
          goto LABEL_32;
        }
        char v109 = 0;
        goto LABEL_35;
      }
      if ((v102 & 1) == 0)
      {
        char v109 = 1;
LABEL_35:
        uint64_t v23 = v103;
        goto LABEL_36;
      }
LABEL_32:
      outlined consume of NodePersonality(v21);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v14 >= v12) {
        goto LABEL_43;
      }
    }
    else
    {
LABEL_36:
      uint64_t v27 = v105;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v113 = v105;
      if ((result & 1) == 0)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v105 + 16) + 1, 1);
        uint64_t v27 = v113;
      }
      unint64_t v29 = *(void *)(v27 + 16);
      unint64_t v28 = *(void *)(v27 + 24);
      unint64_t v30 = v29 + 1;
      if (v29 >= v28 >> 1)
      {
        unint64_t v106 = v29 + 1;
        unint64_t v94 = *(void *)(v27 + 16);
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        unint64_t v30 = v106;
        unint64_t v29 = v94;
        uint64_t v27 = v113;
      }
      *(void *)(v27 + 16) = v30;
      uint64_t v105 = v27;
      unint64_t v31 = v27 + 48 * v29;
      *(void *)(v31 + 32) = v21;
      *(void *)(v31 + 40) = v22;
      *(void *)(v31 + 48) = v24;
      *(void *)(v31 + 56) = v23;
      *(void *)(v31 + 64) = v107;
      *(unsigned char *)(v31 + 72) = v109;
      if (v14 >= v12) {
        goto LABEL_43;
      }
    }
  }
  unint64_t v17 = v14 + 1;
  if (v14 + 1 >= v12)
  {
LABEL_43:
    outlined release of [Input]((uint64_t)&v123);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode>);
    uint64_t inited = (_OWORD *)swift_initStackObject();
    long long v33 = v126;
    long long v34 = *(_OWORD *)v127;
    inited[1] = xmmword_25C418EE0;
    inited[2] = v33;
    inited[3] = v34;
    *(_OWORD *)((char *)inited + 57) = *(_OWORD *)&v127[9];
    outlined copy of NodePersonality(v112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SSs5NeverOTg504_s11d61Graph12graphDotText12representing5indexSSAA0B0V_SitKF20createF41StatementsL_ySaySSGSayAA0abI0VGFSSAJXEfU_SSA2HTf1cn_nTf4nggg_n((uint64_t)inited, v4, *((void **)&v4 + 1), (uint64_t)&v126, (uint64_t)&v124);
    outlined consume of NodePersonality(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    Swift::Int v35 = (_OWORD *)swift_initStackObject();
    v35[1] = xmmword_25C418EE0;
    long long v36 = *(_OWORD *)v125;
    v35[2] = v124;
    v35[3] = v36;
    *(_OWORD *)((char *)v35 + 57) = *(_OWORD *)&v125[9];
    outlined copy of NodePersonality(v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SSs5NeverOTg504_s11d61Graph12graphDotText12representing5indexSSAA0B0V_SitKF20createF41StatementsL_ySaySSGSayAA0abI0VGFSSAJXEfU_SSA2HTf1cn_nTf4nggg_n((uint64_t)v35, v4, *((void **)&v4 + 1), (uint64_t)&v126, (uint64_t)&v124);
    outlined consume of NodePersonality(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v112);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    outlined copy of NodePersonality(v112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SSs5NeverOTg504_s11d61Graph12graphDotText12representing5indexSSAA0B0V_SitKF20createF41StatementsL_ySaySSGSayAA0abI0VGFSSAJXEfU_SSA2HTf1cn_nTf4nggg_n(v105, v4, *((void **)&v4 + 1), (uint64_t)&v126, (uint64_t)&v124);
    outlined consume of NodePersonality(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v112);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v37 = swift_bridgeObjectRelease();
    uint64_t v38 = *v99;
    uint64_t v39 = v99[1];
    uint64_t v40 = v99[2];
    MEMORY[0x270FA5388](v37);
    outlined retain of Graph((uint64_t)v99);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v41 = specialized Sequence.compactMap<A>(_:)(v38, v39, v40, (void (*)(void *__return_ptr, uint64_t, long long *))partial apply for closure #1 in Graph.sinkNodes());
    swift_release();
    swift_release();
    swift_release();
    specialized Graph.DepthFirstEdgeIterator.init(_:initial:)(v99, v41, &v113);
    swift_bridgeObjectRetain();
    specialized Sequence.compactMap<A>(_:)((uint64_t *)&v113, (uint64_t)v99, v4, *((void **)&v4 + 1));
    swift_bridgeObjectRelease();
    outlined release of Graph((uint64_t)v99);
    long long v120 = v113;
    uint64_t v42 = v114;
    outlined init with take of MetalFunctionNode?((uint64_t)&v120, (uint64_t)v122, &demangling cache variable for type metadata for _HashTable.Storage?);
    outlined release of _HashTable.Storage?((uint64_t)v122);
    uint64_t v121 = *((void *)&v120 + 1);
    outlined release of _HashTable.Storage?((uint64_t)&v121);
    uint64_t v119 = v42;
    outlined release of _HashTable.Storage?((uint64_t)&v119);
    uint64_t v118 = v115;
    outlined release of [Input]((uint64_t)&v118);
    uint64_t v117 = v116;
    outlined release of [Input]((uint64_t)&v117);
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(528);
    v43._uint64_t countAndFlagsBits = 0xD000000000000012;
    v43._object = (void *)0x800000025C426680;
    String.append(_:)(v43);
    v44._uint64_t countAndFlagsBits = v101;
    v44._object = v100;
    String.append(_:)(v44);
    v45._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v45._object = (void *)0x800000025C4266A0;
    String.append(_:)(v45);
    v46._uint64_t countAndFlagsBits = v101;
    v46._object = v100;
    String.append(_:)(v46);
    v47._uint64_t countAndFlagsBits = 0x22202020200A0A22;
    v47._object = (void *)0xE800000000000000;
    String.append(_:)(v47);
    v48._uint64_t countAndFlagsBits = v101;
    v48._object = v100;
    String.append(_:)(v48);
    v49._object = (void *)0x800000025C4266D0;
    v49._uint64_t countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v49);
    v50._uint64_t countAndFlagsBits = v101;
    v50._object = v100;
    String.append(_:)(v50);
    v51._uint64_t countAndFlagsBits = 0xD000000000000017;
    v51._object = (void *)0x800000025C4266F0;
    String.append(_:)(v51);
    v52._uint64_t countAndFlagsBits = v101;
    v52._object = v100;
    String.append(_:)(v52);
    v53._object = (void *)0x800000025C426710;
    v53._uint64_t countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v53);
    v54._uint64_t countAndFlagsBits = v101;
    v54._object = v100;
    String.append(_:)(v54);
    v55._uint64_t countAndFlagsBits = 0x22203E2D2022315FLL;
    v55._object = (void *)0xE800000000000000;
    String.append(_:)(v55);
    v56._uint64_t countAndFlagsBits = v101;
    v56._object = v100;
    String.append(_:)(v56);
    v57._uint64_t countAndFlagsBits = 0xD000000000000017;
    v57._object = (void *)0x800000025C4266F0;
    String.append(_:)(v57);
    v58._uint64_t countAndFlagsBits = v101;
    v58._object = v100;
    String.append(_:)(v58);
    v59._uint64_t countAndFlagsBits = 0x22203E2D2022325FLL;
    v59._object = (void *)0xE800000000000000;
    String.append(_:)(v59);
    v60._uint64_t countAndFlagsBits = v101;
    v60._object = v100;
    String.append(_:)(v60);
    v61._uint64_t countAndFlagsBits = 0xD000000000000029;
    v61._object = (void *)0x800000025C426730;
    String.append(_:)(v61);
    v62._uint64_t countAndFlagsBits = v101;
    v62._object = v100;
    String.append(_:)(v62);
    v63._uint64_t countAndFlagsBits = 0xD000000000000035;
    v63._object = (void *)0x800000025C426760;
    String.append(_:)(v63);
    v64._uint64_t countAndFlagsBits = v101;
    v64._object = v100;
    String.append(_:)(v64);
    v65._uint64_t countAndFlagsBits = 0x2020200A3B22315FLL;
    v65._object = (void *)0xED00002020202020;
    String.append(_:)(v65);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
    uint64_t v66 = BidirectionalCollection<>.joined(separator:)();
    id v68 = v67;
    swift_bridgeObjectRelease();
    v69._uint64_t countAndFlagsBits = v66;
    v69._object = v68;
    String.append(_:)(v69);
    swift_bridgeObjectRelease();
    v70._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    v70._object = (void *)0x800000025C4267A0;
    String.append(_:)(v70);
    v71._uint64_t countAndFlagsBits = v101;
    v71._object = v100;
    String.append(_:)(v71);
    v72._uint64_t countAndFlagsBits = 0xD000000000000034;
    v72._object = (void *)0x800000025C4267C0;
    String.append(_:)(v72);
    v73._uint64_t countAndFlagsBits = v101;
    v73._object = v100;
    String.append(_:)(v73);
    v74._uint64_t countAndFlagsBits = 0x2020200A3B22325FLL;
    v74._object = (void *)0xED00002020202020;
    String.append(_:)(v74);
    uint64_t v75 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v77 = v76;
    swift_bridgeObjectRelease();
    v78._uint64_t countAndFlagsBits = v75;
    v78._object = v77;
    String.append(_:)(v78);
    swift_bridgeObjectRelease();
    v79._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    v79._object = (void *)0x800000025C4267A0;
    String.append(_:)(v79);
    v80._uint64_t countAndFlagsBits = v101;
    v80._object = v100;
    String.append(_:)(v80);
    v81._uint64_t countAndFlagsBits = 0xD000000000000036;
    v81._object = (void *)0x800000025C426800;
    String.append(_:)(v81);
    v82._uint64_t countAndFlagsBits = v101;
    v82._object = v100;
    String.append(_:)(v82);
    v83._uint64_t countAndFlagsBits = 0x2020200A3B22335FLL;
    v83._object = (void *)0xED00002020202020;
    String.append(_:)(v83);
    uint64_t v84 = BidirectionalCollection<>.joined(separator:)();
    size_t v86 = v85;
    swift_bridgeObjectRelease();
    v87._uint64_t countAndFlagsBits = v84;
    v87._object = v86;
    String.append(_:)(v87);
    swift_bridgeObjectRelease();
    v88._uint64_t countAndFlagsBits = 0xA0A7D202020200ALL;
    v88._object = (void *)0xEC00000020202020;
    String.append(_:)(v88);
    uint64_t v89 = BidirectionalCollection<>.joined(separator:)();
    Swift::String v91 = v90;
    swift_bridgeObjectRelease();
    v92._uint64_t countAndFlagsBits = v89;
    v92._object = v91;
    String.append(_:)(v92);
    swift_bridgeObjectRelease();
    v93._uint64_t countAndFlagsBits = 32010;
    v93._object = (void *)0xE200000000000000;
    String.append(_:)(v93);
    outlined consume of NodePersonality(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v112);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v18 = 48 * v14++;
  while (v17 < v12)
  {
    if (*(void *)(v15 + v18) != -7)
    {
      uint64_t v16 = v18 + 48;
      goto LABEL_12;
    }
    uint64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      goto LABEL_45;
    }
    ++v14;
    v18 += 48;
    if (v19 >= v12) {
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

void closure #1 in createNodeStatements #1 (_:) in graphDotText(representing:index:)(long long *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  long long v8 = *(long long *)((char *)a1 + 25);
  long long v9 = a1[1];
  long long v38 = *a1;
  *(_OWORD *)uint64_t v39 = v9;
  *(_OWORD *)&v39[9] = v8;
  uint64_t v10 = specialized ShaderGraphNode.dotLabel.getter(v38);
  unint64_t v32 = v11;
  uint64_t v33 = v10;
  swift_bridgeObjectRetain();
  uint64_t v12 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_SSs5NeverOTg504_s11d111Graph12graphDotText12representing5indexSSAA0B0V_SitKF20createNodeStatementsL_ySaySSGSayAA0abI0VGFSSAJXEfU_SSAA5F6VXEfU_SSTf1cn_nTf4ng_nTm(v12, a2, a3, (uint64_t)v40, (uint64_t (*)(uint64_t))Input.dotID.getter);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t v31 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_SSs5NeverOTg504_s11d111Graph12graphDotText12representing5indexSSAA0B0V_SitKF20createNodeStatementsL_ySaySSGSayAA0abI0VGFSSAJXEfU_SSAA5F6VXEfU_SSTf1cn_nTf4ng_nTm(v15, a2, a3, (uint64_t)v37, (uint64_t (*)(uint64_t))Output.dotID.getter);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = specialized ShaderGraphNode.dotID.getter();
  v36._object = v19;
  swift_bridgeObjectRetain();
  v20._uint64_t countAndFlagsBits = a2;
  v20._object = a3;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 0x6C6562616C5B2022;
  v21._object = (void *)0xEC0000007B7B223DLL;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = v31;
  v22._object = v14;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 2129021;
  v23._object = (void *)0xE300000000000000;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = v33;
  v24._object = v32;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 2065726496;
  v25._object = (void *)0xE400000000000000;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = v16;
  v26._object = v18;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 2260349;
  v27._object = (void *)0xE300000000000000;
  String.append(_:)(v27);
  if ((specialized static ShaderGraphNode.== infix(_:_:)((uint64_t)&v38, a4) & 1) != 0
    || (specialized static ShaderGraphNode.== infix(_:_:)((uint64_t)&v38, a5) & 1) != 0)
  {
    v28._uint64_t countAndFlagsBits = 0x746469776E657020;
    v28._object = (void *)0xEB00000000323D68;
    String.append(_:)(v28);
  }
  v29._uint64_t countAndFlagsBits = 93;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  *a6 = 34;
  a6[1] = 0xE100000000000000;
}

long long *closure #2 in graphDotText(representing:index:)@<X0>(long long *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, unint64_t a5@<X8>)
{
  long long v71 = *result;
  long long v70 = *(long long *)((char *)result + 56);
  if (*(void *)result == -7) {
    goto LABEL_5;
  }
  if ((v71 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v11 = *(void *)(a2 + 64);
  unint64_t v12 = *(void *)(v11 + 16);
  if ((unint64_t)v71 >= v12)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((void)v70 == -7)
  {
LABEL_5:
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    return result;
  }
  if ((unint64_t)v70 < v12)
  {
    Swift::String v64 = (uint64_t *)a5;
    uint64_t v15 = v11 + 32;
    unint64_t v16 = *(void *)(v15 + 48 * v70);
    unint64_t v66 = *(void *)(v15 + 48 * v71);
    outlined copy of NodePersonality(v66);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v65 = v16;
    outlined copy of NodePersonality(v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    uint64_t v68 = 34;
    unint64_t v69 = 0xE100000000000000;
    v67._uint64_t countAndFlagsBits = specialized ShaderGraphNode.dotID.getter();
    v67._object = v17;
    swift_bridgeObjectRetain();
    v18._uint64_t countAndFlagsBits = a3;
    v18._object = a4;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = 2243106;
    v19._object = (void *)0xE300000000000000;
    String.append(_:)(v19);
    v67._uint64_t countAndFlagsBits = Output.dotID.getter();
    v67._object = v20;
    swift_bridgeObjectRetain();
    v21._uint64_t countAndFlagsBits = a3;
    v21._object = a4;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 0x22203E2D20653A22;
    v22._object = (void *)0xE800000000000000;
    String.append(_:)(v22);
    v67._uint64_t countAndFlagsBits = specialized ShaderGraphNode.dotID.getter();
    v67._object = v23;
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = a3;
    v24._object = a4;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 2243106;
    v25._object = (void *)0xE300000000000000;
    String.append(_:)(v25);
    v67._uint64_t countAndFlagsBits = Input.dotID.getter();
    v67._object = v26;
    swift_bridgeObjectRetain();
    v27._uint64_t countAndFlagsBits = a3;
    v27._object = a4;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 7813666;
    v28._object = (void *)0xE300000000000000;
    String.append(_:)(v28);
    type metadata accessor for MaterialXDataType();
    if (swift_dynamicCastClass())
    {
      swift_retain();
      MaterialXDataType.description.getter();
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v29 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v31 = v30;
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      type metadata accessor for MetalDataType();
      uint64_t v32 = swift_dynamicCastClass();
      if (v32)
      {
        uint64_t v34 = *(void *)(v32 + 24);
        uint64_t v33 = *(void **)(v32 + 32);
        swift_retain();
        swift_bridgeObjectRetain();
        v35._uint64_t countAndFlagsBits = v34;
        v35._object = v33;
        String.append(_:)(v35);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v29 = 0x3A6C6174656DLL;
        uint64_t v31 = (void *)0xE600000000000000;
      }
      else
      {
        uint64_t v29 = (*(uint64_t (**)(void))(**((void **)&v71 + 1) + 136))();
        uint64_t v31 = v36;
      }
    }
    long long v7 = v64;
    if (swift_dynamicCastClass())
    {
      swift_retain();
      MaterialXDataType.description.getter();
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v39 = v38;
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      type metadata accessor for MetalDataType();
      uint64_t v40 = swift_dynamicCastClass();
      if (v40)
      {
        uint64_t v45 = *(void *)(v40 + 24);
        Swift::String v44 = *(void **)(v40 + 32);
        swift_retain();
        swift_bridgeObjectRetain();
        v46._uint64_t countAndFlagsBits = v45;
        v46._object = v44;
        String.append(_:)(v46);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v37 = 0x3A6C6174656DLL;
        uint64_t v39 = (void *)0xE600000000000000;
      }
      else
      {
        uint64_t v37 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**((void **)&v70 + 1) + 136))(0, v41, v42, v43);
        uint64_t v39 = v47;
      }
    }
    if (v29 == v37 && v31 == v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v48._uint64_t countAndFlagsBits = v29;
      v48._object = v31;
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      v49._uint64_t countAndFlagsBits = 34;
      v49._object = (void *)0xE100000000000000;
      String.append(_:)(v49);
      uint64_t v8 = 0x6562616C6C696174;
      unint64_t v6 = 0xEB00000000223D6CLL;
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v9 = v10[2];
      a5 = v10[3];
    }
    else
    {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v51 = v10[2];
      unint64_t v50 = v10[3];
      if (v51 >= v50 >> 1) {
        uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v10);
      }
      void v10[2] = v51 + 1;
      Swift::String v52 = &v10[2 * v51];
      v52[4] = 0xD000000000000044;
      v52[5] = 0x800000025C426840;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      v53._uint64_t countAndFlagsBits = v29;
      v53._object = v31;
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      v54._uint64_t countAndFlagsBits = 0x209286E220;
      v54._object = (void *)0xA500000000000000;
      String.append(_:)(v54);
      v55._uint64_t countAndFlagsBits = v37;
      v55._object = v39;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v56._uint64_t countAndFlagsBits = 34;
      v56._object = (void *)0xE100000000000000;
      String.append(_:)(v56);
      uint64_t v8 = 0x6562616C6C696174;
      unint64_t v6 = 0xEB00000000223D6CLL;
      unint64_t v9 = v10[2];
      a5 = v10[3];
    }
    int64_t v5 = v9 + 1;
    if (v9 < a5 >> 1) {
      goto LABEL_25;
    }
    goto LABEL_29;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(a5 > 1), v5, 1, v10);
LABEL_25:
  void v10[2] = v5;
  Swift::String v57 = &v10[2 * v9];
  v57[4] = v8;
  v57[5] = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t v58 = BidirectionalCollection<>.joined(separator:)();
  Swift::String v60 = v59;
  swift_bridgeObjectRelease();
  v61._uint64_t countAndFlagsBits = v58;
  v61._object = v60;
  String.append(_:)(v61);
  swift_bridgeObjectRelease();
  v62._uint64_t countAndFlagsBits = 93;
  v62._object = (void *)0xE100000000000000;
  String.append(_:)(v62);
  v63._uint64_t countAndFlagsBits = 23328;
  v63._object = (void *)0xE200000000000000;
  String.append(_:)(v63);
  outlined consume of NodePersonality(v66);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = (long long *)swift_bridgeObjectRelease();
  *long long v7 = v68;
  v7[1] = v69;
  return result;
}

uint64_t MetalFunctionNode.dotLabel.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  unint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v10((char *)&v27 - v11, v2, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasDebugLabel);
  if (!swift_dynamicCast())
  {
    uint64_t v33 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v31, &demangling cache variable for type metadata for HasDebugLabel?);
    v10(v9, v2, a1);
LABEL_5:
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
    *(void *)&long long v31 = 25705;
    *((void *)&v31 + 1) = 0xE200000000000000;
    uint64_t v29 = v17;
    v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    uint64_t v16 = *((void *)&v31 + 1);
    uint64_t v14 = v31;
    goto LABEL_6;
  }
  uint64_t v12 = *((void *)&v32 + 1);
  uint64_t v13 = v33;
  __swift_project_boxed_opaque_existential_1(&v31, *((uint64_t *)&v32 + 1));
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  uint64_t v16 = v15;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v31);
  v10(v9, v3, a1);
  if (!v16) {
    goto LABEL_5;
  }
LABEL_6:
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a1);
  *(void *)&long long v31 = v14;
  *((void *)&v31 + 1) = v16;
  uint64_t v29 = 60;
  unint64_t v30 = 0xE100000000000000;
  uint64_t v27 = 40;
  unint64_t v28 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  *(void *)&long long v31 = v19;
  *((void *)&v31 + 1) = v21;
  uint64_t v29 = 62;
  unint64_t v30 = 0xE100000000000000;
  uint64_t v27 = 41;
  unint64_t v28 = 0xE100000000000000;
  uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  *(void *)&long long v31 = v22;
  *((void *)&v31 + 1) = v24;
  uint64_t v29 = 34;
  unint64_t v30 = 0xE100000000000000;
  uint64_t v27 = 8796;
  unint64_t v28 = 0xE200000000000000;
  uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  return v25;
}

void closure #1 in createNodeStatements #1 (_:) in createDotText(representing:inputNodeIDs:outputNodeIDs:)(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 48))(v6, v7);
  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph14FunctionNodeIDVGG_SSs5NeverOTg506_sSi11f7Graph14hi36IDVSSIgyyo_Si6offset_AC7elementtSSs5K194OIegnrzr_TR04_s11a41Graph13createDotText12representing12inputd43IDs06outputhI0SSAA05MetalA7ProgramC_SayAA08c29H2IDVGAJtKF0cH10StatementsL_yS42SSGSayAA0kmH0_pGFSSAaM_pXEfU_SSSi_AItXEfU_Tf3nnnpf_nTf1cn_n(v8);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t v9 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 25705;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0x6C6562616C5B2022;
  v16._object = (void *)0xEC0000007B7B223DLL;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = v9;
  v17._object = v11;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 0x6C757365723C7C7DLL;
  v18._object = (void *)0xEB00000000203E74;
  String.append(_:)(v18);
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v19);
  v21._uint64_t countAndFlagsBits = MetalFunctionNode.dotLabel.getter(v19, v20);
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 8829;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v23);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 24))(v23, v24);
  if (specialized Sequence<>.contains(_:)(v25, a2))
  {
    v26._uint64_t countAndFlagsBits = 0x746469776E657020;
    v26._object = (void *)0xEB00000000323D68;
    String.append(_:)(v26);
  }
  v27._uint64_t countAndFlagsBits = 93;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  *a3 = 34;
  a3[1] = 0xE100000000000000;
}

uint64_t closure #1 in closure #4 in createDotText(representing:inputNodeIDs:outputNodeIDs:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = a3;
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a3 + 272))(v37, a2);
  if (!v5)
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    uint64_t v35 = 34;
    unint64_t v36 = 0xE100000000000000;
    v34._uint64_t countAndFlagsBits = 25705;
    v34._object = (void *)0xE200000000000000;
    uint64_t v40 = a2;
    v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 25705;
    v12._object = (void *)0xE200000000000000;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = 0x746C757365723A22;
    v13._object = (void *)0xEF22203E2D20653ALL;
    String.append(_:)(v13);
    uint64_t v15 = a4[3];
    uint64_t v14 = a4[4];
    __swift_project_boxed_opaque_existential_1(a4, v15);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 24))(v15, v14);
    v34._object = (void *)0xE200000000000000;
    uint64_t v40 = v16;
    v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 25705;
    v18._object = (void *)0xE200000000000000;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = 0x6772613A22;
    v19._object = (void *)0xE500000000000000;
    String.append(_:)(v19);
    v34._uint64_t countAndFlagsBits = a1;
    v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 30522;
    v21._object = (void *)0xE200000000000000;
    String.append(_:)(v21);
    uint64_t v10 = 34;
    if ((specialized Sequence<>.contains(_:)(a2, *a5) & 1) == 0)
    {
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      strcpy((char *)&v34, " [headlabel=\"");
      HIWORD(v34._object) = -4864;
      uint64_t v22 = v38;
      uint64_t v23 = v39;
      __swift_project_boxed_opaque_existential_1(v37, v38);
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
      uint64_t v25 = *(void *)(v24 + 24);
      Swift::String v26 = *(void **)(v24 + 32);
      swift_bridgeObjectRetain();
      swift_release();
      v27._uint64_t countAndFlagsBits = v25;
      v27._object = v26;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._uint64_t countAndFlagsBits = 23842;
      v28._object = (void *)0xE200000000000000;
      String.append(_:)(v28);
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      uint64_t v29 = (void *)*a5;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a5 = (uint64_t)v29;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        *a5 = (uint64_t)v29;
      }
      unint64_t v32 = v29[2];
      unint64_t v31 = v29[3];
      if (v32 >= v31 >> 1) {
        uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v29);
      }
      v29[2] = v32 + 1;
      v29[v32 + 4] = a2;
      *a5 = (uint64_t)v29;
      uint64_t v10 = v35;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
  }
  return v10;
}

unint64_t lazy protocol witness table accessor for type DotError and conformance DotError()
{
  unint64_t result = lazy protocol witness table cache variable for type DotError and conformance DotError;
  if (!lazy protocol witness table cache variable for type DotError and conformance DotError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DotError and conformance DotError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DotError and conformance DotError;
  if (!lazy protocol witness table cache variable for type DotError and conformance DotError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DotError and conformance DotError);
  }
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  if (a2)
  {
    if (a3)
    {
      if (a3 < 0)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      if (!v6)
      {
LABEL_20:
        uint64_t v8 = 0;
        goto LABEL_17;
      }
      uint64_t v8 = v6 - 1;
      uint64_t v9 = a4 + 56 * (v6 - 1);
      uint64_t v11 = *(void *)(v9 + 32);
      uint64_t v10 = *(void *)(v9 + 40);
      uint64_t v12 = *(void *)(v9 + 48);
      uint64_t v13 = *(void *)(v9 + 56);
      uint64_t v14 = *(void *)(v9 + 64);
      char v15 = *(unsigned char *)(v9 + 72);
      uint64_t v16 = *(void *)(v9 + 80);
      *(void *)a2 = v11;
      *(void *)(a2 + 8) = v10;
      *(void *)(a2 + 16) = v12;
      *(void *)(a2 + 24) = v13;
      *(void *)(a2 + 32) = v14;
      *(unsigned char *)(a2 + 40) = v15;
      *(void *)(a2 + 48) = v16;
      if (a3 == 1)
      {
LABEL_15:
        uint64_t v6 = a3;
      }
      else if (v6 != 1)
      {
        uint64_t v17 = 0;
        uint64_t v18 = a3 - 2;
        uint64_t v19 = a4 + 56 * v6 - 40;
        uint64_t v20 = a2 + 56;
        while (v6 + v17 - 1 <= *(void *)(a4 + 16))
        {
          uint64_t v21 = *(void *)(v19 - 32);
          uint64_t v22 = *(void *)(v19 - 24);
          uint64_t v23 = *(void *)(v19 - 16);
          uint64_t v24 = *(void *)(v19 - 8);
          char v25 = *(unsigned char *)v19;
          uint64_t v26 = *(void *)(v19 + 8);
          *(void *)uint64_t v20 = *(void *)(v19 - 40);
          *(void *)(v20 + 8) = v21;
          *(void *)(v20 + 16) = v22;
          *(void *)(v20 + 24) = v23;
          *(void *)(v20 + 32) = v24;
          *(unsigned char *)(v20 + 40) = v25;
          *(void *)(v20 + 48) = v26;
          if (!(v18 + v17))
          {
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v8 = v6 + v17 - 2;
            goto LABEL_15;
          }
          swift_retain();
          swift_bridgeObjectRetain();
          --v17;
          v19 -= 56;
          v20 += 56;
          if (v6 + v17 == 1)
          {
            uint64_t v8 = 0;
            goto LABEL_16;
          }
        }
        __break(1u);
        goto LABEL_19;
      }
LABEL_16:
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v8 = *(void *)(a4 + 16);
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a4 + 16);
    uint64_t v6 = 0;
  }
LABEL_17:
  *a1 = a4;
  a1[1] = v8;
  return v6;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    _OWORD v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    unint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    _OWORD v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    unint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a5;
  uint64_t v8 = a4;
  unint64_t v9 = result;
  if (!a2)
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
LABEL_18:
    *unint64_t v9 = v8;
    v9[1] = v7;
    _OWORD v9[2] = a6;
    v9[3] = v11;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    uint64_t v11 = 0;
    goto LABEL_18;
  }
  if (a3 < 0) {
    goto LABEL_20;
  }
  uint64_t v11 = *(void *)(a6 + 16);
  if (!v11)
  {
    uint64_t v10 = 0;
    goto LABEL_18;
  }
  unint64_t result = *(void **)(a6 + 32);
  *a2 = result;
  if (a3 == 1)
  {
LABEL_17:
    swift_unknownObjectRetain();
    uint64_t v11 = v10;
    goto LABEL_18;
  }
  if (v11 == 1)
  {
    uint64_t v10 = 1;
    goto LABEL_17;
  }
  uint64_t v12 = 0;
  uint64_t v13 = a3 - 2;
  int64_t v14 = a2 + 1;
  while ((unint64_t)(v12 + 1) < *(void *)(a6 + 16))
  {
    unint64_t v15 = *(void **)(a6 + 40 + 8 * v12);
    v14[v12] = v15;
    swift_unknownObjectRetain();
    if (v13 == v12) {
      goto LABEL_16;
    }
    ++v12;
    unint64_t result = v15;
    if (v11 - 1 == v12)
    {
      uint64_t v10 = v11;
LABEL_16:
      uint64_t v8 = a4;
      uint64_t v7 = a5;
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v11 = 0;
    uint64_t v9 = 0;
LABEL_39:
    *unint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v9;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
    int64_t v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v10 = a2;
  uint64_t v22 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v23 = result;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    int64_t v19 = (void *)(*(void *)(a4 + 56) + 24 * v15);
    uint64_t v20 = v19[1];
    uint64_t v21 = v19[2];
    void *v10 = *v19;
    v10[1] = v20;
    void v10[2] = v21;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_38;
    }
    v10 += 3;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_retain();
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v16 >= v13) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        unint64_t v8 = 0;
        int64_t v11 = v16;
      }
      else
      {
        unint64_t v17 = *(void *)(v5 + 8 * v11);
        if (v17) {
          goto LABEL_14;
        }
        int64_t v18 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          int64_t v16 = v18;
          goto LABEL_18;
        }
        int64_t v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          unint64_t v17 = *(void *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            int64_t v16 = v11;
            goto LABEL_18;
          }
          int64_t v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            unint64_t v8 = 0;
            goto LABEL_37;
          }
          unint64_t v17 = *(void *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              int64_t v16 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_42;
              }
              if (v16 >= v13)
              {
                unint64_t v8 = 0;
                int64_t v11 = v13 - 1;
                goto LABEL_37;
              }
              unint64_t v17 = *(void *)(v5 + 8 * v16);
              ++v18;
              if (v17) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v8 = 0;
        int64_t v11 = v16 + 2;
      }
LABEL_37:
      uint64_t v9 = v12;
LABEL_38:
      uint64_t v6 = v22;
      unint64_t result = v23;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  if (a2)
  {
    if (a3)
    {
      if (a3 < 0)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      if (!v6)
      {
LABEL_20:
        uint64_t v8 = 0;
        goto LABEL_17;
      }
      uint64_t v8 = v6 - 1;
      uint64_t v9 = a4 + 16 * (v6 - 1);
      uint64_t v10 = *(void *)(v9 + 40);
      *a2 = *(void *)(v9 + 32);
      a2[1] = v10;
      if (a3 == 1)
      {
LABEL_15:
        uint64_t v6 = a3;
      }
      else if (v6 != 1)
      {
        uint64_t v11 = 0;
        uint64_t v12 = a3 - 2;
        int64_t v13 = (uint64_t *)(a4 + 16 * v6 + 8);
        unint64_t v14 = a2 + 3;
        while (v6 + v11 - 1 <= *(void *)(a4 + 16))
        {
          uint64_t v15 = *v13;
          *(v14 - 1) = *(v13 - 1);
          *unint64_t v14 = v15;
          if (!(v12 + v11))
          {
            swift_bridgeObjectRetain();
            uint64_t v8 = v6 + v11 - 2;
            goto LABEL_15;
          }
          swift_bridgeObjectRetain();
          --v11;
          v13 -= 2;
          v14 += 2;
          if (v6 + v11 == 1)
          {
            uint64_t v8 = 0;
            goto LABEL_16;
          }
        }
        __break(1u);
        goto LABEL_19;
      }
LABEL_16:
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v8 = *(void *)(a4 + 16);
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a4 + 16);
    uint64_t v6 = 0;
  }
LABEL_17:
  *a1 = a4;
  a1[1] = v8;
  return v6;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(void))type metadata accessor for SGEdge, (unint64_t *)&lazy protocol witness table cache variable for type [SGEdge] and conformance [A], &demangling cache variable for type metadata for [SGEdge], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(void))type metadata accessor for SGNode, (unint64_t *)&lazy protocol witness table cache variable for type [SGNode] and conformance [A], &demangling cache variable for type metadata for [SGNode], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, &demangling cache variable for type metadata for MTLLibrary, &lazy protocol witness table cache variable for type [MTLLibrary] and conformance [A], &demangling cache variable for type metadata for [MTLLibrary], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(void))type metadata accessor for MetalFunctionDefinitionNode, (unint64_t *)&lazy protocol witness table cache variable for type [MetalFunctionDefinitionNode] and conformance [A], &demangling cache variable for type metadata for [MetalFunctionDefinitionNode], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for MTLFunction, &lazy protocol witness table cache variable for type [MTLFunction] and conformance [A], &demangling cache variable for type metadata for [MTLFunction], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, &demangling cache variable for type metadata for MTLFunctionStitchingNode, (unint64_t *)&lazy protocol witness table cache variable for type [MTLFunctionStitchingNode] and conformance [A], &demangling cache variable for type metadata for [MTLFunctionStitchingNode], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = lazy protocol witness table accessor for type [String] and conformance [A](a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          uint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          id v24 = *v23;
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void (*v22)(unsigned char *, void);
  uint64_t *v23;
  uint64_t v24;
  uint64_t result;
  unsigned char v26[32];

  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = lazy protocol witness table accessor for type [String] and conformance [A](a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          uint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          id v24 = *v23;
          swift_retain();
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = lazy protocol witness table accessor for type [String] and conformance [A](a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          uint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          uint64_t v24 = *v23;
          swift_unknownObjectRetain();
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(a4);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE78];
    uint64_t v8 = 4;
    uint64_t v18 = v6;
    while (1)
    {
      id v10 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x2611848A0](v8 - 4, a1) : *(id *)(a1 + 8 * v8);
      uint64_t v11 = v10;
      uint64_t v12 = v8 - 3;
      if (__OFADD__(v8 - 4, 1)) {
        break;
      }
      id v23 = v10;
      closure #2 in graphDotText(_:callNode:)((uint64_t *)&v23, a3, a4, &v21);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v7;
      }

      uint64_t v13 = v22;
      if (v22)
      {
        uint64_t v14 = v21;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
        }
        unint64_t v16 = v7[2];
        unint64_t v15 = v7[3];
        if (v16 >= v15 >> 1) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v7);
        }
        _OWORD v7[2] = v16 + 1;
        uint64_t v9 = &v7[2 * v16];
        v9[4] = v14;
        v9[5] = v13;
        uint64_t v6 = v18;
      }
      ++v8;
      if (v12 == v6)
      {
        swift_bridgeObjectRelease();
        return v7;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (void *)MEMORY[0x263F8EE78];
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a1;
  uint64_t v4 = (void *)a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = (void *)a1[3];
  uint64_t v130 = a1[4];
  uint64_t v131 = v7;
  uint64_t v114 = v130;
  uint64_t v115 = v7;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined retain of [Input]((uint64_t)&v131);
  outlined retain of [Input]((uint64_t)&v130);
  uint64_t v76 = v6;
  if (v7[2])
  {
    Swift::String v78 = (void *)(v5 + 16);
    Swift::String v79 = v4 + 4;
    uint64_t v77 = v5 + 32;
    Swift::String v74 = v4 + 7;
    uint64_t v75 = v6 + 32;
    Swift::String v72 = (void *)MEMORY[0x263F8EE78];
    uint64_t v89 = v5;
    Swift::String v81 = v4;
    while (1)
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v8 = v7[2];
        if (!v8) {
          goto LABEL_83;
        }
      }
      else
      {
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
        uint64_t v8 = v7[2];
        if (!v8)
        {
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_82;
        }
      }
      uint64_t v9 = v8 - 1;
      id v10 = &v7[7 * v9];
      long long v11 = *((_OWORD *)v10 + 2);
      long long v12 = *((_OWORD *)v10 + 3);
      long long v13 = *((_OWORD *)v10 + 4);
      Swift::UInt v135 = v10[10];
      long long v133 = v12;
      long long v134 = v13;
      long long v132 = v11;
      uint64_t v15 = v10[4];
      uint64_t v14 = v10[5];
      uint64_t v17 = v10[6];
      uint64_t v16 = v10[7];
      uint64_t v18 = v10[8];
      char v19 = *((unsigned char *)v10 + 72);
      uint64_t v20 = v10[10];
      _OWORD v7[2] = v9;
      uint64_t v87 = v16;
      uint64_t v88 = v14;
      uint64_t v85 = v17;
      uint64_t v86 = v15;
      uint64_t v84 = v18;
      char v83 = v19;
      uint64_t v82 = v20;
      if (*(void *)(v114 + 16))
      {
        uint64_t v97 = v114;
        Hasher.init(_seed:)();
        uint64_t v137 = v132;
        Hasher._combine(_:)(v132);
        uint64_t v21 = *((void *)&v132 + 1);
        uint64_t v22 = *(void (**)(long long *))(**((void **)&v132 + 1) + 120);
        swift_retain();
        v22(&v101);
        swift_release();
        long long v23 = v133;
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Swift::UInt v24 = v134;
        char v93 = BYTE8(v134);
        if (BYTE8(v134) == 1)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v24);
        }
        Swift::UInt v92 = v135;
        Hasher._combine(_:)(v135);
        Swift::Int v25 = Hasher._finalize()();
        uint64_t v26 = v97;
        uint64_t v27 = -1 << *(unsigned char *)(v97 + 32);
        unint64_t v28 = v25 & ~v27;
        if ((*(void *)(v97 + 56 + ((v28 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v28))
        {
          Swift::UInt v80 = v24;
          Swift::String v90 = v7;
          uint64_t v29 = ~v27;
          while (1)
          {
            uint64_t v30 = *(void *)(v26 + 48) + 56 * v28;
            if (*(void *)v30 == v137)
            {
              uint64_t v31 = *(void *)(v30 + 16);
              uint64_t v32 = *(void *)(v30 + 24);
              uint64_t v96 = *(void *)(v30 + 32);
              char v33 = *(unsigned char *)(v30 + 40);
              uint64_t v34 = *(void *)(v30 + 48);
              uint64_t v35 = *(uint64_t (**)(uint64_t))(**(void **)(v30 + 8) + 128);
              swift_retain();
              swift_bridgeObjectRetain();
              if (v35(v21))
              {
                if (v31 == (void)v23 && v32 == *((void *)&v23 + 1))
                {
                  swift_bridgeObjectRelease();
                  swift_release();
                  uint64_t v26 = v97;
                  if (v33)
                  {
LABEL_24:
                    char v38 = v93;
                    if (v34 != v92) {
                      char v38 = 0;
                    }
                    if (v38)
                    {
LABEL_35:
                      swift_bridgeObjectRelease();
                      swift_release();
                      uint64_t v5 = v89;
                      uint64_t v7 = v90;
                      uint64_t v4 = v81;
                      goto LABEL_4;
                    }
                    goto LABEL_15;
                  }
                  goto LABEL_29;
                }
                char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v26 = v97;
                if (v37)
                {
                  if (v33) {
                    goto LABEL_24;
                  }
LABEL_29:
                  if ((v93 & 1) == 0 && v96 == v80 && v34 == v92) {
                    goto LABEL_35;
                  }
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v26 = v97;
              }
            }
LABEL_15:
            unint64_t v28 = (v28 + 1) & v29;
            if (((*(void *)(v97 + 56 + ((v28 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
            {
              uint64_t v5 = v89;
              uint64_t v7 = v90;
              uint64_t v4 = v81;
              goto LABEL_38;
            }
          }
        }
        uint64_t v5 = v89;
      }
LABEL_38:
      v136[0] = v133;
      swift_retain();
      outlined retain of String((uint64_t)v136);
      specialized Set._Variant.insert(_:)((uint64_t)&v101, (Swift::Int)&v132);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v40 = v4[2];
      if (v5)
      {
        unint64_t v41 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v132, (uint64_t)v79, v40, v78, v77);
        if (v42) {
          goto LABEL_3;
        }
        uint64_t v43 = v76;
        if ((v41 & 0x8000000000000000) != 0) {
          goto LABEL_85;
        }
      }
      else
      {
        if (!v40) {
          goto LABEL_3;
        }
        if (*v79 == (void)v132)
        {
          unint64_t v41 = 0;
        }
        else
        {
          if (v40 == 1) {
            goto LABEL_3;
          }
          if (v4[5] == (void)v132)
          {
            unint64_t v41 = 1;
          }
          else
          {
            if (v40 == 2) {
              goto LABEL_3;
            }
            if (v4[6] != (void)v132)
            {
              uint64_t v62 = 0;
              while (v40 - 3 != v62)
              {
                uint64_t v63 = v74[v62++];
                if (v63 == (void)v132)
                {
                  unint64_t v41 = v62 + 2;
                  uint64_t v43 = v76;
                  if ((v41 & 0x8000000000000000) == 0) {
                    goto LABEL_46;
                  }
                  goto LABEL_85;
                }
              }
LABEL_3:
              swift_release();
              outlined release of String((uint64_t)v136);
              goto LABEL_4;
            }
            unint64_t v41 = 2;
          }
        }
        uint64_t v43 = v76;
      }
LABEL_46:
      if (v41 >= *(void *)(v43 + 16)) {
        goto LABEL_84;
      }
      Swift::String v91 = v7;
      Swift::String v44 = (void *)(v75 + 48 * v41);
      uint64_t v45 = v44[3];
      uint64_t v46 = v44[4];
      uint64_t v47 = v44[5];
      uint64_t v48 = *(void *)(v46 + 16);
      if (v45)
      {
        swift_retain();
        outlined retain of String((uint64_t)v136);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v4 = v81;
        unint64_t result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)&v132, v46 + 32, v48, (void *)(v45 + 16), v45 + 32);
        if (v50) {
          goto LABEL_58;
        }
      }
      else
      {
        swift_retain();
        outlined retain of String((uint64_t)v136);
        swift_retain();
        swift_retain();
        unint64_t result = specialized Collection<>.firstIndex(of:)(&v132, v46 + 32, v48);
        if (v51)
        {
LABEL_58:
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          outlined release of String((uint64_t)v136);
          swift_release();
          outlined release of String((uint64_t)v136);
          uint64_t v5 = v89;
          uint64_t v7 = v91;
          goto LABEL_4;
        }
      }
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_88:
        __break(1u);
        return result;
      }
      if (result >= *(void *)(v47 + 16)) {
        goto LABEL_88;
      }
      Swift::String v52 = (void *)(v47 + 56 * result);
      uint64_t v53 = v52[4];
      uint64_t v54 = v52[5];
      uint64_t v55 = v52[6];
      uint64_t v56 = v52[7];
      uint64_t v137 = v47;
      uint64_t v57 = v52[8];
      uint64_t v58 = v52[9];
      uint64_t v59 = v52[10];
      uint64_t v98 = v53;
      outlined copy of Output?(v53, v54);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      outlined release of String((uint64_t)v136);
      if (v54)
      {
        uint64_t v95 = v57;
        uint64_t v137 = v54;
        uint64_t v5 = v89;
        uint64_t v115 = v91;
        specialized OrderedDictionary.subscript.getter(v98, v89, v81, v76, v116);
        outlined init with take of MetalFunctionNode?((uint64_t)v116, (uint64_t)&v117, &demangling cache variable for type metadata for Graph.Adjacent?);
        if (*((void *)&v117 + 1))
        {
          long long v125 = v117;
          long long v122 = v119;
          uint64_t v94 = v118;
          uint64_t v60 = v120;
          outlined init with take of MetalFunctionNode?((uint64_t)&v122, (uint64_t)v124, &demangling cache variable for type metadata for _HashTable.Storage?);
          uint64_t v61 = *((void *)&v122 + 1);
          uint64_t v123 = *((void *)&v122 + 1);
          uint64_t v121 = v60;
          long long v127 = v125;
          outlined init with take of MetalFunctionNode?((uint64_t)&v127, (uint64_t)v129, &demangling cache variable for type metadata for _HashTable.Storage?);
          swift_retain();
          outlined retain of String((uint64_t)v136);
          outlined retain of _HashTable.Storage?((uint64_t)v124);
          outlined retain of _HashTable.Storage?((uint64_t)&v123);
          outlined retain of _HashTable.Storage?((uint64_t)&v121);
          outlined release of _HashTable.Storage?((uint64_t)v129);
          uint64_t v128 = *((void *)&v127 + 1);
          outlined release of _HashTable.Storage?((uint64_t)&v128);
          uint64_t v126 = v94;
          outlined release of _HashTable.Storage?((uint64_t)&v126);
          outlined release of _HashTable.Storage?((uint64_t)v124);
          outlined release of _HashTable.Storage?((uint64_t)&v123);
          outlined release of _HashTable.Storage?((uint64_t)&v121);
          outlined release of _HashTable.Storage?((uint64_t)&v121);
          outlined release of _HashTable.Storage?((uint64_t)v124);
        }
        else
        {
          swift_retain();
          outlined retain of String((uint64_t)v136);
          uint64_t v61 = MEMORY[0x263F8EE78];
        }
        specialized Array.append<A>(contentsOf:)(v61);
        swift_release();
        outlined release of String((uint64_t)v136);
        *(void *)&long long v101 = v98;
        *((void *)&v101 + 1) = v137;
        uint64_t v102 = v55;
        uint64_t v103 = v56;
        uint64_t v104 = v95;
        char v105 = v58 & 1;
        uint64_t v106 = v59;
        uint64_t v107 = v86;
        uint64_t v108 = v88;
        uint64_t v109 = v85;
        uint64_t v110 = v87;
        uint64_t v111 = v84;
        char v112 = v83;
        uint64_t v113 = v82;
        closure #2 in graphDotText(representing:index:)(&v101, a2, a3, a4, (unint64_t)&v99);
        if (v73) {
          goto LABEL_86;
        }
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v64 = v100;
        uint64_t v4 = v81;
        if (v100)
        {
          uint64_t v65 = v99;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::String v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v72[2] + 1, 1, v72);
          }
          unint64_t v67 = v72[2];
          unint64_t v66 = v72[3];
          if (v67 >= v66 >> 1) {
            Swift::String v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v66 > 1), v67 + 1, 1, v72);
          }
          v72[2] = v67 + 1;
          uint64_t v68 = &v72[2 * v67];
          v68[4] = v65;
          v68[5] = v64;
          uint64_t v7 = v115;
        }
        else
        {
          uint64_t v7 = v115;
        }
      }
      else
      {
        swift_release();
        outlined release of String((uint64_t)v136);
        uint64_t v5 = v89;
        uint64_t v7 = v91;
        uint64_t v4 = v81;
      }
LABEL_4:
      if (!v7[2]) {
        goto LABEL_81;
      }
    }
  }
  Swift::String v72 = (void *)MEMORY[0x263F8EE78];
LABEL_81:
  uint64_t v115 = v7;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
LABEL_82:
  swift_bridgeObjectRelease();
  return (unint64_t)v72;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v29 = MEMORY[0x263F8EE78];
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return result;
  }
  uint64_t v8 = 0;
  uint64_t v9 = a1 + 32;
  uint64_t v10 = MEMORY[0x263F8EE78];
  while (1)
  {
    outlined init with copy of MetalFunctionNode(v9 + 40 * v8, (uint64_t)&v26);
    uint64_t v11 = v27;
    uint64_t v12 = v28;
    __swift_project_boxed_opaque_existential_1(&v26, v27);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
    uint64_t v13 = *(void *)(a2 + 16);
    if (v13)
    {
      if (*(void *)(a2 + 32) == result)
      {
LABEL_3:
        outlined init with copy of MetalFunctionNode((uint64_t)&v26, (uint64_t)&v23);
        goto LABEL_4;
      }
      if (v13 != 1) {
        break;
      }
    }
LABEL_13:
    outlined init with copy of MetalFunctionNode((uint64_t)&v26, (uint64_t)&v23);
    uint64_t v16 = v24;
    uint64_t v17 = v25;
    __swift_project_boxed_opaque_existential_1(&v23, v24);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
    uint64_t v18 = *(void *)(a3 + 16);
    if (!v18) {
      goto LABEL_20;
    }
    if (*(void *)(a3 + 32) != result)
    {
      if (v18 != 1)
      {
        uint64_t v19 = 5;
        do
        {
          uint64_t v20 = v19 - 3;
          if (__OFADD__(v19 - 4, 1)) {
            goto LABEL_28;
          }
          if (*(void *)(a3 + 8 * v19) == result) {
            goto LABEL_4;
          }
          ++v19;
        }
        while (v20 != v18);
      }
LABEL_20:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v23);
      outlined init with take of MetalFunctionNode(&v26, (uint64_t)&v23);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1);
      }
      uint64_t v10 = v29;
      unint64_t v22 = *(void *)(v29 + 16);
      unint64_t v21 = *(void *)(v29 + 24);
      if (v22 >= v21 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        uint64_t v10 = v29;
      }
      *(void *)(v10 + 16) = v22 + 1;
      outlined init with take of MetalFunctionNode(&v23, v10 + 40 * v22 + 32);
      goto LABEL_5;
    }
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v23);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v26);
LABEL_5:
    if (++v8 == v5) {
      return v29;
    }
  }
  uint64_t v14 = 5;
  while (1)
  {
    uint64_t v15 = v14 - 3;
    if (__OFADD__(v14 - 4, 1)) {
      break;
    }
    if (*(void *)(a2 + 8 * v14) == result) {
      goto LABEL_3;
    }
    ++v14;
    if (v15 == v13) {
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1)
{
  swift_getObjectType();
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v4 = (id)MEMORY[0x2611848A0](v3, a1);
LABEL_9:
        uint64_t v5 = v4;
        unint64_t v6 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_16;
        }
        if (static NSObject.== infix(_:_:)() & 1) != 0 || (static NSObject.== infix(_:_:)())
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        ++v3;
        if (v6 == v2) {
          return v8;
        }
      }
      if (v3 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    id v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x263F8EE78];
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGNodeCG_SSs5NeverOTg504_s11d46Graph12graphDotText_8callNodeSSAA7SGGraphC_AA6F51CSgtF06createG10StatementsL_ySaySSGSayAGGFSSAGXEfU_SSA2HTf1cn_nTf4nggg_n(unint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    if (!v8) {
      return v9;
    }
    uint64_t v25 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0) {
      break;
    }
    uint64_t v11 = 0;
    uint64_t v9 = v25;
    while (v8 != v11)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v12 = (id)MEMORY[0x2611848A0](v11, a1);
      }
      else {
        id v12 = *(id *)(a1 + 8 * v11 + 32);
      }
      uint64_t v13 = v12;
      id v23 = v12;
      closure #1 in createNodeStatements #1 (_:) in graphDotText(_:callNode:)((uint64_t *)&v23, a2, a3, a4, a5, v24);
      if (v6)
      {
        swift_release();

        return v9;
      }
      uint64_t v6 = 0;

      uint64_t v14 = v24[0];
      uint64_t v15 = v24[1];
      uint64_t v25 = v9;
      unint64_t v17 = *(void *)(v9 + 16);
      unint64_t v16 = *(void *)(v9 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v9 = v25;
      }
      ++v11;
      *(void *)(v9 + 16) = v17 + 1;
      uint64_t v18 = v9 + 16 * v17;
      *(void *)(v18 + 32) = v14;
      *(void *)(v18 + 40) = v15;
      if (v8 == v11) {
        return v9;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17MetalFunctionNode_pG_SSs5NeverOTg504_s11d41Graph13createDotText12representing12inputh20IDs06outputhI0SSAA05f18A7ProgramC_SayAA08g29H2IDVGAJtKF0cH10StatementsL_yS29SSGSayAA0kmH0_pGFSSAaM_pXEfU_SayAF0gH2IDVGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v5 = v16;
    for (uint64_t i = (void *)(a1 + 32); ; i += 5)
    {
      closure #1 in createNodeStatements #1 (_:) in createDotText(representing:inputNodeIDs:outputNodeIDs:)(i, a2, v15);
      if (v3) {
        break;
      }
      uint64_t v3 = 0;
      uint64_t v9 = v15[0];
      uint64_t v10 = v15[1];
      uint64_t v16 = v5;
      unint64_t v12 = *(void *)(v5 + 16);
      unint64_t v11 = *(void *)(v5 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        uint64_t v5 = v16;
      }
      *(void *)(v5 + 16) = v12 + 1;
      uint64_t v13 = v5 + 16 * v12;
      *(void *)(v13 + 32) = v9;
      *(void *)(v13 + 40) = v10;
      if (!--v4) {
        return v5;
      }
    }
    swift_release();
  }
  return v5;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph14FunctionNodeIDVG_AF05MetalfG0_psAE_pTg504_s11d41Graph13createDotText12representing12inputg20IDs06outputhI0SSAA05i18A7ProgramC_SayAA08F28H2IDVGAJtKFAA0kmH0_pAIKXEfU_AF0idR0CTf1cn_nTf4ng_nTm(uint64_t a1, uint64_t a2)
{
  void (*v8)(long long *__return_ptr, uint64_t);
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  long long v13[2];
  uint64_t v14;

  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v14;
    uint64_t v7 = (uint64_t *)(a1 + 32);
    uint64_t v8 = *(void (**)(long long *__return_ptr, uint64_t))(*(void *)a2 + 272);
    while (1)
    {
      uint64_t v9 = *v7++;
      v8(v13, v9);
      if (v2) {
        break;
      }
      uint64_t v14 = v4;
      unint64_t v11 = *(void *)(v4 + 16);
      uint64_t v10 = *(void *)(v4 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        uint64_t v4 = v14;
      }
      *(void *)(v4 + 16) = v11 + 1;
      outlined init with take of MetalFunctionNode(v13, v4 + 40 * v11 + 32);
      if (!--v3) {
        return v4;
      }
    }
    swift_release();
  }
  return v4;
}

uint64_t partial apply for closure #1 in closure #4 in createDotText(representing:inputNodeIDs:outputNodeIDs:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #4 in createDotText(representing:inputNodeIDs:outputNodeIDs:)(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(uint64_t **)(v2 + 32));
}

uint64_t specialized ShaderGraphNode.dotLabel.getter(unint64_t a1)
{
  switch(a1 >> 61)
  {
    case 1uLL:
    case 5uLL:
      swift_bridgeObjectRetain();
      break;
    case 2uLL:
      *(void *)&v25[0] = 0;
      *((void *)&v25[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      v5._object = (void *)0x800000025C426890;
      v5._uint64_t countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v5);
      _print_unlocked<A, B>(_:_:)();
      break;
    case 3uLL:
      uint64_t v6 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v7 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v8 = 0x203A6D61726170;
      unint64_t v9 = 0xE700000000000000;
      goto LABEL_7;
    case 4uLL:
      uint64_t v6 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v7 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v8 = 46;
      unint64_t v9 = 0xE100000000000000;
LABEL_7:
      *(void *)&v25[0] = v8;
      *((void *)&v25[0] + 1) = v9;
      String.append(_:)(*(Swift::String *)&v6);
      break;
    case 6uLL:
      long long v10 = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x90);
      long long v31 = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x80);
      long long v32 = v10;
      v33[0] = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0xA0);
      *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0xA9);
      long long v11 = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x50);
      long long v27 = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
      long long v28 = v11;
      long long v12 = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x70);
      long long v29 = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x60);
      long long v30 = v12;
      long long v13 = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
      v25[0] = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      v25[1] = v13;
      long long v26 = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
      uint64_t v14 = *((void *)&v13 + 1);
      uint64_t v15 = (void *)v26;
      outlined retain of Graph((uint64_t)v25);
      swift_bridgeObjectRetain();
      v16._uint64_t countAndFlagsBits = v14;
      v16._object = v15;
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._uint64_t countAndFlagsBits = 41;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      outlined release of Graph((uint64_t)v25);
      break;
    case 7uLL:
      break;
    default:
      outlined init with take of SGDataTypeStorage(a1 + 16, (uint64_t)v25);
      uint64_t v2 = *(void *)(a1 + 88);
      outlined retain of SGDataTypeStorage((uint64_t)v25, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
      swift_retain();
      SGDataTypeStorage.valueString.getter();
      v3._uint64_t countAndFlagsBits = 8250;
      v3._object = (void *)0xE200000000000000;
      String.append(_:)(v3);
      v4._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v2 + 136))();
      String.append(_:)(v4);
      swift_release();
      swift_bridgeObjectRelease();
      outlined retain of SGDataTypeStorage((uint64_t)v25, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
      break;
  }
  v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = 28252;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v23._uint64_t countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1701080942;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_SSs5NeverOTg504_s11d111Graph12graphDotText12representing5indexSSAA0B0V_SitKF20createNodeStatementsL_ySaySSGSayAA0abI0VGFSSAJXEfU_SSAA5F6VXEfU_SSTf1cn_nTf4ng_nTm(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v24 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v24;
    uint64_t v9 = a1 + 80;
    do
    {
      uint64_t v10 = *(void *)(v9 - 32);
      long long v11 = *(void **)(v9 - 24);
      swift_retain();
      uint64_t v12 = swift_bridgeObjectRetain();
      v23._uint64_t countAndFlagsBits = a5(v12);
      v23._object = v13;
      swift_bridgeObjectRetain();
      v14._uint64_t countAndFlagsBits = a2;
      v14._object = a3;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v15._uint64_t countAndFlagsBits = 62;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      swift_bridgeObjectRetain();
      v16._uint64_t countAndFlagsBits = v10;
      v16._object = v11;
      String.append(_:)(v16);
      swift_release();
      swift_bridgeObjectRelease_n();
      unint64_t v18 = *(void *)(v24 + 16);
      unint64_t v17 = *(void *)(v24 + 24);
      if (v18 >= v17 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      }
      v9 += 56;
      *(void *)(v24 + 16) = v18 + 1;
      uint64_t v19 = v24 + 16 * v18;
      *(void *)(v19 + 32) = 60;
      *(void *)(v19 + 40) = 0xE100000000000000;
      --v5;
    }
    while (v5);
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph0dE4NodeVG_SSs5NeverOTg504_s11d61Graph12graphDotText12representing5indexSSAA0B0V_SitKF20createF41StatementsL_ySaySSGSayAA0abI0VGFSSAJXEfU_SSA2HTf1cn_nTf4nggg_n(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (v7)
  {
    uint64_t v30 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    uint64_t v8 = v30;
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 6)
    {
      unint64_t v12 = *(i - 1);
      uint64_t v13 = *i;
      uint64_t v14 = i[1];
      char v15 = *((unsigned char *)i + 32);
      *(void *)&long long v25 = v12;
      *((void *)&v25 + 1) = v13;
      uint64_t v26 = v14;
      long long v27 = *((_OWORD *)i + 1);
      char v28 = v15;
      outlined copy of NodePersonality(v12);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #1 in createNodeStatements #1 (_:) in graphDotText(representing:index:)(&v25, a2, a3, a4, a5, v29);
      if (v6) {
        break;
      }
      uint64_t v6 = 0;
      outlined consume of NodePersonality(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v16 = v29[0];
      uint64_t v17 = v29[1];
      uint64_t v30 = v8;
      unint64_t v19 = *(void *)(v8 + 16);
      unint64_t v18 = *(void *)(v8 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        uint64_t v8 = v30;
      }
      *(void *)(v8 + 16) = v19 + 1;
      uint64_t v20 = v8 + 16 * v19;
      *(void *)(v20 + 32) = v16;
      *(void *)(v20 + 40) = v17;
      if (!--v7) {
        return v8;
      }
    }
    outlined consume of NodePersonality(v12);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph14FunctionNodeIDVGG_SSsAE_pTg506_sSi11f7Graph14hi7IDVSSs5C48_pIgyyozo_Si6offset_AC7elementtSSsAD_pIegnrzr_TRSiAJSSsAE_pIgyyozo_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t (*a2)(uint64_t, void))
{
  uint64_t v16 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v15 = a1;
  swift_bridgeObjectRetain();
  if (v4)
  {
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = a2(v5, *(void *)(v15 + 8 * v5 + 32));
      if (v2) {
        break;
      }
      uint64_t v8 = v6;
      uint64_t v9 = v7;
      unint64_t v11 = *(void *)(v16 + 16);
      unint64_t v10 = *(void *)(v16 + 24);
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      ++v5;
      *(void *)(v16 + 16) = v11 + 1;
      uint64_t v12 = v16 + 16 * v11;
      *(void *)(v12 + 32) = v8;
      *(void *)(v12 + 40) = v9;
      if (v4 == v5) {
        goto LABEL_9;
      }
    }
    swift_release();
  }
LABEL_9:
  swift_bridgeObjectRelease();
  return v16;
}

unsigned char *storeEnumTagSinglePayload for DotError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25C394EB8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DotError()
{
  return &type metadata for DotError;
}

uint64_t OrderedDictionary.makeIterator()(uint64_t a1)
{
  return a1;
}

uint64_t OrderedDictionary.Iterator.next()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = *(void *)(v2 + 24);
  swift_retain();
  uint64_t v13 = ContiguousArray.count.getter();
  swift_release();
  if (v12 >= v13)
  {
    uint64_t v22 = swift_getTupleTypeMetadata2();
    Swift::String v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
    return v23((uint64_t)a2, 1, 1, v22);
  }
  else
  {
    uint64_t v26 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
    long long v27 = a2;
    swift_retain();
    swift_retain();
    ContiguousArray.subscript.getter();
    swift_release();
    swift_release();
    swift_retain();
    uint64_t v14 = v26;
    ContiguousArray.subscript.getter();
    swift_release();
    *(void *)(v2 + 24) = v12 + 1;
    long long v25 = &v9[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v15 = v25;
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32);
    v16(v9, v11, v4);
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32);
    v17(v15, v14, v5);
    uint64_t v18 = swift_getTupleTypeMetadata2();
    unint64_t v19 = v27;
    uint64_t v20 = &v27[*(int *)(v18 + 48)];
    v16(v27, v9, v4);
    v17(v20, v25, v5);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v19, 0, 1, v18);
  }
}

uint64_t OrderedDictionary.Iterator._base.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedDictionary.Iterator._position.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t OrderedDictionary.Iterator._position.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*OrderedDictionary.Iterator._position.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedDictionary.underestimatedCount.getter()
{
  return ContiguousArray.count.getter();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in OrderedDictionary<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance OrderedDictionary<A, B>()
{
  uint64_t v0 = specialized Sequence._copyToContiguousArray()();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

void *initializeWithCopy for OrderedDictionary.Iterator(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for OrderedDictionary.Iterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for OrderedDictionary.Iterator(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for OrderedDictionary.Iterator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OrderedDictionary.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for OrderedDictionary.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized Sequence._copyToContiguousArray()()
{
  return MEMORY[0x270F9FA28]();
}

uint64_t static OrderedSet.== infix(_:_:)()
{
  return Sequence<>.elementsEqual<A>(_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OrderedSet<A>()
{
  return static OrderedSet.== infix(_:_:)();
}

uint64_t specialized Dictionary.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = 0uLL;
  if (*(void *)(a2 + 16))
  {
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(result);
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 56) + 48 * result;
      unint64_t v8 = *(void *)v7;
      uint64_t v9 = *(void *)(v7 + 8);
      uint64_t v10 = *(void *)(v7 + 16);
      long long v12 = *(_OWORD *)(v7 + 24);
      char v11 = *(unsigned char *)(v7 + 40);
      outlined copy of NodePersonality(*(void *)v7);
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
      long long v4 = v12;
    }
    else
    {
      unint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      char v11 = 0;
      long long v4 = 0uLL;
    }
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    char v11 = 0;
  }
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v10;
  *(_OWORD *)(a3 + 24) = v4;
  *(unsigned char *)(a3 + 40) = v11;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.replaceCreateSamplerNodes()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(void *)(v0 + 64);
  int64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v6 = v3 + 32;
    uint64_t v7 = v3 + 56;
    unint64_t v8 = 0;
    uint64_t v9 = swift_bridgeObjectRetain() + 104;
    uint64_t v10 = MEMORY[0x263F8EE78];
    uint64_t v29 = v7;
    uint64_t v30 = v6;
    while (v8 < v4)
    {
      uint64_t v14 = 48 * v8;
      if (*(void *)(v7 + 48 * v8) == -7)
      {
        if ((uint64_t)(v8 + 1) >= v4)
        {
LABEL_19:
          swift_bridgeObjectRelease();
          uint64_t v5 = (void *)MEMORY[0x263F8EE78];
          goto LABEL_21;
        }
        uint64_t v15 = 48 * v8++;
        while (1)
        {
          if (*(void *)(v9 + v15) != -7)
          {
            uint64_t v14 = v15 + 48;
            goto LABEL_16;
          }
          uint64_t v16 = v8 + 1;
          if (__OFADD__(v8, 1)) {
            break;
          }
          ++v8;
          v15 += 48;
          if (v16 >= v4) {
            goto LABEL_19;
          }
        }
        __break(1u);
        break;
      }
LABEL_16:
      uint64_t v17 = v6 + v14;
      if (*(void *)v17 == 0xE000000000000008)
      {
        uint64_t v18 = *(void *)(v17 + 16);
        long long v33 = *(_OWORD *)(v17 + 24);
        char v31 = *(unsigned char *)(v17 + 40);
        uint64_t v32 = *(void *)(v17 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        *(void *)&long long v34 = v10;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1);
          uint64_t v10 = v34;
        }
        unint64_t v12 = *(void *)(v10 + 16);
        unint64_t v11 = *(void *)(v10 + 24);
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          uint64_t v10 = v34;
        }
        *(void *)(v10 + 16) = v12 + 1;
        uint64_t v13 = v10 + 48 * v12;
        *(void *)(v13 + 32) = 0xE000000000000008;
        *(void *)(v13 + 40) = v32;
        *(void *)(v13 + 48) = v18;
        *(_OWORD *)(v13 + 56) = v33;
        *(unsigned char *)(v13 + 72) = v31;
        uint64_t v7 = v29;
        uint64_t v6 = v30;
      }
      if ((uint64_t)++v8 >= v4) {
        goto LABEL_19;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
LABEL_21:
    char v38 = v5;
    uint64_t v19 = *(void *)(v10 + 16);
    if (v19)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = (uint64_t *)(v10 + 40);
      do
      {
        unint64_t v22 = *(v20 - 1);
        uint64_t v21 = *v20;
        uint64_t v23 = v20[1];
        char v24 = *((unsigned char *)v20 + 32);
        long long v25 = *((_OWORD *)v20 + 1);
        *(void *)&long long v34 = v22;
        *((void *)&v34 + 1) = v21;
        uint64_t v35 = v23;
        long long v36 = v25;
        char v37 = v24;
        outlined copy of NodePersonality(v22);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #2 in Graph.replaceCreateSamplerNodes()(&v34, v2, &v38);
        if (v1)
        {
          outlined consume of NodePersonality(v22);
          swift_release_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_33;
        }
        outlined consume of NodePersonality(v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v20 += 6;
        --v19;
      }
      while (v19);
      swift_release_n();
      uint64_t v26 = v38;
      uint64_t v27 = v38[2];
      if (v27) {
        goto LABEL_28;
      }
    }
    else
    {
      swift_release();
      uint64_t v26 = (void *)MEMORY[0x263F8EE78];
      uint64_t v27 = *(void *)(MEMORY[0x263F8EE78] + 16);
      if (v27)
      {
LABEL_28:
        swift_bridgeObjectRetain();
        uint64_t v28 = 7;
        do
        {
          specialized Graph.remove(_:)(v26[v28]);
          v28 += 6;
          --v27;
        }
        while (v27);
        swift_bridgeObjectRelease();
      }
    }
LABEL_33:
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.replaceWellKnownConstants()()
{
  uint64_t v18 = (uint64_t (*)(id))specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v2 = *(void *)(v0 + 64);
  int64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v2 + 32;
    swift_bridgeObjectRetain_n();
    unint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = v4 + 48 * v5;
      uint64_t v7 = *(void *)(v6 + 24);
      if (v7 == -7)
      {
        if ((uint64_t)++v5 >= v3) {
          goto LABEL_10;
        }
      }
      else
      {
        unint64_t v9 = *(void *)v6;
        uint64_t v8 = *(void *)(v6 + 8);
        uint64_t v10 = *(void *)(v6 + 16);
        char v11 = *(unsigned char *)(v6 + 40);
        uint64_t v12 = *(void *)(v6 + 32);
        *(void *)&long long v13 = v9;
        *((void *)&v13 + 1) = v8;
        uint64_t v14 = v10;
        uint64_t v15 = v7;
        uint64_t v16 = v12;
        char v17 = v11;
        outlined copy of NodePersonality(v9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #1 in Graph.replaceWellKnownConstants()(&v13, &v18, v0);
        if (v1)
        {
          outlined consume of NodePersonality(v9);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          break;
        }
        ++v5;
        outlined consume of NodePersonality(v9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((uint64_t)v5 >= v3) {
          goto LABEL_10;
        }
      }
      if (v5 >= v3)
      {
        __break(1u);
LABEL_10:
        swift_bridgeObjectRelease_n();
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Key()
{
  outlined init with take of SGDataTypeStorage(v0, (uint64_t)v5);
  uint64_t v1 = *(void *)(v0 + 72);
  Hasher.init(_seed:)();
  SGDataTypeStorage.hash(into:)();
  uint64_t v2 = *(void (**)(unsigned char *))(*(void *)v1 + 120);
  swift_retain();
  v2(v4);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Key(uint64_t a1)
{
  outlined init with take of SGDataTypeStorage(v1, (uint64_t)&v6);
  uint64_t v3 = *(void *)(v1 + 72);
  SGDataTypeStorage.hash(into:)();
  uint64_t v4 = *(void (**)(uint64_t))(*(void *)v3 + 120);
  swift_retain();
  v4(a1);
  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Key()
{
  outlined init with take of SGDataTypeStorage(v0, (uint64_t)v5);
  uint64_t v1 = *(void *)(v0 + 72);
  Hasher.init(_seed:)();
  SGDataTypeStorage.hash(into:)();
  uint64_t v2 = *(void (**)(unsigned char *))(*(void *)v1 + 120);
  swift_retain();
  v2(v4);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Key(uint64_t a1, uint64_t a2)
{
  outlined init with take of SGDataTypeStorage(a1, (uint64_t)v8);
  uint64_t v4 = *(void *)(a1 + 72);
  outlined init with take of SGDataTypeStorage(a2, (uint64_t)v9);
  uint64_t v5 = *(void *)(a2 + 72);
  if (specialized static SGDataTypeStorage.== infix(_:_:)((uint64_t)v8, (uint64_t)v9)) {
    char v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 128))(v5);
  }
  else {
    char v6 = 0;
  }
  return v6 & 1;
}

void *one-time initialization function for wellKnownConstantNodeData()
{
  uint64_t result = (void *)createWellKnownConstantNodeData()();
  wellKnownConstantNodeData._rawValue = result;
  return result;
}

uint64_t createWellKnownConstantNodeData()()
{
  if (one-time initialization token for wellKnownConstantMap != -1) {
    swift_once();
  }
  rawValue = (char *)wellKnownConstantMap._rawValue;
  int64_t v1 = *((void *)wellKnownConstantMap._rawValue + 2);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v25 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v25;
    uint64_t v3 = rawValue + 64;
    do
    {
      int64_t v20 = v1;
      uint64_t v4 = (void *)*((void *)v3 - 2);
      uint64_t v5 = (void *)*((void *)v3 - 1);
      uint64_t v6 = *((void *)v3 + 2);
      uint64_t v18 = *((void *)v3 + 1);
      uint64_t v19 = *(void *)v3;
      uint64_t v7 = *((void *)v3 + 3);
      uint64_t v8 = *((void *)v3 + 4);
      uint64_t v9 = *((void *)v3 + 5);
      char v10 = v3[48];
      uint64_t v11 = *((void *)v3 + 8);
      uint64_t v23 = *((void *)v3 + 7);
      uint64_t v24 = *((void *)v3 - 4);
      swift_retain();
      uint64_t v22 = v6;
      uint64_t v21 = v7;
      outlined copy of SGDataTypeStorage(v4, v5, v19, v18, v6, v7, v8, v9, v10);
      uint64_t v25 = v2;
      unint64_t v12 = *(void *)(v2 + 16);
      unint64_t v13 = *(void *)(v2 + 24);
      swift_bridgeObjectRetain();
      if (v12 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v12 + 1, 1);
        uint64_t v2 = v25;
      }
      *(void *)(v2 + 16) = v12 + 1;
      unint64_t v14 = v2 + 96 * v12;
      *(void *)(v14 + 32) = v4;
      *(void *)(v14 + 40) = v5;
      *(void *)(v14 + 48) = v19;
      *(void *)(v14 + 56) = v18;
      *(void *)(v14 + 64) = v22;
      *(void *)(v14 + 72) = v21;
      *(void *)(v14 + 80) = v8;
      *(void *)(v14 + 88) = v9;
      *(unsigned char *)(v14 + 96) = v10;
      *(void *)(v14 + 104) = v24;
      *(void *)(v14 + 112) = v23;
      v3 += 112;
      *(void *)(v14 + 120) = v11;
      int64_t v1 = v20 - 1;
    }
    while (v20 != 1);
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v2 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Key, String>);
    uint64_t v15 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v15 = MEMORY[0x263F8EE80];
  }
  uint64_t v25 = v15;
  uint64_t v16 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v16, 1, &v25);
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t closure #2 in Graph.replaceCreateSamplerNodes()(long long *a1, uint64_t a2, void **a3)
{
  long long v6 = a1[1];
  long long v38 = *a1;
  v39[0] = v6;
  *(_OWORD *)((char *)v39 + 9) = *(long long *)((char *)a1 + 25);
  uint64_t v7 = swift_bridgeObjectRetain();
  unint64_t v8 = specialized Sequence.compactMap<A>(_:)(v7, (_OWORD *)a2);
  swift_bridgeObjectRelease();
  if (*(void *)(v8 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    uint64_t v9 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v9 = MEMORY[0x263F8EE80];
  }
  uint64_t v29 = v9;
  char v10 = (void *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v10, 1, &v29);
  if (v3)
  {
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    char v42 = a3;
    uint64_t v11 = swift_bridgeObjectRelease();
    if (one-time initialization token for constantCreateSamplerFunctionNameToMatchingArguments != -1) {
      uint64_t v11 = swift_once();
    }
    MEMORY[0x270FA5388](v11);
    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v13 = specialized Sequence.first(where:)(v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #2 in closure #2 in Graph.replaceCreateSamplerNodes());
    uint64_t v15 = v14;
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    if (v15)
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v13;
      *(void *)(v17 + 24) = v15;
      if (one-time initialization token for sampler != -1) {
        swift_once();
      }
      uint64_t v18 = static MetalDataType.sampler;
      *(void *)(v17 + 32) = static MetalDataType.sampler;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
      uint64_t inited = swift_initStackObject();
      *(void *)(inited + 32) = 7632239;
      *(_OWORD *)(inited + 16) = xmmword_25C418EE0;
      *(void *)(inited + 40) = 0xE300000000000000;
      *(void *)(inited + 48) = v18;
      unint64_t v20 = *(void *)(a2 + 40);
      swift_retain_n();
      specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v20, MEMORY[0x263F8EE78], inited, v17 | 0x2000000000000000, a2 + 64, a2, v30);
      swift_setDeallocating();
      swift_arrayDestroy();
      ShaderGraphNode.out.getter((uint64_t)v31);
      ShaderGraphNode.out.getter((uint64_t)v32);
      Graph.moveEdges(from:to:)((uint64_t)v31, (uint64_t)v32);
      swift_release();
      long long v37 = v32[1];
      outlined release of String((uint64_t)&v37);
      swift_release();
      long long v36 = v31[1];
      outlined release of String((uint64_t)&v36);
      outlined init with take of NodePersonality(&v38, &v40);
      v41[0] = *(void *)&v39[0];
      uint64_t v21 = v42;
      uint64_t v22 = *v42;
      swift_bridgeObjectRetain();
      outlined retain of NodePersonality(&v40);
      outlined retain of [Input]((uint64_t)v41);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v21 = v22;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        *uint64_t v21 = v22;
      }
      unint64_t v25 = v22[2];
      unint64_t v24 = v22[3];
      if (v25 >= v24 >> 1)
      {
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v22);
        *uint64_t v21 = v22;
      }
      v22[2] = v25 + 1;
      uint64_t v26 = &v22[6 * v25];
      long long v27 = v38;
      long long v28 = v39[0];
      *(_OWORD *)((char *)v26 + 57) = *(_OWORD *)((char *)v39 + 9);
      v26[2] = v27;
      v26[3] = v28;
      outlined init with take of NodePersonality(v30, &v35);
      outlined release of NodePersonality(&v35);
      unint64_t v34 = v30[1];
      outlined release of [Input]((uint64_t)&v34);
      unint64_t v33 = v30[2];
      outlined release of [Input]((uint64_t)&v33);
      return swift_release();
    }
  }
  return result;
}

BOOL closure #2 in closure #2 in Graph.replaceCreateSamplerNodes()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRetain();
  BOOL v5 = specialized Sequence.allSatisfy(_:)(a4, partial apply for closure #1 in closure #2 in closure #2 in Graph.replaceCreateSamplerNodes());
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t closure #1 in closure #2 in closure #2 in Graph.replaceCreateSamplerNodes()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(void *)(a6 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v12)
    {
      uint64_t v13 = (uint64_t *)(*(void *)(a6 + 56) + 16 * v11);
      uint64_t v15 = *v13;
      uint64_t v14 = v13[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v15 == a4 && v14 == a5) {
        char v17 = 1;
      }
      else {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
    else
    {
      char v17 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v17 = 0;
  }
  return v17 & 1;
}

void closure #1 in Graph.replaceWellKnownConstants()(long long *a1, uint64_t (**a2)(id), uint64_t a3)
{
  uint64_t v4 = v3;
  long long v7 = *a1;
  long long v8 = a1[1];
  *(_OWORD *)((char *)v149 + 9) = *(long long *)((char *)a1 + 25);
  v149[0] = v8;
  long long v148 = v7;
  outlined init with take of NodePersonality(&v148, &v182);
  outlined init with take of NodePersonality(&v182, v183);
  if (v183[0] >> 61) {
    return;
  }
  uint64_t v111 = a2;
  uint64_t v112 = a3;
  uint64_t v9 = *(void **)(v183[0] + 16);
  char v10 = *(void **)(v183[0] + 24);
  uint64_t v11 = *(void *)(v183[0] + 32);
  uint64_t v12 = *(void *)(v183[0] + 40);
  uint64_t v13 = *(void *)(v183[0] + 56);
  *(void *)uint64_t v113 = *(void *)(v183[0] + 48);
  uint64_t v14 = *(void *)(v183[0] + 64);
  uint64_t v15 = *(void *)(v183[0] + 72);
  char v16 = *(unsigned char *)(v183[0] + 80);
  uint64_t v184 = *(uint64_t (**)(id))(**(void **)(v183[0] + 88) + 144);
  swift_retain();
  uint64_t v115 = v9;
  id v116 = v10;
  int v119 = v12;
  int v120 = v11;
  int v114 = v13;
  int v117 = v15;
  int v118 = v14;
  id v17 = outlined copy of SGDataTypeStorage(v9, v10, v11, v12, v113[0], v13, v14, v15, v16);
  uint64_t v18 = v184(v17);
  if (!v18)
  {
    swift_release();
    outlined consume of SGDataTypeStorage(v9, v10, v11, v12, v113[0], v13, v14, v15, v16);
    return;
  }
  uint64_t v184 = *v111;
  *(void *)&long long v150 = v9;
  *((void *)&v150 + 1) = v10;
  uint64_t v151 = v11;
  uint64_t v152 = v12;
  uint64_t v153 = *(void *)v113;
  uint64_t v154 = v13;
  uint64_t v19 = v18;
  uint64_t v155 = v14;
  uint64_t v156 = v15;
  char v157 = v16;
  uint64_t v158 = v18;
  outlined copy of SGDataTypeStorage(v9, v10, v11, v12, v113[0], v13, v14, v15, v16);
  swift_retain();
  outlined copy of SGDataTypeStorage(v9, v10, v11, v12, v113[0], v13, v14, v15, v16);
  swift_retain();
  specialized Dictionary.subscript.getter((uint64_t)&v150, (uint64_t)v184, (uint64_t)v126);
  char v110 = v16;
  uint64_t v20 = v19;
  outlined consume of SGDataTypeStorage(v9, v10, v11, v12, v113[0], v13, v118, v15, v16);
  swift_release();
  outlined init with take of MetalFunctionNode?((uint64_t)v126, (uint64_t)&v133, &demangling cache variable for type metadata for ShaderGraphNode?);
  uint64_t v21 = v10;
  if (*((void *)&v133 + 1))
  {
    long long v135 = v133;
    v136[0] = *(_OWORD *)v134;
    *(_OWORD *)((char *)v136 + 9) = *(_OWORD *)&v134[9];
    ShaderGraphNode.out.getter((uint64_t)v127);
    if (v4)
    {

      swift_release();
      outlined consume of SGDataTypeStorage(v9, v10, v120, v12, v113[0], v13, v118, v15, v16);
      swift_release();
      outlined consume of SGDataTypeStorage(v9, v10, v120, v12, v113[0], v13, v118, v15, v16);
      swift_release();
      outlined init with take of NodePersonality(&v135, &v140);
      outlined release of NodePersonality(&v140);
      uint64_t v141 = *((void *)&v135 + 1);
      outlined release of [Input]((uint64_t)&v141);
      uint64_t v142 = *(void *)&v136[0];
      outlined release of [Input]((uint64_t)&v142);
    }
    else
    {
      ShaderGraphNode.out.getter((uint64_t)v129);
      Graph.moveEdges(from:to:)((uint64_t)v127, (uint64_t)v129);
      swift_release();
      outlined consume of SGDataTypeStorage(v9, v10, v120, v12, v113[0], v13, v118, v15, v16);
      swift_release();
      outlined consume of SGDataTypeStorage(v9, v10, v120, v12, v113[0], v13, v118, v15, v16);
      swift_release();
      outlined init with take of NodePersonality(&v135, &v137);
      outlined release of NodePersonality(&v137);
      uint64_t v138 = *((void *)&v135 + 1);
      outlined release of [Input]((uint64_t)&v138);
      uint64_t v139 = *(void *)&v136[0];
      outlined release of [Input]((uint64_t)&v139);
      swift_release();
      long long v144 = v130;
      outlined release of String((uint64_t)&v144);
      swift_release();
      long long v143 = v128;
      outlined release of String((uint64_t)&v143);
    }
    return;
  }
  if (one-time initialization token for wellKnownConstantNodeData != -1) {
    swift_once();
  }
  rawValue = wellKnownConstantNodeData._rawValue;
  char v23 = v16;
  int v24 = v118;
  if (!*((void *)wellKnownConstantNodeData._rawValue + 2))
  {
LABEL_30:
    uint64_t v60 = v21;
    int v61 = v24;
    char v62 = v23;
    outlined consume of SGDataTypeStorage(v9, v60, v120, v12, v113[0], v13, v24, v15, v23);
    swift_release();
    swift_release_n();
    outlined consume of SGDataTypeStorage(v9, v10, v120, v12, v113[0], v13, v61, v15, v62);
    return;
  }
  outlined copy of SGDataTypeStorage(v9, v10, v120, v12, v113[0], v13, v118, v15, v16);
  swift_retain();
  uint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(&v150);
  if ((v26 & 1) == 0)
  {
    outlined consume of SGDataTypeStorage(v9, v10, v120, v12, v113[0], v13, v118, v15, v16);
    swift_release();
    int v24 = v118;
    char v23 = v16;
    uint64_t v21 = v10;
    goto LABEL_30;
  }
  uint64_t v27 = rawValue[7] + 16 * v25;
  uint64_t v28 = *(void *)(v27 + 8);
  uint64_t v184 = *(uint64_t (**)(id))v27;
  swift_bridgeObjectRetain();
  outlined consume of SGDataTypeStorage(v9, v10, v120, v12, v113[0], v13, v118, v15, v16);
  uint64_t v29 = swift_release();
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 144))(v29);
  if (!v30)
  {
    swift_bridgeObjectRelease();
    v123[0] = v20;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi28_((uint64_t)v123);
    outlined init with take of UserGraphError.ErrorType((uint64_t)v123, (uint64_t)v124);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v125 = 0uLL;
    swift_allocError();
    *Swift::String v90 = v124[0];
    long long v91 = v124[4];
    long long v93 = v124[1];
    long long v92 = v124[2];
    v90[3] = v124[3];
    v90[4] = v91;
    v90[1] = v93;
    _OWORD v90[2] = v92;
    long long v94 = v124[8];
    long long v96 = v124[5];
    long long v95 = v124[6];
    v90[7] = v124[7];
    v90[8] = v94;
    v90[5] = v96;
    v90[6] = v95;
    long long v97 = v125;
    long long v99 = v124[9];
    long long v98 = v124[10];
    v90[11] = v124[11];
    v90[12] = v97;
    v90[9] = v99;
    v90[10] = v98;
    swift_retain();
    swift_willThrow();
    outlined consume of SGDataTypeStorage(v9, v10, v120, v12, v113[0], v13, v118, v15, v16);
    swift_release();
    swift_release_n();
    outlined consume of SGDataTypeStorage(v9, v10, v120, v12, v113[0], v13, v118, v15, v16);
    return;
  }
  uint64_t v31 = v30;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_25C418EE0;
  *(void *)(v32 + 32) = 7632239;
  *(void *)(v32 + 40) = 0xE300000000000000;
  *(void *)(v32 + 48) = v31;
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v184;
  *(void *)(v33 + 24) = v28;
  *(void *)(v33 + 32) = v31;
  unint64_t v34 = v33 | 0x2000000000000000;
  unint64_t v35 = *(void *)(v112 + 40);
  swift_retain_n();
  specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v35, MEMORY[0x263F8EE78], v32, v34, v112 + 64, v112, (unint64_t *)&v131);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v147 = *((void *)&v131 + 1);
  int v37 = v12;
  int v36 = v120;
  uint64_t v106 = *(void *)(*((void *)&v131 + 1) + 16);
  if (!v106) {
    goto LABEL_33;
  }
  uint64_t v104 = *((void *)&v131 + 1) + 32;
  uint64_t v38 = *((void *)&v148 + 1);
  swift_bridgeObjectRetain();
  uint64_t v39 = 0;
  uint64_t v102 = v38;
  uint64_t v100 = (void *)(v38 + 80);
  while (2)
  {
    uint64_t v41 = v104 + 56 * v39;
    uint64_t v42 = *(void *)v41;
    uint64_t v43 = *(void *)(v41 + 8);
    uint64_t v44 = *(void *)(v41 + 16);
    uint64_t v45 = *(void *)(v41 + 24);
    uint64_t v46 = *(void *)(v41 + 32);
    char v47 = *(unsigned char *)(v41 + 40);
    uint64_t v48 = *(void *)(v41 + 48);
    *(void *)&long long v176 = v42;
    *((void *)&v176 + 1) = v43;
    uint64_t v177 = v44;
    uint64_t v178 = v45;
    uint64_t v179 = v46;
    char v180 = v47;
    uint64_t v181 = v48;
    uint64_t v49 = *(void *)(v102 + 16);
    if (!v49) {
      goto LABEL_17;
    }
    uint64_t v108 = v39;
    char v50 = v100;
    do
    {
      uint64_t v51 = *(v50 - 6);
      uint64_t v52 = *(v50 - 5);
      uint64_t v54 = *(v50 - 4);
      uint64_t v53 = *(v50 - 3);
      uint64_t v55 = *(v50 - 2);
      char v56 = *((unsigned char *)v50 - 8);
      uint64_t v57 = (uint64_t (*)(id))*v50;
      if (v54 == v44 && v53 == v45)
      {
        uint64_t v40 = v45;
LABEL_15:
        uint64_t v169 = v51;
        uint64_t v170 = v52;
        uint64_t v171 = v44;
        uint64_t v172 = v40;
        uint64_t v173 = v55;
        char v174 = v56;
        uint64_t v175 = v57;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)&v169, &v176);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_16;
      }
      uint64_t v121 = *(v50 - 6);
      uint64_t v184 = (uint64_t (*)(id))*v50;
      uint64_t v40 = v53;
      uint64_t v59 = v44;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v44 = v54;
        uint64_t v57 = v184;
        uint64_t v51 = v121;
        goto LABEL_15;
      }
      v50 += 7;
      --v49;
      uint64_t v44 = v59;
    }
    while (v49);
    uint64_t v169 = v121;
    uint64_t v170 = v52;
    uint64_t v171 = v54;
    uint64_t v172 = v40;
    uint64_t v173 = v55;
    char v174 = v56;
    uint64_t v175 = v184;
LABEL_16:
    int v37 = v119;
    int v36 = v120;
    uint64_t v39 = v108;
LABEL_17:
    if (++v39 != v106) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v147);
LABEL_33:
  uint64_t v146 = v132;
  int v63 = v117;
  int v64 = v118;
  int v66 = v113[0];
  int v65 = v114;
  uint64_t v107 = *(void *)(v132 + 16);
  if (!v107) {
    goto LABEL_50;
  }
  uint64_t v105 = v132 + 32;
  uint64_t v67 = *(void *)&v149[0];
  swift_bridgeObjectRetain();
  uint64_t v68 = 0;
  uint64_t v103 = v67;
  long long v101 = (void *)(v67 + 80);
  while (2)
  {
    long long v70 = (uint64_t *)(v105 + 56 * v68);
    uint64_t v71 = *v70;
    uint64_t v72 = v70[1];
    uint64_t v73 = v70[2];
    uint64_t v74 = v70[3];
    uint64_t v75 = v70[4];
    char v76 = *((unsigned char *)v70 + 40);
    uint64_t v77 = v70[6];
    v166[0] = v71;
    v166[1] = v72;
    v166[2] = v73;
    v166[3] = v74;
    v166[4] = v75;
    char v167 = v76;
    uint64_t v168 = v77;
    uint64_t v78 = *(void *)(v103 + 16);
    if (!v78) {
      goto LABEL_38;
    }
    uint64_t v109 = v68;
    Swift::String v79 = v101;
    while (2)
    {
      uint64_t v80 = *(v79 - 6);
      uint64_t v81 = *(v79 - 5);
      uint64_t v83 = *(v79 - 4);
      uint64_t v82 = *(v79 - 3);
      uint64_t v84 = *(v79 - 2);
      char v85 = *((unsigned char *)v79 - 8);
      uint64_t v86 = (uint64_t (*)(id))*v79;
      if (v83 == v73 && v82 == v74)
      {
        uint64_t v69 = v74;
LABEL_36:
        uint64_t v159 = v80;
        uint64_t v160 = v81;
        uint64_t v161 = v73;
        uint64_t v162 = v69;
        uint64_t v163 = v84;
        char v164 = v85;
        uint64_t v165 = v86;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdges(from:to:)((uint64_t)&v159, (uint64_t)v166);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_37;
      }
      uint64_t v122 = *(v79 - 6);
      uint64_t v184 = (uint64_t (*)(id))*v79;
      uint64_t v69 = v82;
      uint64_t v88 = v73;
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        uint64_t v73 = v83;
        uint64_t v86 = v184;
        uint64_t v80 = v122;
        goto LABEL_36;
      }
      v79 += 7;
      --v78;
      uint64_t v73 = v88;
      if (v78) {
        continue;
      }
      break;
    }
    uint64_t v159 = v122;
    uint64_t v160 = v81;
    uint64_t v161 = v83;
    uint64_t v162 = v69;
    uint64_t v163 = v84;
    char v164 = v85;
    uint64_t v165 = v184;
LABEL_37:
    int v63 = v117;
    int v64 = v118;
    int v66 = v113[0];
    int v65 = v114;
    int v37 = v119;
    int v36 = v120;
    uint64_t v68 = v109;
LABEL_38:
    if (++v68 != v107) {
      continue;
    }
    break;
  }
  outlined release of [Input]((uint64_t)&v146);
LABEL_50:
  specialized Graph.remove(_:)(*((uint64_t *)&v149[0] + 1));
  outlined init with take of NodePersonality(&v131, &v145);
  outlined copy of SGDataTypeStorage(v115, v116, v36, v37, v66, v65, v64, v63, v110);
  swift_retain();
  outlined retain of [Input]((uint64_t)&v147);
  outlined retain of [Input]((uint64_t)&v146);
  outlined retain of NodePersonality(&v145);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v124[0] = *v111;
  *uint64_t v111 = (uint64_t (*)(id))0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v131, &v150, isUniquelyReferenced_nonNull_native);
  *uint64_t v111 = *(uint64_t (**)(id))&v124[0];
  swift_bridgeObjectRelease();
  outlined consume of SGDataTypeStorage(v115, v116, v120, v37, v66, v65, v64, v63, v110);
  swift_release();
  swift_release();
  outlined consume of SGDataTypeStorage(v115, v116, v120, v37, v66, v65, v64, v63, v110);
  swift_release();
  outlined consume of SGDataTypeStorage(v115, v116, v120, v37, v66, v65, v64, v63, v110);
  swift_release();
  swift_release();
  outlined release of NodePersonality(&v145);
  outlined release of [Input]((uint64_t)&v147);
  outlined release of [Input]((uint64_t)&v146);
}

uint64_t specialized EnumeratedSequence.Iterator.next()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  unint64_t v4 = v1[4];
  int64_t v6 = v5;
  if (!v4)
  {
    int64_t v18 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_26;
    }
    int64_t v19 = (unint64_t)(v1[2] + 64) >> 6;
    if (v18 < v19)
    {
      uint64_t v20 = v1[1];
      unint64_t v21 = *(void *)(v20 + 8 * v18);
      if (v21)
      {
LABEL_8:
        uint64_t v7 = (v21 - 1) & v21;
        unint64_t v8 = __clz(__rbit64(v21)) + (v18 << 6);
        int64_t v6 = v18;
        goto LABEL_3;
      }
      int64_t v22 = v5 + 2;
      int64_t v6 = v5 + 1;
      if (v5 + 2 < v19)
      {
        unint64_t v21 = *(void *)(v20 + 8 * v22);
        if (v21)
        {
LABEL_11:
          int64_t v18 = v22;
          goto LABEL_8;
        }
        int64_t v6 = v5 + 2;
        if (v5 + 3 < v19)
        {
          unint64_t v21 = *(void *)(v20 + 8 * (v5 + 3));
          if (v21)
          {
            int64_t v18 = v5 + 3;
            goto LABEL_8;
          }
          int64_t v22 = v5 + 4;
          int64_t v6 = v5 + 3;
          if (v5 + 4 < v19)
          {
            unint64_t v21 = *(void *)(v20 + 8 * v22);
            if (v21) {
              goto LABEL_11;
            }
            int64_t v18 = v5 + 5;
            int64_t v6 = v5 + 4;
            if (v5 + 5 < v19)
            {
              unint64_t v21 = *(void *)(v20 + 8 * v18);
              if (v21) {
                goto LABEL_8;
              }
              int64_t v6 = v19 - 1;
              int64_t v23 = v5 + 6;
              while (v19 != v23)
              {
                unint64_t v21 = *(void *)(v20 + 8 * v23++);
                if (v21)
                {
                  int64_t v18 = v23 - 1;
                  goto LABEL_8;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v16 = 0;
    uint64_t v12 = 0;
    uint64_t v11 = 0;
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    v1[3] = v6;
    v1[4] = 0;
    goto LABEL_24;
  }
  uint64_t v7 = (v4 - 1) & v4;
  unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
  uint64_t v9 = 16 * v8;
  char v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = (uint64_t *)(*(void *)(v3 + 56) + v9);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  v1[3] = v6;
  v1[4] = v7;
  uint64_t v16 = v1[5];
  if (!__OFADD__(v16, 1))
  {
    v1[5] = v16 + 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
LABEL_24:
    *a1 = v16;
    a1[1] = v12;
    a1[2] = v11;
    a1[3] = v15;
    a1[4] = v14;
    return result;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v3)
  {
LABEL_18:
    swift_bridgeObjectRelease_n();
    return;
  }
  unint64_t v41 = 0;
  unint64_t v4 = (uint64_t *)(a1 + 64);
  while (1)
  {
    if (v41 >= *(void *)(a1 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v51 = v4[7];
    uint64_t v5 = v4[5];
    uint64_t v6 = *v4;
    uint64_t v8 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    char v10 = (void *)*(v4 - 4);
    uint64_t v9 = (void *)*(v4 - 3);
    uint64_t v39 = *((unsigned __int8 *)v4 + 32);
    uint64_t v37 = v4[6];
    uint64_t v38 = v4[1];
    uint64_t v11 = v4[2];
    uint64_t v12 = v4[3];
    outlined copy of SGDataTypeStorage(v10, v9, v8, v7, *v4, v38, v11, v12, *((unsigned char *)v4 + 32));
    swift_retain();
    swift_bridgeObjectRetain();
    if (!v5) {
      goto LABEL_18;
    }
    *(void *)&long long v46 = v10;
    *((void *)&v46 + 1) = v9;
    *(void *)&long long v47 = v8;
    *((void *)&v47 + 1) = v7;
    *(void *)&long long v48 = v6;
    *((void *)&v48 + 1) = v38;
    *(void *)&long long v49 = v11;
    *((void *)&v49 + 1) = v12;
    *(void *)&long long v50 = v39;
    *((void *)&v50 + 1) = v5;
    long long v44 = v48;
    long long v45 = v49;
    long long v42 = v46;
    long long v43 = v47;
    uint64_t v13 = (void *)*a3;
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(&v46);
    uint64_t v16 = v13[2];
    BOOL v17 = (v14 & 1) == 0;
    uint64_t v18 = v16 + v17;
    if (__OFADD__(v16, v17)) {
      goto LABEL_21;
    }
    char v19 = v14;
    if (v13[3] < v18) {
      break;
    }
    if (a2)
    {
      if (v14) {
        goto LABEL_16;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v19) {
        goto LABEL_16;
      }
    }
LABEL_12:
    int64_t v22 = (void *)*a3;
    *(void *)(*a3 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    int64_t v23 = (_OWORD *)(v22[6] + 80 * v15);
    long long v24 = v49;
    _OWORD v23[2] = v48;
    v23[3] = v24;
    v23[4] = v50;
    long long v25 = v47;
    _OWORD *v23 = v46;
    v23[1] = v25;
    char v26 = (void *)(v22[7] + 16 * v15);
    uint64_t v27 = v51;
    void *v26 = v37;
    v26[1] = v27;
    uint64_t v28 = v22[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_22;
    }
    v22[2] = v30;
    v4 += 12;
    a2 = 1;
    if (v3 == ++v41) {
      goto LABEL_18;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a2 & 1);
  uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(&v46);
  if ((v19 & 1) != (v21 & 1)) {
    goto LABEL_23;
  }
  unint64_t v15 = v20;
  if ((v19 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_16:
  uint64_t v31 = (void *)swift_allocError();
  swift_willThrow();
  id v32 = v31;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of SGDataTypeStorage((void *)v42, *((id *)&v42 + 1), v43, SDWORD2(v43), v44, SDWORD2(v44), v45, SDWORD2(v45), v39);
    swift_bridgeObjectRelease();
    swift_release();

    return;
  }
LABEL_24:
  _StringGuts.grow(_:)(30);
  v33._object = (void *)0x800000025C423400;
  v33._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v33);
  _print_unlocked<A, B>(_:_:)();
  v34._uint64_t countAndFlagsBits = 39;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  void *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  void *v36;
  id v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  unint64_t v41 = v5;
  if (!v5)
  {
LABEL_18:
    swift_bridgeObjectRelease_n();
    return;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v40 = v4;
  while (1)
  {
    if (v7 >= *(void *)(v4 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v8 = v4 + v6;
    uint64_t v9 = *(void *)(v4 + v6 + 32);
    char v10 = *(void *)(v4 + v6 + 40);
    uint64_t v11 = *(void *)(v4 + v6 + 56);
    long long v47 = *(void *)(v4 + v6 + 48);
    long long v49 = v7;
    uint64_t v12 = v6;
    uint64_t v13 = a2;
    unint64_t v15 = *(void *)(v8 + 64);
    char v14 = *(void *)(v8 + 72);
    uint64_t v16 = *(void *)(v8 + 80);
    BOOL v17 = *(unsigned char *)(v8 + 88);
    long long v46 = *(unsigned char *)(v8 + 89);
    long long v45 = *(void *)(v8 + 96);
    long long v44 = *(unsigned char *)(v8 + 104);
    swift_bridgeObjectRetain();
    long long v48 = v11;
    uint64_t v18 = v15;
    char v19 = v13;
    uint64_t v20 = v12;
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of GeomPropDef.GeomProp(v14, v16, v17);
    if (!v10) {
      goto LABEL_18;
    }
    long long v42 = v16;
    long long v43 = v17;
    char v21 = (void *)*a3;
    int64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
    long long v24 = v21[2];
    long long v25 = (v22 & 1) == 0;
    char v26 = v24 + v25;
    if (__OFADD__(v24, v25)) {
      goto LABEL_21;
    }
    uint64_t v27 = v22;
    if (v21[3] < v26) {
      break;
    }
    if (v19)
    {
      if (v22) {
        goto LABEL_16;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v27) {
        goto LABEL_16;
      }
    }
LABEL_12:
    uint64_t v30 = (void *)*a3;
    *(void *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    uint64_t v31 = (uint64_t *)(v30[6] + 16 * v23);
    *uint64_t v31 = v9;
    v31[1] = v10;
    id v32 = v30[7] + (v23 << 6);
    *(void *)id v32 = v47;
    *(void *)(v32 + 8) = v48;
    *(void *)(v32 + 16) = v18;
    *(void *)(v32 + 24) = v14;
    *(void *)(v32 + 32) = v42;
    *(unsigned char *)(v32 + 40) = v43;
    *(unsigned char *)(v32 + 41) = v46;
    *(void *)(v32 + 48) = v45;
    *(unsigned char *)(v32 + 56) = v44;
    Swift::String v33 = v30[2];
    Swift::String v34 = __OFADD__(v33, 1);
    unint64_t v35 = v33 + 1;
    if (v34) {
      goto LABEL_22;
    }
    uint64_t v7 = v49 + 1;
    v30[2] = v35;
    uint64_t v6 = v20 + 80;
    a2 = 1;
    unint64_t v4 = v40;
    if (v41 == v49 + 1) {
      goto LABEL_18;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v19 & 1);
  uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
  if ((v27 & 1) != (v29 & 1)) {
    goto LABEL_23;
  }
  int64_t v23 = v28;
  if ((v27 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_16:
  int v36 = (void *)swift_allocError();
  swift_willThrow();
  uint64_t v37 = v36;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of GeomPropDef.GeomProp(v14, v42, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_24:
  _StringGuts.grow(_:)(30);
  v38._object = (void *)0x800000025C423400;
  v38._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v38);
  _print_unlocked<A, B>(_:_:)();
  v39._uint64_t countAndFlagsBits = 39;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  void *v29;
  uint64_t *v30;
  _OWORD *v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  void *v41;
  id v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  unint64_t v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  unsigned char v57[160];
  _OWORD v58[2];
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  void *v77;

  uint64_t v77 = a3;
  unint64_t v4 = *(void *)(a1 + 16);
  long long v45 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  if (v4) {
    goto LABEL_3;
  }
LABEL_2:
  _s11ShaderGraph19NodeDefinitionStoreV0C0VSgWOi0_(v58);
  outlined init with take of MetalFunctionNode?((uint64_t)v58, (uint64_t)&v67, &demangling cache variable for type metadata for (String, NodeDef)?);
  uint64_t v6 = v4;
  while (1)
  {
    outlined init with take of MetalFunctionNode?((uint64_t)&v67, (uint64_t)v57, &demangling cache variable for type metadata for (String, NodeDef)?);
    outlined init with take of MetalFunctionNode?((uint64_t)v57, (uint64_t)v58, &demangling cache variable for type metadata for (String, NodeDef)?);
    if (getEnumTag for IOAttachment((uint64_t)v58) == 1)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
    long long v47 = v6;
    char v19 = *((void *)&v67 + 1);
    uint64_t v18 = v67;
    uint64_t v54 = v74;
    uint64_t v55 = v75;
    char v56 = v76;
    long long v50 = v70;
    uint64_t v51 = v71;
    uint64_t v52 = v72;
    uint64_t v53 = v73;
    long long v48 = v68;
    long long v49 = v69;
    uint64_t v20 = (void *)*v77;
    int64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v67, *((uint64_t *)&v67 + 1));
    int64_t v23 = v20[2];
    long long v24 = (v21 & 1) == 0;
    long long v25 = v23 + v24;
    if (__OFADD__(v23, v24))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_24;
    }
    char v26 = v21;
    if (v20[3] < v25) {
      break;
    }
    if (a2)
    {
      if (v21) {
        goto LABEL_17;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v26) {
        goto LABEL_17;
      }
    }
LABEL_13:
    BOOL v29 = (void *)*v77;
    v29[(v22 >> 6) + 8] |= 1 << v22;
    uint64_t v30 = (uint64_t *)(v29[6] + 16 * v22);
    *uint64_t v30 = v18;
    v30[1] = v19;
    uint64_t v31 = (_OWORD *)(v29[7] + 144 * v22);
    *uint64_t v31 = v48;
    id v32 = v49;
    Swift::String v33 = v50;
    Swift::String v34 = v52;
    _OWORD v31[3] = v51;
    v31[4] = v34;
    v31[1] = v32;
    v31[2] = v33;
    unint64_t v35 = v53;
    int v36 = v54;
    uint64_t v37 = v56;
    v31[7] = v55;
    unsigned char v31[8] = v37;
    v31[5] = v35;
    v31[6] = v36;
    uint64_t v38 = v29[2];
    uint64_t v39 = __OFADD__(v38, 1);
    uint64_t v40 = v38 + 1;
    if (v39) {
      goto LABEL_21;
    }
    void v29[2] = v40;
    a2 = 1;
    uint64_t v5 = v47;
    if (v47 == v4) {
      goto LABEL_2;
    }
LABEL_3:
    if (v5 >= *(void *)(a1 + 16)) {
      goto LABEL_22;
    }
    uint64_t v7 = (_OWORD *)(v45 + 160 * v5);
    uint64_t v8 = v7[7];
    uint64_t v9 = v7[5];
    int v63 = v7[6];
    int v64 = v8;
    char v10 = v7[7];
    uint64_t v11 = v7[9];
    int v65 = v7[8];
    int v66 = v11;
    uint64_t v12 = v7[3];
    uint64_t v13 = v7[1];
    uint64_t v59 = v7[2];
    uint64_t v60 = v12;
    char v14 = v7[3];
    unint64_t v15 = v7[5];
    int v61 = v7[4];
    char v62 = v15;
    uint64_t v16 = v7[1];
    v58[0] = *v7;
    v58[1] = v16;
    uint64_t v73 = v63;
    uint64_t v74 = v10;
    BOOL v17 = v7[9];
    uint64_t v75 = v65;
    char v76 = v17;
    uint64_t v69 = v59;
    long long v70 = v14;
    uint64_t v71 = v61;
    uint64_t v72 = v9;
    uint64_t v6 = v5 + 1;
    uint64_t v67 = v58[0];
    uint64_t v68 = v13;
    destructiveProjectEnumData for NodePersonality.ShaderType(&v67);
    outlined retain of (String, NodeDef)((uint64_t)v58);
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, a2 & 1);
  uint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
  if ((v26 & 1) != (v28 & 1)) {
    goto LABEL_23;
  }
  int64_t v22 = v27;
  if ((v26 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_17:
  unint64_t v41 = (void *)swift_allocError();
  swift_willThrow();
  long long v42 = v41;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    outlined release of NodeDef((uint64_t)&v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_24:
  _StringGuts.grow(_:)(30);
  v43._object = (void *)0x800000025C423400;
  v43._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)();
  v44._uint64_t countAndFlagsBits = 39;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  void *v26;
  id v27;
  Swift::String v28;
  Swift::String v29;
  unint64_t v30;
  long long v32;
  long long v33;
  long long v34;
  long long v35[2];
  long long v36;
  uint64_t v37;

  uint64_t v5 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  while (2)
  {
    if (v6)
    {
      uint64_t v9 = *(void *)(v6 + 16);
      if (v7 != v9) {
        goto LABEL_14;
      }
      Swift::String v33 = 0u;
      Swift::String v34 = 0u;
      id v32 = 0u;
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v32, &demangling cache variable for type metadata for (FunctionNodeID, MetalFunctionNode)?);
    }
    char v10 = *(void *)(a1 + 16);
    if (v8 == v10)
    {
LABEL_28:
      int v36 = 0u;
      memset(v35, 0, sizeof(v35));
LABEL_29:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      return;
    }
    if (v8 >= v10)
    {
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_35;
    }
    while (1)
    {
      uint64_t v6 = *(void *)(v5 + 8 * v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v6) {
        break;
      }
LABEL_10:
      ++v8;
      uint64_t v11 = *(void *)(a1 + 16);
      if (v8 == v11) {
        goto LABEL_28;
      }
      if (v8 >= v11) {
        goto LABEL_30;
      }
    }
    uint64_t v9 = *(void *)(v6 + 16);
    if (!v9)
    {
      Swift::String v33 = 0u;
      Swift::String v34 = 0u;
      id v32 = 0u;
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v32, &demangling cache variable for type metadata for (FunctionNodeID, MetalFunctionNode)?);
      goto LABEL_10;
    }
    uint64_t v7 = 0;
    ++v8;
LABEL_14:
    if (v7 >= v9) {
      goto LABEL_31;
    }
    outlined init with copy of (FunctionNodeID, MetalFunctionNode)(v6 + 48 * v7 + 32, (uint64_t)&v32);
    outlined init with take of MetalFunctionNode?((uint64_t)&v32, (uint64_t)v35, &demangling cache variable for type metadata for (FunctionNodeID, MetalFunctionNode)?);
    if (!(void)v36) {
      goto LABEL_29;
    }
    uint64_t v30 = v7;
    uint64_t v12 = *(void *)&v35[0];
    uint64_t v37 = *(void *)&v35[0];
    outlined init with take of MetalFunctionNode((long long *)((char *)v35 + 8), (uint64_t)&v32);
    uint64_t v13 = (void *)*a3;
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
    uint64_t v16 = v13[2];
    BOOL v17 = (v14 & 1) == 0;
    uint64_t v18 = v16 + v17;
    if (__OFADD__(v16, v17)) {
      goto LABEL_32;
    }
    char v19 = v14;
    if (v13[3] >= v18)
    {
      if (a2)
      {
        if (v14) {
          goto LABEL_26;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v19) {
          goto LABEL_26;
        }
      }
LABEL_23:
      int64_t v22 = (void *)*a3;
      *(void *)(*a3 + 8 * (v15 >> 6) + 64) |= 1 << v15;
      *(void *)(v22[6] + 8 * v15) = v12;
      outlined init with take of MetalFunctionNode(&v32, v22[7] + 40 * v15);
      int64_t v23 = v22[2];
      long long v24 = __OFADD__(v23, 1);
      long long v25 = v23 + 1;
      if (v24) {
        goto LABEL_33;
      }
      uint64_t v7 = v30 + 1;
      v22[2] = v25;
      a2 = 1;
      continue;
    }
    break;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a2 & 1);
  uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  if ((v19 & 1) != (v21 & 1)) {
    goto LABEL_34;
  }
  unint64_t v15 = v20;
  if ((v19 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_26:
  char v26 = (void *)swift_allocError();
  swift_willThrow();
  uint64_t v27 = v26;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_35:
  _StringGuts.grow(_:)(30);
  v28._object = (void *)0x800000025C423400;
  v28._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v28);
  _print_unlocked<A, B>(_:_:)();
  v29._uint64_t countAndFlagsBits = 39;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized Sequence.first(where:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v19 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t j = 0;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (j << 6); ; unint64_t i = __clz(__rbit64(v13)) + (j << 6))
  {
    unint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (a2(v17, v16, v18))
    {
      swift_release();
      return v17;
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = j + 1;
    if (__OFADD__(j, 1)) {
      break;
    }
    if (v12 >= v19) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v12);
    ++j;
    if (v13) {
      goto LABEL_19;
    }
    int64_t j = v12 + 1;
    if (v12 + 1 >= v19) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v4 + 8 * j);
    if (v13) {
      goto LABEL_19;
    }
    int64_t j = v12 + 2;
    if (v12 + 2 >= v19) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v4 + 8 * j);
    if (v13) {
      goto LABEL_19;
    }
    int64_t j = v12 + 3;
    if (v12 + 3 >= v19) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v4 + 8 * j);
    if (v13) {
      goto LABEL_19;
    }
    int64_t v14 = v12 + 4;
    if (v14 >= v19)
    {
LABEL_24:
      swift_release();
      return 0;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v14);
    for (int64_t j = v14; !v13; ++v14)
    {
      int64_t j = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_27;
      }
      if (j >= v19) {
        goto LABEL_24;
      }
      unint64_t v13 = *(void *)(v4 + 8 * j);
    }
LABEL_19:
    unint64_t v7 = (v13 - 1) & v13;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

BOOL specialized Sequence.allSatisfy(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  swift_bridgeObjectRetain();
  do
  {
    specialized EnumeratedSequence.Iterator.next()(v11);
    uint64_t v3 = v11[0];
    uint64_t v4 = v11[1];
    uint64_t v5 = v11[2];
    uint64_t v6 = v11[3];
    uint64_t v7 = v11[4];
    outlined init with take of MetalFunctionNode?((uint64_t)v11, (uint64_t)v12, &demangling cache variable for type metadata for (offset: Int, element: (key: String, value: String))?);
    uint64_t v8 = v13;
    if (!v13) {
      break;
    }
    char v9 = a2(v3, v4, v5, v6, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  while ((v9 & 1) != 0);
  outlined consume of [String : InputSpec].Iterator._Variant();
  return v8 == 0;
}

uint64_t sub_25C3986C4()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

BOOL partial apply for closure #2 in closure #2 in Graph.replaceCreateSamplerNodes()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #2 in closure #2 in Graph.replaceCreateSamplerNodes()(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t partial apply for closure #1 in closure #2 in closure #2 in Graph.replaceCreateSamplerNodes()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return closure #1 in closure #2 in closure #2 in Graph.replaceCreateSamplerNodes()(a1, a2, a3, a4, a5, *(void *)(v5 + 16));
}

uint64_t destroy for Key(uint64_t a1)
{
  outlined consume of SGDataTypeStorage(*(void **)a1, *(id *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  return swift_release();
}

uint64_t initializeWithCopy for Key(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v13 = *(unsigned char *)(a2 + 64);
  outlined copy of SGDataTypeStorage(*(id *)a2, v5, v6, v7, v8, v9, v10, v11, v13);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Key(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v22 = *(unsigned char *)(a2 + 64);
  outlined copy of SGDataTypeStorage(*(id *)a2, v5, v6, v7, v8, v9, v10, v11, v22);
  int64_t v12 = *(void **)a1;
  char v13 = *(void **)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  char v20 = *(unsigned char *)(a1 + 64);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v22;
  outlined consume of SGDataTypeStorage(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy80_16(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for Key(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 64);
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  char v13 = *(unsigned char *)(a1 + 64);
  long long v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  long long v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(unsigned char *)(a1 + 64) = v4;
  outlined consume of SGDataTypeStorage(v5, v6, v7, v8, v9, v10, v11, v12, v13);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Key(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Key(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Key()
{
  return &type metadata for Key;
}

unint64_t lazy protocol witness table accessor for type Key and conformance Key()
{
  unint64_t result = lazy protocol witness table cache variable for type Key and conformance Key;
  if (!lazy protocol witness table cache variable for type Key and conformance Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Key and conformance Key);
  }
  return result;
}

uint64_t logger.unsafeMutableAddressor()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)logger);
}

uint64_t static FileLogger.url(for:extension:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v45 = a4;
  uint64_t v43 = a5;
  uint64_t v44 = a3;
  v42._uint64_t countAndFlagsBits = a1;
  v42._object = a2;
  v47[2] = *(id *)MEMORY[0x263EF8340];
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v39 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  long long v14 = (char *)&v38 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v38 - v15;
  uint64_t v17 = self;
  id v18 = objc_msgSend(v17, sel_defaultManager);
  id v19 = objc_msgSend(v18, sel_temporaryDirectory);

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  URL.appendingPathComponent(_:isDirectory:)();
  char v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v7);
  URL.appendingPathComponent(_:isDirectory:)();
  v20(v14, v7);
  id v21 = objc_msgSend(v17, sel_defaultManager);
  URL._bridgeToObjectiveC()(v22);
  long long v24 = v23;
  v47[0] = 0;
  LODWORD(v19) = objc_msgSend(v21, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v23, 1, 0, v47);

  id v25 = v47[0];
  if (v19)
  {
    char v26 = self;
    id v27 = v25;
    id v28 = objc_msgSend(v26, sel_standardUserDefaults);
    BOOL v29 = (void *)MEMORY[0x261183E60](0xD000000000000024, 0x800000025C423090);
    uint64_t v30 = (uint64_t)objc_msgSend(v28, sel_integerForKey_, v29);

    if (v30 < 1)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v47[0] = (id)26483;
      v47[1] = (id)0xE200000000000000;
      uint64_t v31 = v39;
      Date.init()();
      Date.timeIntervalSinceReferenceDate.getter();
      uint64_t v33 = v32;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v31, v41);
      uint64_t v46 = v33;
      v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._uint64_t countAndFlagsBits = 95;
      v35._object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      String.append(_:)(v42);
    }
    URL.appendingPathComponent(_:)();
    swift_bridgeObjectRelease();
    URL.appendingPathExtension(_:)();
    v20(v14, v7);
    return ((uint64_t (*)(char *, uint64_t))v20)(v16, v7);
  }
  else
  {
    id v36 = v47[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return ((uint64_t (*)(char *, uint64_t))v20)(v16, v7);
  }
}

uint64_t one-time initialization function for logger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

uint64_t FileLogger.deinit()
{
  return v0;
}

uint64_t FileLogger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t FileLogger.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t FileLogger.init()()
{
  return v0;
}

void specialized static FileLogger.saveDebugFile(_:name:extension:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v77 = a4;
  unint64_t v78 = a6;
  uint64_t v80 = a5;
  uint64_t v81 = a3;
  uint64_t v75 = a1;
  uint64_t v76 = a2;
  uint64_t v86 = *MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v73 = *(void *)(v6 - 8);
  uint64_t v74 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v72 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  Swift::String v79 = (char *)&v71 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v71 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  char v20 = (char *)&v71 - v19;
  MEMORY[0x270FA5388](v18);
  char v22 = (void (*)(char *, uint64_t))((char *)&v71 - v21);
  int64_t v23 = self;
  id v24 = objc_msgSend(v23, sel_defaultManager);
  id v25 = objc_msgSend(v24, sel_temporaryDirectory);

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v71 = v10;
  char v26 = *(void (**)(char *, uint64_t))(v10 + 8);
  v26(v17, v9);
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v82 = v26;
  v26(v20, v9);
  id v27 = objc_msgSend(v23, sel_defaultManager);
  URL._bridgeToObjectiveC()(v28);
  uint64_t v30 = v29;
  uint64_t v84 = 0;
  LODWORD(v25) = objc_msgSend(v27, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v29, 1, 0, &v84);

  id v31 = (id)v84;
  if (v25)
  {
    uint64_t v32 = self;
    id v33 = v31;
    id v34 = objc_msgSend(v32, sel_standardUserDefaults);
    Swift::String v35 = (void *)MEMORY[0x261183E60](0xD000000000000024, 0x800000025C423090);
    uint64_t v36 = (uint64_t)objc_msgSend(v34, sel_integerForKey_, v35);

    if (v36 < 1)
    {
      unint64_t v43 = (unint64_t)v77;
      swift_bridgeObjectRetain();
      unint64_t v44 = v78;
      uint64_t v45 = v79;
      uint64_t v42 = v81;
    }
    else
    {
      uint64_t v84 = 26483;
      unint64_t v85 = 0xE200000000000000;
      Date.init()();
      Date.timeIntervalSinceReferenceDate.getter();
      uint64_t v38 = v37;
      (*(void (**)(char *, uint64_t))(v73 + 8))(v8, v74);
      uint64_t v83 = v38;
      v39._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      v40._uint64_t countAndFlagsBits = 95;
      v40._object = (void *)0xE100000000000000;
      String.append(_:)(v40);
      v41._uint64_t countAndFlagsBits = v81;
      v41._object = v77;
      String.append(_:)(v41);
      uint64_t v42 = v84;
      unint64_t v43 = v85;
      unint64_t v44 = v78;
      uint64_t v45 = v79;
    }
    uint64_t v46 = v82;
    URL.appendingPathComponent(_:)();
    URL.appendingPathExtension(_:)();
    v46(v20, v9);
    Data.write(to:options:)();
    uint64_t v81 = v42;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    __swift_project_value_buffer(v58, (uint64_t)logger);
    uint64_t v59 = v72;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v72, v45, v9);
    unint64_t v60 = v44;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    int v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.debug.getter();
    int v63 = v62;
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v64 = swift_slowAlloc();
      Swift::String v79 = (char *)swift_slowAlloc();
      uint64_t v84 = (uint64_t)v79;
      *(_DWORD *)uint64_t v64 = 136315650;
      LODWORD(v78) = v63;
      swift_bridgeObjectRetain();
      uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v43, &v84);
      uint64_t v82 = v22;
      uint64_t v83 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v64 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v60, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v64 + 22) = 2080;
      int v66 = v72;
      uint64_t v67 = URL.path.getter();
      uint64_t v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v46(v66, v9);
      _os_log_impl(&dword_25C27E000, v61, (os_log_type_t)v78, "%s.%s written to: %s", (uint8_t *)v64, 0x20u);
      uint64_t v69 = v79;
      swift_arrayDestroy();
      MEMORY[0x261185880](v69, -1, -1);
      MEMORY[0x261185880](v64, -1, -1);

      v46(v45, v9);
      long long v70 = (char *)v82;
    }
    else
    {

      v46(v59, v9);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v46(v45, v9);
      long long v70 = (char *)v22;
    }
    v46(v70, v9);
  }
  else
  {
    id v47 = (id)v84;
    long long v48 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v82((char *)v22, v9);
    uint64_t v84 = (uint64_t)v48;
    id v49 = v48;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v50 = String.init<A>(describing:)();
    unint64_t v52 = v51;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)logger);
    swift_bridgeObjectRetain();
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v54, v55))
    {
      char v56 = (uint8_t *)swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      uint64_t v84 = v57;
      *(_DWORD *)char v56 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v52, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25C27E000, v54, v55, "Unable to write debug file to disk. %s", v56, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261185880](v57, -1, -1);
      MEMORY[0x261185880](v56, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void specialized static FileLogger.saveDebugTextSource(_:name:extension:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10 = type metadata accessor for String.Encoding();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v14 = String.data(using:allowLossyConversion:)();
  unint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (v16 >> 60 == 15)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)logger);
    os_log_type_t v18 = static os_log_type_t.error.getter();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = v18;
    if (os_log_type_enabled(v19, v18))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v24 = v22;
      *(_DWORD *)uint64_t v21 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, (unint64_t)a4, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v21 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, a6, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25C27E000, v19, v20, "Unable to convert string to data %s.%s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x261185880](v22, -1, -1);
      MEMORY[0x261185880](v21, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    specialized static FileLogger.saveDebugFile(_:name:extension:)(v14, v16, a3, a4, a5, a6);
    outlined consume of Data?(v14, v16);
  }
}

uint64_t type metadata accessor for FileLogger()
{
  return self;
}

uint64_t method lookup function for FileLogger(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for FileLogger);
}

uint64_t dispatch thunk of FileLogger.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

Swift::String __swiftcall OrderedDictionary._debugDescription(typeName:)(Swift::String typeName)
{
  uint64_t v53 = v6;
  uint64_t v7 = v5;
  uint64_t v8 = v4;
  uint64_t v9 = v3;
  uint64_t v10 = v2;
  *(void *)&long long v56 = v1;
  object = typeName._object;
  uint64_t countAndFlagsBits = typeName._countAndFlagsBits;
  uint64_t v45 = *(void (***)(char *, uint64_t))(v5 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](typeName._countAndFlagsBits);
  unint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v44 = *(void (***)(char *, uint64_t))(v16 - 8);
  MEMORY[0x270FA5388](v13);
  os_log_type_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v55 = type metadata accessor for Optional();
  unint64_t v52 = *(void (***)(char *, char *, uint64_t))(v55 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v55);
  uint64_t v54 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v57 = countAndFlagsBits;
  uint64_t v58 = object;
  swift_bridgeObjectRetain();
  v24._uint64_t countAndFlagsBits = 40;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  uint64_t v61 = v57;
  os_log_type_t v62 = v58;
  uint64_t v57 = v9;
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
    uint64_t v25 = 6109787;
    unint64_t v26 = 0xE300000000000000;
  }
  else
  {
    uint64_t v50 = v15;
    v27._uint64_t countAndFlagsBits = 91;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    uint64_t v57 = v56;
    uint64_t v58 = v10;
    uint64_t v59 = v9;
    uint64_t v60 = 0;
    uint64_t v28 = type metadata accessor for OrderedDictionary.Iterator();
    v52 += 4;
    uint64_t v53 = v28;
    uint64_t v51 = TupleTypeMetadata2 - 8;
    long long v48 = (void (**)(char *, char *, uint64_t))(v45 + 4);
    id v49 = (void (**)(char *, char *, uint64_t))(v44 + 4);
    uint64_t v46 = (void (**)(uint64_t *, char *, uint64_t))(v45 + 2);
    id v47 = (void (**)(uint64_t *, char *, uint64_t))(v44 + 2);
    ++v44;
    ++v45;
    swift_retain();
    swift_retain();
    swift_retain();
    char v29 = 1;
    long long v56 = xmmword_25C418EE0;
    while (1)
    {
      Swift::String v35 = v54;
      OrderedDictionary.Iterator.next()(v53, v54);
      (*v52)(v23, v35, v55);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v23, 1, TupleTypeMetadata2) == 1)break; {
      uint64_t v36 = &v23[*(int *)(TupleTypeMetadata2 + 48)];
      }
      (*v49)(v18, v23, v8);
      uint64_t v37 = v18;
      uint64_t v38 = v50;
      (*v48)(v50, v36, v7);
      if ((v29 & 1) == 0)
      {
        v39._uint64_t countAndFlagsBits = 8236;
        v39._object = (void *)0xE200000000000000;
        String.append(_:)(v39);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = v56;
      *(void *)(v30 + 56) = v8;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v30 + 32));
      (*v47)(boxed_opaque_existential_0, v37, v8);
      debugPrint<A>(_:separator:terminator:to:)();
      swift_bridgeObjectRelease();
      v32._uint64_t countAndFlagsBits = 8250;
      v32._object = (void *)0xE200000000000000;
      String.append(_:)(v32);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = v56;
      *(void *)(v33 + 56) = v7;
      id v34 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v33 + 32));
      (*v46)(v34, v38, v7);
      debugPrint<A>(_:separator:terminator:to:)();
      swift_bridgeObjectRelease();
      (*v45)(v38, v7);
      (*v44)(v37, v8);
      char v29 = 0;
      os_log_type_t v18 = v37;
    }
    swift_release();
    swift_release();
    swift_release();
    uint64_t v25 = 93;
    unint64_t v26 = 0xE100000000000000;
  }
  String.append(_:)(*(Swift::String *)&v25);
  v40._uint64_t countAndFlagsBits = 41;
  v40._object = (void *)0xE100000000000000;
  String.append(_:)(v40);
  uint64_t v41 = v61;
  uint64_t v42 = v62;
  result._object = v42;
  result._uint64_t countAndFlagsBits = v41;
  return result;
}

uint64_t OrderedDictionary.debugDescription.getter()
{
  v0._uint64_t countAndFlagsBits = specialized OrderedDictionary._debugTypeName()();
  uint64_t countAndFlagsBits = OrderedDictionary._debugDescription(typeName:)(v0)._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

Swift::String __swiftcall OrderedDictionary._debugTypeName()()
{
  unint64_t v0 = specialized OrderedDictionary._debugTypeName()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OrderedDictionary<A, B>()
{
  return OrderedDictionary.debugDescription.getter();
}

unint64_t specialized OrderedDictionary._debugTypeName()()
{
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 8236;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD000000000000012;
}

uint64_t OrderedSet.UnorderedView._base.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedSet.UnorderedView._base.setter(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t result = swift_release();
  *Swift::String v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OrderedSet.UnorderedView._base.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedSet.unordered.getter(uint64_t a1)
{
  return a1;
}

uint64_t key path setter for OrderedSet.unordered : <A>OrderedSet<A>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_retain();
  swift_retain();
  uint64_t v5 = OrderedSet.init()();
  uint64_t v7 = v6;
  swift_release();
  swift_release();
  *a2 = v5;
  a2[1] = v7;
  v9[0] = v3;
  v9[1] = v4;
  $defer #1 <A>() in OrderedSet.__unstable.modify(a2, v9);
  swift_release();
  return swift_release();
}

void (*OrderedSet.unordered.modify(void *a1, uint64_t a2))(void **a1)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  uint64_t v6 = v2[1];
  *uint64_t v5 = *v2;
  v5[1] = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  v5[2] = v2;
  _OWORD v5[3] = v7;
  v5[4] = v8;
  *Swift::String v2 = OrderedSet.init()();
  v2[1] = v9;
  return OrderedSet.__unstable.modify;
}

uint64_t OrderedSet.unordered.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  swift_retain();
  uint64_t v5 = OrderedSet.init()();
  uint64_t v7 = v6;
  swift_release();
  swift_release();
  *Swift::String v2 = v5;
  v2[1] = v7;
  v9[0] = a1;
  v9[1] = a2;
  $defer #1 <A>() in OrderedSet.__unstable.modify(v2, v9);
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OrderedSet<A>.UnorderedView(uint64_t a1)
{
  return OrderedSet.UnorderedView.description.getter(*v1, v1[1], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t OrderedSet.UnorderedView.debugDescription.getter()
{
  _StringGuts.grow(_:)(16);
  uint64_t v0 = specialized OrderedSet._debugTypeName()();
  Swift::String v2 = v1;
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x726564726F6E552ELL;
  v3._object = (void *)0xEE00776569566465;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = v0;
  v4._object = v2;
  uint64_t countAndFlagsBits = OrderedSet._debugDescription(typeName:)(v4)._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OrderedSet<A>.UnorderedView()
{
  return OrderedSet.UnorderedView.debugDescription.getter();
}

uint64_t OrderedSet.UnorderedView.customMirror.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  _OWORD v14[2] = a1;
  v14[3] = a2;
  v14[1] = a2;
  uint64_t v10 = *MEMORY[0x263F8E7E8];
  uint64_t v11 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 104))(v9, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  type metadata accessor for OrderedSet.UnorderedView();
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  default argument 3 of Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)((uint64_t)v6);
  swift_retain();
  swift_retain_n();
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance OrderedSet<A>.UnorderedView()
{
  return OrderedSet.UnorderedView.customMirror.getter(*v0, v0[1]);
}

uint64_t static OrderedSet.UnorderedView.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v21[1] = a6;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v11 && a3 && a1 == a3) {
    return 1;
  }
  uint64_t v15 = ContiguousArray.count.getter();
  if (v15 != ContiguousArray.count.getter()) {
    return 0;
  }
  v21[0] = *(void *)(a2 + 16);
  if (!v21[0]) {
    return 1;
  }
  swift_retain();
  swift_retain();
  ContiguousArray.subscript.getter();
  BOOL v16 = OrderedSet.contains(_:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v13, a5);
  if (v16)
  {
    uint64_t v18 = 1;
    while (v21[0] != v18)
    {
      ContiguousArray.subscript.getter();
      ++v18;
      BOOL v19 = OrderedSet.contains(_:)();
      v17(v13, a5);
      if (!v19) {
        goto LABEL_11;
      }
    }
    swift_release();
    uint64_t v14 = 1;
  }
  else
  {
LABEL_11:
    swift_release();
    uint64_t v14 = 0;
  }
  swift_release();
  return v14;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OrderedSet<A>.UnorderedView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static OrderedSet.UnorderedView.== infix(_:_:)(*a1, a1[1], *a2, a2[1], *(void *)(a3 + 16), *(void *)(a3 + 24));
}

void OrderedSet.UnorderedView.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v12 = *(_OWORD *)(v9 + 48);
  long long v22 = *(_OWORD *)(v9 + 32);
  long long v23 = v12;
  uint64_t v24 = *(void *)(v9 + 64);
  long long v13 = *(_OWORD *)(v9 + 16);
  long long v20 = *(_OWORD *)v9;
  long long v21 = v13;
  Hasher.finalize()();
  uint64_t v14 = *(void *)(a3 + 16);
  if (v14)
  {
    v19[0] = a2;
    v19[1] = a1;
    uint64_t v15 = (void (**)(char *, uint64_t))(v8 + 8);
    swift_retain();
    swift_retain();
    Swift::UInt v16 = 0;
    uint64_t v17 = 0;
    do
    {
      ContiguousArray.subscript.getter();
      ++v17;
      uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
      (*v15)(v11, a4);
      v16 ^= v18;
    }
    while (v14 != v17);
    swift_release();
    swift_release();
  }
  else
  {
    Swift::UInt v16 = 0;
  }
  Hasher._combine(_:)(v16);
}

Swift::Int OrderedSet.UnorderedView.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  OrderedSet.UnorderedView.hash(into:)((uint64_t)v7, a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OrderedSet<A>.UnorderedView(uint64_t a1)
{
  return OrderedSet.UnorderedView.hashValue.getter(*v1, v1[1], *(void *)(a1 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance OrderedSet<A>.UnorderedView(uint64_t a1, uint64_t a2)
{
  OrderedSet.UnorderedView.hash(into:)(a1, *v2, v2[1], *(void *)(a2 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OrderedSet<A>.UnorderedView(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  OrderedSet.UnorderedView.hash(into:)((uint64_t)v5, *v2, v2[1], *(void *)(a2 + 16));
  return Hasher._finalize()();
}

uint64_t OrderedSet.UnorderedView.init(arrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  return OrderedSet.init<A>(_:)((uint64_t)&v8, a2, v5, a3, WitnessTable);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance OrderedSet<A>.UnorderedView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v11 = a1;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for Array();
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = OrderedSet.init<A>(_:)((uint64_t)&v11, v5, v6, v7, WitnessTable);
  *a3 = result;
  a3[1] = v10;
  return result;
}

uint64_t protocol witness for SetAlgebra.init() in conformance OrderedSet<A>.UnorderedView@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OrderedSet.init()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL protocol witness for SetAlgebra.contains(_:) in conformance OrderedSet<A>.UnorderedView()
{
  return OrderedSet.contains(_:)();
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance OrderedSet<A>.UnorderedView@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = specialized OrderedSet.UnorderedView.union(_:)(*a1, a1[1], *v3, v3[1], *(void *)(a2 + 16), *(void *)(a2 + 24));
  uint64_t v7 = v6;
  swift_release();
  uint64_t result = swift_release();
  *a3 = v5;
  a3[1] = v7;
  return result;
}

uint64_t OrderedSet.UnorderedView.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = specialized OrderedSet.UnorderedView.union(_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance OrderedSet<A>.UnorderedView@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = specialized OrderedSet.UnorderedView.intersection(_:)(*a1, a1[1], *v3, v3[1], *(void *)(a2 + 16));
  uint64_t v7 = v6;
  swift_release();
  uint64_t result = swift_release();
  *a3 = v5;
  a3[1] = v7;
  return result;
}

uint64_t OrderedSet.UnorderedView.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = specialized OrderedSet.UnorderedView.intersection(_:)(a1, a2, a3, a4, a5);
  swift_release();
  swift_release();
  return v5;
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance OrderedSet<A>.UnorderedView@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = specialized OrderedSet.UnorderedView.symmetricDifference(_:)(*a1, a1[1], *v3, v3[1], *(void *)(a2 + 16), *(void *)(a2 + 24));
  uint64_t v7 = v6;
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *a3 = v5;
  a3[1] = v7;
  return result;
}

uint64_t OrderedSet.UnorderedView.symmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = specialized OrderedSet.UnorderedView.symmetricDifference(_:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v6;
}

uint64_t OrderedSet.UnorderedView.insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  type metadata accessor for OrderedSet();
  char v5 = OrderedSet._append(_:)(a2);
  ContiguousArray.subscript.getter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a2, v4);
  return v5 & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance OrderedSet<A>.UnorderedView@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OrderedSet();
  return OrderedSet.remove(_:)(v2, a1);
}

uint64_t OrderedSet.UnorderedView.remove(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OrderedSet();
  return OrderedSet.remove(_:)(v2, a1);
}

uint64_t OrderedSet.UnorderedView.update(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  type metadata accessor for OrderedSet();
  if (OrderedSet._append(_:)(a1))
  {
    uint64_t v14 = *(void *)(v6 - 8);
    uint64_t v8 = 1;
  }
  else
  {
    Swift::Int v9 = v7;
    ContiguousArray.subscript.getter();
    uint64_t v10 = type metadata accessor for ContiguousArray();
    ContiguousArray._makeMutableAndUnique()();
    uint64_t v11 = *(void *)(v3 + 8);
    ContiguousArray._checkSubscript_mutating(_:)(v9);
    uint64_t v14 = *(void *)(v6 - 8);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 24))(v11+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * v9, a1, v6);
    destructiveProjectEnumData for NodePersonality.ShaderType(v10);
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v6);
  long long v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  return v12(a3, v8, 1, v6);
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance OrderedSet<A>.UnorderedView(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = type metadata accessor for OrderedSet();
  specialized OrderedSet.formUnion(_:)(v1, v2, v3);
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.UnorderedView.formUnion(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OrderedSet();
  specialized OrderedSet.formUnion(_:)(a1, a2, v4);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance OrderedSet<A>.UnorderedView(uint64_t *a1)
{
  return OrderedSet.UnorderedView.formIntersection(_:)(*a1, a1[1]);
}

uint64_t OrderedSet.UnorderedView.formIntersection(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OrderedSet();
  return OrderedSet.formIntersection(_:)(a1, a2, v4);
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance OrderedSet<A>.UnorderedView()
{
  specialized OrderedSet.UnorderedView.formSymmetricDifference(_:)();
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.UnorderedView.formSymmetricDifference(_:)()
{
  specialized OrderedSet.UnorderedView.formSymmetricDifference(_:)();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance OrderedSet<A>.UnorderedView@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = OrderedSet.UnorderedView.subtracting(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t OrderedSet.UnorderedView.subtracting(_:)()
{
  return OrderedSet._subtracting<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance OrderedSet<A>.UnorderedView(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.isSubset(of:) in conformance OrderedSet<A>.UnorderedView(a1, a2, a3, (uint64_t (*)(void, void, void, void, void, void))OrderedSet.UnorderedView.isSubset(of:));
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance OrderedSet<A>.UnorderedView(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.isSubset(of:) in conformance OrderedSet<A>.UnorderedView(a1, a2, a3, (uint64_t (*)(void, void, void, void, void, void))OrderedSet.UnorderedView.isDisjoint(with:));
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance OrderedSet<A>.UnorderedView(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.isSubset(of:) in conformance OrderedSet<A>.UnorderedView(a1, a2, a3, (uint64_t (*)(void, void, void, void, void, void))OrderedSet.UnorderedView.isSuperset(of:));
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance OrderedSet<A>.UnorderedView(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void, void, void, void))
{
  return a4(*a1, a1[1], *v4, v4[1], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance OrderedSet<A>.UnorderedView()
{
  return MEMORY[0x270F9E7C0]();
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance OrderedSet<A>.UnorderedView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  uint64_t v11 = OrderedSet.init<A>(_:)((uint64_t)v10, *(void *)(a3 + 16), a2, *(void *)(a3 + 24));
  uint64_t v13 = v12;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a2);
  *a4 = v11;
  a4[1] = v13;
  return result;
}

uint64_t OrderedSet.UnorderedView.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v10, a1);
  uint64_t v11 = OrderedSet.init<A>(_:)((uint64_t)v10, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, a3);
  return v11;
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance OrderedSet<A>.UnorderedView()
{
  return OrderedSet.UnorderedView.subtract(_:)();
}

uint64_t OrderedSet.UnorderedView.subtract(_:)()
{
  type metadata accessor for OrderedSet();
  swift_getWitnessTable();
  uint64_t result = OrderedSet._subtracting<A>(_:)();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t OrderedSet.UnorderedView.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = specialized OrderedSet.init(_:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t OrderedSet.UnorderedView.init<A>(_:)()
{
  uint64_t v0 = specialized OrderedSet.init<A>(_:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t OrderedSet.UnorderedView.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OrderedSet.UnorderedView.formUnion<A>(_:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized OrderedSet.formUnion<A>(_:));
}

uint64_t OrderedSet.UnorderedView.union<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = specialized OrderedSet.union<A>(_:)(a1, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  return v7;
}

uint64_t OrderedSet.UnorderedView.intersection<A>(_:)()
{
  uint64_t v0 = specialized OrderedSet.intersection<A>(_:)();
  swift_release();
  swift_release();
  return v0;
}

uint64_t OrderedSet.UnorderedView.formIntersection<A>(_:)()
{
  type metadata accessor for OrderedSet();
  return OrderedSet.formIntersection<A>(_:)();
}

uint64_t OrderedSet.UnorderedView.symmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = specialized OrderedSet.symmetricDifference<A>(_:)();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  return v7;
}

uint64_t OrderedSet.UnorderedView.formSymmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OrderedSet.UnorderedView.formUnion<A>(_:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized OrderedSet.formSymmetricDifference<A>(_:));
}

uint64_t OrderedSet.UnorderedView.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = type metadata accessor for OrderedSet();
  a5(a1, v9, a3, a4);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);
  return v10(a1, a3);
}

uint64_t OrderedSet.UnorderedView.subtract<A>(_:)()
{
  uint64_t result = OrderedSet._subtracting<A>(_:)();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t specialized OrderedSet.UnorderedView.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_retain();
  swift_retain();
  uint64_t v10 = specialized OrderedSet.intersection(_:)(a1, a2, a3, a4, a5);
  swift_release();
  swift_release();
  return v10;
}

uint64_t type metadata accessor for OrderedSet.UnorderedView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized OrderedSet.UnorderedView.formSymmetricDifference(_:)()
{
  type metadata accessor for OrderedSet();
  return specialized OrderedSet.formSymmetricDifference(_:)();
}

uint64_t base witness table accessor for Equatable in OrderedSet<A>.UnorderedView()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in OrderedSet<A>.UnorderedView()
{
  return swift_getWitnessTable();
}

uint64_t sub_25C39BF84@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  swift_retain();
  return swift_retain();
}

uint64_t sub_25C39BFC8()
{
  return 16;
}

__n128 sub_25C39BFD4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t OrderedSet.init()()
{
  return 0;
}

uint64_t OrderedSet.remove(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = OrderedSet._find(_:)();
  if (v7)
  {
    uint64_t v8 = 1;
  }
  else
  {
    OrderedSet._removeExistingMember(at:in:)(v5, v6, a1);
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v9(a2, v8, 1, v4);
}

BOOL OrderedSet.contains(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (index: Int?, bucket: _HashTable.Bucket));
  ContiguousArray.withUnsafeBufferPointer<A>(_:)();
  return (v1 & 1) == 0;
}

uint64_t partial apply for closure #1 in OrderedSet._find_inlined(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in OrderedSet._find_inlined(_:)(a1, a2, v3[4], v3[6], v3[3], a3);
}

uint64_t ShaderGraphNode.materialXNodeDefName.getter()
{
  outlined init with take of NodePersonality(v0, &v3);
  outlined init with take of NodePersonality(&v3, &v4);
  if (v4 >> 61 != 5) {
    return 0;
  }
  uint64_t v1 = *(void *)((v4 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ShaderGraphNode.constantStringValue.getter()
{
  outlined init with take of NodePersonality(v0, &v3);
  outlined init with take of NodePersonality(&v3, &v4);
  if (v4 >> 61 || *(unsigned char *)(v4 + 80) != 6) {
    return 0;
  }
  uint64_t v1 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void *ShaderGraphNode.constant.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with take of NodePersonality(v1, &v13);
  __n128 result = outlined init with take of NodePersonality(&v13, &v14);
  if (v14 >> 61)
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    char v12 = -1;
  }
  else
  {
    unint64_t v4 = *(void **)(v14 + 16);
    uint64_t v5 = *(void **)(v14 + 24);
    uint64_t v6 = *(void *)(v14 + 32);
    uint64_t v7 = *(void *)(v14 + 40);
    uint64_t v8 = *(void *)(v14 + 48);
    uint64_t v9 = *(void *)(v14 + 56);
    uint64_t v10 = *(void *)(v14 + 64);
    uint64_t v11 = *(void *)(v14 + 72);
    char v12 = *(unsigned char *)(v14 + 80);
    __n128 result = outlined copy of SGDataTypeStorage(v4, v5, v6, v7, v8, v9, v10, v11, v12);
  }
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v12;
  return result;
}

uint64_t RESurfaceShaderFunctionNode.functionName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RESurfaceShaderFunctionNode.paramsInput.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  return v1;
}

uint64_t RESurfaceShaderFunctionNode.uniformsInput.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  outlined copy of (name: String, type: MetalDataType)?(v1, *(void *)(v0 + 64));
  return v1;
}

uint64_t RESurfaceShaderFunctionNode.isConstExpr.getter()
{
  return 0;
}

void *RESurfaceShaderFunctionNode.__allocating_init(id:named:paramsInput:uniformsInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = (void *)swift_allocObject();
  if (one-time initialization token for void != -1) {
    swift_once();
  }
  v15[10] = static MetalDataType.void;
  v15[12] = MEMORY[0x263F8EE78];
  v15[14] = 0;
  v15[13] = 0;
  void v15[2] = a2;
  _OWORD v15[3] = a3;
  v15[4] = a4;
  v15[5] = a5;
  void v15[6] = a6;
  v15[7] = a7;
  v15[8] = a8;
  _OWORD v15[9] = a9;
  swift_beginAccess();
  v15[13] = a2;
  v15[14] = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15[11] = a1;
  return v15;
}

void *RESurfaceShaderFunctionNode.init(id:named:paramsInput:uniformsInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (one-time initialization token for void != -1)
  {
    uint64_t v17 = a8;
    swift_once();
    a8 = v17;
  }
  v9[10] = static MetalDataType.void;
  v9[12] = MEMORY[0x263F8EE78];
  v9[14] = 0;
  v9[13] = 0;
  void v9[2] = a2;
  v9[3] = a3;
  v9[4] = a4;
  v9[5] = a5;
  v9[6] = a6;
  v9[7] = a7;
  v9[8] = a8;
  v9[9] = a9;
  swift_beginAccess();
  v9[13] = a2;
  v9[14] = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[11] = a1;
  return v9;
}

uint64_t RESurfaceShaderFunctionNode.resultType.getter()
{
  return swift_retain();
}

uint64_t RESurfaceShaderFunctionNode.id.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 88);
}

uint64_t RESurfaceShaderFunctionNode.id.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 88) = a1;
  return result;
}

uint64_t (*RESurfaceShaderFunctionNode.id.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t RESurfaceShaderFunctionNode.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RESurfaceShaderFunctionNode.inputs.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 96) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*RESurfaceShaderFunctionNode.inputs.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t RESurfaceShaderFunctionNode.debugLabel.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RESurfaceShaderFunctionNode.debugLabel.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 104) = a1;
  *(void *)(v2 + 112) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*RESurfaceShaderFunctionNode.debugLabel.modify())()
{
  return XMLParserDelegate.StringNode.children.modify;
}

uint64_t RESurfaceShaderFunctionNode.generateMetalSource(in:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)a1 + 112))();
  uint64_t v6 = *(uint64_t (**)(uint64_t *))(*(void *)v5 + 376);
  long long v70 = (void *)v5;
  uint64_t v7 = (void (*)(uint64_t *, void))v6(&v68);
  uint64_t v9 = v8;
  uint64_t v10 = *v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v9 = v10;
  uint64_t v67 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    *uint64_t v9 = v10;
  }
  unint64_t v13 = v10[2];
  unint64_t v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
    *uint64_t v9 = v10;
  }
  void v10[2] = v13 + 1;
  unint64_t v14 = &v10[2 * v13];
  void v14[4] = 0xD000000000000016;
  void v14[5] = 0x800000025C426940;
  v7(&v68, 0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_25C418EE0;
  uint64_t v16 = v3[6];
  unint64_t v17 = *(void *)(v16 + 32);
  uint64_t v68 = *(void *)(v16 + 24);
  unint64_t v69 = v17;
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = 32;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  uint64_t v19 = v3[4];
  long long v20 = (void *)v3[5];
  swift_bridgeObjectRetain();
  v21._uint64_t countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  unint64_t v22 = v69;
  *(void *)(v15 + 32) = v68;
  *(void *)(v15 + 40) = v22;
  long long v23 = (void *)v3[8];
  if (v23)
  {
    uint64_t v24 = v3[9];
    uint64_t v25 = v3[7];
    unint64_t v26 = *(void *)(v24 + 32);
    uint64_t v68 = *(void *)(v24 + 24);
    unint64_t v69 = v26;
    outlined copy of (name: String, type: MetalDataType)?(v25, (uint64_t)v23);
    swift_bridgeObjectRetain();
    v27._uint64_t countAndFlagsBits = 32;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    v28._uint64_t countAndFlagsBits = v25;
    v28._object = v23;
    String.append(_:)(v28);
    uint64_t v30 = v68;
    unint64_t v29 = v69;
    unint64_t v32 = *(void *)(v15 + 16);
    unint64_t v31 = *(void *)(v15 + 24);
    if (v32 >= v31 >> 1) {
      uint64_t v15 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, (void *)v15);
    }
    *(void *)(v15 + 16) = v32 + 1;
    uint64_t v33 = v15 + 16 * v32;
    *(void *)(v33 + 32) = v30;
    *(void *)(v33 + 40) = v29;
    swift_release();
    swift_bridgeObjectRelease();
  }
  uint64_t v68 = 0;
  unint64_t v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(58);
  v34._uint64_t countAndFlagsBits = 0xD000000000000024;
  v34._object = (void *)0x800000025C426960;
  String.append(_:)(v34);
  uint64_t v35 = v3[2];
  uint64_t v36 = (void *)v3[3];
  swift_bridgeObjectRetain();
  v37._uint64_t countAndFlagsBits = v35;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._uint64_t countAndFlagsBits = 0x202020200A28;
  v38._object = (void *)0xE600000000000000;
  String.append(_:)(v38);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v39 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v41 = v40;
  swift_bridgeObjectRelease();
  v42._uint64_t countAndFlagsBits = v39;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._uint64_t countAndFlagsBits = 0x200A29202020200ALL;
  v43._object = (void *)0xEC0000007B202020;
  String.append(_:)(v43);
  uint64_t v44 = v68;
  unint64_t v45 = v69;
  uint64_t v46 = (uint64_t (**)(uint64_t *))(*v70 + 400);
  id v47 = *v46;
  long long v48 = (void (*)(uint64_t *, void))(*v46)(&v68);
  uint64_t v50 = v49;
  uint64_t v51 = *v49;
  char v52 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v50 = v51;
  if ((v52 & 1) == 0)
  {
    uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
    *uint64_t v50 = v51;
  }
  unint64_t v54 = v51[2];
  unint64_t v53 = v51[3];
  if (v54 >= v53 >> 1)
  {
    uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v54 + 1, 1, v51);
    *uint64_t v50 = v51;
  }
  v51[2] = v54 + 1;
  uint64_t v55 = &v51[2 * v54];
  v55[4] = v44;
  v55[5] = v45;
  v48(&v68, 0);
  swift_beginAccess();
  swift_retain();
  uint64_t v56 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph14FunctionNodeIDVG_AF05MetalfG0_psAE_pTg504_s11d19Graph09RESurfaceA12fg11C19generateI53Source2inyAA0gA8CompilerC_tKFAA0gdE0_pAA0dE2IDVKXEfU_AF0idR0CTf1cn_nTf4ng_n(v56, a1);
  swift_bridgeObjectRelease();
  if (v67)
  {
    swift_release();
  }
  else
  {
    uint64_t v57 = swift_release();
    MEMORY[0x270FA5388](v57);
    (*(void (**)(uint64_t (*)(uint64_t)))(*(void *)a1 + 152))(partial apply for closure #2 in RESurfaceShaderFunctionNode.generateMetalSource(in:));
    swift_bridgeObjectRelease();
    uint64_t v59 = (void (*)(uint64_t *, void))v47(&v68);
    uint64_t v61 = v60;
    os_log_type_t v62 = *v60;
    char v63 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v61 = v62;
    if ((v63 & 1) == 0)
    {
      os_log_type_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62[2] + 1, 1, v62);
      *uint64_t v61 = v62;
    }
    unint64_t v65 = v62[2];
    unint64_t v64 = v62[3];
    if (v65 >= v64 >> 1)
    {
      os_log_type_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v64 > 1), v65 + 1, 1, v62);
      *uint64_t v61 = v62;
    }
    v62[2] = v65 + 1;
    int v66 = &v62[2 * v65];
    v66[4] = 125;
    v66[5] = 0xE100000000000000;
    v59(&v68, 0);
  }
  return swift_release();
}

uint64_t closure #2 in RESurfaceShaderFunctionNode.generateMetalSource(in:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v7 = (void *)result;
    uint64_t v8 = a2 + 32;
    swift_bridgeObjectRetain();
    uint64_t v9 = v5 - 1;
    do
    {
      uint64_t v10 = v9;
      closure #1 in closure #2 in RESurfaceShaderFunctionNode.generateMetalSource(in:)(v8, a3, v7);
      if (v4) {
        break;
      }
      uint64_t v9 = v10 - 1;
      v8 += 40;
    }
    while (v10);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in closure #2 in RESurfaceShaderFunctionNode.generateMetalSource(in:)(uint64_t a1, uint64_t a2, void *a3)
{
  outlined init with copy of MetalFunctionNode(a1, (uint64_t)&v32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasMetalInvocation);
  swift_dynamicCast();
  uint64_t v6 = v30;
  uint64_t v7 = v31;
  __swift_project_boxed_opaque_existential_1(v29, v30);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(a2, v6, v7);
  if (v3) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
  }
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  uint64_t v14 = v10;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
  uint64_t v15 = (uint64_t (**)(uint64_t *))(*a3 + 400);
  uint64_t v16 = *v15;
  unint64_t v17 = (void (*)(uint64_t *, void))(*v15)(&v32);
  specialized Array.append<A>(contentsOf:)(v14);
  v17(&v32, 0);
  uint64_t v32 = v12;
  uint64_t v33 = v13;
  v18._uint64_t countAndFlagsBits = 59;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  uint64_t v19 = v32;
  uint64_t v20 = v33;
  Swift::String v21 = (uint64_t (*)(uint64_t *, void))v16(&v32);
  long long v23 = v22;
  uint64_t v24 = *v22;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v23 = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    void *v23 = v24;
  }
  unint64_t v27 = v24[2];
  unint64_t v26 = v24[3];
  if (v27 >= v26 >> 1)
  {
    uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v24);
    void *v23 = v24;
  }
  void v24[2] = v27 + 1;
  Swift::String v28 = &v24[2 * v27];
  v28[4] = v19;
  v28[5] = v20;
  return v21(&v32, 0);
}

uint64_t RESurfaceShaderFunctionNode.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of (name: String, type: MetalDataType)?(*(void *)(v0 + 56), *(void *)(v0 + 64));
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RESurfaceShaderFunctionNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of (name: String, type: MetalDataType)?(*(void *)(v0 + 56), *(void *)(v0 + 64));
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MetalFunctionNode.resultType.getter in conformance RESurfaceShaderFunctionNode()
{
  return swift_retain();
}

uint64_t protocol witness for MetalFunctionNode.id.getter in conformance RESurfaceShaderFunctionNode()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(v1 + 88);
}

uint64_t protocol witness for MetalFunctionNode.id.setter in conformance RESurfaceShaderFunctionNode(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 88) = a1;
  return result;
}

uint64_t (*protocol witness for MetalFunctionNode.id.modify in conformance RESurfaceShaderFunctionNode())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t protocol witness for MetalFunctionNode.inputs.getter in conformance RESurfaceShaderFunctionNode()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for MetalFunctionNode.inputs.setter in conformance RESurfaceShaderFunctionNode(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  *(void *)(v3 + 96) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for MetalFunctionNode.inputs.modify in conformance RESurfaceShaderFunctionNode())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t protocol witness for MetalSourceGenerator.generateMetalSource(in:) in conformance RESurfaceShaderFunctionNode(uint64_t a1)
{
  return RESurfaceShaderFunctionNode.generateMetalSource(in:)(a1);
}

uint64_t protocol witness for HasDebugLabel.debugLabel.getter in conformance RESurfaceShaderFunctionNode()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 104);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for HasDebugLabel.debugLabel.setter in conformance RESurfaceShaderFunctionNode(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  swift_beginAccess();
  *(void *)(v5 + 104) = a1;
  *(void *)(v5 + 112) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for HasDebugLabel.debugLabel.modify in conformance RESurfaceShaderFunctionNode())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph14FunctionNodeIDVG_AF05MetalfG0_psAE_pTg504_s11d19Graph09RESurfaceA12fg11C19generateI53Source2inyAA0gA8CompilerC_tKFAA0gdE0_pAA0dE2IDVKXEfU_AF0idR0CTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  void (*v8)(long long *__return_ptr, uint64_t);
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  long long v13[2];
  uint64_t v14;

  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v14;
    uint64_t v7 = (uint64_t *)(a1 + 32);
    uint64_t v8 = *(void (**)(long long *__return_ptr, uint64_t))(**(void **)(a2 + 16) + 272);
    while (1)
    {
      uint64_t v9 = *v7++;
      v8(v13, v9);
      if (v2) {
        break;
      }
      uint64_t v14 = v4;
      uint64_t v11 = *(void *)(v4 + 16);
      uint64_t v10 = *(void *)(v4 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        uint64_t v4 = v14;
      }
      *(void *)(v4 + 16) = v11 + 1;
      outlined init with take of MetalFunctionNode(v13, v4 + 40 * v11 + 32);
      if (!--v3) {
        return v4;
      }
    }
    swift_release();
  }
  return v4;
}

uint64_t partial apply for closure #2 in RESurfaceShaderFunctionNode.generateMetalSource(in:)(uint64_t a1)
{
  return closure #2 in RESurfaceShaderFunctionNode.generateMetalSource(in:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t outlined consume of (name: String, type: MetalDataType)?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for RESurfaceShaderFunctionNode()
{
  return self;
}

uint64_t method lookup function for RESurfaceShaderFunctionNode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for RESurfaceShaderFunctionNode);
}

uint64_t dispatch thunk of RESurfaceShaderFunctionNode.__allocating_init(id:named:paramsInput:uniformsInput:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

Swift::Void __swiftcall OrderedSet.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t OrderedSet.init(minimumCapacity:persistent:)(Swift::Int a1, Swift::Bool a2)
{
  uint64_t v5 = OrderedSet.init()();
  type metadata accessor for OrderedSet();
  OrderedSet._reserveCapacity(_:persistent:)(a1, a2);
  return v5;
}

Swift::Void __swiftcall OrderedSet._reserveCapacity(_:persistent:)(Swift::Int _, Swift::Bool persistent)
{
  if (_ < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  int64_t v3 = v2;
  type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(_);
  uint64_t v6 = *v2;
  uint64_t v7 = OrderedSet._scale.getter(*v2);
  int64_t v8 = specialized static _HashTable.scale(forCapacity:)(_);
  Swift::Int v9 = v8;
  if (!persistent) {
    Swift::Int v9 = OrderedSet._reservedScale.getter(v6);
  }
  if (v7 >= v8)
  {
    int64_t v11 = ContiguousArray.count.getter();
    Swift::Int v10 = specialized static _HashTable.scale(forCapacity:)(v11);
    if (v9 <= v8) {
      Swift::Int v12 = v8;
    }
    else {
      Swift::Int v12 = v9;
    }
    if (v10 <= v12) {
      Swift::Int v10 = v12;
    }
    if (v10 < v7) {
      goto LABEL_12;
    }
    OrderedSet._ensureUnique()();
    uint64_t v13 = *v3;
    if (OrderedSet._reservedScale.getter(*v3) == v9) {
      return;
    }
    if (v13)
    {
      swift_beginAccess();
      *(void *)(v13 + 24) = *(void *)(v13 + 24) & 0xFFFFFFFFFFFFFFC0 | v9 & 0x3F;
      return;
    }
LABEL_20:
    __break(1u);
    return;
  }
  Swift::Int v10 = v8;
LABEL_12:
  OrderedSet._regenerateHashTable(scale:reservedScale:)(v10, v9);
}

uint64_t *MetalDataType.re.surface_parameters_private.unsafeMutableAddressor()
{
  if (one-time initialization token for surface_parameters_private != -1) {
    swift_once();
  }
  return &static MetalDataType.re.surface_parameters_private;
}

uint64_t *MetalDataType.re.geometry_parameters_private.unsafeMutableAddressor()
{
  if (one-time initialization token for geometry_parameters_private != -1) {
    swift_once();
  }
  return &static MetalDataType.re.geometry_parameters_private;
}

uint64_t *MetalDataType.re.HoverData.unsafeMutableAddressor()
{
  if (one-time initialization token for HoverData != -1) {
    swift_once();
  }
  return &static MetalDataType.re.HoverData;
}

uint64_t *MetalDataType.re.EnvironmentRadianceResult.unsafeMutableAddressor()
{
  if (one-time initialization token for EnvironmentRadianceResult != -1) {
    swift_once();
  }
  return &static MetalDataType.re.EnvironmentRadianceResult;
}

uint64_t one-time initialization function for surface_parameters()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_25C41BFC0;
  if (one-time initialization token for uniforms != -1) {
    swift_once();
  }
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  uint64_t v1 = swift_retain();
  unint64_t v2 = MEMORY[0x263F8EE78];
  uint64_t v3 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(v0 + 32) = 0x736D726F66696E75;
  *(void *)(v0 + 40) = 0xE800000000000000;
  *(void *)(v0 + 48) = v3;
  *(void *)(v0 + 56) = v2;
  *(unsigned char *)(v0 + 64) = 1;
  *(void *)(v0 + 72) = 0;
  if (one-time initialization token for geometry != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v4 = swift_retain();
  uint64_t v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v4, v2);
  swift_release();
  *(void *)(v0 + 80) = 0x797274656D6F6567;
  *(void *)(v0 + 88) = 0xE800000000000000;
  *(void *)(v0 + 96) = v5;
  *(void *)(v0 + 104) = v2;
  *(unsigned char *)(v0 + 112) = 1;
  *(void *)(v0 + 120) = 1;
  if (one-time initialization token for surface_properties != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, v2);
  swift_release();
  *(void *)(v0 + 128) = 0x65636166727573;
  *(void *)(v0 + 136) = 0xE700000000000000;
  *(void *)(v0 + 144) = v7;
  *(void *)(v0 + 152) = v2;
  *(unsigned char *)(v0 + 160) = 1;
  *(void *)(v0 + 168) = 2;
  if (one-time initialization token for textures != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v8 = swift_retain();
  uint64_t v9 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, v2);
  swift_release();
  *(void *)(v0 + 176) = 0x7365727574786574;
  *(void *)(v0 + 184) = 0xE800000000000000;
  *(void *)(v0 + 192) = v9;
  *(void *)(v0 + 200) = v2;
  *(unsigned char *)(v0 + 208) = 1;
  *(void *)(v0 + 216) = 3;
  if (one-time initialization token for material_parameters != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v10 = swift_retain();
  uint64_t v11 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v10, v2);
  swift_release();
  *(void *)(v0 + 224) = 0xD000000000000012;
  *(void *)(v0 + 232) = 0x800000025C426BE0;
  *(void *)(v0 + 240) = v11;
  *(void *)(v0 + 248) = v2;
  *(unsigned char *)(v0 + 256) = 1;
  *(void *)(v0 + 264) = 4;
  type metadata accessor for MetalDataType.Struct();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0xD000000000000022, 0x800000025C426D80, 0xD00000000000001ELL, 0x800000025C426DB0, 0x100000000, 0x100000000, 0, v0, v12);
  uint64_t result = swift_release();
  static MetalDataType.re.surface_parameters = v13;
  return result;
}

uint64_t *MetalDataType.re.surface.uniforms.unsafeMutableAddressor()
{
  if (one-time initialization token for uniforms != -1) {
    swift_once();
  }
  return &static MetalDataType.re.surface.uniforms;
}

uint64_t *MetalDataType.re.surface.geometry.unsafeMutableAddressor()
{
  if (one-time initialization token for geometry != -1) {
    swift_once();
  }
  return &static MetalDataType.re.surface.geometry;
}

uint64_t *MetalDataType.re.surface.surface_properties.unsafeMutableAddressor()
{
  if (one-time initialization token for surface_properties != -1) {
    swift_once();
  }
  return &static MetalDataType.re.surface.surface_properties;
}

uint64_t *MetalDataType.re.texture.textures.unsafeMutableAddressor()
{
  if (one-time initialization token for textures != -1) {
    swift_once();
  }
  return &static MetalDataType.re.texture.textures;
}

uint64_t *MetalDataType.re.material.material_parameters.unsafeMutableAddressor()
{
  if (one-time initialization token for material_parameters != -1) {
    swift_once();
  }
  return &static MetalDataType.re.material.material_parameters;
}

uint64_t *MetalDataType.re.surface_parameters.unsafeMutableAddressor()
{
  if (one-time initialization token for surface_parameters != -1) {
    swift_once();
  }
  return &static MetalDataType.re.surface_parameters;
}

uint64_t static MetalDataType.re.surface_parameters.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for surface_parameters);
}

uint64_t one-time initialization function for geometry_parameters()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_25C41BFB0;
  if (one-time initialization token for uniforms != -1) {
    swift_once();
  }
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  uint64_t v1 = swift_retain();
  unint64_t v2 = MEMORY[0x263F8EE78];
  uint64_t v3 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(v0 + 32) = 0x736D726F66696E75;
  *(void *)(v0 + 40) = 0xE800000000000000;
  *(void *)(v0 + 48) = v3;
  *(void *)(v0 + 56) = v2;
  *(unsigned char *)(v0 + 64) = 1;
  *(void *)(v0 + 72) = 0;
  if (one-time initialization token for geometry != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v4 = swift_retain();
  uint64_t v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v4, v2);
  swift_release();
  *(void *)(v0 + 80) = 0x797274656D6F6567;
  *(void *)(v0 + 88) = 0xE800000000000000;
  *(void *)(v0 + 96) = v5;
  *(void *)(v0 + 104) = v2;
  *(unsigned char *)(v0 + 112) = 1;
  *(void *)(v0 + 120) = 1;
  if (one-time initialization token for textures != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, v2);
  swift_release();
  *(void *)(v0 + 128) = 0x7365727574786574;
  *(void *)(v0 + 136) = 0xE800000000000000;
  *(void *)(v0 + 144) = v7;
  *(void *)(v0 + 152) = v2;
  *(unsigned char *)(v0 + 160) = 1;
  *(void *)(v0 + 168) = 2;
  if (one-time initialization token for material_parameters != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v8 = swift_retain();
  uint64_t v9 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, v2);
  swift_release();
  *(void *)(v0 + 176) = 0xD000000000000012;
  *(void *)(v0 + 184) = 0x800000025C426BE0;
  *(void *)(v0 + 192) = v9;
  *(void *)(v0 + 200) = v2;
  *(unsigned char *)(v0 + 208) = 1;
  *(void *)(v0 + 216) = 3;
  type metadata accessor for MetalDataType.Struct();
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0xD000000000000023, 0x800000025C426B90, 0xD00000000000001FLL, 0x800000025C426BC0, 0x100000000, 0x100000000, 0, v0, v10);
  uint64_t result = swift_release();
  static MetalDataType.re.geometry_parameters = v11;
  return result;
}

uint64_t *MetalDataType.re.geometry_modifier.uniforms.unsafeMutableAddressor()
{
  if (one-time initialization token for uniforms != -1) {
    swift_once();
  }
  return &static MetalDataType.re.geometry_modifier.uniforms;
}

uint64_t *MetalDataType.re.geometry_modifier.geometry.unsafeMutableAddressor()
{
  if (one-time initialization token for geometry != -1) {
    swift_once();
  }
  return &static MetalDataType.re.geometry_modifier.geometry;
}

uint64_t *MetalDataType.re.geometry_parameters.unsafeMutableAddressor()
{
  if (one-time initialization token for geometry_parameters != -1) {
    swift_once();
  }
  return &static MetalDataType.re.geometry_parameters;
}

uint64_t static MetalDataType.re.geometry_parameters.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for geometry_parameters);
}

uint64_t one-time initialization function for uniforms()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_25C418EE0;
  if (one-time initialization token for float != -1) {
    swift_once();
  }
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  uint64_t v1 = swift_retain();
  uint64_t v2 = MEMORY[0x263F8EE78];
  uint64_t v3 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(v0 + 32) = 1701669236;
  *(void *)(v0 + 40) = 0xE400000000000000;
  *(void *)(v0 + 48) = v3;
  *(void *)(v0 + 56) = v2;
  *(unsigned char *)(v0 + 64) = 1;
  *(void *)(v0 + 72) = 0;
  type metadata accessor for MetalDataType.Struct();
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD00000000000001DLL, 0x800000025C426F90, 0x100000000, 0x100000000, 0, v0, v4);
  uint64_t result = swift_release();
  static MetalDataType.re.surface.uniforms = v5;
  return result;
}

{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String, type: MetalDataType)>);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 1701669236;
  *(_OWORD *)(inited + 16) = xmmword_25C41D5A0;
  *(void *)(inited + 40) = 0xE400000000000000;
  if (one-time initialization token for float != -1) {
    swift_once();
  }
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(inited + 48) = v2;
  strcpy((char *)(inited + 56), "model_to_world");
  *(unsigned char *)(inited + 71) = -18;
  if (one-time initialization token for float4x4 != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v3 = swift_retain();
  uint64_t v4 = MEMORY[0x263F8EE78];
  uint64_t v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v3, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(inited + 72) = v5;
  strcpy((char *)(inited + 80), "world_to_model");
  *(unsigned char *)(inited + 95) = -18;
  swift_allocObject();
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, v4);
  swift_release();
  *(void *)(inited + 96) = v7;
  *(void *)(inited + 104) = 0x745F6C616D726F6ELL;
  *(void *)(inited + 112) = 0xEF646C726F775F6FLL;
  if (one-time initialization token for float3x3 != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v8 = swift_retain();
  uint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v10 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(inited + 120) = v10;
  strcpy((char *)(inited + 128), "model_to_view");
  *(_WORD *)(inited + 142) = -4864;
  swift_allocObject();
  uint64_t v11 = swift_retain();
  uint64_t v12 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v11, v9);
  swift_release();
  *(void *)(inited + 144) = v12;
  *(void *)(inited + 152) = 0xD000000000000012;
  *(void *)(inited + 160) = 0x800000025C426D20;
  swift_allocObject();
  uint64_t v13 = swift_retain();
  uint64_t v14 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v13, v9);
  swift_release();
  *(void *)(inited + 168) = v14;
  *(void *)(inited + 176) = 0xD000000000000012;
  *(void *)(inited + 184) = 0x800000025C426D40;
  swift_allocObject();
  uint64_t v15 = swift_retain();
  uint64_t v16 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v15, v9);
  swift_release();
  *(void *)(inited + 192) = v16;
  *(void *)(inited + 200) = 0xD000000000000010;
  *(void *)(inited + 208) = 0x800000025C426D60;
  if (one-time initialization token for float4 != -1) {
    swift_once();
  }
  swift_allocObject();
  unint64_t v17 = swift_retain();
  Swift::String v18 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v17, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(inited + 216) = v18;
  uint64_t v19 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySS5label_11ShaderGraph13MetalDataTypeC4typetGG_AI0jK8PropertyVs5NeverOTg508_sSiSS11g7Graph13ijk7CAA0dE8m48VIgyggo_Si6offset_SS5label_AC4typet7elementtAEs5n98OIegnrzr_TR04_s11a7Graph13cde69C6StructC4note8typeName10fieldSpecsAESSSg_S2S5label_AC0H0tdtcfcAA0dT32F19VSi_SSAJ_AcKttXEfU_Tf3nnnpf_nTf1cn_n(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String, type: MetalDataType));
  swift_arrayDestroy();
  type metadata accessor for MetalDataType.Struct();
  uint64_t v20 = swift_allocObject();
  Swift::String v21 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000027, 0x800000025C426CF0, 0x100000000, 0x100000000, 0, v19, v20);
  uint64_t result = swift_release();
  static MetalDataType.re.geometry_modifier.uniforms = v21;
  return result;
}

uint64_t static MetalDataType.re.surface.uniforms.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uniforms);
}

uint64_t one-time initialization function for geometry()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String, type: MetalDataType)>);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 0x705F6E6565726373;
  *(_OWORD *)(inited + 16) = xmmword_25C41D580;
  *(void *)(inited + 40) = 0xEF6E6F697469736FLL;
  if (one-time initialization token for float4 != -1) {
    swift_once();
  }
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(inited + 48) = v2;
  strcpy((char *)(inited + 56), "world_position");
  *(unsigned char *)(inited + 71) = -18;
  if (one-time initialization token for float3 != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v3 = swift_retain();
  unint64_t v4 = MEMORY[0x263F8EE78];
  uint64_t v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v3, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(inited + 72) = v5;
  *(void *)(inited + 80) = 0x726F6C6F63;
  *(void *)(inited + 88) = 0xE500000000000000;
  swift_allocObject();
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, v4);
  swift_release();
  *(void *)(inited + 96) = v7;
  *(void *)(inited + 104) = 0x6C616D726F6ELL;
  *(void *)(inited + 112) = 0xE600000000000000;
  swift_allocObject();
  uint64_t v8 = swift_retain();
  uint64_t v9 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, v4);
  swift_release();
  *(void *)(inited + 120) = v9;
  *(void *)(inited + 128) = 0x746E65676E6174;
  *(void *)(inited + 136) = 0xE700000000000000;
  swift_allocObject();
  uint64_t v10 = swift_retain();
  uint64_t v11 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v10, v4);
  swift_release();
  *(void *)(inited + 144) = v11;
  *(void *)(inited + 152) = 0x6E65676E61746962;
  *(void *)(inited + 160) = 0xE900000000000074;
  swift_allocObject();
  uint64_t v12 = swift_retain();
  uint64_t v13 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v12, v4);
  swift_release();
  *(void *)(inited + 168) = v13;
  *(void *)(inited + 176) = 3176053;
  *(void *)(inited + 184) = 0xE300000000000000;
  if (one-time initialization token for float2 != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v14 = swift_retain();
  unint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v16 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v14, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(inited + 192) = v16;
  *(void *)(inited + 200) = 3241589;
  *(void *)(inited + 208) = 0xE300000000000000;
  swift_allocObject();
  uint64_t v17 = swift_retain();
  uint64_t v18 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v17, v15);
  swift_release();
  *(void *)(inited + 216) = v18;
  *(void *)(inited + 224) = 0xD000000000000010;
  *(void *)(inited + 232) = 0x800000025C426C70;
  swift_allocObject();
  uint64_t v19 = swift_retain();
  uint64_t v20 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v19, v15);
  swift_release();
  *(void *)(inited + 240) = v20;
  strcpy((char *)(inited + 248), "view_direction");
  *(unsigned char *)(inited + 263) = -18;
  swift_allocObject();
  uint64_t v21 = swift_retain();
  uint64_t v22 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v21, v15);
  swift_release();
  *(void *)(inited + 264) = v22;
  uint64_t v23 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySS5label_11ShaderGraph13MetalDataTypeC4typetGG_AI0jK8PropertyVs5NeverOTg508_sSiSS11g7Graph13ijk7CAA0dE8m48VIgyggo_Si6offset_SS5label_AC4typet7elementtAEs5n98OIegnrzr_TR04_s11a7Graph13cde69C6StructC4note8typeName10fieldSpecsAESSSg_S2S5label_AC0H0tdtcfcAA0dT32F19VSi_SSAJ_AcKttXEfU_Tf3nnnpf_nTf1cn_n(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String, type: MetalDataType));
  swift_arrayDestroy();
  type metadata accessor for MetalDataType.Struct();
  uint64_t v24 = swift_allocObject();
  uint64_t v25 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD00000000000001DLL, 0x800000025C426F70, 0x100000000, 0x100000000, 0, v23, v24);
  uint64_t result = swift_release();
  static MetalDataType.re.surface.geometry = v25;
  return result;
}

{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String, type: MetalDataType)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C41D5B0;
  *(void *)(inited + 32) = 0x695F786574726576;
  *(void *)(inited + 40) = 0xE900000000000064;
  if (one-time initialization token for uint32 != -1) {
    swift_once();
  }
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  uint64_t v1 = swift_retain_n();
  uint64_t v2 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x263F8EE78]);
  swift_release_n();
  *(void *)(inited + 48) = v2;
  strcpy((char *)(inited + 56), "model_position");
  *(unsigned char *)(inited + 71) = -18;
  if (one-time initialization token for float3 != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v3 = swift_retain();
  unint64_t v4 = MEMORY[0x263F8EE78];
  uint64_t v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v3, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(inited + 72) = v5;
  strcpy((char *)(inited + 80), "world_position");
  *(unsigned char *)(inited + 95) = -18;
  swift_allocObject();
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, v4);
  swift_release();
  *(void *)(inited + 96) = v7;
  *(void *)(inited + 104) = 0xD000000000000015;
  *(void *)(inited + 112) = 0x800000025C426C30;
  swift_allocObject();
  uint64_t v8 = swift_retain();
  uint64_t v9 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, v4);
  swift_release();
  *(void *)(inited + 120) = v9;
  *(void *)(inited + 128) = 0xD000000000000015;
  *(void *)(inited + 136) = 0x800000025C426C50;
  swift_allocObject();
  uint64_t v10 = swift_retain();
  uint64_t v11 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v10, v4);
  swift_release();
  *(void *)(inited + 144) = v11;
  *(void *)(inited + 152) = 0x726F6C6F63;
  *(void *)(inited + 160) = 0xE500000000000000;
  if (one-time initialization token for float4 != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v12 = swift_retain();
  uint64_t v13 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v12, v4);
  swift_release();
  *(void *)(inited + 168) = v13;
  *(void *)(inited + 176) = 0x6C616D726F6ELL;
  *(void *)(inited + 184) = 0xE600000000000000;
  swift_allocObject();
  uint64_t v14 = swift_retain();
  unint64_t v15 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v14, v4);
  swift_release();
  *(void *)(inited + 192) = v15;
  *(void *)(inited + 200) = 0x6E65676E61746962;
  *(void *)(inited + 208) = 0xE900000000000074;
  swift_allocObject();
  uint64_t v16 = swift_retain();
  uint64_t v17 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v16, v4);
  swift_release();
  *(void *)(inited + 216) = v17;
  *(void *)(inited + 224) = 3176053;
  *(void *)(inited + 232) = 0xE300000000000000;
  if (one-time initialization token for float2 != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v18 = swift_retain();
  uint64_t v19 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v18, v4);
  swift_release();
  *(void *)(inited + 240) = v19;
  *(void *)(inited + 248) = 3241589;
  *(void *)(inited + 256) = 0xE300000000000000;
  swift_allocObject();
  uint64_t v20 = swift_retain();
  uint64_t v21 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v20, v4);
  swift_release();
  *(void *)(inited + 264) = v21;
  *(void *)(inited + 272) = 0xD000000000000010;
  *(void *)(inited + 280) = 0x800000025C426C70;
  swift_allocObject();
  uint64_t v22 = swift_retain();
  uint64_t v23 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v22, v4);
  swift_release();
  *(void *)(inited + 288) = v23;
  *(void *)(inited + 296) = 0xD000000000000019;
  *(void *)(inited + 304) = 0x800000025C426C90;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_25C4195A0;
  *(void *)(v24 + 32) = static MetalDataType.float3;
  unint64_t v53 = v24;
  specialized Array._endMutation()();
  uint64_t v25 = one-time initialization token for void;
  swift_retain();
  if (v25 != -1) {
    swift_once();
  }
  unint64_t v26 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  unint64_t v27 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v26, v53);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 312) = v27;
  *(void *)(inited + 320) = 0xD000000000000019;
  *(void *)(inited + 328) = 0x800000025C426CB0;
  Swift::String v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_25C4195A0;
  *(void *)(v28 + 32) = static MetalDataType.float3;
  unint64_t v54 = v28;
  specialized Array._endMutation()();
  unint64_t v29 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v30 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v29, v54);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 336) = v30;
  *(void *)(inited + 344) = 0x6F6C6F635F746573;
  *(void *)(inited + 352) = 0xE900000000000072;
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_25C4195A0;
  *(void *)(v31 + 32) = static MetalDataType.float4;
  uint64_t v55 = v31;
  specialized Array._endMutation()();
  uint64_t v32 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v33 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v32, v55);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 360) = v33;
  *(void *)(inited + 368) = 0x6D726F6E5F746573;
  *(void *)(inited + 376) = 0xEA00000000006C61;
  Swift::String v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_25C4195A0;
  *(void *)(v34 + 32) = static MetalDataType.float3;
  uint64_t v56 = v34;
  specialized Array._endMutation()();
  uint64_t v35 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v36 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v35, v56);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 384) = v36;
  strcpy((char *)(inited + 392), "set_bitangent");
  *(_WORD *)(inited + 406) = -4864;
  Swift::String v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_25C4195A0;
  *(void *)(v37 + 32) = static MetalDataType.float3;
  uint64_t v57 = v37;
  specialized Array._endMutation()();
  Swift::String v38 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v39 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v38, v57);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 408) = v39;
  *(void *)(inited + 416) = 0x3076755F746573;
  *(void *)(inited + 424) = 0xE700000000000000;
  Swift::String v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_25C4195A0;
  *(void *)(v40 + 32) = static MetalDataType.float2;
  uint64_t v58 = v40;
  specialized Array._endMutation()();
  uint64_t v41 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  Swift::String v42 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v41, v58);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 432) = v42;
  *(void *)(inited + 440) = 0x3176755F746573;
  *(void *)(inited + 448) = 0xE700000000000000;
  Swift::String v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_25C4195A0;
  *(void *)(v43 + 32) = static MetalDataType.float2;
  uint64_t v59 = v43;
  specialized Array._endMutation()();
  uint64_t v44 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v45 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v44, v59);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 456) = v45;
  *(void *)(inited + 464) = 0xD000000000000014;
  *(void *)(inited + 472) = 0x800000025C426CD0;
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_25C4195A0;
  *(void *)(v46 + 32) = static MetalDataType.float4;
  uint64_t v60 = v46;
  specialized Array._endMutation()();
  id v47 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  long long v48 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v47, v60);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 480) = v48;
  id v49 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySS5label_11ShaderGraph13MetalDataTypeC4typetGG_AI0jK8PropertyVs5NeverOTg508_sSiSS11g7Graph13ijk7CAA0dE8m48VIgyggo_Si6offset_SS5label_AC4typet7elementtAEs5n98OIegnrzr_TR04_s11a7Graph13cde69C6StructC4note8typeName10fieldSpecsAESSSg_S2S5label_AC0H0tdtcfcAA0dT32F19VSi_SSAJ_AcKttXEfU_Tf3nnnpf_nTf1cn_n(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String, type: MetalDataType));
  swift_arrayDestroy();
  type metadata accessor for MetalDataType.Struct();
  uint64_t v50 = swift_allocObject();
  uint64_t v51 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000027, 0x800000025C426C00, 0x100000000, 0x100000000, 0, v49, v50);
  uint64_t result = swift_release();
  static MetalDataType.re.geometry_modifier.geometry = v51;
  return result;
}

uint64_t static MetalDataType.re.surface.geometry.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for geometry);
}

uint64_t one-time initialization function for surface_properties()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String, type: MetalDataType)>);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 0x6C6F635F65736162;
  *(_OWORD *)(inited + 16) = xmmword_25C41D590;
  *(void *)(inited + 40) = 0xEA0000000000726FLL;
  if (one-time initialization token for half3 != -1) {
    swift_once();
  }
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 56) = 0x6C616D726F6ELL;
  *(void *)(inited + 64) = 0xE600000000000000;
  if (one-time initialization token for float3 != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v3 = swift_retain();
  unint64_t v4 = MEMORY[0x263F8EE78];
  uint64_t v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v3, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(inited + 72) = v5;
  strcpy((char *)(inited + 80), "emissive_color");
  *(unsigned char *)(inited + 95) = -18;
  swift_allocObject();
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, v4);
  swift_release();
  *(void *)(inited + 96) = v7;
  *(void *)(inited + 104) = 0x73656E6867756F72;
  *(void *)(inited + 112) = 0xE900000000000073;
  if (one-time initialization token for half != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v8 = swift_retain();
  unint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v10 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(inited + 120) = v10;
  *(void *)(inited + 128) = 0x63696C6C6174656DLL;
  *(void *)(inited + 136) = 0xE800000000000000;
  swift_allocObject();
  uint64_t v11 = swift_retain();
  uint64_t v12 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v11, v9);
  swift_release();
  *(void *)(inited + 144) = v12;
  *(void *)(inited + 152) = 0xD000000000000011;
  *(void *)(inited + 160) = 0x800000025C426E60;
  swift_allocObject();
  uint64_t v13 = swift_retain();
  uint64_t v14 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v13, v9);
  swift_release();
  *(void *)(inited + 168) = v14;
  *(void *)(inited + 176) = 0x72616C7563657073;
  *(void *)(inited + 184) = 0xE800000000000000;
  swift_allocObject();
  uint64_t v15 = swift_retain();
  uint64_t v16 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v15, v9);
  swift_release();
  *(void *)(inited + 192) = v16;
  *(void *)(inited + 200) = 0x7974696361706FLL;
  *(void *)(inited + 208) = 0xE700000000000000;
  swift_allocObject();
  uint64_t v17 = swift_retain();
  uint64_t v18 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v17, v9);
  swift_release();
  *(void *)(inited + 216) = v18;
  *(void *)(inited + 224) = 0x616F637261656C63;
  *(void *)(inited + 232) = 0xE900000000000074;
  swift_allocObject();
  uint64_t v19 = swift_retain();
  uint64_t v20 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v19, v9);
  swift_release();
  *(void *)(inited + 240) = v20;
  *(void *)(inited + 248) = 0xD000000000000013;
  *(void *)(inited + 256) = 0x800000025C426E80;
  swift_allocObject();
  uint64_t v21 = swift_retain();
  uint64_t v22 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v21, v9);
  swift_release();
  *(void *)(inited + 264) = v22;
  *(void *)(inited + 272) = 0xD000000000000010;
  *(void *)(inited + 280) = 0x800000025C426EA0;
  uint64_t v23 = static MetalDataType.half3;
  swift_allocObject();
  uint64_t v24 = swift_retain();
  uint64_t v25 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v24, v9);
  swift_release();
  *(void *)(inited + 288) = v25;
  strcpy((char *)(inited + 296), "set_base_color");
  *(unsigned char *)(inited + 311) = -18;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_25C4195A0;
  *(void *)(v26 + 32) = v23;
  unint64_t v64 = v26;
  specialized Array._endMutation()();
  uint64_t v27 = one-time initialization token for void;
  swift_retain();
  if (v27 != -1) {
    swift_once();
  }
  uint64_t v28 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v29 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v28, v64);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 312) = v29;
  *(void *)(inited + 320) = 0x6D726F6E5F746573;
  *(void *)(inited + 328) = 0xEA00000000006C61;
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_25C4195A0;
  *(void *)(v30 + 32) = static MetalDataType.float3;
  unint64_t v65 = v30;
  specialized Array._endMutation()();
  uint64_t v31 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v32 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v31, v65);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 336) = v32;
  *(void *)(inited + 344) = 0xD000000000000012;
  *(void *)(inited + 352) = 0x800000025C426EF0;
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_25C4195A0;
  *(void *)(v33 + 32) = static MetalDataType.half3;
  unint64_t v66 = v33;
  specialized Array._endMutation()();
  uint64_t v34 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v35 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v34, v66);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 360) = v35;
  strcpy((char *)(inited + 368), "set_roughness");
  *(_WORD *)(inited + 382) = -4864;
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_25C4195A0;
  *(void *)(v36 + 32) = static MetalDataType.half;
  unint64_t v67 = v36;
  specialized Array._endMutation()();
  uint64_t v37 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v38 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v37, v67);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 384) = v38;
  strcpy((char *)(inited + 392), "set_metallic");
  *(unsigned char *)(inited + 405) = 0;
  *(_WORD *)(inited + 406) = -5120;
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_25C4195A0;
  *(void *)(v39 + 32) = static MetalDataType.half;
  unint64_t v68 = v39;
  specialized Array._endMutation()();
  uint64_t v40 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v41 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v40, v68);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 408) = v41;
  *(void *)(inited + 416) = 0xD000000000000015;
  *(void *)(inited + 424) = 0x800000025C426F10;
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_25C4195A0;
  *(void *)(v42 + 32) = static MetalDataType.half;
  unint64_t v69 = v42;
  specialized Array._endMutation()();
  uint64_t v43 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v44 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v43, v69);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 432) = v44;
  strcpy((char *)(inited + 440), "set_specular");
  *(unsigned char *)(inited + 453) = 0;
  *(_WORD *)(inited + 454) = -5120;
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_25C4195A0;
  *(void *)(v45 + 32) = static MetalDataType.half;
  unint64_t v70 = v45;
  specialized Array._endMutation()();
  uint64_t v46 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v47 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v46, v70);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 456) = v47;
  *(void *)(inited + 464) = 0x6361706F5F746573;
  *(void *)(inited + 472) = 0xEB00000000797469;
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_25C4195A0;
  *(void *)(v48 + 32) = static MetalDataType.half;
  unint64_t v71 = v48;
  specialized Array._endMutation()();
  uint64_t v49 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v50 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v49, v71);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 480) = v50;
  strcpy((char *)(inited + 488), "set_clearcoat");
  *(_WORD *)(inited + 502) = -4864;
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_25C4195A0;
  *(void *)(v51 + 32) = static MetalDataType.half;
  unint64_t v72 = v51;
  specialized Array._endMutation()();
  uint64_t v52 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v53 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v52, v72);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 504) = v53;
  *(void *)(inited + 512) = 0xD000000000000017;
  *(void *)(inited + 520) = 0x800000025C426F30;
  uint64_t v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_25C4195A0;
  *(void *)(v54 + 32) = static MetalDataType.half;
  unint64_t v73 = v54;
  specialized Array._endMutation()();
  uint64_t v55 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v56 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v55, v73);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 528) = v56;
  *(void *)(inited + 536) = 0xD000000000000014;
  *(void *)(inited + 544) = 0x800000025C426F50;
  uint64_t v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = xmmword_25C4195A0;
  *(void *)(v57 + 32) = static MetalDataType.half3;
  unint64_t v74 = v57;
  specialized Array._endMutation()();
  uint64_t v58 = static MetalDataType.void;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v59 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v58, v74);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(void *)(inited + 552) = v59;
  uint64_t v60 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySS5label_11ShaderGraph13MetalDataTypeC4typetGG_AI0jK8PropertyVs5NeverOTg508_sSiSS11g7Graph13ijk7CAA0dE8m48VIgyggo_Si6offset_SS5label_AC4typet7elementtAEs5n98OIegnrzr_TR04_s11a7Graph13cde69C6StructC4note8typeName10fieldSpecsAESSSg_S2S5label_AC0H0tdtcfcAA0dT32F19VSi_SSAJ_AcKttXEfU_Tf3nnnpf_nTf1cn_n(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String, type: MetalDataType));
  swift_arrayDestroy();
  type metadata accessor for MetalDataType.Struct();
  uint64_t v61 = swift_allocObject();
  uint64_t v62 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000027, 0x800000025C426EC0, 0x100000000, 0x100000000, 0, v60, v61);
  uint64_t result = swift_release();
  static MetalDataType.re.surface.surface_properties = v62;
  return result;
}

uint64_t static MetalDataType.re.surface.surface_properties.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for surface_properties);
}

uint64_t static MetalDataType.re.geometry_modifier.uniforms.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uniforms);
}

uint64_t static MetalDataType.re.geometry_modifier.geometry.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for geometry);
}

uint64_t one-time initialization function for textures()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String, type: MetalDataType)>);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 0x6C6F635F65736162;
  *(_OWORD *)(inited + 16) = xmmword_25C41D5C0;
  *(void *)(inited + 40) = 0xEA0000000000726FLL;
  if (one-time initialization token for texture2d_half != -1) {
    swift_once();
  }
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  uint64_t v1 = swift_retain();
  unint64_t v2 = MEMORY[0x263F8EE78];
  uint64_t v3 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(inited + 48) = v3;
  *(void *)(inited + 56) = 0x7974696361706FLL;
  *(void *)(inited + 64) = 0xE700000000000000;
  swift_allocObject();
  uint64_t v4 = swift_retain();
  uint64_t v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v4, v2);
  swift_release();
  *(void *)(inited + 72) = v5;
  *(void *)(inited + 80) = 0x6C616D726F6ELL;
  *(void *)(inited + 88) = 0xE600000000000000;
  swift_allocObject();
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, v2);
  swift_release();
  *(void *)(inited + 96) = v7;
  strcpy((char *)(inited + 104), "emissive_color");
  *(unsigned char *)(inited + 119) = -18;
  swift_allocObject();
  uint64_t v8 = swift_retain();
  uint64_t v9 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, v2);
  swift_release();
  *(void *)(inited + 120) = v9;
  *(void *)(inited + 128) = 0x73656E6867756F72;
  *(void *)(inited + 136) = 0xE900000000000073;
  swift_allocObject();
  uint64_t v10 = swift_retain();
  uint64_t v11 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v10, v2);
  swift_release();
  *(void *)(inited + 144) = v11;
  *(void *)(inited + 152) = 0x63696C6C6174656DLL;
  *(void *)(inited + 160) = 0xE800000000000000;
  swift_allocObject();
  uint64_t v12 = swift_retain();
  uint64_t v13 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v12, v2);
  swift_release();
  *(void *)(inited + 168) = v13;
  *(void *)(inited + 176) = 0xD000000000000011;
  *(void *)(inited + 184) = 0x800000025C426E60;
  swift_allocObject();
  uint64_t v14 = swift_retain();
  uint64_t v15 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v14, v2);
  swift_release();
  *(void *)(inited + 192) = v15;
  *(void *)(inited + 200) = 0x72616C7563657073;
  *(void *)(inited + 208) = 0xE800000000000000;
  swift_allocObject();
  uint64_t v16 = swift_retain();
  uint64_t v17 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v16, v2);
  swift_release();
  *(void *)(inited + 216) = v17;
  *(void *)(inited + 224) = 0x616F637261656C63;
  *(void *)(inited + 232) = 0xE900000000000074;
  swift_allocObject();
  uint64_t v18 = swift_retain();
  uint64_t v19 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v18, v2);
  swift_release();
  *(void *)(inited + 240) = v19;
  *(void *)(inited + 248) = 0xD000000000000013;
  *(void *)(inited + 256) = 0x800000025C426E80;
  swift_allocObject();
  uint64_t v20 = swift_retain();
  uint64_t v21 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v20, v2);
  swift_release();
  *(void *)(inited + 264) = v21;
  *(void *)(inited + 272) = 0xD000000000000010;
  *(void *)(inited + 280) = 0x800000025C426EA0;
  swift_allocObject();
  uint64_t v22 = swift_retain();
  uint64_t v23 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v22, v2);
  swift_release();
  *(void *)(inited + 288) = v23;
  *(void *)(inited + 296) = 0x6D6F74737563;
  *(void *)(inited + 304) = 0xE600000000000000;
  swift_allocObject();
  uint64_t v24 = swift_retain();
  uint64_t v25 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v24, v2);
  swift_release();
  *(void *)(inited + 312) = v25;
  uint64_t v26 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySS5label_11ShaderGraph13MetalDataTypeC4typetGG_AI0jK8PropertyVs5NeverOTg508_sSiSS11g7Graph13ijk7CAA0dE8m48VIgyggo_Si6offset_SS5label_AC4typet7elementtAEs5n98OIegnrzr_TR04_s11a7Graph13cde69C6StructC4note8typeName10fieldSpecsAESSSg_S2S5label_AC0H0tdtcfcAA0dT32F19VSi_SSAJ_AcKttXEfU_Tf3nnnpf_nTf1cn_n(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String, type: MetalDataType));
  swift_arrayDestroy();
  type metadata accessor for MetalDataType.Struct();
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD00000000000001DLL, 0x800000025C426E40, 0x100000000, 0x100000000, 0, v26, v27);
  uint64_t result = swift_release();
  static MetalDataType.re.texture.textures = v28;
  return result;
}

uint64_t static MetalDataType.re.texture.textures.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for textures);
}

uint64_t one-time initialization function for material_parameters()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String, type: MetalDataType)>);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 0x6C6F635F65736162;
  *(_OWORD *)(inited + 16) = xmmword_25C41BFA0;
  *(void *)(inited + 40) = 0xEF746E69745F726FLL;
  if (one-time initialization token for float3 != -1) {
    swift_once();
  }
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(inited + 48) = v2;
  strcpy((char *)(inited + 56), "opacity_scale");
  *(_WORD *)(inited + 70) = -4864;
  if (one-time initialization token for float != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v3 = swift_retain();
  unint64_t v4 = MEMORY[0x263F8EE78];
  uint64_t v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v3, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(inited + 72) = v5;
  *(void *)(inited + 80) = 0xD000000000000011;
  *(void *)(inited + 88) = 0x800000025C426E00;
  swift_allocObject();
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, v4);
  swift_release();
  *(void *)(inited + 96) = v7;
  *(void *)(inited + 104) = 0x73656E6867756F72;
  *(void *)(inited + 112) = 0xEF656C6163735F73;
  swift_allocObject();
  uint64_t v8 = swift_retain();
  uint64_t v9 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, v4);
  swift_release();
  *(void *)(inited + 120) = v9;
  strcpy((char *)(inited + 128), "metallic_scale");
  *(unsigned char *)(inited + 143) = -18;
  swift_allocObject();
  uint64_t v10 = swift_retain();
  uint64_t v11 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v10, v4);
  swift_release();
  *(void *)(inited + 144) = v11;
  strcpy((char *)(inited + 152), "specular_scale");
  *(unsigned char *)(inited + 167) = -18;
  swift_allocObject();
  uint64_t v12 = swift_retain();
  uint64_t v13 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v12, v4);
  swift_release();
  *(void *)(inited + 168) = v13;
  strcpy((char *)(inited + 176), "emissive_color");
  *(unsigned char *)(inited + 191) = -18;
  swift_allocObject();
  uint64_t v14 = swift_retain();
  uint64_t v15 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v14, v4);
  swift_release();
  *(void *)(inited + 192) = v15;
  *(void *)(inited + 200) = 0x616F637261656C63;
  *(void *)(inited + 208) = 0xEF656C6163735F74;
  swift_allocObject();
  uint64_t v16 = swift_retain();
  uint64_t v17 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v16, v4);
  swift_release();
  *(void *)(inited + 216) = v17;
  *(void *)(inited + 224) = 0xD000000000000019;
  *(void *)(inited + 232) = 0x800000025C426E20;
  swift_allocObject();
  uint64_t v18 = swift_retain();
  uint64_t v19 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v18, v4);
  swift_release();
  *(void *)(inited + 240) = v19;
  uint64_t v20 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySS5label_11ShaderGraph13MetalDataTypeC4typetGG_AI0jK8PropertyVs5NeverOTg508_sSiSS11g7Graph13ijk7CAA0dE8m48VIgyggo_Si6offset_SS5label_AC4typet7elementtAEs5n98OIegnrzr_TR04_s11a7Graph13cde69C6StructC4note8typeName10fieldSpecsAESSSg_S2S5label_AC0H0tdtcfcAA0dT32F19VSi_SSAJ_AcKttXEfU_Tf3nnnpf_nTf1cn_n(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String, type: MetalDataType));
  swift_arrayDestroy();
  type metadata accessor for MetalDataType.Struct();
  uint64_t v21 = swift_allocObject();
  uint64_t v22 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000029, 0x800000025C426DD0, 0x100000000, 0x100000000, 0, v20, v21);
  uint64_t result = swift_release();
  static MetalDataType.re.material.material_parameters = v22;
  return result;
}

uint64_t static MetalDataType.re.material.material_parameters.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for material_parameters);
}

uint64_t one-time initialization function for CameraView()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (MetalDataType, Any?)?)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C41B5A0;
  *(void *)(inited + 32) = 0x6F6E6F4D6BLL;
  *(void *)(inited + 40) = 0xE500000000000000;
  if (one-time initialization token for uint32 != -1) {
    swift_once();
  }
  uint64_t v1 = static MetalDataType.uint32;
  uint64_t v2 = MEMORY[0x263F8D6C8];
  *(void *)(inited + 48) = static MetalDataType.uint32;
  *(void *)(inited + 56) = 0;
  *(void *)(inited + 80) = v2;
  *(void *)(inited + 88) = 0x7466654C6BLL;
  *(void *)(inited + 96) = 0xE500000000000000;
  *(void *)(inited + 104) = v1;
  *(void *)(inited + 112) = 1;
  *(void *)(inited + 136) = v2;
  *(void *)(inited + 144) = 0x74686769526BLL;
  *(void *)(inited + 152) = 0xE600000000000000;
  *(void *)(inited + 160) = v1;
  *(void *)(inited + 192) = v2;
  *(void *)(inited + 168) = 2;
  swift_retain_n();
  unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for MetalDataType.Enum();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 72) = v3;
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J8VAKXEfU_Tf1cn_n(v5);
  unint64_t v7 = specialized Sequence<>.max()(v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J9VAKXEfU0_Tf1cn_n(v3);
  swift_bridgeObjectRelease();
  unint64_t v9 = specialized Sequence<>.max()(v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000016, 0x800000025C426B70, v7 | ((HIDWORD(v7) & 1) << 32), v9 | ((HIDWORD(v9) & 1) << 32), 0, MEMORY[0x263F8EE78], v4);
  uint64_t result = swift_release();
  static MetalDataType.re.CameraView = v10;
  return result;
}

uint64_t *MetalDataType.re.CameraView.unsafeMutableAddressor()
{
  if (one-time initialization token for CameraView != -1) {
    swift_once();
  }
  return &static MetalDataType.re.CameraView;
}

uint64_t static MetalDataType.re.CameraView.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for CameraView);
}

uint64_t one-time initialization function for EnvironmentRadianceResult()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_25C418EF0;
  if (one-time initialization token for half3 != -1) {
    swift_once();
  }
  uint64_t v1 = static MetalDataType.half3;
  *(void *)(v0 + 32) = 0x5265737566666964;
  *(void *)(v0 + 40) = 0xEF65636E61696461;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 48) = v1;
  *(void *)(v0 + 56) = v2;
  *(unsigned char *)(v0 + 64) = 1;
  *(_OWORD *)(v0 + 72) = xmmword_25C41B760;
  *(void *)(v0 + 88) = 0x800000025C425240;
  *(void *)(v0 + 96) = v1;
  *(void *)(v0 + 104) = v2;
  *(unsigned char *)(v0 + 112) = 1;
  *(void *)(v0 + 120) = 1;
  type metadata accessor for MetalDataType.Struct();
  uint64_t v3 = swift_allocObject();
  swift_retain_n();
  uint64_t v4 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000019, 0x800000025C426FB0, 0x100000000, 0x100000000, 0, v0, v3);
  uint64_t result = swift_release();
  static MetalDataType.re.EnvironmentRadianceResult = v4;
  return result;
}

uint64_t static MetalDataType.re.EnvironmentRadianceResult.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for EnvironmentRadianceResult);
}

uint64_t one-time initialization function for HoverData()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_25C41BFB0;
  if (one-time initialization token for float != -1) {
    swift_once();
  }
  uint64_t v1 = static MetalDataType.float;
  *(void *)(v0 + 32) = 0x6E695F7265766F68;
  *(void *)(v0 + 40) = 0xEF797469736E6574;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 48) = v1;
  *(void *)(v0 + 56) = v2;
  *(unsigned char *)(v0 + 64) = 1;
  *(void *)(v0 + 72) = 0;
  uint64_t v3 = one-time initialization token for float3;
  swift_retain();
  if (v3 != -1)
  {
    swift_once();
    uint64_t v1 = static MetalDataType.float;
  }
  uint64_t v4 = static MetalDataType.float3;
  strcpy((char *)(v0 + 80), "hover_position");
  *(unsigned char *)(v0 + 95) = -18;
  *(void *)(v0 + 96) = v4;
  *(void *)(v0 + 104) = v2;
  *(unsigned char *)(v0 + 112) = 1;
  *(_OWORD *)(v0 + 120) = xmmword_25C41D5D0;
  *(void *)(v0 + 136) = 0x800000025C427000;
  *(void *)(v0 + 144) = v1;
  *(void *)(v0 + 152) = v2;
  *(unsigned char *)(v0 + 160) = 1;
  *(void *)(v0 + 168) = 2;
  uint64_t v5 = one-time initialization token for BOOL;
  swift_retain();
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = static MetalDataType.BOOL;
  *(void *)(v0 + 176) = 0x76697463615F7369;
  *(void *)(v0 + 184) = 0xE900000000000065;
  *(void *)(v0 + 192) = v6;
  *(void *)(v0 + 200) = v2;
  *(unsigned char *)(v0 + 208) = 1;
  *(void *)(v0 + 216) = 4;
  type metadata accessor for MetalDataType.Struct();
  uint64_t v7 = swift_allocObject();
  swift_retain();
  uint64_t v8 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000020, 0x800000025C426FD0, 0x100000000, 0x100000000, 0, v0, v7);
  uint64_t result = swift_release();
  static MetalDataType.re.HoverData = v8;
  return result;
}

uint64_t static MetalDataType.re.HoverData.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for HoverData);
}

uint64_t one-time initialization function for surface_parameters_private()
{
  if (one-time initialization token for surface_parameters != -1) {
    swift_once();
  }
  uint64_t v1 = static MetalDataType.re.surface_parameters;
  swift_beginAccess();
  uint64_t v2 = *(void **)(v1 + 16);
  uint64_t v3 = one-time initialization token for uniforms_private;
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  uint64_t v4 = swift_retain();
  uint64_t v5 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v4, MEMORY[0x263F8EE78]);
  swift_release();
  if (one-time initialization token for uniforms_private != -1) {
    swift_once();
  }
  swift_allocObject();
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v6, MEMORY[0x263F8EE78]);
  swift_release();
  if (one-time initialization token for void != -1) {
    swift_once();
  }
  type metadata accessor for MetalDataType.Pointer();
  swift_allocObject();
  uint64_t v8 = (void *)swift_retain();
  unint64_t v9 = specialized MetalDataType.Pointer.init(to:isConst:addressSpace:)(v8, 0, 0);
  swift_release();
  swift_allocObject();
  unint64_t v10 = MEMORY[0x263F8EE78];
  uint64_t v11 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v9, MEMORY[0x263F8EE78]);
  swift_release();
  int64_t v12 = v2[2];
  uint64_t v13 = (void *)(v12 + 3);
  if (__OFADD__(v12, 3))
  {
    __break(1u);
LABEL_24:
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v0 > 1), v9, 1, v13);
    unint64_t v0 = v13[3];
    unint64_t v15 = v0 >> 1;
    goto LABEL_18;
  }
  uint64_t v26 = v11;
  uint64_t v11 = v7;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && (v0 = v2[3], unint64_t v15 = v0 >> 1, (uint64_t)(v0 >> 1) >= (uint64_t)v13))
  {
    uint64_t v7 = v10;
    uint64_t v13 = v2;
  }
  else
  {
    uint64_t v7 = v10;
    if (v12 <= (uint64_t)v13) {
      int64_t v16 = v12 + 3;
    }
    else {
      int64_t v16 = v12;
    }
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v16, 1, v2);
    unint64_t v0 = v13[3];
    unint64_t v15 = v0 >> 1;
  }
  unint64_t v10 = v13[2];
  unint64_t v9 = v10 + 1;
  swift_retain();
  if (v15 <= v10) {
    goto LABEL_24;
  }
LABEL_18:
  v13[2] = v9;
  uint64_t v17 = &v13[6 * v10];
  v17[4] = 0xD000000000000010;
  void v17[5] = 0x800000025C427020;
  v17[6] = v5;
  void v17[7] = v7;
  *((unsigned char *)v17 + 64) = 1;
  v17[9] = 0;
  int64_t v18 = v10 + 2;
  swift_retain();
  if (v15 <= v9) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v0 > 1), v18, 1, v13);
  }
  v13[2] = v18;
  uint64_t v19 = &v13[6 * v9];
  v19[4] = 0xD000000000000010;
  v19[5] = 0x800000025C427040;
  v19[6] = v11;
  uint64_t v19[7] = v7;
  *((unsigned char *)v19 + 64) = 1;
  v19[9] = 0;
  unint64_t v20 = v13[2];
  unint64_t v21 = v13[3];
  swift_retain();
  if (v20 >= v21 >> 1) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v20 + 1, 1, v13);
  }
  v13[2] = v20 + 1;
  uint64_t v22 = (char *)&v13[6 * v20];
  strcpy(v22 + 32, "user_constants");
  v22[47] = -18;
  *((void *)v22 + 6) = v26;
  *((void *)v22 + 7) = v7;
  v22[64] = 1;
  *((void *)v22 + 9) = 0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  type metadata accessor for MetalDataType.Struct();
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000026, 0x800000025C427060, 0x100000000, 0x100000000, 0, (uint64_t)v13, v23);
  uint64_t result = swift_release();
  static MetalDataType.re.surface_parameters_private = v24;
  return result;
}

uint64_t *MetalDataType.re.surface_private.uniforms_private.unsafeMutableAddressor()
{
  if (one-time initialization token for uniforms_private != -1) {
    swift_once();
  }
  return &static MetalDataType.re.surface_private.uniforms_private;
}

uint64_t *MetalDataType.re.geometry_modifier_private.uniforms_private.unsafeMutableAddressor()
{
  if (one-time initialization token for uniforms_private != -1) {
    swift_once();
  }
  return &static MetalDataType.re.geometry_modifier_private.uniforms_private;
}

uint64_t static MetalDataType.re.surface_parameters_private.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for surface_parameters_private);
}

uint64_t one-time initialization function for uniforms_private()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_25C418EE0;
  if (one-time initialization token for float3 != -1) {
    swift_once();
  }
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  uint64_t v1 = swift_retain();
  uint64_t v2 = MEMORY[0x263F8EE78];
  uint64_t v3 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(v0 + 32) = 0xD000000000000017;
  *(void *)(v0 + 40) = 0x800000025C426B50;
  *(void *)(v0 + 48) = v3;
  *(void *)(v0 + 56) = v2;
  *(unsigned char *)(v0 + 64) = 1;
  *(void *)(v0 + 72) = 0;
  type metadata accessor for MetalDataType.Struct();
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD00000000000002DLL, 0x800000025C426B20, 0x100000000, 0x100000000, 0, v0, v4);
  uint64_t result = swift_release();
  static MetalDataType.re.surface_private.uniforms_private = v5;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_25C418EE0;
  if (one-time initialization token for float4x4 != -1) {
    swift_once();
  }
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  uint64_t v1 = swift_retain();
  uint64_t v2 = MEMORY[0x263F8EE78];
  uint64_t v3 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(v0 + 32) = 0xD000000000000011;
  *(void *)(v0 + 40) = 0x800000025C426B00;
  *(void *)(v0 + 48) = v3;
  *(void *)(v0 + 56) = v2;
  *(unsigned char *)(v0 + 64) = 1;
  *(void *)(v0 + 72) = 0;
  type metadata accessor for MetalDataType.Struct();
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000037, 0x800000025C426AC0, 0x100000000, 0x100000000, 0, v0, v4);
  uint64_t result = swift_release();
  static MetalDataType.re.geometry_modifier_private.uniforms_private = v5;
  return result;
}

uint64_t static MetalDataType.re.surface_private.uniforms_private.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uniforms_private);
}

uint64_t one-time initialization function for geometry_private()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_25C418EE0;
  if (one-time initialization token for float3 != -1) {
    swift_once();
  }
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  uint64_t v1 = swift_retain();
  uint64_t v2 = MEMORY[0x263F8EE78];
  uint64_t v3 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x263F8EE78]);
  swift_release();
  strcpy((char *)(v0 + 32), "crws_position");
  *(_WORD *)(v0 + 46) = -4864;
  *(void *)(v0 + 48) = v3;
  *(void *)(v0 + 56) = v2;
  *(unsigned char *)(v0 + 64) = 1;
  *(void *)(v0 + 72) = 0;
  type metadata accessor for MetalDataType.Struct();
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD00000000000002DLL, 0x800000025C426A90, 0x100000000, 0x100000000, 0, v0, v4);
  uint64_t result = swift_release();
  static MetalDataType.re.surface_private.geometry_private = v5;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_25C418EE0;
  if (one-time initialization token for CameraView != -1) {
    swift_once();
  }
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  uint64_t v1 = swift_retain();
  uint64_t v2 = MEMORY[0x263F8EE78];
  uint64_t v3 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v1, MEMORY[0x263F8EE78]);
  swift_release();
  *(void *)(v0 + 32) = 0xD000000000000011;
  *(void *)(v0 + 40) = 0x800000025C426A70;
  *(void *)(v0 + 48) = v3;
  *(void *)(v0 + 56) = v2;
  *(unsigned char *)(v0 + 64) = 1;
  *(void *)(v0 + 72) = 0;
  type metadata accessor for MetalDataType.Struct();
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000037, 0x800000025C426A30, 0x100000000, 0x100000000, 0, v0, v4);
  uint64_t result = swift_release();
  static MetalDataType.re.geometry_modifier_private.geometry_private = v5;
  return result;
}

uint64_t *MetalDataType.re.surface_private.geometry_private.unsafeMutableAddressor()
{
  if (one-time initialization token for geometry_private != -1) {
    swift_once();
  }
  return &static MetalDataType.re.surface_private.geometry_private;
}

uint64_t static MetalDataType.re.surface_private.geometry_private.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for geometry_private);
}

uint64_t one-time initialization function for geometry_parameters_private()
{
  if (one-time initialization token for geometry_parameters != -1) {
    swift_once();
  }
  uint64_t v2 = static MetalDataType.re.geometry_parameters;
  swift_beginAccess();
  uint64_t v3 = *(void **)(v2 + 16);
  uint64_t v4 = one-time initialization token for uniforms_private;
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  type metadata accessor for MetalDataType.Function();
  swift_allocObject();
  uint64_t v5 = swift_retain();
  uint64_t v6 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v5, MEMORY[0x263F8EE78]);
  swift_release();
  if (one-time initialization token for void != -1) {
    swift_once();
  }
  type metadata accessor for MetalDataType.Pointer();
  swift_allocObject();
  uint64_t v7 = (void *)swift_retain();
  uint64_t v8 = specialized MetalDataType.Pointer.init(to:isConst:addressSpace:)(v7, 0, 0);
  swift_release();
  swift_allocObject();
  uint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v10 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(v8, MEMORY[0x263F8EE78]);
  swift_release();
  uint64_t v11 = (void *)v3[2];
  int64_t v12 = (int64_t)v11 + 2;
  if (__OFADD__(v11, 2))
  {
    __break(1u);
LABEL_20:
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v1 > 1), v12, 1, v11);
    unint64_t v1 = v11[3];
    unint64_t v14 = v1 >> 1;
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && (unint64_t v1 = v3[3], v14 = v1 >> 1, (uint64_t)(v1 >> 1) >= v12))
  {
    uint64_t v11 = v3;
  }
  else
  {
    if ((uint64_t)v11 <= v12) {
      int64_t v15 = (int64_t)v11 + 2;
    }
    else {
      int64_t v15 = (int64_t)v11;
    }
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
    unint64_t v1 = v11[3];
    unint64_t v14 = v1 >> 1;
  }
  unint64_t v0 = v11[2];
  int64_t v12 = v0 + 1;
  swift_retain();
  if (v14 <= v0) {
    goto LABEL_20;
  }
LABEL_16:
  v11[2] = v12;
  int64_t v16 = &v11[6 * v0];
  v16[4] = 0xD000000000000010;
  v16[5] = 0x800000025C427020;
  void v16[6] = v6;
  v16[7] = v9;
  *((unsigned char *)v16 + 64) = 1;
  v16[9] = 0;
  int64_t v17 = v0 + 2;
  swift_retain();
  if (v14 <= v12) {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v1 > 1), v17, 1, v11);
  }
  v11[2] = v17;
  int64_t v18 = (char *)&v11[6 * v12];
  strcpy(v18 + 32, "user_constants");
  v18[47] = -18;
  *((void *)v18 + 6) = v10;
  *((void *)v18 + 7) = v9;
  v18[64] = 1;
  *((void *)v18 + 9) = 0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for MetalDataType.Struct();
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, 0xD000000000000027, 0x800000025C427090, 0x100000000, 0x100000000, 0, (uint64_t)v11, v19);
  uint64_t result = swift_release();
  static MetalDataType.re.geometry_parameters_private = v20;
  return result;
}

uint64_t static MetalDataType.re.geometry_parameters_private.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for geometry_parameters_private);
}

uint64_t static MetalDataType.re.geometry_modifier_private.uniforms_private.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for uniforms_private);
}

uint64_t *MetalDataType.re.geometry_modifier_private.geometry_private.unsafeMutableAddressor()
{
  if (one-time initialization token for geometry_private != -1) {
    swift_once();
  }
  return &static MetalDataType.re.geometry_modifier_private.geometry_private;
}

uint64_t static MetalDataType.re.geometry_modifier_private.geometry_private.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for geometry_private);
}

uint64_t one-time initialization function for BlendFactor()
{
  uint64_t result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0x614620646E656C42, 0xEC000000726F7463, 0x636146646E656C42, 0xEB00000000726F74, (uint64_t)&outlined read-only object #0 of one-time initialization function for BlendFactor);
  static MetalDataType.BlendFactor = result;
  return result;
}

uint64_t *MetalDataType.BlendFactor.unsafeMutableAddressor()
{
  if (one-time initialization token for BlendFactor != -1) {
    swift_once();
  }
  return &static MetalDataType.BlendFactor;
}

uint64_t static MetalDataType.BlendFactor.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for BlendFactor);
}

uint64_t one-time initialization function for BlendOperation()
{
  uint64_t result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0x704F20646E656C42, 0xEF6E6F6974617265, 0x65704F646E656C42, 0xEE006E6F69746172, (uint64_t)&outlined read-only object #0 of one-time initialization function for BlendOperation);
  static MetalDataType.BlendOperation = result;
  return result;
}

uint64_t *MetalDataType.BlendOperation.unsafeMutableAddressor()
{
  if (one-time initialization token for BlendOperation != -1) {
    swift_once();
  }
  return &static MetalDataType.BlendOperation;
}

uint64_t static MetalDataType.BlendOperation.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for BlendOperation);
}

uint64_t one-time initialization function for CompareFunction()
{
  uint64_t result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0xD000000000000010, 0x800000025C426A10, 0x46657261706D6F43, 0xEF6E6F6974636E75, (uint64_t)&outlined read-only object #0 of one-time initialization function for CompareFunction);
  static MetalDataType.CompareFunction = result;
  return result;
}

uint64_t *MetalDataType.CompareFunction.unsafeMutableAddressor()
{
  if (one-time initialization token for CompareFunction != -1) {
    swift_once();
  }
  return &static MetalDataType.CompareFunction;
}

uint64_t static MetalDataType.CompareFunction.getter()
{
  return static MetalDataType.int.getter(&one-time initialization token for CompareFunction);
}

ValueMetadata *type metadata accessor for MetalDataType.re()
{
  return &type metadata for MetalDataType.re;
}

ValueMetadata *type metadata accessor for MetalDataType.re.surface()
{
  return &type metadata for MetalDataType.re.surface;
}

ValueMetadata *type metadata accessor for MetalDataType.re.geometry_modifier()
{
  return &type metadata for MetalDataType.re.geometry_modifier;
}

ValueMetadata *type metadata accessor for MetalDataType.re.texture()
{
  return &type metadata for MetalDataType.re.texture;
}

ValueMetadata *type metadata accessor for MetalDataType.re.material()
{
  return &type metadata for MetalDataType.re.material;
}

ValueMetadata *type metadata accessor for MetalDataType.re.surface_private()
{
  return &type metadata for MetalDataType.re.surface_private;
}

ValueMetadata *type metadata accessor for MetalDataType.re.geometry_modifier_private()
{
  return &type metadata for MetalDataType.re.geometry_modifier_private;
}

const char *ShaderGraphNode.paramsInputLabel.unsafeMutableAddressor()
{
  return "$0";
}

void *ShaderGraphNode.customUniformsArgumentName.unsafeMutableAddressor()
{
  return &static ShaderGraphNode.customUniformsArgumentName;
}

void *ShaderGraphNode.customUniformsInputLabel.unsafeMutableAddressor()
{
  return &static ShaderGraphNode.customUniformsInputLabel;
}

void *ShaderGraphNode.surfaceShaderNodeLabel.unsafeMutableAddressor()
{
  return &static ShaderGraphNode.surfaceShaderNodeLabel;
}

unint64_t static ShaderGraphNode.surfaceShaderNodeLabel.getter()
{
  return 0xD000000000000017;
}

void *ShaderGraphNode.geometryModifierNodeLabel.unsafeMutableAddressor()
{
  return &static ShaderGraphNode.geometryModifierNodeLabel;
}

unint64_t static ShaderGraphNode.geometryModifierNodeLabel.getter()
{
  return 0xD000000000000018;
}

uint64_t static ShaderGraphNode.paramsInputLabel.getter()
{
  return 12324;
}

uint64_t static ShaderGraphNode.customUniformsArgumentName.getter()
{
  return 12580;
}

uint64_t static ShaderGraphNode.customUniformsInputLabel.getter()
{
  return 12580;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v8 = MEMORY[0x263F8EE78];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of WeakBox<SGEdge>(v4, (uint64_t)&v7);
      uint64_t v5 = MEMORY[0x261185960](&v7);
      uint64_t v6 = outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v7, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
      if (v5)
      {
        MEMORY[0x261184120](v6);
        if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v4 += 8;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint64_t v14 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      uint64_t v4 = (a1 & 0xC000000000000001) != 0
         ? (char *)MEMORY[0x2611848A0](i - 4, a1)
         : (char *)*(id *)(a1 + 8 * i);
      uint64_t v5 = v4;
      uint64_t v6 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      uint64_t v7 = &v4[OBJC_IVAR___SGInput_edge];
      swift_beginAccess();
      uint64_t v8 = MEMORY[0x261185960](v7);
      if (v8)
      {
        uint64_t v9 = (void *)v8;
        uint64_t v10 = (void *)(v8 + OBJC_IVAR___SGEdge_from);
        swift_beginAccess();
        uint64_t v11 = *v10 + OBJC_IVAR___SGOutput_node;
        swift_beginAccess();
        uint64_t v12 = MEMORY[0x261185960](v11);

        if (v12)
        {
          MEMORY[0x261184120]();
          if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      else
      {
      }
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v14;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGNodeCG_SSs5NeverOTg504_s11d29Graph7SGGraphC6insertyySayAA6F62CGSgKFSSAFcfu_32b446a066102f7f77dfc7f44f189789ecAFSSTf3nnnpk_nTf1cn_nTm(unint64_t a1, uint64_t a2, void *a3)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    if (!v4) {
      return v5;
    }
    uint64_t v17 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0) {
      break;
    }
    uint64_t v7 = 0;
    uint64_t v5 = v17;
    while (v4 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        uint64_t v8 = (char *)MEMORY[0x2611848A0](v7, a1);
      }
      else {
        uint64_t v8 = (char *)*(id *)(a1 + 8 * v7 + 32);
      }
      uint64_t v9 = v8;
      uint64_t v10 = &v8[*a3];
      swift_beginAccess();
      uint64_t v11 = *(void *)v10;
      uint64_t v12 = *((void *)v10 + 1);
      swift_bridgeObjectRetain();

      unint64_t v14 = *(void *)(v17 + 16);
      unint64_t v13 = *(void *)(v17 + 24);
      if (v14 >= v13 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      }
      ++v7;
      *(void *)(v17 + 16) = v14 + 1;
      uint64_t v15 = v17 + 16 * v14;
      *(void *)(v15 + 32) = v11;
      *(void *)(v15 + 40) = v12;
      if (v4 == v7) {
        return v5;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph16DataTypePropertyVGG_AJs5NeverOTg506_sSi11f7Graph16hij34VACIgygo_Si6offset_AC7elementtACs5K173OIegnrzr_TR04_s11a94Graph7SGGraphC24createCustomUniformsType5named18textureAssignmentsAA17SGTypeDescriptionCSS_Sayq26TextureAssignmentVGtKFAA04c2G8E13VSi_AMtXEfU4_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v12 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4;
      long long v11 = *(_OWORD *)(v4 + 1);
      char v6 = *((unsigned char *)v4 + 32);
      unint64_t v8 = *(void *)(v12 + 16);
      unint64_t v7 = *(void *)(v12 + 24);
      swift_bridgeObjectRetain();
      swift_retain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      *(void *)(v12 + 16) = v8 + 1;
      uint64_t v9 = v12 + 48 * v8;
      *(void *)(v9 + 72) = v3;
      v4 += 6;
      *(void *)(v9 + 32) = v5;
      *(_OWORD *)(v9 + 40) = v11;
      *(void *)(v9 + 56) = MEMORY[0x263F8EE78];
      *(unsigned char *)(v9 + 64) = v6;
      ++v3;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  }
  unint64_t v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      unint64_t v7 = &v3[2 * a1];
      uint64_t v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *unint64_t v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t result;

  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  }
  unint64_t v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      unint64_t v7 = &v3[a1];
      uint64_t v8 = v7[4];
      memmove(v7 + 4, v7 + 5, 8 * v6);
      v3[2] = v5;
      *unint64_t v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v5;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v5 < 0 || (v5 & 0x4000000000000000) != 0)
  {
    uint64_t v5 = a2(v5);
    *uint64_t v2 = v5;
  }
  uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
  unint64_t v8 = *(void *)(v7 + 16);
  if (v8 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v9 = v8 - 1;
    uint64_t v10 = v8 - 1 - a1;
    if (v10 >= 0)
    {
      uint64_t v11 = v7 + 8 * a1;
      uint64_t v12 = *(void *)(v11 + 32);
      memmove((void *)(v11 + 32), (const void *)(v11 + 40), 8 * v10);
      *(void *)(v7 + 16) = v9;
      specialized Array._endMutation()();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SGGraph.edgeConnected(toInputNamed:on:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  unint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = (char *)specialized Sequence.first(where:)(v4, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v5) {
    return 0;
  }
  uint64_t v6 = &v5[OBJC_IVAR___SGInput_edge];
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x261185960](v6);

  return v7;
}

void SGGraph.remove(edge:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR___SGEdge_from);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<SGEdge>((uint64_t)v20, (uint64_t)v21);
  uint64_t v5 = (uint64_t *)(v4 + OBJC_IVAR___SGOutput_edges);
  swift_beginAccess();
  Swift::Int v6 = specialized OrderedSet._find(_:)((uint64_t)v21, *v5, v5[1]);
  char v9 = v8;
  if (v8) {
    uint64_t v18 = 0;
  }
  else {
    specialized OrderedSet._removeExistingMember(at:in:)(v6, v7, (uint64_t)&v18);
  }
  char v19 = v9 & 1;
  swift_endAccess();
  outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v18, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
  uint64_t v10 = (unint64_t *)(v2 + OBJC_IVAR___SGGraph_edges);
  swift_beginAccess();
  unint64_t v11 = *v10;
  swift_bridgeObjectRetain();
  specialized Collection<>.firstIndex(of:)(a1, v11);
  unint64_t v13 = v12;
  char v15 = v14;
  swift_bridgeObjectRelease();
  if (v15)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(void *)uint64_t v17 = 0xD000000000000032;
    *(void *)(v17 + 8) = 0x800000025C427100;
    *(unsigned char *)(v17 + 16) = 1;
    swift_willThrow();
  }
  else
  {
    swift_beginAccess();
    int64_t v16 = (void *)specialized Array.remove(at:)(v13, specialized _ArrayBuffer._consumeAndCreateNew());
    swift_endAccess();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SGGraph.insert(_:)(Swift::OpaquePointer_optional a1)
{
  if (!a1.value._rawValue)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v29 = (void *)swift_allocError();
    *(_OWORD *)uint64_t v30 = xmmword_25C41D680;
    *(unsigned char *)(v30 + 16) = 1;
    swift_willThrow();
LABEL_30:
    type metadata accessor for SGError();
    id v34 = v29;
    SGError.__allocating_init(_:)(v29);
    swift_willThrow();

    return;
  }
  uint64_t v2 = v1;
  unint64_t rawValue = (unint64_t)a1.value._rawValue;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGNodeCG_SSs5NeverOTg504_s11d29Graph7SGGraphC6insertyySayAA6F62CGSgKFSSAFcfu_32b446a066102f7f77dfc7f44f189789ecAFSSTf3nnnpk_nTf1cn_nTm(v4, (uint64_t)v81, &OBJC_IVAR___SGNode_name);
  swift_bridgeObjectRelease();
  uint64_t v6 = specialized Set.init<A>(_:)(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV13ReservedNamesOG_SSs5NeverOTg504_s11d84Graph03mapB033_409C205F32E965F544D867255561D769LL_4intoyAA7SGGraphC_AA0B0VztKFSSAA17fgh3V13iJ54Ocfu_33_9a8543e77c82589f922673eb5cf911b0ALSSTf3nnnpk_nTf1cn_n((uint64_t)&outlined read-only object #0 of SGGraph.insert(_:));
  uint64_t v8 = specialized Set.init<A>(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t v9 = specialized Set.union<A>(_:)(v8, v6);
  uint64_t v71 = v2;
  unint64_t v72 = rawValue;
  if (rawValue >> 62) {
    goto LABEL_33;
  }
  uint64_t v10 = *(void *)((rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (uint64_t i = v10; i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v11 = 0;
    unint64_t v12 = rawValue & 0xC000000000000001;
    uint64_t v75 = (char *)(rawValue + 32);
    uint64_t v2 = v9 + 56;
    uint64_t v78 = v9;
    unint64_t v79 = rawValue & 0xC000000000000001;
    while (1)
    {
      unint64_t v13 = v12 ? (char *)MEMORY[0x2611848A0](v11, rawValue) : (char *)*(id *)&v75[8 * v11];
      char v14 = v13;
      BOOL v15 = __OFADD__(v11++, 1);
      if (v15) {
        break;
      }
      if (*(void *)(v9 + 16))
      {
        int64_t v16 = &v13[OBJC_IVAR___SGNode_name];
        uint64_t v18 = *(void *)&v13[OBJC_IVAR___SGNode_name];
        uint64_t v17 = *(void *)&v13[OBJC_IVAR___SGNode_name + 8];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v19 = Hasher._finalize()();
        uint64_t v20 = v9;
        uint64_t v21 = -1 << *(unsigned char *)(v9 + 32);
        unint64_t v22 = v19 & ~v21;
        if ((*(void *)(v2 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22))
        {
          uint64_t v23 = *(void *)(v20 + 48);
          uint64_t v24 = (void *)(v23 + 16 * v22);
          BOOL v25 = *v24 == v18 && v24[1] == v17;
          if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_29:
            swift_bridgeObjectRelease();
            uint64_t v32 = *(void *)v16;
            uint64_t v31 = *((void *)v16 + 1);
            lazy protocol witness table accessor for type APIError and conformance APIError();
            uint64_t v29 = (void *)swift_allocError();
            *(void *)uint64_t v33 = v32;
            *(void *)(v33 + 8) = v31;
            *(unsigned char *)(v33 + 16) = 9;
            swift_bridgeObjectRetain();
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();

            goto LABEL_30;
          }
          uint64_t v26 = ~v21;
          while (1)
          {
            unint64_t v22 = (v22 + 1) & v26;
            if (((*(void *)(v2 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
              break;
            }
            uint64_t v27 = (void *)(v23 + 16 * v22);
            BOOL v28 = *v27 == v18 && v27[1] == v17;
            if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_29;
            }
          }

          swift_bridgeObjectRelease();
          unint64_t rawValue = v72;
          uint64_t v9 = v78;
          unint64_t v12 = v79;
        }
        else
        {

          swift_bridgeObjectRelease();
          unint64_t rawValue = v72;
          uint64_t v9 = v20;
          unint64_t v12 = v79;
        }
      }
      else
      {
      }
      if (v11 == i)
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = v71;
        goto LABEL_35;
      }
    }
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
LABEL_35:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  unint64_t v35 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v35);
  swift_endAccess();
  if (!i)
  {
LABEL_90:
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v73 = rawValue & 0xC000000000000001;
  unint64_t v69 = (char *)(rawValue + 32);
  uint64_t v76 = (uint64_t *)(v2 + OBJC_IVAR___SGGraph_nodeMap);
  uint64_t v36 = (void *)(v2 + OBJC_IVAR___SGGraph_nodeMap + 16);
  swift_bridgeObjectRetain();
  uint64_t v37 = 0;
  unint64_t v70 = v36;
  while (1)
  {
    uint64_t v42 = v73 ? (char *)MEMORY[0x2611848A0](v37, v72) : (char *)*(id *)&v69[8 * v37];
    uint64_t v43 = v42;
    BOOL v15 = __OFADD__(v37, 1);
    uint64_t v44 = v37 + 1;
    if (v15) {
      break;
    }
    uint64_t v80 = v44;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
    uint64_t v46 = *(void *)&v43[OBJC_IVAR___SGNode_name];
    uint64_t v45 = *(void *)&v43[OBJC_IVAR___SGNode_name + 8];
    swift_beginAccess();
    uint64_t v47 = v2;
    uint64_t v49 = *v76;
    uint64_t v48 = (void *)v76[1];
    uint64_t v50 = v48[2];
    if (*v76)
    {
      swift_bridgeObjectRetain();
      unint64_t v74 = v43;
      uint64_t v51 = v43;
      swift_retain();
      swift_retain();
      uint64_t v52 = v45;
      unint64_t v53 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v46, v45, (uint64_t)(v48 + 4), v50, (void *)(v49 + 16), v49 + 32);
      char v55 = v54;
      uint64_t v57 = v56;
      swift_release();
      swift_release();
      if (v55)
      {
        uint64_t v36 = v70;
        uint64_t v2 = v71;
        uint64_t v38 = v52;
        uint64_t v39 = v74;
        goto LABEL_38;
      }
      uint64_t v36 = v70;
      uint64_t v2 = v71;
      uint64_t v39 = v74;
    }
    else
    {
      uint64_t v38 = v45;
      if (!v50) {
        goto LABEL_61;
      }
      BOOL v58 = v48[4] == v46 && v48[5] == v45;
      if (v58 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        unint64_t v53 = 0;
      }
      else
      {
        if (v50 == 1) {
          goto LABEL_61;
        }
        BOOL v64 = v48[6] == v46 && v48[7] == v45;
        if (v64 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          unint64_t v53 = 1;
        }
        else
        {
          if (v50 == 2) {
            goto LABEL_61;
          }
          BOOL v65 = v48[8] == v46 && v48[9] == v45;
          if (v65 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            unint64_t v53 = 2;
          }
          else
          {
            if (v50 == 3) {
              goto LABEL_61;
            }
            if ((v48[10] != v46 || v48[11] != v45) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              unint64_t v66 = v48 + 13;
              uint64_t v67 = 4;
              while (v50 != v67)
              {
                if (*(v66 - 1) == v46 && *v66 == v38)
                {
                  unint64_t v53 = v67;
                  goto LABEL_54;
                }
                unint64_t v53 = v67++;
                v66 += 2;
                if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                  goto LABEL_54;
                }
              }
LABEL_61:
              swift_bridgeObjectRetain();
              uint64_t v39 = v43;
              char v63 = v43;
              uint64_t v57 = 0;
              uint64_t v2 = v47;
LABEL_38:
              id v40 = v39;
              specialized OrderedSet._appendNew(_:in:)(v46, v38, v57);
              id v41 = v40;
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              goto LABEL_39;
            }
            unint64_t v53 = 3;
          }
        }
      }
LABEL_54:
      swift_bridgeObjectRetain();
      uint64_t v39 = v43;
      uint64_t v59 = v43;
      uint64_t v2 = v47;
    }
    uint64_t v60 = *v36;
    id v61 = v39;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v36 = v60;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v60);
    }
    if ((v53 & 0x8000000000000000) != 0) {
      goto LABEL_92;
    }
    if (v53 >= *(void *)(v60 + 16)) {
      goto LABEL_93;
    }
    objc_storeStrong((id *)(v60 + 8 * v53 + 32), v39);
LABEL_39:
    specialized ContiguousArray._endMutation()();
    swift_bridgeObjectRelease();
    swift_endAccess();

    uint64_t v37 = v80;
    if (v80 == i)
    {
      swift_bridgeObjectRelease();
      goto LABEL_90;
    }
  }
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
}

void SGGraph.connect(_:to:)(char *a1, char *a2)
{
  if (!a1)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    long long v25 = xmmword_25C41D6A0;
LABEL_11:
    *(_OWORD *)uint64_t v24 = v25;
    *(unsigned char *)(v24 + 16) = 1;
    swift_willThrow();
    return;
  }
  if (!a2)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    long long v25 = xmmword_25C41D690;
    goto LABEL_11;
  }
  uint64_t v4 = v2;
  uint64_t v6 = (uint64_t *)&a1[OBJC_IVAR___SGOutput_attachment];
  swift_beginAccess();
  uint64_t v7 = *v6;
  uint64_t v8 = (void *)v6[1];
  uint64_t v9 = (uint64_t *)&a2[OBJC_IVAR___SGInput_attachment];
  swift_beginAccess();
  uint64_t v10 = (void *)v9[1];
  if (!v8)
  {
    if (!v10)
    {
      uint64_t v37 = *(void *)&a2[OBJC_IVAR___SGInput_name + 8];
      uint64_t v60 = *(void *)&a2[OBJC_IVAR___SGInput_name];
      uint64_t v61 = v37;
      uint64_t v38 = a1;
      uint64_t v39 = a2;
      swift_bridgeObjectRetain();
      v40._uint64_t countAndFlagsBits = 8236;
      v40._object = (void *)0xE200000000000000;
      String.append(_:)(v40);
      uint64_t v41 = *(void *)&v38[OBJC_IVAR___SGOutput_name];
      uint64_t v42 = *(void **)&v38[OBJC_IVAR___SGOutput_name + 8];
      swift_bridgeObjectRetain();
      v43._uint64_t countAndFlagsBits = v41;
      v43._object = v42;
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type APIError and conformance APIError();
      unint64_t v22 = (void *)swift_allocError();
      *(void *)uint64_t v44 = v60;
      *(void *)(v44 + 8) = v37;
      char v45 = 5;
LABEL_27:
      *(unsigned char *)(v44 + 16) = v45;
      goto LABEL_28;
    }
    uint64_t v27 = *(void *)&a1[OBJC_IVAR___SGOutput_name];
    uint64_t v26 = *(void *)&a1[OBJC_IVAR___SGOutput_name + 8];
    lazy protocol witness table accessor for type APIError and conformance APIError();
    unint64_t v22 = (void *)swift_allocError();
    *(void *)uint64_t v28 = v27;
    *(void *)(v28 + 8) = v26;
    char v29 = 6;
LABEL_15:
    *(unsigned char *)(v28 + 16) = v29;
    uint64_t v32 = a1;
    uint64_t v33 = a2;
    swift_bridgeObjectRetain();
LABEL_28:
    swift_willThrow();
    goto LABEL_29;
  }
  if (!v10)
  {
    uint64_t v31 = *(void *)&a2[OBJC_IVAR___SGInput_name];
    uint64_t v30 = *(void *)&a2[OBJC_IVAR___SGInput_name + 8];
    lazy protocol witness table accessor for type APIError and conformance APIError();
    unint64_t v22 = (void *)swift_allocError();
    *(void *)uint64_t v28 = v31;
    *(void *)(v28 + 8) = v30;
    char v29 = 7;
    goto LABEL_15;
  }
  uint64_t v11 = *v9;
  swift_bridgeObjectRetain_n();
  uint64_t v57 = a1;
  uint64_t v56 = a2;
  swift_bridgeObjectRetain();
  uint64_t v55 = v7;
  unint64_t v12 = SGGraph.node(named:)(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v13 = SGGraph.node(named:)(v11, v10);
  swift_bridgeObjectRelease();
  BOOL v58 = (void *)v12;
  if (!v12)
  {
    if (v13)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      id v34 = (void *)v13;
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_25C418EE0;
      *(void *)(v35 + 32) = v55;
      *(void *)(v35 + 40) = v8;
      lazy protocol witness table accessor for type APIError and conformance APIError();
      unint64_t v22 = (void *)swift_allocError();
      *(void *)uint64_t v36 = v35;
      *(void *)(v36 + 8) = 0;
      *(unsigned char *)(v36 + 16) = 8;
      swift_willThrow();

LABEL_29:
      type metadata accessor for SGError();
      id v54 = v22;
      SGError.__allocating_init(_:)(v22);
      swift_willThrow();

      return;
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_25C418EF0;
    *(void *)(v53 + 32) = v11;
    *(void *)(v53 + 40) = v10;
    *(void *)(v53 + 48) = v55;
    *(void *)(v53 + 56) = v8;
    lazy protocol witness table accessor for type APIError and conformance APIError();
    unint64_t v22 = (void *)swift_allocError();
    *(void *)uint64_t v44 = v53;
    *(void *)(v44 + 8) = 0;
    char v45 = 8;
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  if (!v13)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_25C418EE0;
    *(void *)(v46 + 32) = v11;
    *(void *)(v46 + 40) = v10;
    lazy protocol witness table accessor for type APIError and conformance APIError();
    unint64_t v22 = (void *)swift_allocError();
    *(void *)uint64_t v47 = v46;
    *(void *)(v47 + 8) = 0;
    *(unsigned char *)(v47 + 16) = 8;
    swift_willThrow();
    goto LABEL_20;
  }
  char v14 = (void *)v13;
  swift_bridgeObjectRelease();
  BOOL v15 = (objc_class *)type metadata accessor for SGEdge();
  int64_t v16 = (char *)objc_allocWithZone(v15);
  *(void *)&v16[OBJC_IVAR___SGEdge_from] = v57;
  *(void *)&v16[OBJC_IVAR___SGEdge_to] = v56;
  v62.receiver = v16;
  v62.super_class = v15;
  uint64_t v17 = v57;
  uint64_t v18 = v56;
  id v19 = objc_msgSendSuper2(&v62, sel_init);
  uint64_t v20 = &v18[OBJC_IVAR___SGInput_edge];
  swift_beginAccess();
  uint64_t v21 = (void *)MEMORY[0x261185960](v20);
  if (v21)
  {

    lazy protocol witness table accessor for type APIError and conformance APIError();
    unint64_t v22 = (void *)swift_allocError();
    *(void *)uint64_t v23 = 0;
    *(void *)(v23 + 8) = 0;
    *(unsigned char *)(v23 + 16) = 21;
    swift_willThrow();

LABEL_20:
    goto LABEL_29;
  }
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<SGEdge>((uint64_t)v59, (uint64_t)v63);
  uint64_t v48 = (uint64_t *)&v17[OBJC_IVAR___SGOutput_edges];
  swift_beginAccess();
  specialized OrderedSet._find(_:)((uint64_t)v63, *v48, v48[1]);
  if (v50) {
    specialized OrderedSet._appendNew(_:in:)((uint64_t)v63, v49);
  }
  swift_endAccess();
  outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  uint64_t v51 = (void *)(v4 + OBJC_IVAR___SGGraph_edges);
  swift_beginAccess();
  id v52 = v19;
  MEMORY[0x261184120]();
  if (*(void *)((*v51 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v51 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
}

uint64_t SGGraph.edgeConnected(to:)(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR___SGInput_edge;
  swift_beginAccess();
  return MEMORY[0x261185960](v1);
}

unint64_t SGGraph.node(containing:)(uint64_t a1)
{
  return SGGraph.node(containing:)(a1, &OBJC_IVAR___SGOutput_attachment);
}

{
  return SGGraph.node(containing:)(a1, &OBJC_IVAR___SGInput_attachment);
}

uint64_t SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(void *a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(char *, char *))
{
  return specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(a1, a2, a3, a4, a5);
}

_OWORD *SGGraph.topologicalSort()()
{
  uint64_t v25 = MEMORY[0x263F8EE78];
  specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(*(void **)(v0 + OBJC_IVAR___SGGraph_resultsNode), 1, (uint64_t)default argument 1 of OSSignpostIntervalState.init(id:isOpen:), 0, (void (*)(char *, char *))partial apply for closure #1 in SGGraph.topologicalSort());
  uint64_t v2 = (_OWORD *)v25;
  if (!v1)
  {
    uint64_t v3 = *(void *)(v25 + 16);
    if (v3)
    {
      uint64_t v4 = v25 + 24 * v3;
      uint64_t v5 = *(void **)(v4 + 16);
      uint64_t v6 = *(void **)(v4 + 24);
      id v7 = *(id *)(v4 + 8);
      id v8 = v5;
      id v9 = v6;
      return v2;
    }
    uint64_t v2 = v23;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi9_((uint64_t)v22);
    outlined init with take of SGInternalError.ErrorType(v22, v23);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    long long v24 = 0uLL;
    swift_allocError();
    long long v11 = v23[1];
    *unint64_t v12 = v23[0];
    v12[1] = v11;
    long long v13 = v23[5];
    long long v15 = v23[2];
    long long v14 = v23[3];
    v12[4] = v23[4];
    v12[5] = v13;
    uint64_t v12[2] = v15;
    v12[3] = v14;
    long long v16 = v23[9];
    long long v18 = v23[6];
    long long v17 = v23[7];
    v12[8] = v23[8];
    v12[9] = v16;
    v12[6] = v18;
    v12[7] = v17;
    long long v19 = v24;
    long long v21 = v23[10];
    long long v20 = v23[11];
    v12[12] = v23[12];
    v12[13] = v19;
    v12[10] = v21;
    v12[11] = v20;
    swift_willThrow();
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t specialized Sequence.flatMap<A>(_:)(unint64_t a1)
{
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_11;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      uint64_t v4 = (a1 & 0xC000000000000001) != 0
         ? (char *)MEMORY[0x2611848A0](i - 4, a1)
         : (char *)*(id *)(a1 + 8 * i);
      uint64_t v5 = v4;
      uint64_t v6 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v7 = (uint64_t *)&v4[OBJC_IVAR___SGOutput_edges];
      swift_beginAccess();
      uint64_t v9 = *v7;
      uint64_t v8 = v7[1];
      swift_retain();
      swift_retain();

      specialized Array.append<A>(contentsOf:)(v9, v8);
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v11;
      }
    }
    __break(1u);
LABEL_11:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(void *))
{
  uint64_t v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  }
  uint64_t v5 = *(void *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  uint64_t result = a2(v7);
  *a1 = v4;
  return result;
}

uint64_t key path getter for SGInput.edge : SGInput@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR___SGInput_edge;
  swift_beginAccess();
  uint64_t result = MEMORY[0x261185960](v3);
  *a2 = result;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SGGraph.collapseConstantAndPassthroughNodes()()
{
  uint64_t v1 = SGGraph.topologicalSort()();
  if (!v0)
  {
    uint64_t v5 = v1;
    uint64_t v6 = v2;
    id v7 = v4;

    uint64_t v8 = *((void *)v5 + 2);
    if (v8)
    {
      unint64_t v9 = v8 - 1;
      uint64_t v10 = (id *)v5 + 3 * v8 + 3;
      uint64_t v11 = MEMORY[0x263F8EE78];
      uint64_t v61 = v5;
      while (v9 < *((void *)v5 + 2))
      {
        unint64_t v12 = (unsigned __int8 *)*(v10 - 2);
        if (v12[OBJC_IVAR___SGNode_data + 80] <= 0x3Fu)
        {
          id v13 = *v10;
          long long v58 = *((_OWORD *)v10 - 1);
          id v14 = *v10;
          long long v15 = v12;
          id v16 = *((id *)&v58 + 1);
          v17._uint64_t countAndFlagsBits = 0x5F746F645F444ELL;
          v17._object = (void *)0xE700000000000000;
          if (String.hasPrefix(_:)(v17))
          {
            v60[0] = v11;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
              uint64_t v11 = v60[0];
            }
            long long v18 = v58;
            unint64_t v20 = *(void *)(v11 + 16);
            unint64_t v19 = *(void *)(v11 + 24);
            if (v20 >= v19 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
              long long v18 = v58;
              uint64_t v11 = v60[0];
            }
            *(void *)(v11 + 16) = v20 + 1;
            uint64_t v21 = v11 + 24 * v20;
            *(_OWORD *)(v21 + 32) = v18;
            *(void *)(v21 + 48) = v13;
          }
          else
          {
          }
          uint64_t v5 = v61;
        }
        --v9;
        v10 -= 3;
        if (v9 == -1) {
          goto LABEL_17;
        }
      }
      __break(1u);
    }
    uint64_t v11 = MEMORY[0x263F8EE78];
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(v11 + 16);
    if (v22)
    {
      swift_retain();
      uint64_t v23 = (id *)(v11 + 48);
      do
      {
        long long v24 = *(v23 - 2);
        uint64_t v25 = *(v23 - 1);
        id v26 = *v23;
        id v27 = v24;
        id v28 = v25;
        id v29 = v27;
        id v30 = v28;
        SGGraph.extract(node:)((uint64_t)v29);
        v23 += 3;

        --v22;
      }
      while (v22);
      swift_release();
    }
    swift_release();
    uint64_t v31 = SGGraph.topologicalSort()();
    uint64_t v33 = v32;
    uint64_t v35 = v34;

    uint64_t v37 = *((void *)v31 + 2);
    if (!v37)
    {
LABEL_37:
      uint64_t v61 = (_OWORD *)MEMORY[0x263F8EE78];
      goto LABEL_38;
    }
    uint64_t v61 = (_OWORD *)MEMORY[0x263F8EE78];
LABEL_23:
    uint64_t v38 = (void **)v31 + 3 * v37-- + 3;
    while (1)
    {
      if (v37 >= *((void *)v31 + 2))
      {
        __break(1u);
        goto LABEL_37;
      }
      Swift::String v40 = *v38;
      uint64_t v41 = (unsigned __int8 *)*(v38 - 2);
      if (v41[OBJC_IVAR___SGNode_data + 80] > 0x3Fu)
      {
        id v39 = v40;
      }
      else
      {
        long long v59 = *((_OWORD *)v38 - 1);
        id v39 = v40;
        uint64_t v42 = v41;
        id v43 = *((id *)&v59 + 1);
        v44._uint64_t countAndFlagsBits = 0x74736E6F635F444ELL;
        v44._object = (void *)0xEC0000005F746E61;
        if (String.hasPrefix(_:)(v44))
        {
          v60[0] = v61;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v61 + 2) + 1, 1);
            uint64_t v61 = (_OWORD *)v60[0];
          }
          long long v45 = v59;
          unint64_t v47 = *((void *)v61 + 2);
          unint64_t v46 = *((void *)v61 + 3);
          if (v47 >= v46 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
            long long v45 = v59;
            uint64_t v61 = (_OWORD *)v60[0];
          }
          uint64_t v48 = v61;
          *((void *)v61 + 2) = v47 + 1;
          uint64_t v49 = (uint64_t)v48 + 24 * v47;
          *(_OWORD *)(v49 + 32) = v45;
          *(void *)(v49 + 48) = v40;
          if (!v37)
          {
LABEL_38:
            swift_bridgeObjectRelease();
            uint64_t v50 = *((void *)v61 + 2);
            if (v50)
            {
              uint64_t v51 = (void **)(swift_retain() + 48);
              do
              {
                uint64_t v53 = *(v51 - 1);
                id v54 = *v51;
                v60[0] = *(v51 - 2);
                id v52 = (void *)v60[0];
                v60[1] = v53;
                v60[2] = v54;
                id v55 = v54;
                id v56 = v52;
                id v57 = v53;
                closure #4 in SGGraph.collapseConstantAndPassthroughNodes()((uint64_t)v60);
                v51 += 3;

                --v50;
              }
              while (v50);
              swift_release_n();
            }
            else
            {
              swift_release();
            }
            return;
          }
          goto LABEL_23;
        }
      }
      --v37;
      v38 -= 3;
      if (v37 == -1) {
        goto LABEL_38;
      }
    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SGGraph.removeUnconnectedNodesAndEdges()()
{
  uint64_t v2 = v1;
  uint64_t v3 = specialized SGGraph.connectedUpstreamSubgraph(rootedAt:)(*(void **)(v0 + OBJC_IVAR___SGGraph_resultsNode));
  uint64_t v59 = v4;
  swift_release();
  swift_release();
  uint64_t v5 = (unint64_t *)(v0 + OBJC_IVAR___SGGraph_nodes);
  swift_beginAccess();
  unint64_t v6 = *v5;
  uint64_t v7 = v6 >> 62;
  if (v6 >> 62) {
    goto LABEL_79;
  }
  uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if ((unint64_t)v8 >= 2)
  {
    while (1)
    {
      if ((v6 & 0xC000000000000001) != 0 && v8 != 2)
      {
        type metadata accessor for SGNode();
        Swift::Int v10 = 2;
        do
        {
          Swift::Int v11 = v10 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v10);
          Swift::Int v10 = v11;
        }
        while (v8 != v11);
      }
      if (v7)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.subscript.getter();
        uint64_t v62 = v13;
        uint64_t v12 = v14;
        unint64_t v16 = v15;
        swift_bridgeObjectRelease();
        uint64_t v8 = v16 >> 1;
      }
      else
      {
        uint64_t v62 = (v6 & 0xFFFFFFFFFFFFFF8) + 32;
        swift_bridgeObjectRetain();
        uint64_t v12 = 2;
      }
      swift_endAccess();
      if (v12 == v8)
      {
        swift_unknownObjectRelease();
LABEL_71:
        swift_release();
        swift_release();
        return;
      }
      BOOL v64 = (void **)(v59 + 32);
      unint64_t v66 = (void *)(v3 + 16);
      uint64_t v63 = v3 + 32;
      swift_unknownObjectRetain();
      uint64_t v65 = v3;
      uint64_t v58 = v8;
      while (1)
      {
        if (v12 >= v8) {
          goto LABEL_76;
        }
        Swift::String v17 = *(void **)(v62 + 8 * v12);
        if (v3) {
          break;
        }
        uint64_t v7 = *(void *)(v59 + 16);
        if (!v7)
        {
          id v47 = v17;
          goto LABEL_60;
        }
        type metadata accessor for SGNode();
        Swift::String v44 = *v64;
        unint64_t v6 = v17;
        id v45 = v44;
        char v46 = static NSObject.== infix(_:_:)();

        if (v46) {
          goto LABEL_56;
        }
        if (v7 == 1) {
          goto LABEL_59;
        }
        id v48 = *(id *)(v59 + 40);
        char v49 = static NSObject.== infix(_:_:)();

        if (v49) {
          goto LABEL_56;
        }
        if (v7 == 2)
        {
LABEL_59:
          uint64_t v3 = v65;
          goto LABEL_60;
        }
        id v50 = *(id *)(v59 + 48);
        char v51 = static NSObject.== infix(_:_:)();

        if (v51)
        {
LABEL_56:

          uint64_t v3 = v65;
          goto LABEL_16;
        }
        uint64_t v61 = v17;
        v7 -= 3;
        id v52 = (void **)(v59 + 56);
        while (v7)
        {
          uint64_t v53 = *v52++;
          id v54 = v53;
          char v55 = static NSObject.== infix(_:_:)();

          --v7;
          if (v55) {
            goto LABEL_56;
          }
        }
        uint64_t v3 = v65;
LABEL_53:
        Swift::String v17 = v61;
LABEL_60:
        SGGraph.remove(node:)((uint64_t)v17);
        if (v2)
        {
          swift_release();
          swift_release();
          swift_unknownObjectRelease_n();

          return;
        }

LABEL_16:
        if (++v12 == v8)
        {
          swift_unknownObjectRelease_n();
          goto LABEL_71;
        }
      }
      unint64_t v6 = *(void *)(v3 + 16);
      id v18 = v17;
      swift_retain();
      Swift::Int v19 = NSObject._rawHashValue(seed:)(v6);
      uint64_t v20 = 1 << *(void *)(v3 + 16);
      unint64_t v21 = v20 - 1;
      if (__OFSUB__(v20, 1)) {
        goto LABEL_78;
      }
      uint64_t v61 = v17;
      unint64_t v6 = v21 & v19;
      uint64_t v22 = _HashTable.UnsafeHandle._startIterator(bucket:)(v21 & v19, v66, v63);
      if (!v22) {
        break;
      }
      unint64_t v25 = v23;
      uint64_t v26 = v24;
      uint64_t v60 = v2;
      unint64_t v27 = (v22 ^ v21) + (*(uint64_t *)(v3 + 24) >> 6);
      if (v27 >= v21) {
        unint64_t v28 = v21;
      }
      else {
        unint64_t v28 = 0;
      }
      uint64_t v7 = v27 - v28;
      type metadata accessor for SGNode();
      id v29 = v64[v7];
      uint64_t v2 = static NSObject.== infix(_:_:)();

      if (v2)
      {
LABEL_15:

        uint64_t v3 = v65;
        swift_release();
        uint64_t v2 = v60;
        uint64_t v8 = v58;
        goto LABEL_16;
      }
      uint64_t v7 = 0;
      while (1)
      {
        ++v6;
        uint64_t v33 = *v66 & 0x3FLL;
        uint64_t v34 = 1 << *v66;
        uint64_t v3 = v65;
        if (v6 == v34)
        {
          if (v7) {
            goto LABEL_86;
          }
          unint64_t v6 = 0;
          uint64_t v7 = 1;
        }
        if (v26 >= v33) {
          break;
        }
        uint64_t v35 = (uint64_t)(v6 * v33) >> 6;
        if (v26)
        {
          if (__OFADD__(v33 << v33, 64)) {
            goto LABEL_77;
          }
          uint64_t v36 = (v33 << v33) + 126;
          if ((v33 << v33) + 64 >= 1) {
            uint64_t v36 = (v33 << v33) + 63;
          }
          if (v35 + 1 == v36 >> 6) {
            uint64_t v35 = 0;
          }
          else {
            ++v35;
          }
        }
        uint64_t v37 = v33 - v26;
        if (__OFSUB__(v33, v26)) {
          goto LABEL_74;
        }
        BOOL v38 = v35 == 2 && v33 == 5;
        uint64_t v39 = 64;
        if (v38) {
          uint64_t v39 = 32;
        }
        BOOL v40 = __OFSUB__(v39, v37);
        uint64_t v41 = v39 - v37;
        if (v40) {
          goto LABEL_75;
        }
        unint64_t v42 = *(void *)(v63 + 8 * v35);
        uint64_t v43 = ((v42 << v26) | v25) & (v34 - 1);
        unint64_t v25 = v42 >> v37;
        uint64_t v26 = v41;
        if (!v43) {
          goto LABEL_51;
        }
LABEL_26:
        unint64_t v30 = v34 - 1;
        unint64_t v31 = (v43 ^ v30) + (*(uint64_t *)(v65 + 24) >> 6);
        if (v31 < v30) {
          unint64_t v30 = 0;
        }
        id v32 = v64[v31 - v30];
        uint64_t v2 = static NSObject.== infix(_:_:)();

        if (v2) {
          goto LABEL_15;
        }
      }
      BOOL v40 = __OFSUB__(v26, v33);
      v26 -= v33;
      if (!v40)
      {
        uint64_t v43 = (v34 - 1) & v25;
        v25 >>= v33;
        if (!v43)
        {
LABEL_51:
          uint64_t v2 = v60;
          break;
        }
        goto LABEL_26;
      }
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v8 < 2) {
        goto LABEL_84;
      }
      swift_bridgeObjectRetain();
      uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v56 < 2) {
        goto LABEL_85;
      }
      swift_bridgeObjectRetain();
      uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v57 < v8)
      {
        __break(1u);
        goto LABEL_83;
      }
    }
    swift_release();
    uint64_t v8 = v58;
    goto LABEL_53;
  }
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

char *SGGraph.surfaceNodeElement(ofType:)(char a1)
{
  char v3 = a1 & 1;
  Swift::Int v10 = 0;
  id v9 = 0;
  uint64_t v4 = *(void **)&v1[OBJC_IVAR___SGGraph_resultsNode];
  v8[16] = v3;
  specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(v4, 1, (uint64_t)partial apply for closure #1 in SGGraph.surfaceNodeElement(ofType:), (uint64_t)v8, (void (*)(char *, char *))partial apply for closure #2 in SGGraph.surfaceNodeElement(ofType:));
  if (v2)
  {
  }
  else
  {
    uint64_t v1 = v10;
    if (!v10 || (uint64_t v5 = &v10[OBJC_IVAR___SGNode_graph], swift_beginAccess(), !MEMORY[0x261185960](v5)))
    {
      id v6 = v9;

      return 0;
    }
  }
  return v1;
}

uint64_t mapUniforms(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<Int>>);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in mapUniforms(_:);
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph12TypedTextureVG_AF0G10AssignmentVs5NeverOTg504_s11d26Graph11mapUniformsySayAA17gh9VGSayAA05F14E0VGFAdGXEfU0_s11AnyIteratorVySiGTf1cn_nTf4ng_n(a1);
  swift_release();
  return v4;
}

id createCustomUniformsType(graph:textureAssignments:)(uint64_t a1, uint64_t a2)
{
  id result = (id)SGGraph.createCustomUniformsType(named:textureAssignments:)(0x736D726F66696E55, 0xE800000000000000, a2);
  id v4 = result;
  if (!v2)
  {
    uint64_t v5 = (objc_class *)type metadata accessor for SGPropertyDescription();
    id v6 = objc_allocWithZone(v5);
    uint64_t v7 = &v6[OBJC_IVAR___SGPropertyDescription_name];
    *uint64_t v7 = 0x736D726F66696E55;
    v7[1] = 0xE800000000000000;
    *(void *)&v6[OBJC_IVAR___SGPropertyDescription_type] = v4;
    v6[OBJC_IVAR___SGPropertyDescription_visible] = 1;
    v8.receiver = v6;
    v8.super_class = v5;
    return objc_msgSendSuper2(&v8, sel_init);
  }
  return result;
}

void SGGraph.remove(node:)(uint64_t a1)
{
  uint64_t v3 = (unint64_t *)(v1 + OBJC_IVAR___SGGraph_nodes);
  swift_beginAccess();
  unint64_t v4 = *v3;
  swift_bridgeObjectRetain();
  specialized Collection<>.firstIndex(of:)(a1, v4);
  unint64_t v90 = v5;
  char v7 = v6;
  swift_bridgeObjectRelease();
  if (v7) {
    return;
  }
  unint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = specialized Sequence.flatMap<A>(_:)(v8);
  swift_bridgeObjectRelease();
  unint64_t v10 = specialized Sequence.compactMap<A>(_:)(v9);
  swift_bridgeObjectRelease();
  unint64_t v11 = *(void *)(a1 + OBJC_IVAR___SGNode_inputs);
  unint64_t v102 = MEMORY[0x263F8EE78];
  uint64_t v88 = a1;
  if (v11 >> 62) {
    goto LABEL_16;
  }
  uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v12; uint64_t v12 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v13 = 4;
    while (1)
    {
      uint64_t v14 = (v11 & 0xC000000000000001) != 0
          ? (char *)MEMORY[0x2611848A0](v13 - 4, v11)
          : (char *)*(id *)(v11 + 8 * v13);
      unint64_t v15 = v14;
      uint64_t v16 = v13 - 3;
      if (__OFADD__(v13 - 4, 1)) {
        break;
      }
      Swift::String v17 = &v14[OBJC_IVAR___SGInput_edge];
      swift_beginAccess();
      uint64_t v18 = MEMORY[0x261185960](v17);

      if (v18)
      {
        MEMORY[0x261184120]();
        if (*(void *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v13;
      if (v16 == v12)
      {
        swift_bridgeObjectRelease();
        unint64_t v19 = v102;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain_n();
  }
  swift_bridgeObjectRelease();
  unint64_t v19 = MEMORY[0x263F8EE78];
LABEL_18:
  swift_bridgeObjectRelease();
  unint64_t v102 = v10;
  specialized Array.append<A>(contentsOf:)(v19);
  if (v10 >> 62) {
    goto LABEL_108;
  }
  uint64_t v20 = *(void *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v20)
  {
LABEL_109:
    swift_bridgeObjectRelease_n();
    swift_beginAccess();
    uint64_t v77 = (void *)specialized Array.remove(at:)(v90, specialized _ArrayBuffer._consumeAndCreateNew());
    swift_endAccess();

    uint64_t v79 = *(void *)(v88 + OBJC_IVAR___SGNode_name);
    uint64_t v78 = *(void *)(v88 + OBJC_IVAR___SGNode_name + 8);
    uint64_t v80 = (uint64_t *)(v91 + OBJC_IVAR___SGGraph_nodeMap);
    swift_beginAccess();
    uint64_t v81 = *v80;
    uint64_t v82 = (void *)v80[1];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v83 = specialized OrderedSet._find(_:)(v79, v78, v81, v82);
    char v85 = v84;
    uint64_t v87 = v86;
    swift_release();
    swift_release();
    if ((v85 & 1) == 0)
    {
      specialized OrderedSet._removeExistingMember(at:in:)(v83, v87);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_endAccess();
    return;
  }
LABEL_20:
  unint64_t v94 = v10 & 0xC000000000000001;
  long long v96 = (uint64_t *)(v91 + OBJC_IVAR___SGGraph_edges);
  swift_beginAccess();
  uint64_t v21 = 0;
  unint64_t v89 = v10 + 32;
  uint64_t v92 = v20;
  unint64_t v93 = v10;
  while (1)
  {
    if (v94) {
      uint64_t v22 = (char *)MEMORY[0x2611848A0](v21, v10);
    }
    else {
      uint64_t v22 = (char *)*(id *)(v89 + 8 * v21);
    }
    long long v97 = v22;
    BOOL v23 = __OFADD__(v21, 1);
    uint64_t v24 = v21 + 1;
    if (v23) {
      goto LABEL_105;
    }
    uint64_t v95 = v24;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
    uint64_t v25 = *(void *)&v97[OBJC_IVAR___SGEdge_from];
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of WeakBox<SGEdge>((uint64_t)v98, (uint64_t)v99);
    uint64_t v26 = v25 + OBJC_IVAR___SGOutput_edges;
    swift_beginAccess();
    uint64_t v27 = *(void *)v26;
    uint64_t v28 = *(void *)(v26 + 8);
    uint64_t v29 = v28 + 32;
    uint64_t v30 = *(void *)(v28 + 16);
    if (!*(void *)v26)
    {
      if (!v30)
      {
LABEL_38:
        uint64_t v100 = 0;
        char v41 = 1;
        goto LABEL_68;
      }
      Swift::Int v31 = 0;
      while (1)
      {
        outlined init with copy of WeakBox<SGEdge>(v29, (uint64_t)&v100);
        uint64_t v36 = (void *)MEMORY[0x261185960](&v100);
        uint64_t v37 = MEMORY[0x261185960](v99);
        BOOL v38 = (void *)v37;
        if (!v36) {
          break;
        }
        if (!v37)
        {
          BOOL v38 = v36;
LABEL_31:

          goto LABEL_32;
        }
        type metadata accessor for SGEdge();
        id v39 = v36;
        char v40 = static NSObject.== infix(_:_:)();

        if (v40)
        {
LABEL_39:
          outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v100, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
          uint64_t v35 = 0;
          goto LABEL_40;
        }
LABEL_32:
        outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v100, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
        ++v31;
        v29 += 8;
        if (v30 == v31) {
          goto LABEL_38;
        }
      }
      if (!v37) {
        goto LABEL_39;
      }
      goto LABEL_31;
    }
    swift_retain();
    Swift::Int v31 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v99, v29, v30, (void *)(v27 + 16), v27 + 32);
    char v33 = v32;
    uint64_t v35 = v34;
    swift_release();
    if (v33) {
      goto LABEL_38;
    }
LABEL_40:
    uint64_t v42 = *(void *)v26;
    uint64_t v43 = *(void *)(*(void *)(v26 + 8) + 16);
    if (!*(void *)v26)
    {
      if (v43)
      {
        specialized ContiguousArray.remove(at:)(v31, (uint64_t)&v100);
        char v41 = 0;
        goto LABEL_68;
      }
LABEL_58:
      specialized ContiguousArray.remove(at:)(v31, (uint64_t)&v100);
      uint64_t v49 = *(void *)v26;
      uint64_t v50 = *(void *)(v26 + 8);
      if (*(void *)v26)
      {
        swift_beginAccess();
        uint64_t v51 = *(void *)(v49 + 24) & 0x3FLL;
      }
      else
      {
        uint64_t v51 = 0;
      }
      unint64_t v52 = *(void *)(v50 + 16);
      if (v51 || v52 >= 0x10)
      {
        int64_t v53 = specialized static _HashTable.scale(forCapacity:)(v52);
        if (v51 <= v53) {
          int64_t v54 = v53;
        }
        else {
          int64_t v54 = v51;
        }
        uint64_t v55 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v50, v54, 0, v51);
        swift_release();
        char v41 = 0;
        *(void *)uint64_t v26 = v55;
      }
      else
      {
        swift_release();
        char v41 = 0;
        *(void *)uint64_t v26 = 0;
      }
      goto LABEL_68;
    }
    swift_beginAccess();
    unint64_t v44 = *(void *)(v42 + 16) & 0x3FLL;
    if (v44 == (*(void *)(v42 + 24) & 0x3FLL) || v44 < 5)
    {
      if (!v43) {
        goto LABEL_58;
      }
    }
    else
    {
      double v45 = (double)(1 << v44) * 0.25;
      if ((~*(void *)&v45 & 0x7FF0000000000000) == 0) {
        goto LABEL_116;
      }
      if (v45 <= -9.22337204e18) {
        goto LABEL_117;
      }
      if (v45 >= 9.22337204e18) {
        goto LABEL_118;
      }
      if (v43 <= (uint64_t)v45) {
        goto LABEL_58;
      }
    }
    char isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
    uint64_t v47 = *(void *)v26;
    if ((isUniquelyReferenced_native & 1) == 0)
    {
      if (!v47) {
        goto LABEL_120;
      }
      uint64_t v47 = _HashTable.copy()(*(void **)v26);
      swift_release();
      *(void *)uint64_t v26 = v47;
    }
    if (!v47) {
      goto LABEL_119;
    }
    swift_retain();
    specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v35, (void *)(v47 + 16), v47 + 32, v26);
    if (__OFADD__(v31, 1)) {
      goto LABEL_114;
    }
    if (v31 + 1 < v31) {
      goto LABEL_115;
    }
    uint64_t v48 = *(void *)(v26 + 8);
    swift_retain();
    specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(v31, v31 + 1, v48, (uint64_t *)(v47 + 16), (void *)(v47 + 32));
    swift_release();
    swift_release();
    specialized ContiguousArray.remove(at:)(v31, (uint64_t)&v100);
    char v41 = 0;
LABEL_68:
    char v101 = v41;
    swift_endAccess();
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v99, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v100, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
    unint64_t v10 = *v96;
    if ((unint64_t)*v96 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v56)
      {
LABEL_101:
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type APIError and conformance APIError();
        swift_allocError();
        *(void *)uint64_t v76 = 0xD000000000000032;
        *(void *)(v76 + 8) = 0x800000025C427100;
        *(unsigned char *)(v76 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease_n();

        return;
      }
    }
    else
    {
      uint64_t v56 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v56) {
        goto LABEL_101;
      }
    }
    unint64_t v57 = v10 & 0xC000000000000001;
    if ((v10 & 0xC000000000000001) != 0)
    {
      id v58 = (id)MEMORY[0x2611848A0](0, v10);
    }
    else
    {
      if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_106;
      }
      id v58 = *(id *)(v10 + 32);
    }
    uint64_t v59 = v58;
    type metadata accessor for SGEdge();
    char v60 = static NSObject.== infix(_:_:)();

    unint64_t v61 = 0;
    if (v60) {
      goto LABEL_81;
    }
    if (v56 == 1) {
      goto LABEL_101;
    }
    if (!v57) {
      break;
    }
    id v62 = (id)MEMORY[0x2611848A0](1, v10);
LABEL_79:
    uint64_t v63 = v62;
    char v64 = static NSObject.== infix(_:_:)();

    if ((v64 & 1) == 0)
    {
      uint64_t v72 = 1;
      while (1)
      {
        unint64_t v61 = v72 + 1;
        if (__OFADD__(v72, 1)) {
          break;
        }
        if (v61 == v56) {
          goto LABEL_101;
        }
        if (v57)
        {
          id v73 = (id)MEMORY[0x2611848A0](v72 + 1, v10);
        }
        else
        {
          if ((v61 & 0x8000000000000000) != 0) {
            goto LABEL_103;
          }
          if (v61 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_104;
          }
          id v73 = *(id *)(v10 + 32 + 8 * v61);
        }
        unint64_t v74 = v73;
        char v75 = static NSObject.== infix(_:_:)();

        ++v72;
        if (v75) {
          goto LABEL_81;
        }
      }
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      if (!v20) {
        goto LABEL_109;
      }
      goto LABEL_20;
    }
    unint64_t v61 = 1;
LABEL_81:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v65 = *v96;
    int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *long long v96 = v65;
    if (!isUniquelyReferenced_nonNull_bridgeObject || v65 < 0 || (v65 & 0x4000000000000000) != 0)
    {
      uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew()(v65);
      *long long v96 = v65;
    }
    unint64_t v10 = v65 & 0xFFFFFFFFFFFFFF8;
    unint64_t v67 = *(void *)(v10 + 16);
    if (v61 >= v67) {
      goto LABEL_107;
    }
    unint64_t v68 = v67 - 1;
    uint64_t v69 = v67 - 1 - v61;
    if (v69 < 0) {
      goto LABEL_121;
    }
    unint64_t v70 = v10 + 8 * v61;
    uint64_t v71 = *(void **)(v70 + 32);
    memmove((void *)(v70 + 32), (const void *)(v70 + 40), 8 * v69);
    *(void *)(v10 + 16) = v68;
    specialized Array._endMutation()();
    swift_endAccess();

    unint64_t v10 = v93;
    uint64_t v21 = v95;
    if (v95 == v92) {
      goto LABEL_109;
    }
  }
  if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    id v62 = *(id *)(v10 + 40);
    goto LABEL_79;
  }
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized Set.union<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    unint64_t v11 = (Swift::Int *)(*(void *)(v2 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v12, v13);
    id result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t SGGraph.nodeWithOutput(_:)(char *a1)
{
  return SGGraph.nodeWithOutput(_:)(a1, &OBJC_IVAR___SGOutput_attachment, "WARNING: Unable to find node with output: %@");
}

unint64_t SGGraph.nodeWithInput(_:)(char *a1)
{
  return SGGraph.nodeWithOutput(_:)(a1, &OBJC_IVAR___SGInput_attachment, "WARNING: Unable to find node with input: %@");
}

unint64_t SGGraph.nodeWithOutput(_:)(char *a1, void *a2, const char *a3)
{
  uint64_t v5 = (uint64_t *)&a1[*a2];
  swift_beginAccess();
  uint64_t v6 = (void *)v5[1];
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *v5;
  swift_bridgeObjectRetain();
  unint64_t v8 = SGGraph.node(named:)(v7, v6);
  swift_bridgeObjectRelease();
  if (!v8)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)logger);
    os_log_type_t v10 = static os_log_type_t.error.getter();
    unint64_t v11 = a1;
    Swift::Int v12 = Logger.logObject.getter();
    if (os_log_type_enabled(v12, v10))
    {
      Swift::Int v13 = (uint8_t *)swift_slowAlloc();
      int64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)Swift::Int v13 = 138412290;
      unint64_t v15 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int64_t v14 = v11;

      _os_log_impl(&dword_25C27E000, v12, v10, a3, v13, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x261185880](v14, -1, -1);
      MEMORY[0x261185880](v13, -1, -1);
    }
    else
    {

      Swift::Int v12 = v11;
    }

    return 0;
  }
  return v8;
}

uint64_t SGGraph.name.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SGGraph_name);
  swift_bridgeObjectRetain();
  return v1;
}

id SGGraph.argumentsNode.getter()
{
  return *(id *)(v0 + OBJC_IVAR___SGGraph_argumentsNode);
}

id SGGraph.resultsNode.getter()
{
  return *(id *)(v0 + OBJC_IVAR___SGGraph_resultsNode);
}

uint64_t SGGraph.nodes.getter()
{
  return SGGraph.nodes.getter();
}

{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SGGraph.nodes.setter(uint64_t a1)
{
  return SGGraph.nodes.setter(a1, &OBJC_IVAR___SGGraph_nodes);
}

uint64_t (*SGGraph.nodes.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t SGGraph.childNodes.getter()
{
  return SGGraph.nodes.getter();
}

uint64_t SGGraph.edges.getter()
{
  return SGGraph.nodes.getter();
}

uint64_t SGGraph.edges.setter(uint64_t a1)
{
  return SGGraph.nodes.setter(a1, &OBJC_IVAR___SGGraph_edges);
}

uint64_t (*SGGraph.edges.modify())()
{
  return XMLParserDelegate.StringNode.children.modify;
}

uint64_t SGGraph.inputs.getter()
{
  return SGGraph.nodes.getter();
}

uint64_t SGGraph.inputs.setter(uint64_t a1)
{
  return SGGraph.nodes.setter(a1, &OBJC_IVAR___SGGraph_inputs);
}

uint64_t (*SGGraph.inputs.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

Class @objc SGGraph.childNodes.getter(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  swift_beginAccess();
  a4(0);
  swift_bridgeObjectRetain();
  v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return v5.super.isa;
}

uint64_t SGGraph.outputs.getter()
{
  return SGGraph.nodes.getter();
}

uint64_t @objc SGGraph.edges.setter(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void *a5)
{
  a4(0);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = (uint64_t *)(a1 + *a5);
  swift_beginAccess();
  *unint64_t v8 = v7;
  return swift_bridgeObjectRelease();
}

uint64_t SGGraph.outputs.setter(uint64_t a1)
{
  return SGGraph.nodes.setter(a1, &OBJC_IVAR___SGGraph_outputs);
}

uint64_t SGGraph.nodes.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  *uint64_t v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SGGraph.outputs.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t SGGraph.__allocating_init(name:inputs:outputs:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  id v9 = objc_allocWithZone(v4);
  return SGGraph.init(name:inputs:outputs:)(a1, a2, a3, a4);
}

uint64_t SGGraph.init(name:inputs:outputs:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  NSArray v5 = v4;
  unint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v11)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = a1;
    unint64_t v13 = a2;
  }
  else
  {
    unint64_t v13 = 0xE800000000000000;
    uint64_t v12 = 0x64656C7469746E55;
  }
  int64_t v14 = (uint64_t *)&v4[OBJC_IVAR___SGGraph_name];
  *int64_t v14 = v12;
  v14[1] = v13;
  if (a3 >> 62) {
    goto LABEL_30;
  }
  uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  int64_t v16 = v4;
  while (1)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    uint64_t v49 = (objc_class *)ObjectType;
    uint64_t v50 = v5;
    if (!v15) {
      break;
    }
    uint64_t v54 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v15 < 0)
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return result;
    }
    uint64_t v48 = (char *)a4;
    NSArray v5 = 0;
    unint64_t ObjectType = a3 & 0xC000000000000001;
    while ((void *)v15 != v5)
    {
      if (ObjectType) {
        unint64_t v19 = (char *)MEMORY[0x2611848A0](v5, a3);
      }
      else {
        unint64_t v19 = (char *)*(id *)(a3 + 8 * (void)v5 + 32);
      }
      a4 = (unint64_t)v19;
      NSArray v5 = (char *)v5 + 1;
      uint64_t v20 = (uint64_t *)&v19[OBJC_IVAR___SGInput_attachment];
      swift_beginAccess();
      *uint64_t v20 = a1;
      v20[1] = a2;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if ((void *)v15 == v5)
      {
        uint64_t v21 = v54;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        NSArray v5 = v50;
        uint64_t v17 = MEMORY[0x263F8EE78];
        a4 = (unint64_t)v48;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    swift_bridgeObjectRetain();
    id v26 = v5;
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = MEMORY[0x263F8EE78];
LABEL_18:
  *(void *)((char *)v5 + OBJC_IVAR___SGGraph_inputs) = v21;
  if (!(a4 >> 62))
  {
    uint64_t v22 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v22) {
      goto LABEL_32;
    }
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22)
  {
LABEL_20:
    uint64_t v53 = v17;
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v22 < 0) {
      goto LABEL_35;
    }
    NSArray v5 = 0;
    a3 = a4;
    unint64_t ObjectType = a4 & 0xC000000000000001;
    while ((void *)v22 != v5)
    {
      if (ObjectType) {
        BOOL v23 = (char *)MEMORY[0x2611848A0](v5, a3);
      }
      else {
        BOOL v23 = (char *)*(id *)(a3 + 8 * (void)v5 + 32);
      }
      a4 = (unint64_t)v23;
      NSArray v5 = (char *)v5 + 1;
      uint64_t v24 = (uint64_t *)&v23[OBJC_IVAR___SGOutput_attachment];
      swift_beginAccess();
      uint64_t *v24 = a1;
      v24[1] = a2;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if ((void *)v22 == v5)
      {
        uint64_t v25 = v53;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        NSArray v5 = v50;
        goto LABEL_33;
      }
    }
    goto LABEL_29;
  }
LABEL_32:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v25 = MEMORY[0x263F8EE78];
LABEL_33:
  *(void *)((char *)v5 + OBJC_IVAR___SGGraph_outputs) = v25;
  uint64_t v27 = MEMORY[0x263F8EE78];
  *(void *)((char *)v5 + OBJC_IVAR___SGGraph_edges) = MEMORY[0x263F8EE78];
  swift_beginAccess();
  unint64_t v28 = swift_bridgeObjectRetain();
  uint64_t v29 = specialized static SGGraph.generateArgumentsNode(inputs:)(v28);
  swift_bridgeObjectRelease();
  uint64_t v30 = OBJC_IVAR___SGGraph_argumentsNode;
  *(void *)((char *)v5 + OBJC_IVAR___SGGraph_argumentsNode) = v29;
  swift_beginAccess();
  unint64_t v31 = swift_bridgeObjectRetain();
  char v32 = specialized static SGGraph.generateResultsNode(outputs:)(v31);
  swift_bridgeObjectRelease();
  *(void *)((char *)v5 + OBJC_IVAR___SGGraph_resultsNode) = v32;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_25C41A140;
  uint64_t v34 = *(void **)((char *)v5 + v30);
  *(void *)(v33 + 32) = v34;
  *(void *)(v33 + 40) = v32;
  uint64_t v52 = v33;
  specialized Array._endMutation()();
  *(void *)((char *)v5 + OBJC_IVAR___SGGraph_nodes) = v52;
  uint64_t v35 = v34;
  uint64_t v36 = v32;
  uint64_t v37 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(v27);
  BOOL v38 = (uint64_t *)((char *)v5 + OBJC_IVAR___SGGraph_nodeMap);
  uint64_t *v38 = v37;
  v38[1] = v39;
  _OWORD v38[2] = v40;
  uint64_t v41 = *(void *)&v35[OBJC_IVAR___SGNode_name];
  uint64_t v42 = *(void *)&v35[OBJC_IVAR___SGNode_name + 8];
  swift_beginAccess();
  uint64_t v43 = v35;
  swift_bridgeObjectRetain();
  specialized OrderedDictionary.subscript.setter(v35, v41, v42);
  uint64_t v44 = *(void *)&v36[OBJC_IVAR___SGNode_name];
  uint64_t v45 = *(void *)&v36[OBJC_IVAR___SGNode_name + 8];
  char v46 = v36;
  swift_bridgeObjectRetain();
  specialized OrderedDictionary.subscript.setter(v36, v44, v45);
  swift_endAccess();

  v51.receiver = v5;
  v51.super_class = v49;
  id v47 = objc_msgSendSuper2(&v51, sel_init);
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  return (uint64_t)v47;
}

ShaderGraph::SGGraph::CodingKeys_optional __swiftcall SGGraph.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  object = stringValue._object;
  v2._uint64_t countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGGraph.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return (ShaderGraph::SGGraph::CodingKeys_optional)5;
  }
  else {
    return (ShaderGraph::SGGraph::CodingKeys_optional)v3;
  }
}

ShaderGraph::SGGraph::CodingKeys_optional __swiftcall SGGraph.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (ShaderGraph::SGGraph::CodingKeys_optional)5;
}

uint64_t SGGraph.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t SGGraph.CodingKeys.rawValue.getter(char a1)
{
  uint64_t result = 0x7365646F6ELL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7365676465;
      break;
    case 2:
      uint64_t result = 0x737475706E69;
      break;
    case 3:
      uint64_t result = 0x7374757074756FLL;
      break;
    case 4:
      uint64_t result = 1701667182;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t SGGraph.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x7365646F6ELL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7365676465;
      break;
    case 2:
      uint64_t result = 0x737475706E69;
      break;
    case 3:
      uint64_t result = 0x7374757074756FLL;
      break;
    case 4:
      uint64_t result = 1701667182;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SGGraph.CodingKeys(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = 0x7365646F6ELL;
  uint64_t v3 = *a1;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x7365646F6ELL;
  switch(v3)
  {
    case 1:
      uint64_t v5 = 0x7365676465;
      break;
    case 2:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v5 = 0x737475706E69;
      break;
    case 3:
      unint64_t v4 = 0xE700000000000000;
      uint64_t v5 = 0x7374757074756FLL;
      break;
    case 4:
      unint64_t v4 = 0xE400000000000000;
      uint64_t v5 = 1701667182;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE500000000000000;
  switch(*a2)
  {
    case 1:
      if (v5 == 0x7365676465) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x737475706E69) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v2 = 0x7374757074756FLL;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1701667182) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v4 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SGGraph.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SGGraph.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SGGraph.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SGGraph.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized SGGraph.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SGGraph.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x7365646F6ELL;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 0x7365676465;
      goto LABEL_3;
    case 2:
      *a1 = 0x737475706E69;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 0x7374757074756FLL;
      a1[1] = 0xE700000000000000;
      break;
    case 4:
      *a1 = 1701667182;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE500000000000000;
      break;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SGGraph.CodingKeys()
{
  uint64_t result = 0x7365646F6ELL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7365676465;
      break;
    case 2:
      uint64_t result = 0x737475706E69;
      break;
    case 3:
      uint64_t result = 0x7374757074756FLL;
      break;
    case 4:
      uint64_t result = 1701667182;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance SGGraph.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized SGGraph.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SGGraph.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SGGraph.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SGGraph.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SGGraph.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SGGraph.init(from:)(a1);
}

uint64_t SGGraph.init(from:)(void *a1)
{
  unint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SGGraph.CodingKeys>);
  uint64_t v146 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v6 = (char *)&v131 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys();
  uint64_t v149 = v1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  char v7 = v2;
  long long v148 = a1;
  if (v2)
  {
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    uint64_t v20 = v149;
    goto LABEL_4;
  }
  uint64_t v8 = v146;
  LOBYTE(v158) = 4;
  uint64_t v9 = v4;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  unint64_t v19 = v18;
  uint64_t v20 = v149;
  uint64_t v21 = (uint64_t *)&v149[OBJC_IVAR___SGGraph_name];
  *uint64_t v21 = v17;
  v21[1] = (uint64_t)v18;
  swift_bridgeObjectRetain();
  v22._uint64_t countAndFlagsBits = v17;
  v22._object = v19;
  v23._uint64_t countAndFlagsBits = 1701667182;
  v23._object = (void *)0xE400000000000000;
  validate(_:named:)(v22, v23);
  char v7 = v24;
  if (v24)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v9);
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    int v10 = 1;
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGInput]);
  char v157 = 2;
  lazy protocol witness table accessor for type [SGInput] and conformance <A> [A]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)&v20[OBJC_IVAR___SGGraph_inputs] = v158;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGOutput]);
  char v157 = 3;
  lazy protocol witness table accessor for type [SGOutput] and conformance <A> [A]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v145 = (uint64_t)&v20[OBJC_IVAR___SGGraph_outputs];
  *(void *)&v20[OBJC_IVAR___SGGraph_outputs] = v158;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGNode]);
  char v157 = 0;
  lazy protocol witness table accessor for type [SGNode] and conformance <A> [A]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v141 = v6;
  uint64_t v142 = v9;
  unint64_t v25 = v158;
  swift_beginAccess();
  unint64_t v26 = swift_bridgeObjectRetain();
  uint64_t v27 = specialized static SGGraph.generateArgumentsNode(inputs:)(v26);
  swift_bridgeObjectRelease();
  uint64_t v28 = OBJC_IVAR___SGGraph_argumentsNode;
  *(void *)&v20[OBJC_IVAR___SGGraph_argumentsNode] = v27;
  swift_beginAccess();
  unint64_t v29 = swift_bridgeObjectRetain();
  uint64_t v30 = specialized static SGGraph.generateResultsNode(outputs:)(v29);
  swift_bridgeObjectRelease();
  uint64_t v145 = OBJC_IVAR___SGGraph_resultsNode;
  *(void *)&v20[OBJC_IVAR___SGGraph_resultsNode] = v30;
  uint64_t v31 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGNodeCG_SSs5NeverOTg504_s11d29Graph7SGGraphC6insertyySayAA6F62CGSgKFSSAFcfu_32b446a066102f7f77dfc7f44f189789ecAFSSTf3nnnpk_nTf1cn_nTm(v25, (uint64_t)v159, &OBJC_IVAR___SGNode_name);
  unint64_t v140 = 0;
  uint64_t v32 = specialized Set.init<A>(_:)(v31);
  swift_bridgeObjectRelease();
  uint64_t v33 = &OBJC_IVAR___SGNode_name;
  uint64_t v34 = (uint64_t *)(*(void *)&v20[v28] + OBJC_IVAR___SGNode_name);
  uint64_t v35 = *v34;
  uint64_t v36 = v34[1];
  swift_bridgeObjectRetain();
  LOBYTE(v27) = specialized Set.contains(_:)(v35, v36, v32);
  swift_bridgeObjectRelease();
  if (v27)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v155 = 0;
    *(void *)&long long v156 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    uint64_t v155 = 0xD000000000000017;
    *(void *)&long long v156 = 0x800000025C427150;
    uint64_t v37 = *(void *)&v20[v28];
LABEL_22:
    uint64_t v42 = (uint64_t *)(v37 + OBJC_IVAR___SGNode_name);
    uint64_t v43 = *v42;
    uint64_t v44 = (void *)v42[1];
    swift_bridgeObjectRetain();
    v45._uint64_t countAndFlagsBits = v43;
    v45._object = v44;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    uint64_t v46 = v155;
    uint64_t v47 = v156;
    lazy protocol witness table accessor for type APIError and conformance APIError();
    char v7 = (void *)swift_allocError();
    *(void *)uint64_t v48 = v46;
    *(void *)(v48 + 8) = v47;
    *(unsigned char *)(v48 + 16) = 14;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v141, v142);
    int v10 = 1;
    int v11 = 1;
    int v12 = 1;
    int v13 = 1;
LABEL_4:
    int64_t v14 = (char *)type metadata accessor for SGError();
    id v15 = v7;
    SGError.__allocating_init(_:)(v7);
    swift_willThrow();

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v148);
    if (v10)
    {
      swift_bridgeObjectRelease();
      if (!v11) {
        goto LABEL_11;
      }
    }
    else if (!v11)
    {
LABEL_11:
      if (v12)
      {
        swift_bridgeObjectRelease();
        if (!v13) {
          goto LABEL_13;
        }
      }
      else if (!v13)
      {
LABEL_13:

        goto LABEL_14;
      }

      swift_bridgeObjectRelease();
LABEL_14:
      swift_deallocPartialClassInstance();
      return (uint64_t)v14;
    }

    goto LABEL_11;
  }
  BOOL v38 = (uint64_t *)(*(void *)&v20[v145] + OBJC_IVAR___SGNode_name);
  uint64_t v39 = *v38;
  uint64_t v40 = v38[1];
  swift_bridgeObjectRetain();
  char v41 = specialized Set.contains(_:)(v39, v40, v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v41)
  {
    swift_bridgeObjectRelease();
    uint64_t v155 = 0;
    *(void *)&long long v156 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    uint64_t v155 = 0xD000000000000017;
    *(void *)&long long v156 = 0x800000025C427150;
    uint64_t v37 = *(void *)&v20[v145];
    goto LABEL_22;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_25C41A140;
  uint64_t v50 = *(void **)&v20[v28];
  *(void *)(v49 + 32) = v50;
  objc_super v51 = *(void **)&v20[v145];
  *(void *)(v49 + 40) = v51;
  uint64_t v155 = v49;
  specialized Array._endMutation()();
  id v52 = v50;
  id v53 = v51;
  specialized Array.append<A>(contentsOf:)(v25);
  unint64_t v54 = v155;
  long long v134 = &v20[OBJC_IVAR___SGGraph_nodes];
  *(void *)&v20[OBJC_IVAR___SGGraph_nodes] = v155;
  if (v54 >> 62) {
    goto LABEL_93;
  }
  uint64_t v55 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_25:
  unint64_t v56 = MEMORY[0x263F8EE78];
  if (v55)
  {
    uint64_t v155 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55 & ~(v55 >> 63), 0);
    if (v55 < 0)
    {
      __break(1u);
LABEL_95:
      swift_bridgeObjectRetain_n();
      uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
      goto LABEL_41;
    }
    unint64_t v57 = 0;
    uint64_t v58 = v155;
    unint64_t v143 = v54 & 0xC000000000000001;
    uint64_t v145 = v54;
    long long v144 = (uint64_t *)v55;
    do
    {
      if (v143) {
        uint64_t v59 = (char *)MEMORY[0x2611848A0](v57, v54);
      }
      else {
        uint64_t v59 = (char *)*(id *)(v54 + 8 * (void)v57 + 32);
      }
      char v60 = v59;
      uint64_t v61 = *(void *)&v59[OBJC_IVAR___SGNode_name];
      uint64_t v62 = *(void *)&v59[OBJC_IVAR___SGNode_name + 8];
      uint64_t v155 = v58;
      unint64_t v63 = *(void *)(v58 + 16);
      unint64_t v64 = *(void *)(v58 + 24);
      swift_bridgeObjectRetain();
      if (v63 >= v64 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v63 + 1, 1);
        uint64_t v58 = v155;
      }
      unint64_t v57 = (uint64_t *)((char *)v57 + 1);
      *(void *)(v58 + 16) = v63 + 1;
      uint64_t v65 = (void *)(v58 + 24 * v63);
      v65[4] = v61;
      v65[5] = v62;
      v65[6] = v60;
      unint64_t v54 = v145;
    }
    while (v144 != v57);
    swift_bridgeObjectRelease();
    unint64_t v56 = MEMORY[0x263F8EE78];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v58 = MEMORY[0x263F8EE78];
  }
  unint64_t v66 = v140;
  unint64_t v67 = (void *)v56;
  if ((v56 & 0xC000000000000000) != 0) {
    unint64_t v67 = specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x263F8EE78]);
  }
  uint64_t v155 = 0;
  *(void *)&long long v156 = v56;
  *((void *)&v156 + 1) = v67;
  specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:)(v58, (void (*)(uint64_t *__return_ptr, void *))specialized closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:), 0, &v155);
  if (v66)
  {
LABEL_113:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    __break(1u);
    goto LABEL_114;
  }
  swift_bridgeObjectRelease();
  long long v68 = v156;
  uint64_t v69 = &v20[OBJC_IVAR___SGGraph_nodeMap];
  *(void *)uint64_t v69 = v155;
  *(_OWORD *)(v69 + 8) = v68;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGEdge]);
  LOBYTE(v151) = 1;
  lazy protocol witness table accessor for type [SGEdge] and conformance <A> [A]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v33 = 0;
  uint64_t v133 = v155;
  unint64_t v70 = v134;
  swift_beginAccess();
  unint64_t v71 = *(void *)v70;
  uint64_t v150 = MEMORY[0x263F8EE78];
  unint64_t v137 = v71;
  if (v71 >> 62) {
    goto LABEL_95;
  }
  uint64_t v72 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
LABEL_41:
  uint64_t v20 = v149;
  if (v72)
  {
    uint64_t v73 = v72;
    unint64_t v54 = 0;
    unint64_t v138 = v137 & 0xC000000000000001;
    unint64_t v135 = v137 + 32;
    unint64_t v136 = v72;
    while (1)
    {
      if (v138) {
        unint64_t v74 = (char *)MEMORY[0x2611848A0](v54, v137);
      }
      else {
        unint64_t v74 = (char *)*(id *)(v135 + 8 * v54);
      }
      char v75 = v74;
      BOOL v76 = __OFADD__(v54++, 1);
      if (v76)
      {
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        swift_bridgeObjectRetain();
        uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
        goto LABEL_25;
      }
      unint64_t v77 = *(void *)&v74[OBJC_IVAR___SGNode_inputs];
      if (v77 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v78 = _CocoaArrayWrapper.endIndex.getter();
        if (v78)
        {
LABEL_50:
          unint64_t v140 = v75;
          unint64_t v139 = v54;
          uint64_t v154 = (uint64_t *)MEMORY[0x263F8EE78];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v78 & ~(v78 >> 63), 0);
          uint64_t v149 = (char *)v78;
          if (v78 < 0) {
            goto LABEL_91;
          }
          uint64_t v79 = 0;
          uint64_t v80 = (uint64_t)v154;
          long long v144 = (uint64_t *)&v140[OBJC_IVAR___SGNode_name];
          unint64_t v143 = v77 & 0xC000000000000001;
          uint64_t v145 = v77;
          do
          {
            if (v143) {
              uint64_t v81 = (char *)MEMORY[0x2611848A0](v79, v77);
            }
            else {
              uint64_t v81 = (char *)*(id *)(v77 + 8 * (void)v79 + 32);
            }
            uint64_t v82 = v81;
            uint64_t v83 = v144[1];
            uint64_t v151 = *v144;
            uint64_t v152 = v83;
            swift_bridgeObjectRetain();
            v84._uint64_t countAndFlagsBits = 58;
            v84._object = (void *)0xE100000000000000;
            String.append(_:)(v84);
            uint64_t v85 = *(void *)&v82[OBJC_IVAR___SGInput_name];
            uint64_t v86 = *(void **)&v82[OBJC_IVAR___SGInput_name + 8];
            swift_bridgeObjectRetain();
            v87._uint64_t countAndFlagsBits = v85;
            v87._object = v86;
            String.append(_:)(v87);
            swift_bridgeObjectRelease();
            uint64_t v88 = v82;
            uint64_t v89 = v151;
            uint64_t v90 = v152;
            uint64_t v154 = (uint64_t *)v80;
            unint64_t v92 = *(void *)(v80 + 16);
            unint64_t v91 = *(void *)(v80 + 24);
            if (v92 >= v91 >> 1)
            {
              unint64_t v94 = v88;
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v91 > 1, v92 + 1, 1);
              uint64_t v88 = v94;
              uint64_t v80 = (uint64_t)v154;
            }
            ++v79;
            *(void *)(v80 + 16) = v92 + 1;
            unint64_t v93 = (void *)(v80 + 24 * v92);
            v93[4] = v89;
            v93[5] = v90;
            v93[6] = v88;
            unint64_t v77 = v145;
          }
          while (v149 != v79);

          swift_bridgeObjectRelease();
          uint64_t v73 = v136;
          unint64_t v54 = v139;
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v78 = *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v78) {
          goto LABEL_50;
        }
      }

      swift_bridgeObjectRelease();
      uint64_t v80 = MEMORY[0x263F8EE78];
LABEL_43:
      specialized Array.append<A>(contentsOf:)(v80);
      if (v54 == v73)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v95 = v150;
        goto LABEL_63;
      }
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v95 = MEMORY[0x263F8EE78];
LABEL_63:
  if (*(void *)(v95 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SGInput>);
    uint64_t v96 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v96 = MEMORY[0x263F8EE80];
  }
  uint64_t v151 = v96;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v95, 1, &v151, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
  long long v131 = v33;
  if (!v33)
  {
    swift_bridgeObjectRelease();
    uint64_t v132 = v151;
    unint64_t v97 = *(void *)v134;
    uint64_t v33 = (uint64_t *)MEMORY[0x263F8EE78];
    uint64_t v150 = MEMORY[0x263F8EE78];
    if (v97 >> 62)
    {
      swift_bridgeObjectRetain_n();
      unint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
      if (v54) {
        goto LABEL_69;
      }
    }
    else
    {
      unint64_t v54 = *(void *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v54)
      {
LABEL_69:
        unint64_t v98 = 0;
        unint64_t v138 = v97 & 0xC000000000000001;
        unint64_t v135 = v97 + 32;
        unint64_t v137 = v97;
        unint64_t v136 = v54;
        while (1)
        {
          if (v138) {
            long long v99 = (char *)MEMORY[0x2611848A0](v98, v97);
          }
          else {
            long long v99 = (char *)*(id *)(v135 + 8 * v98);
          }
          uint64_t v100 = v99;
          BOOL v76 = __OFADD__(v98++, 1);
          if (v76) {
            goto LABEL_90;
          }
          unint64_t v101 = *(void *)&v99[OBJC_IVAR___SGNode_outputs];
          if (v101 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v102 = _CocoaArrayWrapper.endIndex.getter();
            if (v102)
            {
LABEL_77:
              unint64_t v140 = v100;
              unint64_t v139 = v98;
              uint64_t v154 = v33;
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v102 & ~(v102 >> 63), 0);
              uint64_t v149 = (char *)v102;
              if (v102 < 0) {
                goto LABEL_92;
              }
              uint64_t v103 = 0;
              uint64_t v33 = v154;
              long long v144 = (uint64_t *)&v140[OBJC_IVAR___SGNode_name];
              unint64_t v143 = v101 & 0xC000000000000001;
              uint64_t v145 = v101;
              do
              {
                if (v143) {
                  uint64_t v104 = (char *)MEMORY[0x2611848A0](v103, v101);
                }
                else {
                  uint64_t v104 = (char *)*(id *)(v101 + 8 * (void)v103 + 32);
                }
                uint64_t v105 = v104;
                uint64_t v106 = v144[1];
                uint64_t v151 = *v144;
                uint64_t v152 = v106;
                swift_bridgeObjectRetain();
                v107._uint64_t countAndFlagsBits = 58;
                v107._object = (void *)0xE100000000000000;
                String.append(_:)(v107);
                uint64_t v108 = *(void *)&v105[OBJC_IVAR___SGOutput_name];
                uint64_t v109 = *(void **)&v105[OBJC_IVAR___SGOutput_name + 8];
                swift_bridgeObjectRetain();
                v110._uint64_t countAndFlagsBits = v108;
                v110._object = v109;
                String.append(_:)(v110);
                swift_bridgeObjectRelease();
                uint64_t v111 = v151;
                uint64_t v112 = v152;
                uint64_t v154 = v33;
                unint64_t v114 = v33[2];
                unint64_t v113 = v33[3];
                if (v114 >= v113 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v113 > 1, v114 + 1, 1);
                  uint64_t v33 = v154;
                }
                ++v103;
                v33[2] = v114 + 1;
                uint64_t v115 = &v33[3 * v114];
                v115[4] = v111;
                v115[5] = v112;
                v115[6] = (uint64_t)v105;
                unint64_t v101 = v145;
              }
              while (v149 != v103);

              swift_bridgeObjectRelease();
              unint64_t v97 = v137;
              unint64_t v54 = v136;
              unint64_t v98 = v139;
              goto LABEL_70;
            }
          }
          else
          {
            uint64_t v102 = *(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v102) {
              goto LABEL_77;
            }
          }

          swift_bridgeObjectRelease();
LABEL_70:
          specialized Array.append<A>(contentsOf:)((uint64_t)v33);
          uint64_t v33 = (uint64_t *)MEMORY[0x263F8EE78];
          if (v98 == v54)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v116 = v150;
            goto LABEL_98;
          }
        }
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v116 = MEMORY[0x263F8EE78];
LABEL_98:
    unint64_t v117 = v133;
    uint64_t v118 = v132;
    if (*(void *)(v116 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SGOutput>);
      uint64_t v119 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v119 = MEMORY[0x263F8EE80];
    }
    uint64_t v151 = v119;
    int v120 = v131;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v116, 1, &v151, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
    if (!v120)
    {
      swift_bridgeObjectRelease();
      uint64_t v121 = v151;
      swift_retain();
      swift_retain();
      uint64_t v122 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGEdgeCG_AHsAE_pTg504_s11d41Graph7SGGraphC4fromACs7Decoder_p_tKcfcAA6F10CAGKXEfU5_SDySSAF7SGInputCGSDySSAF8SGOutputCGTf1cn_nTf4ngg_n(v117, v118, v121);
      uint64_t v149 = 0;
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_release_n();
      *(void *)&v20[OBJC_IVAR___SGGraph_edges] = v122;

      v153.receiver = v20;
      v153.super_class = ObjectType;
      int64_t v14 = (char *)objc_msgSendSuper2(&v153, sel_init);
      uint64_t v123 = &v14[OBJC_IVAR___SGGraph_nodes];
      swift_beginAccess();
      unint64_t v124 = *(void *)v123;
      if (v124 >> 62)
      {
        swift_bridgeObjectRetain_n();
        long long v130 = v14;
        uint64_t v125 = _CocoaArrayWrapper.endIndex.getter();
        if (v125) {
          goto LABEL_104;
        }
      }
      else
      {
        uint64_t v125 = *(void *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        uint64_t v126 = v14;
        if (v125)
        {
LABEL_104:
          if (v125 >= 1)
          {
            uint64_t v127 = 0;
            do
            {
              if ((v124 & 0xC000000000000001) != 0) {
                id v128 = (id)MEMORY[0x2611848A0](v127, v124);
              }
              else {
                id v128 = *(id *)(v124 + 8 * v127 + 32);
              }
              int v129 = v128;
              ++v127;
              swift_beginAccess();
              swift_unknownObjectWeakAssign();
            }
            while (v125 != v127);
            goto LABEL_111;
          }
          __break(1u);
          goto LABEL_113;
        }
      }
LABEL_111:
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v146 + 8))(v141, v142);

      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v148);
      return (uint64_t)v14;
    }
  }
LABEL_114:
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t closure #7 in SGGraph.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *(void *)(*a1 + OBJC_IVAR___SGEdge_to);
  uint64_t v8 = (uint64_t *)(v7 + OBJC_IVAR___SGInput_attachment);
  swift_beginAccess();
  uint64_t v9 = v8[1];
  if (!v9
    || (uint64_t v10 = *v8,
        uint64_t v11 = OBJC_IVAR___SGEdge_from,
        int v12 = (uint64_t *)(*(void *)(v6 + OBJC_IVAR___SGEdge_from) + OBJC_IVAR___SGOutput_attachment),
        swift_beginAccess(),
        (uint64_t v13 = v12[1]) == 0))
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v40 = swift_allocError();
    *(void *)uint64_t v39 = 0xD00000000000001ELL;
    unint64_t v41 = 0x800000025C427350;
    uint64_t v42 = a4;
LABEL_14:
    *(void *)(v39 + 8) = v41;
    *(unsigned char *)(v39 + 16) = 14;
    uint64_t result = swift_willThrow();
    *uint64_t v42 = v40;
    return result;
  }
  uint64_t v14 = *v12;
  uint64_t v47 = v10;
  uint64_t v48 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = 58;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  uint64_t v16 = *(void *)(v7 + OBJC_IVAR___SGInput_name);
  uint64_t v17 = *(void **)(v7 + OBJC_IVAR___SGInput_name + 8);
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  uint64_t v47 = v14;
  uint64_t v48 = v13;
  v19._uint64_t countAndFlagsBits = 58;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  uint64_t v20 = (uint64_t *)(*(void *)(v6 + v11) + OBJC_IVAR___SGOutput_name);
  uint64_t v21 = *v20;
  Swift::String v22 = (void *)v20[1];
  swift_bridgeObjectRetain();
  v23._uint64_t countAndFlagsBits = v21;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  if (!*(void *)(a2 + 16) || (unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9), (v25 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_13:
    uint64_t v42 = a4;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v40 = swift_allocError();
    *(void *)uint64_t v39 = 0xD000000000000012;
    unint64_t v41 = 0x800000025C427370;
    goto LABEL_14;
  }
  id v26 = *(id *)(*(void *)(a2 + 56) + 8 * v24);
  swift_bridgeObjectRelease();
  if (!*(void *)(a3 + 16) || (unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v13), (v28 & 1) == 0))
  {

    goto LABEL_13;
  }
  id v29 = *(id *)(*(void *)(a3 + 56) + 8 * v27);
  swift_bridgeObjectRelease();
  uint64_t v30 = (objc_class *)type metadata accessor for SGEdge();
  uint64_t v31 = (char *)objc_allocWithZone(v30);
  *(void *)&v31[OBJC_IVAR___SGEdge_from] = v29;
  *(void *)&v31[OBJC_IVAR___SGEdge_to] = v26;
  v49.receiver = v31;
  v49.super_class = v30;
  id v32 = v26;
  uint64_t v33 = (char *)v29;
  id v34 = objc_msgSendSuper2(&v49, sel_init);
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<SGEdge>((uint64_t)v46, (uint64_t)v50);
  uint64_t v35 = (uint64_t *)&v33[OBJC_IVAR___SGOutput_edges];
  swift_beginAccess();
  specialized OrderedSet._find(_:)((uint64_t)v50, *v35, v35[1]);
  if (v37) {
    specialized OrderedSet._appendNew(_:in:)((uint64_t)v50, v36);
  }
  swift_endAccess();

  uint64_t result = outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v50, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  *a5 = v34;
  return result;
}

void SGGraph.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SGGraph.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v32 = 4;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    type metadata accessor for SGError();
    id v24 = v2;
    SGError.__allocating_init(_:)(v2);
    swift_willThrow();
  }
  else
  {
    uint64_t v10 = (uint64_t *)(v3 + OBJC_IVAR___SGGraph_inputs);
    swift_beginAccess();
    uint64_t v31 = *v10;
    LOBYTE(v30) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGInput]);
    lazy protocol witness table accessor for type [SGInput] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = (uint64_t *)(v3 + OBJC_IVAR___SGGraph_outputs);
    swift_beginAccess();
    uint64_t v30 = *v11;
    LOBYTE(v33) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGOutput]);
    lazy protocol witness table accessor for type [SGOutput] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    int v12 = (unint64_t *)(v3 + OBJC_IVAR___SGGraph_nodes);
    swift_beginAccess();
    unint64_t v13 = *v12;
    uint64_t v28 = v13 >> 62;
    if (!(v13 >> 62))
    {
      unint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v14 >= 2)
      {
LABEL_4:
        if ((v13 & 0xC000000000000001) != 0 && v14 != 2)
        {
          type metadata accessor for SGNode();
          Swift::Int v15 = 2;
          do
          {
            Swift::Int v16 = v15 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v15);
            Swift::Int v15 = v16;
          }
          while (v14 != v16);
        }
        if (v28)
        {
          swift_bridgeObjectRetain();
          uint64_t v9 = _CocoaArrayWrapper.subscript.getter();
          uint64_t v17 = v18;
          uint64_t v28 = v19;
          unint64_t v14 = v20;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v9 = v13 & 0xFFFFFFFFFFFFFF8;
          uint64_t v17 = (v13 & 0xFFFFFFFFFFFFFF8) + 32;
          unint64_t v14 = (2 * v14) | 1;
          swift_bridgeObjectRetain();
          uint64_t v28 = 2;
        }
        swift_endAccess();
        if ((v14 & 1) == 0) {
          goto LABEL_12;
        }
        uint64_t v27 = v17;
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        uint64_t v22 = swift_dynamicCastClass();
        if (!v22)
        {
          swift_unknownObjectRelease();
          uint64_t v22 = MEMORY[0x263F8EE78];
        }
        uint64_t v23 = *(void *)(v22 + 16);
        swift_release();
        if (!__OFSUB__(v14 >> 1, v28))
        {
          if (v23 == (v14 >> 1) - v28)
          {
            uint64_t v21 = swift_dynamicCastClass();
            if (!v21)
            {
              swift_unknownObjectRelease();
              uint64_t v21 = MEMORY[0x263F8EE78];
            }
            goto LABEL_19;
          }
          goto LABEL_27;
        }
LABEL_26:
        __break(1u);
LABEL_27:
        swift_unknownObjectRelease();
        uint64_t v17 = v27;
LABEL_12:
        uint64_t v21 = specialized _copyCollectionToContiguousArray<A>(_:)(v9, v17, v28, v14);
LABEL_19:
        swift_unknownObjectRelease();
        uint64_t v30 = v21;
        LOBYTE(v33) = 0;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGNode]);
        lazy protocol witness table accessor for type [SGNode] and conformance <A> [A]();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        swift_release();
        char v25 = (uint64_t *)(v3 + OBJC_IVAR___SGGraph_edges);
        swift_beginAccess();
        uint64_t v33 = *v25;
        char v29 = 1;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SGEdge]);
        lazy protocol witness table accessor for type [SGEdge] and conformance <A> [A]();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        return;
      }
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    swift_bridgeObjectRetain();
    unint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((uint64_t)v14 < 2)
    {
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v26 >= 2)
      {
        swift_bridgeObjectRetain();
        uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v9 >= (uint64_t)v14) {
          goto LABEL_4;
        }
        __break(1u);
        goto LABEL_25;
      }
    }
    __break(1u);
  }
}

uint64_t SGGraph.bodyNodes.getter()
{
  uint64_t v1 = (unint64_t *)(v0 + OBJC_IVAR___SGGraph_nodes);
  uint64_t result = swift_beginAccess();
  unint64_t v3 = *v1;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v4 < 2)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9 < 2)
    {
LABEL_19:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v10 >= v4) {
      goto LABEL_3;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if ((unint64_t)v4 < 2) {
    goto LABEL_17;
  }
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0 && v4 != 2)
  {
    type metadata accessor for SGNode();
    Swift::Int v6 = 2;
    do
    {
      Swift::Int v7 = v6 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v6);
      Swift::Int v6 = v7;
    }
    while (v4 != v7);
  }
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.subscript.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  swift_endAccess();
  return v8;
}

id SGGraph.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void SGGraph.init()()
{
}

id SGGraph.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SGGraph@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v6 = objc_allocWithZone(v2);
  uint64_t result = SGGraph.init(from:)(a1);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance SGGraph(void *a1)
{
}

void *static SGGraph.create(data:)(uint64_t a1, unint64_t a2)
{
  return specialized static SGGraph.create(data:)(a1, a2);
}

unint64_t SGGraph.node(named:)(uint64_t a1, void *a2)
{
  if (!a2)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v8 = (void *)swift_allocError();
    *(_OWORD *)uint64_t v9 = xmmword_25C4197E0;
    *(unsigned char *)(v9 + 16) = 1;
    swift_willThrow();
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = a1;
  v5._object = a2;
  v6._uint64_t countAndFlagsBits = 1701667182;
  v6._object = (void *)0xE400000000000000;
  validate(_:named:)(v5, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
LABEL_5:
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)logger);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    id v12 = v8;
    id v13 = v8;
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = v11;
    if (os_log_type_enabled(v14, v11))
    {
      Swift::Int v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v29[0] = v17;
      *(_DWORD *)Swift::Int v16 = 136315138;
      uint64_t v30 = (uint64_t)v8;
      id v18 = v8;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v19 = String.init<A>(describing:)();
      uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_25C27E000, v14, v15, "%s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261185880](v17, -1, -1);
      MEMORY[0x261185880](v16, -1, -1);
    }
    else
    {
    }
    return 0;
  }
  uint64_t v22 = (uint64_t *)(v2 + OBJC_IVAR___SGGraph_nodeMap);
  swift_beginAccess();
  uint64_t v23 = *v22;
  id v24 = (void *)v22[1];
  uint64_t v25 = v22[2];
  swift_bridgeObjectRetain();
  unint64_t result = specialized OrderedSet._find(_:)(a1, (uint64_t)a2, v23, v24);
  uint64_t v21 = 0;
  if (v27)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_bridgeObjectRelease();
    return (unint64_t)v21;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)(v25 + 16))
  {
    uint64_t v21 = *(void **)(v25 + 8 * result + 32);
    id v28 = v21;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SGGraph.connect(outputInputPairs:)(Swift::OpaquePointer_optional outputInputPairs)
{
  if (!outputInputPairs.value._rawValue)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_OWORD *)uint64_t v6 = xmmword_25C41D6B0;
    char v9 = 1;
LABEL_36:
    *(unsigned char *)(v6 + 16) = v9;
    swift_willThrow();
    return;
  }
  uint64_t v2 = v1;
  unint64_t rawValue = (unint64_t)outputInputPairs.value._rawValue;
  uint64_t v4 = (uint64_t)outputInputPairs.value._rawValue & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)outputInputPairs.value._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if ((v5 & 1) == 0) {
      goto LABEL_4;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    unint64_t v7 = 0xD00000000000003BLL;
    uint64_t v8 = "connectOutputInputPairs requires an even number of elements";
    goto LABEL_35;
  }
  uint64_t v5 = *(void *)(((uint64_t)outputInputPairs.value._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v5) {
    goto LABEL_34;
  }
LABEL_4:
  if (v5 < 2)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    unint64_t v7 = 0xD000000000000032;
    uint64_t v8 = "connectOutputInputPairs requires at least one pair";
LABEL_35:
    *(void *)uint64_t v6 = v7;
    *(void *)(v6 + 8) = (unint64_t)(v8 - 32) | 0x8000000000000000;
    char v9 = 5;
    goto LABEL_36;
  }
  uint64_t v10 = 0;
  unint64_t v11 = rawValue & 0xC000000000000001;
  while (1)
  {
    if (v11)
    {
      MEMORY[0x2611848A0](v10, rawValue);
      goto LABEL_12;
    }
    if ((unint64_t)v10 >= *(void *)(v4 + 16)) {
      break;
    }
    swift_unknownObjectRetain();
LABEL_12:
    type metadata accessor for SGOutput();
    uint64_t v12 = swift_dynamicCastClass();
    if (!v12)
    {
      swift_unknownObjectRelease();
      _StringGuts.grow(_:)(44);
      v16._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v16._object = (void *)0x800000025C4271D0;
      String.append(_:)(v16);
      v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._uint64_t countAndFlagsBits = 0x6F66207475622027;
      v18._object = (void *)0xED00002720646E75;
      String.append(_:)(v18);
      if (v11) {
        MEMORY[0x2611848A0](v10, rawValue);
      }
      else {
        swift_unknownObjectRetain();
      }
      swift_bridgeObjectRelease();
      _print_unlocked<A, B>(_:_:)();
      swift_unknownObjectRelease();
      v22._uint64_t countAndFlagsBits = 39;
      v22._object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      lazy protocol witness table accessor for type APIError and conformance APIError();
      swift_allocError();
      *(void *)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0xE000000000000000;
      char v9 = 6;
      goto LABEL_36;
    }
    id v13 = (char *)v12;
    if (v10 + 1 >= v5)
    {
      swift_unknownObjectRelease();
LABEL_28:
      swift_bridgeObjectRelease();
      return;
    }
    if (v11)
    {
      MEMORY[0x2611848A0]();
    }
    else
    {
      if ((unint64_t)(v10 + 1) >= *(void *)(v4 + 16)) {
        goto LABEL_38;
      }
      swift_unknownObjectRetain();
    }
    type metadata accessor for SGInput();
    uint64_t v14 = swift_dynamicCastClass();
    if (!v14)
    {
      swift_unknownObjectRelease();
      _StringGuts.grow(_:)(43);
      v19._object = (void *)0x800000025C4271F0;
      v19._uint64_t countAndFlagsBits = 0xD000000000000019;
      String.append(_:)(v19);
      v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._uint64_t countAndFlagsBits = 0x6F66207475622027;
      v21._object = (void *)0xED00002720646E75;
      String.append(_:)(v21);
      if ((rawValue & 0xC000000000000001) != 0) {
        MEMORY[0x2611848A0](v10 + 1, rawValue);
      }
      else {
        swift_unknownObjectRetain();
      }
      swift_bridgeObjectRelease();
      _print_unlocked<A, B>(_:_:)();
      swift_unknownObjectRelease();
      v23._uint64_t countAndFlagsBits = 39;
      v23._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      lazy protocol witness table accessor for type APIError and conformance APIError();
      swift_allocError();
      *(void *)uint64_t v24 = 0;
      *(void *)(v24 + 8) = 0xE000000000000000;
      *(unsigned char *)(v24 + 16) = 7;
      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }
    os_log_type_t v15 = (char *)v14;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    SGGraph.connect(_:to:)(v13, v15);
    if (v2)
    {
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease_n();
      goto LABEL_28;
    }
    swift_unknownObjectRelease_n();
    swift_unknownObjectRelease_n();
    v10 += 2;
    unint64_t v11 = rawValue & 0xC000000000000001;
    if (v10 >= v5) {
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
}

void SGGraph.extract(node:)(uint64_t a1)
{
  uint64_t v4 = v2;
  unint64_t v5 = v1;
  uint64_t v6 = a1;
  unint64_t v7 = *(void *)(a1 + OBJC_IVAR___SGNode_inputs);
  if (v7 >> 62)
  {
LABEL_113:
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_122;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v8) {
      goto LABEL_122;
    }
  }
  if ((v7 & 0xC000000000000001) != 0) {
    goto LABEL_119;
  }
  if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    char v9 = (char *)*(id *)(v7 + 32);
    goto LABEL_6;
  }
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  id v11 = (id)MEMORY[0x2611848A0](0, v6);
  while (2)
  {
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    unint64_t v13 = specialized SGGraph.edges(from:)((uint64_t)v12);
    uint64_t v14 = &v3[OBJC_IVAR___SGInput_edge];
    swift_beginAccess();
    uint64_t v15 = MEMORY[0x261185960](v14);
    Swift::String v16 = (void *)v15;
    if (v15)
    {
      Swift::String v17 = (id *)(v15 + OBJC_IVAR___SGEdge_from);
      swift_beginAccess();
      id v18 = *v17;
      Swift::String v19 = v16;
      SGGraph.remove(edge:)((uint64_t)v19);
      if (v4)
      {

        swift_bridgeObjectRelease();
        uint64_t v12 = v18;
        Swift::String v20 = v19;
        uint64_t v3 = v19;
        goto LABEL_107;
      }
      long long v68 = v16;

      Swift::String v16 = v18;
      if (v13 >> 62)
      {
LABEL_109:
        swift_bridgeObjectRetain();
        uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
        if (!v6)
        {
LABEL_110:

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return;
        }
        goto LABEL_16;
      }
    }
    else
    {
      long long v68 = 0;
      if (v13 >> 62) {
        goto LABEL_109;
      }
    }
    uint64_t v6 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v6) {
      goto LABEL_110;
    }
LABEL_16:
    unint64_t v75 = v13 & 0xC000000000000001;
    uint64_t v80 = (uint64_t *)(v5 + OBJC_IVAR___SGGraph_edges);
    swift_beginAccess();
    unint64_t v21 = 0;
    unint64_t v67 = v13 + 32;
    unint64_t v70 = v5;
    unint64_t v71 = v16;
    uint64_t v73 = v12;
    unint64_t v74 = v3;
    unint64_t v72 = v13;
    uint64_t v69 = v6;
    while (2)
    {
      if (v75) {
        Swift::String v23 = (char *)MEMORY[0x2611848A0](v21, v13);
      }
      else {
        Swift::String v23 = (char *)*(id *)(v67 + 8 * v21);
      }
      uint64_t v24 = v23;
      BOOL v25 = __OFADD__(v21, 1);
      unint64_t v7 = v21 + 1;
      if (v25) {
        goto LABEL_117;
      }
      uint64_t v79 = v4;
      uint64_t v76 = OBJC_IVAR___SGEdge_to;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();
      uint64_t v26 = *(void *)&v24[OBJC_IVAR___SGEdge_from];
      swift_unknownObjectWeakInit();
      uint64_t v27 = swift_unknownObjectWeakAssign();
      outlined init with take of WeakBox<SGEdge>(v27, (uint64_t)v82);
      uint64_t v28 = v26 + OBJC_IVAR___SGOutput_edges;
      swift_beginAccess();
      uint64_t v29 = *(void *)v28;
      uint64_t v30 = *(void *)(v28 + 8);
      uint64_t v31 = v30 + 32;
      uint64_t v6 = *(void *)(v30 + 16);
      unint64_t v78 = v7;
      uint64_t v81 = v24;
      if (*(void *)v28)
      {
        unint64_t v77 = v28 + 8;
        swift_retain();
        Swift::Int v32 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v82, v31, v6, (void *)(v29 + 16), v29 + 32);
        uint64_t v6 = v33;
        unint64_t v7 = v34;
        swift_release();
        if ((v6 & 1) == 0) {
          goto LABEL_38;
        }
LABEL_36:
        uint64_t v83 = 0;
        char v38 = 1;
        goto LABEL_67;
      }
      if (!v6) {
        goto LABEL_36;
      }
      unint64_t v77 = v28 + 8;
      Swift::Int v32 = 0;
      while (1)
      {
        outlined init with copy of WeakBox<SGEdge>(v31, (uint64_t)&v83);
        unint64_t v7 = MEMORY[0x261185960](&v83);
        uint64_t v35 = MEMORY[0x261185960](v82);
        uint64_t v36 = (void *)v35;
        if (!v7)
        {
          if (!v35) {
            goto LABEL_37;
          }
          goto LABEL_29;
        }
        if (v35) {
          break;
        }
        uint64_t v36 = (void *)v7;
LABEL_29:

LABEL_30:
        outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v83, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
        ++v32;
        v31 += 8;
        if (v6 == v32) {
          goto LABEL_36;
        }
      }
      type metadata accessor for SGEdge();
      id v37 = (id)v7;
      unint64_t v7 = static NSObject.== infix(_:_:)();

      if ((v7 & 1) == 0) {
        goto LABEL_30;
      }
LABEL_37:
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v83, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
      unint64_t v7 = 0;
LABEL_38:
      uint64_t v39 = *(void *)v28;
      uint64_t v6 = *(void *)(*(void *)(v28 + 8) + 16);
      if (!*(void *)v28)
      {
        if (v6) {
          goto LABEL_56;
        }
LABEL_57:
        specialized ContiguousArray.remove(at:)(v32, (uint64_t)&v83);
        uint64_t v6 = *(void *)v28;
        unint64_t v7 = *(void *)(v28 + 8);
        if (*(void *)v28)
        {
          swift_beginAccess();
          uint64_t v44 = *(void *)(v6 + 24) & 0x3FLL;
          unint64_t v45 = *(void *)(v7 + 16);
          if (v44)
          {
LABEL_63:
            int64_t v46 = specialized static _HashTable.scale(forCapacity:)(v45);
            if (v44 <= v46) {
              int64_t v47 = v46;
            }
            else {
              int64_t v47 = v44;
            }
            unint64_t v7 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v7, v47, 0, v44);
            swift_release();
            char v38 = 0;
            *(void *)uint64_t v28 = v7;
            goto LABEL_67;
          }
        }
        else
        {
          uint64_t v44 = 0;
          unint64_t v45 = *(void *)(v7 + 16);
        }
        if (v45 < 0x10)
        {
          swift_release();
          char v38 = 0;
          *(void *)uint64_t v28 = 0;
          goto LABEL_67;
        }
        goto LABEL_63;
      }
      swift_beginAccess();
      unint64_t v40 = *(void *)(v39 + 16) & 0x3FLL;
      if (v40 != (*(void *)(v39 + 24) & 0x3FLL) && v40 >= 5)
      {
        double v41 = (double)(1 << v40) * 0.25;
        if ((~*(void *)&v41 & 0x7FF0000000000000) != 0)
        {
          if (v41 > -9.22337204e18)
          {
            if (v41 < 9.22337204e18)
            {
              if (v6 <= (uint64_t)v41) {
                goto LABEL_57;
              }
              goto LABEL_49;
            }
            goto LABEL_132;
          }
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
LABEL_130:
        __break(1u);
        goto LABEL_131;
      }
      if (!v6) {
        goto LABEL_57;
      }
LABEL_49:
      char isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
      uint64_t v6 = *(void *)v28;
      if ((isUniquelyReferenced_native & 1) == 0)
      {
        if (v6)
        {
          uint64_t v6 = _HashTable.copy()(*(void **)v28);
          swift_release();
          *(void *)uint64_t v28 = v6;
          goto LABEL_52;
        }
LABEL_134:
        __break(1u);
LABEL_135:
        _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
LABEL_52:
      if (!v6) {
        goto LABEL_133;
      }
      swift_retain();
      specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v7, (void *)(v6 + 16), v6 + 32, v28);
      if (__OFADD__(v32, 1)) {
        goto LABEL_128;
      }
      if (v32 + 1 < v32) {
        goto LABEL_129;
      }
      uint64_t v43 = *(void *)(v28 + 8);
      swift_retain();
      specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(v32, v32 + 1, v43, (uint64_t *)(v6 + 16), (void *)(v6 + 32));
      swift_release();
      swift_release();
LABEL_56:
      unint64_t v7 = v77;
      specialized ContiguousArray.remove(at:)(v32, (uint64_t)&v83);
      char v38 = 0;
LABEL_67:
      char v84 = v38;
      swift_endAccess();
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v82, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v83, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>?);
      uint64_t v4 = *v80;
      if (!((unint64_t)*v80 >> 62))
      {
        uint64_t v48 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v48) {
          goto LABEL_69;
        }
LABEL_105:
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type APIError and conformance APIError();
        swift_allocError();
        *(void *)uint64_t v66 = 0xD000000000000032;
        *(void *)(v66 + 8) = 0x800000025C427100;
        *(unsigned char *)(v66 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        uint64_t v12 = v73;
        uint64_t v3 = v74;
        Swift::String v16 = v71;

LABEL_106:
        swift_bridgeObjectRelease();

        Swift::String v20 = v68;
LABEL_107:

        return;
      }
      if (v4 < 0) {
        uint64_t v6 = *v80;
      }
      else {
        uint64_t v6 = v4 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v48) {
        goto LABEL_105;
      }
LABEL_69:
      unint64_t v5 = v4 & 0xC000000000000001;
      if ((v4 & 0xC000000000000001) != 0)
      {
        id v49 = (id)MEMORY[0x2611848A0](0, v4);
      }
      else
      {
        if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_118;
        }
        id v49 = *(id *)(v4 + 32);
      }
      uint64_t v50 = v49;
      unint64_t v7 = type metadata accessor for SGEdge();
      char v51 = static NSObject.== infix(_:_:)();

      if (v51)
      {
        unint64_t v52 = 0;
LABEL_81:
        swift_bridgeObjectRelease();
        swift_beginAccess();
        uint64_t v55 = *v80;
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *uint64_t v80 = v55;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v55 < 0 || (v55 & 0x4000000000000000) != 0)
        {
          uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew()(v55);
          *uint64_t v80 = v55;
        }
        uint64_t v6 = v55 & 0xFFFFFFFFFFFFFF8;
        unint64_t v57 = *(void *)(v6 + 16);
        uint64_t v12 = v73;
        uint64_t v3 = v74;
        unint64_t v5 = v70;
        Swift::String v16 = v71;
        unint64_t v13 = v72;
        if (v52 < v57)
        {
          unint64_t v58 = v57 - 1;
          uint64_t v59 = v57 - 1 - v52;
          if (v59 < 0) {
            goto LABEL_135;
          }
          unint64_t v60 = v6 + 8 * v52;
          uint64_t v61 = *(void **)(v60 + 32);
          memmove((void *)(v60 + 32), (const void *)(v60 + 40), 8 * v59);
          *(void *)(v6 + 16) = v58;
          specialized Array._endMutation()();
          swift_endAccess();

          if (v71)
          {
            uint64_t v62 = *(char **)&v81[v76];
            id v22 = v71;
            SGGraph.connect(_:to:)((char *)v71, v62);
            uint64_t v4 = v79;
            if (v79)
            {
              swift_bridgeObjectRelease();

              goto LABEL_106;
            }
          }
          else
          {
            id v22 = v81;
            uint64_t v4 = v79;
          }

          uint64_t v6 = v69;
          unint64_t v21 = v78;
          if (v78 == v69) {
            goto LABEL_110;
          }
          continue;
        }
        goto LABEL_124;
      }
      break;
    }
    if (v48 == 1) {
      goto LABEL_105;
    }
    if (v5)
    {
      id v53 = (id)MEMORY[0x2611848A0](1, v4);
      goto LABEL_79;
    }
    if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
      goto LABEL_127;
    }
    id v53 = *(id *)(v4 + 40);
LABEL_79:
    uint64_t v6 = (uint64_t)v53;
    char v54 = static NSObject.== infix(_:_:)();

    if (v54)
    {
      unint64_t v52 = 1;
      goto LABEL_81;
    }
    uint64_t v3 = (char *)(v4 + 32);
    uint64_t v63 = 1;
    while (2)
    {
      unint64_t v52 = v63 + 1;
      if (__OFADD__(v63, 1))
      {
        __break(1u);
        goto LABEL_113;
      }
      if (v52 == v48) {
        goto LABEL_105;
      }
      if (v5)
      {
        id v64 = (id)MEMORY[0x2611848A0](v63 + 1, v4);
LABEL_92:
        uint64_t v6 = (uint64_t)v64;
        char v65 = static NSObject.== infix(_:_:)();

        ++v63;
        if (v65) {
          goto LABEL_81;
        }
        continue;
      }
      break;
    }
    if ((v52 & 0x8000000000000000) == 0)
    {
      if (v52 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_116;
      }
      id v64 = *(id *)&v3[8 * v52];
      goto LABEL_92;
    }
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    char v9 = (char *)MEMORY[0x2611848A0](0, v7);
LABEL_6:
    uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v6 = *(void *)(v6 + OBJC_IVAR___SGNode_outputs);
    if ((unint64_t)v6 >> 62)
    {
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_121;
      }
LABEL_8:
      if ((v6 & 0xC000000000000001) == 0)
      {
        if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          id v11 = *(id *)(v6 + 32);
          continue;
        }
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
      goto LABEL_125;
    }
    break;
  }
  uint64_t v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v10) {
    goto LABEL_8;
  }
LABEL_121:

LABEL_122:
  swift_bridgeObjectRelease();
}

void closure #4 in SGGraph.collapseConstantAndPassthroughNodes()(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 8);
  id v2 = *(id *)a1;
  id v3 = v1;
  SGGraph.extract(node:)((uint64_t)v2);
}

void closure #2 in SGGraph.surfaceNodeElement(ofType:)(char *a1, void *a2, char a3, void *a4, void **a5)
{
  unint64_t v5 = (uint64_t *)&a1[OBJC_IVAR___SGNode_data];
  if (a1[OBJC_IVAR___SGNode_data + 80] <= 0x3Fu)
  {
    uint64_t v12 = *v5;
    uint64_t v11 = v5[1];
    swift_bridgeObjectRetain();
    unsigned int v13 = specialized Surface.init(nodeDefID:)(v12, v11);
    if (v13 < 3)
    {
      if (a3) {
        return;
      }
      goto LABEL_7;
    }
    if (v13 == 3 && (a3 & 1) != 0)
    {
LABEL_7:
      if (!*a4)
      {
        *a4 = a1;
        uint64_t v14 = *a5;
        *a5 = a2;
        uint64_t v15 = a1;
        id v16 = a2;
      }
    }
  }
}

unint64_t SGGraph.node(containing:)(uint64_t a1, void *a2)
{
  id v2 = (uint64_t *)(a1 + *a2);
  swift_beginAccess();
  id v3 = (void *)v2[1];
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain();
  unint64_t v5 = SGGraph.node(named:)(v4, v3);
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t SGGraph.node(connectedTo:)(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR___SGInput_edge;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x261185960](v1);
  if (!v2) {
    return 0;
  }
  id v3 = (void *)v2;
  uint64_t v4 = (uint64_t *)(*(void *)(v2 + OBJC_IVAR___SGEdge_from) + OBJC_IVAR___SGOutput_attachment);
  swift_beginAccess();
  unint64_t v5 = (void *)v4[1];
  if (!v5)
  {

    return 0;
  }
  uint64_t v6 = *v4;
  id v7 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = SGGraph.node(named:)(v6, v5);

  swift_bridgeObjectRelease();
  return v8;
}

uint64_t closure #1 in SGGraph.connectedUpstreamSubgraph(rootedAt:)(char *a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  specialized OrderedSet._find(_:)((uint64_t)a1, *a3, a3[1]);
  if (v7) {
    specialized OrderedSet._appendNew(_:in:)(a1, v6);
  }
  unint64_t v8 = *(void *)&a1[OBJC_IVAR___SGNode_inputs];
  unint64_t v77 = MEMORY[0x263F8EE78];
  if (v8 >> 62) {
    goto LABEL_17;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (unint64_t i = a4; v9; unint64_t i = a4)
  {
    a4 = v8 & 0xC000000000000001;
    uint64_t v10 = 4;
    while (1)
    {
      uint64_t v11 = a4 ? (char *)MEMORY[0x2611848A0](v10 - 4, v8) : (char *)*(id *)(v8 + 8 * v10);
      uint64_t v12 = v11;
      uint64_t v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1)) {
        break;
      }
      uint64_t v14 = &v11[OBJC_IVAR___SGInput_edge];
      swift_beginAccess();
      uint64_t v15 = MEMORY[0x261185960](v14);

      if (v15)
      {
        MEMORY[0x261184120]();
        if (*(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v10;
      if (v13 == v9)
      {
        swift_bridgeObjectRelease();
        unint64_t v16 = v77;
        a4 = i;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain_n();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  }
  swift_bridgeObjectRelease();
  unint64_t v16 = MEMORY[0x263F8EE78];
LABEL_19:
  swift_bridgeObjectRelease();
  if (v16 >> 62) {
    goto LABEL_86;
  }
  uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v17) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_21:
  uint64_t v18 = 0;
  unint64_t v71 = v16;
  unint64_t v72 = v16 & 0xC000000000000001;
  unint64_t v68 = v16 + 32;
  uint64_t v70 = v17;
  while (1)
  {
    while (1)
    {
      if (v72) {
        id v19 = (id)MEMORY[0x2611848A0](v18, v16);
      }
      else {
        id v19 = *(id *)(v68 + 8 * v18);
      }
      Swift::String v20 = v19;
      BOOL v21 = __OFADD__(v18++, 1);
      if (v21)
      {
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        swift_bridgeObjectRetain();
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        if (!v17) {
          return swift_bridgeObjectRelease_n();
        }
        goto LABEL_21;
      }
      uint64_t v22 = *(void *)a4;
      uint64_t v23 = *(void *)(a4 + 8);
      unint64_t v74 = (id *)(v23 + 32);
      if (*(void *)a4) {
        break;
      }
      uint64_t v52 = *(void *)(v23 + 16);
      if (!v52)
      {
        uint64_t v73 = v18;
        uint64_t v29 = 0;
        goto LABEL_74;
      }
      type metadata accessor for SGEdge();
      id v53 = *v74;
      char v54 = v20;
      char v55 = static NSObject.== infix(_:_:)();

      if ((v55 & 1) == 0)
      {
        uint64_t v76 = v54;
        if (v52 == 1) {
          goto LABEL_73;
        }
        id v56 = *(id *)(v23 + 40);
        char v57 = static NSObject.== infix(_:_:)();

        if ((v57 & 1) == 0)
        {
          if (v52 == 2) {
            goto LABEL_73;
          }
          id v58 = *(id *)(v23 + 48);
          char v59 = static NSObject.== infix(_:_:)();

          if ((v59 & 1) == 0)
          {
            if (v52 == 3) {
              goto LABEL_73;
            }
            id v60 = *(id *)(v23 + 56);
            char v61 = static NSObject.== infix(_:_:)();

            if ((v61 & 1) == 0)
            {
              uint64_t v62 = v52 - 4;
              uint64_t v63 = (void **)(v23 + 64);
              while (v62)
              {
                id v64 = *v63++;
                id v65 = v64;
                char v54 = v76;
                char v66 = static NSObject.== infix(_:_:)();

                --v62;
                if (v66) {
                  goto LABEL_69;
                }
              }
LABEL_73:
              uint64_t v73 = v18;
              uint64_t v29 = 0;
              Swift::String v20 = v76;
              unint64_t v16 = v71;
LABEL_74:
              specialized OrderedSet._appendNew(_:in:)(v20, v29);

              goto LABEL_23;
            }
          }
        }
      }
LABEL_69:

      unint64_t v16 = v71;
      if (v18 == v17) {
        return swift_bridgeObjectRelease_n();
      }
    }
    BOOL v25 = (void *)(v22 + 16);
    Swift::Int v24 = *(void *)(v22 + 16);
    swift_retain();
    Swift::Int v26 = NSObject._rawHashValue(seed:)(v24);
    uint64_t v27 = 1 << *(void *)(v22 + 16);
    unint64_t v28 = v27 - 1;
    if (__OFSUB__(v27, 1)) {
      goto LABEL_85;
    }
    unint64_t v75 = v20;
    uint64_t v73 = v18;
    uint64_t v29 = v28 & v26;
    uint64_t v30 = _HashTable.UnsafeHandle._startIterator(bucket:)(v28 & v26, (void *)(v22 + 16), v22 + 32);
    if (!v30)
    {
LABEL_62:
      swift_release();
      uint64_t v17 = v70;
      Swift::String v20 = v75;
      goto LABEL_74;
    }
    unint64_t v33 = v31;
    uint64_t v34 = v32;
    unint64_t v35 = (v30 ^ v28) + (*(uint64_t *)(v22 + 24) >> 6);
    unint64_t v36 = v35 >= v28 ? v28 : 0;
    unint64_t v37 = v35 - v36;
    type metadata accessor for SGEdge();
    id v38 = v74[v37];
    unint64_t v16 = static NSObject.== infix(_:_:)();

    if ((v16 & 1) == 0) {
      break;
    }
LABEL_22:

    swift_release();
    a4 = i;
    uint64_t v17 = v70;
    unint64_t v16 = v71;
LABEL_23:
    uint64_t v18 = v73;
    if (v73 == v17) {
      return swift_bridgeObjectRelease_n();
    }
  }
  a4 = 0;
  while (1)
  {
    ++v29;
    uint64_t v42 = *v25 & 0x3FLL;
    uint64_t v43 = 1 << *v25;
    if (v29 != v43) {
      goto LABEL_42;
    }
    if (a4) {
      break;
    }
    uint64_t v29 = 0;
    a4 = 1;
LABEL_42:
    if (v34 >= v42)
    {
      BOOL v21 = __OFSUB__(v34, v42);
      v34 -= v42;
      if (v21)
      {
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      uint64_t v51 = (v43 - 1) & v33;
      v33 >>= v42;
      if (!v51)
      {
LABEL_61:
        a4 = i;
        unint64_t v16 = v71;
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v44 = (v29 * v42) >> 6;
      if (v34)
      {
        if (__OFADD__(v42 << v42, 64)) {
          goto LABEL_84;
        }
        uint64_t v45 = (v42 << v42) + 126;
        if ((v42 << v42) + 64 >= 1) {
          uint64_t v45 = (v42 << v42) + 63;
        }
        if (v44 + 1 == v45 >> 6) {
          uint64_t v44 = 0;
        }
        else {
          ++v44;
        }
      }
      uint64_t v46 = v42 - v34;
      if (__OFSUB__(v42, v34)) {
        goto LABEL_81;
      }
      BOOL v47 = v44 == 2 && v42 == 5;
      uint64_t v48 = 64;
      if (v47) {
        uint64_t v48 = 32;
      }
      BOOL v21 = __OFSUB__(v48, v46);
      uint64_t v49 = v48 - v46;
      if (v21) {
        goto LABEL_82;
      }
      unint64_t v50 = *(void *)(v22 + 32 + 8 * v44);
      uint64_t v51 = ((v50 << v34) | v33) & (v43 - 1);
      unint64_t v33 = v50 >> v46;
      uint64_t v34 = v49;
      if (!v51) {
        goto LABEL_61;
      }
    }
    unint64_t v39 = v43 - 1;
    unint64_t v40 = (v51 ^ v39) + (*(uint64_t *)(v22 + 24) >> 6);
    if (v40 < v39) {
      unint64_t v39 = 0;
    }
    id v41 = v74[v40 - v39];
    unint64_t v16 = static NSObject.== infix(_:_:)();

    if (v16) {
      goto LABEL_22;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SGGraph.nodesUpstreamOf(node:)()
{
  unint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = specialized Sequence.compactMap<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t TopologicalSort.Element.graph.getter()
{
  return MEMORY[0x270F9A8A0]();
}

void *TopologicalSort.Element.nodeGraphCallNode.getter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  return a3;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TopologicalSort.Element(uint64_t a1, uint64_t a2)
{
  return specialized static TopologicalSort.Element.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16));
}

void *TopologicalSort.rootElement.getter(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  return a2;
}

void closure #1 in SGGraph.topologicalSort()(char *a1, void *a2, void **a3)
{
  uint64_t v6 = &a1[OBJC_IVAR___SGNode_graph];
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x261185960](v6);
  if (v7)
  {
    id v8 = (void *)v7;
    id v9 = *a3;
    id v10 = a2;
    uint64_t v11 = a1;
    id v12 = v8;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      id v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      *a3 = v9;
    }
    unint64_t v15 = v9[2];
    unint64_t v14 = v9[3];
    if (v15 >= v14 >> 1) {
      id v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v9);
    }
    void v9[2] = v15 + 1;
    unint64_t v16 = &v9[3 * v15];
    v16[4] = v11;
    v16[5] = v12;
    void v16[6] = a2;
    *a3 = v9;
  }
  else
  {
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi9_((uint64_t)&v28);
    outlined init with take of SGInternalError.ErrorType(&v28, v29);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    long long v30 = 0uLL;
    swift_allocError();
    long long v17 = v29[1];
    *uint64_t v18 = v29[0];
    v18[1] = v17;
    long long v19 = v29[5];
    long long v20 = v29[3];
    long long v21 = v29[2];
    v18[4] = v29[4];
    void v18[5] = v19;
    v18[2] = v21;
    v18[3] = v20;
    long long v22 = v29[9];
    long long v23 = v29[7];
    long long v24 = v29[6];
    v18[8] = v29[8];
    v18[9] = v22;
    v18[6] = v24;
    v18[7] = v23;
    long long v25 = v30;
    long long v26 = v29[11];
    long long v27 = v29[10];
    v18[12] = v29[12];
    v18[13] = v25;
    v18[10] = v27;
    v18[11] = v26;
    swift_willThrow();
  }
}

uint64_t implicit closure #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(uint64_t (*a1)(id), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + OBJC_IVAR___SGNode_graph;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x261185960](v5);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)v6;
    unint64_t v8 = swift_bridgeObjectRetain();
    unint64_t v9 = specialized _ArrayProtocol.filter(_:)(v8, a1, a2);
    unint64_t v10 = v9;
    uint64_t v31 = MEMORY[0x263F8EE78];
    if (v9 >> 62) {
      goto LABEL_23;
    }
    uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v12 = v7;
    swift_bridgeObjectRetain();
    for (; v11; uint64_t v11 = _CocoaArrayWrapper.endIndex.getter())
    {
      long long v30 = v7;
      uint64_t v13 = 4;
      uint64_t v7 = &OBJC_IVAR___SGOutput_node;
      while (1)
      {
        unint64_t v14 = (v10 & 0xC000000000000001) != 0
            ? (char *)MEMORY[0x2611848A0](v13 - 4, v10)
            : (char *)*(id *)(v10 + 8 * v13);
        unint64_t v15 = v14;
        uint64_t v16 = v13 - 3;
        if (__OFADD__(v13 - 4, 1)) {
          break;
        }
        long long v17 = &v14[OBJC_IVAR___SGInput_edge];
        swift_beginAccess();
        uint64_t v18 = MEMORY[0x261185960](v17);
        if (v18)
        {
          long long v19 = (void *)v18;
          long long v20 = (char *)*(id *)(v18 + OBJC_IVAR___SGEdge_from);

          long long v21 = &v20[OBJC_IVAR___SGOutput_node];
          swift_beginAccess();
          uint64_t v22 = MEMORY[0x261185960](v21);

          if (v22)
          {
            MEMORY[0x261184120]();
            if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        else
        {
        }
        ++v13;
        if (v16 == v11)
        {
          swift_bridgeObjectRelease();
          uint64_t v23 = v31;
          uint64_t v7 = v30;
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_23:
      long long v28 = v7;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    uint64_t v23 = MEMORY[0x263F8EE78];
LABEL_25:
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)logger);
    long long v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      long long v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v27 = 0;
      _os_log_impl(&dword_25C27E000, v25, v26, "Node isn't contained in a graph.", v27, 2u);
      MEMORY[0x261185880](v27, -1, -1);
    }

    return MEMORY[0x263F8EE78];
  }
  return v23;
}

uint64_t closure #1 in mapUniforms(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = (void *)(a1 + 16);
  swift_beginAccess();
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *(void *)(a1 + 16);
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    *id v4 = v9;
    *(void *)a2 = v5;
    *(unsigned char *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t SGGraph.createCustomUniformsType(named:textureAssignments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  unint64_t v7 = *(void *)(*(void *)(v3 + OBJC_IVAR___SGGraph_argumentsNode) + OBJC_IVAR___SGNode_outputs);
  uint64_t v8 = MEMORY[0x263F8EE78];
  uint64_t v62 = MEMORY[0x263F8EE78];
  if (v7 >> 62) {
    goto LABEL_29;
  }
  uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v9; uint64_t v9 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v46 = v5;
    uint64_t v47 = a3;
    unint64_t v10 = 0;
    uint64_t v53 = v9;
    unint64_t v54 = v7 & 0xC000000000000001;
    unint64_t v50 = v7 + 32;
    uint64_t v51 = v7 & 0xFFFFFFFFFFFFFF8;
    unint64_t v52 = v7;
    while (v54)
    {
      uint64_t v11 = (char *)MEMORY[0x2611848A0](v10, v7);
      BOOL v12 = __OFADD__(v10++, 1);
      if (v12) {
        goto LABEL_27;
      }
LABEL_12:
      id v56 = v11;
      uint64_t v13 = &v11[OBJC_IVAR___SGOutput_edges];
      swift_beginAccess();
      uint64_t v5 = *((void *)v13 + 1);
      uint64_t v61 = v8;
      a3 = *(void *)(v5 + 16);
      if (a3)
      {
        uint64_t v14 = v5 + 32;
        swift_retain();
        swift_retain();
        do
        {
          outlined init with copy of WeakBox<SGEdge>(v14, (uint64_t)v60);
          uint64_t v15 = MEMORY[0x261185960](v60);
          uint64_t v16 = outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v60, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
          if (v15)
          {
            MEMORY[0x261184120](v16);
            if (*(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          v14 += 8;
          --a3;
        }
        while (a3);
        unint64_t v17 = v61;
        uint64_t v8 = MEMORY[0x263F8EE78];
        unint64_t v7 = v52;
      }
      else
      {
        swift_retain();
        swift_retain();
        unint64_t v17 = v8;
      }
      swift_release();
      swift_release();
      if (v17 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v18)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
      if (v10 == v53)
      {
        swift_bridgeObjectRelease();
        unint64_t v19 = v62;
        uint64_t v5 = v46;
        a3 = v47;
        goto LABEL_31;
      }
    }
    if (v10 >= *(void *)(v51 + 16)) {
      goto LABEL_28;
    }
    uint64_t v11 = (char *)*(id *)(v50 + 8 * v10);
    BOOL v12 = __OFADD__(v10++, 1);
    if (!v12) {
      goto LABEL_12;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  unint64_t v19 = MEMORY[0x263F8EE78];
LABEL_31:
  uint64_t v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGNodeCG_SSs5NeverOTg504_s11d29Graph7SGGraphC6insertyySayAA6F62CGSgKFSSAFcfu_32b446a066102f7f77dfc7f44f189789ecAFSSTf3nnnpk_nTf1cn_nTm(v19, (uint64_t)v59, &OBJC_IVAR___SGOutput_name);
  swift_release();
  uint64_t v21 = specialized Set.init<A>(_:)(v20);
  swift_bridgeObjectRelease();
  uint64_t v62 = v8;
  int64_t v22 = *(void *)(a3 + 16);
  if (v22)
  {
    uint64_t v55 = v5;
    uint64_t v57 = v21;
    uint64_t v61 = v8;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
    uint64_t v23 = v61;
    uint64_t v24 = (uint64_t *)(a3 + 40);
    do
    {
      uint64_t v25 = *(v24 - 1);
      uint64_t v26 = *v24;
      uint64_t v27 = v24[1];
      char v28 = *((unsigned char *)v24 + 32);
      uint64_t v61 = v23;
      unint64_t v30 = *(void *)(v23 + 16);
      unint64_t v29 = *(void *)(v23 + 24);
      swift_bridgeObjectRetain();
      swift_retain();
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        uint64_t v23 = v61;
      }
      *(void *)(v23 + 16) = v30 + 1;
      uint64_t v31 = v23 + 48 * v30;
      *(void *)(v31 + 32) = v25;
      *(void *)(v31 + 40) = v26;
      *(void *)(v31 + 48) = v27;
      *(void *)(v31 + 56) = MEMORY[0x263F8EE78];
      *(unsigned char *)(v31 + 64) = v28;
      *(void *)(v31 + 72) = 0;
      v24 += 6;
      --v22;
    }
    while (v22);
    uint64_t v5 = v55;
    uint64_t v21 = v57;
  }
  else
  {
    uint64_t v23 = v8;
  }
  specialized Array.append<A>(contentsOf:)(v23);
  swift_bridgeObjectRetain();
  unint64_t v32 = swift_bridgeObjectRetain();
  unint64_t v33 = specialized Sequence.compactMap<A>(_:)(v32, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  specialized Array.append<A>(contentsOf:)((uint64_t)v33);
  uint64_t v61 = v62;
  swift_bridgeObjectRetain_n();
  specialized MutableCollection<>.sort(by:)(&v61, specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  if (v5)
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_retain();
    specialized MutableCollection<>.sort(by:)(&v61, specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    swift_release();
    uint64_t v34 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11ShaderGraph16DataTypePropertyVGG_AJs5NeverOTg506_sSi11f7Graph16hij34VACIgygo_Si6offset_AC7elementtACs5K173OIegnrzr_TR04_s11a94Graph7SGGraphC24createCustomUniformsType5named18textureAssignmentsAA17SGTypeDescriptionCSS_Sayq26TextureAssignmentVGtKFAA04c2G8E13VSi_AMtXEfU4_Tf3nnnpf_nTf1cn_n(v61);
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for MetalDataType.Struct();
    uint64_t v35 = swift_allocObject();
    swift_bridgeObjectRetain();
    LOBYTE(v61) = 1;
    uint64_t v36 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(0, 0, a1, a2, 0x100000000, 0x100000000, 0, v34, v35);
    swift_release();
    unint64_t v37 = (objc_class *)type metadata accessor for SGTypeDescription();
    id v38 = (char *)objc_allocWithZone(v37);
    *(_DWORD *)&v38[OBJC_IVAR___SGTypeDescription_offset] = 0;
    *(void *)&v38[OBJC_IVAR___SGTypeDescription_type] = v36;
    unint64_t v39 = *(uint64_t (**)(uint64_t))(*(void *)v36 + 232);
    unint64_t v40 = v38;
    uint64_t v41 = swift_retain();
    uint64_t v42 = v39(v41);
    uint64_t v43 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph16DataTypePropertyV_s6UInt32VtG_AF21SGPropertyDescriptionCs5NeverOTg504_s11d7Graph16fgh3Vs6i5VAA21jk17CIggyo_AC_AEtAGs5L96OIegnrzr_TR04_s11a13Graph17SGTypeh12CyAcA13Metalcd9CcfcAA010g9D0CAA0fG8e4V_s6F7VtXEfU_Tf3nnnpf_nTf1cn_n(v42);
    swift_bridgeObjectRelease();
    *(void *)&v40[OBJC_IVAR___SGTypeDescription_properties] = v43;

    v58.receiver = v40;
    v58.super_class = v37;
    id v44 = objc_msgSendSuper2(&v58, sel_init);
    swift_release();
    return (uint64_t)v44;
  }
  return result;
}

void closure #3 in SGGraph.createCustomUniformsType(named:textureAssignments:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (uint64_t *)(*a1 + OBJC_IVAR___SGOutput_name);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  swift_bridgeObjectRetain();
  LOBYTE(v7) = specialized Set.contains(_:)(v7, v8, a2);
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0 || (uint64_t v9 = (uint64_t *)(v5 + OBJC_IVAR___SGOutput_type), swift_beginAccess(), *v9 == 13))
  {
LABEL_3:
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return;
  }
  uint64_t v10 = SGDataType.metalDataType.getter(*v9);
  if (!v10)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v19[1] = 0x800000025C427330;
    v13._uint64_t countAndFlagsBits = SGDataType.stringValue.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)logger);
    swift_bridgeObjectRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      unint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      v19[0] = v18;
      *(_DWORD *)unint64_t v17 = 136315138;
      swift_bridgeObjectRetain();
      v19[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x800000025C427330, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25C27E000, v15, v16, "%s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261185880](v18, -1, -1);
      MEMORY[0x261185880](v17, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_3;
  }
  uint64_t v11 = v6[1];
  uint64_t v12 = MEMORY[0x263F8EE78];
  *(void *)a3 = *v6;
  *(void *)(a3 + 8) = v11;
  *(void *)(a3 + 16) = v10;
  *(void *)(a3 + 24) = v12;
  *(_OWORD *)(a3 + 32) = xmmword_25C41BE30;
  swift_bridgeObjectRetain();
}

NSString __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SGGraph.createDotRepresentation()()
{
  createDotText(representing:)(v0);
  if (v1)
  {
    type metadata accessor for SGError();
    id v2 = v1;
    SGError.__allocating_init(_:)(v1);
    swift_willThrow();
  }
  else
  {
    uint64_t v4 = (void *)MEMORY[0x261183E60]();
    swift_bridgeObjectRelease();
    return v4;
  }
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_130;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_138;
  }
  Swift::Int v107 = result;
  uint64_t v111 = v1;
  uint64_t v104 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_96:
      uint64_t v95 = v11;
      uint64_t v106 = v8;
      if (v12 >= 2)
      {
        uint64_t v96 = *v104;
        do
        {
          unint64_t v97 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_125;
          }
          if (!v96) {
            goto LABEL_137;
          }
          unint64_t v98 = v95;
          uint64_t v99 = *(void *)&v95[16 * v97 + 32];
          uint64_t v100 = *(void *)&v95[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v96 + 48 * v99), (char *)(v96 + 48 * *(void *)&v95[16 * v12 + 16]), v96 + 48 * v100, __dst);
          if (v111) {
            break;
          }
          if (v100 < v99) {
            goto LABEL_126;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v98);
          }
          if (v97 >= *((void *)v98 + 2)) {
            goto LABEL_127;
          }
          unint64_t v101 = &v98[16 * v97 + 32];
          *(void *)unint64_t v101 = v99;
          *((void *)v101 + 1) = v100;
          unint64_t v102 = *((void *)v98 + 2);
          if (v12 > v102) {
            goto LABEL_128;
          }
          memmove(&v98[16 * v12 + 16], &v98[16 * v12 + 32], 16 * (v102 - v12));
          uint64_t v95 = v98;
          *((void *)v98 + 2) = v102 - 1;
          unint64_t v12 = v102 - 1;
        }
        while (v102 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v106 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v106 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v106 = v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v105 = *a1 + 112;
  uint64_t v103 = *a1 + 40;
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  Swift::Int v108 = v3;
  uint64_t v109 = v10;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      unsigned int v14 = *(_DWORD *)(*(void *)(v10 + 48 * v9 + 16) + 60);
      unsigned int v15 = *(_DWORD *)(*(void *)(v10 + 48 * v13 + 16) + 60);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        uint64_t v16 = v105 + 48 * v13;
        unsigned int v17 = v14;
        while (1)
        {
          unsigned int v18 = *(_DWORD *)(*(void *)v16 + 60);
          if (v15 < v14 == v17 >= v18) {
            break;
          }
          ++v9;
          v16 += 48;
          unsigned int v17 = v18;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v15 < v14)
      {
        if (v9 < v13) {
          goto LABEL_131;
        }
        if (v13 < v9)
        {
          uint64_t v19 = 48 * v9;
          uint64_t v20 = 48 * v13;
          Swift::Int v21 = v9;
          Swift::Int v22 = v13;
          do
          {
            if (v22 != --v21)
            {
              if (!v10) {
                goto LABEL_136;
              }
              uint64_t v23 = (_OWORD *)(v10 + v20);
              uint64_t v24 = *(void *)(v10 + v20);
              uint64_t v25 = v10 + v19;
              uint64_t v26 = *(void *)(v10 + v20 + 24);
              char v27 = *(unsigned char *)(v10 + v20 + 32);
              uint64_t v28 = *(void *)(v10 + v20 + 40);
              long long v29 = *(_OWORD *)(v10 + v20 + 8);
              long long v31 = *(_OWORD *)(v10 + v19 - 32);
              long long v30 = *(_OWORD *)(v10 + v19 - 16);
              _OWORD *v23 = *(_OWORD *)(v10 + v19 - 48);
              v23[1] = v31;
              _OWORD v23[2] = v30;
              *(void *)(v25 - 48) = v24;
              *(_OWORD *)(v25 - 40) = v29;
              *(void *)(v25 - 24) = v26;
              *(unsigned char *)(v25 - 16) = v27;
              *(void *)(v25 - 8) = v28;
            }
            ++v22;
            v19 -= 48;
            v20 += 48;
          }
          while (v22 < v21);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_129;
    }
    if (v9 - v13 >= v107) {
      goto LABEL_46;
    }
    Swift::Int v32 = v13 + v107;
    if (__OFADD__(v13, v107)) {
      goto LABEL_132;
    }
    if (v32 >= v3) {
      Swift::Int v32 = v3;
    }
    if (v32 < v13) {
      break;
    }
    if (v9 != v32)
    {
      uint64_t v33 = v103 + 48 * v9;
      do
      {
        uint64_t v34 = *(void *)(v10 + 48 * v9 + 16);
        Swift::Int v35 = v13;
        uint64_t v36 = v33;
        do
        {
          if (*(_DWORD *)(*(void *)(v36 - 72) + 60) >= *(_DWORD *)(v34 + 60)) {
            break;
          }
          if (!v10) {
            goto LABEL_134;
          }
          unint64_t v37 = (_OWORD *)(v36 - 40);
          id v38 = (_OWORD *)(v36 - 88);
          long long v40 = *(_OWORD *)(v36 - 72);
          long long v39 = *(_OWORD *)(v36 - 56);
          *(void *)(v36 - 48) = *(void *)v36;
          v36 -= 48;
          uint64_t v41 = *(void *)(v36 + 8);
          uint64_t v42 = *(void *)(v36 + 16);
          uint64_t v43 = *(void *)(v36 + 32);
          char v44 = *(unsigned char *)(v36 + 40);
          *unint64_t v37 = *v38;
          v37[1] = v40;
          v37[2] = v39;
          *(void *)(v36 - 40) = v41;
          *(void *)(v36 - 32) = v42;
          *(void *)(v36 - 24) = v34;
          *(void *)(v36 - 16) = v43;
          *(unsigned char *)(v36 - 8) = v44;
          ++v35;
        }
        while (v9 != v35);
        ++v9;
        v33 += 48;
      }
      while (v9 != v32);
      Swift::Int v9 = v32;
    }
LABEL_46:
    if (v9 < v13) {
      goto LABEL_124;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v46 = *((void *)v11 + 2);
    unint64_t v45 = *((void *)v11 + 3);
    unint64_t v12 = v46 + 1;
    uint64_t v10 = v109;
    if (v46 >= v45 >> 1)
    {
      unint64_t v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v45 > 1), v46 + 1, 1, v11);
      uint64_t v10 = v109;
      uint64_t v11 = v94;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v47 = v11 + 32;
    uint64_t v48 = &v11[16 * v46 + 32];
    *(void *)uint64_t v48 = v13;
    *((void *)v48 + 1) = v9;
    if (v46)
    {
      while (1)
      {
        unint64_t v49 = v12 - 1;
        if (v12 >= 4)
        {
          unint64_t v54 = &v47[16 * v12];
          uint64_t v55 = *((void *)v54 - 8);
          uint64_t v56 = *((void *)v54 - 7);
          BOOL v60 = __OFSUB__(v56, v55);
          uint64_t v57 = v56 - v55;
          if (v60) {
            goto LABEL_113;
          }
          uint64_t v59 = *((void *)v54 - 6);
          uint64_t v58 = *((void *)v54 - 5);
          BOOL v60 = __OFSUB__(v58, v59);
          uint64_t v52 = v58 - v59;
          char v53 = v60;
          if (v60) {
            goto LABEL_114;
          }
          unint64_t v61 = v12 - 2;
          uint64_t v62 = &v47[16 * v12 - 32];
          uint64_t v64 = *(void *)v62;
          uint64_t v63 = *((void *)v62 + 1);
          BOOL v60 = __OFSUB__(v63, v64);
          uint64_t v65 = v63 - v64;
          if (v60) {
            goto LABEL_116;
          }
          BOOL v60 = __OFADD__(v52, v65);
          uint64_t v66 = v52 + v65;
          if (v60) {
            goto LABEL_119;
          }
          if (v66 >= v57)
          {
            char v84 = &v47[16 * v49];
            uint64_t v86 = *(void *)v84;
            uint64_t v85 = *((void *)v84 + 1);
            BOOL v60 = __OFSUB__(v85, v86);
            uint64_t v87 = v85 - v86;
            if (v60) {
              goto LABEL_123;
            }
            BOOL v77 = v52 < v87;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v78 = *((void *)v11 + 4);
            uint64_t v79 = *((void *)v11 + 5);
            BOOL v60 = __OFSUB__(v79, v78);
            uint64_t v71 = v79 - v78;
            char v72 = v60;
            goto LABEL_77;
          }
          uint64_t v51 = *((void *)v11 + 4);
          uint64_t v50 = *((void *)v11 + 5);
          BOOL v60 = __OFSUB__(v50, v51);
          uint64_t v52 = v50 - v51;
          char v53 = v60;
        }
        if (v53) {
          goto LABEL_115;
        }
        unint64_t v61 = v12 - 2;
        unint64_t v67 = &v47[16 * v12 - 32];
        uint64_t v69 = *(void *)v67;
        uint64_t v68 = *((void *)v67 + 1);
        BOOL v70 = __OFSUB__(v68, v69);
        uint64_t v71 = v68 - v69;
        char v72 = v70;
        if (v70) {
          goto LABEL_118;
        }
        uint64_t v73 = &v47[16 * v49];
        uint64_t v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        BOOL v60 = __OFSUB__(v74, v75);
        uint64_t v76 = v74 - v75;
        if (v60) {
          goto LABEL_121;
        }
        if (__OFADD__(v71, v76)) {
          goto LABEL_122;
        }
        if (v71 + v76 >= v52)
        {
          BOOL v77 = v52 < v76;
LABEL_83:
          if (v77) {
            unint64_t v49 = v61;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v72) {
          goto LABEL_117;
        }
        uint64_t v80 = &v47[16 * v49];
        uint64_t v82 = *(void *)v80;
        uint64_t v81 = *((void *)v80 + 1);
        BOOL v60 = __OFSUB__(v81, v82);
        uint64_t v83 = v81 - v82;
        if (v60) {
          goto LABEL_120;
        }
        if (v83 < v71) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v88 = v49 - 1;
        if (v49 - 1 >= v12)
        {
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }
        if (!v10) {
          goto LABEL_135;
        }
        uint64_t v89 = &v47[16 * v88];
        uint64_t v90 = *(void *)v89;
        unint64_t v91 = &v47[16 * v49];
        uint64_t v92 = *((void *)v91 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 48 * *(void *)v89), (char *)(v10 + 48 * *(void *)v91), v10 + 48 * v92, __dst);
        if (v111) {
          goto LABEL_93;
        }
        if (v92 < v90) {
          goto LABEL_110;
        }
        if (v49 > *((void *)v11 + 2)) {
          goto LABEL_111;
        }
        *(void *)uint64_t v89 = v90;
        *(void *)&v47[16 * v88 + 8] = v92;
        unint64_t v93 = *((void *)v11 + 2);
        if (v49 >= v93) {
          goto LABEL_112;
        }
        unint64_t v12 = v93 - 1;
        memmove(&v47[16 * v49], v91 + 16, 16 * (v93 - 1 - v49));
        *((void *)v11 + 2) = v93 - 1;
        uint64_t v10 = v109;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v108;
    if (v9 >= v108)
    {
      uint64_t v8 = v106;
      goto LABEL_96;
    }
  }
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v19;
  Swift::Int v20;
  void *v21;
  Swift::Int v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  long long v35;
  long long v36;
  long long v37;
  Swift::Int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  _OWORD *v45;
  BOOL v46;
  long long v47;
  long long v48;
  uint64_t v49;
  char v50;
  long long v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  char v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  Swift::Int v115;
  Swift::Int v116;
  uint64_t v117;
  char *__dst;

  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_151;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_159;
  }
  uint64_t v115 = result;
  uint64_t v112 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_117:
      uint64_t v103 = v11;
      unint64_t v114 = v8;
      if (v12 >= 2)
      {
        uint64_t v104 = *v112;
        do
        {
          uint64_t v105 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_146;
          }
          if (!v104) {
            goto LABEL_158;
          }
          uint64_t v106 = v103;
          Swift::Int v107 = *(void *)&v103[16 * v105 + 32];
          Swift::Int v108 = *(void *)&v103[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v104 + 48 * v107), (char *)(v104 + 48 * *(void *)&v103[16 * v12 + 16]), v104 + 48 * v108, __dst);
          if (v1) {
            break;
          }
          if (v108 < v107) {
            goto LABEL_147;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v106);
          }
          if (v105 >= *((void *)v106 + 2)) {
            goto LABEL_148;
          }
          uint64_t v109 = &v106[16 * v105 + 32];
          *(void *)uint64_t v109 = v107;
          *((void *)v109 + 1) = v108;
          Swift::String v110 = *((void *)v106 + 2);
          if (v12 > v110) {
            goto LABEL_149;
          }
          memmove(&v106[16 * v12 + 16], &v106[16 * v12 + 32], 16 * (v110 - v12));
          uint64_t v103 = v106;
          *((void *)v106 + 2) = v110 - 1;
          unint64_t v12 = v110 - 1;
        }
        while (v110 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(void *)(v114 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    unint64_t v114 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    unint64_t v114 = v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  unint64_t v113 = *a1 + 8;
  uint64_t v111 = *a1 + 40;
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v116 = v3;
  unint64_t v117 = *a1;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      break;
    }
    unsigned int v14 = (uint64_t *)(v10 + 48 * v9);
    unsigned int v15 = *v14;
    uint64_t v16 = v14[1];
    unsigned int v17 = (void *)(v10 + 48 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_42;
      }
      uint64_t v19 = 0;
LABEL_25:
      Swift::Int v21 = (void *)(v113 + 48 * v20);
      do
      {
        uint64_t v23 = (void *)(v10 + 48 * v9);
        if (*(v21 - 1) == *v23 && *v21 == v23[1])
        {
          if (v19) {
            goto LABEL_34;
          }
        }
        else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
        {
          goto LABEL_33;
        }
        v21 += 6;
        Swift::Int v22 = v20 + 1;
        Swift::Int v9 = v20;
        uint64_t v20 = v22;
      }
      while (v22 < v3);
      uint64_t v20 = v22;
      Swift::Int v9 = v22;
      if ((v19 & 1) == 0) {
        break;
      }
      goto LABEL_34;
    }
    uint64_t v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v20 = v13 + 2;
    if (v13 + 2 < v3) {
      goto LABEL_25;
    }
LABEL_33:
    Swift::Int v9 = v20;
    if ((v19 & 1) == 0) {
      break;
    }
LABEL_34:
    if (v20 < v13) {
      goto LABEL_154;
    }
    if (v13 < v20)
    {
      uint64_t v25 = 48 * v20;
      uint64_t v26 = 48 * v13;
      char v27 = v20;
      uint64_t v28 = v13;
      do
      {
        if (v28 != --v27)
        {
          if (!v10) {
            goto LABEL_157;
          }
          long long v29 = (_OWORD *)(v10 + v26);
          long long v30 = *(void *)(v10 + v26);
          long long v31 = v10 + v25;
          Swift::Int v32 = *(void *)(v10 + v26 + 24);
          uint64_t v33 = *(unsigned char *)(v10 + v26 + 32);
          uint64_t v34 = *(void *)(v10 + v26 + 40);
          Swift::Int v35 = *(_OWORD *)(v10 + v26 + 8);
          unint64_t v37 = *(_OWORD *)(v10 + v25 - 32);
          uint64_t v36 = *(_OWORD *)(v10 + v25 - 16);
          *long long v29 = *(_OWORD *)(v10 + v25 - 48);
          v29[1] = v37;
          void v29[2] = v36;
          *(void *)(v31 - 48) = v30;
          *(_OWORD *)(v31 - 40) = v35;
          *(void *)(v31 - 24) = v32;
          *(unsigned char *)(v31 - 16) = v33;
          *(void *)(v31 - 8) = v34;
        }
        ++v28;
        v25 -= 48;
        v26 += 48;
      }
      while (v28 < v27);
    }
LABEL_42:
    Swift::Int v9 = v20;
    if (v20 < v3) {
      goto LABEL_46;
    }
LABEL_66:
    if (v9 < v13) {
      goto LABEL_145;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    char v53 = *((void *)v11 + 2);
    uint64_t v52 = *((void *)v11 + 3);
    unint64_t v12 = v53 + 1;
    if (v53 >= v52 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    unint64_t v54 = v11 + 32;
    uint64_t v55 = &v11[16 * v53 + 32];
    *(void *)uint64_t v55 = v13;
    *((void *)v55 + 1) = v9;
    if (v53)
    {
      uint64_t v10 = v117;
      while (1)
      {
        uint64_t v56 = v12 - 1;
        if (v12 >= 4)
        {
          unint64_t v61 = &v54[16 * v12];
          uint64_t v62 = *((void *)v61 - 8);
          uint64_t v63 = *((void *)v61 - 7);
          unint64_t v67 = __OFSUB__(v63, v62);
          uint64_t v64 = v63 - v62;
          if (v67) {
            goto LABEL_134;
          }
          uint64_t v66 = *((void *)v61 - 6);
          uint64_t v65 = *((void *)v61 - 5);
          unint64_t v67 = __OFSUB__(v65, v66);
          uint64_t v59 = v65 - v66;
          BOOL v60 = v67;
          if (v67) {
            goto LABEL_135;
          }
          uint64_t v68 = v12 - 2;
          uint64_t v69 = &v54[16 * v12 - 32];
          uint64_t v71 = *(void *)v69;
          BOOL v70 = *((void *)v69 + 1);
          unint64_t v67 = __OFSUB__(v70, v71);
          char v72 = v70 - v71;
          if (v67) {
            goto LABEL_137;
          }
          unint64_t v67 = __OFADD__(v59, v72);
          uint64_t v73 = v59 + v72;
          if (v67) {
            goto LABEL_140;
          }
          if (v73 >= v64)
          {
            unint64_t v91 = &v54[16 * v56];
            unint64_t v93 = *(void *)v91;
            uint64_t v92 = *((void *)v91 + 1);
            unint64_t v67 = __OFSUB__(v92, v93);
            unint64_t v94 = v92 - v93;
            if (v67) {
              goto LABEL_144;
            }
            char v84 = v59 < v94;
            goto LABEL_104;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v85 = *((void *)v11 + 4);
            uint64_t v86 = *((void *)v11 + 5);
            unint64_t v67 = __OFSUB__(v86, v85);
            uint64_t v78 = v86 - v85;
            uint64_t v79 = v67;
            goto LABEL_98;
          }
          uint64_t v58 = *((void *)v11 + 4);
          uint64_t v57 = *((void *)v11 + 5);
          unint64_t v67 = __OFSUB__(v57, v58);
          uint64_t v59 = v57 - v58;
          BOOL v60 = v67;
        }
        if (v60) {
          goto LABEL_136;
        }
        uint64_t v68 = v12 - 2;
        uint64_t v74 = &v54[16 * v12 - 32];
        uint64_t v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        BOOL v77 = __OFSUB__(v75, v76);
        uint64_t v78 = v75 - v76;
        uint64_t v79 = v77;
        if (v77) {
          goto LABEL_139;
        }
        uint64_t v80 = &v54[16 * v56];
        uint64_t v82 = *(void *)v80;
        uint64_t v81 = *((void *)v80 + 1);
        unint64_t v67 = __OFSUB__(v81, v82);
        uint64_t v83 = v81 - v82;
        if (v67) {
          goto LABEL_142;
        }
        if (__OFADD__(v78, v83)) {
          goto LABEL_143;
        }
        if (v78 + v83 >= v59)
        {
          char v84 = v59 < v83;
LABEL_104:
          if (v84) {
            uint64_t v56 = v68;
          }
          goto LABEL_106;
        }
LABEL_98:
        if (v79) {
          goto LABEL_138;
        }
        uint64_t v87 = &v54[16 * v56];
        uint64_t v89 = *(void *)v87;
        unint64_t v88 = *((void *)v87 + 1);
        unint64_t v67 = __OFSUB__(v88, v89);
        uint64_t v90 = v88 - v89;
        if (v67) {
          goto LABEL_141;
        }
        if (v90 < v78) {
          goto LABEL_15;
        }
LABEL_106:
        uint64_t v95 = v56 - 1;
        if (v56 - 1 >= v12)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        if (!v10) {
          goto LABEL_156;
        }
        uint64_t v96 = v11;
        unint64_t v97 = v10;
        unint64_t v98 = &v54[16 * v95];
        uint64_t v99 = *(void *)v98;
        uint64_t v100 = &v54[16 * v56];
        unint64_t v101 = *((void *)v100 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v97 + 48 * *(void *)v98), (char *)(v97 + 48 * *(void *)v100), v97 + 48 * v101, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v101 < v99) {
          goto LABEL_131;
        }
        if (v56 > *((void *)v96 + 2)) {
          goto LABEL_132;
        }
        *(void *)unint64_t v98 = v99;
        *(void *)&v54[16 * v95 + 8] = v101;
        unint64_t v102 = *((void *)v96 + 2);
        if (v56 >= v102) {
          goto LABEL_133;
        }
        uint64_t v11 = v96;
        unint64_t v12 = v102 - 1;
        memmove(&v54[16 * v56], v100 + 16, 16 * (v102 - 1 - v56));
        *((void *)v96 + 2) = v102 - 1;
        char v84 = v102 > 2;
        uint64_t v10 = v117;
        if (!v84) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
    uint64_t v10 = v117;
LABEL_15:
    Swift::Int v3 = v116;
    if (v9 >= v116)
    {
      uint64_t v8 = v114;
      goto LABEL_117;
    }
  }
  if (v9 >= v3) {
    goto LABEL_66;
  }
LABEL_46:
  if (__OFSUB__(v9, v13)) {
    goto LABEL_150;
  }
  if (v9 - v13 >= v115) {
    goto LABEL_66;
  }
  if (__OFADD__(v13, v115)) {
    goto LABEL_152;
  }
  if (v13 + v115 >= v3) {
    id v38 = v3;
  }
  else {
    id v38 = v13 + v115;
  }
  if (v38 >= v13)
  {
    if (v9 != v38)
    {
      long long v39 = v111 + 48 * v9;
      do
      {
        long long v40 = (uint64_t *)(v10 + 48 * v9);
        uint64_t v41 = *v40;
        uint64_t v42 = v40[1];
        uint64_t v43 = v13;
        char v44 = v39;
        do
        {
          unint64_t v45 = (_OWORD *)(v44 - 88);
          unint64_t v46 = v41 == *(void *)(v44 - 88) && v42 == *(void *)(v44 - 80);
          if (v46 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_155;
          }
          uint64_t v48 = *(_OWORD *)(v44 - 72);
          uint64_t v47 = *(_OWORD *)(v44 - 56);
          *(void *)(v44 - 48) = *(void *)v44;
          v44 -= 48;
          uint64_t v41 = *(void *)(v44 + 8);
          unint64_t v49 = *(void *)(v44 + 32);
          uint64_t v50 = *(unsigned char *)(v44 + 40);
          uint64_t v51 = *(_OWORD *)(v44 + 16);
          v45[3] = *v45;
          v45[4] = v48;
          v45[5] = v47;
          *(void *)(v44 - 40) = v41;
          *(_OWORD *)(v44 - 32) = v51;
          *(void *)(v44 - 16) = v49;
          *(unsigned char *)(v44 - 8) = v50;
          uint64_t v42 = v51;
          ++v43;
        }
        while (v9 != v43);
        ++v9;
        v39 += 48;
      }
      while (v9 != v38);
      Swift::Int v9 = v38;
    }
    goto LABEL_66;
  }
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int result;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t *v27;
  uint64_t v28;
  Swift::Int v29;
  void *v30;
  uint64_t v31;
  Swift::Int v32;
  void *v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  Swift::Int v97;
  Swift::Int v98;
  uint64_t v99;
  char *__dst;
  uint64_t v101;

  id v2 = v1;
  uint64_t v4 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_150;
    }
    if (v4) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1);
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_158;
  }
  uint64_t v7 = result;
  uint64_t v95 = a1;
  if (v4 < 2)
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
    unint64_t v101 = MEMORY[0x263F8EE78];
    __dst = (char *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      Swift::Int v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_116:
      uint64_t v87 = v10;
      if (v13 >= 2)
      {
        unint64_t v88 = *v95;
        do
        {
          uint64_t v89 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_145;
          }
          if (!v88) {
            goto LABEL_157;
          }
          uint64_t v90 = v87;
          unint64_t v91 = *(void *)&v87[16 * v89 + 32];
          uint64_t v92 = *(void *)&v87[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v88 + 8 * v91), (char *)(v88 + 8 * *(void *)&v87[16 * v13 + 16]), v88 + 8 * v92, __dst);
          if (v2) {
            break;
          }
          if (v92 < v91) {
            goto LABEL_146;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v90 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v90);
          }
          if (v89 >= *((void *)v90 + 2)) {
            goto LABEL_147;
          }
          unint64_t v93 = &v90[16 * v89 + 32];
          *(void *)unint64_t v93 = v91;
          *((void *)v93 + 1) = v92;
          unint64_t v94 = *((void *)v90 + 2);
          if (v13 > v94) {
            goto LABEL_148;
          }
          memmove(&v90[16 * v13 + 16], &v90[16 * v13 + 32], 16 * (v94 - v13));
          uint64_t v87 = v90;
          *((void *)v90 + 2) = v94 - 1;
          Swift::Int v13 = v94 - 1;
        }
        while (v94 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v8 = v6 >> 1;
    type metadata accessor for MetalFunctionDefinitionNode();
    Swift::Int v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    __dst = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    unint64_t v101 = v9;
  }
  uint64_t v11 = 0;
  unint64_t v12 = *a1;
  uint64_t v96 = v12 - 8;
  unint64_t v97 = v7;
  uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  unint64_t v98 = v4;
  uint64_t v99 = v12;
  while (1)
  {
    unsigned int v14 = v11++;
    if (v11 < v4)
    {
      unsigned int v15 = *(void *)(v12 + 8 * v11);
      uint64_t v16 = *(void *)(v12 + 8 * v14);
      if (*(void *)(v15 + 56) == *(void *)(v16 + 56) && *(void *)(v15 + 64) == *(void *)(v16 + 64))
      {
        uint64_t v19 = v14 + 2;
        if (v14 + 2 >= v4) {
          goto LABEL_43;
        }
        unsigned int v18 = 0;
        do
        {
LABEL_26:
          Swift::Int v21 = *(void *)(v12 + 8 * v19);
          Swift::Int v22 = *(void *)(v12 + 8 * v11);
          if (*(void *)(v21 + 56) == *(void *)(v22 + 56) && *(void *)(v21 + 64) == *(void *)(v22 + 64))
          {
            if (v18) {
              goto LABEL_35;
            }
          }
          else if ((v18 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
          {
            goto LABEL_34;
          }
          uint64_t v20 = v19 + 1;
          uint64_t v11 = v19;
          uint64_t v19 = v20;
        }
        while (v20 < v4);
        uint64_t v19 = v20;
      }
      else
      {
        unsigned int v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v19 = v14 + 2;
        if (v14 + 2 < v4) {
          goto LABEL_26;
        }
      }
LABEL_34:
      uint64_t v11 = v19;
      if (v18)
      {
LABEL_35:
        if (v19 < v14) {
          goto LABEL_153;
        }
        if (v14 < v19)
        {
          uint64_t v24 = (uint64_t *)(v96 + 8 * v19);
          uint64_t v25 = v19;
          uint64_t v26 = v14;
          char v27 = (uint64_t *)(v12 + 8 * v14);
          do
          {
            if (v26 != --v25)
            {
              if (!v12) {
                goto LABEL_156;
              }
              uint64_t v28 = *v27;
              *char v27 = *v24;
              uint64_t *v24 = v28;
            }
            ++v26;
            --v24;
            ++v27;
          }
          while (v26 < v25);
        }
LABEL_43:
        uint64_t v11 = v19;
      }
    }
    if (v11 < v4)
    {
      if (__OFSUB__(v11, v14)) {
        goto LABEL_149;
      }
      if (v11 - v14 < v97) {
        break;
      }
    }
LABEL_65:
    if (v11 < v14) {
      goto LABEL_144;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v37 = *((void *)v10 + 2);
    uint64_t v36 = *((void *)v10 + 3);
    Swift::Int v13 = v37 + 1;
    if (v37 >= v36 >> 1) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v13;
    id v38 = v10 + 32;
    long long v39 = &v10[16 * v37 + 32];
    *(void *)long long v39 = v14;
    *((void *)v39 + 1) = v11;
    if (v37)
    {
      unint64_t v12 = v99;
      while (1)
      {
        long long v40 = v13 - 1;
        if (v13 >= 4)
        {
          unint64_t v45 = &v38[16 * v13];
          unint64_t v46 = *((void *)v45 - 8);
          uint64_t v47 = *((void *)v45 - 7);
          uint64_t v51 = __OFSUB__(v47, v46);
          uint64_t v48 = v47 - v46;
          if (v51) {
            goto LABEL_133;
          }
          uint64_t v50 = *((void *)v45 - 6);
          unint64_t v49 = *((void *)v45 - 5);
          uint64_t v51 = __OFSUB__(v49, v50);
          uint64_t v43 = v49 - v50;
          char v44 = v51;
          if (v51) {
            goto LABEL_134;
          }
          uint64_t v52 = v13 - 2;
          char v53 = &v38[16 * v13 - 32];
          uint64_t v55 = *(void *)v53;
          unint64_t v54 = *((void *)v53 + 1);
          uint64_t v51 = __OFSUB__(v54, v55);
          uint64_t v56 = v54 - v55;
          if (v51) {
            goto LABEL_136;
          }
          uint64_t v51 = __OFADD__(v43, v56);
          uint64_t v57 = v43 + v56;
          if (v51) {
            goto LABEL_139;
          }
          if (v57 >= v48)
          {
            uint64_t v75 = &v38[16 * v40];
            BOOL v77 = *(void *)v75;
            uint64_t v76 = *((void *)v75 + 1);
            uint64_t v51 = __OFSUB__(v76, v77);
            uint64_t v78 = v76 - v77;
            if (v51) {
              goto LABEL_143;
            }
            uint64_t v68 = v43 < v78;
            goto LABEL_103;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v69 = *((void *)v10 + 4);
            BOOL v70 = *((void *)v10 + 5);
            uint64_t v51 = __OFSUB__(v70, v69);
            uint64_t v62 = v70 - v69;
            uint64_t v63 = v51;
            goto LABEL_97;
          }
          uint64_t v42 = *((void *)v10 + 4);
          uint64_t v41 = *((void *)v10 + 5);
          uint64_t v51 = __OFSUB__(v41, v42);
          uint64_t v43 = v41 - v42;
          char v44 = v51;
        }
        if (v44) {
          goto LABEL_135;
        }
        uint64_t v52 = v13 - 2;
        uint64_t v58 = &v38[16 * v13 - 32];
        BOOL v60 = *(void *)v58;
        uint64_t v59 = *((void *)v58 + 1);
        unint64_t v61 = __OFSUB__(v59, v60);
        uint64_t v62 = v59 - v60;
        uint64_t v63 = v61;
        if (v61) {
          goto LABEL_138;
        }
        uint64_t v64 = &v38[16 * v40];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        uint64_t v51 = __OFSUB__(v65, v66);
        unint64_t v67 = v65 - v66;
        if (v51) {
          goto LABEL_141;
        }
        if (__OFADD__(v62, v67)) {
          goto LABEL_142;
        }
        if (v62 + v67 >= v43)
        {
          uint64_t v68 = v43 < v67;
LABEL_103:
          if (v68) {
            long long v40 = v52;
          }
          goto LABEL_105;
        }
LABEL_97:
        if (v63) {
          goto LABEL_137;
        }
        uint64_t v71 = &v38[16 * v40];
        uint64_t v73 = *(void *)v71;
        char v72 = *((void *)v71 + 1);
        uint64_t v51 = __OFSUB__(v72, v73);
        uint64_t v74 = v72 - v73;
        if (v51) {
          goto LABEL_140;
        }
        if (v74 < v62) {
          goto LABEL_14;
        }
LABEL_105:
        uint64_t v79 = v40 - 1;
        if (v40 - 1 >= v13)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
          goto LABEL_152;
        }
        if (!v12) {
          goto LABEL_155;
        }
        uint64_t v80 = v10;
        uint64_t v81 = v12;
        uint64_t v82 = &v38[16 * v79];
        uint64_t v83 = *(void *)v82;
        char v84 = &v38[16 * v40];
        uint64_t v85 = *((void *)v84 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v81 + 8 * *(void *)v82), (char *)(v81 + 8 * *(void *)v84), v81 + 8 * v85, __dst);
        if (v1) {
          goto LABEL_113;
        }
        if (v85 < v83) {
          goto LABEL_130;
        }
        if (v40 > *((void *)v80 + 2)) {
          goto LABEL_131;
        }
        *(void *)uint64_t v82 = v83;
        *(void *)&v38[16 * v79 + 8] = v85;
        uint64_t v86 = *((void *)v80 + 2);
        if (v40 >= v86) {
          goto LABEL_132;
        }
        uint64_t v10 = v80;
        Swift::Int v13 = v86 - 1;
        memmove(&v38[16 * v40], v84 + 16, 16 * (v86 - 1 - v40));
        *((void *)v80 + 2) = v86 - 1;
        uint64_t v68 = v86 > 2;
        unint64_t v12 = v99;
        if (!v68) {
          goto LABEL_14;
        }
      }
    }
    Swift::Int v13 = 1;
    unint64_t v12 = v99;
LABEL_14:
    uint64_t v4 = v98;
    if (v11 >= v98)
    {
      id v2 = v1;
      goto LABEL_116;
    }
  }
  if (__OFADD__(v14, v97)) {
    goto LABEL_151;
  }
  if (v14 + v97 >= v4) {
    long long v29 = v4;
  }
  else {
    long long v29 = v14 + v97;
  }
  if (v29 >= v14)
  {
    if (v11 != v29)
    {
      long long v30 = (void *)(v96 + 8 * v11);
      do
      {
        long long v31 = *(void *)(v12 + 8 * v11);
        Swift::Int v32 = v14;
        uint64_t v33 = v30;
        do
        {
          uint64_t v34 = *(void *)(v31 + 56) == *(void *)(*v33 + 56) && *(void *)(v31 + 64) == *(void *)(*v33 + 64);
          if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v12) {
            goto LABEL_154;
          }
          Swift::Int v35 = *v33;
          long long v31 = v33[1];
          *uint64_t v33 = v31;
          v33[1] = v35;
          --v33;
          ++v32;
        }
        while (v11 != v32);
        ++v11;
        ++v30;
      }
      while (v11 != v29);
      uint64_t v11 = v29;
    }
    goto LABEL_65;
  }
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 48 * a3 + 40;
LABEL_5:
    uint64_t v6 = *(void *)(v4 + 48 * a3 + 16);
    uint64_t v7 = result;
    uint64_t v8 = v5;
    while (1)
    {
      if (*(_DWORD *)(*(void *)(v8 - 72) + 60) >= *(_DWORD *)(v6 + 60))
      {
LABEL_4:
        ++a3;
        v5 += 48;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v4) {
        break;
      }
      Swift::Int v9 = (_OWORD *)(v8 - 40);
      uint64_t v10 = (_OWORD *)(v8 - 88);
      long long v12 = *(_OWORD *)(v8 - 72);
      long long v11 = *(_OWORD *)(v8 - 56);
      *(void *)(v8 - 48) = *(void *)v8;
      v8 -= 48;
      uint64_t v13 = *(void *)(v8 + 8);
      uint64_t v14 = *(void *)(v8 + 16);
      uint64_t v15 = *(void *)(v8 + 32);
      char v16 = *(unsigned char *)(v8 + 40);
      *Swift::Int v9 = *v10;
      v9[1] = v12;
      void v9[2] = v11;
      *(void *)(v8 - 40) = v13;
      *(void *)(v8 - 32) = v14;
      *(void *)(v8 - 24) = v6;
      *(void *)(v8 - 16) = v15;
      *(unsigned char *)(v8 - 8) = v16;
      if (a3 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  BOOL v14;
  long long v15;
  long long v16;
  uint64_t v17;
  char v18;
  long long v19;

  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 48 * a3 + 40;
LABEL_5:
    Swift::Int v9 = (uint64_t *)(v7 + 48 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    long long v11 = v6;
    long long v12 = v8;
    while (1)
    {
      uint64_t v13 = (_OWORD *)(v12 - 88);
      uint64_t v14 = result == *(void *)(v12 - 88) && v10 == *(void *)(v12 - 80);
      if (v14 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 48;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      char v16 = *(_OWORD *)(v12 - 72);
      uint64_t v15 = *(_OWORD *)(v12 - 56);
      *(void *)(v12 - 48) = *(void *)v12;
      v12 -= 48;
      Swift::Int result = *(void *)(v12 + 8);
      unsigned int v17 = *(void *)(v12 + 32);
      unsigned int v18 = *(unsigned char *)(v12 + 40);
      uint64_t v19 = *(_OWORD *)(v12 + 16);
      _OWORD v13[3] = *v13;
      v13[4] = v16;
      v13[5] = v15;
      *(void *)(v12 - 40) = result;
      *(_OWORD *)(v12 - 32) = v19;
      *(void *)(v12 - 16) = v17;
      *(unsigned char *)(v12 - 8) = v18;
      uint64_t v10 = v19;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  uint64_t v13;

  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 8 * a3 - 8;
LABEL_5:
    Swift::Int v9 = *(void *)(v7 + 8 * v4);
    uint64_t v10 = v6;
    long long v11 = (void *)v8;
    while (1)
    {
      Swift::Int result = *(void *)(v9 + 56);
      long long v12 = result == *(void *)(*v11 + 56) && *(void *)(v9 + 64) == *(void *)(*v11 + 64);
      if (v12 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 8;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      uint64_t v13 = *v11;
      Swift::Int v9 = v11[1];
      *long long v11 = v9;
      v11[1] = v13;
      --v11;
      if (v4 == ++v10) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 48;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 48;
  long long v29 = __src;
  uint64_t v28 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -47)
    {
      if (__dst != a2 || &a2[48 * v11] <= __dst) {
        memmove(__dst, a2, 48 * v11);
      }
      unsigned int v18 = &v4[48 * v11];
      char v27 = v18;
      long long v29 = v6;
      if (v7 < v6 && v10 >= 48)
      {
        uint64_t v19 = (char *)(a3 - 48);
        do
        {
          uint64_t v20 = v19 + 48;
          if (*(_DWORD *)(*((void *)v6 - 4) + 60) >= *(_DWORD *)(*((void *)v18 - 4) + 60))
          {
            char v27 = v18 - 48;
            if (v20 < v18 || v19 >= v18 || v20 != v18)
            {
              long long v24 = *((_OWORD *)v18 - 3);
              long long v25 = *((_OWORD *)v18 - 1);
              *((_OWORD *)v19 + 1) = *((_OWORD *)v18 - 2);
              *((_OWORD *)v19 + 2) = v25;
              *(_OWORD *)uint64_t v19 = v24;
            }
            Swift::Int v21 = v6;
            v18 -= 48;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            Swift::Int v21 = v6 - 48;
            if (v20 != v6 || v19 >= v6)
            {
              long long v22 = *(_OWORD *)v21;
              long long v23 = *((_OWORD *)v6 - 1);
              *((_OWORD *)v19 + 1) = *((_OWORD *)v6 - 2);
              *((_OWORD *)v19 + 2) = v23;
              *(_OWORD *)uint64_t v19 = v22;
            }
            long long v29 = v6 - 48;
            if (v21 <= v7) {
              break;
            }
          }
          v19 -= 48;
          uint64_t v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_40:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v29, &v28, &v27);
      return 1;
    }
  }
  else if (v8 >= -47)
  {
    if (__dst != __src || &__src[48 * v9] <= __dst) {
      memmove(__dst, __src, 48 * v9);
    }
    long long v12 = &v4[48 * v9];
    char v27 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 48)
    {
      uint64_t v13 = v4;
      while (1)
      {
        if (*(_DWORD *)(*((void *)v13 + 2) + 60) >= *(_DWORD *)(*((void *)v6 + 2) + 60))
        {
          uint64_t v4 = v13 + 48;
          uint64_t v15 = v13;
          uint64_t v14 = v6;
          if (v7 == v13)
          {
            v13 += 48;
            if (v7 < v4) {
              goto LABEL_18;
            }
          }
          else
          {
            v13 += 48;
          }
        }
        else
        {
          uint64_t v14 = v6 + 48;
          uint64_t v15 = v6;
          if (v7 == v6 && v7 < v14) {
            goto LABEL_18;
          }
        }
        long long v16 = *(_OWORD *)v15;
        long long v17 = *((_OWORD *)v15 + 2);
        *((_OWORD *)v7 + 1) = *((_OWORD *)v15 + 1);
        *((_OWORD *)v7 + 2) = v17;
        *(_OWORD *)uint64_t v7 = v16;
LABEL_18:
        v7 += 48;
        if (v13 < v12)
        {
          uint64_t v6 = v14;
          if ((unint64_t)v14 < a3) {
            continue;
          }
        }
        uint64_t v28 = v4;
        long long v29 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char *v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  uint64_t result;
  char *v31;
  char *v32;
  char *v33;

  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 48;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 48;
  uint64_t v33 = __src;
  Swift::Int v32 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -47)
    {
      if (__dst != a2 || &a2[48 * v11] <= __dst) {
        memmove(__dst, a2, 48 * v11);
      }
      uint64_t v19 = &v4[48 * v11];
      long long v31 = v19;
      uint64_t v33 = v6;
      if (v7 < v6 && v10 >= 48)
      {
        uint64_t v20 = (char *)(a3 - 48);
        Swift::Int v21 = v6;
        while (1)
        {
          long long v22 = v20 + 48;
          long long v23 = *((void *)v21 - 6);
          long long v24 = *((void *)v21 - 5);
          v21 -= 48;
          long long v25 = *((void *)v19 - 6) == v23 && *((void *)v19 - 5) == v24;
          if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            long long v31 = v19 - 48;
            if (v22 < v19 || v20 >= v19 || v22 != v19)
            {
              uint64_t v28 = *((_OWORD *)v19 - 3);
              long long v29 = *((_OWORD *)v19 - 1);
              *((_OWORD *)v20 + 1) = *((_OWORD *)v19 - 2);
              *((_OWORD *)v20 + 2) = v29;
              *(_OWORD *)uint64_t v20 = v28;
            }
            Swift::Int v21 = v6;
            v19 -= 48;
            if (v6 <= v7) {
              goto LABEL_46;
            }
          }
          else
          {
            if (v22 != v6 || v20 >= v6)
            {
              uint64_t v26 = *(_OWORD *)v21;
              char v27 = *((_OWORD *)v21 + 2);
              *((_OWORD *)v20 + 1) = *((_OWORD *)v21 + 1);
              *((_OWORD *)v20 + 2) = v27;
              *(_OWORD *)uint64_t v20 = v26;
            }
            uint64_t v33 = v21;
            if (v21 <= v7) {
              goto LABEL_46;
            }
          }
          v20 -= 48;
          uint64_t v6 = v21;
          if (v19 <= v4) {
            goto LABEL_46;
          }
        }
      }
      goto LABEL_46;
    }
  }
  else if (v8 >= -47)
  {
    if (__dst != __src || &__src[48 * v9] <= __dst) {
      memmove(__dst, __src, 48 * v9);
    }
    long long v12 = &v4[48 * v9];
    long long v31 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 48)
    {
      do
      {
        uint64_t v13 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
          {
            long long v17 = *(_OWORD *)v4;
            unsigned int v18 = *((_OWORD *)v4 + 2);
            *((_OWORD *)v7 + 1) = *((_OWORD *)v4 + 1);
            *((_OWORD *)v7 + 2) = v18;
            *(_OWORD *)uint64_t v7 = v17;
          }
          v4 += 48;
          Swift::Int v32 = v4;
          uint64_t v14 = v6;
        }
        else
        {
          uint64_t v14 = v6 + 48;
          if (v7 < v6 || v7 >= v14 || v7 != v6)
          {
            uint64_t v15 = *(_OWORD *)v6;
            long long v16 = *((_OWORD *)v6 + 2);
            *((_OWORD *)v7 + 1) = *((_OWORD *)v6 + 1);
            *((_OWORD *)v7 + 2) = v16;
            *(_OWORD *)uint64_t v7 = v15;
          }
        }
        v7 += 48;
        if (v4 >= v12) {
          break;
        }
        uint64_t v6 = v14;
      }
      while ((unint64_t)v14 < a3);
      uint64_t v33 = v7;
    }
LABEL_46:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v33, (const void **)&v32, &v31);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t result;
  char *v26;
  const void *v27;
  char *v28;

  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  long long v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    long long v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v28 = __src;
  char v27 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      long long v17 = &v4[8 * v13];
      uint64_t v26 = v17;
      uint64_t v28 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        unsigned int v18 = (char *)(a3 - 8);
        uint64_t v19 = v6;
        while (1)
        {
          uint64_t v20 = v18 + 8;
          Swift::Int v21 = *((void *)v17 - 1);
          long long v22 = *((void *)v19 - 1);
          v19 -= 8;
          long long v23 = *(void *)(v22 + 64);
          long long v24 = *(void *)(v21 + 56) == *(void *)(v22 + 56) && *(void *)(v21 + 64) == v23;
          if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v26 = v17 - 8;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(void *)unsigned int v18 = *((void *)v17 - 1);
            }
            uint64_t v19 = v6;
            v17 -= 8;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(void *)unsigned int v18 = *(void *)v19;
            }
            uint64_t v28 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 8;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v14 = &v4[8 * v10];
    uint64_t v26 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        uint64_t v15 = *(void *)(*(void *)v6 + 56) == *(void *)(*(void *)v4 + 56)
           && *(void *)(*(void *)v6 + 64) == *(void *)(*(void *)v4 + 64);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          char v27 = v4;
          long long v16 = v6;
        }
        else
        {
          long long v16 = v6 + 8;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      uint64_t v28 = v7;
    }
LABEL_50:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v28, &v27, &v26);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -48)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 48;
    if (result != v3 || result >= &v3[48 * v6])
    {
      return (char *)memmove(result, v3, 48 * v6);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

id specialized closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  id v4 = (id)a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  swift_bridgeObjectRetain();
  return v4;
}

BOOL specialized static TopologicalSort.Element.== infix(_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  BOOL result = 0;
  if (a1 == a4 && a2 == a5)
  {
    BOOL result = (a3 | a6) == 0;
    if (a3)
    {
      if (a6)
      {
        type metadata accessor for SGNode();
        id v10 = (id)a6;
        id v11 = (id)a3;
        char v12 = static NSObject.== infix(_:_:)();

        return v12 & 1;
      }
    }
  }
  return result;
}

uint64_t outlined init with take of WeakBox<SGEdge>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t (*a2)(id), uint64_t a3)
{
  unint64_t v6 = a1;
  uint64_t v18 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0;
      uint64_t v16 = v6 & 0xFFFFFFFFFFFFFF8;
      unint64_t v17 = v6 & 0xC000000000000001;
      unint64_t v15 = v6;
      while (v17)
      {
        id v9 = (id)MEMORY[0x2611848A0](v8, v6);
LABEL_9:
        id v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_17;
        }
        uint64_t v12 = a3;
        char v13 = a2(v9);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return v12;
        }
        if (v13)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v6 = v15;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v8;
        if (v11 == v7)
        {
          uint64_t v12 = v18;
          goto LABEL_20;
        }
      }
      if (v8 < *(void *)(v16 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_19;
      }
    }
    id v9 = *(id *)(v6 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_19:
  uint64_t v12 = MEMORY[0x263F8EE78];
LABEL_20:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGEdgeCG_AHsAE_pTg504_s11d41Graph7SGGraphC4fromACs7Decoder_p_tKcfcAA6F10CAGKXEfU5_SDySSAF7SGInputCGSDySSAF8SGOutputCGTf1cn_nTf4ngg_n(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = MEMORY[0x263F8EE78];
    if (!v6) {
      break;
    }
    uint64_t v15 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v6 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v8 = 0;
    while (v6 != v8)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v9 = (id)MEMORY[0x2611848A0](v8, a1);
      }
      else {
        id v9 = *(id *)(a1 + 8 * v8 + 32);
      }
      id v10 = v9;
      id v13 = v9;
      closure #7 in SGGraph.init(from:)((uint64_t *)&v13, a2, a3, &v12, &v14);

      if (v3) {
        return swift_release();
      }
      ++v8;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v6 == v8) {
        return v15;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized SGGraph.edges(from:)(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR___SGOutput_edges;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v7 = MEMORY[0x263F8EE78];
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v2 + 32;
    swift_retain();
    swift_retain();
    do
    {
      if (MEMORY[0x261185960](v4))
      {
        MEMORY[0x261184120]();
        if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v4 += 8;
      --v3;
    }
    while (v3);
    uint64_t v5 = v7;
  }
  else
  {
    swift_retain();
    swift_retain();
    uint64_t v5 = MEMORY[0x263F8EE78];
  }
  swift_release();
  swift_release();
  return v5;
}

uint64_t specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(void *a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(char *, char *))
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25C418EE0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_25C4195A0;
  *(void *)(v7 + 32) = a1;
  uint64_t v174 = v7;
  specialized Array._endMutation()();
  id v8 = a1;
  uint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v10 = specialized OrderedSet.init<A>(_:)(MEMORY[0x263F8EE78]);
  uint64_t v12 = v11;
  uint64_t v13 = specialized OrderedSet.init<A>(_:)(v9);
  uint64_t v15 = v14;
  uint64_t v16 = v9;
  unint64_t v17 = (void *)inited;
  unint64_t v18 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(v16);
  *(void *)(inited + 32) = v174;
  *(void *)(inited + 40) = v10;
  *(void *)(inited + 48) = v12;
  *(void *)(inited + 56) = v13;
  *(void *)(inited + 64) = v15;
  *(void *)(inited + 72) = v18;
  *(void *)(inited + 80) = v19;
  *(void *)(inited + 88) = v20;
  uint64_t v166 = (unint64_t *)(inited + 16);
  uint64_t v21 = *(void *)(inited + 16);
  if (!v21)
  {
    long long v23 = 0;
    long long v22 = 0;
    goto LABEL_176;
  }
  long long v22 = 0;
  long long v23 = 0;
  do
  {
    uint64_t v24 = v21 - 1;
    char v157 = v17 + 4;
    long long v25 = &v17[8 * v24 + 4];
    unint64_t v27 = *v25;
    unint64_t v26 = v25[1];
    long long v29 = (void *)v25[2];
    uint64_t v28 = v25[3];
    long long v31 = (void *)v25[4];
    unint64_t v30 = v25[5];
    Swift::Int v32 = (void *)v25[6];
    uint64_t v33 = (void *)v25[7];
    uint64_t v165 = v17;
    _OWORD v17[2] = v24;
    unint64_t v175 = v27;
    unint64_t v176 = v26;
    uint64_t v177 = v29;
    uint64_t v178 = v28;
    uint64_t v179 = v31;
    unint64_t v180 = v30;
    uint64_t v181 = v32;
    uint64_t v182 = v33;
    if (!(v27 >> 62))
    {
      uint64_t v34 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v34) {
        goto LABEL_5;
      }
LABEL_169:
      swift_bridgeObjectRelease();
LABEL_170:
      unint64_t v17 = v165;
      goto LABEL_171;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v34) {
      goto LABEL_169;
    }
    while (1)
    {
LABEL_5:
      unint64_t v35 = v34 - 1;
      if (__OFSUB__(v34, 1)) {
        goto LABEL_180;
      }
      if ((v27 & 0xC000000000000001) != 0)
      {
        id v36 = (id)MEMORY[0x2611848A0](v35, v27);
      }
      else
      {
        if ((v35 & 0x8000000000000000) != 0) {
          goto LABEL_181;
        }
        if (v35 >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
        }
        id v36 = *(id *)(v27 + 8 * v35 + 32);
      }
      unint64_t v37 = v36;
      swift_bridgeObjectRelease();
      id v38 = (void *)swift_allocObject();
      _OWORD v38[2] = a3;
      v38[3] = a4;
      void v38[4] = v37;
      long long v39 = v37;
      outlined consume of (@escaping @callee_guaranteed () -> (@owned IndexingIterator<[SGNode]>))?((uint64_t)v23);
      uint64_t v40 = swift_allocObject();
      *(void *)(v40 + 16) = partial apply for implicit closure #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:);
      *(void *)(v40 + 24) = v38;
      uint64_t v172 = v40;
      outlined consume of (@escaping @callee_guaranteed () -> (@owned IndexingIterator<[SGNode]>))?((uint64_t)v22);
      uint64_t v41 = (id *)(v181 + 4);
      uint64_t v42 = v181[2];
      if (v180)
      {
        uint64_t v43 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v39, (uint64_t)v41, v42, (uint64_t *)(v180 + 16), v180 + 32);
        if ((v44 & 1) == 0)
        {
          uint64_t v45 = v43;
          goto LABEL_26;
        }
      }
      else if (v42)
      {
        if (*v41 == v39)
        {
          uint64_t v45 = 0;
          goto LABEL_26;
        }
        if (v42 != 1)
        {
          if ((char *)v181[5] == v39)
          {
            uint64_t v45 = 1;
            goto LABEL_26;
          }
          if (v42 != 2)
          {
            if ((char *)v181[6] == v39)
            {
              uint64_t v45 = 2;
              goto LABEL_26;
            }
            if (v42 != 3)
            {
              if ((char *)v181[7] == v39)
              {
                uint64_t v45 = 3;
                goto LABEL_26;
              }
              uint64_t v60 = 0;
              while (v42 - 4 != v60)
              {
                unint64_t v61 = (char *)v181[v60++ + 8];
                if (v61 == v39)
                {
                  uint64_t v45 = v60 + 3;
                  goto LABEL_26;
                }
              }
            }
          }
        }
        uint64_t v42 = 0;
      }
      unint64_t v46 = specialized OrderedSet._appendNew(_:in:)((uint64_t)v39, v42);
      uint64_t v47 = v181[2];
      uint64_t v48 = (*(uint64_t (**)(unint64_t))(v172 + 16))(v46);
      uint64_t v50 = v49;
      uint64_t v51 = v182;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v182[2] + 1, 1);
        uint64_t v51 = v182;
      }
      unint64_t v53 = v51[2];
      unint64_t v52 = v51[3];
      if (v53 >= v52 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
        uint64_t v51 = v182;
      }
      uint64_t v45 = v47 - 1;
      v51[2] = v53 + 1;
      unint64_t v54 = &v51[2 * v53];
      v54[4] = v48;
      v54[5] = v50;
LABEL_26:
      uint64_t v55 = v182;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v55 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v182);
      }
      uint64_t v56 = &v55[2 * v45];
      unint64_t v57 = v56[4];
      unint64_t v58 = v56[5];
      if (v57 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v58 == v62)
        {
LABEL_30:
          uint64_t v59 = 0;
          goto LABEL_47;
        }
      }
      else if (v58 == *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_30;
      }
      if ((v57 & 0xC000000000000001) != 0)
      {
        id v63 = (id)MEMORY[0x2611848A0](v58, v57);
      }
      else
      {
        if ((v58 & 0x8000000000000000) != 0) {
          goto LABEL_183;
        }
        if (v58 >= *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_184;
        }
        id v63 = *(id *)(v57 + 8 * v58 + 32);
      }
      uint64_t v59 = v63;
      BOOL v64 = __OFADD__(v58++, 1);
      if (v64) {
        goto LABEL_185;
      }
LABEL_47:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v55 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v55);
      }
      uint64_t v65 = &v55[2 * v45];
      v65[4] = v57;
      v65[5] = v58;
      uint64_t v182 = v55;
      if (!v59) {
        break;
      }
      if (v175 >> 62)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v66) {
          goto LABEL_55;
        }
LABEL_52:
        if ((v175 & 0xC000000000000001) == 0)
        {
          if (*(void **)(v175 + 32) == v59) {
            goto LABEL_173;
          }
          goto LABEL_54;
        }
        uint64_t v114 = MEMORY[0x2611848A0](0, v175);
        swift_unknownObjectRelease();
        if ((void *)v114 != v59)
        {
LABEL_54:
          if (v66 != 1)
          {
            uint64_t v73 = 1;
            while (1)
            {
              if ((v175 & 0xC000000000000001) != 0)
              {
                uint64_t v74 = MEMORY[0x2611848A0](v73, v175);
                BOOL v64 = __OFADD__(v73++, 1);
                if (v64)
                {
                  __break(1u);
LABEL_179:
                  __break(1u);
LABEL_180:
                  __break(1u);
LABEL_181:
                  __break(1u);
                  goto LABEL_182;
                }
                uint64_t v75 = (void *)v74;
                swift_unknownObjectRelease();
                if (v75 == v59) {
                  goto LABEL_173;
                }
              }
              else
              {
                if (__OFADD__(v73, 1)) {
                  goto LABEL_179;
                }
                uint64_t v76 = *(void **)(v175 + 32 + 8 * v73++);
                if (v76 == v59) {
                  goto LABEL_173;
                }
              }
              if (v73 == v66) {
                goto LABEL_55;
              }
            }
          }
          goto LABEL_55;
        }
LABEL_173:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type APIError and conformance APIError();
        swift_allocError();
        *(_OWORD *)uint64_t v144 = xmmword_25C41D6C0;
        *(unsigned char *)(v144 + 16) = 21;
        swift_willThrow();

        swift_release();
        swift_release();
LABEL_174:
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        return swift_release();
      }
      uint64_t v66 = *(void *)((v175 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v66) {
        goto LABEL_52;
      }
LABEL_55:
      swift_bridgeObjectRelease_n();
      unint64_t v67 = v59;
      MEMORY[0x261184120]();
      if (*(void *)((v175 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v175 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_150:

      long long v39 = v67;
LABEL_151:

      unint64_t v27 = v175;
      if (v175 >> 62)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v34 = *(void *)((v175 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      long long v22 = partial apply for thunk for @callee_guaranteed () -> (@owned IndexingIterator<[SGNode]>);
      long long v23 = partial apply for implicit closure #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:);
      if (!v34)
      {
        swift_bridgeObjectRelease();
        long long v22 = partial apply for thunk for @callee_guaranteed () -> (@owned IndexingIterator<[SGNode]>);
        long long v23 = partial apply for implicit closure #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:);
        goto LABEL_170;
      }
    }
    unint64_t v68 = v176;
    uint64_t v69 = v177;
    BOOL v70 = (id *)(v177 + 4);
    uint64_t v71 = v177[2];
    if (v176)
    {
      specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v39, (uint64_t)(v177 + 4), v71, (uint64_t *)(v176 + 16), v176 + 32);
      if ((v72 & 1) == 0) {
        goto LABEL_118;
      }
    }
    else if (v71)
    {
      if (*v70 == v39) {
        goto LABEL_118;
      }
      if (v71 != 1)
      {
        if ((char *)v177[5] == v39) {
          goto LABEL_118;
        }
        if (v71 != 2)
        {
          if ((char *)v177[6] == v39) {
            goto LABEL_118;
          }
          if (v71 != 3)
          {
            if ((char *)v177[7] == v39)
            {
LABEL_118:
              uint64_t v106 = v175;
              if (v175 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v115 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (!v115) {
                  goto LABEL_188;
                }
              }
              else if (!*(void *)((v175 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                goto LABEL_188;
              }
              if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
                || (v175 & 0x8000000000000000) != 0
                || (v175 & 0x4000000000000000) != 0)
              {
                uint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew()(v175);
                unint64_t v175 = v106;
              }
              uint64_t v107 = v106 & 0xFFFFFFFFFFFFFF8;
              uint64_t v108 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (!v108) {
                goto LABEL_189;
              }
              uint64_t v109 = v108 - 1;
              Swift::String v110 = *(void **)((v106 & 0xFFFFFFFFFFFFFF8) + 8 * v109 + 0x20);
              *(void *)(v107 + 16) = v109;
              specialized Array._endMutation()();

              goto LABEL_151;
            }
            uint64_t v103 = v71 - 4;
            uint64_t v104 = (void **)(v177 + 8);
            while (v103)
            {
              uint64_t v105 = (char *)*v104++;
              --v103;
              if (v105 == v39) {
                goto LABEL_118;
              }
            }
          }
        }
      }
    }
    if ((a2 & 1) == 0
      || (BOOL v77 = &v39[OBJC_IVAR___SGNode_data], v78 = v39[OBJC_IVAR___SGNode_data + 80], (v78 & 0xC0) != 0x40))
    {
LABEL_81:
      uint64_t v94 = v177[2];
      if (v176)
      {
        specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v39, (uint64_t)(v177 + 4), v94, (uint64_t *)(v176 + 16), v176 + 32);
        if ((v95 & 1) == 0)
        {
LABEL_93:
          if (*v166)
          {
            unint64_t v96 = v157[8 * *v166 - 8];
            if (v96 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v97 = _CocoaArrayWrapper.endIndex.getter();
              if (v97) {
                goto LABEL_96;
              }
            }
            else
            {
              uint64_t v97 = *(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v97)
              {
LABEL_96:
                unint64_t v98 = v97 - 1;
                if (__OFSUB__(v97, 1)) {
                  goto LABEL_190;
                }
                if ((v96 & 0xC000000000000001) != 0)
                {
                  uint64_t v99 = (char *)MEMORY[0x2611848A0](v98, v96);
                }
                else
                {
                  if ((v98 & 0x8000000000000000) != 0) {
                    goto LABEL_191;
                  }
                  if (v98 >= *(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                    goto LABEL_192;
                  }
                  uint64_t v99 = (char *)*(id *)(v96 + 8 * v98 + 32);
                }
                unint64_t v67 = v99;
                swift_bridgeObjectRelease();
                goto LABEL_141;
              }
            }
            swift_bridgeObjectRelease();
          }
          unint64_t v67 = 0;
LABEL_141:
          a5(v39, v67);
          if (!v169)
          {
            uint64_t v116 = v175;
            if (v175 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v120 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v120) {
                goto LABEL_186;
              }
            }
            else if (!*(void *)((v175 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              goto LABEL_186;
            }
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
              || (v175 & 0x8000000000000000) != 0
              || (v175 & 0x4000000000000000) != 0)
            {
              uint64_t v116 = specialized _ArrayBuffer._consumeAndCreateNew()(v175);
              unint64_t v175 = v116;
            }
            uint64_t v117 = *(void *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (!v117) {
              goto LABEL_187;
            }
            uint64_t v118 = v117 - 1;
            uint64_t v119 = *(void **)((v116 & 0xFFFFFFFFFFFFFF8) + 8 * v118 + 0x20);
            *(void *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x10) = v118;
            specialized Array._endMutation()();

            goto LABEL_150;
          }

          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_174;
        }
      }
      else if (v94)
      {
        if (*v70 == v39) {
          goto LABEL_93;
        }
        if (v94 != 1)
        {
          if ((char *)v177[5] == v39) {
            goto LABEL_93;
          }
          if (v94 != 2)
          {
            if ((char *)v177[6] == v39) {
              goto LABEL_93;
            }
            if (v94 != 3)
            {
              if ((char *)v177[7] == v39) {
                goto LABEL_93;
              }
              uint64_t v111 = v94 - 4;
              uint64_t v112 = (void **)(v177 + 8);
              while (v111)
              {
                unint64_t v113 = (char *)*v112++;
                --v111;
                if (v113 == v39) {
                  goto LABEL_93;
                }
              }
            }
          }
        }
        uint64_t v94 = 0;
      }
      specialized OrderedSet._appendNew(_:in:)((uint64_t)v39, v94);
      goto LABEL_93;
    }
    uint64_t v79 = *(char **)v77;
    uint64_t v80 = *((void *)v77 + 1);
    uint64_t v82 = (void *)*((void *)v77 + 2);
    uint64_t v81 = (void *)*((void *)v77 + 3);
    uint64_t v83 = *((void *)v77 + 4);
    uint64_t v84 = *((void *)v77 + 5);
    uint64_t v85 = *((void *)v77 + 6);
    uint64_t v86 = *((void *)v77 + 7);
    uint64_t v87 = *((void *)v77 + 8);
    uint64_t v88 = *((void *)v77 + 9);
    uint64_t v89 = v179;
    uint64_t v90 = (id *)(v179 + 4);
    uint64_t v91 = v179[2];
    if (v178)
    {
      unsigned __int8 v92 = v39[OBJC_IVAR___SGNode_data + 80];
      uint64_t v161 = (void *)*((void *)v77 + 2);
      uint64_t v162 = *(char **)v77;
      uint64_t v151 = *((void *)v77 + 9);
      uint64_t v152 = *((void *)v77 + 8);
      int v150 = *((void *)v77 + 7);
      int v153 = *((void *)v77 + 6);
      uint64_t v154 = *((void *)v77 + 5);
      uint64_t v155 = *((void *)v77 + 4);
      id v156 = (id)*((void *)v77 + 3);
      int v160 = *((void *)v77 + 1);
      specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v39, (uint64_t)v90, v91, (uint64_t *)(v178 + 16), v178 + 32);
      if (v93)
      {
        uint64_t v146 = v162;
        uint64_t v158 = v178;
        uint64_t v122 = v178;
        unsigned __int8 v78 = v92;
        goto LABEL_161;
      }
      goto LABEL_81;
    }
    if (!v91) {
      goto LABEL_159;
    }
    if (*v90 == v39) {
      goto LABEL_81;
    }
    if (v91 == 1) {
      goto LABEL_159;
    }
    if ((char *)v179[5] == v39) {
      goto LABEL_81;
    }
    if (v91 == 2) {
      goto LABEL_159;
    }
    if ((char *)v179[6] == v39) {
      goto LABEL_81;
    }
    if (v91 == 3) {
      goto LABEL_159;
    }
    if ((char *)v179[7] == v39) {
      goto LABEL_81;
    }
    uint64_t v100 = v91 - 4;
    unint64_t v101 = (void **)(v179 + 8);
    while (v100)
    {
      unint64_t v102 = (char *)*v101++;
      --v100;
      if (v102 == v39) {
        goto LABEL_81;
      }
    }
LABEL_159:
    uint64_t v158 = v178;
    int v160 = v80;
    uint64_t v151 = v88;
    uint64_t v152 = v87;
    uint64_t v161 = v82;
    id v156 = v81;
    uint64_t v154 = v84;
    uint64_t v155 = v83;
    int v153 = v85;
    uint64_t v121 = v79;
    int v150 = v86;
    outlined copy of NodeData(v79, v80, v82, v81, v83, v84, v85, v86, v87, v88, v78);
    uint64_t v122 = 0;
    uint64_t v162 = v121;
    uint64_t v146 = v121;
LABEL_161:
    specialized OrderedSet._find(_:)((uint64_t)v39, v122, v179);
    if (v124)
    {
      specialized OrderedSet._appendNew(_:in:)((uint64_t)v39, v123);
      unint64_t v68 = v176;
      uint64_t v69 = v177;
      uint64_t v89 = v179;
      uint64_t v158 = v178;
    }
    unint64_t v125 = *v166;
    unint64_t v147 = v165[3];
    int64_t v167 = *v166 + 1;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v125 >= v147 >> 1) {
      uint64_t v165 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v147 > 1), v167, 1, v165);
    }
    v165[2] = v167;
    uint64_t v126 = &v165[8 * v125];
    v126[4] = v175;
    v126[5] = v68;
    v126[6] = v69;
    v126[7] = v158;
    v126[8] = v89;
    v126[9] = v180;
    v126[10] = v181;
    v126[11] = v55;
    uint64_t v127 = swift_allocObject();
    *(_OWORD *)(v127 + 16) = xmmword_25C4195A0;
    id v128 = *(void **)&v146[OBJC_IVAR___SGGraph_resultsNode];
    *(void *)(v127 + 32) = v128;
    uint64_t v173 = v127;
    specialized Array._endMutation()();
    id v129 = v128;
    uint64_t v130 = MEMORY[0x263F8EE78];
    uint64_t v168 = specialized OrderedSet.init<A>(_:)(MEMORY[0x263F8EE78]);
    uint64_t v159 = v131;
    uint64_t v132 = specialized OrderedSet.init<A>(_:)(v130);
    uint64_t v148 = v133;
    uint64_t v149 = v132;
    unint64_t v134 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(v130);
    uint64_t v136 = v135;
    uint64_t v138 = v137;
    unint64_t v140 = v165[2];
    unint64_t v139 = v165[3];
    if (v140 >= v139 >> 1)
    {
      unint64_t v142 = v134;
      unint64_t v143 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v139 > 1), v140 + 1, 1, v165);
      unint64_t v134 = v142;
      uint64_t v165 = v143;
    }
    v165[2] = v140 + 1;
    unint64_t v17 = v165;
    uint64_t v141 = &v165[8 * v140];
    v141[4] = v173;
    v141[5] = v168;
    v141[6] = v159;
    v141[7] = v149;
    char v141[8] = v148;
    v141[9] = v134;
    v141[10] = v136;
    v141[11] = v138;
    outlined consume of NodeData(v162, v160, v161, v156, v155, v154, v153, v150, v152, v151, v78);

    long long v22 = partial apply for thunk for @callee_guaranteed () -> (@owned IndexingIterator<[SGNode]>);
    long long v23 = partial apply for implicit closure #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:);
LABEL_171:
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v21 = v17[2];
    uint64_t v166 = v17 + 2;
  }
  while (v21);
LABEL_176:
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> (@owned IndexingIterator<[SGNode]>))?((uint64_t)v23);
  return outlined consume of (@escaping @callee_guaranteed () -> (@owned IndexingIterator<[SGNode]>))?((uint64_t)v22);
}

uint64_t specialized SGGraph.connectedUpstreamSubgraph(rootedAt:)(void *a1)
{
  unint64_t v2 = MEMORY[0x263F8EE78];
  uint64_t v4 = specialized OrderedSet.init<A>(_:)(MEMORY[0x263F8EE78]);
  specialized OrderedSet.init<A>(_:)(v2);
  specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(a1, 0, (uint64_t)default argument 1 of OSSignpostIntervalState.init(id:isOpen:), 0, (void (*)(char *, char *))partial apply for closure #1 in SGGraph.connectedUpstreamSubgraph(rootedAt:));
  return v4;
}

void partial apply for closure #1 in SGGraph.topologicalSort()(char *a1, void *a2)
{
  closure #1 in SGGraph.topologicalSort()(a1, a2, *(void ***)(v2 + 16));
}

double _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi9_(uint64_t a1)
{
  *(void *)a1 = 6;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0x200000000000000;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  return result;
}

unint64_t lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError()
{
  unint64_t result = lazy protocol witness table cache variable for type SGInternalError and conformance SGInternalError;
  if (!lazy protocol witness table cache variable for type SGInternalError and conformance SGInternalError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGInternalError and conformance SGInternalError);
  }
  return result;
}

BOOL partial apply for closure #1 in SGGraph.surfaceNodeElement(ofType:)(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v3 = (uint64_t *)(a1 + OBJC_IVAR___SGInput_type);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = 53;
  if (v2) {
    uint64_t v5 = 54;
  }
  return v4 == v5 || v4 == 12;
}

void partial apply for closure #2 in SGGraph.surfaceNodeElement(ofType:)(char *a1, void *a2)
{
  closure #2 in SGGraph.surfaceNodeElement(ofType:)(a1, a2, *(unsigned char *)(v2 + 16), *(void **)(v2 + 24), *(void ***)(v2 + 32));
}

uint64_t sub_25C3AFCC4()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

char *specialized static SGGraph.generateArgumentsNode(inputs:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = (void *)MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v59 = (void *)MEMORY[0x263F8EE78];
    unint64_t result = (char *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
    {
      __break(1u);
      goto LABEL_41;
    }
    uint64_t v3 = v59;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = MEMORY[0x2611848A0](v5, a1);
        uint64_t v8 = *(void *)(v6 + OBJC_IVAR___SGInput_name);
        uint64_t v7 = *(void *)(v6 + OBJC_IVAR___SGInput_name + 8);
        uint64_t v9 = (uint64_t *)(v6 + OBJC_IVAR___SGInput_type);
        swift_beginAccess();
        uint64_t v10 = *v9;
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        uint64_t v59 = v3;
        unint64_t v12 = v3[2];
        unint64_t v11 = v3[3];
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          uint64_t v3 = v59;
        }
        ++v5;
        v3[2] = v12 + 1;
        uint64_t v13 = &v3[3 * v12];
        v13[4] = v8;
        v13[5] = v7;
        v13[6] = v10;
      }
      while (v2 != v5);
    }
    else
    {
      uint64_t v14 = (void *)(a1 + 32);
      do
      {
        uint64_t v15 = (uint64_t *)(*v14 + OBJC_IVAR___SGInput_name);
        uint64_t v17 = *v15;
        uint64_t v16 = v15[1];
        unint64_t v18 = (uint64_t *)(*v14 + OBJC_IVAR___SGInput_type);
        swift_beginAccess();
        uint64_t v19 = *v18;
        uint64_t v59 = v3;
        unint64_t v21 = v3[2];
        unint64_t v20 = v3[3];
        swift_bridgeObjectRetain();
        if (v21 >= v20 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
          uint64_t v3 = v59;
        }
        v3[2] = v21 + 1;
        long long v22 = &v3[3 * v21];
        v22[4] = v17;
        void v22[5] = v16;
        v22[6] = v19;
        ++v14;
        --v2;
      }
      while (v2);
    }
  }
  long long v23 = (objc_class *)type metadata accessor for SGNode();
  uint64_t v24 = (char *)objc_allocWithZone(v23);
  swift_unknownObjectWeakInit();
  long long v25 = &v24[OBJC_IVAR___SGNode_name];
  *(void *)long long v25 = 0x746E656D75677241;
  *((void *)v25 + 1) = 0xE900000000000073;
  unint64_t v26 = v24;
  uint64_t v27 = MEMORY[0x263F8EE78];
  *(void *)&v26[OBJC_IVAR___SGNode_inputs] = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV9InputSpecVG_AF7SGInputCs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA7k24CGAA8NodeDataO_SStFAgA17fgh2V9iJ6VXEfU_SSTf1cn_nTf4ng_n(MEMORY[0x263F8EE78], 0x746E656D75677241, 0xE900000000000073);
  uint64_t v28 = v3[2];
  long long v29 = &selRef_create_type_;
  if (v28)
  {
    uint64_t v55 = v26;
    uint64_t v56 = v27;
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    unint64_t v30 = (objc_class *)type metadata accessor for SGOutput();
    unint64_t v54 = v3;
    long long v31 = v3 + 6;
    do
    {
      Swift::Int v32 = v29;
      uint64_t v34 = *(v31 - 2);
      uint64_t v33 = *(v31 - 1);
      uint64_t v35 = *v31;
      v31 += 3;
      id v36 = (char *)objc_allocWithZone(v30);
      unint64_t v37 = &v36[OBJC_IVAR___SGOutput_attachment];
      *(void *)unint64_t v37 = 0;
      *((void *)v37 + 1) = 0;
      id v38 = &v36[OBJC_IVAR___SGOutput_edges];
      *(void *)id v38 = 0;
      *((void *)v38 + 1) = MEMORY[0x263F8EE78];
      swift_unknownObjectWeakInit();
      long long v39 = &v36[OBJC_IVAR___SGOutput_name];
      *(void *)long long v39 = v34;
      *((void *)v39 + 1) = v33;
      *(void *)&v36[OBJC_IVAR___SGOutput_type] = v35;
      swift_beginAccess();
      *(_OWORD *)unint64_t v37 = xmmword_25C41D6D0;
      swift_bridgeObjectRetain_n();
      long long v29 = v32;
      swift_bridgeObjectRelease();
      v58.receiver = v36;
      v58.super_class = v30;
      objc_msgSendSuper2(&v58, (SEL)v32 + 1560);
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v28;
    }
    while (v28);
    uint64_t v40 = v56;
    uint64_t v3 = v54;
    swift_bridgeObjectRelease();
    unint64_t v26 = v55;
    uint64_t v27 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v40 = v27;
  }
  *(void *)&v26[OBJC_IVAR___SGNode_outputs] = v40;
  uint64_t v41 = &v26[OBJC_IVAR___SGNode_data];
  *(_OWORD *)uint64_t v41 = xmmword_25C41D6E0;
  *((void *)v41 + 2) = v27;
  *((void *)v41 + 3) = v3;
  *((_OWORD *)v41 + 2) = xmmword_25C41A100;
  *((_OWORD *)v41 + 3) = 0u;
  *((_OWORD *)v41 + 4) = 0u;
  v41[80] = 0;
  swift_bridgeObjectRetain();

  v57.receiver = v26;
  v57.super_class = v23;
  uint64_t v42 = (char *)objc_msgSendSuper2(&v57, v29[6]);
  unint64_t v43 = *(void *)&v42[OBJC_IVAR___SGNode_inputs];
  if (v43 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v48 = v42;
    unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v44 = (uint64_t)result;
    if (!result) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v44 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    unint64_t result = v42;
    if (!v44) {
      goto LABEL_30;
    }
  }
  if (v44 < 1)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v45 = 0;
  do
  {
    if ((v43 & 0xC000000000000001) != 0) {
      id v46 = (id)MEMORY[0x2611848A0](v45, v43);
    }
    else {
      id v46 = *(id *)(v43 + 8 * v45 + 32);
    }
    uint64_t v47 = v46;
    ++v45;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
  }
  while (v44 != v45);
LABEL_30:
  swift_bridgeObjectRelease_n();
  unint64_t v49 = *(void *)&v42[OBJC_IVAR___SGNode_outputs];
  if (!(v49 >> 62))
  {
    uint64_t v50 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = (char *)swift_bridgeObjectRetain_n();
    if (v50) {
      goto LABEL_32;
    }
LABEL_39:

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return v42;
  }
  swift_bridgeObjectRetain_n();
  unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v50 = (uint64_t)result;
  if (!result) {
    goto LABEL_39;
  }
LABEL_32:
  if (v50 >= 1)
  {
    uint64_t v51 = 0;
    do
    {
      if ((v49 & 0xC000000000000001) != 0) {
        id v52 = (id)MEMORY[0x2611848A0](v51, v49);
      }
      else {
        id v52 = *(id *)(v49 + 8 * v51 + 32);
      }
      unint64_t v53 = v52;
      ++v51;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();
    }
    while (v50 != v51);
    goto LABEL_39;
  }
LABEL_42:
  __break(1u);
  return result;
}

char *specialized static SGGraph.generateResultsNode(outputs:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v43 = MEMORY[0x263F8EE78];
    unint64_t result = (char *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
    {
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v5 = v43;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = MEMORY[0x2611848A0](v6, a1);
        uint64_t v9 = *(void *)(v7 + OBJC_IVAR___SGOutput_name);
        uint64_t v8 = *(void *)(v7 + OBJC_IVAR___SGOutput_name + 8);
        uint64_t v10 = (uint64_t *)(v7 + OBJC_IVAR___SGOutput_type);
        swift_beginAccess();
        uint64_t v11 = *v10;
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        unint64_t v13 = *(void *)(v43 + 16);
        unint64_t v12 = *(void *)(v43 + 24);
        if (v13 >= v12 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        }
        ++v6;
        *(void *)(v43 + 16) = v13 + 1;
        uint64_t v14 = v43 + 32 * v13;
        *(void *)(v14 + 32) = v9;
        *(void *)(v14 + 40) = v8;
        *(void *)(v14 + 48) = v11;
        *(unsigned char *)(v14 + 56) = 0;
      }
      while (v2 != v6);
    }
    else
    {
      uint64_t v15 = (void *)(a1 + 32);
      do
      {
        uint64_t v16 = (uint64_t *)(*v15 + OBJC_IVAR___SGOutput_name);
        uint64_t v18 = *v16;
        uint64_t v17 = v16[1];
        uint64_t v19 = (uint64_t *)(*v15 + OBJC_IVAR___SGOutput_type);
        swift_beginAccess();
        uint64_t v20 = *v19;
        unint64_t v22 = *(void *)(v43 + 16);
        unint64_t v21 = *(void *)(v43 + 24);
        swift_bridgeObjectRetain();
        if (v22 >= v21 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        }
        *(void *)(v43 + 16) = v22 + 1;
        uint64_t v23 = v43 + 32 * v22;
        *(void *)(v23 + 32) = v18;
        *(void *)(v23 + 40) = v17;
        *(void *)(v23 + 48) = v20;
        *(unsigned char *)(v23 + 56) = 0;
        ++v15;
        --v2;
      }
      while (v2);
    }
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
  }
  uint64_t v24 = (objc_class *)type metadata accessor for SGNode();
  long long v25 = (char *)objc_allocWithZone(v24);
  swift_unknownObjectWeakInit();
  unint64_t v26 = &v25[OBJC_IVAR___SGNode_name];
  *(void *)unint64_t v26 = 0x746C75736552;
  *((void *)v26 + 1) = 0xE600000000000000;
  uint64_t v27 = v25;
  uint64_t v28 = swift_bridgeObjectRetain();
  uint64_t v29 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV9InputSpecVG_AF7SGInputCs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA7k24CGAA8NodeDataO_SStFAgA17fgh2V9iJ6VXEfU_SSTf1cn_nTf4ng_n(v28, 0x746C75736552, 0xE600000000000000);
  swift_bridgeObjectRelease();
  *(void *)&v27[OBJC_IVAR___SGNode_inputs] = v29;
  *(void *)&v27[OBJC_IVAR___SGNode_outputs] = v3;
  unint64_t v30 = &v27[OBJC_IVAR___SGNode_data];
  *(_OWORD *)unint64_t v30 = xmmword_25C41D6F0;
  *((void *)v30 + 2) = v5;
  *((void *)v30 + 3) = v3;
  *((_OWORD *)v30 + 2) = xmmword_25C41A100;
  *((_OWORD *)v30 + 3) = 0u;
  *((_OWORD *)v30 + 4) = 0u;
  v30[80] = 0;
  swift_bridgeObjectRetain();

  v44.receiver = v27;
  v44.super_class = v24;
  long long v31 = (char *)objc_msgSendSuper2(&v44, sel_init);
  unint64_t v32 = *(void *)&v31[OBJC_IVAR___SGNode_inputs];
  if (v32 >> 62)
  {
    swift_bridgeObjectRetain_n();
    unint64_t v37 = v31;
    unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v33 = (uint64_t)result;
    if (!result) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    unint64_t result = v31;
    if (!v33) {
      goto LABEL_27;
    }
  }
  if (v33 < 1)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v34 = 0;
  do
  {
    if ((v32 & 0xC000000000000001) != 0) {
      id v35 = (id)MEMORY[0x2611848A0](v34, v32);
    }
    else {
      id v35 = *(id *)(v32 + 8 * v34 + 32);
    }
    id v36 = v35;
    ++v34;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
  }
  while (v33 != v34);
LABEL_27:
  swift_bridgeObjectRelease_n();
  unint64_t v38 = *(void *)&v31[OBJC_IVAR___SGNode_outputs];
  if (!(v38 >> 62))
  {
    uint64_t v39 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = (char *)swift_bridgeObjectRetain_n();
    if (v39) {
      goto LABEL_29;
    }
LABEL_36:

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return v31;
  }
  swift_bridgeObjectRetain_n();
  unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v39 = (uint64_t)result;
  if (!result) {
    goto LABEL_36;
  }
LABEL_29:
  if (v39 >= 1)
  {
    uint64_t v40 = 0;
    do
    {
      if ((v38 & 0xC000000000000001) != 0) {
        id v41 = (id)MEMORY[0x2611848A0](v40, v38);
      }
      else {
        id v41 = *(id *)(v38 + 8 * v40 + 32);
      }
      uint64_t v42 = v41;
      ++v40;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();
    }
    while (v39 != v40);
    goto LABEL_36;
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t specialized SGGraph.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGGraph.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGGraph.CodingKeys and conformance SGGraph.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SGInput] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SGInput] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SGInput] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGInput]);
    lazy protocol witness table accessor for type SGInput and conformance SGInput(&lazy protocol witness table cache variable for type SGInput and conformance SGInput, 255, (void (*)(uint64_t))type metadata accessor for SGInput);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SGInput] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [SGInput] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SGInput] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGInput]);
    lazy protocol witness table accessor for type SGInput and conformance SGInput(&lazy protocol witness table cache variable for type SGInput and conformance SGInput, 255, (void (*)(uint64_t))type metadata accessor for SGInput);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SGInput] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SGOutput] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SGOutput] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SGOutput] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGOutput]);
    lazy protocol witness table accessor for type SGInput and conformance SGInput(&lazy protocol witness table cache variable for type SGOutput and conformance SGOutput, 255, (void (*)(uint64_t))type metadata accessor for SGOutput);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SGOutput] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [SGOutput] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SGOutput] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGOutput]);
    lazy protocol witness table accessor for type SGInput and conformance SGInput(&lazy protocol witness table cache variable for type SGOutput and conformance SGOutput, 255, (void (*)(uint64_t))type metadata accessor for SGOutput);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SGOutput] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SGNode] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SGNode] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SGNode] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGNode]);
    lazy protocol witness table accessor for type SGInput and conformance SGInput(&lazy protocol witness table cache variable for type SGNode and conformance SGNode, 255, (void (*)(uint64_t))type metadata accessor for SGNode);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SGNode] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [SGNode] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SGNode] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGNode]);
    lazy protocol witness table accessor for type SGInput and conformance SGInput(&lazy protocol witness table cache variable for type SGNode and conformance SGNode, 255, (void (*)(uint64_t))type metadata accessor for SGNode);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SGNode] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SGEdge] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SGEdge] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SGEdge] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGEdge]);
    lazy protocol witness table accessor for type SGInput and conformance SGInput(&lazy protocol witness table cache variable for type SGEdge and conformance SGEdge, 255, (void (*)(uint64_t))type metadata accessor for SGEdge);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SGEdge] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [SGEdge] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SGEdge] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SGEdge]);
    lazy protocol witness table accessor for type SGInput and conformance SGInput(&lazy protocol witness table cache variable for type SGEdge and conformance SGEdge, 255, (void (*)(uint64_t))type metadata accessor for SGEdge);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SGEdge] and conformance <A> [A]);
  }
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t result, char a2, void *a3, void (*a4)(void), void (*a5)(void))
{
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    uint64_t v9 = (void *)swift_bridgeObjectRetain();
    uint64_t v10 = v9[4];
    uint64_t v11 = v9[5];
    id v52 = v9;
    unint64_t v12 = (void *)v9[6];
    unint64_t v13 = (void *)*a3;
    swift_bridgeObjectRetain();
    id v51 = v12;
    uint64_t v14 = v10;
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
    uint64_t v17 = v13[2];
    BOOL v18 = (v15 & 1) == 0;
    if (__OFADD__(v17, v18))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    char v19 = v15;
    if (v13[3] < v17 + v18)
    {
      a5();
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v11);
      if ((v19 & 1) != (v21 & 1))
      {
LABEL_27:
        unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v16 = v20;
      unint64_t v22 = (void *)*a3;
      if ((v19 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_9:
      id v23 = *(id *)(v22[7] + 8 * v16);
      swift_bridgeObjectRelease();

      uint64_t v24 = v22[7];
      *(void *)(v24 + 8 * v16) = v23;
      uint64_t v25 = v5 - 1;
      if (v5 == 1) {
        return swift_bridgeObjectRelease();
      }
LABEL_16:
      for (unint64_t i = (void **)(v52 + 9); ; i += 3)
      {
        uint64_t v35 = (uint64_t)*(i - 2);
        uint64_t v34 = (uint64_t)*(i - 1);
        id v36 = *i;
        unint64_t v37 = (void *)*a3;
        swift_bridgeObjectRetain();
        id v38 = v36;
        unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v34);
        uint64_t v41 = v37[2];
        BOOL v42 = (v40 & 1) == 0;
        BOOL v28 = __OFADD__(v41, v42);
        uint64_t v43 = v41 + v42;
        if (v28) {
          break;
        }
        char v44 = v40;
        if (v37[3] < v43)
        {
          ((void (*)(uint64_t, uint64_t))a5)(v43, 1);
          unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v34);
          if ((v44 & 1) != (v45 & 1)) {
            goto LABEL_27;
          }
        }
        id v46 = (void *)*a3;
        if (v44)
        {
          uint64_t v31 = 8 * v39;
          id v32 = *(id *)(v46[7] + 8 * v39);
          swift_bridgeObjectRelease();

          uint64_t v33 = v46[7];
          *(void *)(v33 + v31) = v32;
        }
        else
        {
          v46[(v39 >> 6) + 8] |= 1 << v39;
          uint64_t v47 = (uint64_t *)(v46[6] + 16 * v39);
          *uint64_t v47 = v35;
          v47[1] = v34;
          *(void *)(v46[7] + 8 * v39) = v38;
          uint64_t v48 = v46[2];
          BOOL v28 = __OFADD__(v48, 1);
          uint64_t v49 = v48 + 1;
          if (v28) {
            goto LABEL_26;
          }
          v46[2] = v49;
        }
        if (!--v25) {
          return swift_bridgeObjectRelease();
        }
      }
      goto LABEL_25;
    }
    if (a2)
    {
      unint64_t v22 = (void *)*a3;
      if (v15) {
        goto LABEL_9;
      }
    }
    else
    {
      a4();
      unint64_t v22 = (void *)*a3;
      if (v19) {
        goto LABEL_9;
      }
    }
LABEL_12:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    unint64_t v26 = (uint64_t *)(v22[6] + 16 * v16);
    uint64_t *v26 = v14;
    v26[1] = v11;
    *(void *)(v22[7] + 8 * v16) = v51;
    uint64_t v27 = v22[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v22[2] = v29;
    uint64_t v25 = v5 - 1;
    if (v5 == 1) {
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  return result;
}

uint64_t specialized static SGGraph.create(name:inputs:outputs:)(uint64_t a1, void *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  unint64_t v12 = &v65[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = &v65[-v13];
  uint64_t v15 = type metadata accessor for OSSignposter();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  BOOL v18 = &v65[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!a2)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    unint64_t v22 = (void *)swift_allocError();
    long long v24 = xmmword_25C4197E0;
LABEL_9:
    *(_OWORD *)uint64_t v23 = v24;
    *(unsigned char *)(v23 + 16) = 1;
    swift_willThrow();
    goto LABEL_10;
  }
  if (!a3)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    unint64_t v22 = (void *)swift_allocError();
    long long v24 = xmmword_25C41D710;
    goto LABEL_9;
  }
  if (!a4)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    unint64_t v22 = (void *)swift_allocError();
    long long v24 = xmmword_25C41D700;
    goto LABEL_9;
  }
  uint64_t v73 = v18;
  uint64_t v74 = v12;
  uint64_t v75 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = a1;
  v19._object = a2;
  v20._uint64_t countAndFlagsBits = 1701667182;
  v20._object = (void *)0xE400000000000000;
  validate(_:named:)(v19, v20);
  if (!v21)
  {
    uint64_t v69 = v15;
    if (a3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v36 = result;
    }
    else
    {
      uint64_t v36 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
    }
    uint64_t v71 = a1;
    uint64_t v72 = v8;
    uint64_t v70 = v9;
    uint64_t v68 = v16;
    if (v36)
    {
      if (v36 < 1)
      {
        __break(1u);
        goto LABEL_56;
      }
      for (uint64_t i = 0; i != v36; ++i)
      {
        if ((a3 & 0xC000000000000001) != 0) {
          unint64_t v39 = (char *)MEMORY[0x2611848A0](i, a3);
        }
        else {
          unint64_t v39 = (char *)*(id *)(a3 + 8 * i + 32);
        }
        char v40 = v39;
        uint64_t v41 = (uint64_t *)&v39[OBJC_IVAR___SGInput_type];
        swift_beginAccess();
        uint64_t v38 = *v41;
        if (*v41 == 12)
        {
          BOOL v42 = *(void *)&v40[OBJC_IVAR___SGInput_name] == 0x65636166727573
             && *(void *)&v40[OBJC_IVAR___SGInput_name + 8] == 0xE700000000000000;
          if (v42 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            uint64_t v38 = 53;
          }
          else {
            uint64_t v38 = 12;
          }
        }
        *uint64_t v41 = v38;
      }
    }
    swift_bridgeObjectRelease();
    if (a4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v43 = result;
      if (result)
      {
LABEL_35:
        if (v43 >= 1)
        {
          for (uint64_t j = 0; j != v43; ++j)
          {
            if ((a4 & 0xC000000000000001) != 0) {
              id v46 = (char *)MEMORY[0x2611848A0](j, a4);
            }
            else {
              id v46 = (char *)*(id *)(a4 + 8 * j + 32);
            }
            uint64_t v47 = v46;
            uint64_t v48 = (uint64_t *)&v46[OBJC_IVAR___SGOutput_type];
            swift_beginAccess();
            uint64_t v45 = *v48;
            if (*v48 == 12)
            {
              BOOL v49 = *(void *)&v47[OBJC_IVAR___SGOutput_name] == 0x65636166727573
                 && *(void *)&v47[OBJC_IVAR___SGOutput_name + 8] == 0xE700000000000000;
              if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                uint64_t v45 = 53;
              }
              else {
                uint64_t v45 = 12;
              }
            }
            *uint64_t v48 = v45;
          }
          goto LABEL_51;
        }
LABEL_56:
        __break(1u);
        return result;
      }
    }
    else
    {
      uint64_t v43 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v43) {
        goto LABEL_35;
      }
    }
LABEL_51:
    swift_bridgeObjectRelease();
    uint64_t v50 = v73;
    OSSignposter.init(subsystem:category:)();
    swift_bridgeObjectRetain_n();
    id v51 = v75;
    static OSSignpostID.exclusive.getter();
    id v52 = OSSignposter.logHandle.getter();
    int v53 = static os_signpost_type_t.event.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v54 = v70;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v70 + 16))(v74, v51, v72);
      uint64_t v55 = swift_slowAlloc();
      int v66 = v53;
      uint64_t v56 = v55;
      uint64_t v57 = swift_slowAlloc();
      uint64_t v67 = v57;
      *(_DWORD *)uint64_t v56 = 141558275;
      uint64_t v76 = 1752392040;
      uint64_t v77 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v56 + 12) = 2081;
      swift_bridgeObjectRetain();
      uint64_t v58 = v71;
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, (unint64_t)a2, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v59 = v74;
      os_signpost_id_t v60 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_25C27E000, v52, (os_signpost_type_t)v66, v60, "graphInit", "%{private,mask.hash}s", (uint8_t *)v56, 0x16u);
      uint64_t v61 = v67;
      swift_arrayDestroy();
      MEMORY[0x261185880](v61, -1, -1);
      MEMORY[0x261185880](v56, -1, -1);

      uint64_t v62 = *(void (**)(unsigned char *, uint64_t))(v54 + 8);
      uint64_t v63 = v72;
      v62(v75, v72);
      (*(void (**)(unsigned char *, uint64_t))(v68 + 8))(v50, v69);
      v62(v59, v63);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(unsigned char *, uint64_t))(v70 + 8))(v51, v72);
      (*(void (**)(unsigned char *, uint64_t))(v68 + 8))(v50, v69);
      uint64_t v58 = v71;
    }
    id v64 = objc_allocWithZone((Class)type metadata accessor for SGGraph());
    return SGGraph.init(name:inputs:outputs:)(v58, (unint64_t)a2, a3, a4);
  }
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)logger);
  os_log_type_t v26 = static os_log_type_t.error.getter();
  id v27 = v22;
  id v28 = v22;
  uint64_t v29 = Logger.logObject.getter();
  if (os_log_type_enabled(v29, v26))
  {
    unint64_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    v79[0] = v31;
    *(_DWORD *)unint64_t v30 = 136315138;
    uint64_t v78 = (uint64_t)v22;
    id v32 = v22;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v33 = String.init<A>(describing:)();
    uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_25C27E000, v29, v26, "%s", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261185880](v31, -1, -1);
    MEMORY[0x261185880](v30, -1, -1);
  }
  else
  {
  }
  return 0;
}

void *specialized static SGGraph.create(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v29 - v10;
  uint64_t v12 = type metadata accessor for OSSignposter();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 60 == 15)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v17 = (void *)swift_allocError();
    *(_OWORD *)uint64_t v18 = xmmword_25C41A180;
    *(unsigned char *)(v18 + 16) = 1;
    swift_willThrow();
    type metadata accessor for SGError();
    id v27 = v17;
    SGError.__allocating_init(_:)(v17);
    swift_willThrow();
  }
  else
  {
    uint64_t v32 = v14;
    uint64_t v33 = v2;
    uint64_t v37 = a1;
    outlined copy of Data._Representation(a1, a2);
    OSSignposter.init(subsystem:category:)();
    static OSSignpostID.exclusive.getter();
    Swift::String v19 = OSSignposter.logHandle.getter();
    int v31 = static os_signpost_type_t.event.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
      Swift::String v20 = (uint8_t *)swift_slowAlloc();
      unint64_t v30 = a2;
      char v21 = v20;
      *(_WORD *)Swift::String v20 = 0;
      os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_25C27E000, v19, (os_signpost_type_t)v31, v22, "archiveDecode", "", v21, 2u);
      MEMORY[0x261185880](v21, -1, -1);

      uint64_t v23 = *(void (**)(char *, uint64_t))(v6 + 8);
      v23(v11, v5);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v32);
      v23(v9, v5);
      a2 = v30;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v32);
    }
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    lazy protocol witness table accessor for type MaterialCodingContainer and conformance MaterialCodingContainer();
    uint64_t v24 = v37;
    uint64_t v25 = v33;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    if (v25)
    {

      swift_release();
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      type metadata accessor for SGGraph();
      lazy protocol witness table accessor for type SGInput and conformance SGInput(&lazy protocol witness table cache variable for type SGGraph and conformance SGGraph, v26, (void (*)(uint64_t))type metadata accessor for SGGraph);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      outlined consume of Data?(v24, a2);
      swift_release();
      return (void *)v34;
    }
    else
    {
      outlined consume of Data?(v24, a2);
      swift_release();
      uint64_t v17 = v35;
    }
  }
  return v17;
}

uint64_t type metadata accessor for SGGraph()
{
  return self;
}

uint64_t method lookup function for SGGraph(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SGGraph);
}

uint64_t dispatch thunk of SGGraph.__allocating_init(name:inputs:outputs:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of SGGraph.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t getEnumTagSinglePayload for SGGraph.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SGGraph.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C3B213CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SGGraph.CodingKeys()
{
  return &type metadata for SGGraph.CodingKeys;
}

void destroy for TopologicalSort(uint64_t a1)
{
  swift_bridgeObjectRelease();

  int v2 = *(void **)(a1 + 24);
}

void *initializeWithCopy for TopologicalSort(void *a1, void *a2)
{
  int v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  unsigned int v4 = (void *)a2[2];
  uint64_t v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain();
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  return a1;
}

void *assignWithCopy for TopologicalSort(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v4 = (void *)a2[1];
  uint64_t v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  id v7 = (void *)a2[2];
  id v8 = (void *)a1[2];
  a1[2] = v7;
  id v9 = v7;

  uint64_t v10 = (void *)a1[3];
  uint64_t v11 = (void *)a2[3];
  a1[3] = v11;
  id v12 = v11;

  return a1;
}

uint64_t assignWithTake for TopologicalSort(uint64_t a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  unsigned int v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  uint64_t v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  return a1;
}

uint64_t getEnumTagSinglePayload for TopologicalSort(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TopologicalSort(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TopologicalSort()
{
  return &type metadata for TopologicalSort;
}

void *initializeBufferWithCopyOfBuffer for TopologicalSort.Element(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  a1[2] = v5;
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  return a1;
}

void destroy for TopologicalSort.Element(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
}

uint64_t assignWithCopy for TopologicalSort.Element(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  uint64_t v10 = *(void **)(a1 + 16);
  uint64_t v11 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v11;
  id v12 = v11;

  return a1;
}

uint64_t assignWithTake for TopologicalSort.Element(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for TopologicalSort.Element()
{
  return &type metadata for TopologicalSort.Element;
}

uint64_t lazy protocol witness table accessor for type SGInput and conformance SGInput(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in SGGraph.connectedUpstreamSubgraph(rootedAt:)(char *a1, uint64_t a2)
{
  return closure #1 in SGGraph.connectedUpstreamSubgraph(rootedAt:)(a1, a2, *(uint64_t **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_25C3B253C()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for implicit closure #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)()
{
  return implicit closure #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(*(uint64_t (**)(id))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> (@owned IndexingIterator<[SGNode]>))?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_25C3B2590()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> (@owned IndexingIterator<[SGNode]>)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t destroy for Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void *initializeWithCopy for Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_OWORD *assignWithTake for Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  swift_release();
  a1[1] = a2[1];
  swift_release();
  swift_release();
  a1[2] = a2[2];
  swift_release();
  swift_release();
  a1[3] = a2[3];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)()
{
  return &type metadata for Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:);
}

uint64_t OrderedDictionary.values.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedDictionary.index(forKey:)()
{
  return OrderedSet._find(_:)();
}

uint64_t OrderedDictionary.count.getter()
{
  return ContiguousArray.count.getter();
}

uint64_t OrderedDictionary.isEmpty.getter()
{
  return Collection.isEmpty.getter() & 1;
}

uint64_t OrderedDictionary.subscript.getter@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  OrderedSet._find(_:)();
  if (v4)
  {
    uint64_t v5 = 1;
  }
  else
  {
    ContiguousArray.subscript.getter();
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
  return v6(a2, v5, 1, a1);
}

uint64_t OrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v51 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v49 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  char v44 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v47 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v6);
  uint64_t v43 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  id v46 = (char *)&v42 - v12;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Int?);
  uint64_t v13 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v17 = (char *)&v42 - v16;
  uint64_t v45 = v3;
  swift_retain();
  swift_retain();
  uint64_t v48 = (char *)a2;
  uint64_t v50 = v5;
  uint64_t v18 = OrderedSet._find(_:)();
  LOBYTE(v5) = v19;
  uint64_t v21 = v20;
  swift_release();
  swift_release();
  os_signpost_id_t v22 = &v17[*(int *)(v15 + 56)];
  *(void *)uint64_t v17 = v18;
  v17[8] = v5 & 1;
  uint64_t v23 = v47;
  uint64_t v24 = *(void *)(v13 - 8);
  uint64_t v25 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v22, v51, v13);
  int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, v9);
  if (v5)
  {
    if (v26 == 1)
    {
      (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v50);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v51, v13);
    }
    uint64_t v35 = v21;
    id v36 = v46;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v46, v22, v9);
    uint64_t v37 = v50;
    type metadata accessor for OrderedSet();
    uint64_t v38 = (uint64_t)v48;
    OrderedSet._appendNew(_:in:)((uint64_t)v48, v35);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v43, v36, v9);
    type metadata accessor for ContiguousArray();
    ContiguousArray.append(_:)();
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v38, v37);
  }
  else
  {
    if (v26 == 1)
    {
      uint64_t v28 = v50;
      uint64_t v29 = type metadata accessor for OrderedSet();
      uint64_t v30 = v21;
      int v31 = v44;
      OrderedSet._removeExistingMember(at:in:)(v18, v30, v29);
      uint64_t v32 = v23;
      uint64_t v33 = *(void (**)(char *, uint64_t))(v49 + 8);
      v33(v31, v28);
      type metadata accessor for ContiguousArray();
      uint64_t v34 = v46;
      ContiguousArray.remove(at:)();
      v33(v48, v28);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v51, v13);
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v34, v9);
    }
    id v36 = v46;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v46, v22, v9);
    uint64_t v39 = v45;
    uint64_t v40 = type metadata accessor for ContiguousArray();
    ContiguousArray._makeMutableAndUnique()();
    uint64_t v41 = *(void *)(v39 + 16);
    ContiguousArray._checkSubscript_mutating(_:)(v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v23 + 24))(v41+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(void *)(v23 + 72) * v18, v36, v9);
    destructiveProjectEnumData for NodePersonality.ShaderType(v40);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v50);
  }
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v51, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v36, v9);
}

uint64_t OrderedDictionary.keys.getter(uint64_t a1)
{
  return a1;
}

void (*OrderedDictionary.subscript.modify(void *a1, uint64_t a2, void *a3))(uint64_t *a1)
{
  uint64_t v7 = malloc(0x70uLL);
  *a1 = v7;
  void v7[2] = a2;
  _OWORD v7[3] = v3;
  uint64_t v8 = a3[3];
  v7[4] = v8;
  uint64_t v9 = type metadata accessor for Optional();
  v7[5] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v23 = v10;
  uint64_t v24 = v9;
  v7[6] = v10;
  size_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = malloc(v11);
  v7[7] = v12;
  uint64_t v13 = malloc(v11);
  uint64_t v14 = a3[2];
  v7[8] = v13;
  v7[9] = v14;
  v7[10] = a3[4];
  uint64_t v15 = OrderedSet._find(_:)();
  char v17 = v16;
  uint64_t v19 = v18;
  v7[11] = v15;
  *((unsigned char *)v7 + 104) = v16;
  uint64_t v20 = (void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  os_signpost_id_t v22 = *v20;
  (*v20)(v13, 1, 1, v8);
  if (v17) {
    goto LABEL_4;
  }
  *uint64_t v7 = v15;
  __n128 result = (void (*)(uint64_t *))ContiguousArray.count.getter();
  if (!__OFSUB__(result, 1))
  {
    v7[1] = (char *)result - 1;
    type metadata accessor for ContiguousArray();
    swift_getWitnessTable();
    MutableCollection.swapAt(_:_:)();
    swift_getWitnessTable();
    swift_getWitnessTable();
    RangeReplaceableCollection<>.removeLast()();
    v22(v12, 0, 1, v8);
    (*(void (**)(void *, void *, uint64_t))(v23 + 40))(v13, v12, v24);
LABEL_4:
    v7[12] = v19;
    return OrderedDictionary.subscript.modify;
  }
  __break(1u);
  return result;
}

void OrderedDictionary.subscript.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = *(void **)(*a1 + 56);
  uint64_t v2 = *(void **)(*a1 + 64);
  uint64_t v4 = *(void *)(*a1 + 40);
  uint64_t v5 = *(void *)(*a1 + 48);
  $defer #1 <A, B>() in OrderedDictionary.subscript.modify(*(void *)(*a1 + 88), *(unsigned char *)(v1 + 104) & 1, *(void *)(v1 + 64), *(void *)(v1 + 24), *(void *)(v1 + 96), *(void *)(v1 + 16), *(void *)(v1 + 72), *(void *)(v1 + 32), *(void *)(v1 + 80));
  (*(void (**)(void *, uint64_t))(v5 + 8))(v2, v4);
  free(v2);
  free(v3);
  free((void *)v1);
}

uint64_t OrderedDictionary.updateValue<A>(forKey:default:with:)(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(unint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v22 = *(void *)(*(void *)(a6 + 24) - 8);
  MEMORY[0x270FA5388](a1);
  swift_retain();
  swift_retain();
  Swift::Int v9 = OrderedSet._find(_:)();
  char v11 = v10;
  uint64_t v13 = v12;
  swift_release();
  swift_release();
  if (v11)
  {
    type metadata accessor for OrderedSet();
    OrderedSet._appendNew(_:in:)(a1, v13);
    a2();
    uint64_t v17 = type metadata accessor for ContiguousArray();
    ContiguousArray.append(_:)();
    Swift::Int v18 = *(void *)(*(void *)(v7 + 16) + 16) - 1;
    ContiguousArray._makeMutableAndUnique()();
    uint64_t v19 = *(void *)(v7 + 16);
    ContiguousArray._checkSubscript_mutating(_:)(v18);
    a4(v19+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v18);
    uint64_t v16 = v17;
  }
  else
  {
    uint64_t v14 = type metadata accessor for ContiguousArray();
    ContiguousArray._makeMutableAndUnique()();
    uint64_t v15 = *(void *)(v7 + 16);
    ContiguousArray._checkSubscript_mutating(_:)(v9);
    a4(v15+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v9);
    uint64_t v16 = v14;
  }
  return destructiveProjectEnumData for NodePersonality.ShaderType(v16);
}

void (*OrderedDictionary.subscript.modify(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4, void *a5))(uint64_t **a1)
{
  uint64_t v6 = v5;
  char v10 = malloc(0x40uLL);
  *a1 = v10;
  uint64_t v11 = a5[3];
  void *v10 = v6;
  v10[1] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v12;
  void v10[2] = v12;
  size_t v14 = *(void *)(v12 + 64);
  v10[3] = malloc(v14);
  uint64_t v15 = malloc(v14);
  uint64_t v16 = a5[2];
  v10[4] = v15;
  v10[5] = v16;
  v10[6] = a5[4];
  type metadata accessor for OrderedSet();
  char v17 = OrderedSet._append(_:)(a2);
  uint64_t v19 = v18;
  if (v17)
  {
    a3();
    type metadata accessor for ContiguousArray();
    ContiguousArray.append(_:)();
  }
  v10[7] = v19;
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v20 = *(void *)(v6 + 16);
  uint64_t v21 = *(void *)(v20 + 16);
  v24[0] = v20 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v24[1] = v21;
  closure #1 in OrderedDictionary.subscript.modify();
  $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v24, v24[0], v21);
  return OrderedDictionary.subscript.modify;
}

void OrderedDictionary.subscript.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)(*a1)[4];
  uint64_t v4 = (*a1)[2];
  uint64_t v3 = (void *)(*a1)[3];
  uint64_t v5 = (*a1)[1];
  $defer #1 <A, B>() in OrderedDictionary.subscript.modify(**a1, (*a1)[7], (uint64_t)v3, (*a1)[5], v5);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  free(v2);
  free(v3);
  free(v1);
}

uint64_t OrderedDictionary._keys.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedDictionary._keys.setter(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OrderedDictionary._keys.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedDictionary._values.getter()
{
  return swift_retain();
}

uint64_t OrderedDictionary._values.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*OrderedDictionary._values.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t key path setter for OrderedDictionary.values : <A, B>OrderedDictionary<A, B>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 24);
  uint64_t v6 = *(void *)(a4 + a3 - 16);
  uint64_t v7 = *(void *)(a4 + a3 - 8);
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getTupleTypeMetadata2();
  uint64_t v11 = static Array._allocateUninitialized(_:)();
  uint64_t v12 = specialized OrderedDictionary.init(dictionaryLiteral:)(v11, v5, v6, v7);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  *a2 = v12;
  a2[1] = v14;
  a2[2] = v16;
  v18[0] = v8;
  v18[1] = v9;
  v18[2] = v10;
  $defer #1 <A, B>() in OrderedDictionary.elements.modify(a2, v18);
  swift_release();
  swift_release();
  return swift_release();
}

void (*OrderedDictionary.values.modify(void *a1, void *a2))(void **a1)
{
  uint64_t v5 = (char *)malloc(0x38uLL);
  *a1 = v5;
  *(void *)uint64_t v5 = *(void *)v2;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(v2 + 8);
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  *((void *)v5 + 3) = v2;
  *((void *)v5 + 4) = v6;
  *((void *)v5 + 5) = v7;
  swift_getTupleTypeMetadata2();
  uint64_t v8 = static Array._allocateUninitialized(_:)();
  uint64_t v9 = a2[4];
  *((void *)v5 + 6) = v9;
  uint64_t v10 = specialized OrderedDictionary.init(dictionaryLiteral:)(v8, v6, v7, v9);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  *(void *)uint64_t v2 = v10;
  *(void *)(v2 + 8) = v12;
  *(void *)(v2 + 16) = v14;
  return OrderedDictionary.values.modify;
}

void OrderedDictionary.values.modify(void **a1)
{
  uint64_t v1 = *a1;
  $defer #1 <A, B>() in OrderedDictionary.elements.modify((void *)(*a1)[3], *a1);
  swift_release();
  swift_release();
  swift_release();
  free(v1);
}

uint64_t OrderedDictionary.values.setter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = a4[2];
  uint64_t v10 = a4[3];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_getTupleTypeMetadata2();
  uint64_t v11 = static Array._allocateUninitialized(_:)();
  uint64_t v12 = specialized OrderedDictionary.init(dictionaryLiteral:)(v11, v9, v10, a4[4]);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v5 = v12;
  v5[1] = v14;
  v5[2] = v16;
  v19[0] = a1;
  v19[1] = a2;
  void v19[2] = a3;
  $defer #1 <A, B>() in OrderedDictionary.elements.modify(v5, v19);
  swift_release_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t $defer #1 <A, B>() in OrderedDictionary.subscript.modify(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v37 = a6;
  uint64_t v44 = a4;
  uint64_t v40 = a9;
  uint64_t v41 = a5;
  uint64_t v42 = a7;
  uint64_t v39 = *(void *)(a7 - 8);
  char v13 = a2 & 1;
  uint64_t v14 = MEMORY[0x270FA5388](a1);
  uint64_t v38 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v14);
  uint64_t v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v43 = (char *)&v37 - v21;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Int?);
  uint64_t v22 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v24 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  int v26 = (char *)&v37 - v25;
  id v27 = &v26[*(int *)(v24 + 56)];
  *(void *)int v26 = a1;
  v26[8] = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v27, a3, v22);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v27, 1, a8);
  if (a2)
  {
    if (result != 1)
    {
      uint64_t v29 = v43;
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v43, v27, a8);
      type metadata accessor for OrderedSet();
      OrderedSet._appendNew(_:in:)(v37, v41);
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v29, a8);
      type metadata accessor for ContiguousArray();
      ContiguousArray.append(_:)();
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v29, a8);
    }
  }
  else if (result == 1)
  {
    swift_retain();
    uint64_t v30 = ContiguousArray.count.getter();
    swift_release();
    if (v30 > a1)
    {
      type metadata accessor for ContiguousArray();
      int v31 = v43;
      ContiguousArray.remove(at:)();
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v31, a8);
      ContiguousArray.append(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v31, a8);
    }
    uint64_t v32 = v42;
    uint64_t v33 = type metadata accessor for OrderedSet();
    uint64_t v34 = v38;
    OrderedSet._removeExistingMember(at:in:)(a1, v41, v33);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v34, v32);
  }
  else
  {
    uint64_t v35 = v43;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v43, v27, a8);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v35, a8);
    type metadata accessor for ContiguousArray();
    ContiguousArray.append(_:)();
    uint64_t v46 = a1;
    swift_retain();
    uint64_t v36 = ContiguousArray.count.getter();
    uint64_t result = swift_release();
    if (__OFSUB__(v36, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v45 = v36 - 1;
      swift_getWitnessTable();
      MutableCollection.swapAt(_:_:)();
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v35, a8);
    }
  }
  return result;
}

uint64_t key path setter for OrderedDictionary.subscript(_:) : <A, B>OrderedDictionary<A, B>AB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + a3 - 24);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v17 - v10;
  MEMORY[0x270FA5388](v9);
  char v13 = (char *)&v17 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v17 - v12, a3, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  uint64_t v15 = type metadata accessor for OrderedDictionary();
  return OrderedDictionary.subscript.setter((uint64_t)v11, (uint64_t)v13, v15);
}

uint64_t OrderedDictionary.subscript.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OrderedSet._find(_:)();
  if (v4) {
    return a2(v3);
  }
  return ContiguousArray.subscript.getter();
}

uint64_t closure #1 in OrderedDictionary.subscript.modify()
{
  uint64_t result = UnsafeBufferPointer.baseAddress.getter();
  if (result) {
    return UnsafeMutablePointer.move()();
  }
  __break(1u);
  return result;
}

void *$defer #1 <A, B>() in OrderedDictionary.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(v10 + 16);
  v14[0] = v10
         + ((*(unsigned __int8 *)(*(void *)(a5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a5 - 8) + 80));
  uint64_t v12 = v14[0];
  v14[1] = v11;
  closure #1 in $defer #1 <A, B>() in OrderedDictionary.subscript.modify((uint64_t)v14, a2, a3, a4, a5);
  return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v14, v12, v11);
}

uint64_t OrderedDictionary.subscript.setter(char *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v30 = a4;
  int v31 = a3;
  uint64_t v36 = a1;
  uint64_t v7 = *(void *)(a5 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = *(void *)(v13 + 16);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = v17;
  uint64_t v18 = *(void (**)(char *))(v17 + 16);
  uint64_t v35 = v19;
  v18(v16);
  type metadata accessor for OrderedSet();
  uint64_t v34 = v16;
  uint64_t v20 = OrderedSet._append(_:)((uint64_t)v16);
  uint64_t v33 = v21;
  if (v20)
  {
    v31(v20, v21);
    type metadata accessor for ContiguousArray();
    ContiguousArray.append(_:)();
  }
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v22 = *((void *)v6 + 2);
  int v31 = v6;
  uint64_t v23 = *(void *)(v22 + 16);
  v37[0] = v22 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v24 = v37[0];
  v37[1] = v23;
  uint64_t v25 = v33;
  closure #1 in OrderedDictionary.subscript.modify();
  $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v37, v24, v23);
  int v26 = v36;
  (*(void (**)(char *, char *, uint64_t))(v8 + 24))(v11, v36, v7);
  $defer #1 <A, B>() in OrderedDictionary.subscript.modify((uint64_t)v31, v25, (uint64_t)v11, v14, v7);
  id v27 = *(void (**)(char *, uint64_t))(v8 + 8);
  v27(v11, v7);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
  v28(v35, v14);
  v27(v26, v7);
  return ((uint64_t (*)(char *, uint64_t))v28)(v34, v14);
}

uint64_t OrderedDictionary.updateValue(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v20 = a4;
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v21 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_retain();
  uint64_t v18 = a2;
  Swift::Int v9 = OrderedSet._find(_:)();
  LOBYTE(a2) = v10;
  uint64_t v12 = v11;
  swift_release();
  swift_release();
  if (a2)
  {
    type metadata accessor for OrderedSet();
    OrderedSet._appendNew(_:in:)(v18, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v8, v19, v6);
    type metadata accessor for ContiguousArray();
    ContiguousArray.append(_:)();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v20, 1, 1, v6);
  }
  else
  {
    uint64_t v13 = v20;
    ContiguousArray.subscript.getter();
    uint64_t v14 = type metadata accessor for ContiguousArray();
    ContiguousArray._makeMutableAndUnique()();
    uint64_t v15 = *(void *)(v4 + 16);
    ContiguousArray._checkSubscript_mutating(_:)(v9);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v21 + 24))(v15+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * v9, v19, v6);
    destructiveProjectEnumData for NodePersonality.ShaderType(v14);
    uint64_t v16 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56);
    return v16(v13, 0, 1, v6);
  }
}

Swift::Int OrderedDictionary.updateValue(_:forKey:insertingAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a5 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OrderedSet();
  char v15 = OrderedSet.insert(_:at:)(a3, a4, v14);
  Swift::Int v17 = v16;
  if (v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
    type metadata accessor for ContiguousArray();
    ContiguousArray.insert(_:at:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, 1, 1, v10);
  }
  else
  {
    ContiguousArray.subscript.getter();
    uint64_t v18 = type metadata accessor for ContiguousArray();
    ContiguousArray._makeMutableAndUnique()();
    uint64_t v19 = *(void *)(v5 + 16);
    ContiguousArray._checkSubscript_mutating(_:)(v17);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 24))(v19+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v17, a2, v10);
    destructiveProjectEnumData for NodePersonality.ShaderType(v18);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
  }
  return v17;
}

uint64_t OrderedDictionary.updateValue<A>(forKey:insertingDefault:at:with:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, void (*a5)(unint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v24 = *(void *)(*(void *)(a7 + 24) - 8);
  MEMORY[0x270FA5388](a1);
  swift_retain();
  swift_retain();
  Swift::Int v10 = OrderedSet._find(_:)();
  char v12 = v11;
  uint64_t v14 = v13;
  swift_release();
  swift_release();
  if (v12)
  {
    uint64_t v18 = type metadata accessor for OrderedSet();
    OrderedSet._insertNew(_:at:in:)(a1, a4, v14, v18);
    a2();
    uint64_t v19 = type metadata accessor for ContiguousArray();
    ContiguousArray.insert(_:at:)();
    ContiguousArray._makeMutableAndUnique()();
    uint64_t v20 = *(void *)(v8 + 16);
    ContiguousArray._checkSubscript_mutating(_:)(a4);
    a5(v20+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * a4);
    uint64_t v17 = v19;
  }
  else
  {
    uint64_t v15 = type metadata accessor for ContiguousArray();
    ContiguousArray._makeMutableAndUnique()();
    uint64_t v16 = *(void *)(v8 + 16);
    ContiguousArray._checkSubscript_mutating(_:)(v10);
    a5(v16+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v10);
    uint64_t v17 = v15;
  }
  return destructiveProjectEnumData for NodePersonality.ShaderType(v17);
}

uint64_t OrderedDictionary.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = OrderedSet._find(_:)();
  if (v11)
  {
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 56);
    return v17(a3, 1, 1);
  }
  else
  {
    uint64_t v12 = v9;
    uint64_t v13 = v10;
    uint64_t v14 = type metadata accessor for OrderedSet();
    OrderedSet._removeExistingMember(at:in:)(v12, v13, v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v15 = *(void *)(a2 + 24);
    type metadata accessor for ContiguousArray();
    ContiguousArray.remove(at:)();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a3, 0, 1, v15);
  }
}

uint64_t OrderedDictionary.merge<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return OrderedDictionary.merge<A>(_:uniquingKeysWith:)(a1, a2, a3, a4, a5, a6, (void (*)(void))specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:));
}

{
  return OrderedDictionary.merge<A>(_:uniquingKeysWith:)(a1, a2, a3, a4, a5, a6, (void (*)(void))specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:));
}

uint64_t closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a6 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v14(v10, v13);
  if (!v6)
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a6);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v12, a6);
  }
  return result;
}

uint64_t OrderedDictionary.merge<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
}

uint64_t closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = TupleTypeMetadata2 - 8;
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  int v31 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v30 = a4 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v14 = *(int *)(v9 + 56);
  uint64_t v15 = &v13[v14];
  uint64_t v29 = &v13[v14];
  uint64_t v16 = a1 + v14;
  uint64_t v25 = a1 + v14;
  uint64_t v17 = *(void *)(a2 - 8);
  int v26 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v27 = a1;
  v26(v13, a1, a2);
  uint64_t v18 = *(void *)(a3 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v18 + 16);
  v19(v15, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v28, v13, a2);
  uint64_t v20 = *(int *)(v9 + 56);
  uint64_t v21 = v31;
  uint64_t v22 = &v31[v20];
  v26(v31, v27, a2);
  ((void (*)(char *, uint64_t, uint64_t))v19)(v22, v25, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v30, v22, a3);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v21, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v29, a3);
}

uint64_t OrderedDictionary.merging<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return OrderedDictionary.merging<A>(_:uniquingKeysWith:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:));
}

{
  return OrderedDictionary.merging<A>(_:uniquingKeysWith:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:));
}

uint64_t OrderedDictionary.merging<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14 = type metadata accessor for OrderedDictionary();
  swift_retain();
  swift_retain();
  swift_retain();
  a12(a1, a2, a3, v14, a9, a11);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a9 - 8) + 8))(a1, a9);
  uint64_t result = a4;
  if (v18)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t OrderedDictionary.filter(_:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, void (**a4)(void, void, void), void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v72 = a4;
  uint64_t v73 = a5;
  uint64_t v67 = a1;
  uint64_t v68 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v71 = *(void **)(TupleTypeMetadata2 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v56 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v69 = (char *)&v55 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v55 = (char *)&v55 - v17;
  uint64_t v18 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v55 - v19;
  swift_getTupleTypeMetadata2();
  uint64_t v21 = static Array._allocateUninitialized(_:)();
  uint64_t v22 = specialized OrderedDictionary.init(dictionaryLiteral:)(v21, a6, a7, a8);
  uint64_t v24 = v23;
  uint64_t v70 = v25;
  uint64_t v26 = a6;
  swift_bridgeObjectRelease();
  uint64_t v80 = v22;
  uint64_t v81 = v24;
  uint64_t v27 = TupleTypeMetadata2;
  uint64_t v82 = v70;
  uint64_t v76 = a3;
  uint64_t v77 = v72;
  uint64_t v78 = v73;
  uint64_t v79 = 0;
  uint64_t v57 = a8;
  uint64_t v28 = type metadata accessor for OrderedDictionary.Iterator();
  swift_retain();
  swift_retain();
  swift_retain();
  OrderedDictionary.Iterator.next()(v28, v20);
  uint64_t v29 = v71;
  uint64_t v30 = (char *)(v71 + 6);
  int v31 = (unsigned int (*)(char *, uint64_t, uint64_t))v71[6];
  if (v31(v20, 1, v27) == 1)
  {
LABEL_2:
    swift_release();
    swift_release();
    swift_release();
    return v80;
  }
  else
  {
    uint64_t v58 = v31;
    uint64_t v33 = *(void *)(v26 - 8);
    uint64_t v34 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 32);
    uint64_t v63 = v33 + 32;
    id v64 = v34;
    uint64_t v62 = a7 - 8;
    uint64_t v72 = (void (**)(void, void, void))(v33 + 16);
    uint64_t v73 = (void *)(v33 + 8);
    uint64_t v65 = (void (**)(uint64_t, uint64_t))(v29 + 1);
    uint64_t v35 = a7;
    uint64_t v36 = (uint64_t)v55;
    uint64_t v66 = v27;
    uint64_t v61 = v20;
    uint64_t v60 = v28;
    uint64_t v59 = v30;
    uint64_t v74 = a7;
    while (1)
    {
      uint64_t v37 = *(int *)(v27 + 48);
      uint64_t v38 = (void *)(v36 + v37);
      uint64_t v39 = &v20[v37];
      v64(v36, v20, v26);
      uint64_t v40 = *(void *)(v35 - 8);
      (*(void (**)(void *, char *, uint64_t))(v40 + 32))(v38, v39, v35);
      uint64_t v41 = *(int *)(v27 + 48);
      uint64_t v42 = v26;
      uint64_t v43 = v69;
      uint64_t v44 = &v69[v41];
      uint64_t v70 = *v72;
      v70(v69, v36, v42);
      uint64_t v45 = *(void (**)(char *, void *, uint64_t))(v40 + 16);
      uint64_t v71 = v38;
      v45(v44, v38, v35);
      uint64_t v46 = v75;
      char v47 = v67(v43, v44);
      uint64_t v75 = v46;
      if (v46) {
        break;
      }
      char v48 = v47;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v44, v74);
      uint64_t v49 = (void *)*v73;
      ((void (*)(char *, uint64_t))*v73)(v43, v42);
      uint64_t v26 = v42;
      if (v48)
      {
        uint64_t v50 = type metadata accessor for OrderedSet();
        OrderedSet._appendNew(_:)(v36, v50);
        uint64_t v27 = v66;
        uint64_t v51 = v56;
        id v52 = &v56[*(int *)(v66 + 48)];
        v70(v56, v36, v42);
        int v53 = v71;
        uint64_t v71 = v49;
        uint64_t v54 = v74;
        v45(v52, v53, v74);
        type metadata accessor for ContiguousArray();
        uint64_t v26 = v42;
        ContiguousArray.append(_:)();
        (*v65)(v36, v27);
        ((void (*)(char *, uint64_t))v71)(v51, v42);
        uint64_t v35 = v54;
      }
      else
      {
        uint64_t v27 = v66;
        (*v65)(v36, v66);
        uint64_t v35 = v74;
      }
      uint64_t v20 = v61;
      OrderedDictionary.Iterator.next()(v60, v61);
      if (v58(v20, 1, v27) == 1) {
        goto LABEL_2;
      }
    }
    (*v65)(v36, v66);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v44, v74);
    return ((uint64_t (*)(char *, uint64_t))*v73)(v43, v42);
  }
}

uint64_t OrderedDictionary.mapValues<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v20 = a5;
  v18[2] = a6;
  void v18[3] = a7;
  v18[4] = a8;
  void v18[5] = a9;
  v18[6] = a1;
  v18[7] = a2;
  uint64_t v12 = type metadata accessor for ContiguousArray();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1, @error @owned Error), (uint64_t)v18, v12, a8, v13, WitnessTable, MEMORY[0x263F8E4E0], (uint64_t)&v19);
  if (v9)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v16 = v15;
    swift_release();
    uint64_t v20 = v16;
    type metadata accessor for Array();
    swift_getWitnessTable();
    Array.init<A>(_:)();
  }
  return a3;
}

uint64_t OrderedDictionary.compactMapValues<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v51 = a5;
  uint64_t v50 = a4;
  v46[1] = a3;
  uint64_t v68 = a1;
  uint64_t v60 = type metadata accessor for Optional();
  id v52 = *(void (***)(char *, uint64_t))(v60 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v60);
  uint64_t v67 = (char *)v46 - v15;
  id v64 = *(void (***)(uint64_t, uint64_t))(a8 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v59 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v58 = (char *)v46 - v19;
  uint64_t v63 = *(void (***)(char *, uint64_t))(a7 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v20);
  char v48 = (char *)v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v73 = type metadata accessor for Optional();
  uint64_t v70 = *(void (***)(char *, char *, uint64_t))(v73 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v73);
  uint64_t v72 = (char *)v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)v46 - v26;
  swift_getTupleTypeMetadata2();
  uint64_t v28 = static Array._allocateUninitialized(_:)();
  uint64_t v74 = specialized OrderedDictionary.init(dictionaryLiteral:)(v28, a6, a8, a9);
  uint64_t v71 = v29;
  uint64_t v69 = v30;
  swift_bridgeObjectRelease();
  uint64_t v80 = v74;
  uint64_t v81 = v71;
  uint64_t v82 = v69;
  uint64_t v76 = a3;
  uint64_t v77 = v50;
  uint64_t v78 = v51;
  uint64_t v79 = 0;
  uint64_t v74 = a6;
  uint64_t v31 = TupleTypeMetadata2;
  uint64_t v61 = a9;
  uint64_t v32 = (uint64_t)v48;
  uint64_t v33 = type metadata accessor for OrderedDictionary.Iterator();
  v70 += 4;
  uint64_t v71 = v33;
  uint64_t v69 = v31 - 8;
  uint64_t v66 = (void (**)(uint64_t, char *, uint64_t))(v49 + 32);
  uint64_t v65 = (void (**)(char *, char *, uint64_t))(v63 + 4);
  uint64_t v62 = (unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 6);
  uint64_t v55 = (void (**)(char *, char *, uint64_t))(v64 + 4);
  uint64_t v54 = (void (**)(char *, char *, uint64_t))(v64 + 2);
  int v53 = (void (**)(char *, uint64_t))(v64 + 1);
  ++v63;
  id v64 = (void (**)(uint64_t, uint64_t))(v49 + 8);
  ++v52;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v57 = v22;
  uint64_t v56 = a2;
  while (1)
  {
    uint64_t v34 = v72;
    OrderedDictionary.Iterator.next()(v71, v72);
    (*v70)(v27, v34, v73);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v27, 1, v31) == 1)
    {
      swift_release();
      swift_release();
      swift_release();
      return v80;
    }
    uint64_t v35 = v31;
    uint64_t v36 = &v27[*(int *)(v31 + 48)];
    (*v66)(v32, v27, v74);
    (*v65)(v22, v36, a7);
    uint64_t v37 = v67;
    uint64_t v38 = v75;
    v68(v22);
    uint64_t v75 = v38;
    if (v38) {
      break;
    }
    if ((*v62)(v37, 1, a8) == 1)
    {
      (*v63)(v22, a7);
      (*v64)(v32, v74);
      (*v52)(v37, v60);
    }
    else
    {
      uint64_t v39 = v58;
      (*v55)(v58, v37, a8);
      uint64_t v40 = a7;
      uint64_t v41 = v74;
      uint64_t v42 = type metadata accessor for OrderedSet();
      OrderedSet._appendNew(_:)(v32, v42);
      (*v54)(v59, v39, a8);
      type metadata accessor for ContiguousArray();
      ContiguousArray.append(_:)();
      uint64_t v43 = v39;
      uint64_t v22 = v57;
      (*v53)(v43, a8);
      (*v63)(v22, v40);
      uint64_t v44 = v41;
      a7 = v40;
      (*v64)(v32, v44);
    }
    uint64_t v31 = v35;
  }
  (*v63)(v22, a7);
  (*v64)(v32, v74);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in $defer #1 <A, B>() in OrderedDictionary.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = UnsafeBufferPointer.baseAddress.getter();
  if (result)
  {
    uint64_t v12 = result + *(void *)(v8 + 72) * a2;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, a5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v12, v10, a5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:)(uint64_t a1, void (*a2)(unsigned char *__return_ptr, uint64_t *), uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = a4[2];
  uint64_t v49 = a4 + 2;
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v6);
  }
  *uint64_t v49 = v6;
  uint64_t v47 = *(void *)(a1 + 16);
  if (!v47)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = 0;
  uint64_t v46 = a1 + 32;
  while (1)
  {
    uint64_t v52 = v6;
    uint64_t v16 = (uint64_t *)(v46 + (v7 << 6));
    uint64_t v18 = v16[6];
    uint64_t v17 = v16[7];
    uint64_t v20 = v16[4];
    uint64_t v19 = v16[5];
    uint64_t v21 = v16[2];
    uint64_t v22 = v16[3];
    uint64_t v23 = v16[1];
    uint64_t v61 = *v16;
    uint64_t v62 = v23;
    uint64_t v63 = v21;
    uint64_t v64 = v22;
    uint64_t v65 = v20;
    uint64_t v66 = v19;
    uint64_t v67 = v18;
    uint64_t v68 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MaterialXAvailability(v18, v17);
    a2(v56, &v61);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v18, v17);
    uint64_t v24 = *(void *)v56;
    uint64_t v25 = *(void *)&v56[16];
    uint64_t v9 = *(void *)&v56[8];
    uint64_t v51 = v57;
    uint64_t v26 = *((void *)&v58 + 1);
    uint64_t v8 = v58;
    uint64_t v55 = v59;
    uint64_t v69 = v60;
    uint64_t v27 = *a4;
    uint64_t v28 = (void *)a4[1];
    uint64_t v29 = v28[2];
    uint64_t v54 = *(void *)&v56[8];
    if (*a4)
    {
      uint64_t v53 = v58;
      swift_retain();
      swift_retain();
      unint64_t v30 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v24, v9, (uint64_t)(v28 + 4), v29, (void *)(v27 + 16), v27 + 32);
      char v32 = v31;
      uint64_t v29 = v33;
      swift_release();
      uint64_t result = swift_release();
      if ((v32 & 1) == 0)
      {
        uint64_t v6 = v52;
        goto LABEL_18;
      }
      uint64_t v45 = v25;
      uint64_t v6 = v52;
      uint64_t v8 = v53;
      uint64_t v9 = v54;
LABEL_6:
      specialized OrderedSet._appendNew(_:in:)(v24, v9, v29);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of MaterialXAvailability(v55, v69);
      a4[2] = v6;
      uint64_t v10 = v26;
      uint64_t v11 = v8;
      unint64_t v13 = *(void *)(v6 + 16);
      unint64_t v12 = *(void *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v6 = *v49;
      }
      *(void *)(v6 + 16) = v13 + 1;
      uint64_t v14 = (void *)(v6 + 48 * v13);
      void v14[4] = v45;
      void v14[5] = v51;
      v14[6] = v11;
      void v14[7] = v10;
      uint64_t v15 = v69;
      v14[8] = v55;
      v14[9] = v15;
      goto LABEL_9;
    }
    if (!v29)
    {
      uint64_t v45 = *(void *)&v56[16];
      uint64_t v6 = v52;
      goto LABEL_6;
    }
    uint64_t result = v28[4];
    if (*(_OWORD *)(a4[1] + 32) == *(_OWORD *)v56
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      uint64_t v53 = v8;
      unint64_t v30 = 0;
LABEL_17:
      uint64_t v6 = v52;
      goto LABEL_18;
    }
    if (v29 == 1) {
      goto LABEL_24;
    }
    uint64_t result = v28[6];
    if (result == v24 && v28[7] == v9 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      uint64_t v53 = v8;
      unint64_t v30 = 1;
      goto LABEL_17;
    }
    if (v29 == 2) {
      goto LABEL_24;
    }
    uint64_t result = v28[8];
    if (result == v24 && v28[9] == v9 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      uint64_t v53 = v8;
      unint64_t v30 = 2;
      goto LABEL_17;
    }
    if (v29 == 3)
    {
LABEL_24:
      uint64_t v45 = v25;
      uint64_t v29 = 0;
      uint64_t v6 = v52;
      goto LABEL_6;
    }
    uint64_t result = v28[10];
    uint64_t v53 = v8;
    if (result == v24 && v28[11] == v9 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      unint64_t v30 = 3;
      goto LABEL_17;
    }
    uint64_t v42 = v28 + 13;
    uint64_t v43 = 4;
    uint64_t v6 = v52;
    while (1)
    {
      if (v29 == v43)
      {
        uint64_t v45 = v25;
        uint64_t v29 = 0;
        uint64_t v8 = v53;
        uint64_t v9 = v54;
        goto LABEL_6;
      }
      uint64_t result = *(v42 - 1);
      if (result == v24 && *v42 == v54) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      unint64_t v30 = v43++;
      v42 += 2;
      if (result) {
        goto LABEL_18;
      }
    }
    unint64_t v30 = v43;
LABEL_18:
    if ((v30 & 0x8000000000000000) != 0) {
      break;
    }
    if (v30 >= *(void *)(v6 + 16)) {
      goto LABEL_53;
    }
    uint64_t v61 = v25;
    uint64_t v62 = v51;
    uint64_t v35 = v6 + 32 + 48 * v30;
    uint64_t v63 = v53;
    uint64_t v64 = v26;
    uint64_t v65 = v55;
    uint64_t v66 = v69;
    closure #2 in BuiltInDefinitionStore.init(nodeDefStore:)((uint64_t *)v35, (uint64_t *)v56);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of MaterialXAvailability(v55, v69);
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v49 = v6;
      return result;
    }
    swift_bridgeObjectRelease();
    uint64_t v36 = (void *)(v6 + 32 + 48 * v30);
    swift_bridgeObjectRelease();
    uint64_t v37 = v36[4];
    uint64_t v38 = v36[5];
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v37, v38);
    uint64_t v39 = v57;
    long long v40 = *(_OWORD *)&v56[8];
    long long v41 = v58;
    *(void *)uint64_t v35 = *(void *)v56;
    *(_OWORD *)(v35 + 8) = v40;
    v36[3] = v39;
    *((_OWORD *)v36 + 2) = v41;
LABEL_9:
    ++v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v55, v69);
    swift_bridgeObjectRelease();
    *uint64_t v49 = v6;
    if (v7 == v47)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v57 = a6;
  uint64_t v54 = a3;
  uint64_t v53 = a2;
  uint64_t v76 = a1;
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v56 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v52 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v49 - v13;
  uint64_t v74 = *(void *)(v15 + 16);
  uint64_t v65 = *(void (***)(uint64_t, uint64_t))(v74 - 8);
  uint64_t v66 = v15;
  MEMORY[0x270FA5388](v12);
  uint64_t v49 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v73 = type metadata accessor for Optional();
  uint64_t v70 = *(void (***)(char *, char *, uint64_t))(v73 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v73);
  uint64_t v72 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v68 = (char *)&v49 - v21;
  uint64_t v22 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v50 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v27 = (char *)&v49 - v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v76, a5);
  uint64_t v28 = TupleTypeMetadata2;
  uint64_t v75 = v27;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v29 = type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  destructiveProjectEnumData for NodePersonality.ShaderType(v29);
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v60 = v29;
  uint64_t v61 = (uint64_t *)(v7 + 16);
  destructiveProjectEnumData for NodePersonality.ShaderType(v29);
  uint64_t v55 = a5;
  unint64_t v30 = v68;
  uint64_t v76 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v70 += 4;
  uint64_t v71 = AssociatedConformanceWitness;
  uint64_t v69 = TupleTypeMetadata2 - 8;
  uint64_t v62 = (void (**)(char *, char *, uint64_t))(v56 + 32);
  uint64_t v63 = (void (**)(uint64_t, char *, uint64_t))(v65 + 4);
  uint64_t v64 = (void (**)(char *, uint64_t))(v56 + 8);
  ++v65;
  uint64_t v51 = (void (**)(char *, uint64_t, uint64_t))(v56 + 16);
  uint64_t v32 = (uint64_t)v49;
  uint64_t v33 = v74;
  uint64_t v58 = TupleTypeMetadata2;
  uint64_t v59 = v14;
  while (1)
  {
    uint64_t v34 = v72;
    dispatch thunk of IteratorProtocol.next()();
    (*v70)(v30, v34, v73);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v30, 1, v28) == 1) {
      return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v75, v76);
    }
    uint64_t v35 = &v30[*(int *)(v28 + 48)];
    (*v63)(v32, v30, v33);
    (*v62)(v14, v35, v9);
    swift_retain();
    swift_retain();
    Swift::Int v36 = OrderedSet._find(_:)();
    uint64_t v37 = v9;
    char v39 = v38;
    uint64_t v41 = v40;
    swift_release();
    swift_release();
    if (v39)
    {
      uint64_t v9 = v37;
      uint64_t v33 = v74;
      type metadata accessor for OrderedSet();
      OrderedSet._appendNew(_:in:)(v32, v41);
      uint64_t v14 = v59;
      (*v51)(v52, (uint64_t)v59, v9);
      ContiguousArray.append(_:)();
      goto LABEL_3;
    }
    uint64_t v42 = v32;
    uint64_t v44 = v60;
    uint64_t v43 = v61;
    ContiguousArray._makeMutableAndUnique()();
    uint64_t v45 = *v43;
    ContiguousArray._checkSubscript_mutating(_:)(v36);
    uint64_t v46 = v45
        + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))
        + *(void *)(v56 + 72) * v36;
    uint64_t v14 = v59;
    uint64_t v9 = v37;
    uint64_t v33 = v74;
    uint64_t v47 = v67;
    closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:)(v46, v53, v54, (uint64_t)v59, v74, v9);
    if (v47) {
      break;
    }
    uint64_t v67 = 0;
    destructiveProjectEnumData for NodePersonality.ShaderType(v44);
    uint64_t v32 = v42;
LABEL_3:
    uint64_t v28 = v58;
    unint64_t v30 = v68;
    (*v64)(v14, v9);
    (*v65)(v32, v33);
  }
  destructiveProjectEnumData for NodePersonality.ShaderType(v44);
  (*v64)(v14, v9);
  (*v65)(v42, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v75, v76);
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v27 = a3;
  uint64_t v26 = a2;
  uint64_t v9 = type metadata accessor for LazySequence();
  uint64_t v24 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void *)(a4 + 24);
  uint64_t v21 = *(void *)(a4 + 16);
  uint64_t v22 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = type metadata accessor for LazyMapSequence();
  uint64_t v25 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v21 - v14;
  MEMORY[0x2611840A0](a5, a6);
  uint64_t v16 = (void *)swift_allocObject();
  _OWORD v16[2] = v21;
  v16[3] = v12;
  uint64_t v17 = v22;
  uint64_t v18 = *(void *)(v22 + 32);
  v16[4] = a5;
  v16[5] = v18;
  void v16[6] = a6;
  swift_getWitnessTable();
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
  uint64_t WitnessTable = swift_getWitnessTable();
  specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:)((uint64_t)v15, v26, v27, v17, v13, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v15, v13);
}

uint64_t type metadata accessor for OrderedDictionary()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1, @error @owned Error)(uint64_t a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 48))();
  if (v3) {
    *a2 = v3;
  }
  return result;
}

uint64_t sub_25C3B754C()
{
  return 24;
}

__n128 sub_25C3B7558(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_25C3B756C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return OrderedDictionary.subscript.getter(*(void *)(a2 + a1 - 16), a3);
}

uint64_t sub_25C3B7590()
{
  return 24;
}

__n128 sub_25C3B759C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr, void *), uint64_t a3, uint64_t *a4)
{
  char v38 = a4;
  uint64_t v6 = a4 + 2;
  uint64_t v5 = a4[2];
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v6 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  }
  specialized ContiguousArray._endMutation()();
  uint64_t v32 = *(void *)(a1 + 16);
  if (!v32)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  uint64_t v8 = 0;
  unint64_t v30 = v6;
  uint64_t v31 = a1 + 32;
  while (1)
  {
    uint64_t v11 = (void *)(v31 + 24 * v8);
    uint64_t v12 = v11[1];
    uint64_t v13 = (void *)v11[2];
    v37[0] = *v11;
    v37[1] = v12;
    void v37[2] = v13;
    swift_bridgeObjectRetain();
    id v14 = v13;
    a2(&v34, v37);

    swift_bridgeObjectRelease();
    uint64_t v15 = v34;
    uint64_t v16 = v35;
    uint64_t v17 = v36;
    uint64_t v19 = *v38;
    uint64_t v18 = (void *)v38[1];
    uint64_t v9 = v18[2];
    if (*v38)
    {
      swift_retain();
      swift_retain();
      unint64_t v20 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v15, v16, (uint64_t)(v18 + 4), v9, (void *)(v19 + 16), v19 + 32);
      char v22 = v21;
      uint64_t v9 = v23;
      swift_release();
      swift_release();
      if (v22) {
        goto LABEL_6;
      }
    }
    else
    {
      if (!v9) {
        goto LABEL_6;
      }
      BOOL v24 = v18[4] == v34 && v18[5] == v35;
      if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        unint64_t v20 = 0;
      }
      else
      {
        if (v9 == 1) {
          goto LABEL_5;
        }
        if (v18[6] == v15 && v18[7] == v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          unint64_t v20 = 1;
        }
        else
        {
          if (v9 == 2) {
            goto LABEL_5;
          }
          if (v18[8] == v15 && v18[9] == v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            unint64_t v20 = 2;
          }
          else
          {
            if (v9 == 3) {
              goto LABEL_5;
            }
            if ((v18[10] != v15 || v18[11] != v16) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              uint64_t v27 = v18 + 13;
              uint64_t v28 = 4;
              while (v9 != v28)
              {
                if (*(v27 - 1) == v15 && *v27 == v16)
                {
                  unint64_t v20 = v28;
                  goto LABEL_18;
                }
                unint64_t v20 = v28++;
                v27 += 2;
                if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                  goto LABEL_18;
                }
              }
LABEL_5:
              uint64_t v9 = 0;
LABEL_6:
              specialized OrderedSet._appendNew(_:in:)(v15, v16, v9);
              id v10 = v17;
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              goto LABEL_7;
            }
            unint64_t v20 = 3;
          }
        }
      }
    }
LABEL_18:
    uint64_t v25 = *v30;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v30 = v25;
    if ((result & 1) == 0) {
      specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v25);
    }
    if ((v20 & 0x8000000000000000) != 0) {
      break;
    }
    if (v20 >= *(void *)(v25 + 16)) {
      goto LABEL_51;
    }
LABEL_7:
    ++v8;
    specialized ContiguousArray._endMutation()();
    swift_bridgeObjectRelease();

    if (v8 == v32)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_25C3B7918()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t OrderedSet.isSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v20[1] = a6;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = ContiguousArray.count.getter();
  if (v12 < ContiguousArray.count.getter()) {
    return 0;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (!v14) {
    return 1;
  }
  swift_retain();
  swift_retain();
  ContiguousArray.subscript.getter();
  BOOL v15 = OrderedSet.contains(_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, a5);
  if (v15)
  {
    v20[0] = a3;
    uint64_t v17 = 1;
    while (v14 != v17)
    {
      ContiguousArray.subscript.getter();
      ++v17;
      BOOL v18 = OrderedSet.contains(_:)();
      v16(v11, a5);
      if (!v18) {
        goto LABEL_8;
      }
    }
    swift_release();
    uint64_t v13 = 1;
  }
  else
  {
LABEL_8:
    swift_release();
    uint64_t v13 = 0;
  }
  swift_release();
  return v13;
}

uint64_t OrderedSet.isSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = Set.count.getter();
  if (v10 < ContiguousArray.count.getter()) {
    return 0;
  }
  uint64_t v12 = *(void *)(a3 + 16);
  if (!v12) {
    return 1;
  }
  swift_retain();
  swift_retain();
  ContiguousArray.subscript.getter();
  char v13 = Set.contains(_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, a4);
  if (v13)
  {
    v18[1] = a2;
    uint64_t v15 = 1;
    while (v12 != v15)
    {
      ContiguousArray.subscript.getter();
      ++v15;
      char v16 = Set.contains(_:)();
      v14(v9, a4);
      if ((v16 & 1) == 0) {
        goto LABEL_8;
      }
    }
    swift_release();
    uint64_t v11 = 1;
  }
  else
  {
LABEL_8:
    swift_release();
    uint64_t v11 = 0;
  }
  swift_release();
  return v11;
}

uint64_t OrderedSet.isSubset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3;
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter()) {
    return 1;
  }
  uint64_t v4 = ContiguousArray.count.getter();
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  LOBYTE(v6) = 2;
  uint64_t result = (uint64_t)_s11ShaderGraph13_UnsafeBitsetV014_withTemporaryD08capacity3runySi_yACzKXEtKFZ04_s11a8Graph13_cd8V013withf32D08capacity3runxSi_xACzKXEtKlFZyN12KXEfU_Sb_Tg5SbSgACxs5Error_pRi_zRi0_zlySbIsglrzo_Tf1ncn_nTf4ndnn_n(v5, &v6, (void *(*)(char *__return_ptr, void **))partial apply for closure #1 in OrderedSet.isSubset<A>(of:));
  if (v6 != 2) {
    return v6 & 1;
  }
  __break(1u);
  return result;
}

uint64_t OrderedSet.isSuperset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return OrderedSet.isSubset(of:)(a3, a4, a1, a2, a5, a6);
}

{
  return OrderedSet.isSubset(of:)(a3, a4, a1, a2, a5, a6);
}

BOOL OrderedSet.isSuperset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = ContiguousArray.count.getter();
  if (v10 >= Set.count.getter())
  {
    uint64_t v14 = a1;
    uint64_t v12 = type metadata accessor for Set();
    swift_getWitnessTable();
    return OrderedSet._isSuperset<A>(of:)((char *)&v14, a2, a3, a4, v12, a5);
  }
  else
  {
    return 0;
  }
}

uint64_t OrderedSet.isStrictSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = ContiguousArray.count.getter();
  if (v12 >= ContiguousArray.count.getter()) {
    return 0;
  }
  return OrderedSet.isSubset(of:)(a1, a2, a3, a4, a5, a6);
}

uint64_t OrderedSet.isStrictSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = ContiguousArray.count.getter();
  if (v8 >= Set.count.getter()) {
    return 0;
  }
  return OrderedSet.isSubset(of:)(a1, a2, a3, a4);
}

void *OrderedSet.isStrictSubset<A>(of:)()
{
  uint64_t v0 = ContiguousArray.count.getter();
  char v2 = 2;
  uint64_t result = _s11ShaderGraph13_UnsafeBitsetV014_withTemporaryD08capacity3runySi_yACzKXEtKFZ04_s11a8Graph13_cd8V013withf32D08capacity3runxSi_xACzKXEtKlFZyN12KXEfU_Sb_Tg5SbSgACxs5Error_pRi_zRi0_zlySbIsglrzo_Tf1ncn_nTf4ndnn_n(v0, &v2, (void *(*)(char *__return_ptr, void **))partial apply for closure #1 in OrderedSet.isStrictSubset<A>(of:));
  if (v2 != 2) {
    return (void *)(v2 & 1);
  }
  __break(1u);
  return result;
}

uint64_t OrderedSet.isStrictSuperset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = ContiguousArray.count.getter();
  if (ContiguousArray.count.getter() >= v12) {
    return 0;
  }
  return OrderedSet.isSubset(of:)(a3, a4, a1, a2, a5, a6);
}

uint64_t OrderedSet.isStrictSuperset(of:)()
{
  uint64_t v0 = ContiguousArray.count.getter();
  if (Set.count.getter() >= v0)
  {
    char v1 = 0;
  }
  else
  {
    type metadata accessor for OrderedSet();
    swift_getWitnessTable();
    char v1 = Set.isSubset<A>(of:)();
  }
  return v1 & 1;
}

void *OrderedSet.isStrictSuperset<A>(of:)()
{
  uint64_t v0 = ContiguousArray.count.getter();
  char v2 = 2;
  uint64_t result = _s11ShaderGraph13_UnsafeBitsetV014_withTemporaryD08capacity3runySi_yACzKXEtKFZ04_s11a8Graph13_cd8V013withf32D08capacity3runxSi_xACzKXEtKlFZyN12KXEfU_Sb_Tg5SbSgACxs5Error_pRi_zRi0_zlySbIsglrzo_Tf1ncn_nTf4ndnn_n(v0, &v2, (void *(*)(char *__return_ptr, void **))partial apply for closure #1 in OrderedSet.isStrictSuperset<A>(of:));
  if (v2 != 2) {
    return (void *)(v2 & 1);
  }
  __break(1u);
  return result;
}

uint64_t OrderedSet.isDisjoint(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v28[1] = a1;
  v28[2] = a3;
  uint64_t v8 = *(void *)(a5 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  char v13 = (char *)v28 - v12;
  uint64_t v29 = v14;
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter()) {
    return 1;
  }
  uint64_t v29 = a2;
  if (Collection.isEmpty.getter()) {
    return 1;
  }
  uint64_t v17 = ContiguousArray.count.getter();
  if (ContiguousArray.count.getter() >= v17)
  {
    uint64_t v21 = *(void *)(a4 + 16);
    if (v21)
    {
      swift_retain();
      swift_retain();
      ContiguousArray.subscript.getter();
      BOOL v22 = OrderedSet.contains(_:)();
      uint64_t v23 = *(void (**)(char *, uint64_t))(v8 + 8);
      v23(v13, a5);
      if (v22) {
        goto LABEL_15;
      }
      uint64_t v26 = 1;
      while (v21 != v26)
      {
        ContiguousArray.subscript.getter();
        ++v26;
        BOOL v27 = OrderedSet.contains(_:)();
        v23(v13, a5);
        if (v27) {
          goto LABEL_15;
        }
      }
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v18 = *(void *)(a2 + 16);
    if (v18)
    {
      swift_retain();
      swift_retain();
      ContiguousArray.subscript.getter();
      BOOL v19 = OrderedSet.contains(_:)();
      unint64_t v20 = *(void (**)(char *, uint64_t))(v8 + 8);
      v20(v11, a5);
      if (v19)
      {
LABEL_15:
        swift_release();
        uint64_t v15 = 0;
LABEL_21:
        swift_release();
        return v15;
      }
      uint64_t v24 = 1;
      while (v18 != v24)
      {
        ContiguousArray.subscript.getter();
        ++v24;
        BOOL v25 = OrderedSet.contains(_:)();
        v20(v11, a5);
        if (v25) {
          goto LABEL_15;
        }
      }
LABEL_20:
      swift_release();
      uint64_t v15 = 1;
      goto LABEL_21;
    }
  }
  return 1;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (**v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (**v30)(char *, uint64_t);
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;

  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  char v13 = (char *)&v40 - v12;
  uint64_t v47 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a3;
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter() & 1) != 0 || (Set.isEmpty.getter()) {
    return 1;
  }
  uint64_t v18 = ContiguousArray.count.getter();
  if (Set.count.getter() >= v18)
  {
    BOOL v22 = *(void *)(a3 + 16);
    if (v22)
    {
      swift_retain();
      swift_retain();
      ContiguousArray.subscript.getter();
      uint64_t v23 = Set.contains(_:)();
      uint64_t v24 = *(void (**)(char *, uint64_t))(v47 + 8);
      v24(v15, a4);
      if (v23)
      {
LABEL_39:
        swift_release();
        swift_release();
        return 0;
      }
      uint64_t v46 = a2;
      char v38 = 1;
      while (v22 != v38)
      {
        ContiguousArray.subscript.getter();
        ++v38;
        char v39 = Set.contains(_:)();
        v24(v15, a4);
        if (v39) {
          goto LABEL_39;
        }
      }
      swift_release();
      swift_release();
    }
    return 1;
  }
  uint64_t v45 = a3;
  uint64_t v46 = a2;
  uint64_t v44 = a5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    uint64_t result = Set.Iterator.init(_cocoa:)();
    a1 = v49;
    uint64_t v42 = v50;
    BOOL v19 = v51;
    unint64_t v20 = v52;
    uint64_t v21 = v53;
  }
  else
  {
    BOOL v25 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v26 = *(void *)(a1 + 56);
    uint64_t v42 = a1 + 56;
    BOOL v19 = ~v25;
    BOOL v27 = -v25;
    if (v27 < 64) {
      uint64_t v28 = ~(-1 << v27);
    }
    else {
      uint64_t v28 = -1;
    }
    uint64_t v21 = v28 & v26;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v20 = 0;
  }
  char v48 = a1;
  uint64_t v29 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
  uint64_t v40 = v19;
  uint64_t v41 = (unint64_t)(v19 + 64) >> 6;
  uint64_t v43 = v47 + 16;
  unint64_t v30 = (uint64_t (**)(char *, uint64_t))(v47 + 8);
  while (1)
  {
    uint64_t v34 = v20;
    if ((v48 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_41;
    }
    _forceBridgeFromObjectiveC<A>(_:_:)();
    swift_unknownObjectRelease();
LABEL_18:
    (*v29)(v13, 0, 1, a4);
    uint64_t v33 = OrderedSet.contains(_:)();
    uint64_t result = (*v30)(v13, a4);
    if (v33)
    {
      outlined consume of [String : InputSpec].Iterator._Variant();
      return 0;
    }
  }
  if (v21)
  {
    uint64_t v31 = __clz(__rbit64(v21));
    v21 &= v21 - 1;
    uint64_t v32 = v31 | (v20 << 6);
LABEL_17:
    (*(void (**)(char *, unint64_t, uint64_t))(v47 + 16))(v13, *(void *)(v48 + 48) + *(void *)(v47 + 72) * v32, a4);
    goto LABEL_18;
  }
  uint64_t v35 = v20 + 1;
  if (!__OFADD__(v20, 1))
  {
    if (v35 >= v41) {
      goto LABEL_41;
    }
    Swift::Int v36 = *(void *)(v42 + 8 * v35);
    ++v20;
    if (!v36)
    {
      unint64_t v20 = v34 + 2;
      if (v34 + 2 >= v41) {
        goto LABEL_41;
      }
      Swift::Int v36 = *(void *)(v42 + 8 * v20);
      if (!v36)
      {
        unint64_t v20 = v34 + 3;
        if (v34 + 3 >= v41) {
          goto LABEL_41;
        }
        Swift::Int v36 = *(void *)(v42 + 8 * v20);
        if (!v36)
        {
          uint64_t v37 = v34 + 4;
          while (v41 != v37)
          {
            Swift::Int v36 = *(void *)(v42 + 8 * v37++);
            if (v36)
            {
              unint64_t v20 = v37 - 1;
              goto LABEL_32;
            }
          }
LABEL_41:
          char v16 = 1;
          (*v29)(v13, 1, 1, a4);
          outlined consume of [String : InputSpec].Iterator._Variant();
          return v16;
        }
      }
    }
LABEL_32:
    uint64_t v21 = (v36 - 1) & v36;
    uint64_t v32 = __clz(__rbit64(v36)) + (v20 << 6);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t OrderedSet.isDisjoint<A>(with:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = a6;
  uint64_t v35 = a1;
  uint64_t v32 = a2;
  uint64_t v30 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v29 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  BOOL v19 = (char *)&v29 - v18;
  uint64_t v33 = a3;
  uint64_t v36 = a3;
  type metadata accessor for ContiguousArray();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter()) {
    return 1;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v29, v35, a5);
  uint64_t v35 = v19;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v21 = v30;
  uint64_t v22 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  uint64_t v23 = (uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v24 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  BOOL v25 = (void (**)(char *, uint64_t))(v21 + 8);
  do
  {
    dispatch thunk of IteratorProtocol.next()();
    int v26 = (*v23)(v14, 1, a4);
    BOOL v20 = v26 == 1;
    if (v26 == 1) {
      break;
    }
    (*v24)(v10, v14, a4);
    BOOL v27 = OrderedSet.contains(_:)();
    (*v25)(v10, a4);
  }
  while (!v27);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v35, v22);
  return v20;
}

unint64_t closure #1 in OrderedSet.isSubset<A>(of:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  uint64_t v36 = a8;
  uint64_t v38 = a7;
  char v39 = a1;
  uint64_t v45 = a4;
  uint64_t v42 = a3;
  uint64_t v44 = a2;
  uint64_t v37 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v34 - v14;
  uint64_t v16 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v35 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v21 = (char *)&v34 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v44, a6);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v43 = v21;
  uint64_t v44 = AssociatedTypeWitness;
  uint64_t v41 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v23 = v37;
  uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
  if (v40(v15, 1, a5) != 1)
  {
    int v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    BOOL v27 = (void (**)(char *, uint64_t))(v23 + 8);
    v26(v11, v15, a5);
    while (1)
    {
      unint64_t result = OrderedSet._find(_:)();
      if ((v28 & 1) != 0
        || (uint64_t v29 = (result >> 3) & 0x1FFFFFFFFFFFFFF8,
            uint64_t v30 = *(void *)(*v39 + v29),
            *(void *)(*v39 + v29) = v30 | (1 << result),
            (v30 & (1 << result)) != 0))
      {
        (*v27)(v11, a5);
      }
      else
      {
        uint64_t v31 = v39[2];
        uint64_t v32 = v31 + 1;
        if (__OFADD__(v31, 1))
        {
          __break(1u);
          return result;
        }
        _OWORD v39[2] = v32;
        uint64_t v33 = ContiguousArray.count.getter();
        (*v27)(v11, a5);
        if (v32 == v33)
        {
          char v24 = 1;
          goto LABEL_3;
        }
      }
      dispatch thunk of IteratorProtocol.next()();
      if (v40(v15, 1, a5) == 1) {
        break;
      }
      v26(v11, v15, a5);
    }
  }
  char v24 = 0;
LABEL_3:
  unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v43, v44);
  *uint64_t v36 = v24;
  return result;
}

uint64_t partial apply for closure #1 in OrderedSet.isSubset<A>(of:)(uint64_t a1)
{
  return partial apply for closure #1 in OrderedSet.isSubset<A>(of:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))closure #1 in OrderedSet.isSubset<A>(of:));
}

BOOL OrderedSet._isSuperset<A>(of:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v31 = a3;
  uint64_t v32 = a6;
  uint64_t v30 = a2;
  uint64_t v33 = a1;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v20 = (char *)&v28 - v19;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v33, a5);
  uint64_t v33 = v20;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v21 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  uint64_t v22 = (uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v23 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  char v24 = (void (**)(char *, uint64_t))(v8 + 8);
  do
  {
    dispatch thunk of IteratorProtocol.next()();
    int v25 = (*v22)(v14, 1, a4);
    if (v25 == 1) {
      break;
    }
    (*v23)(v10, v14, a4);
    BOOL v26 = OrderedSet.contains(_:)();
    (*v24)(v10, a4);
  }
  while (v26);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v21);
  return v25 == 1;
}

unint64_t closure #1 in OrderedSet.isStrictSubset<A>(of:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, unsigned char *a9@<X8>)
{
  uint64_t v42 = a1;
  uint64_t v47 = a7;
  char v48 = a8;
  uint64_t v50 = a4;
  uint64_t v46 = a3;
  uint64_t v49 = a2;
  uint64_t v41 = a9;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v39 - v16;
  uint64_t v18 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v23 = (char *)&v39 - v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v49, a6);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v48 = v23;
  uint64_t v49 = AssociatedTypeWitness;
  uint64_t v45 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v44(v17, 1, a5) != 1)
  {
    uint64_t v27 = 0;
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    uint64_t v28 = (void (**)(char *, uint64_t))(v11 + 8);
    v43(v13, v17, a5);
    while (1)
    {
      unint64_t result = OrderedSet._find(_:)();
      if (v29)
      {
        if (v27)
        {
          uint64_t v27 = 1;
LABEL_6:
          (*v28)(v13, a5);
          uint64_t v25 = v27;
          goto LABEL_7;
        }
        uint64_t v37 = v42[2];
        uint64_t v38 = ContiguousArray.count.getter();
        (*v28)(v13, a5);
        uint64_t v25 = 1;
        if (v37 == v38) {
          goto LABEL_3;
        }
      }
      else
      {
        uint64_t v30 = v42;
        uint64_t v31 = (result >> 3) & 0x1FFFFFFFFFFFFFF8;
        uint64_t v32 = *(void *)(*v42 + v31);
        *(void *)(*v42 + v31) = v32 | (1 << result);
        if ((v32 & (1 << result)) != 0) {
          goto LABEL_6;
        }
        uint64_t v33 = v30[2];
        uint64_t v34 = v33 + 1;
        if (__OFADD__(v33, 1))
        {
          __break(1u);
          return result;
        }
        v30[2] = v34;
        uint64_t v35 = ContiguousArray.count.getter();
        (*v28)(v13, a5);
        BOOL v36 = v34 == v35;
        uint64_t v25 = (v34 != v35) & v27;
        if (v36 && ((v27 ^ 1) & 1) == 0)
        {
          LOBYTE(v25) = 1;
          goto LABEL_3;
        }
      }
LABEL_7:
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v27 = v25;
      if (v44(v17, 1, a5) == 1) {
        break;
      }
      v43(v13, v17, a5);
    }
  }
  LOBYTE(v25) = 0;
LABEL_3:
  unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v48, v49);
  *uint64_t v41 = v25;
  return result;
}

uint64_t closure #1 in OrderedSet.isStrictSuperset<A>(of:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, BOOL *a8@<X8>)
{
  uint64_t v45 = a8;
  uint64_t v52 = a7;
  uint64_t v55 = a4;
  uint64_t v46 = a5;
  uint64_t v47 = a3;
  uint64_t v54 = a2;
  uint64_t v50 = *(void **)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v44 - v14;
  uint64_t v16 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v44 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v21 = (char *)&v44 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v54, a6);
  uint64_t v22 = v15;
  uint64_t v23 = v46;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v53 = v21;
  uint64_t v54 = AssociatedTypeWitness;
  uint64_t v25 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  BOOL v26 = v50;
  uint64_t v27 = (char *)(v50 + 6);
  uint64_t v51 = (unsigned int (*)(char *, uint64_t, uint64_t))v50[6];
  if (v51(v22, 1, v23) != 1)
  {
    uint64_t v31 = (void *)v26[4];
    uint64_t v32 = v26 + 4;
    uint64_t v49 = (void (**)(char *, uint64_t))(v26 + 1);
    uint64_t v50 = v31;
    char v48 = v22;
    ((void (*)(char *, char *, uint64_t))v31)(v11, v22, v23);
    while (1)
    {
      unint64_t v33 = OrderedSet._find(_:)();
      if (v34)
      {
        (*v49)(v11, v23);
LABEL_14:
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v53, v54);
        BOOL v30 = 0;
        goto LABEL_15;
      }
      uint64_t v35 = (v33 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v36 = *(void *)(*a1 + v35);
      *(void *)(*a1 + v35) = v36 | (1 << v33);
      if ((v36 & (1 << v33)) != 0)
      {
        (*v49)(v11, v23);
      }
      else
      {
        uint64_t v37 = v27;
        uint64_t v38 = v25;
        uint64_t result = v55;
        uint64_t v39 = a1[2];
        uint64_t v40 = v39 + 1;
        if (__OFADD__(v39, 1))
        {
          __break(1u);
          return result;
        }
        a1[2] = v40;
        uint64_t v41 = v32;
        uint64_t v42 = ContiguousArray.count.getter();
        (*v49)(v11, v23);
        BOOL v43 = v40 == v42;
        uint64_t v32 = v41;
        uint64_t v22 = v48;
        uint64_t v25 = v38;
        uint64_t v27 = v37;
        if (v43) {
          goto LABEL_14;
        }
      }
      dispatch thunk of IteratorProtocol.next()();
      if (v51(v22, 1, v23) == 1) {
        break;
      }
      ((void (*)(char *, char *, uint64_t))v50)(v11, v22, v23);
    }
  }
  (*(void (**)(char *, uint64_t))(v44 + 8))(v53, v54);
  uint64_t v28 = a1[2];
  uint64_t result = ContiguousArray.count.getter();
  BOOL v30 = v28 < result;
LABEL_15:
  *uint64_t v45 = v30;
  return result;
}

uint64_t partial apply for closure #1 in OrderedSet.isStrictSubset<A>(of:)(uint64_t a1)
{
  return partial apply for closure #1 in OrderedSet.isSubset<A>(of:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))closure #1 in OrderedSet.isStrictSubset<A>(of:));
}

uint64_t partial apply for closure #1 in OrderedSet.isStrictSuperset<A>(of:)(uint64_t a1)
{
  return partial apply for closure #1 in OrderedSet.isSubset<A>(of:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))closure #1 in OrderedSet.isStrictSuperset<A>(of:));
}

uint64_t partial apply for closure #1 in OrderedSet.isSubset<A>(of:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void))
{
  return a2(a1, v2[6], v2[7], v2[8], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t Surface.dataType.getter(unsigned __int8 a1)
{
  if (a1 < 3u) {
    return 53;
  }
  else {
    return 54;
  }
}

uint64_t ShaderType.dataType.getter(char a1)
{
  if (a1) {
    return 54;
  }
  else {
    return 53;
  }
}

unint64_t SGDataType.stringValue.getter()
{
  return 0xD000000000000014;
}

uint64_t SGDataType.vectorElementType()(uint64_t a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 3:
    case 7:
    case 9:
      uint64_t result = a1;
      break;
    case 14:
    case 15:
    case 17:
    case 18:
    case 21:
    case 25:
    case 29:
    case 32:
    case 35:
    case 38:
    case 41:
    case 44:
    case 49:
    case 52:
      uint64_t result = 9;
      break;
    case 20:
    case 22:
    case 26:
    case 30:
    case 33:
    case 36:
    case 39:
    case 42:
    case 45:
    case 47:
    case 50:
    case 55:
    case 56:
      uint64_t result = 7;
      break;
    case 24:
    case 28:
    case 31:
      uint64_t result = 3;
      break;
    default:
      return result;
  }
  return result;
}

BOOL static Surface.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int static SGDataType.invalidMaterialInputTypes.getter()
{
  return specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of static SGDataType.invalidMaterialInputTypes.getter);
}

uint64_t SGDataType.canonicalized()(uint64_t result)
{
  uint64_t v1 = result - 32;
  if (unint64_t)(result - 32) <= 0x18 && ((0x1F680DBu >> v1)) {
    return qword_25C41DE88[v1];
  }
  return result;
}

unint64_t SGDataTypeStorage.bitPattern.getter()
{
  outlined init with take of SGDataTypeStorage(v0, (uint64_t)v4);
  switch(v5)
  {
    case 0:
      unsigned __int8 v1 = 0;
      unsigned int v2 = v4[0] & 1;
      break;
    case 1:
      unsigned __int8 v1 = 0;
      unsigned int v2 = LOBYTE(v4[0]);
      break;
    case 2:
    case 3:
    case 5:
      unsigned __int8 v1 = 0;
      unsigned int v2 = v4[0];
      break;
    case 4:
      unsigned __int8 v1 = 0;
      unsigned int v2 = LOWORD(v4[0]);
      break;
    default:
      unsigned int v2 = 0;
      unsigned __int8 v1 = 1;
      break;
  }
  return v2 | ((unint64_t)v1 << 32);
}

uint64_t SGDataTypeStorage.valueString.getter()
{
  uint64_t v1 = v0;
  outlined init with take of SGDataTypeStorage(v0, (uint64_t)&v127);
  switch(v128)
  {
    case 1:
    case 2:
    case 3:
    case 4:
      return dispatch thunk of CustomStringConvertible.description.getter();
    case 5:
      uint64_t v126 = 0;
      Float.write<A>(to:)();
      return v126;
    case 6:
      uint64_t v7 = v127;
      swift_bridgeObjectRetain();
      return v7;
    case 7:
      uint64_t v126 = 0;
      v8._uint64_t countAndFlagsBits = 40;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      Float.write<A>(to:)();
      v9._uint64_t countAndFlagsBits = 8236;
      v9._object = (void *)0xE200000000000000;
      String.append(_:)(v9);
      goto LABEL_16;
    case 8:
      uint64_t v126 = 0;
      v10._uint64_t countAndFlagsBits = 40;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      Float.write<A>(to:)();
      v11._uint64_t countAndFlagsBits = 8236;
      v11._object = (void *)0xE200000000000000;
      String.append(_:)(v11);
      Float.write<A>(to:)();
      v12._uint64_t countAndFlagsBits = 8236;
      v12._object = (void *)0xE200000000000000;
      String.append(_:)(v12);
      goto LABEL_16;
    case 9:
      uint64_t v126 = 0;
      _StringGuts.grow(_:)(16);
      v13._uint64_t countAndFlagsBits = 40;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      Float.write<A>(to:)();
      v14._uint64_t countAndFlagsBits = 8236;
      v14._object = (void *)0xE200000000000000;
      String.append(_:)(v14);
      Float.write<A>(to:)();
      v15._uint64_t countAndFlagsBits = 8236;
      v15._object = (void *)0xE200000000000000;
      String.append(_:)(v15);
      Float.write<A>(to:)();
      v16._uint64_t countAndFlagsBits = 8236;
      v16._object = (void *)0xE200000000000000;
      String.append(_:)(v16);
LABEL_16:
      Float.write<A>(to:)();
      goto LABEL_26;
    case 10:
      uint64_t v17 = &demangling cache variable for type metadata for SIMD2<UInt16>;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<UInt16>);
      uint64_t v18 = (unint64_t *)&lazy protocol witness table cache variable for type SIMD2<UInt16> and conformance SIMD2<A>;
      goto LABEL_20;
    case 11:
      uint64_t v17 = &demangling cache variable for type metadata for SIMD3<UInt16>;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<UInt16>);
      uint64_t v18 = (unint64_t *)&lazy protocol witness table cache variable for type SIMD3<UInt16> and conformance SIMD3<A>;
      goto LABEL_20;
    case 12:
      uint64_t v17 = &demangling cache variable for type metadata for SIMD4<UInt16>;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<UInt16>);
      uint64_t v18 = (unint64_t *)&lazy protocol witness table cache variable for type SIMD4<UInt16> and conformance SIMD4<A>;
LABEL_20:
      lazy protocol witness table accessor for type [String] and conformance [A](v18, v17);
      return SIMD.description.getter();
    case 13:
      uint64_t v126 = 40;
      v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._uint64_t countAndFlagsBits = 8236;
      v20._object = (void *)0xE200000000000000;
      String.append(_:)(v20);
      goto LABEL_25;
    case 14:
      uint64_t v126 = 40;
      v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._uint64_t countAndFlagsBits = 8236;
      v22._object = (void *)0xE200000000000000;
      String.append(_:)(v22);
      v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._uint64_t countAndFlagsBits = 8236;
      v24._object = (void *)0xE200000000000000;
      String.append(_:)(v24);
      goto LABEL_25;
    case 15:
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      uint64_t v126 = 40;
      v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._uint64_t countAndFlagsBits = 8236;
      v26._object = (void *)0xE200000000000000;
      String.append(_:)(v26);
      v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._uint64_t countAndFlagsBits = 8236;
      v28._object = (void *)0xE200000000000000;
      String.append(_:)(v28);
      v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v30._uint64_t countAndFlagsBits = 8236;
      v30._object = (void *)0xE200000000000000;
      String.append(_:)(v30);
LABEL_25:
      v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
LABEL_26:
      uint64_t v32 = 41;
      goto LABEL_36;
    case 16:
      uint64_t v126 = 0;
      _StringGuts.grow(_:)(16);
      v33._uint64_t countAndFlagsBits = 91;
      v33._object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      Float.write<A>(to:)();
      v34._uint64_t countAndFlagsBits = 8236;
      v34._object = (void *)0xE200000000000000;
      String.append(_:)(v34);
      Float.write<A>(to:)();
      v35._uint64_t countAndFlagsBits = 8202;
      v35._object = (void *)0xE200000000000000;
      String.append(_:)(v35);
      Float.write<A>(to:)();
      v36._uint64_t countAndFlagsBits = 8236;
      v36._object = (void *)0xE200000000000000;
      String.append(_:)(v36);
      goto LABEL_30;
    case 17:
      uint64_t v126 = 0;
      _StringGuts.grow(_:)(36);
      v37._uint64_t countAndFlagsBits = 91;
      v37._object = (void *)0xE100000000000000;
      String.append(_:)(v37);
      Float.write<A>(to:)();
      v38._uint64_t countAndFlagsBits = 8236;
      v38._object = (void *)0xE200000000000000;
      String.append(_:)(v38);
      Float.write<A>(to:)();
      v39._uint64_t countAndFlagsBits = 8236;
      v39._object = (void *)0xE200000000000000;
      String.append(_:)(v39);
      Float.write<A>(to:)();
      v40._uint64_t countAndFlagsBits = 8202;
      v40._object = (void *)0xE200000000000000;
      String.append(_:)(v40);
      Float.write<A>(to:)();
      v41._uint64_t countAndFlagsBits = 8236;
      v41._object = (void *)0xE200000000000000;
      String.append(_:)(v41);
      Float.write<A>(to:)();
      v42._uint64_t countAndFlagsBits = 8236;
      v42._object = (void *)0xE200000000000000;
      String.append(_:)(v42);
      Float.write<A>(to:)();
      v43._uint64_t countAndFlagsBits = 8202;
      v43._object = (void *)0xE200000000000000;
      String.append(_:)(v43);
      Float.write<A>(to:)();
      v44._uint64_t countAndFlagsBits = 8236;
      v44._object = (void *)0xE200000000000000;
      String.append(_:)(v44);
      Float.write<A>(to:)();
      v45._uint64_t countAndFlagsBits = 8236;
      v45._object = (void *)0xE200000000000000;
      String.append(_:)(v45);
      goto LABEL_30;
    case 18:
      uint64_t v126 = 0;
      _StringGuts.grow(_:)(64);
      v46._uint64_t countAndFlagsBits = 91;
      v46._object = (void *)0xE100000000000000;
      String.append(_:)(v46);
      Float.write<A>(to:)();
      v47._uint64_t countAndFlagsBits = 8236;
      v47._object = (void *)0xE200000000000000;
      String.append(_:)(v47);
      Float.write<A>(to:)();
      v48._uint64_t countAndFlagsBits = 8236;
      v48._object = (void *)0xE200000000000000;
      String.append(_:)(v48);
      Float.write<A>(to:)();
      v49._uint64_t countAndFlagsBits = 8236;
      v49._object = (void *)0xE200000000000000;
      String.append(_:)(v49);
      Float.write<A>(to:)();
      v50._uint64_t countAndFlagsBits = 8202;
      v50._object = (void *)0xE200000000000000;
      String.append(_:)(v50);
      Float.write<A>(to:)();
      v51._uint64_t countAndFlagsBits = 8236;
      v51._object = (void *)0xE200000000000000;
      String.append(_:)(v51);
      Float.write<A>(to:)();
      v52._uint64_t countAndFlagsBits = 8236;
      v52._object = (void *)0xE200000000000000;
      String.append(_:)(v52);
      Float.write<A>(to:)();
      v53._uint64_t countAndFlagsBits = 8236;
      v53._object = (void *)0xE200000000000000;
      String.append(_:)(v53);
      Float.write<A>(to:)();
      v54._uint64_t countAndFlagsBits = 8202;
      v54._object = (void *)0xE200000000000000;
      String.append(_:)(v54);
      Float.write<A>(to:)();
      v55._uint64_t countAndFlagsBits = 8236;
      v55._object = (void *)0xE200000000000000;
      String.append(_:)(v55);
      Float.write<A>(to:)();
      v56._uint64_t countAndFlagsBits = 8236;
      v56._object = (void *)0xE200000000000000;
      String.append(_:)(v56);
      Float.write<A>(to:)();
      v57._uint64_t countAndFlagsBits = 8236;
      v57._object = (void *)0xE200000000000000;
      String.append(_:)(v57);
      Float.write<A>(to:)();
      v58._uint64_t countAndFlagsBits = 8202;
      v58._object = (void *)0xE200000000000000;
      String.append(_:)(v58);
      Float.write<A>(to:)();
      v59._uint64_t countAndFlagsBits = 8236;
      v59._object = (void *)0xE200000000000000;
      String.append(_:)(v59);
      Float.write<A>(to:)();
      v60._uint64_t countAndFlagsBits = 8236;
      v60._object = (void *)0xE200000000000000;
      String.append(_:)(v60);
      Float.write<A>(to:)();
      v61._uint64_t countAndFlagsBits = 8236;
      v61._object = (void *)0xE200000000000000;
      String.append(_:)(v61);
LABEL_30:
      Float.write<A>(to:)();
      goto LABEL_35;
    case 19:
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      uint64_t v126 = 91;
      v62._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v62);
      swift_bridgeObjectRelease();
      v63._uint64_t countAndFlagsBits = 8236;
      v63._object = (void *)0xE200000000000000;
      String.append(_:)(v63);
      v64._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      v65._uint64_t countAndFlagsBits = 8202;
      v65._object = (void *)0xE200000000000000;
      String.append(_:)(v65);
      v66._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v66);
      swift_bridgeObjectRelease();
      v67._uint64_t countAndFlagsBits = 8236;
      v67._object = (void *)0xE200000000000000;
      String.append(_:)(v67);
      goto LABEL_34;
    case 20:
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      uint64_t v126 = 91;
      v68._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v68);
      swift_bridgeObjectRelease();
      v69._uint64_t countAndFlagsBits = 8236;
      v69._object = (void *)0xE200000000000000;
      String.append(_:)(v69);
      v70._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v70);
      swift_bridgeObjectRelease();
      v71._uint64_t countAndFlagsBits = 8236;
      v71._object = (void *)0xE200000000000000;
      String.append(_:)(v71);
      v72._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v72);
      swift_bridgeObjectRelease();
      v73._uint64_t countAndFlagsBits = 8202;
      v73._object = (void *)0xE200000000000000;
      String.append(_:)(v73);
      v74._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v74);
      swift_bridgeObjectRelease();
      v75._uint64_t countAndFlagsBits = 8236;
      v75._object = (void *)0xE200000000000000;
      String.append(_:)(v75);
      v76._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v76);
      swift_bridgeObjectRelease();
      v77._uint64_t countAndFlagsBits = 8236;
      v77._object = (void *)0xE200000000000000;
      String.append(_:)(v77);
      v78._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v78);
      swift_bridgeObjectRelease();
      v79._uint64_t countAndFlagsBits = 8202;
      v79._object = (void *)0xE200000000000000;
      String.append(_:)(v79);
      v80._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v80);
      swift_bridgeObjectRelease();
      v81._uint64_t countAndFlagsBits = 8236;
      v81._object = (void *)0xE200000000000000;
      String.append(_:)(v81);
      v82._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v82);
      swift_bridgeObjectRelease();
      v83._uint64_t countAndFlagsBits = 8236;
      v83._object = (void *)0xE200000000000000;
      String.append(_:)(v83);
      goto LABEL_34;
    case 21:
      uint64_t v126 = 0;
      _StringGuts.grow(_:)(64);
      v84._uint64_t countAndFlagsBits = 91;
      v84._object = (void *)0xE100000000000000;
      String.append(_:)(v84);
      v85._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v85);
      swift_bridgeObjectRelease();
      v86._uint64_t countAndFlagsBits = 8236;
      v86._object = (void *)0xE200000000000000;
      String.append(_:)(v86);
      v87._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v87);
      swift_bridgeObjectRelease();
      v88._uint64_t countAndFlagsBits = 8236;
      v88._object = (void *)0xE200000000000000;
      String.append(_:)(v88);
      v89._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v89);
      swift_bridgeObjectRelease();
      v90._uint64_t countAndFlagsBits = 8236;
      v90._object = (void *)0xE200000000000000;
      String.append(_:)(v90);
      v91._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v91);
      swift_bridgeObjectRelease();
      v92._uint64_t countAndFlagsBits = 8202;
      v92._object = (void *)0xE200000000000000;
      String.append(_:)(v92);
      v93._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v93);
      swift_bridgeObjectRelease();
      v94._uint64_t countAndFlagsBits = 8236;
      v94._object = (void *)0xE200000000000000;
      String.append(_:)(v94);
      v95._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v95);
      swift_bridgeObjectRelease();
      v96._uint64_t countAndFlagsBits = 8236;
      v96._object = (void *)0xE200000000000000;
      String.append(_:)(v96);
      v97._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v97);
      swift_bridgeObjectRelease();
      v98._uint64_t countAndFlagsBits = 8236;
      v98._object = (void *)0xE200000000000000;
      String.append(_:)(v98);
      v99._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v99);
      swift_bridgeObjectRelease();
      v100._uint64_t countAndFlagsBits = 8202;
      v100._object = (void *)0xE200000000000000;
      String.append(_:)(v100);
      v101._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v101);
      swift_bridgeObjectRelease();
      v102._uint64_t countAndFlagsBits = 8236;
      v102._object = (void *)0xE200000000000000;
      String.append(_:)(v102);
      v103._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v103);
      swift_bridgeObjectRelease();
      v104._uint64_t countAndFlagsBits = 8236;
      v104._object = (void *)0xE200000000000000;
      String.append(_:)(v104);
      v105._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v105);
      swift_bridgeObjectRelease();
      v106._uint64_t countAndFlagsBits = 8236;
      v106._object = (void *)0xE200000000000000;
      String.append(_:)(v106);
      v107._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v107);
      swift_bridgeObjectRelease();
      v108._uint64_t countAndFlagsBits = 8202;
      v108._object = (void *)0xE200000000000000;
      String.append(_:)(v108);
      v109._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v109);
      swift_bridgeObjectRelease();
      v110._uint64_t countAndFlagsBits = 8236;
      v110._object = (void *)0xE200000000000000;
      String.append(_:)(v110);
      v111._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v111);
      swift_bridgeObjectRelease();
      v112._uint64_t countAndFlagsBits = 8236;
      v112._object = (void *)0xE200000000000000;
      String.append(_:)(v112);
      v113._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v113);
      swift_bridgeObjectRelease();
      v114._uint64_t countAndFlagsBits = 8236;
      v114._object = (void *)0xE200000000000000;
      String.append(_:)(v114);
LABEL_34:
      v115._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v115);
      swift_bridgeObjectRelease();
LABEL_35:
      uint64_t v32 = 93;
LABEL_36:
      unint64_t v116 = 0xE100000000000000;
      String.append(_:)(*(Swift::String *)&v32);
      break;
    case 22:
    case 23:
      unsigned int v2 = (CGColor *)v127;
      outlined retain of SGDataTypeStorage(v0, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
      outlined retain of SGDataTypeStorage(v0, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
      specialized CGColorCodingContainer.init(_:)(v2);
      uint64_t v119 = v118;
      uint64_t v121 = v120;
      uint64_t v122 = swift_bridgeObjectRetain();
      uint64_t v123 = MEMORY[0x261184160](v122, MEMORY[0x263F8EF38]);
      swift_bridgeObjectRelease();
      uint64_t v126 = v123;
      v124._uint64_t countAndFlagsBits = 2112032;
      v124._object = (void *)0xE300000000000000;
      String.append(_:)(v124);
      swift_bridgeObjectRetain();
      v125._uint64_t countAndFlagsBits = v119;
      v125._object = v121;
      String.append(_:)(v125);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      outlined retain of SGDataTypeStorage(v1, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
      break;
    default:
      uint64_t v126 = 0;
      if (v127) {
        uint64_t v3 = 1702195828;
      }
      else {
        uint64_t v3 = 0x65736C6166;
      }
      if (v127) {
        unint64_t v4 = 0xE400000000000000;
      }
      else {
        unint64_t v4 = 0xE500000000000000;
      }
      unint64_t v5 = v4;
      String.append(_:)(*(Swift::String *)&v3);
      swift_bridgeObjectRelease();
      break;
  }
  return v126;
}

BOOL Surface.shaderType.getter(unsigned __int8 a1)
{
  return a1 > 2u;
}

uint64_t CGColorCodingContainer.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CGColorCodingContainer.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  Swift::String v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  char v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGFloat]);
  lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGFloat] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CGColorCodingContainer.CodingKeys()
{
  if (*v0) {
    return 0x617073726F6C6F63;
  }
  else {
    return 0x6E656E6F706D6F63;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CGColorCodingContainer.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CGColorCodingContainer.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CGColorCodingContainer.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CGColorCodingContainer.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CGColorCodingContainer@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized CGColorCodingContainer.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CGColorCodingContainer(void *a1)
{
  return CGColorCodingContainer.encode(to:)(a1, *v1, v1[1], v1[2]);
}

void SGDataTypeStorage.init(type:scalar:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  specialized SGDataTypeStorage.init(type:scalar:)(a2, a1, (uint64_t)v6);

  if (!v3) {
    outlined init with take of SGDataTypeStorage((uint64_t)v6, a3);
  }
}

void SGDataTypeStorage.init(type:value:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  specialized SGDataTypeStorage.init(type:value:)(a1, a2, (uint64_t)v5);
  if (!v3) {
    outlined init with take of SGDataTypeStorage((uint64_t)v5, a3);
  }
}

ShaderGraph::SGDataTypeStorage::CodingKeys_optional __swiftcall SGDataTypeStorage.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGDataTypeStorage.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = ShaderGraph_SGDataTypeStorage_CodingKeys_value;
  }
  else {
    v4.value = ShaderGraph_SGDataTypeStorage_CodingKeys_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

ShaderGraph::SGDataTypeStorage::CodingKeys_optional __swiftcall SGDataTypeStorage.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  object = stringValue._object;
  v2._uint64_t countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGDataTypeStorage.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = ShaderGraph_SGDataTypeStorage_CodingKeys_value;
  }
  else {
    v4.value = ShaderGraph_SGDataTypeStorage_CodingKeys_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

ShaderGraph::SGDataTypeStorage::CodingKeys_optional __swiftcall SGDataTypeStorage.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (ShaderGraph::SGDataTypeStorage::CodingKeys_optional)2;
}

uint64_t SGDataTypeStorage.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t SGDataTypeStorage.CodingKeys.rawValue.getter(char a1)
{
  if (a1) {
    return 0x65756C6176;
  }
  else {
    return 1701869940;
  }
}

uint64_t SGDataTypeStorage.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x65756C6176;
  }
  else {
    return 1701869940;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SGDataTypeStorage.CodingKeys(unsigned char *a1, unsigned char *a2)
{
  BOOL v2 = *a1 == 0;
  if (*a1) {
    uint64_t v3 = 0x65756C6176;
  }
  else {
    uint64_t v3 = 1701869940;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (*a2) {
    uint64_t v5 = 0x65756C6176;
  }
  else {
    uint64_t v5 = 1701869940;
  }
  if (*a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SGDataTypeStorage.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SGDataTypeStorage.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SGDataTypeStorage.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SGDataTypeStorage.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGDataTypeStorage.CodingKeys.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SGDataTypeStorage.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1701869940;
  if (*v1) {
    uint64_t v2 = 0x65756C6176;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SGDataTypeStorage.CodingKeys()
{
  if (*v0) {
    return 0x65756C6176;
  }
  else {
    return 1701869940;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SGDataTypeStorage.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGDataTypeStorage.CodingKeys.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SGDataTypeStorage.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SGDataTypeStorage.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SGDataTypeStorage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized SGDataTypeStorage.init(from:)(a1, (uint64_t)v5);
  if (!v2) {
    return outlined init with take of SGDataTypeStorage((uint64_t)v5, a2);
  }
  return result;
}

uint64_t SGDataTypeStorage.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  outlined init with take of SGDataTypeStorage(v3, (uint64_t)&v46);
  Swift::Int v5 = v46;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SGDataTypeStorage.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of SGDataTypeStorage(v3, (uint64_t)&v47);
  switch(v51)
  {
    case 1:
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v2)
      {
        LOBYTE(v44) = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    case 2:
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v2)
      {
        LOBYTE(v44) = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    case 3:
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v2)
      {
        LOBYTE(v44) = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    case 4:
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v2)
      {
        LOBYTE(v44) = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    case 5:
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v2)
      {
        LOBYTE(v44) = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    case 6:
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v2)
      {
        LOBYTE(v44) = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    case 7:
      uint64_t v11 = v47;
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v2) {
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      *(void *)&long long v44 = v11;
      char v52 = 1;
      uint64_t v12 = &demangling cache variable for type metadata for SIMD2<Float>;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
      char v13 = &lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>;
      goto LABEL_34;
    case 8:
      long long v43 = v47;
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v2) {
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      long long v44 = v43;
      char v52 = 1;
      uint64_t v12 = &demangling cache variable for type metadata for SIMD3<Float>;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      char v13 = &lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>;
      goto LABEL_34;
    case 9:
      long long v43 = v47;
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v2) {
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      long long v44 = v43;
      char v52 = 1;
      uint64_t v12 = &demangling cache variable for type metadata for SIMD4<Float>;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Float>);
      char v13 = &lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>;
      goto LABEL_34;
    case 10:
      WORD2(v10) = WORD1(v47);
      LOWORD(v10) = v47;
      long long v43 = v10;
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v2) {
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      WORD1(v44) = WORD2(v43);
      LOWORD(v44) = v43;
      char v52 = 1;
      uint64_t v12 = &demangling cache variable for type metadata for SIMD2<UInt16>;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<UInt16>);
      char v13 = &lazy protocol witness table cache variable for type SIMD2<UInt16> and conformance SIMD2<A>;
      goto LABEL_34;
    case 11:
      uint64_t v14 = v47;
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v2) {
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      *(void *)&long long v44 = v14;
      char v52 = 1;
      uint64_t v12 = &demangling cache variable for type metadata for SIMD3<UInt16>;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<UInt16>);
      char v13 = &lazy protocol witness table cache variable for type SIMD3<UInt16> and conformance SIMD3<A>;
      goto LABEL_34;
    case 12:
      uint64_t v15 = v47;
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v2) {
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      *(void *)&long long v44 = v15;
      char v52 = 1;
      uint64_t v12 = &demangling cache variable for type metadata for SIMD4<UInt16>;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<UInt16>);
      char v13 = &lazy protocol witness table cache variable for type SIMD4<UInt16> and conformance SIMD4<A>;
      goto LABEL_34;
    case 13:
      uint64_t v16 = v47;
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v2) {
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      *(void *)&long long v44 = v16;
      char v52 = 1;
      uint64_t v12 = &demangling cache variable for type metadata for SIMD2<Int32>;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Int32>);
      char v13 = (unint64_t *)&lazy protocol witness table cache variable for type SIMD2<Int32> and conformance SIMD2<A>;
      goto LABEL_34;
    case 14:
      long long v43 = v47;
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v2) {
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      long long v44 = v43;
      char v52 = 1;
      uint64_t v12 = &demangling cache variable for type metadata for SIMD3<Int32>;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Int32>);
      char v13 = (unint64_t *)&lazy protocol witness table cache variable for type SIMD3<Int32> and conformance SIMD3<A>;
      goto LABEL_34;
    case 15:
      long long v43 = v47;
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v2) {
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      long long v44 = v43;
      char v52 = 1;
      uint64_t v12 = &demangling cache variable for type metadata for SIMD4<Int32>;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Int32>);
      char v13 = (unint64_t *)&lazy protocol witness table cache variable for type SIMD4<Int32> and conformance SIMD4<A>;
LABEL_34:
      lazy protocol witness table accessor for type [String] and conformance [A](v13, v12);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    case 16:
      long long v17 = v47;
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v2) {
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_25C418EF0;
      *(_OWORD *)(v18 + 32) = v17;
      *(void *)&long long v44 = v18;
      char v52 = 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD2<Float>]);
      lazy protocol witness table accessor for type [SIMD2<Float>] and conformance <A> [A]();
      goto LABEL_47;
    case 17:
      long long v43 = v47;
      long long v42 = v48;
      long long v41 = v49;
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v2) {
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
      Swift::String v19 = (_OWORD *)swift_allocObject();
      long long v20 = v43;
      v19[1] = xmmword_25C41B5A0;
      void v19[2] = v20;
      long long v21 = v41;
      void v19[3] = v42;
      v19[4] = v21;
      *(void *)&long long v44 = v19;
      char v52 = 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD3<Float>]);
      lazy protocol witness table accessor for type [SIMD3<Float>] and conformance <A> [A]();
      goto LABEL_47;
    case 18:
      long long v43 = v47;
      long long v42 = v48;
      long long v41 = v49;
      long long v40 = v50;
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v2) {
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Float>>);
      Swift::String v22 = (_OWORD *)swift_allocObject();
      long long v23 = v43;
      v22[1] = xmmword_25C41BFB0;
      v22[2] = v23;
      long long v24 = v41;
      v22[3] = v42;
      v22[4] = v24;
      void v22[5] = v40;
      *(void *)&long long v44 = v22;
      char v52 = 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD4<Float>]);
      lazy protocol witness table accessor for type [SIMD4<Float>] and conformance <A> [A]();
      goto LABEL_47;
    case 19:
      WORD2(v10) = WORD1(v47);
      LOWORD(v10) = v47;
      long long v43 = v10;
      WORD2(v10) = WORD3(v47);
      LOWORD(v10) = WORD2(v47);
      long long v42 = v10;
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v2) {
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<UInt16>>);
      uint64_t v25 = swift_allocObject();
      __int16 v26 = v43;
      __int16 v27 = WORD2(v43);
      *(_OWORD *)(v25 + 16) = xmmword_25C418EF0;
      *(_WORD *)(v25 + 34) = v27;
      *(_WORD *)(v25 + 32) = v26;
      __int16 v28 = v42;
      *(_WORD *)(v25 + 38) = WORD2(v42);
      *(_WORD *)(v25 + 36) = v28;
      *(void *)&long long v44 = v25;
      char v52 = 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD2<UInt16>]);
      lazy protocol witness table accessor for type [SIMD2<UInt16>] and conformance <A> [A]();
      goto LABEL_47;
    case 20:
      long long v29 = v47;
      uint64_t v30 = v48;
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v2) {
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<UInt16>>);
      uint64_t v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = xmmword_25C41B5A0;
      *(_OWORD *)(v31 + 32) = v29;
      *(void *)(v31 + 48) = v30;
      *(void *)&long long v44 = v31;
      char v52 = 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD3<UInt16>]);
      lazy protocol witness table accessor for type [SIMD3<UInt16>] and conformance <A> [A]();
      goto LABEL_47;
    case 21:
      long long v32 = v47;
      long long v33 = v48;
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v2) {
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<UInt16>>);
      Swift::String v34 = (_OWORD *)swift_allocObject();
      v34[1] = xmmword_25C41BFB0;
      v34[2] = v32;
      v34[3] = v33;
      *(void *)&long long v44 = v34;
      char v52 = 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD4<UInt16>]);
      lazy protocol witness table accessor for type [SIMD4<UInt16>] and conformance <A> [A]();
LABEL_47:
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      goto LABEL_48;
    case 22:
    case 23:
      Swift::String v36 = (CGColor *)v47;
      LOBYTE(v44) = 0;
      id v37 = v5;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v2)
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        return outlined retain of SGDataTypeStorage(v3, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
      }
      else
      {
        outlined retain of SGDataTypeStorage(v3, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
        *(void *)&long long v44 = specialized CGColorCodingContainer.init(_:)(v36);
        *((void *)&v44 + 1) = v38;
        uint64_t v45 = v39;
        char v52 = 1;
        lazy protocol witness table accessor for type CGColorCodingContainer and conformance CGColorCodingContainer();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        outlined retain of SGDataTypeStorage(v3, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
        swift_bridgeObjectRelease();
LABEL_48:
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
    default:
      LOBYTE(v44) = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v2)
      {
        LOBYTE(v44) = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance SGDataTypeStorage@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized SGDataTypeStorage.init(from:)(a1, (uint64_t)v5);
  if (!v2) {
    return outlined init with take of SGDataTypeStorage((uint64_t)v5, a2);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SGDataTypeStorage(void *a1)
{
  outlined init with take of SGDataTypeStorage(v1, (uint64_t)&v4);
  return SGDataTypeStorage.encode(to:)(a1);
}

void SGDataTypeStorage.hash(into:)()
{
  outlined init with take of SGDataTypeStorage(v0, (uint64_t)&v36);
  uint64_t v1 = v36;
  outlined init with take of SGDataTypeStorage(v0, (uint64_t)&v37);
  switch(v41)
  {
    case 1:
      Swift::UInt8 v4 = v37.n128_u8[0];
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v4);
      return;
    case 2:
      Swift::UInt32 v5 = v37.n128_u32[0];
      Swift::UInt v6 = 2;
      goto LABEL_6;
    case 3:
      Swift::UInt32 v5 = v37.n128_u32[0];
      Swift::UInt v6 = 3;
LABEL_6:
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(v5);
      return;
    case 4:
      Swift::UInt16 v7 = v37.n128_u16[0];
      Hasher._combine(_:)(4uLL);
      Hasher._combine(_:)(v7);
      return;
    case 5:
      Swift::UInt32 v8 = v37.n128_u32[0];
      Hasher._combine(_:)(5uLL);
      if ((v8 & 0x7FFFFFFF) != 0) {
        Swift::UInt32 v9 = v8;
      }
      else {
        Swift::UInt32 v9 = 0;
      }
      goto LABEL_11;
    case 6:
      Hasher._combine(_:)(6uLL);
      String.hash(into:)();
      return;
    case 7:
      unint64_t v27 = v37.n128_u64[0];
      Hasher._combine(_:)(7uLL);
      goto LABEL_29;
    case 8:
      __n128 v28 = v37;
      Hasher._combine(_:)(8uLL);
      goto LABEL_36;
    case 9:
      __n128 v29 = v37;
      Hasher._combine(_:)(9uLL);
      goto LABEL_38;
    case 10:
      WORD2(v2) = v37.n128_u16[1];
      LOWORD(v2) = v37.n128_u16[0];
      uint64_t v30 = v2;
      Hasher._combine(_:)(0xAuLL);
      goto LABEL_40;
    case 11:
      unint64_t v31 = v37.n128_u64[0];
      Hasher._combine(_:)(0xBuLL);
      goto LABEL_42;
    case 12:
      unint64_t v32 = v37.n128_u64[0];
      Hasher._combine(_:)(0xCuLL);
      goto LABEL_44;
    case 13:
      unint64_t v33 = v37.n128_u64[0];
      Hasher._combine(_:)(0xDuLL);
      Hasher._combine(_:)(v33);
      Hasher._combine(_:)(HIDWORD(v33));
      return;
    case 14:
      __n128 v34 = v37;
      Hasher._combine(_:)(0xEuLL);
      Hasher._combine(_:)(v34.n128_u32[0]);
      Hasher._combine(_:)(v34.n128_u32[1]);
      Hasher._combine(_:)(v34.n128_u32[2]);
      return;
    case 15:
      __n128 v35 = v37;
      Hasher._combine(_:)(0xFuLL);
      Hasher._combine(_:)(v35.n128_u32[0]);
      Hasher._combine(_:)(v35.n128_u32[1]);
      Hasher._combine(_:)(v35.n128_u32[2]);
      Hasher._combine(_:)(v35.n128_u32[3]);
      return;
    case 16:
      unint64_t v27 = v37.n128_u64[1];
      unint64_t v21 = v37.n128_u64[0];
      Hasher._combine(_:)(0x10uLL);
      if ((v21 & 0x7FFFFFFF) != 0) {
        Swift::UInt32 v10 = v21;
      }
      else {
        Swift::UInt32 v10 = 0;
      }
      Hasher._combine(_:)(v10);
      if ((v21 & 0x7FFFFFFF00000000) != 0) {
        Swift::UInt32 v11 = HIDWORD(v21);
      }
      else {
        Swift::UInt32 v11 = 0;
      }
      Hasher._combine(_:)(v11);
LABEL_29:
      if ((v27 & 0x7FFFFFFF) != 0) {
        Swift::UInt32 v12 = v27;
      }
      else {
        Swift::UInt32 v12 = 0;
      }
      Hasher._combine(_:)(v12);
      if ((v27 & 0x7FFFFFFF00000000) != 0) {
        Swift::UInt32 v9 = HIDWORD(v27);
      }
      else {
        Swift::UInt32 v9 = 0;
      }
LABEL_11:
      Hasher._combine(_:)(v9);
      return;
    case 17:
      __n128 v17 = v37;
      __n128 v22 = v38;
      __n128 v28 = v39;
      Hasher._combine(_:)(0x11uLL);
      specialized SIMD.hash(into:)(v17);
      specialized SIMD.hash(into:)(v22);
LABEL_36:
      specialized SIMD.hash(into:)(v28);
      return;
    case 18:
      __n128 v15 = v37;
      __n128 v18 = v38;
      __n128 v23 = v39;
      __n128 v29 = v40;
      Hasher._combine(_:)(0x12uLL);
      specialized SIMD.hash(into:)(v15);
      specialized SIMD.hash(into:)(v18);
      specialized SIMD.hash(into:)(v23);
LABEL_38:
      specialized SIMD.hash(into:)(v29);
      return;
    case 19:
      WORD2(v2) = v37.n128_u16[1];
      LOWORD(v2) = v37.n128_u16[0];
      uint64_t v24 = v2;
      WORD2(v2) = v37.n128_u16[3];
      LOWORD(v2) = v37.n128_u16[2];
      uint64_t v30 = v2;
      Hasher._combine(_:)(0x13uLL);
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(WORD2(v24));
LABEL_40:
      Hasher._combine(_:)(v30);
      Hasher._combine(_:)(WORD2(v30));
      return;
    case 20:
      unint64_t v25 = v37.n128_u64[1];
      unint64_t v19 = v37.n128_u64[0];
      unint64_t v31 = v38.n128_u64[0];
      Hasher._combine(_:)(0x14uLL);
      Hasher._combine(_:)(v19);
      Hasher._combine(_:)(WORD1(v19));
      Hasher._combine(_:)(WORD2(v19));
      Hasher._combine(_:)(v25);
      Hasher._combine(_:)(WORD1(v25));
      Hasher._combine(_:)(WORD2(v25));
LABEL_42:
      Hasher._combine(_:)(v31);
      Hasher._combine(_:)(WORD1(v31));
      Hasher._combine(_:)(WORD2(v31));
      return;
    case 21:
      unint64_t v20 = v37.n128_u64[1];
      unint64_t v16 = v37.n128_u64[0];
      unint64_t v32 = v38.n128_u64[1];
      unint64_t v26 = v38.n128_u64[0];
      Hasher._combine(_:)(0x15uLL);
      Hasher._combine(_:)(v16);
      Hasher._combine(_:)(WORD1(v16));
      Hasher._combine(_:)(WORD2(v16));
      Hasher._combine(_:)(HIWORD(v16));
      Hasher._combine(_:)(v20);
      Hasher._combine(_:)(WORD1(v20));
      Hasher._combine(_:)(WORD2(v20));
      Hasher._combine(_:)(HIWORD(v20));
      Hasher._combine(_:)(v26);
      Hasher._combine(_:)(WORD1(v26));
      Hasher._combine(_:)(WORD2(v26));
      Hasher._combine(_:)(HIWORD(v26));
LABEL_44:
      Hasher._combine(_:)(v32);
      Hasher._combine(_:)(WORD1(v32));
      Hasher._combine(_:)(WORD2(v32));
      Hasher._combine(_:)(HIWORD(v32));
      return;
    case 22:
      Swift::UInt v13 = 22;
      goto LABEL_47;
    case 23:
      Swift::UInt v13 = 23;
LABEL_47:
      Hasher._combine(_:)(v13);
      type metadata accessor for CGColorRef(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
      id v14 = v1;
      _CFObject.hash(into:)();
      outlined retain of SGDataTypeStorage(v0, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
      break;
    default:
      unsigned __int8 v3 = v37.n128_u8[0];
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v3 & 1);
      break;
  }
}

Swift::Int SGDataTypeStorage.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SGDataTypeStorage()
{
  outlined init with take of SGDataTypeStorage(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  SGDataTypeStorage.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SGDataTypeStorage()
{
  outlined init with take of SGDataTypeStorage(v0, (uint64_t)&v1);
  SGDataTypeStorage.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SGDataTypeStorage()
{
  outlined init with take of SGDataTypeStorage(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  SGDataTypeStorage.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SGDataTypeStorage(uint64_t a1, uint64_t a2)
{
  outlined init with take of SGDataTypeStorage(a1, (uint64_t)v4);
  outlined init with take of SGDataTypeStorage(a2, (uint64_t)v5);
  return specialized static SGDataTypeStorage.== infix(_:_:)((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t SGDataType.init(_:)(uint64_t a1, unint64_t a2)
{
  return specialized SGDataType.init(_:)(a1, a2);
}

void *SGDataType.init(from:)(void *a1)
{
  return specialized SGDataType.init(from:)(a1);
}

uint64_t SGDataType.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  SGDataType.stringValue.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
}

void *protocol witness for Decodable.init(from:) in conformance SGDataType@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized SGDataType.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SGDataType(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  SGDataType.stringValue.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
}

BOOL static ShaderType.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void ShaderType.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int ShaderType.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

void Surface.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int Surface.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

void specialized SIMD.hash(into:)(__n128 a1)
{
  if ((a1.n128_u32[0] & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v1 = a1.n128_u32[0];
  }
  else {
    Swift::UInt32 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((a1.n128_u32[1] & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v2 = a1.n128_u32[1];
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((a1.n128_u32[2] & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v3 = a1.n128_u32[2];
  }
  else {
    Swift::UInt32 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((a1.n128_u32[3] & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v4 = a1.n128_u32[3];
  }
  else {
    Swift::UInt32 v4 = 0;
  }
  Hasher._combine(_:)(v4);
}

{
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;

  if ((a1.n128_u32[0] & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v1 = a1.n128_u32[0];
  }
  else {
    Swift::UInt32 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((a1.n128_u32[1] & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v2 = a1.n128_u32[1];
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((a1.n128_u32[2] & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v3 = a1.n128_u32[2];
  }
  else {
    Swift::UInt32 v3 = 0;
  }
  Hasher._combine(_:)(v3);
}

uint64_t specialized static SGDataTypeStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of SGDataTypeStorage(a1, (uint64_t)&v152);
  switch(v156)
  {
    case 1:
      int v7 = v152;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 1) {
        goto LABEL_79;
      }
      int v8 = v147;
      goto LABEL_12;
    case 2:
      int v7 = v152;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 2) {
        goto LABEL_79;
      }
      goto LABEL_9;
    case 3:
      int v7 = v152;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 3) {
        goto LABEL_79;
      }
LABEL_9:
      int v8 = v147;
      goto LABEL_12;
    case 4:
      int v7 = (unsigned __int16)v152;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 4) {
        goto LABEL_79;
      }
      int v8 = (unsigned __int16)v147;
LABEL_12:
      char v6 = v7 == v8;
      return v6 & 1;
    case 5:
      float v9 = *(float *)&v152;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 5) {
        goto LABEL_79;
      }
      char v6 = v9 == *(float *)&v147;
      return v6 & 1;
    case 6:
      long long v33 = v152;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 6) {
        goto LABEL_79;
      }
      if ((void)v33 == (void)v147 && *((void *)&v33 + 1) == *((void *)&v147 + 1)) {
        goto LABEL_181;
      }
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      return v6 & 1;
    case 7:
      float32x2_t v10 = (float32x2_t)v152;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 7) {
        goto LABEL_79;
      }
      float32x2_t v11 = (float32x2_t)v147;
      goto LABEL_40;
    case 8:
      long long v103 = v152;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 8) {
        goto LABEL_79;
      }
      uint64_t v35 = 0;
      while (1)
      {
        long long v107 = v103;
        float v49 = *(float *)((unint64_t)&v107 & 0xFFFFFFFFFFFFFFF3 | (4 * (v35 & 3)));
        long long v108 = v147;
        float v50 = *(float *)((unint64_t)&v108 & 0xFFFFFFFFFFFFFFF3 | (4 * (v35 & 3)));
        BOOL v36 = v49 == v50;
        if (v35 == 2) {
          goto LABEL_137;
        }
        while (1)
        {
          ++v35;
          if (v36) {
            break;
          }
          if (v35 == 2) {
            goto LABEL_79;
          }
          BOOL v36 = 0;
        }
      }
    case 9:
      long long v99 = v152;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 9) {
        goto LABEL_79;
      }
      uint64_t v12 = 0;
      while (1)
      {
        long long v109 = v99;
        float v49 = *(float *)((unint64_t)&v109 & 0xFFFFFFFFFFFFFFF3 | (4 * (v12 & 3)));
        long long v110 = v147;
        float v50 = *(float *)((unint64_t)&v110 & 0xFFFFFFFFFFFFFFF3 | (4 * (v12 & 3)));
        BOOL v13 = v49 == v50;
        if (v12 == 3) {
          goto LABEL_137;
        }
        while (1)
        {
          ++v12;
          if (v13) {
            break;
          }
          if (v12 == 3) {
            goto LABEL_79;
          }
          BOOL v13 = 0;
        }
      }
    case 10:
      v4.i16[2] = WORD1(v152);
      v4.i16[0] = v152;
      int8x8_t v104 = v4;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 10) {
        goto LABEL_79;
      }
      v37.i32[0] = (unsigned __int16)v147;
      v37.i32[1] = WORD1(v147);
      int32x2_t v26 = vceq_s32((int32x2_t)vand_s8(v104, (int8x8_t)0xFFFF0000FFFFLL), v37);
      goto LABEL_70;
    case 11:
      uint64_t v14 = v152;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 11) {
        goto LABEL_79;
      }
      uint64_t v15 = 0;
      while (1)
      {
        uint64_t v112 = v14;
        int v51 = *(unsigned __int16 *)((unint64_t)&v112 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
        uint64_t v111 = v147;
        int v52 = *(unsigned __int16 *)((unint64_t)&v111 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
        BOOL v16 = v51 == v52;
        if (v15 == 2) {
          goto LABEL_180;
        }
        while (1)
        {
          ++v15;
          if (v16) {
            break;
          }
          if (v15 == 2) {
            goto LABEL_79;
          }
          BOOL v16 = 0;
        }
      }
    case 12:
      uint64_t v17 = v152;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 12) {
        goto LABEL_79;
      }
      uint64_t v18 = 0;
      while (1)
      {
        uint64_t v114 = v17;
        int v51 = *(unsigned __int16 *)((unint64_t)&v114 & 0xFFFFFFFFFFFFFFF9 | (2 * (v18 & 3)));
        uint64_t v113 = v147;
        int v52 = *(unsigned __int16 *)((unint64_t)&v113 & 0xFFFFFFFFFFFFFFF9 | (2 * (v18 & 3)));
        BOOL v19 = v51 == v52;
        if (v18 == 3) {
          goto LABEL_180;
        }
        while (1)
        {
          ++v18;
          if (v19) {
            break;
          }
          if (v18 == 3) {
            goto LABEL_79;
          }
          BOOL v19 = 0;
        }
      }
    case 13:
      int32x2_t v38 = (int32x2_t)v152;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 13) {
        goto LABEL_79;
      }
      int32x2_t v26 = vceq_s32(v38, *(int32x2_t *)&v147);
      goto LABEL_70;
    case 14:
      long long v100 = v152;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 14) {
        goto LABEL_79;
      }
      uint64_t v20 = 0;
      while (1)
      {
        long long v115 = v100;
        int v51 = *(_DWORD *)((unint64_t)&v115 & 0xFFFFFFFFFFFFFFF3 | (4 * (v20 & 3)));
        long long v116 = v147;
        int v52 = *(_DWORD *)((unint64_t)&v116 & 0xFFFFFFFFFFFFFFF3 | (4 * (v20 & 3)));
        BOOL v21 = v51 == v52;
        if (v20 == 2) {
          goto LABEL_180;
        }
        while (1)
        {
          ++v20;
          if (v21) {
            break;
          }
          if (v20 == 2) {
            goto LABEL_79;
          }
          BOOL v21 = 0;
        }
      }
    case 15:
      long long v101 = v152;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 15) {
        goto LABEL_79;
      }
      uint64_t v22 = 0;
      while (1)
      {
        long long v117 = v101;
        int v51 = *(_DWORD *)((unint64_t)&v117 & 0xFFFFFFFFFFFFFFF3 | (4 * (v22 & 3)));
        long long v118 = v147;
        int v52 = *(_DWORD *)((unint64_t)&v118 & 0xFFFFFFFFFFFFFFF3 | (4 * (v22 & 3)));
        BOOL v23 = v51 == v52;
        if (v22 == 3) {
          goto LABEL_180;
        }
        while (1)
        {
          ++v22;
          if (v23) {
            break;
          }
          if (v22 == 3) {
            goto LABEL_79;
          }
          BOOL v23 = 0;
        }
      }
    case 16:
      float32x2_t v10 = *(float32x2_t *)((char *)&v152 + 8);
      float32x2_t v24 = (float32x2_t)v152;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 16) {
        goto LABEL_79;
      }
      int32x2_t v25 = vceq_f32(v24, *(float32x2_t *)&v147);
      if ((v25.i32[0] & v25.i32[1] & 1) == 0) {
        goto LABEL_79;
      }
      float32x2_t v11 = *(float32x2_t *)((char *)&v147 + 8);
LABEL_40:
      int32x2_t v26 = vceq_f32(v10, v11);
      goto LABEL_70;
    case 17:
      long long v96 = v152;
      long long v102 = v153;
      long long v94 = v154;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 17) {
        goto LABEL_79;
      }
      uint64_t v27 = 0;
      while (1)
      {
        long long v123 = v96;
        float v55 = *(float *)((unint64_t)&v123 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
        long long v124 = v147;
        float v56 = *(float *)((unint64_t)&v124 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
        BOOL v28 = v55 == v56;
        if (v27 == 2) {
          break;
        }
        while (1)
        {
          ++v27;
          if (v28) {
            break;
          }
          BOOL v28 = 0;
          char v6 = 0;
          if (v27 == 2) {
            return v6 & 1;
          }
        }
      }
      if (v55 != v56) {
        goto LABEL_79;
      }
      uint64_t v53 = 0;
      while (1)
      {
        long long v121 = v102;
        float v59 = *(float *)((unint64_t)&v121 & 0xFFFFFFFFFFFFFFF3 | (4 * (v53 & 3)));
        long long v122 = v148;
        float v60 = *(float *)((unint64_t)&v122 & 0xFFFFFFFFFFFFFFF3 | (4 * (v53 & 3)));
        BOOL v54 = v59 == v60;
        if (v53 == 2) {
          break;
        }
        while (1)
        {
          ++v53;
          if (v54) {
            break;
          }
          BOOL v54 = 0;
          char v6 = 0;
          if (v53 == 2) {
            return v6 & 1;
          }
        }
      }
      if (v59 != v60) {
        goto LABEL_79;
      }
      uint64_t v57 = 0;
      while (1)
      {
        long long v119 = v94;
        float v49 = *(float *)((unint64_t)&v119 & 0xFFFFFFFFFFFFFFF3 | (4 * (v57 & 3)));
        long long v120 = v149;
        float v50 = *(float *)((unint64_t)&v120 & 0xFFFFFFFFFFFFFFF3 | (4 * (v57 & 3)));
        BOOL v58 = v49 == v50;
        if (v57 == 2) {
          goto LABEL_137;
        }
        while (1)
        {
          ++v57;
          if (v58) {
            break;
          }
          if (v57 == 2) {
            goto LABEL_79;
          }
          BOOL v58 = 0;
        }
      }
    case 18:
      long long v95 = v152;
      long long v97 = v153;
      long long v105 = v154;
      long long v93 = v155;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 18) {
        goto LABEL_79;
      }
      uint64_t v39 = 0;
      while (1)
      {
        long long v131 = v95;
        float v63 = *(float *)((unint64_t)&v131 & 0xFFFFFFFFFFFFFFF3 | (4 * (v39 & 3)));
        long long v132 = v147;
        float v64 = *(float *)((unint64_t)&v132 & 0xFFFFFFFFFFFFFFF3 | (4 * (v39 & 3)));
        BOOL v40 = v63 == v64;
        if (v39 == 3) {
          break;
        }
        while (1)
        {
          ++v39;
          if (v40) {
            break;
          }
          BOOL v40 = 0;
          char v6 = 0;
          if (v39 == 3) {
            return v6 & 1;
          }
        }
      }
      if (v63 != v64) {
        goto LABEL_79;
      }
      uint64_t v61 = 0;
      while (1)
      {
        long long v129 = v97;
        float v67 = *(float *)((unint64_t)&v129 & 0xFFFFFFFFFFFFFFF3 | (4 * (v61 & 3)));
        long long v130 = v148;
        float v68 = *(float *)((unint64_t)&v130 & 0xFFFFFFFFFFFFFFF3 | (4 * (v61 & 3)));
        BOOL v62 = v67 == v68;
        if (v61 == 3) {
          break;
        }
        while (1)
        {
          ++v61;
          if (v62) {
            break;
          }
          BOOL v62 = 0;
          char v6 = 0;
          if (v61 == 3) {
            return v6 & 1;
          }
        }
      }
      if (v67 != v68) {
        goto LABEL_79;
      }
      uint64_t v65 = 0;
      while (1)
      {
        long long v127 = v105;
        float v71 = *(float *)((unint64_t)&v127 & 0xFFFFFFFFFFFFFFF3 | (4 * (v65 & 3)));
        long long v128 = v149;
        float v72 = *(float *)((unint64_t)&v128 & 0xFFFFFFFFFFFFFFF3 | (4 * (v65 & 3)));
        BOOL v66 = v71 == v72;
        if (v65 == 3) {
          break;
        }
        while (1)
        {
          ++v65;
          if (v66) {
            break;
          }
          BOOL v66 = 0;
          char v6 = 0;
          if (v65 == 3) {
            return v6 & 1;
          }
        }
      }
      if (v71 != v72) {
        goto LABEL_79;
      }
      uint64_t v69 = 0;
      while (1)
      {
        long long v125 = v93;
        float v49 = *(float *)((unint64_t)&v125 & 0xFFFFFFFFFFFFFFF3 | (4 * (v69 & 3)));
        long long v126 = v150;
        float v50 = *(float *)((unint64_t)&v126 & 0xFFFFFFFFFFFFFFF3 | (4 * (v69 & 3)));
        BOOL v70 = v49 == v50;
        if (v69 == 3) {
          break;
        }
        while (1)
        {
          ++v69;
          if (v70) {
            break;
          }
          if (v69 == 3) {
            goto LABEL_79;
          }
          BOOL v70 = 0;
        }
      }
LABEL_137:
      if (v49 != v50) {
        goto LABEL_79;
      }
      goto LABEL_181;
    case 19:
      v4.i16[2] = WORD1(v152);
      v4.i16[0] = v152;
      int8x8_t v106 = v4;
      v4.i16[2] = WORD3(v152);
      v4.i16[0] = WORD2(v152);
      int8x8_t v98 = v4;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 19) {
        goto LABEL_79;
      }
      v41.i32[0] = (unsigned __int16)v147;
      v41.i32[1] = WORD1(v147);
      int32x2_t v42 = vceq_s32((int32x2_t)vand_s8(v106, (int8x8_t)0xFFFF0000FFFFLL), v41);
      if ((v42.i32[0] & v42.i32[1] & 1) == 0) {
        goto LABEL_79;
      }
      v43.i32[0] = WORD2(v147);
      v43.i32[1] = WORD3(v147);
      int32x2_t v26 = vceq_s32((int32x2_t)vand_s8(v98, (int8x8_t)0xFFFF0000FFFFLL), v43);
LABEL_70:
      char v6 = v26.i8[0] & v26.i8[4];
      return v6 & 1;
    case 20:
      long long v29 = v152;
      uint64_t v30 = v153;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 20) {
        goto LABEL_79;
      }
      uint64_t v31 = 0;
      while (1)
      {
        uint64_t v138 = v29;
        int v75 = *(unsigned __int16 *)((unint64_t)&v138 & 0xFFFFFFFFFFFFFFF9 | (2 * (v31 & 3)));
        uint64_t v137 = v147;
        int v76 = *(unsigned __int16 *)((unint64_t)&v137 & 0xFFFFFFFFFFFFFFF9 | (2 * (v31 & 3)));
        BOOL v32 = v75 == v76;
        if (v31 == 2) {
          break;
        }
        while (1)
        {
          ++v31;
          if (v32) {
            break;
          }
          BOOL v32 = 0;
          char v6 = 0;
          if (v31 == 2) {
            return v6 & 1;
          }
        }
      }
      if (v75 != v76) {
        goto LABEL_79;
      }
      uint64_t v73 = 0;
      while (1)
      {
        uint64_t v136 = *((void *)&v29 + 1);
        int v79 = *(unsigned __int16 *)((unint64_t)&v136 & 0xFFFFFFFFFFFFFFF9 | (2 * (v73 & 3)));
        uint64_t v135 = *((void *)&v147 + 1);
        int v80 = *(unsigned __int16 *)((unint64_t)&v135 & 0xFFFFFFFFFFFFFFF9 | (2 * (v73 & 3)));
        BOOL v74 = v79 == v80;
        if (v73 == 2) {
          break;
        }
        while (1)
        {
          ++v73;
          if (v74) {
            break;
          }
          BOOL v74 = 0;
          char v6 = 0;
          if (v73 == 2) {
            return v6 & 1;
          }
        }
      }
      if (v79 != v80) {
        goto LABEL_79;
      }
      uint64_t v77 = 0;
      while (1)
      {
        uint64_t v134 = v30;
        int v51 = *(unsigned __int16 *)((unint64_t)&v134 & 0xFFFFFFFFFFFFFFF9 | (2 * (v77 & 3)));
        uint64_t v133 = v148;
        int v52 = *(unsigned __int16 *)((unint64_t)&v133 & 0xFFFFFFFFFFFFFFF9 | (2 * (v77 & 3)));
        BOOL v78 = v51 == v52;
        if (v77 == 2) {
          goto LABEL_180;
        }
        while (1)
        {
          ++v77;
          if (v78) {
            break;
          }
          if (v77 == 2) {
            goto LABEL_79;
          }
          BOOL v78 = 0;
        }
      }
    case 21:
      long long v44 = v152;
      long long v45 = v153;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 21) {
        goto LABEL_79;
      }
      uint64_t v46 = 0;
      break;
    case 22:
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 == 22) {
        goto LABEL_78;
      }
      goto LABEL_79;
    case 23:
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151 != 23) {
        goto LABEL_79;
      }
LABEL_78:
      type metadata accessor for CGColorRef(0);
      outlined retain of SGDataTypeStorage(a1, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
      outlined retain of SGDataTypeStorage(a2, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
      char v6 = static _CFObject.== infix(_:_:)();
      outlined retain of SGDataTypeStorage(a2, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
      outlined retain of SGDataTypeStorage(a1, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
      return v6 & 1;
    default:
      char v5 = v152;
      outlined init with take of SGDataTypeStorage(a2, (uint64_t)&v147);
      if (v151) {
        goto LABEL_79;
      }
      char v6 = ((v5 & 1) == 0) ^ v147;
      return v6 & 1;
  }
  while (1)
  {
    uint64_t v146 = v44;
    int v83 = *(unsigned __int16 *)((unint64_t)&v146 & 0xFFFFFFFFFFFFFFF9 | (2 * (v46 & 3)));
    uint64_t v145 = v147;
    int v84 = *(unsigned __int16 *)((unint64_t)&v145 & 0xFFFFFFFFFFFFFFF9 | (2 * (v46 & 3)));
    BOOL v47 = v83 == v84;
    if (v46 == 3) {
      break;
    }
    while (1)
    {
      ++v46;
      if (v47) {
        break;
      }
      BOOL v47 = 0;
      char v6 = 0;
      if (v46 == 3) {
        return v6 & 1;
      }
    }
  }
  if (v83 != v84) {
    goto LABEL_79;
  }
  uint64_t v81 = 0;
  while (1)
  {
    uint64_t v144 = *((void *)&v44 + 1);
    int v87 = *(unsigned __int16 *)((unint64_t)&v144 & 0xFFFFFFFFFFFFFFF9 | (2 * (v81 & 3)));
    uint64_t v143 = *((void *)&v147 + 1);
    int v88 = *(unsigned __int16 *)((unint64_t)&v143 & 0xFFFFFFFFFFFFFFF9 | (2 * (v81 & 3)));
    BOOL v82 = v87 == v88;
    if (v81 == 3) {
      break;
    }
    while (1)
    {
      ++v81;
      if (v82) {
        break;
      }
      BOOL v82 = 0;
      char v6 = 0;
      if (v81 == 3) {
        return v6 & 1;
      }
    }
  }
  if (v87 != v88) {
    goto LABEL_79;
  }
  uint64_t v85 = 0;
  while (1)
  {
    uint64_t v142 = v45;
    int v91 = *(unsigned __int16 *)((unint64_t)&v142 & 0xFFFFFFFFFFFFFFF9 | (2 * (v85 & 3)));
    uint64_t v141 = v148;
    int v92 = *(unsigned __int16 *)((unint64_t)&v141 & 0xFFFFFFFFFFFFFFF9 | (2 * (v85 & 3)));
    BOOL v86 = v91 == v92;
    if (v85 == 3) {
      break;
    }
    while (1)
    {
      ++v85;
      if (v86) {
        break;
      }
      BOOL v86 = 0;
      char v6 = 0;
      if (v85 == 3) {
        return v6 & 1;
      }
    }
  }
  if (v91 != v92) {
    goto LABEL_79;
  }
  uint64_t v89 = 0;
  while (1)
  {
    uint64_t v140 = *((void *)&v45 + 1);
    int v51 = *(unsigned __int16 *)((unint64_t)&v140 & 0xFFFFFFFFFFFFFFF9 | (2 * (v89 & 3)));
    uint64_t v139 = *((void *)&v148 + 1);
    int v52 = *(unsigned __int16 *)((unint64_t)&v139 & 0xFFFFFFFFFFFFFFF9 | (2 * (v89 & 3)));
    BOOL v90 = v51 == v52;
    if (v89 == 3) {
      break;
    }
    while (1)
    {
      ++v89;
      if (v90) {
        break;
      }
      if (v89 == 3) {
        goto LABEL_79;
      }
      BOOL v90 = 0;
    }
  }
LABEL_180:
  if (v51 == v52) {
LABEL_181:
  }
    char v6 = 1;
  else {
LABEL_79:
  }
    char v6 = 0;
  return v6 & 1;
}

uint64_t specialized CGColorCodingContainer.init(_:)(CGColor *a1)
{
  uint64_t v3 = CGColorRef.components.getter();
  if (v3)
  {
    uint64_t v1 = v3;
    int8x8_t v4 = CGColorGetColorSpace(a1);
    if (v4)
    {
      char v5 = v4;
      char v6 = (__CFString *)CGColorSpaceCopyName(v4);

      if (v6)
      {
        static String._conditionallyBridgeFromObjectiveC(_:result:)();
      }
    }
    swift_bridgeObjectRelease();
  }
  lazy protocol witness table accessor for type APIError and conformance APIError();
  swift_allocError();
  *(void *)uint64_t v7 = a1;
  *(void *)(v7 + 8) = 0;
  *(unsigned char *)(v7 + 16) = 13;
  swift_willThrow();
  return v1;
}

uint64_t specialized Surface.init(nodeDefID:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000021 && a2 == 0x800000025C41FF20
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  if (a1 == 0xD00000000000001FLL && a2 == 0x800000025C41FF50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if (a1 == 0xD000000000000022 && a2 == 0x800000025C41FEF0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  if (a1 == 0xD000000000000021 && a2 == 0x800000025C421C20
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  if (a1 == 0xD00000000000002BLL && a2 == 0x800000025C421C50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD00000000000002FLL && a2 == 0x800000025C421C80)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0) {
      return 4;
    }
    return 3;
  }
}

uint64_t specialized CGColorCodingContainer.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656E6F706D6F63 && a2 == 0xEA00000000007374;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x617073726F6C6F63 && a2 == 0xEE00656D614E6563)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized CGColorCodingContainer.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CGColorCodingContainer.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  lazy protocol witness table accessor for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGFloat]);
    v9[7] = 0;
    lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGFloat] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v10;
    v9[6] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

id specialized SGDataTypeStorage.init(type:scalar:)@<X0>(id a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 1:
      id result = objc_msgSend(a1, sel_BOOLValue);
      char v7 = 0;
      uint64_t v6 = result;
      goto LABEL_9;
    case 2:
      id result = objc_msgSend(a1, sel_unsignedCharValue);
      uint64_t v6 = result;
      char v7 = 1;
      goto LABEL_9;
    case 3:
      id result = objc_msgSend(a1, sel_intValue);
      uint64_t v6 = result;
      char v7 = 2;
      goto LABEL_9;
    case 6:
      id result = objc_msgSend(a1, sel_unsignedIntValue);
      uint64_t v6 = result;
      char v7 = 3;
      goto LABEL_9;
    case 7:
      id result = objc_msgSend(a1, sel_unsignedShortValue);
      uint64_t v6 = result;
      char v7 = 4;
      goto LABEL_9;
    case 9:
    case 10:
      id result = objc_msgSend(a1, sel_floatValue);
      uint64_t v6 = v5;
      char v7 = 5;
LABEL_9:
      *(void *)a3 = v6;
      *(_OWORD *)(a3 + 8) = 0u;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(void *)(a3 + 56) = 0;
      *(unsigned char *)(a3 + 64) = v7;
      break;
    default:
      unint64_t v8 = SGDataType.stringValue.getter();
      uint64_t v10 = v9;
      lazy protocol witness table accessor for type APIError and conformance APIError();
      swift_allocError();
      *(void *)uint64_t v11 = v8;
      *(void *)(v11 + 8) = v10;
      *(unsigned char *)(v11 + 16) = 2;
      id result = (id)swift_willThrow();
      break;
  }
  return result;
}

void specialized SGDataTypeStorage.init(type:value:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  switch(a1)
  {
    case 14:
      toSIMDMat2fCols(_:)();
      uint64_t v6 = v3;
      if (v3) {
        goto LABEL_31;
      }
      uint64_t v59 = v11;
      uint64_t v62 = v10;

      *(void *)&long long v12 = v62;
      *((void *)&v12 + 1) = v59;
      long long v13 = 0uLL;
      char v14 = 16;
      long long v26 = 0uLL;
      long long v27 = 0uLL;
      goto LABEL_27;
    case 15:
      toSIMDMat3fCols(_:)();
      uint64_t v6 = v3;
      if (v3) {
        goto LABEL_31;
      }
      long long v60 = v16;
      long long v63 = v15;
      long long v57 = v17;

      long long v26 = v57;
      long long v13 = v60;
      long long v12 = v63;
      long long v27 = 0uLL;
      char v14 = 17;
      goto LABEL_27;
    case 17:
      toSIMDMat4fCols(_:)();
      uint64_t v6 = v3;
      if (v3) {
        goto LABEL_31;
      }
      long long v61 = v23;
      long long v64 = v22;
      long long v56 = v25;
      long long v58 = v24;

      long long v27 = v56;
      long long v26 = v58;
      long long v13 = v61;
      long long v12 = v64;
      char v14 = 18;
LABEL_27:
      *(_OWORD *)a3 = v12;
      *(_OWORD *)(a3 + 16) = v13;
      *(_OWORD *)(a3 + 32) = v26;
      *(_OWORD *)(a3 + 48) = v27;
      *(unsigned char *)(a3 + 64) = v14;
      return;
    case 18:
    case 29:
    case 44:
      NSArray.validateExactCount(_:)(4uLL);
      uint64_t v6 = v3;
      if (!v3) {
        goto LABEL_11;
      }
      goto LABEL_31;
    case 20:
    case 30:
    case 45:
      NSArray.validateExactCount(_:)(4uLL);
      uint64_t v6 = v3;
      if (!v3) {
        goto LABEL_13;
      }
      goto LABEL_31;
    case 21:
    case 49:
      NSArray.validateExactCount(_:)(2uLL);
      uint64_t v6 = v3;
      if (!v3) {
        goto LABEL_11;
      }
      goto LABEL_31;
    case 22:
    case 47:
      NSArray.validateExactCount(_:)(2uLL);
      uint64_t v6 = v3;
      if (!v3) {
        goto LABEL_13;
      }
      goto LABEL_31;
    case 24:
      NSArray.validateExactCount(_:)(2uLL);
      uint64_t v6 = v3;
      if (!v3) {
        goto LABEL_26;
      }
      goto LABEL_31;
    case 25:
    case 32:
    case 35:
    case 38:
    case 41:
    case 52:
      NSArray.validateExactCount(_:)(3uLL);
      uint64_t v6 = v3;
      if (v3) {
        goto LABEL_31;
      }
LABEL_11:
      *(void *)&long long v79 = 0;
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();
      unint64_t v7 = 0xE700000000000000;
      *(void *)&long long v65 = 0x7961727241534ELL;
      *((void *)&v65 + 1) = 0xE700000000000000;
      uint64_t v8 = 0x74616F6C465BLL;
      goto LABEL_28;
    case 26:
    case 33:
    case 36:
    case 39:
    case 42:
    case 50:
      NSArray.validateExactCount(_:)(3uLL);
      uint64_t v6 = v3;
      if (v3) {
        goto LABEL_31;
      }
LABEL_13:
      *(void *)&long long v79 = 0;
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();
      *(void *)&long long v65 = 0x7961727241534ELL;
      *((void *)&v65 + 1) = 0xE700000000000000;
      uint64_t v9 = 0x5D3631746E49555BLL;
      unint64_t v7 = 0xE800000000000000;
      goto LABEL_29;
    case 28:
      NSArray.validateExactCount(_:)(3uLL);
      uint64_t v6 = v3;
      if (!v3) {
        goto LABEL_26;
      }
      goto LABEL_31;
    case 31:
      NSArray.validateExactCount(_:)(4uLL);
      uint64_t v6 = v3;
      if (v3) {
        goto LABEL_31;
      }
LABEL_26:
      *(void *)&long long v79 = 0;
      static Array._conditionallyBridgeFromObjectiveC(_:result:)();
      unint64_t v7 = 0xE700000000000000;
      *(void *)&long long v65 = 0x7961727241534ELL;
      *((void *)&v65 + 1) = 0xE700000000000000;
      uint64_t v8 = 0x3233746E495BLL;
LABEL_28:
      uint64_t v9 = v8 & 0xFFFFFFFFFFFFLL | 0x5D000000000000;
LABEL_29:
      *(void *)&long long v66 = v9;
      *((void *)&v66 + 1) = v7;
      _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v65);
      outlined init with take of SGInternalError.ErrorType(&v65, &v79);
      lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
      long long v92 = 0uLL;
      uint64_t v6 = (void *)swift_allocError();
      long long v28 = v80;
      *long long v29 = v79;
      v29[1] = v28;
      long long v30 = v84;
      long long v32 = v81;
      long long v31 = v82;
      v29[4] = v83;
      v29[5] = v30;
      void v29[2] = v32;
      uint64_t v29[3] = v31;
      long long v33 = v88;
      long long v35 = v85;
      long long v34 = v86;
      v29[8] = v87;
      v29[9] = v33;
      v29[6] = v35;
      v29[7] = v34;
      long long v36 = v92;
      long long v38 = v89;
      long long v37 = v90;
      v29[12] = v91;
      _OWORD v29[13] = v36;
      v29[10] = v38;
      v29[11] = v37;
LABEL_30:
      swift_willThrow();
LABEL_31:
      id v93 = v6;
      id v39 = v6;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      if (swift_dynamicCast())
      {

        long long v75 = v89;
        long long v76 = v90;
        long long v77 = v91;
        long long v78 = v92;
        long long v71 = v85;
        long long v72 = v86;
        long long v73 = v87;
        long long v74 = v88;
        long long v67 = v81;
        long long v68 = v82;
        long long v69 = v83;
        long long v70 = v84;
        long long v65 = v79;
        long long v66 = v80;
        lazy protocol witness table accessor for type APIError and conformance APIError();
        uint64_t v40 = swift_allocError();
        *(_OWORD *)uint64_t v41 = xmmword_25C41A130;
        *(unsigned char *)(v41 + 16) = 21;
        lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
        int32x2_t v42 = (void *)swift_allocError();
        long long v43 = v66;
        *long long v44 = v65;
        v44[1] = v43;
        long long v45 = v70;
        long long v47 = v67;
        long long v46 = v68;
        v44[4] = v69;
        v44[5] = v45;
        v44[2] = v47;
        unint64_t v44[3] = v46;
        long long v48 = v74;
        long long v50 = v71;
        long long v49 = v72;
        v44[8] = v73;
        v44[9] = v48;
        v44[6] = v50;
        v44[7] = v49;
        long long v51 = v78;
        long long v53 = v75;
        long long v52 = v76;
        v44[12] = v77;
        v44[13] = v51;
        v44[10] = v53;
        v44[11] = v52;
        outlined retain of SGInternalError((uint64_t)&v65);
        unint64_t v54 = specialized NestedError.init(_:_:)(v40, v42);
        lazy protocol witness table accessor for type NestedError and conformance NestedError();
        swift_allocError();
        *float v55 = v54;
        swift_willThrow();

        outlined release of SGInternalError((uint64_t)&v65);
      }
      else
      {
      }
      return;
    default:
      unint64_t v18 = SGDataType.stringValue.getter();
      uint64_t v20 = v19;
      lazy protocol witness table accessor for type APIError and conformance APIError();
      uint64_t v6 = (void *)swift_allocError();
      *(void *)uint64_t v21 = v18;
      *(void *)(v21 + 8) = v20;
      *(unsigned char *)(v21 + 16) = 3;
      goto LABEL_30;
  }
}

uint64_t specialized SGDataTypeStorage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SGDataTypeStorage.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  long long v81 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v81);
  }
  uint64_t v80 = v6;
  LOBYTE(v84) = 0;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v10;
  long long v13 = v11;
  BOOL v14 = v10 == 1819242338 && v11 == (void *)0xE400000000000000;
  if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    BOOL v25 = v12 == 0x7261686375 && v13 == (void *)0xE500000000000000;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v84) = 1;
      LOBYTE(v22) = KeyedDecodingContainer.decode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      unint64_t v22 = v22;
      char v21 = 1;
      goto LABEL_11;
    }
    BOOL v26 = v12 == 7630441 && v13 == (void *)0xE300000000000000;
    if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v84) = 1;
      LODWORD(v22) = KeyedDecodingContainer.decode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      char v21 = 2;
      unint64_t v22 = v22;
      goto LABEL_11;
    }
    BOOL v27 = v12 == 1953393013 && v13 == (void *)0xE400000000000000;
    if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v84) = 1;
      LODWORD(v22) = KeyedDecodingContainer.decode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      char v21 = 3;
      unint64_t v22 = v22;
      goto LABEL_11;
    }
    BOOL v28 = v12 == 1718378856 && v13 == (void *)0xE400000000000000;
    if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v84) = 1;
      LOWORD(v22) = KeyedDecodingContainer.decode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      unint64_t v22 = (unsigned __int16)v22;
      char v21 = 4;
      goto LABEL_11;
    }
    if (v12 == 0x74616F6C66 && v13 == (void *)0xE500000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v84) = 1;
      KeyedDecodingContainer.decode(_:forKey:)();
      unsigned int v30 = v29;
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      unint64_t v22 = v30;
      char v21 = 5;
      goto LABEL_11;
    }
    if (v12 == 0x676E69727473 && v13 == (void *)0xE600000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v84) = 1;
      uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v75 = v32;
      uint64_t v76 = v31;
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      uint64_t v18 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      char v21 = 6;
      uint64_t v17 = v75;
      unint64_t v22 = v76;
      goto LABEL_11;
    }
    if (v12 == 0x6632726F74636576 && v13 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>, &demangling cache variable for type metadata for SIMD2<Float>);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      unint64_t v22 = v84;
      char v21 = 7;
      goto LABEL_11;
    }
    if (v12 == 0x6633726F74636576 && v13 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      uint64_t v18 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v17 = *((void *)&v84 + 1);
      unint64_t v22 = v84;
      char v21 = 8;
      goto LABEL_11;
    }
    if (v12 == 0x6634726F74636576 && v13 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Float>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, &demangling cache variable for type metadata for SIMD4<Float>);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      uint64_t v18 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v17 = *((void *)&v84 + 1);
      unint64_t v22 = v84;
      char v21 = 9;
      goto LABEL_11;
    }
    if (v12 == 0x6832726F74636576 && v13 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<UInt16>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD2<UInt16> and conformance SIMD2<A>, &demangling cache variable for type metadata for SIMD2<UInt16>);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      unint64_t v22 = v84;
      char v21 = 10;
      goto LABEL_11;
    }
    if (v12 == 0x6833726F74636576 && v13 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<UInt16>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD3<UInt16> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<UInt16>);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      unint64_t v22 = v84;
      char v21 = 11;
      goto LABEL_11;
    }
    if (v12 == 0x6834726F74636576 && v13 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<UInt16>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD4<UInt16> and conformance SIMD4<A>, &demangling cache variable for type metadata for SIMD4<UInt16>);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      unint64_t v22 = v84;
      char v21 = 12;
      goto LABEL_11;
    }
    if (v12 == 0x6932726F74636576 && v13 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Int32>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD2<Int32> and conformance SIMD2<A>, &demangling cache variable for type metadata for SIMD2<Int32>);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      unint64_t v22 = v84;
      char v21 = 13;
      goto LABEL_11;
    }
    if (v12 == 0x6933726F74636576 && v13 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Int32>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD3<Int32> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Int32>);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      uint64_t v18 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v17 = *((void *)&v84 + 1);
      unint64_t v22 = v84;
      char v21 = 14;
      goto LABEL_11;
    }
    if (v12 == 0x6934726F74636576 && v13 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Int32>);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD4<Int32> and conformance SIMD4<A>, &demangling cache variable for type metadata for SIMD4<Int32>);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      uint64_t v18 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v17 = *((void *)&v84 + 1);
      unint64_t v22 = v84;
      char v21 = 15;
      goto LABEL_11;
    }
    if (v12 == 0x663278697274616DLL && v13 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD2<Float>]);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [SIMD2<Float>] and conformance <A> [A]();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v33 = *(void *)(v84 + 16);
      if (v33 == 2)
      {
        unint64_t v22 = *(void *)(v84 + 32);
        uint64_t v34 = *(void *)(v84 + 40);
        swift_bridgeObjectRelease();
        long long v35 = v8;
        uint64_t v17 = v34;
        (*(void (**)(char *, uint64_t))(v80 + 8))(v35, v5);
        uint64_t v18 = 0;
        uint64_t v78 = 0;
        uint64_t v79 = 0;
        uint64_t v77 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        char v21 = 16;
        goto LABEL_11;
      }
      _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi6_((uint64_t)v83);
      *(void *)&long long v84 = 0;
      *((void *)&v84 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(61);
      long long v36 = "Incorrect number of columns for matrix2f. Expected 2, got ";
      goto LABEL_89;
    }
    if (v12 == 0x663378697274616DLL && v13 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD3<Float>]);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [SIMD3<Float>] and conformance <A> [A]();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v33 = *(void *)(v84 + 16);
      if (v33 == 3)
      {
        unint64_t v22 = *(void *)(v84 + 32);
        uint64_t v52 = *(void *)(v84 + 40);
        uint64_t v18 = *(void *)(v84 + 48);
        uint64_t v53 = *(void *)(v84 + 56);
        uint64_t v77 = *(void *)(v84 + 72);
        uint64_t v78 = *(void *)(v84 + 64);
        uint64_t v79 = v53;
        swift_bridgeObjectRelease();
        unint64_t v54 = v8;
        uint64_t v17 = v52;
        (*(void (**)(char *, uint64_t))(v80 + 8))(v54, v5);
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        char v21 = 17;
        goto LABEL_11;
      }
      _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi6_((uint64_t)v83);
      *(void *)&long long v84 = 0;
      *((void *)&v84 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(61);
      long long v36 = "Incorrect number of columns for matrix3f. Expected 3, got ";
      goto LABEL_89;
    }
    if (v12 == 0x663478697274616DLL && v13 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SIMD4<Float>]);
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type [SIMD4<Float>] and conformance <A> [A]();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v33 = *(void *)(v84 + 16);
      if (v33 == 4)
      {
        unint64_t v22 = *(void *)(v84 + 32);
        uint64_t v75 = *(void *)(v84 + 40);
        uint64_t v18 = *(void *)(v84 + 48);
        uint64_t v55 = *(void *)(v84 + 56);
        uint64_t v77 = *(void *)(v84 + 72);
        uint64_t v78 = *(void *)(v84 + 64);
        uint64_t v79 = v55;
        uint64_t v20 = *(void *)(v84 + 88);
        uint64_t v19 = *(void *)(v84 + 80);
        swift_bridgeObjectRelease();
        long long v56 = v8;
        uint64_t v17 = v75;
        (*(void (**)(char *, uint64_t))(v80 + 8))(v56, v5);
        char v21 = 18;
        goto LABEL_11;
      }
      _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi6_((uint64_t)v83);
      *(void *)&long long v84 = 0;
      *((void *)&v84 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(61);
      long long v36 = "Incorrect number of columns for matrix4f. Expected 4, got ";
LABEL_89:
      v37._object = (void *)((unint64_t)(v36 - 32) | 0x8000000000000000);
      v37._uint64_t countAndFlagsBits = 0xD00000000000003ALL;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      uint64_t v82 = v33;
      v38._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._uint64_t countAndFlagsBits = 46;
      v39._object = (void *)0xE100000000000000;
      String.append(_:)(v39);
LABEL_90:
      long long v40 = v84;
      outlined init with take of SGInternalError.ErrorType(v83, &v84);
      long long v97 = v40;
      lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
      swift_allocError();
      long long v41 = v85;
      *int32x2_t v42 = v84;
      v42[1] = v41;
      long long v43 = v89;
      long long v45 = v86;
      long long v44 = v87;
      v42[4] = v88;
      v42[5] = v43;
      int v42[2] = v45;
      v42[3] = v44;
      long long v46 = v93;
      long long v48 = v90;
      long long v47 = v91;
      v42[8] = v92;
      v42[9] = v46;
      v42[6] = v48;
      v42[7] = v47;
      long long v49 = v97;
      long long v51 = v94;
      long long v50 = v95;
      v42[12] = v96;
      v42[13] = v49;
      v42[10] = v51;
      v42[11] = v50;
LABEL_91:
      swift_willThrow();
LABEL_3:
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v81);
    }
    if (v12 == 0x33726F6C6F636763 && v13 == (void *)0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type CGColorCodingContainer and conformance CGColorCodingContainer();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v57 = *((void *)&v84 + 1);
      uint64_t v79 = v84;
      long long v58 = (void *)v85;
      uint64_t v59 = (__CFString *)MEMORY[0x261183E60](*((void *)&v84 + 1), v85);
      long long v60 = CGColorSpaceCreateWithName(v59);

      if (v60)
      {
        swift_bridgeObjectRelease();
        CGColorRef v61 = CGColorCreate(v60, (const CGFloat *)(v79 + 32));
        if (v61)
        {
          unint64_t v22 = (unint64_t)v61;
          (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);

          swift_bridgeObjectRelease();
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v78 = 0;
          uint64_t v79 = 0;
          uint64_t v77 = 0;
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          char v21 = 22;
          goto LABEL_11;
        }
        goto LABEL_117;
      }
    }
    else
    {
      if ((v12 != 0x34726F6C6F636763 || v13 != (void *)0xE800000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi3_((uint64_t)v83);
        *(void *)&long long v84 = 0;
        *((void *)&v84 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        *(void *)&long long v84 = 0xD00000000000001ALL;
        *((void *)&v84 + 1) = 0x800000025C4273B0;
        v74._uint64_t countAndFlagsBits = v12;
        v74._object = v13;
        String.append(_:)(v74);
        swift_bridgeObjectRelease();
        goto LABEL_90;
      }
      swift_bridgeObjectRelease();
      LOBYTE(v83[0]) = 1;
      lazy protocol witness table accessor for type CGColorCodingContainer and conformance CGColorCodingContainer();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v57 = *((void *)&v84 + 1);
      uint64_t v79 = v84;
      long long v58 = (void *)v85;
      uint64_t v62 = (__CFString *)MEMORY[0x261183E60](*((void *)&v84 + 1), v85);
      long long v60 = CGColorSpaceCreateWithName(v62);

      if (v60)
      {
        swift_bridgeObjectRelease();
        CGColorRef v63 = CGColorCreate(v60, (const CGFloat *)(v79 + 32));
        if (v63)
        {
          unint64_t v22 = (unint64_t)v63;
          (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);

          swift_bridgeObjectRelease();
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v78 = 0;
          uint64_t v79 = 0;
          uint64_t v77 = 0;
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          char v21 = 23;
          goto LABEL_11;
        }
LABEL_117:
        *(void *)&long long v84 = 0;
        *((void *)&v84 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(65);
        v68._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
        v68._object = (void *)0x800000025C427400;
        String.append(_:)(v68);
        v69._uint64_t countAndFlagsBits = MEMORY[0x261184160](v79, MEMORY[0x263F8EF38]);
        String.append(_:)(v69);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v70._uint64_t countAndFlagsBits = 0xD000000000000011;
        v70._object = (void *)0x800000025C427430;
        String.append(_:)(v70);
        *(void *)&v83[0] = v60;
        type metadata accessor for CGColorSpaceRef(0);
        _print_unlocked<A, B>(_:_:)();
        v71._uint64_t countAndFlagsBits = 39;
        v71._object = (void *)0xE100000000000000;
        String.append(_:)(v71);
        long long v72 = v84;
        lazy protocol witness table accessor for type APIError and conformance APIError();
        swift_allocError();
        *(_OWORD *)uint64_t v73 = v72;
        *(unsigned char *)(v73 + 16) = 14;
        swift_willThrow();

        goto LABEL_3;
      }
    }
    *(void *)&long long v84 = 0;
    *((void *)&v84 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    *(void *)&long long v84 = 0xD00000000000002ALL;
    *((void *)&v84 + 1) = 0x800000025C4273D0;
    swift_bridgeObjectRetain();
    v64._uint64_t countAndFlagsBits = v57;
    v64._object = v58;
    String.append(_:)(v64);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v65._uint64_t countAndFlagsBits = 39;
    v65._object = (void *)0xE100000000000000;
    String.append(_:)(v65);
    long long v66 = v84;
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_OWORD *)uint64_t v67 = v66;
    *(unsigned char *)(v67 + 16) = 14;
    goto LABEL_91;
  }
  swift_bridgeObjectRelease();
  LOBYTE(v84) = 1;
  char v15 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v5);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v77 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  unint64_t v22 = v15 & 1;
LABEL_11:
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v81);
  *(void *)a2 = v22;
  *(void *)(a2 + 8) = v17;
  uint64_t v23 = v79;
  *(void *)(a2 + 16) = v18;
  *(void *)(a2 + 24) = v23;
  uint64_t v24 = v77;
  *(void *)(a2 + 32) = v78;
  *(void *)(a2 + 40) = v24;
  *(void *)(a2 + 48) = v19;
  *(void *)(a2 + 56) = v20;
  *(unsigned char *)(a2 + 64) = v21;
  return result;
}

unint64_t lazy protocol witness table accessor for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGDataTypeStorage.CodingKeys and conformance SGDataTypeStorage.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGColorCodingContainer and conformance CGColorCodingContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type CGColorCodingContainer and conformance CGColorCodingContainer;
  if (!lazy protocol witness table cache variable for type CGColorCodingContainer and conformance CGColorCodingContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorCodingContainer and conformance CGColorCodingContainer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGColorCodingContainer and conformance CGColorCodingContainer;
  if (!lazy protocol witness table cache variable for type CGColorCodingContainer and conformance CGColorCodingContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorCodingContainer and conformance CGColorCodingContainer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SIMD4<UInt16>] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SIMD4<UInt16>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD4<UInt16>] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD4<UInt16>]);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD4<UInt16> and conformance SIMD4<A>, &demangling cache variable for type metadata for SIMD4<UInt16>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD4<UInt16>] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SIMD3<UInt16>] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SIMD3<UInt16>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD3<UInt16>] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD3<UInt16>]);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD3<UInt16> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<UInt16>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD3<UInt16>] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SIMD2<UInt16>] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SIMD2<UInt16>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD2<UInt16>] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD2<UInt16>]);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD2<UInt16> and conformance SIMD2<A>, &demangling cache variable for type metadata for SIMD2<UInt16>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD2<UInt16>] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SIMD4<Float>] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SIMD4<Float>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD4<Float>] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD4<Float>]);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, &demangling cache variable for type metadata for SIMD4<Float>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD4<Float>] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [SIMD4<Float>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD4<Float>] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD4<Float>]);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, &demangling cache variable for type metadata for SIMD4<Float>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD4<Float>] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SIMD3<Float>] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SIMD3<Float>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD3<Float>] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD3<Float>]);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD3<Float>] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [SIMD3<Float>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD3<Float>] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD3<Float>]);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD3<Float>] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SIMD2<Float>] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SIMD2<Float>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD2<Float>] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD2<Float>]);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>, &demangling cache variable for type metadata for SIMD2<Float>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD2<Float>] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [SIMD2<Float>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [SIMD2<Float>] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SIMD2<Float>]);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>, &demangling cache variable for type metadata for SIMD2<Float>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SIMD2<Float>] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef()
{
  unint64_t result = lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef;
  if (!lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef)
  {
    type metadata accessor for CGColorRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef);
  }
  return result;
}

uint64_t specialized SGDataType.init(_:)(uint64_t a1, unint64_t a2)
{
  BOOL v2 = a1 == 1819242338 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7261686375 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7630441 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1953393013 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 1718378856 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x74616F6C66 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x65646F63656D6974 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x676E69727473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6E656B6F74 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x7465737361 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x663278697274616DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x663378697274616DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x663478697274616DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x6674617571 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x6874617571 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x3274616F6C66 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x32666C6168 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 846491241 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0x3374616F6C66 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0x33666C6168 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 863268457 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else if (a1 == 0x3474616F6C66 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 29;
  }
  else if (a1 == 0x34666C6168 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 30;
  }
  else if (a1 == 880045673 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 31;
  }
  else if (a1 == 0x6633746E696F70 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 32;
  }
  else if (a1 == 0x6833746E696F70 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 33;
  }
  else if (a1 == 0x66336C616D726F6ELL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 35;
  }
  else if (a1 == 0x68336C616D726F6ELL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 36;
  }
  else if (a1 == 0x6633726F74636576 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 38;
  }
  else if (a1 == 0x6833726F74636576 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 39;
  }
  else if (a1 == 0x6633726F6C6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 41;
  }
  else if (a1 == 0x6833726F6C6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 42;
  }
  else if (a1 == 0x6634726F6C6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 44;
  }
  else if (a1 == 0x6834726F6C6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 45;
  }
  else if (a1 == 0x64726F6F43786574 && a2 == 0xEA00000000006832 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 47;
  }
  else if (a1 == 0x64726F6F43786574 && a2 == 0xEA00000000006632 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 49;
  }
  else if (a1 == 0x64726F6F43786574 && a2 == 0xEA00000000006833 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 50;
  }
  else if (a1 == 0x64726F6F43786574 && a2 == 0xEA00000000006633 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 52;
  }
  else if (a1 == 0x5365636166727573 && a2 == 0xED00007265646168 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 53;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000025C41FDD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
  }
         || a1 == 0x786574726576 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 54;
  }
  else if (a1 == 0x33726F6C6F436763 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 55;
  }
  else if (a1 == 0x34726F6C6F436763 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 56;
  }
  else if (a1 == 0x64696C61766E69 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)logger);
    swift_bridgeObjectRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25C27E000, v7, v8, "Unable to construct SGDataType from: %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261185880](v10, -1, -1);
      MEMORY[0x261185880](v9, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
}

void *specialized SGDataType.init(from:)(void *a1)
{
  uint64_t v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1) {
    goto LABEL_7;
  }
  __swift_project_boxed_opaque_existential_1(v13, v13[3]);
  uint64_t v4 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v6 = v5;
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized SGDataType.init(_:)(v4, (unint64_t)v6);
  if (v8)
  {
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = v4;
    v9._object = v6;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = 0x61444753206F7420;
    v10._object = (void *)0xEE00657079546174;
    String.append(_:)(v10);
    uint64_t v3 = (void *)0xD000000000000012;
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(void *)uint64_t v11 = 0xD000000000000012;
    *(void *)(v11 + 8) = 0x800000025C425400;
    *(unsigned char *)(v11 + 16) = 11;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return v3;
  }
  uint64_t v3 = (void *)v7;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v3;
}

unint64_t lazy protocol witness table accessor for type SGDataTypeStorage and conformance SGDataTypeStorage()
{
  unint64_t result = lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage;
  if (!lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage;
  if (!lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage;
  if (!lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGDataTypeStorage and conformance SGDataTypeStorage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShaderType and conformance ShaderType()
{
  unint64_t result = lazy protocol witness table cache variable for type ShaderType and conformance ShaderType;
  if (!lazy protocol witness table cache variable for type ShaderType and conformance ShaderType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderType and conformance ShaderType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Surface and conformance Surface()
{
  unint64_t result = lazy protocol witness table cache variable for type Surface and conformance Surface;
  if (!lazy protocol witness table cache variable for type Surface and conformance Surface)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Surface and conformance Surface);
  }
  return result;
}

void destroy for SGDataTypeStorage(uint64_t a1)
{
}

uint64_t initializeWithCopy for SGDataTypeStorage(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  char v11 = *(unsigned char *)(a2 + 64);
  outlined copy of SGDataTypeStorage(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for SGDataTypeStorage(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  char v11 = *(unsigned char *)(a2 + 64);
  outlined copy of SGDataTypeStorage(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v12 = *(void **)a1;
  long long v13 = *(void **)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  char v20 = *(unsigned char *)(a1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  outlined consume of SGDataTypeStorage(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

__n128 __swift_memcpy65_16(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SGDataTypeStorage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 64);
  long long v4 = *(void **)a1;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  char v12 = *(unsigned char *)(a1 + 64);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 64) = v3;
  outlined consume of SGDataTypeStorage(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for SGDataTypeStorage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xE9 && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 233);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 0x17) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SGDataTypeStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE8)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 233;
    if (a3 >= 0xE9) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xE9) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for SGDataTypeStorage(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t destructiveInjectEnumTag for SGDataTypeStorage(uint64_t result, char a2)
{
  *(unsigned char *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SGDataTypeStorage()
{
  return &type metadata for SGDataTypeStorage;
}

ValueMetadata *type metadata accessor for SGDataTypeStorage.CodingKeys()
{
  return &type metadata for SGDataTypeStorage.CodingKeys;
}

ValueMetadata *type metadata accessor for ShaderType()
{
  return &type metadata for ShaderType;
}

unsigned char *storeEnumTagSinglePayload for Surface(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C3C3388);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Surface()
{
  return &type metadata for Surface;
}

uint64_t destroy for CGColorCodingContainer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for CGColorCodingContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CGColorCodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for CGColorCodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for CGColorCodingContainer()
{
  return &unk_27099E4A8;
}

unint64_t lazy protocol witness table accessor for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys;
  if (!lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys;
  if (!lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys;
  if (!lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys;
  if (!lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorCodingContainer.CodingKeys and conformance CGColorCodingContainer.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CGFloat]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

double _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi3_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0x200000000000000;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  return result;
}

double _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi6_(uint64_t a1)
{
  *(void *)a1 = 3;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0x200000000000000;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  return result;
}

uint64_t outlined retain of SGInternalError(uint64_t a1)
{
  outlined copy of SGInternalError.ErrorType(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168));
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type NestedError and conformance NestedError()
{
  unint64_t result = lazy protocol witness table cache variable for type NestedError and conformance NestedError;
  if (!lazy protocol witness table cache variable for type NestedError and conformance NestedError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NestedError and conformance NestedError);
  }
  return result;
}

uint64_t outlined release of SGInternalError(uint64_t a1)
{
  outlined consume of SGInternalError.ErrorType(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 0xFC00000000000001 | 0x100000000000000;
  return result;
}

unsigned char *storeEnumTagSinglePayload for SGDataTypeStorage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C3C3B18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CGColorCodingContainer.CodingKeys()
{
  return &unk_27099E540;
}

uint64_t OrderedDictionary.init<A>(grouping:by:)(uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = specialized OrderedDictionary.init<A>(_grouping:by:)(a1, a2, a3, a4, v15, a5, a6, WitnessTable, a7);
  if (!v7) {
    a7 = v17;
  }
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  return a7;
}

uint64_t OrderedDictionary.init()()
{
  uint64_t v0 = OrderedSet.init()();
  static Array._allocateUninitialized(_:)();
  ContiguousArray.init(arrayLiteral:)();
  return v0;
}

uint64_t OrderedDictionary.init<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return OrderedDictionary.init<A>(_:uniquingKeysWith:)(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:));
}

{
  return OrderedDictionary.init<A>(_:uniquingKeysWith:)(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:));
}

uint64_t OrderedDictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return OrderedDictionary.init<A>(uniqueKeysWithValues:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))specialized OrderedDictionary.init<A>(uniqueKeysWithValues:));
}

uint64_t OrderedDictionary.init<A, B>(uniqueKeys:values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = a7;
  uint64_t v33 = a4;
  uint64_t v11 = *(void *)(a6 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  long long v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v18 = *(void (**)(char *))(v16 + 16);
  uint64_t v32 = v19;
  v18((char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = Array.init<A>(_:)();
  char v21 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v31 = a2;
  v21(v14, a2, a6);
  Array.init<A>(_:)();
  uint64_t v22 = ContiguousArray.count.getter();
  uint64_t result = ContiguousArray.count.getter();
  if (v22 == result)
  {
    uint64_t v34 = v20;
    uint64_t v24 = type metadata accessor for ContiguousArray();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v26 = OrderedSet.init<A>(_:)((uint64_t)&v34, a3, v24, v30, WitnessTable);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v27 = ContiguousArray.count.getter();
    uint64_t v28 = ContiguousArray.count.getter();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v31, a6);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v32, a5);
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    if (v27 == v28) {
      return v26;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.init<A, B>(uncheckedUniqueKeys:values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v43 = a4;
  uint64_t v44 = a2;
  uint64_t v46 = a6;
  uint64_t v42 = *(void *)(a6 - 8);
  uint64_t v41 = a9;
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v11);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v38 - v19;
  char v21 = *(void (**)(char *))(v15 + 16);
  long long v45 = v22;
  v21((char *)&v38 - v19);
  ((void (*)(char *, char *, uint64_t))v21)(v18, v20, a5);
  uint64_t v40 = a5;
  uint64_t v23 = Array.init<A>(_:)();
  uint64_t v47 = v23;
  uint64_t v24 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  uint64_t v25 = type metadata accessor for ContiguousArray();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)&v47, 0, 1, v24, v25, WitnessTable, a7);
  uint64_t v28 = ContiguousArray.count.getter();
  uint64_t v29 = 0;
  if (v28 >= 16)
  {
    swift_retain();
    uint64_t v29 = v27;
  }
  uint64_t v30 = OrderedSet.init(_uniqueElements:_:)(v23, v29);
  swift_release();
  Swift::String v39 = *(void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v31 = v40;
  v39(v20, v40);
  uint64_t v32 = v42;
  uint64_t v33 = v44;
  uint64_t v34 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v13, v44, v46);
  swift_retain();
  swift_retain();
  Array.init<A>(_:)();
  uint64_t v35 = ContiguousArray.count.getter();
  uint64_t v36 = ContiguousArray.count.getter();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
  v39(v45, v31);
  swift_release();
  uint64_t result = swift_release();
  if (v35 == v36) {
    return v30;
  }
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.init(minimumCapacity:persistent:)(Swift::Int a1, Swift::Bool a2)
{
  uint64_t v3 = OrderedSet.init(minimumCapacity:persistent:)(a1, a2);
  static Array._allocateUninitialized(_:)();
  ContiguousArray.init(arrayLiteral:)();
  type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(a1);
  return v3;
}

uint64_t OrderedDictionary.init<A>(uniqueKeysWithValues:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v59 = a1;
  uint64_t v57 = *(void *)(a3 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v67 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v53 - v14;
  uint64_t v56 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v74 = type metadata accessor for Optional();
  Swift::String v69 = *(void (***)(char *, char *, uint64_t))(v74 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v74);
  uint64_t v73 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  long long v72 = (char *)&v53 - v23;
  uint64_t v58 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v22);
  Swift::String v68 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v27 = (char *)&v53 - v26;
  uint64_t v28 = a5;
  if (type metadata accessor for Dictionary() == a4)
  {
    long long v50 = v59;
    uint64_t v51 = specialized OrderedDictionary.init<A>(_uncheckedUniqueKeysWithValues:)(v59, a2, a3, a4, v28);
    uint64_t v52 = v50;
    uint64_t v49 = v51;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v52, a4);
    return v49;
  }
  else
  {
    uint64_t v53 = v25;
    Swift::String v64 = v15;
    uint64_t v29 = OrderedSet.init()();
    uint64_t v31 = v30;
    static Array._allocateUninitialized(_:)();
    uint64_t v32 = ContiguousArray.init(arrayLiteral:)();
    uint64_t v75 = v29;
    uint64_t v76 = v31;
    long long v60 = &v77;
    uint64_t v77 = v32;
    uint64_t v33 = v59;
    Swift::String v71 = (char *)dispatch thunk of Sequence.underestimatedCount.getter();
    uint64_t v65 = a2;
    uint64_t v66 = a5;
    uint64_t v63 = a3;
    type metadata accessor for OrderedDictionary();
    OrderedDictionary.reserveCapacity(_:)((Swift::Int)v71);
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v68, v33, a4);
    Swift::String v71 = v27;
    dispatch thunk of Sequence.makeIterator()();
    uint64_t v54 = a4;
    uint64_t v34 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v69 += 4;
    uint64_t v70 = AssociatedConformanceWitness;
    Swift::String v68 = (char *)(TupleTypeMetadata2 - 8);
    CGColorRef v61 = (void (**)(char *, char *, uint64_t))(v57 + 32);
    uint64_t v62 = (void (**)(char *, char *, uint64_t))(v56 + 32);
    uint64_t v36 = (void (**)(char *, char *, uint64_t))(v57 + 16);
    Swift::String v37 = (void (**)(char *, uint64_t))(v57 + 8);
    uint64_t v38 = (void (**)(uint64_t, uint64_t))(v56 + 8);
    while (1)
    {
      Swift::String v39 = v73;
      Swift::Int v40 = (Swift::Int)v71;
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v41 = v72;
      (*v69)(v72, v39, v74);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v41, 1, TupleTypeMetadata2) == 1)
      {
        (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v54);
        (*(void (**)(Swift::Int, uint64_t))(v53 + 8))(v40, v34);
        return v75;
      }
      uint64_t v42 = TupleTypeMetadata2;
      uint64_t v43 = &v41[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v44 = v65;
      (*v62)(v18, v41, v65);
      long long v45 = v64;
      uint64_t v46 = (uint64_t)v18;
      uint64_t v47 = v63;
      (*v61)(v64, v43, v63);
      type metadata accessor for OrderedSet();
      uint64_t result = OrderedSet._append(_:)(v46);
      if ((result & 1) == 0) {
        break;
      }
      (*v36)(v67, v45, v47);
      type metadata accessor for ContiguousArray();
      ContiguousArray.append(_:)();
      (*v37)(v45, v47);
      (*v38)(v46, v44);
      uint64_t v18 = (char *)v46;
      TupleTypeMetadata2 = v42;
    }
    __break(1u);
  }
  return result;
}

uint64_t OrderedDictionary.init<A>(_uncheckedUniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return OrderedDictionary.init<A>(uniqueKeysWithValues:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))specialized OrderedDictionary.init<A>(_uncheckedUniqueKeysWithValues:));
}

uint64_t OrderedDictionary.init<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = OrderedSet.init()();
  static Array._allocateUninitialized(_:)();
  ContiguousArray.init(arrayLiteral:)();
  uint64_t v14 = type metadata accessor for OrderedDictionary();
  a9(a1, a2, a3, v14, a6, a8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
  uint64_t result = v13;
  if (v17)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t OrderedDictionary.init<A>(grouping:by:)(uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = specialized OrderedDictionary.init<A>(_grouping:by:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (!v9) {
    uint64_t v10 = v13;
  }
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
  return v10;
}

uint64_t OrderedDictionary.init<A>(_grouping:by:)(uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = specialized OrderedDictionary.init<A>(_grouping:by:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (!v9) {
    uint64_t v10 = v13;
  }
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
  return v10;
}

uint64_t closure #1 in OrderedDictionary.init<A>(_grouping:by:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v7 - v4, a2);
  return dispatch thunk of RangeReplaceableCollection.append(_:)();
}

uint64_t OrderedDictionary.init<A>(uncheckedUniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return OrderedDictionary.init<A>(uniqueKeysWithValues:)(a1, a2, a3, a4, a5, a6, specialized OrderedDictionary.init<A>(uncheckedUniqueKeysWithValues:));
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t TupleTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v25 = a1;
  uint64_t v26 = a5;
  uint64_t v23 = a2;
  uint64_t v9 = type metadata accessor for LazySequence();
  uint64_t v27 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = a3;
  uint64_t v22 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = type metadata accessor for LazyMapSequence();
  uint64_t v28 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v21 - v14;
  MEMORY[0x2611840A0](a4, a6);
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v17 = v23;
  _OWORD v16[2] = v23;
  v16[3] = v12;
  uint64_t v18 = v26;
  v16[4] = a4;
  v16[5] = v18;
  void v16[6] = a6;
  swift_getWitnessTable();
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  swift_getWitnessTable();
  uint64_t v19 = specialized OrderedDictionary.init<A>(_uncheckedUniqueKeysWithValues:)(v15, v17, v22, v13, v18);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(v25, a4);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v13);
  return v19;
}

uint64_t OrderedDictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v9 = a7();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
  return v9;
}

uint64_t closure #1 in OrderedDictionary.init<A>(uncheckedUniqueKeysWithValues:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = TupleTypeMetadata2 - 8;
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v31 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v30 = a4 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v14 = *(int *)(v9 + 56);
  uint64_t v15 = &v13[v14];
  uint64_t v29 = &v13[v14];
  uint64_t v16 = a1 + v14;
  uint64_t v25 = a1 + v14;
  uint64_t v17 = *(void *)(a2 - 8);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v27 = a1;
  v26(v13, a1, a2);
  uint64_t v18 = *(void *)(a3 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v18 + 16);
  v19(v15, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v28, v13, a2);
  uint64_t v20 = *(int *)(v9 + 56);
  uint64_t v21 = v31;
  uint64_t v22 = &v31[v20];
  v26(v31, v27, a2);
  ((void (*)(char *, uint64_t, uint64_t))v19)(v22, v25, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v30, v22, a3);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v21, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v29, a3);
}

uint64_t specialized OrderedDictionary.init<A>(_grouping:by:)(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x263F8EE78];
  uint64_t v34 = MEMORY[0x263F8EE78];
  uint64_t v31 = *(void *)(a1 + 16);
  if (!v31) {
    return 0;
  }
  uint64_t v30 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v2 = 0;
  uint64_t v3 = v1;
  while (1)
  {
    uint64_t v7 = v30 + 32 * v2;
    uint64_t v8 = *(void *)v7;
    uint64_t v9 = *(void *)(v7 + 8);
    char v10 = *(unsigned char *)(v7 + 16);
    uint64_t v11 = *(void *)(v34 + 16);
    uint64_t v33 = *(void *)(v7 + 24);
    if (v11) {
      break;
    }
LABEL_26:
    outlined copy of TextureSource();
    outlined copy of TextureSource();
    swift_retain();
    specialized OrderedSet._appendNew(_:in:)(v8, v9, v10, 0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1);
    }
    unint64_t v23 = v3[2];
    unint64_t v22 = v3[3];
    if (v23 >= v22 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
    }
    v3[2] = v23 + 1;
    uint64_t v24 = v3 + 4;
    uint64_t v25 = (void *)MEMORY[0x263F8EE78];
    v3[v23 + 4] = MEMORY[0x263F8EE78];
    outlined copy of TextureSource();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v3[v23 + 4] = v25;
    uint64_t v27 = v25;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(MEMORY[0x263F8EE78] + 16) + 1, 1, MEMORY[0x263F8EE78]);
      v24[v23] = v27;
    }
    unint64_t v29 = v27[2];
    unint64_t v28 = v27[3];
    if (v29 >= v28 >> 1)
    {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v27);
      v24[v23] = v27;
    }
    uint64_t v4 = v33;
    void v27[2] = v29 + 1;
    uint64_t v5 = &v27[4 * v29];
    v5[4] = v8;
    v5[5] = v9;
    *((unsigned char *)v5 + 48) = v10;
    unsigned int v6 = v5 + 7;
LABEL_4:
    ++v2;
    void *v6 = v4;
    outlined consume of TextureSource();
    outlined consume of TextureSource();
    swift_release();
    if (v2 == v31)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  unint64_t v12 = 0;
  uint64_t v13 = (unsigned char *)(v34 + 48);
  while ((*v13 & 1) != 0)
  {
    if (v10) {
      goto LABEL_12;
    }
LABEL_7:
    v13 += 24;
    if (v11 == ++v12) {
      goto LABEL_26;
    }
  }
  if (v10) {
    goto LABEL_7;
  }
LABEL_12:
  BOOL v14 = *((void *)v13 - 2) == v8 && *((void *)v13 - 1) == v9;
  if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_7;
  }
  outlined copy of TextureSource();
  outlined copy of TextureSource();
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = (void *)result;
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v12 < v3[2])
  {
    uint64_t v16 = v3 + 4;
    uint64_t v17 = (void *)v3[v12 + 4];
    outlined copy of TextureSource();
    swift_retain();
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    v3[v12 + 4] = v17;
    uint64_t v32 = v3;
    if ((v18 & 1) == 0)
    {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
      v16[v12] = v17;
    }
    unint64_t v20 = v17[2];
    unint64_t v19 = v17[3];
    if (v20 >= v19 >> 1)
    {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v17);
      v16[v12] = v17;
    }
    _OWORD v17[2] = v20 + 1;
    uint64_t v21 = &v17[4 * v20];
    v21[4] = v8;
    v21[5] = v9;
    *((unsigned char *)v21 + 48) = v10;
    unsigned int v6 = v21 + 7;
    uint64_t v3 = v32;
    uint64_t v4 = v33;
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedDictionary.init<A>(_grouping:by:)(uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v66 = a2;
  uint64_t v67 = a3;
  uint64_t v75 = a1;
  uint64_t v62 = *(void (***)(char *, uint64_t))(a4 - 8);
  uint64_t v70 = a9;
  MEMORY[0x270FA5388](a1);
  uint64_t v52 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v71 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v51 = (char *)&v50 - v16;
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  unint64_t v20 = (char *)&v50 - v19;
  uint64_t v21 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v18);
  Swift::String v69 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v50 - v24;
  uint64_t v64 = a7;
  uint64_t v26 = OrderedSet.init()();
  Swift::String v68 = v27;
  static Array._allocateUninitialized(_:)();
  uint64_t v63 = a5;
  uint64_t v28 = ContiguousArray.init(arrayLiteral:)();
  uint64_t v72 = v26;
  uint64_t v73 = v68;
  uint64_t v74 = v28;
  (*(void (**)(char *, uint64_t *, uint64_t))(v21 + 16))(v69, v75, a6);
  uint64_t v29 = AssociatedTypeWitness;
  uint64_t v30 = v71;
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  Swift::String v68 = v25;
  Swift::String v69 = (char *)v23;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v31 = v30 + 48;
  uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  if (v32(v20, 1, v29) == 1)
  {
LABEL_5:
    (*(void (**)(char *, char *))(v54 + 8))(v68, v69);
    return v72;
  }
  else
  {
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    uint64_t v33 = v30 + 32;
    uint64_t v60 = a6;
    CGColorRef v61 = v34;
    uint64_t v56 = (void (**)(uint64_t, uint64_t))(v62 + 1);
    uint64_t v57 = v32;
    uint64_t v62 = (void (**)(char *, uint64_t))(v33 - 24);
    uint64_t v55 = MEMORY[0x263F8EE60] + 8;
    uint64_t v35 = (uint64_t)v52;
    uint64_t v36 = v51;
    uint64_t v37 = v53;
    uint64_t v71 = v33;
    uint64_t v58 = v31;
    uint64_t v59 = v20;
    while (1)
    {
      v61(v36, v20, v29);
      uint64_t v38 = v66(v36);
      if (v37) {
        break;
      }
      uint64_t v75 = &v50;
      uint64_t v39 = MEMORY[0x270FA5388](v38);
      uint64_t v40 = v63;
      uint64_t v41 = v64;
      *(&v50 - 6) = a4;
      *(&v50 - 5) = v40;
      *(&v50 - 4) = v60;
      *(&v50 - 3) = v41;
      uint64_t v42 = v70;
      *(&v50 - 2) = v65;
      *(&v50 - 1) = v42;
      MEMORY[0x270FA5388](v39);
      *(&v50 - 8) = a4;
      *(&v50 - 7) = v43;
      *(&v50 - 6) = v45;
      *(&v50 - 5) = v44;
      *(&v50 - 4) = v46;
      *(&v50 - 3) = v47;
      *(&v50 - 2) = (uint64_t)v36;
      uint64_t v48 = type metadata accessor for OrderedDictionary();
      unint64_t v20 = v59;
      OrderedDictionary.updateValue<A>(forKey:default:with:)(v35, (void (*)(void))partial apply for implicit closure #1 in OrderedDictionary.init<A>(_grouping:by:), (uint64_t)(&v50 - 8), (void (*)(unint64_t))partial apply for closure #1 in OrderedDictionary.init<A>(_grouping:by:), (uint64_t)(&v50 - 10), v48);
      uint64_t v37 = 0;
      (*v56)(v35, a4);
      (*v62)(v36, v29);
      dispatch thunk of IteratorProtocol.next()();
      if (v57(v20, 1, v29) == 1) {
        goto LABEL_5;
      }
    }
    (*(void (**)(char *, char *))(v54 + 8))(v68, v69);
    swift_release();
    swift_release();
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))*v62)(v36, v29);
  }
}

uint64_t specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v50 = a5;
  uint64_t v48 = a1;
  uint64_t v38 = *(void *)(a3 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v47 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v38 - v10;
  uint64_t v49 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v46 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v45 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v22 = (char *)&v38 - v21;
  uint64_t v23 = OrderedSet.init()();
  uint64_t v25 = v24;
  static Array._allocateUninitialized(_:)();
  uint64_t v26 = ContiguousArray.init(arrayLiteral:)();
  uint64_t v53 = v23;
  uint64_t v54 = v25;
  uint64_t v55 = v26;
  uint64_t v27 = v48;
  Swift::Int v28 = dispatch thunk of Sequence.underestimatedCount.getter();
  type metadata accessor for OrderedDictionary();
  OrderedDictionary.reserveCapacity(_:)(v28);
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v45, v27, a4);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v48 = v22;
  uint64_t v46 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v30 = TupleTypeMetadata2;
  uint64_t v31 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v32 = *(char **)(v31 + 48);
  uint64_t v44 = v31 + 48;
  uint64_t v45 = v32;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v32)(v19, 1, TupleTypeMetadata2) == 1)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v39 + 8))(v48, AssociatedTypeWitness);
    return v53;
  }
  else
  {
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
    uint64_t v41 = &v55;
    uint64_t v42 = (void (**)(char *, char *, uint64_t))(v38 + 32);
    uint64_t v33 = (void (**)(char *, char *, uint64_t))(v38 + 16);
    uint64_t v34 = (void (**)(char *, uint64_t))(v38 + 8);
    v49 += 32;
    uint64_t v35 = (void (**)(char *, uint64_t))(v49 - 24);
    while (1)
    {
      uint64_t v36 = &v19[*(int *)(v30 + 48)];
      v43(v14, v19, v52);
      (*v42)(v11, v36, a3);
      type metadata accessor for OrderedSet();
      uint64_t result = OrderedSet._append(_:)((uint64_t)v14);
      if ((result & 1) == 0) {
        break;
      }
      (*v33)(v47, v11, a3);
      type metadata accessor for ContiguousArray();
      ContiguousArray.append(_:)();
      (*v34)(v11, a3);
      (*v35)(v14, v52);
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v45)(v19, 1, v30) == 1) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized OrderedDictionary.init<A>(_uncheckedUniqueKeysWithValues:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v61 = a5;
  uint64_t v62 = a1;
  uint64_t v47 = *(void *)(a3 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v54 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v53 = (char *)&v44 - v10;
  uint64_t v45 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v51 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v60 = type metadata accessor for Optional();
  uint64_t v57 = *(void (***)(char *, char *, uint64_t))(v60 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v60);
  uint64_t v59 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v44 - v19;
  uint64_t v58 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v56 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v46 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v24 = OrderedSet.init()();
  uint64_t v26 = v25;
  static Array._allocateUninitialized(_:)();
  uint64_t v27 = ContiguousArray.init(arrayLiteral:)();
  uint64_t v64 = v24;
  uint64_t v65 = v26;
  uint64_t v50 = &v66;
  uint64_t v66 = v27;
  Swift::Int v28 = v62;
  Swift::Int v29 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v55 = v14;
  uint64_t v52 = a3;
  type metadata accessor for OrderedDictionary();
  OrderedDictionary.reserveCapacity(_:)(v29);
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v56, v28, a4);
  uint64_t v62 = v23;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v57 += 4;
  uint64_t v58 = AssociatedConformanceWitness;
  uint64_t v56 = (char *)(TupleTypeMetadata2 - 8);
  uint64_t v48 = (void (**)(char *, char *, uint64_t))(v47 + 32);
  uint64_t v49 = (void (**)(uint64_t, char *, uint64_t))(v45 + 32);
  uint64_t v31 = (void (**)(char *, char *, uint64_t))(v47 + 16);
  uint64_t v32 = (void (**)(char *, uint64_t))(v47 + 8);
  uint64_t v33 = (void (**)(uint64_t, uint64_t))(v45 + 8);
  uint64_t v34 = (uint64_t)v51;
  uint64_t v35 = v52;
  while (1)
  {
    uint64_t v36 = v59;
    dispatch thunk of IteratorProtocol.next()();
    (*v57)(v20, v36, v60);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v20, 1, TupleTypeMetadata2) == 1)break; {
    uint64_t v37 = &v20[*(int *)(TupleTypeMetadata2 + 48)];
    }
    uint64_t v38 = TupleTypeMetadata2;
    uint64_t v39 = v55;
    (*v49)(v34, v20, v55);
    uint64_t v40 = v53;
    (*v48)(v53, v37, v35);
    uint64_t v41 = type metadata accessor for OrderedSet();
    OrderedSet._appendNew(_:)(v34, v41);
    (*v31)(v54, v40, v35);
    type metadata accessor for ContiguousArray();
    ContiguousArray.append(_:)();
    (*v32)(v40, v35);
    uint64_t v42 = v39;
    TupleTypeMetadata2 = v38;
    (*v33)(v34, v42);
  }
  (*(void (**)(char *, uint64_t))(v46 + 8))(v62, AssociatedTypeWitness);
  return v64;
}

uint64_t sub_25C3C6A9C()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in OrderedDictionary.init<A>(uncheckedUniqueKeysWithValues:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in OrderedDictionary.init<A>(uncheckedUniqueKeysWithValues:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for implicit closure #1 in OrderedDictionary.init<A>(_grouping:by:)()
{
  return dispatch thunk of RangeReplaceableCollection.init()();
}

uint64_t partial apply for closure #1 in OrderedDictionary.init<A>(_grouping:by:)(uint64_t a1)
{
  return closure #1 in OrderedDictionary.init<A>(_grouping:by:)(a1, *(void *)(v1 + 64));
}

uint64_t Input.spec.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  return v1;
}

uint64_t (*InputSpec.label.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t InputSpec.type.getter()
{
  return swift_retain();
}

uint64_t (*InputSpec.type.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OutputSpec.label.getter(uint64_t a1)
{
  return a1;
}

uint64_t OutputSpec.label.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OutputSpec.label.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OutputSpec.type.getter()
{
  return swift_retain();
}

uint64_t OutputSpec.type.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*OutputSpec.type.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t InputSpec.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unsigned int v6 = *(void (**)(uint64_t))(*(void *)a4 + 120);
  swift_retain();
  v6(a1);
  return swift_release();
}

uint64_t static InputSpec.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 == a4 && a2 == a5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a3 + 128))(a6) & 1;
  }
  else {
    return 0;
  }
}

Swift::Int InputSpec.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void (**)(unsigned char *))(*(void *)a3 + 120);
  swift_retain();
  v4(v6);
  swift_release();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InputSpec()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void (**)(unsigned char *))(*(void *)v1 + 120);
  swift_retain();
  v2(v4);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InputSpec(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void (**)(uint64_t))(*(void *)v3 + 120);
  swift_retain();
  v4(a1);
  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InputSpec()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void (**)(unsigned char *))(*(void *)v1 + 120);
  swift_retain();
  v2(v4);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InputSpec(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 128))(v3) & 1;
  }
  else {
    return 0;
  }
}

unint64_t lazy protocol witness table accessor for type InputSpec and conformance InputSpec()
{
  unint64_t result = lazy protocol witness table cache variable for type InputSpec and conformance InputSpec;
  if (!lazy protocol witness table cache variable for type InputSpec and conformance InputSpec)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputSpec and conformance InputSpec);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OutputSpec and conformance OutputSpec()
{
  unint64_t result = lazy protocol witness table cache variable for type OutputSpec and conformance OutputSpec;
  if (!lazy protocol witness table cache variable for type OutputSpec and conformance OutputSpec)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutputSpec and conformance OutputSpec);
  }
  return result;
}

ValueMetadata *type metadata accessor for InputSpec()
{
  return &type metadata for InputSpec;
}

uint64_t destroy for InputSpec()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for InputSpec(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for InputSpec(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for InputSpec(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for OutputSpec()
{
  return &type metadata for OutputSpec;
}

id toSIMDMat2fCols(_:)()
{
  id result = NSArray.validateExactCount(_:)(2uLL);
  if (!v0)
  {
    *(void *)&v16[0] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(void *)&long long v13 = 0x7961727241534ELL;
    *((void *)&v13 + 1) = 0xE700000000000000;
    uint64_t v14 = 0x5D74616F6C465B5BLL;
    unint64_t v15 = 0xE90000000000005DLL;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    long long v17 = 0uLL;
    swift_allocError();
    long long v2 = v16[1];
    _OWORD *v3 = v16[0];
    v3[1] = v2;
    long long v4 = v16[5];
    long long v6 = v16[2];
    long long v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    long long v7 = v16[9];
    long long v9 = v16[6];
    long long v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    long long v10 = v17;
    long long v12 = v16[10];
    long long v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMDMat3fCols(_:)()
{
  id result = NSArray.validateExactCount(_:)(3uLL);
  if (!v0)
  {
    *(void *)&v16[0] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(void *)&long long v13 = 0x7961727241534ELL;
    *((void *)&v13 + 1) = 0xE700000000000000;
    uint64_t v14 = 0x5D74616F6C465B5BLL;
    unint64_t v15 = 0xE90000000000005DLL;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    long long v17 = 0uLL;
    swift_allocError();
    long long v2 = v16[1];
    _OWORD *v3 = v16[0];
    v3[1] = v2;
    long long v4 = v16[5];
    long long v6 = v16[2];
    long long v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    long long v7 = v16[9];
    long long v9 = v16[6];
    long long v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    long long v10 = v17;
    long long v12 = v16[10];
    long long v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMDMat4fCols(_:)()
{
  id result = NSArray.validateExactCount(_:)(4uLL);
  if (!v0)
  {
    *(void *)&v16[0] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(void *)&long long v13 = 0x7961727241534ELL;
    *((void *)&v13 + 1) = 0xE700000000000000;
    uint64_t v14 = 0x5D74616F6C465B5BLL;
    unint64_t v15 = 0xE90000000000005DLL;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    long long v17 = 0uLL;
    swift_allocError();
    long long v2 = v16[1];
    _OWORD *v3 = v16[0];
    v3[1] = v2;
    long long v4 = v16[5];
    long long v6 = v16[2];
    long long v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    long long v7 = v16[9];
    long long v9 = v16[6];
    long long v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    long long v10 = v17;
    long long v12 = v16[10];
    long long v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD2i(_:)()
{
  id result = NSArray.validateExactCount(_:)(2uLL);
  if (!v0)
  {
    *(void *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(void *)&long long v13 = 0x7961727241534ELL;
    *((void *)&v13 + 1) = 0xE700000000000000;
    uint64_t v14 = 0x5D3233746E495BLL;
    unint64_t v15 = 0xE700000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    long long v17 = 0uLL;
    swift_allocError();
    long long v2 = v16[1];
    _OWORD *v3 = v16[0];
    v3[1] = v2;
    long long v4 = v16[5];
    long long v6 = v16[2];
    long long v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    long long v7 = v16[9];
    long long v9 = v16[6];
    long long v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    long long v10 = v17;
    long long v12 = v16[10];
    long long v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD3i(_:)()
{
  id result = NSArray.validateExactCount(_:)(3uLL);
  if (!v0)
  {
    *(void *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(void *)&long long v13 = 0x7961727241534ELL;
    *((void *)&v13 + 1) = 0xE700000000000000;
    uint64_t v14 = 0x5D3233746E495BLL;
    unint64_t v15 = 0xE700000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    long long v17 = 0uLL;
    swift_allocError();
    long long v2 = v16[1];
    _OWORD *v3 = v16[0];
    v3[1] = v2;
    long long v4 = v16[5];
    long long v6 = v16[2];
    long long v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    long long v7 = v16[9];
    long long v9 = v16[6];
    long long v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    long long v10 = v17;
    long long v12 = v16[10];
    long long v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD4i(_:)()
{
  id result = NSArray.validateExactCount(_:)(4uLL);
  if (!v0)
  {
    *(void *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(void *)&long long v13 = 0x7961727241534ELL;
    *((void *)&v13 + 1) = 0xE700000000000000;
    uint64_t v14 = 0x5D3233746E495BLL;
    unint64_t v15 = 0xE700000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    long long v17 = 0uLL;
    swift_allocError();
    long long v2 = v16[1];
    _OWORD *v3 = v16[0];
    v3[1] = v2;
    long long v4 = v16[5];
    long long v6 = v16[2];
    long long v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    long long v7 = v16[9];
    long long v9 = v16[6];
    long long v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    long long v10 = v17;
    long long v12 = v16[10];
    long long v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD4f(_:)()
{
  id result = NSArray.validateExactCount(_:)(4uLL);
  if (!v0)
  {
    *(void *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(void *)&long long v13 = 0x7961727241534ELL;
    *((void *)&v13 + 1) = 0xE700000000000000;
    uint64_t v14 = 0x5D74616F6C465BLL;
    unint64_t v15 = 0xE700000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    long long v17 = 0uLL;
    swift_allocError();
    long long v2 = v16[1];
    _OWORD *v3 = v16[0];
    v3[1] = v2;
    long long v4 = v16[5];
    long long v6 = v16[2];
    long long v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    long long v7 = v16[9];
    long long v9 = v16[6];
    long long v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    long long v10 = v17;
    long long v12 = v16[10];
    long long v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD2f(_:)()
{
  id result = NSArray.validateExactCount(_:)(2uLL);
  if (!v0)
  {
    *(void *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(void *)&long long v13 = 0x7961727241534ELL;
    *((void *)&v13 + 1) = 0xE700000000000000;
    uint64_t v14 = 0x5D74616F6C465BLL;
    unint64_t v15 = 0xE700000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    long long v17 = 0uLL;
    swift_allocError();
    long long v2 = v16[1];
    _OWORD *v3 = v16[0];
    v3[1] = v2;
    long long v4 = v16[5];
    long long v6 = v16[2];
    long long v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    long long v7 = v16[9];
    long long v9 = v16[6];
    long long v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    long long v10 = v17;
    long long v12 = v16[10];
    long long v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD2h(_:)()
{
  id result = NSArray.validateExactCount(_:)(2uLL);
  if (!v0)
  {
    *(void *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(void *)&long long v13 = 0x7961727241534ELL;
    *((void *)&v13 + 1) = 0xE700000000000000;
    uint64_t v14 = 0x5D3631746E49555BLL;
    unint64_t v15 = 0xE800000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    long long v17 = 0uLL;
    swift_allocError();
    long long v2 = v16[1];
    _OWORD *v3 = v16[0];
    v3[1] = v2;
    long long v4 = v16[5];
    long long v6 = v16[2];
    long long v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    long long v7 = v16[9];
    long long v9 = v16[6];
    long long v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    long long v10 = v17;
    long long v12 = v16[10];
    long long v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD3f(_:)()
{
  id result = NSArray.validateExactCount(_:)(3uLL);
  if (!v0)
  {
    *(void *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(void *)&long long v13 = 0x7961727241534ELL;
    *((void *)&v13 + 1) = 0xE700000000000000;
    uint64_t v14 = 0x5D74616F6C465BLL;
    unint64_t v15 = 0xE700000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    long long v17 = 0uLL;
    swift_allocError();
    long long v2 = v16[1];
    _OWORD *v3 = v16[0];
    v3[1] = v2;
    long long v4 = v16[5];
    long long v6 = v16[2];
    long long v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    long long v7 = v16[9];
    long long v9 = v16[6];
    long long v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    long long v10 = v17;
    long long v12 = v16[10];
    long long v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD3h(_:)()
{
  id result = NSArray.validateExactCount(_:)(3uLL);
  if (!v0)
  {
    *(void *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(void *)&long long v13 = 0x7961727241534ELL;
    *((void *)&v13 + 1) = 0xE700000000000000;
    uint64_t v14 = 0x5D3631746E49555BLL;
    unint64_t v15 = 0xE800000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    long long v17 = 0uLL;
    swift_allocError();
    long long v2 = v16[1];
    _OWORD *v3 = v16[0];
    v3[1] = v2;
    long long v4 = v16[5];
    long long v6 = v16[2];
    long long v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    long long v7 = v16[9];
    long long v9 = v16[6];
    long long v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    long long v10 = v17;
    long long v12 = v16[10];
    long long v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id toSIMD4h(_:)()
{
  id result = NSArray.validateExactCount(_:)(4uLL);
  if (!v0)
  {
    *(void *)&v16[0] = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
    *(void *)&long long v13 = 0x7961727241534ELL;
    *((void *)&v13 + 1) = 0xE700000000000000;
    uint64_t v14 = 0x5D3631746E49555BLL;
    unint64_t v15 = 0xE800000000000000;
    _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi1_((uint64_t)&v13);
    outlined init with take of SGInternalError.ErrorType(&v13, v16);
    lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
    long long v17 = 0uLL;
    swift_allocError();
    long long v2 = v16[1];
    _OWORD *v3 = v16[0];
    v3[1] = v2;
    long long v4 = v16[5];
    long long v6 = v16[2];
    long long v5 = v16[3];
    v3[4] = v16[4];
    v3[5] = v4;
    v3[2] = v6;
    v3[3] = v5;
    long long v7 = v16[9];
    long long v9 = v16[6];
    long long v8 = v16[7];
    v3[8] = v16[8];
    v3[9] = v7;
    v3[6] = v9;
    v3[7] = v8;
    long long v10 = v17;
    long long v12 = v16[10];
    long long v11 = v16[11];
    v3[12] = v16[12];
    v3[13] = v10;
    v3[10] = v12;
    v3[11] = v11;
    return (id)swift_willThrow();
  }
  return result;
}

id NSArray.validateExactCount(_:)(unint64_t a1)
{
  long long v2 = v1;
  id result = objc_msgSend(v2, sel_count);
  if (result != (id)a1)
  {
    if ((a1 & 0x8000000000000000) != 0
      || (unint64_t v5 = (unint64_t)objc_msgSend(v2, sel_count), (v5 & 0x8000000000000000) != 0))
    {
      id result = (id)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      *(void *)&v17[0] = a1;
      *((void *)&v17[0] + 1) = v5;
      _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi2_((uint64_t)v17);
      outlined init with take of SGInternalError.ErrorType(v17, v18);
      lazy protocol witness table accessor for type SGInternalError and conformance SGInternalError();
      long long v19 = 0uLL;
      swift_allocError();
      long long v6 = v18[1];
      *long long v7 = v18[0];
      v7[1] = v6;
      long long v8 = v18[5];
      long long v10 = v18[2];
      long long v9 = v18[3];
      v7[4] = v18[4];
      v7[5] = v8;
      void v7[2] = v10;
      _OWORD v7[3] = v9;
      long long v11 = v18[9];
      long long v13 = v18[6];
      long long v12 = v18[7];
      v7[8] = v18[8];
      v7[9] = v11;
      v7[6] = v13;
      v7[7] = v12;
      long long v14 = v19;
      long long v16 = v18[10];
      long long v15 = v18[11];
      v7[12] = v18[12];
      v7[13] = v14;
      v7[10] = v16;
      v7[11] = v15;
      return (id)swift_willThrow();
    }
  }
  return result;
}

uint64_t _s11ShaderGraph15SGInternalErrorV0D4TypeOWOi2_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 0xFC00000000000001 | 0x180000000000000;
  return result;
}

uint64_t specialized SIMD.init<A>(_:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 2;
    if ((unint64_t)(v1 - 1) < 2) {
      uint64_t v3 = v1 - 1;
    }
    uint64_t v4 = 0;
    do
    {
      if ((unint64_t)(v1 - 1) > 1)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_DWORD *)(result + 32 + 4 * v2);
      uint64_t v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v2 & 1))) = v5;
      uint64_t v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  long long v4;
  int v5;
  long long v6;

  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 3;
    if ((unint64_t)(v1 - 1) < 3) {
      uint64_t v3 = v1 - 1;
    }
    uint64_t v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_DWORD *)(result + 32 + 4 * v2);
      uint64_t v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      uint64_t v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  long long v4;
  int v5;
  long long v6;

  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 4;
    if ((unint64_t)(v1 - 1) < 4) {
      uint64_t v3 = v1 - 1;
    }
    uint64_t v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 3)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_DWORD *)(result + 32 + 4 * v2);
      uint64_t v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      uint64_t v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 3) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  long long v4;
  int v5;
  long long v6;

  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 3;
    if ((unint64_t)(v1 - 1) < 3) {
      uint64_t v3 = v1 - 1;
    }
    uint64_t v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_DWORD *)(result + 32 + 4 * v2);
      uint64_t v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      uint64_t v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  long long v4;
  int v5;
  long long v6;

  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 4;
    if ((unint64_t)(v1 - 1) < 4) {
      uint64_t v3 = v1 - 1;
    }
    uint64_t v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 3)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_DWORD *)(result + 32 + 4 * v2);
      uint64_t v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      uint64_t v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 3) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 2;
    if ((unint64_t)(v1 - 1) < 2) {
      uint64_t v3 = v1 - 1;
    }
    uint64_t v4 = 0;
    do
    {
      if ((unint64_t)(v1 - 1) > 1)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_DWORD *)(result + 32 + 4 * v2);
      uint64_t v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v2 & 1))) = v5;
      uint64_t v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;

  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 2;
    if ((unint64_t)(v1 - 1) < 2) {
      uint64_t v3 = v1 - 1;
    }
    uint64_t v4 = 0;
    do
    {
      if ((unint64_t)(v1 - 1) > 1)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(unsigned __int16 *)(result + 32 + 2 * v2);
      long long v7 = v4;
      *(_DWORD *)((unint64_t)&v7 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v2 & 1))) = v5;
      uint64_t v4 = v7;
      ++v2;
    }
    while (v1 != v2);
    if (!v3) {
      goto LABEL_10;
    }
    HIWORD(v6) = WORD2(v7);
    LOWORD(v6) = v7;
    return v6;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 3;
    if ((unint64_t)(v1 - 1) < 3) {
      uint64_t v3 = v1 - 1;
    }
    uint64_t v4 = 0;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_WORD *)(result + 32 + 2 * v2);
      uint64_t v6 = v4;
      *(_WORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF9 | (2 * (v2 & 3))) = v5;
      uint64_t v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 4;
    if ((unint64_t)(v1 - 1) < 4) {
      uint64_t v3 = v1 - 1;
    }
    uint64_t v4 = 0;
    do
    {
      if ((unint64_t)(v1 - 1) > 3)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_WORD *)(result + 32 + 2 * v2);
      uint64_t v6 = v4;
      *(_WORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF9 | (2 * (v2 & 3))) = v5;
      uint64_t v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 3) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t specialized SIMD.init<A>(_:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3 >> 1 == a2) {
    goto LABEL_10;
  }
  if ((uint64_t)(a3 >> 1) <= a2)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v3 = 0;
  long long v4 = 0uLL;
  do
  {
    if ((a3 >> 1) + ~a2 > 2)
    {
      __break(1u);
      goto LABEL_9;
    }
    int v5 = *(_DWORD *)(result + 4 * a2 + 4 * v3);
    uint64_t v6 = v3 + 1;
    long long v7 = v4;
    *(_DWORD *)((unint64_t)&v7 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3))) = v5;
    long long v4 = v7;
    uint64_t v3 = v6;
  }
  while ((a3 >> 1) - a2 != v6);
  if ((unint64_t)(v6 - 1) < 2) {
    goto LABEL_10;
  }
  return result;
}

{
  uint64_t v3;
  long long v4;
  int v5;
  uint64_t v6;
  long long v7;

  if (a3 >> 1 == a2) {
    goto LABEL_10;
  }
  if ((uint64_t)(a3 >> 1) <= a2)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v3 = 0;
  long long v4 = 0uLL;
  do
  {
    if ((a3 >> 1) + ~a2 > 3)
    {
      __break(1u);
      goto LABEL_9;
    }
    int v5 = *(_DWORD *)(result + 4 * a2 + 4 * v3);
    uint64_t v6 = v3 + 1;
    long long v7 = v4;
    *(_DWORD *)((unint64_t)&v7 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3))) = v5;
    long long v4 = v7;
    uint64_t v3 = v6;
  }
  while ((a3 >> 1) - a2 != v6);
  if ((unint64_t)(v6 - 1) < 3) {
    goto LABEL_10;
  }
  return result;
}

uint64_t OrderedDictionary<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v44 = a8;
  uint64_t v15 = *(void *)(a6 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](a1);
  uint64_t v39 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v38 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v49 = type metadata accessor for Optional();
  uint64_t v46 = *(void (***)(char *, char *, uint64_t))(v49 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v49);
  uint64_t v48 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v35 - v23;
  Swift::UInt v25 = ContiguousArray.count.getter();
  uint64_t v40 = a1;
  Hasher._combine(_:)(v25);
  uint64_t v50 = a2;
  uint64_t v51 = a3;
  uint64_t v52 = a4;
  uint64_t v53 = 0;
  uint64_t v41 = a5;
  uint64_t v42 = a6;
  uint64_t v43 = a7;
  uint64_t v26 = type metadata accessor for OrderedDictionary.Iterator();
  v46 += 4;
  uint64_t v47 = v26;
  uint64_t v45 = TupleTypeMetadata2 - 8;
  uint64_t v36 = (void (**)(char *, char *, uint64_t))(v15 + 32);
  uint64_t v37 = (void (**)(char *, char *, uint64_t))(v35 + 32);
  uint64_t v27 = (void (**)(char *, uint64_t))(v35 + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v29 = v41;
  uint64_t v28 = v42;
  uint64_t v30 = v39;
  while (1)
  {
    uint64_t v31 = v48;
    OrderedDictionary.Iterator.next()(v47, v48);
    (*v46)(v24, v31, v49);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v24, 1, TupleTypeMetadata2) == 1)break; {
    uint64_t v32 = &v24[*(int *)(TupleTypeMetadata2 + 48)];
    }
    uint64_t v33 = v38;
    (*v37)(v38, v24, v29);
    (*v36)(v30, v32, v28);
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v30, v28);
    (*v27)(v33, v29);
  }
  swift_release();
  swift_release();
  return swift_release();
}

Swift::Int OrderedDictionary<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  Hasher.init(_seed:)();
  OrderedDictionary<>.hash(into:)((uint64_t)v15, a1, a2, a3, a4, a5, a6, a7);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> OrderedDictionary<A, B>(uint64_t *a1, uint64_t a2)
{
  return OrderedDictionary<>.hashValue.getter(*v2, v2[1], v2[2], a1[2], a1[3], a1[4], *(void *)(a2 - 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> OrderedDictionary<A, B>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return OrderedDictionary<>.hash(into:)(a1, *v3, v3[1], v3[2], a2[2], a2[3], a2[4], *(void *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> OrderedDictionary<A, B>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  Hasher.init(_seed:)();
  OrderedDictionary<>.hash(into:)((uint64_t)v7, *v3, v3[1], v3[2], a2[2], a2[3], a2[4], v5);
  return Hasher._finalize()();
}

uint64_t base witness table accessor for Equatable in <> OrderedDictionary<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t MetalFunctionNode.importPaths.getter()
{
  return MEMORY[0x263F8EE78];
}

uint64_t FunctionNodeID.description.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 25705;
}

void FunctionNodeID.hash(into:)(int a1, Swift::UInt a2)
{
}

BOOL static FunctionNodeID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

Swift::Int FunctionNodeID.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FunctionNodeID()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 25705;
}

uint64_t MetalFunctionNode.setInputs(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v8 = a1 + 32;
    uint64_t v6 = v18;
    do
    {
      outlined init with copy of MetalFunctionNode(v8, (uint64_t)v15);
      uint64_t v9 = v16;
      uint64_t v10 = v17;
      __swift_project_boxed_opaque_existential_1(v15, v16);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
        uint64_t v6 = v18;
      }
      unint64_t v13 = *(void *)(v6 + 16);
      unint64_t v12 = *(void *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v6 = v18;
      }
      *(void *)(v6 + 16) = v13 + 1;
      *(void *)(v6 + 8 * v13 + 32) = v11;
      v8 += 40;
      --v5;
    }
    while (v5);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(v6, a2, a3);
}

uint64_t MetalFunctionNode.requiredLibraryNames.getter()
{
  return MEMORY[0x263F8EE78];
}

ValueMetadata *type metadata accessor for FunctionNodeID()
{
  return &type metadata for FunctionNodeID;
}

uint64_t dispatch thunk of HasDebugLabel.debugLabel.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of HasDebugLabel.debugLabel.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of HasDebugLabel.debugLabel.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of MetalFunctionNode.importPaths.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MetalFunctionNode.resultType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MetalFunctionNode.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of MetalFunctionNode.id.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of MetalFunctionNode.id.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of MetalFunctionNode.inputs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of MetalFunctionNode.inputs.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of MetalFunctionNode.inputs.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of MetalConstExprFunctionNode.isConstExpr.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MetalConstExprFunctionNode.isConstExpr.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of MetalConstExprFunctionNode.isConstExpr.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of MetalFunctionNode((long long *)a1, (uint64_t)v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of MetalFunctionNode?(a1);
    uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v13 = *v3;
      uint64_t *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v11 = v13;
      }
      outlined init with take of MetalFunctionNode((long long *)(*(void *)(v11 + 56) + 40 * v9), (uint64_t)v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      uint64_t *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = 0;
      memset(v14, 0, sizeof(v14));
    }
    return outlined destroy of MetalFunctionNode?((uint64_t)v14);
  }
}

void specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = v3;
  outlined init with take of GeomPropDef?(a1, (uint64_t)v18);
  uint64_t v6 = v18[0];
  uint64_t v7 = v18[1];
  uint64_t v9 = v18[2];
  uint64_t v8 = v18[3];
  uint64_t v10 = v18[4];
  __int16 v11 = v19;
  uint64_t v12 = v20;
  char v13 = v21;
  outlined init with take of GeomPropDef?(a1, (uint64_t)v22);
  if (v23)
  {
    *(void *)&long long v24 = v6;
    *((void *)&v24 + 1) = v7;
    uint64_t v25 = v9;
    uint64_t v26 = v8;
    uint64_t v27 = v10;
    LOWORD(v28) = v11 & 0xFF01;
    uint64_t v29 = v12;
    char v30 = v13 & 1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v4;
    *long long v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v24, a2, a3, isUniquelyReferenced_nonNull_native);
    *long long v4 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)&v24);
    swift_bridgeObjectRelease();
    outlined consume of GeomPropDef?(v24, *((uint64_t *)&v24 + 1), v25, v26, v27, v28);
  }
}

ShaderGraph::NodeDefStore __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NodeDefStore.including(_:)(Swift::OpaquePointer a1)
{
  long long v4 = v3;
  int64_t v5 = v2;
  uint64_t v6 = v1;
  uint64_t rawValue = (uint64_t)a1._rawValue;
  if ((unint64_t)a1._rawValue >> 62)
  {
LABEL_40:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_37;
  }
  uint64_t v8 = *(void *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_33;
  }
LABEL_3:
  unint64_t v64 = rawValue & 0xC000000000000001;
  if ((rawValue & 0xC000000000000001) != 0) {
LABEL_43:
  }
    uint64_t v9 = (char *)MEMORY[0x2611848A0](0, rawValue);
  else {
    uint64_t v9 = (char *)*(id *)(rawValue + 32);
  }
  Swift::String v68 = v9;
  uint64_t v11 = *(void *)&v9[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName];
  uint64_t v10 = *(void *)&v9[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName + 8];
  if (v5[2])
  {
    swift_bridgeObjectRetain_n();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
    if (v13)
    {
      uint64_t v58 = v6;
      uint64_t v59 = v4;
      uint64_t v6 = 0;
      uint64_t v62 = v5;
      uint64_t v63 = v8 - 1;
      long long v4 = v5;
      long long v14 = v68;
      uint64_t v61 = rawValue;
      while (1)
      {
        unint64_t v15 = v5[7] + (v12 << 6);
        uint64_t v16 = *(void *)(v15 + 16);
        uint64_t v18 = *(void *)(v15 + 24);
        uint64_t v17 = *(void *)(v15 + 32);
        unsigned int v19 = *(unsigned __int8 *)(v15 + 40);
        char v65 = *(unsigned char *)(v15 + 41);
        uint64_t v66 = *(void *)(v15 + 48);
        char v67 = *(unsigned char *)(v15 + 56);
        swift_bridgeObjectRetain();
        uint64_t v70 = v16;
        swift_retain();
        uint64_t v75 = v17;
        unsigned int v71 = v19;
        outlined copy of GeomPropDef.GeomProp(v18, v17, v19);
        swift_bridgeObjectRelease_n();
        uint64_t v20 = (uint64_t *)&v14[OBJC_IVAR___SGGeometryPropertyDefinition_name];
        if (v4[2])
        {
          uint64_t v22 = *v20;
          uint64_t v21 = v20[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)(v22, v21);
          char v24 = v23;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v24)
          {
            swift_release();
            swift_bridgeObjectRelease();
            outlined consume of GeomPropDef.GeomProp(v18, v75, v71);

            goto LABEL_23;
          }
        }
        Swift::String v69 = v14;
        uint64_t v26 = *v20;
        uint64_t v25 = v20[1];
        swift_bridgeObjectRetain_n();
        swift_retain();
        outlined copy of GeomPropDef.GeomProp(v18, v75, v71);
        uint64_t rawValue = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&v73[0] = v4;
        unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
        uint64_t v29 = v4[2];
        BOOL v30 = (v27 & 1) == 0;
        uint64_t v31 = v29 + v30;
        if (__OFADD__(v29, v30)) {
          goto LABEL_39;
        }
        int64_t v5 = v27;
        if (v4[3] >= v31)
        {
          if (rawValue)
          {
            long long v4 = *(void **)&v73[0];
            if ((v27 & 1) == 0) {
              goto LABEL_20;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            long long v4 = *(void **)&v73[0];
            if ((v5 & 1) == 0) {
              goto LABEL_20;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v31, rawValue);
          unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
          if ((v5 & 1) != (v33 & 1))
          {
            uint64_t v55 = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            goto LABEL_45;
          }
          unint64_t v28 = v32;
          long long v4 = *(void **)&v73[0];
          if ((v5 & 1) == 0)
          {
LABEL_20:
            v4[(v28 >> 6) + 8] |= 1 << v28;
            uint64_t v38 = (uint64_t *)(v4[6] + 16 * v28);
            uint64_t *v38 = v26;
            v38[1] = v25;
            unint64_t v39 = v4[7] + (v28 << 6);
            *(void *)unint64_t v39 = v26;
            *(void *)(v39 + 8) = v25;
            *(void *)(v39 + 16) = v70;
            *(void *)(v39 + 24) = v18;
            uint64_t v37 = v75;
            *(void *)(v39 + 32) = v75;
            uint64_t v8 = v71;
            *(unsigned char *)(v39 + 40) = v71;
            *(unsigned char *)(v39 + 41) = v65;
            *(void *)(v39 + 48) = v66;
            *(unsigned char *)(v39 + 56) = v67;
            uint64_t v40 = v4[2];
            BOOL v41 = __OFADD__(v40, 1);
            uint64_t v42 = v40 + 1;
            if (v41)
            {
              __break(1u);
              goto LABEL_43;
            }
            v4[2] = v42;
            swift_bridgeObjectRetain();
            goto LABEL_22;
          }
        }
        uint64_t v34 = v18;
        unint64_t v35 = v4[7] + (v28 << 6);
        uint64_t v8 = *(void *)(v35 + 24);
        uint64_t v60 = *(void *)(v35 + 32);
        char v36 = *(unsigned char *)(v35 + 40);
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of GeomPropDef.GeomProp(v8, v60, v36);
        *(void *)unint64_t v35 = v26;
        *(void *)(v35 + 8) = v25;
        *(void *)(v35 + 16) = v70;
        *(void *)(v35 + 24) = v34;
        uint64_t v37 = v75;
        *(void *)(v35 + 32) = v75;
        LOBYTE(v8) = v71;
        *(unsigned char *)(v35 + 40) = v71;
        *(unsigned char *)(v35 + 41) = v65;
        *(void *)(v35 + 48) = v66;
        *(unsigned char *)(v35 + 56) = v67;
        uint64_t v18 = v34;
LABEL_22:
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of GeomPropDef.GeomProp(v18, v37, v8);

        uint64_t rawValue = v61;
        int64_t v5 = v62;
LABEL_23:
        if ((char *)v63 == v6)
        {
          int64_t v5 = v4;
          long long v4 = v59;
          uint64_t v6 = v58;
          goto LABEL_33;
        }
        if (v64) {
          uint64_t v43 = (char *)MEMORY[0x2611848A0](v6 + 1, rawValue);
        }
        else {
          uint64_t v43 = (char *)*(id *)(rawValue + 8 * (void)v6 + 40);
        }
        long long v14 = v43;
        if (__OFADD__(v6 + 1, 1))
        {
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        uint64_t v11 = *(void *)&v43[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName];
        uint64_t v10 = *(void *)&v43[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName + 8];
        if (!v5[2])
        {
          Swift::String v68 = v43;
          int64_t v5 = v4;
          goto LABEL_35;
        }
        swift_bridgeObjectRetain_n();
        unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
        ++v6;
        if ((v44 & 1) == 0)
        {
          Swift::String v68 = v14;
          swift_bridgeObjectRelease();
          int64_t v5 = v4;
          goto LABEL_36;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_35:
    swift_bridgeObjectRetain();
  }
LABEL_36:
  v72[0] = v11;
  v72[1] = v10;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi20_((uint64_t)v72);
  outlined init with take of UserGraphError.ErrorType((uint64_t)v72, (uint64_t)v73);
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  long long v74 = 0uLL;
  swift_allocError();
  *uint64_t v45 = v73[0];
  long long v46 = v73[4];
  long long v47 = v73[2];
  long long v48 = v73[1];
  v45[3] = v73[3];
  v45[4] = v46;
  v45[1] = v48;
  v45[2] = v47;
  long long v49 = v73[8];
  long long v50 = v73[6];
  long long v51 = v73[5];
  v45[7] = v73[7];
  v45[8] = v49;
  v45[5] = v51;
  v45[6] = v50;
  long long v52 = v74;
  long long v53 = v73[10];
  long long v54 = v73[9];
  v45[11] = v73[11];
  v45[12] = v52;
  v45[9] = v54;
  v45[10] = v53;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_37:
  uint64_t v55 = v6;
  uint64_t v56 = v5;
  uint64_t v57 = v4;
LABEL_45:
  result.implementations._uint64_t rawValue = v57;
  result.geomPropDefs._uint64_t rawValue = v56;
  result.nodeDefs._uint64_t rawValue = v55;
  return result;
}

uint64_t SGGeometryPropertyDefinition.name.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SGGeometryPropertyDefinition_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t static SGGeometryPropertyDefinition.create(name:mappingTo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (a4)
    {
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return v9(a1, a2, a3, a4);
    }
    lazy protocol witness table accessor for type APIError and conformance APIError();
    unint64_t v12 = (void *)swift_allocError();
    *(void *)uint64_t v11 = 0xD000000000000016;
    unint64_t v13 = 0x800000025C427560;
  }
  else
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    unint64_t v12 = (void *)swift_allocError();
    *(void *)uint64_t v11 = 1701667182;
    unint64_t v13 = 0xE400000000000000;
  }
  *(void *)(v11 + 8) = v13;
  *(unsigned char *)(v11 + 16) = 1;
  swift_willThrow();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)logger);
  os_log_type_t v15 = static os_log_type_t.error.getter();
  id v16 = v12;
  id v17 = v12;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = v15;
  if (os_log_type_enabled(v18, v15))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v25 = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    id v22 = v12;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v23 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_25C27E000, v18, v19, "%s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261185880](v21, -1, -1);
    MEMORY[0x261185880](v20, -1, -1);
  }
  else
  {
  }
  return 0;
}

uint64_t SGGeometryPropertyDefinition.referencedGeomPropName.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName);
  swift_bridgeObjectRetain();
  return v1;
}

id SGGeometryPropertyDefinition.__allocating_init(name:referencedGeomPropName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (char *)objc_allocWithZone(v4);
  uint64_t v10 = &v9[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName];
  *(void *)uint64_t v10 = a3;
  *((void *)v10 + 1) = a4;
  uint64_t v11 = &v9[OBJC_IVAR___SGGeometryPropertyDefinition_name];
  *(void *)uint64_t v11 = a1;
  *((void *)v11 + 1) = a2;
  v13.receiver = v9;
  v13.super_class = v4;
  return objc_msgSendSuper2(&v13, sel_init);
}

id SGGeometryPropertyDefinition.init(name:referencedGeomPropName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v5 = &v4[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName];
  *(void *)int64_t v5 = a3;
  *((void *)v5 + 1) = a4;
  uint64_t v6 = &v4[OBJC_IVAR___SGGeometryPropertyDefinition_name];
  *(void *)uint64_t v6 = a1;
  *((void *)v6 + 1) = a2;
  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for SGGeometryPropertyDefinition();
  return objc_msgSendSuper2(&v8, sel_init);
}

unint64_t SGGeometryPropertyDefinition.description.getter()
{
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SGGeometryPropertyDefinition_name);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___SGGeometryPropertyDefinition_name + 8);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x22203E2D2D2022;
  v4._object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName);
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName + 8);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 15906;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  return 0xD00000000000001FLL;
}

BOOL static SGGeometryPropertyDefinition.CodingKey.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void SGGeometryPropertyDefinition.CodingKey.hash(into:)(uint64_t a1, char a2)
{
}

ShaderGraph::SGGeometryPropertyDefinition::CodingKey_optional __swiftcall SGGeometryPropertyDefinition.CodingKey.init(intValue:)(Swift::Int intValue)
{
  return (ShaderGraph::SGGeometryPropertyDefinition::CodingKey_optional)2;
}

Swift::Int SGGeometryPropertyDefinition.CodingKey.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t SGGeometryPropertyDefinition.CodingKey.intValue.getter()
{
  return 0;
}

uint64_t SGGeometryPropertyDefinition.CodingKey.stringValue.getter(char a1)
{
  if (a1) {
    return 0xD000000000000016;
  }
  else {
    return 1701667182;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SGGeometryPropertyDefinition.CodingKey()
{
  if (*v0) {
    return 0xD000000000000016;
  }
  else {
    return 1701667182;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SGGeometryPropertyDefinition.CodingKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SGGeometryPropertyDefinition.CodingKey.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SGGeometryPropertyDefinition.CodingKey(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SGGeometryPropertyDefinition.CodingKey(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SGGeometryPropertyDefinition.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SGGeometryPropertyDefinition.CodingKey>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

id SGGeometryPropertyDefinition.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SGGeometryPropertyDefinition.init(from:)(a1);
}

id SGGeometryPropertyDefinition.init(from:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SGGeometryPropertyDefinition.CodingKey>);
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v23 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey();
  Swift::String v8 = v1;
  id v9 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);

    type metadata accessor for SGGeometryPropertyDefinition();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v10 = v22;
    uint64_t v11 = v23;
    char v25 = 0;
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v14 = v8;
    os_log_type_t v15 = (uint64_t *)&v8[OBJC_IVAR___SGGeometryPropertyDefinition_name];
    *os_log_type_t v15 = v12;
    v15[1] = v16;
    char v25 = 1;
    uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v19 = v18;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v6, v11);
    uint64_t v20 = (uint64_t *)&v14[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName];
    *uint64_t v20 = v17;
    v20[1] = v19;

    uint64_t v21 = (objc_class *)type metadata accessor for SGGeometryPropertyDefinition();
    v24.receiver = v14;
    v24.super_class = v21;
    id v9 = objc_msgSendSuper2(&v24, sel_init);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  return v9;
}

id SGGeometryPropertyDefinition.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SGGeometryPropertyDefinition();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SGGeometryPropertyDefinition@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 120))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SGGeometryPropertyDefinition()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **v0) + 0x70))();
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v18;
    }
    swift_bridgeObjectRelease();
    unint64_t v12 = *(void *)(v11 + 56) + (v8 << 6);
    char v13 = *(unsigned char *)(v12 + 40);
    char v14 = *(unsigned char *)(v12 + 41);
    uint64_t v15 = *(void *)(v12 + 48);
    char v16 = *(unsigned char *)(v12 + 56);
    *(void *)a3 = *(void *)v12;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(v12 + 8);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(v12 + 24);
    *(unsigned char *)(a3 + 40) = v13;
    *(unsigned char *)(a3 + 41) = v14;
    *(void *)(a3 + 48) = v15;
    *(unsigned char *)(a3 + 56) = v16;
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a3 + 41) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi20_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x5400000000000000;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of MetalFunctionNode(a3, a4[7] + 40 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = a4[6] + 56 * result;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v4 + 48) = *(void *)(a2 + 48);
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  long long v5 = a4[2];
  uint64_t v6 = __OFADD__(v5, 1);
  BOOL v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  long long v5 = (void *)(a5[6] + 16 * result);
  *long long v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

{
  void *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result) = a2;
  long long v5 = (void *)(a5[7] + 16 * result);
  *long long v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  long long v5 = (void *)(a5[6] + 16 * result);
  *long long v5 = a2;
  v5[1] = a3;
  uint64_t v6 = (_OWORD *)(a5[7] + (result << 6));
  long long v7 = a4[1];
  _OWORD *v6 = *a4;
  v6[1] = v7;
  _OWORD v6[2] = a4[2];
  *(_OWORD *)((char *)v6 + 41) = *(_OWORD *)((char *)a4 + 41);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

{
  void *v5;
  _OWORD *v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(result >> 6) + 8] |= 1 << result;
  long long v5 = (void *)(a5[6] + 16 * result);
  *long long v5 = a2;
  v5[1] = a3;
  uint64_t v6 = (_OWORD *)(a5[7] + 144 * result);
  long long v7 = a4[3];
  _OWORD v6[2] = a4[2];
  _OWORD v6[3] = v7;
  uint64_t v8 = a4[8];
  BOOL v9 = a4[6];
  v6[7] = a4[7];
  v6[8] = v8;
  uint64_t v10 = a4[5];
  v6[4] = a4[4];
  v6[5] = v10;
  v6[6] = v9;
  uint64_t v11 = a4[1];
  _OWORD *v6 = *a4;
  v6[1] = v11;
  unint64_t v12 = a5[2];
  char v13 = __OFADD__(v12, 1);
  char v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, _OWORD *a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = (_OWORD *)(a4[6] + 80 * result);
  long long v5 = a2[3];
  v4[2] = a2[2];
  _OWORD v4[3] = v5;
  v4[4] = a2[4];
  long long v6 = a2[1];
  *uint64_t v4 = *a2;
  v4[1] = v6;
  long long v7 = (_OWORD *)(a4[7] + 48 * result);
  long long v8 = a3[1];
  *long long v7 = *a3;
  v7[1] = v8;
  *(_OWORD *)((char *)v7 + 25) = *(_OWORD *)((char *)a3 + 25);
  uint64_t v9 = a4[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a4[2] = v11;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  long long v5 = (_OWORD *)(a5[6] + 80 * result);
  long long v6 = a2[3];
  v5[2] = a2[2];
  _OWORD v5[3] = v6;
  v5[4] = a2[4];
  long long v7 = a2[1];
  *long long v5 = *a2;
  v5[1] = v7;
  long long v8 = (void *)(a5[7] + 16 * result);
  *long long v8 = a3;
  v8[1] = a4;
  uint64_t v9 = a5[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a5[2] = v11;
  }
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MetalDataType?>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_retain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  long long v22[2];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FunctionNodeID, MetalFunctionNode>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 40 * v15;
    outlined init with copy of MetalFunctionNode(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)outlined init with take of MetalFunctionNode(v22, *(void *)(v4 + 56) + v18);
  }
  uint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Output, FunctionNodeID>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<ShaderGraphNode.ID, FunctionNodeID>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Input, FunctionNodeID>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [NodeDef.Implementation]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t v34;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, GeomPropDef>);
  char v33 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *char v33 = v3;
    return result;
  }
  uint64_t result = (void *)(v2 + 64);
  long long v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5) {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v5);
  }
  uint64_t v34 = v1 + 64;
  unint64_t v7 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  long long v8 = 1 << *(unsigned char *)(v1 + 32);
  int64_t v9 = -1;
  if (v8 < 64) {
    int64_t v9 = ~(-1 << v8);
  }
  uint64_t v10 = v9 & *(void *)(v1 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v13 = v12 | (v7 << 6);
      goto LABEL_12;
    }
    BOOL v30 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v11) {
      goto LABEL_26;
    }
    uint64_t v31 = *(void *)(v34 + 8 * v30);
    ++v7;
    if (!v31)
    {
      unint64_t v7 = v30 + 1;
      if (v30 + 1 >= v11) {
        goto LABEL_26;
      }
      uint64_t v31 = *(void *)(v34 + 8 * v7);
      if (!v31) {
        break;
      }
    }
LABEL_25:
    uint64_t v10 = (v31 - 1) & v31;
    int64_t v13 = __clz(__rbit64(v31)) + (v7 << 6);
LABEL_12:
    unint64_t v14 = 16 * v13;
    unint64_t v15 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v13);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = v13 << 6;
    uint64_t v19 = *(void *)(v1 + 56) + v18;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    int64_t v22 = *(void *)(v19 + 16);
    unint64_t v23 = *(void *)(v19 + 24);
    int64_t v24 = *(void *)(v19 + 32);
    char v25 = *(unsigned char *)(v19 + 40);
    uint64_t v26 = *(unsigned char *)(v19 + 41);
    uint64_t v27 = *(void *)(v19 + 48);
    LOBYTE(v19) = *(unsigned char *)(v19 + 56);
    unint64_t v28 = (void *)(*(void *)(v3 + 48) + v14);
    *unint64_t v28 = v17;
    v28[1] = v16;
    uint64_t v29 = *(void *)(v3 + 56) + v18;
    *(void *)uint64_t v29 = v20;
    *(void *)(v29 + 8) = v21;
    *(void *)(v29 + 16) = v22;
    *(void *)(v29 + 24) = v23;
    *(void *)(v29 + 32) = v24;
    *(unsigned char *)(v29 + 40) = v25;
    *(unsigned char *)(v29 + 41) = v26;
    *(void *)(v29 + 48) = v27;
    *(unsigned char *)(v29 + 56) = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t result = (void *)outlined copy of GeomPropDef.GeomProp(v23, v24, v25);
  }
  unint64_t v32 = v30 + 2;
  if (v32 >= v11) {
    goto LABEL_26;
  }
  uint64_t v31 = *(void *)(v34 + 8 * v32);
  if (v31)
  {
    unint64_t v7 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v7 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v7 >= v11) {
      goto LABEL_26;
    }
    uint64_t v31 = *(void *)(v34 + 8 * v7);
    ++v32;
    if (v31) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  void *v28;
  _OWORD *v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NodeDef>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v36 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v36 >= v13) {
      goto LABEL_26;
    }
    uint64_t v37 = *(void *)(v6 + 8 * v36);
    ++v9;
    if (!v37)
    {
      int64_t v9 = v36 + 1;
      if (v36 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v37 = *(void *)(v6 + 8 * v9);
      if (!v37) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v37 - 1) & v37;
    unint64_t v15 = __clz(__rbit64(v37)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = *(void *)(v2 + 56);
    uint64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = 144 * v15;
    unint64_t v23 = *(_OWORD *)(v17 + v21 + 16);
    int64_t v22 = *(_OWORD *)(v17 + v21 + 32);
    int64_t v24 = *(_OWORD *)(v17 + v21 + 64);
    uint64_t v42 = *(_OWORD *)(v17 + v21 + 48);
    uint64_t v43 = v24;
    char v25 = *(_OWORD *)(v17 + v21 + 128);
    uint64_t v27 = *(_OWORD *)(v17 + v21 + 80);
    uint64_t v26 = *(_OWORD *)(v17 + v21 + 96);
    long long v46 = *(_OWORD *)(v17 + v21 + 112);
    long long v47 = v25;
    char v44 = v27;
    uint64_t v45 = v26;
    unint64_t v39 = *(_OWORD *)(v17 + v21);
    uint64_t v40 = v23;
    BOOL v41 = v22;
    unint64_t v28 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v28 = v20;
    v28[1] = v19;
    uint64_t v29 = (_OWORD *)(*(void *)(v4 + 56) + v21);
    *uint64_t v29 = v39;
    BOOL v30 = v40;
    uint64_t v31 = v41;
    unint64_t v32 = v43;
    uint64_t v29[3] = v42;
    v29[4] = v32;
    v29[1] = v30;
    void v29[2] = v31;
    char v33 = v44;
    uint64_t v34 = v45;
    unint64_t v35 = v47;
    v29[7] = v46;
    v29[8] = v35;
    v29[5] = v33;
    v29[6] = v34;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)outlined retain of NodeDef((uint64_t)&v39);
  }
  uint64_t v38 = v36 + 2;
  if (v38 >= v13) {
    goto LABEL_26;
  }
  uint64_t v37 = *(void *)(v6 + 8 * v38);
  if (v37)
  {
    int64_t v9 = v38;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v37 = *(void *)(v6 + 8 * v9);
    ++v38;
    if (v37) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, (uniformPropertyName: String, type: MetalDataType)>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    int64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    char *v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    char *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  uint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    uint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ShaderGraphNode.ID>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    uint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, InputSpec>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ShaderGraphNode.ID>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  char v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  int64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<ShaderGraphNode.ID, ShaderGraphNode.ID>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Key, String>);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  long long v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t *v39;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Key, ShaderGraphNode>);
  unint64_t v39 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v39 = v3;
    return result;
  }
  uint64_t result = (void *)(v2 + 64);
  long long v5 = v1 + 64;
  uint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6) {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v6);
  }
  long long v8 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  int64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  uint64_t v11 = v10 & *(void *)(v1 + 64);
  unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      int64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    char v36 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v36 >= v12) {
      goto LABEL_26;
    }
    uint64_t v37 = *(void *)(v5 + 8 * v36);
    ++v8;
    if (!v37)
    {
      long long v8 = v36 + 1;
      if (v36 + 1 >= v12) {
        goto LABEL_26;
      }
      uint64_t v37 = *(void *)(v5 + 8 * v8);
      if (!v37) {
        break;
      }
    }
LABEL_25:
    uint64_t v11 = (v37 - 1) & v37;
    unint64_t v14 = __clz(__rbit64(v37)) + (v8 << 6);
LABEL_12:
    unint64_t v15 = 80 * v14;
    uint64_t v16 = *(void *)(v1 + 48) + 80 * v14;
    uint64_t v17 = *(void **)v16;
    uint64_t v18 = *(void **)(v16 + 8);
    uint64_t v19 = *(void *)(v16 + 16);
    uint64_t v20 = *(void *)(v16 + 24);
    uint64_t v21 = *(void *)(v16 + 32);
    int64_t v22 = *(void *)(v16 + 40);
    unint64_t v23 = *(void *)(v16 + 48);
    int64_t v24 = *(void *)(v16 + 56);
    char v25 = *(unsigned char *)(v16 + 64);
    uint64_t v26 = *(void *)(v16 + 72);
    uint64_t v27 = 48 * v14;
    unint64_t v28 = *(void *)(v1 + 56) + v27;
    uint64_t v29 = *(void *)v28;
    BOOL v30 = *(void *)(v28 + 8);
    uint64_t v31 = *(void *)(v28 + 16);
    unint64_t v32 = *(unsigned char *)(v28 + 40);
    char v33 = *(void *)(v3 + 48) + v15;
    uint64_t v34 = *(_OWORD *)(v28 + 24);
    *(void *)char v33 = v17;
    *(void *)(v33 + 8) = v18;
    *(void *)(v33 + 16) = v19;
    *(void *)(v33 + 24) = v20;
    *(void *)(v33 + 32) = v21;
    *(void *)(v33 + 40) = v22;
    *(void *)(v33 + 48) = v23;
    *(void *)(v33 + 56) = v24;
    *(unsigned char *)(v33 + 64) = v25;
    *(void *)(v33 + 72) = v26;
    unint64_t v35 = *(void *)(v3 + 56) + v27;
    *(void *)unint64_t v35 = v29;
    *(void *)(v35 + 8) = v30;
    *(void *)(v35 + 16) = v31;
    *(_OWORD *)(v35 + 24) = v34;
    *(unsigned char *)(v35 + 40) = v32;
    outlined copy of SGDataTypeStorage(v17, v18, v19, v20, v21, v22, v23, v24, v25);
    swift_retain();
    outlined copy of NodePersonality(v29);
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v38 = v36 + 2;
  if (v38 >= v12) {
    goto LABEL_26;
  }
  uint64_t v37 = *(void *)(v5 + 8 * v38);
  if (v37)
  {
    long long v8 = v38;
    goto LABEL_25;
  }
  while (1)
  {
    long long v8 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_26;
    }
    uint64_t v37 = *(void *)(v5 + 8 * v8);
    ++v38;
    if (v37) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FunctionNodeID, String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    int64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *int64_t v22 = v21;
    v22[1] = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  char v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  int64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  void *v26;
  long long v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  int64_t v33;
  uint64_t v34;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NodeDefinitionStore.GeomProp>);
  unint64_t v32 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v32 = v3;
    return result;
  }
  uint64_t result = (void *)(v2 + 64);
  long long v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5) {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v5);
  }
  uint64_t v34 = v1 + 64;
  unint64_t v7 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  long long v8 = 1 << *(unsigned char *)(v1 + 32);
  int64_t v9 = -1;
  if (v8 < 64) {
    int64_t v9 = ~(-1 << v8);
  }
  uint64_t v10 = v9 & *(void *)(v1 + 64);
  char v33 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      uint64_t v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v12 = v11 | (v7 << 6);
      goto LABEL_12;
    }
    uint64_t v29 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v33) {
      goto LABEL_26;
    }
    BOOL v30 = *(void *)(v34 + 8 * v29);
    ++v7;
    if (!v30)
    {
      unint64_t v7 = v29 + 1;
      if (v29 + 1 >= v33) {
        goto LABEL_26;
      }
      BOOL v30 = *(void *)(v34 + 8 * v7);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    uint64_t v10 = (v30 - 1) & v30;
    unint64_t v12 = __clz(__rbit64(v30)) + (v7 << 6);
LABEL_12:
    int64_t v13 = 16 * v12;
    unint64_t v14 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v12);
    unint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v12 << 6;
    uint64_t v18 = *(void *)(v1 + 56) + v17;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    uint64_t v21 = *(void *)(v18 + 32);
    int64_t v22 = *(void *)(v18 + 40);
    unint64_t v23 = *(void *)(v18 + 48);
    int64_t v24 = *(unsigned char *)(v18 + 56);
    char v25 = *(unsigned char *)(v18 + 57);
    uint64_t v26 = (void *)(*(void *)(v3 + 48) + v13);
    uint64_t v27 = *(_OWORD *)(v18 + 16);
    void *v26 = v15;
    v26[1] = v16;
    unint64_t v28 = *(void *)(v3 + 56) + v17;
    *(void *)unint64_t v28 = v19;
    *(void *)(v28 + 8) = v20;
    *(_OWORD *)(v28 + 16) = v27;
    *(void *)(v28 + 32) = v21;
    *(void *)(v28 + 40) = v22;
    *(void *)(v28 + 48) = v23;
    *(unsigned char *)(v28 + 56) = v24;
    *(unsigned char *)(v28 + 57) = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)outlined copy of GeomPropDef.GeomProp(v22, v23, v24);
  }
  uint64_t v31 = v29 + 2;
  if (v31 >= v33) {
    goto LABEL_26;
  }
  BOOL v30 = *(void *)(v34 + 8 * v31);
  if (v30)
  {
    unint64_t v7 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v7 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v7 >= v33) {
      goto LABEL_26;
    }
    BOOL v30 = *(void *)(v34 + 8 * v7);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  void *v29;
  _OWORD *v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NodeDefinitionStore.Node>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v38 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v38 >= v13) {
      goto LABEL_26;
    }
    unint64_t v39 = *(void *)(v6 + 8 * v38);
    ++v9;
    if (!v39)
    {
      int64_t v9 = v38 + 1;
      if (v38 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v39 = *(void *)(v6 + 8 * v9);
      if (!v39) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v39 - 1) & v39;
    unint64_t v15 = __clz(__rbit64(v39)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = *(void *)(v2 + 56);
    uint64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = 160 * v15;
    int64_t v22 = *(_OWORD *)(v17 + v21 + 32);
    unint64_t v23 = *(_OWORD *)(v17 + v21 + 48);
    int64_t v24 = *(_OWORD *)(v17 + v21 + 80);
    uint64_t v45 = *(_OWORD *)(v17 + v21 + 64);
    long long v46 = v24;
    char v44 = v23;
    char v25 = *(_OWORD *)(v17 + v21 + 144);
    uint64_t v27 = *(_OWORD *)(v17 + v21 + 96);
    uint64_t v26 = *(_OWORD *)(v17 + v21 + 112);
    long long v49 = *(_OWORD *)(v17 + v21 + 128);
    long long v50 = v25;
    long long v47 = v27;
    long long v48 = v26;
    unint64_t v28 = *(_OWORD *)(v17 + v21 + 16);
    BOOL v41 = *(_OWORD *)(v17 + v21);
    uint64_t v42 = v28;
    uint64_t v43 = v22;
    uint64_t v29 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v29 = v20;
    v29[1] = v19;
    BOOL v30 = (_OWORD *)(*(void *)(v4 + 56) + v21);
    uint64_t v31 = v42;
    *BOOL v30 = v41;
    v30[1] = v31;
    unint64_t v32 = v43;
    char v33 = v44;
    uint64_t v34 = v46;
    v30[4] = v45;
    void v30[5] = v34;
    v30[2] = v32;
    v30[3] = v33;
    unint64_t v35 = v47;
    char v36 = v48;
    uint64_t v37 = v50;
    v30[8] = v49;
    v30[9] = v37;
    unint64_t v30[6] = v35;
    uint64_t v30[7] = v36;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)outlined retain of NodeDefinitionStore.Node((uint64_t)&v41);
  }
  uint64_t v40 = v38 + 2;
  if (v40 >= v13) {
    goto LABEL_26;
  }
  unint64_t v39 = *(void *)(v6 + 8 * v40);
  if (v39)
  {
    int64_t v9 = v40;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v39 = *(void *)(v6 + 8 * v9);
    ++v40;
    if (v39) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:), String>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MetalDataType>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v30 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v14) {
      goto LABEL_26;
    }
    unint64_t v31 = *(void *)(v7 + 8 * v30);
    ++v10;
    if (!v31)
    {
      int64_t v10 = v30 + 1;
      if (v30 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v31 = *(void *)(v7 + 8 * v10);
      if (!v31) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v31 - 1) & v31;
    unint64_t v16 = __clz(__rbit64(v31)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = v16 << 6;
    uint64_t v18 = 8 * v16;
    unint64_t v19 = v17 - v18;
    uint64_t v20 = (uint64_t *)(*(void *)(v3 + 48) + v19);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = v20[2];
    uint64_t v24 = v20[3];
    uint64_t v25 = v20[4];
    char v26 = *((unsigned char *)v20 + 40);
    uint64_t v27 = v20[6];
    uint64_t v28 = *(void *)(*(void *)(v3 + 56) + v18);
    unint64_t v29 = *(void *)(v5 + 48) + v19;
    *(void *)unint64_t v29 = v22;
    *(void *)(v29 + 8) = v21;
    *(void *)(v29 + 16) = v23;
    *(void *)(v29 + 24) = v24;
    *(void *)(v29 + 32) = v25;
    *(unsigned char *)(v29 + 40) = v26;
    *(void *)(v29 + 48) = v27;
    *(void *)(*(void *)(v5 + 56) + v18) = v28;
    swift_retain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v32 = v30 + 2;
  if (v32 >= v14) {
    goto LABEL_26;
  }
  unint64_t v31 = *(void *)(v7 + 8 * v32);
  if (v31)
  {
    int64_t v10 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v31 = *(void *)(v7 + 8 * v10);
    ++v32;
    if (v31) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  long long v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    uint64_t v27 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v14) {
      goto LABEL_26;
    }
    uint64_t v28 = *(void *)(v7 + 8 * v27);
    ++v10;
    if (!v28)
    {
      int64_t v10 = v27 + 1;
      if (v27 + 1 >= v14) {
        goto LABEL_26;
      }
      uint64_t v28 = *(void *)(v7 + 8 * v10);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v28 - 1) & v28;
    unint64_t v16 = __clz(__rbit64(v28)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v20 = *v18;
    unint64_t v19 = v18[1];
    uint64_t v21 = 24 * v16;
    uint64_t v22 = *(void *)(v3 + 56) + v21;
    uint64_t v23 = *(void *)v22;
    uint64_t v24 = (void *)(*(void *)(v5 + 48) + v17);
    uint64_t v25 = *(_OWORD *)(v22 + 8);
    char *v24 = v20;
    v24[1] = v19;
    char v26 = *(void *)(v5 + 56) + v21;
    *(void *)char v26 = v23;
    *(_OWORD *)(v26 + 8) = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  unint64_t v29 = v27 + 2;
  if (v29 >= v14) {
    goto LABEL_26;
  }
  uint64_t v28 = *(void *)(v7 + 8 * v29);
  if (v28)
  {
    int64_t v10 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v28 = *(void *)(v7 + 8 * v10);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    unint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_26;
      }
      uint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    uint64_t v22 = __clz(__rbit64(v20));
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = v22 + (v10 << 6);
LABEL_12:
    unint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = *(void *)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 56) + v17) = v18;
  }
  uint64_t v21 = v19 + 2;
  if (v21 >= v14) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    unint64_t v35 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v35 >= v14) {
      goto LABEL_26;
    }
    char v36 = *(void *)(v7 + 8 * v35);
    ++v10;
    if (!v36)
    {
      int64_t v10 = v35 + 1;
      if (v35 + 1 >= v14) {
        goto LABEL_26;
      }
      char v36 = *(void *)(v7 + 8 * v10);
      if (!v36) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v36 - 1) & v36;
    unint64_t v16 = __clz(__rbit64(v36)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = 80 * v16;
    uint64_t v18 = *(void *)(v3 + 48) + 80 * v16;
    unint64_t v19 = *(void **)v18;
    uint64_t v20 = *(void **)(v18 + 8);
    uint64_t v21 = *(void *)(v18 + 16);
    uint64_t v22 = *(void *)(v18 + 24);
    uint64_t v23 = *(void *)(v18 + 32);
    uint64_t v24 = *(void *)(v18 + 40);
    uint64_t v25 = *(void *)(v18 + 48);
    char v26 = *(void *)(v18 + 56);
    uint64_t v27 = *(unsigned char *)(v18 + 64);
    uint64_t v28 = *(void *)(v18 + 72);
    unint64_t v29 = 16 * v16;
    int64_t v30 = (uint64_t *)(*(void *)(v3 + 56) + v29);
    unint64_t v31 = *v30;
    int64_t v32 = v30[1];
    char v33 = *(void *)(v5 + 48) + v17;
    *(void *)char v33 = v19;
    *(void *)(v33 + 8) = v20;
    *(void *)(v33 + 16) = v21;
    *(void *)(v33 + 24) = v22;
    *(void *)(v33 + 32) = v23;
    *(void *)(v33 + 40) = v24;
    *(void *)(v33 + 48) = v25;
    *(void *)(v33 + 56) = v26;
    *(unsigned char *)(v33 + 64) = v27;
    *(void *)(v33 + 72) = v28;
    uint64_t v34 = (void *)(*(void *)(v5 + 56) + v29);
    *uint64_t v34 = v31;
    v34[1] = v32;
    outlined copy of SGDataTypeStorage(v19, v20, v21, v22, v23, v24, v25, v26, v27);
    swift_retain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v37 = v35 + 2;
  if (v37 >= v14) {
    goto LABEL_26;
  }
  char v36 = *(void *)(v7 + 8 * v37);
  if (v36)
  {
    int64_t v10 = v37;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v37 + 1;
    if (__OFADD__(v37, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    char v36 = *(void *)(v7 + 8 * v10);
    ++v37;
    if (v36) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SGGeometryPropertyDefinition()
{
  return self;
}

id specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, SGOutput>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, SGInput>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, MTLFunctionStitchingInputNode>);
}

id specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized SGGeometryPropertyDefinition.CodingKey.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000025C427560)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t lazy protocol witness table accessor for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey()
{
  unint64_t result = lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey;
  if (!lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey;
  if (!lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey;
  if (!lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey;
  if (!lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGGeometryPropertyDefinition.CodingKey and conformance SGGeometryPropertyDefinition.CodingKey);
  }
  return result;
}

uint64_t method lookup function for SGGeometryPropertyDefinition(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SGGeometryPropertyDefinition);
}

uint64_t dispatch thunk of static SGGeometryPropertyDefinition.create(name:mappingTo:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of SGGeometryPropertyDefinition.__allocating_init(name:referencedGeomPropName:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of SGGeometryPropertyDefinition.encode(to:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SGGeometryPropertyDefinition.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

unsigned char *storeEnumTagSinglePayload for SGGeometryPropertyDefinition.CodingKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C3CD5D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SGGeometryPropertyDefinition.CodingKey()
{
  return &type metadata for SGGeometryPropertyDefinition.CodingKey;
}

uint64_t outlined destroy of MetalFunctionNode?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of GeomPropDef?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GeomPropDef?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void outlined consume of GeomPropDef?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of GeomPropDef.GeomProp(a4, a5, a6 & 1);
  }
}

Swift::String __swiftcall OrderedSet._debugTypeName()()
{
  uint64_t v0 = specialized OrderedSet._debugTypeName()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall OrderedSet._debugDescription(typeName:)(Swift::String typeName)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v6 = v1;
  uint64_t v7 = *(void **)(v3 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](typeName._countAndFlagsBits);
  int64_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  unint64_t v13 = (char *)v29 - v12;
  uint64_t v34 = v11;
  unint64_t v35 = v14;
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = 23336;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  uint64_t v16 = *(void *)(v5 + 16);
  if (v16)
  {
    v29[1] = v6;
    uint64_t v33 = v16;
    swift_retain();
    swift_retain();
    ContiguousArray.subscript.getter();
    unint64_t v31 = (void (*)(char *, char *, uint64_t))v7[4];
    int64_t v32 = v7 + 4;
    v31(v10, v13, v4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v17 = swift_allocObject();
    long long v30 = xmmword_25C418EE0;
    *(_OWORD *)(v17 + 16) = xmmword_25C418EE0;
    *(void *)(v17 + 56) = v4;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v17 + 32));
    uint64_t v19 = (void (*)(uint64_t *, char *, uint64_t))v7[2];
    v19(boxed_opaque_existential_0, v10, v4);
    debugPrint<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = (void (*)(char *, uint64_t))v7[1];
    v20(v10, v4);
    if (v33 != 1)
    {
      uint64_t v21 = 1;
      do
      {
        ContiguousArray.subscript.getter();
        ++v21;
        v31(v10, v13, v4);
        v22._uint64_t countAndFlagsBits = 8236;
        v22._object = (void *)0xE200000000000000;
        String.append(_:)(v22);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        uint64_t v23 = swift_allocObject();
        *(_OWORD *)(v23 + 16) = v30;
        *(void *)(v23 + 56) = v4;
        unint64_t v24 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v23 + 32));
        v19(v24, v10, v4);
        debugPrint<A>(_:separator:terminator:to:)();
        swift_bridgeObjectRelease();
        v20(v10, v4);
      }
      while (v33 != v21);
    }
    swift_release();
    swift_release();
  }
  v25._uint64_t countAndFlagsBits = 10589;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  uint64_t v26 = v34;
  uint64_t v27 = v35;
  result._object = v27;
  result._uint64_t countAndFlagsBits = v26;
  return result;
}

uint64_t OrderedSet.debugDescription.getter()
{
  v0._uint64_t countAndFlagsBits = specialized OrderedSet._debugTypeName()();
  uint64_t countAndFlagsBits = OrderedSet._debugDescription(typeName:)(v0)._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OrderedSet<A>()
{
  return OrderedSet.debugDescription.getter();
}

uint64_t specialized OrderedSet._debugTypeName()()
{
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x536465726564724FLL;
}

BOOL static SGNode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

char *static SGNode.create(nodeDefName:name:)(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  return specialized static SGNode.create(nodeDefName:name:)(a1, a2, a3, a4);
}

char *SGNode.__allocating_init(name:data:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return SGNode.init(name:data:)(a1, a2, a3);
}

uint64_t SGNode.name.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SGNode_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SGNode.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

Class @objc SGNode.inputs.getter(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(0);
  swift_bridgeObjectRetain();
  v4.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return v4.super.isa;
}

uint64_t SGNode.outputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SGNode.data.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of NodeData(v1 + OBJC_IVAR___SGNode_data, a1);
}

uint64_t SGNode.graph.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___SGNode_graph;
  swift_beginAccess();
  return MEMORY[0x261185960](v1);
}

void SGNode.graph.setter(void *a1)
{
}

void (*SGNode.graph.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___SGNode_graph;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x261185960](v5);
  return SGInput.edge.modify;
}

char *SGNode.init(name:data:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  uint64_t v8 = (uint64_t *)&v3[OBJC_IVAR___SGNode_name];
  *uint64_t v8 = a1;
  v8[1] = a2;
  outlined init with take of NodeData(a3, (uint64_t)&v32);
  int v9 = v33 >> 6;
  if (!v9)
  {
    v33 &= 0x3Fu;
    swift_bridgeObjectRetain();
    unint64_t v13 = v3;
    uint64_t v14 = swift_bridgeObjectRetain();
    uint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV9InputSpecVG_AF7SGInputCs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA7k24CGAA8NodeDataO_SStFAgA17fgh2V9iJ6VXEfU_SSTf1cn_nTf4ng_n(v14, a1, a2);
    goto LABEL_5;
  }
  if (v9 == 1)
  {
    v33 &= 0x3Fu;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    int64_t v10 = v3;
    unint64_t v11 = swift_bridgeObjectRetain();
    uint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7SGInputCG_AHs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA7F28CGAA8NodeDataO_SStFA2GXEfU0_SSTf1cn_nTf4ng_n(v11, a1, a2);
LABEL_5:
    uint64_t v15 = v12;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v33 &= 0x3Fu;
  swift_bridgeObjectRetain();
  uint64_t v16 = v3;
  uint64_t v15 = MEMORY[0x263F8EE78];
LABEL_7:
  *(void *)&v3[OBJC_IVAR___SGNode_inputs] = v15;
  uint64_t v17 = recreateOutputs(from:nodeName:)(a3, a1, a2);
  swift_bridgeObjectRelease();
  *(void *)&v3[OBJC_IVAR___SGNode_outputs] = v17;
  outlined init with take of NodeData(a3, (uint64_t)&v3[OBJC_IVAR___SGNode_data]);
  outlined retain of NodeData(a3, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of NodeData);

  v31.receiver = v3;
  v31.super_class = ObjectType;
  uint64_t v18 = (char *)objc_msgSendSuper2(&v31, sel_init);
  unint64_t v19 = *(void *)&v18[OBJC_IVAR___SGNode_inputs];
  if (v19 >> 62)
  {
    swift_bridgeObjectRetain_n();
    Swift::String v25 = v18;
    Swift::String result = (char *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v20 = (uint64_t)result;
    if (!result) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    Swift::String result = v18;
    if (!v20) {
      goto LABEL_16;
    }
  }
  if (v20 < 1)
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v22 = 0;
  do
  {
    if ((v19 & 0xC000000000000001) != 0) {
      id v23 = (id)MEMORY[0x2611848A0](v22, v19);
    }
    else {
      id v23 = *(id *)(v19 + 8 * v22 + 32);
    }
    unint64_t v24 = v23;
    ++v22;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
  }
  while (v20 != v22);
LABEL_16:
  swift_bridgeObjectRelease_n();
  unint64_t v26 = *(void *)&v18[OBJC_IVAR___SGNode_outputs];
  if (!(v26 >> 62))
  {
    uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    Swift::String result = (char *)swift_bridgeObjectRetain_n();
    if (v27) {
      goto LABEL_18;
    }
LABEL_25:

    swift_bridgeObjectRelease();
    outlined retain of NodeData(a3, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of NodeData);
    swift_bridgeObjectRelease();
    return v18;
  }
  swift_bridgeObjectRetain_n();
  Swift::String result = (char *)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v27 = (uint64_t)result;
  if (!result) {
    goto LABEL_25;
  }
LABEL_18:
  if (v27 >= 1)
  {
    uint64_t v28 = 0;
    do
    {
      if ((v26 & 0xC000000000000001) != 0) {
        id v29 = (id)MEMORY[0x2611848A0](v28, v26);
      }
      else {
        id v29 = *(id *)(v26 + 8 * v28 + 32);
      }
      long long v30 = v29;
      ++v28;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();
    }
    while (v27 != v28);
    goto LABEL_25;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t recreateOutputs(from:nodeName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with take of NodeData(a1, (uint64_t)v34);
  int v6 = v36 >> 6;
  if (v6)
  {
    v36 &= 0x3Fu;
    if (v6 == 1)
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      outlined retain of NodeData(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of NodeData);
      unint64_t v7 = swift_bridgeObjectRetain();
      uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph8SGOutputCG_AHs5NeverOTg504_s11d79Graph15recreateOutputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA8F28CGAA8NodeDataO_SStFA2GXEfU0_SSTf1cn_nTf4ng_n(v7, a2, a3);
      swift_bridgeObjectRelease();
      outlined retain of NodeData(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of NodeData);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v21 = v34[0];
      uint64_t v22 = (objc_class *)type metadata accessor for SGOutput();
      id v23 = (char *)objc_allocWithZone(v22);
      unint64_t v24 = (uint64_t *)&v23[OBJC_IVAR___SGOutput_attachment];
      uint64_t *v24 = 0;
      v24[1] = 0;
      Swift::String v25 = &v23[OBJC_IVAR___SGOutput_edges];
      uint64_t v26 = MEMORY[0x263F8EE78];
      *(void *)Swift::String v25 = 0;
      *((void *)v25 + 1) = v26;
      swift_unknownObjectWeakInit();
      uint64_t v27 = &v23[OBJC_IVAR___SGOutput_name];
      *(void *)uint64_t v27 = 7632239;
      *((void *)v27 + 1) = 0xE300000000000000;
      *(void *)&v23[OBJC_IVAR___SGOutput_type] = v21;
      swift_beginAccess();
      uint64_t *v24 = a2;
      v24[1] = a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v33.receiver = v23;
      v33.super_class = v22;
      id v28 = objc_msgSendSuper2(&v33, sel_init);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_25C4195A0;
      *(void *)(v29 + 32) = v28;
      v37[0] = v29;
      specialized Array._endMutation()();
      return v37[0];
    }
  }
  else
  {
    v36 &= 0x3Fu;
    uint64_t v9 = v35;
    v37[0] = v35;
    uint64_t v10 = *(void *)(v35 + 16);
    uint64_t v8 = MEMORY[0x263F8EE78];
    if (v10)
    {
      uint64_t v32 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      outlined retain of [Input]((uint64_t)v37);
      specialized ContiguousArray.reserveCapacity(_:)();
      unint64_t v11 = (objc_class *)type metadata accessor for SGOutput();
      uint64_t v12 = (uint64_t *)(v9 + 48);
      uint64_t v13 = a2;
      do
      {
        uint64_t v15 = *(v12 - 2);
        uint64_t v14 = *(v12 - 1);
        uint64_t v16 = *v12;
        v12 += 3;
        uint64_t v17 = (char *)objc_allocWithZone(v11);
        uint64_t v18 = (uint64_t *)&v17[OBJC_IVAR___SGOutput_attachment];
        *uint64_t v18 = 0;
        v18[1] = 0;
        unint64_t v19 = &v17[OBJC_IVAR___SGOutput_edges];
        *(void *)unint64_t v19 = 0;
        *((void *)v19 + 1) = MEMORY[0x263F8EE78];
        swift_unknownObjectWeakInit();
        uint64_t v20 = &v17[OBJC_IVAR___SGOutput_name];
        *(void *)uint64_t v20 = v15;
        *((void *)v20 + 1) = v14;
        *(void *)&v17[OBJC_IVAR___SGOutput_type] = v16;
        swift_beginAccess();
        *uint64_t v18 = v13;
        v18[1] = a3;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v31.receiver = v17;
        v31.super_class = v11;
        objc_msgSendSuper2(&v31, sel_init);
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v10;
      }
      while (v10);
      uint64_t v8 = v32;
      swift_bridgeObjectRelease();
      outlined release of [Input]((uint64_t)v37);
    }
  }
  return v8;
}

ShaderGraph::SGNode::CodingKeys_optional __swiftcall SGNode.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  object = stringValue._object;
  v2._uint64_t countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGNode.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return (ShaderGraph::SGNode::CodingKeys_optional)4;
  }
  else {
    return (ShaderGraph::SGNode::CodingKeys_optional)v3;
  }
}

ShaderGraph::SGNode::CodingKeys_optional __swiftcall SGNode.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (ShaderGraph::SGNode::CodingKeys_optional)4;
}

uint64_t SGNode.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t SGNode.CodingKeys.rawValue.getter(char a1)
{
  uint64_t result = 1701667182;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x737475706E69;
      break;
    case 2:
      uint64_t result = 0x7374757074756FLL;
      break;
    case 3:
      uint64_t result = 1635017060;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t SGNode.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 1701667182;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x737475706E69;
      break;
    case 2:
      uint64_t result = 0x7374757074756FLL;
      break;
    case 3:
      uint64_t result = 1635017060;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SGNode.CodingKeys(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = 1701667182;
  uint64_t v3 = *a1;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1701667182;
  switch(v3)
  {
    case 1:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v5 = 0x737475706E69;
      break;
    case 2:
      unint64_t v4 = 0xE700000000000000;
      uint64_t v5 = 0x7374757074756FLL;
      break;
    case 3:
      uint64_t v5 = 1635017060;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(*a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x737475706E69) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v2 = 0x7374757074756FLL;
      goto LABEL_9;
    case 3:
      if (v5 == 1635017060) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v4 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SGNode.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SGNode.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SGNode.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SGNode.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized SGNode.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SGNode.CodingKeys(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1701667182;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x737475706E69;
      goto LABEL_3;
    case 2:
      *a1 = 0x7374757074756FLL;
      a1[1] = 0xE700000000000000;
      break;
    case 3:
      *a1 = 1635017060;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SGNode.CodingKeys()
{
  uint64_t result = 1701667182;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x737475706E69;
      break;
    case 2:
      uint64_t result = 0x7374757074756FLL;
      break;
    case 3:
      uint64_t result = 1635017060;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance SGNode.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized SGNode.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SGNode.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SGNode.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SGNode.CodingKeys and conformance SGNode.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SGNode.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SGNode.CodingKeys and conformance SGNode.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

char *SGNode.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SGNode.init(from:)(a1);
}

char *SGNode.init(from:)(void *a1)
{
  id v3 = v2;
  unint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SGNode.CodingKeys>);
  uint64_t v81 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v7 = (char *)v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = &v1[OBJC_IVAR___SGNode_graph];
  swift_unknownObjectWeakInit();
  uint64_t v8 = (char *)a1[3];
  long long v83 = a1;
  __swift_project_boxed_opaque_existential_1(a1, (uint64_t)v8);
  lazy protocol witness table accessor for type SGNode.CodingKeys and conformance SGNode.CodingKeys();
  long long v84 = v1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    int v10 = 0;
    uint64_t v15 = v84;
LABEL_4:
    type metadata accessor for SGError();
    id v11 = v3;
    SGError.__allocating_init(_:)(v3);
    swift_willThrow();

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v83);
    if (v10) {
      swift_bridgeObjectRelease();
    }
    swift_unknownObjectWeakDestroy();

    swift_deallocPartialClassInstance();
    return v8;
  }
  LOBYTE(v88) = 0;
  uint64_t v9 = v5;
  uint64_t v8 = (char *)KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v15 = v84;
  uint64_t v16 = (uint64_t *)&v84[OBJC_IVAR___SGNode_name];
  *uint64_t v16 = (uint64_t)v8;
  v16[1] = (uint64_t)v13;
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = (uint64_t)v8;
  v17._object = v14;
  v18._uint64_t countAndFlagsBits = 1701667182;
  v18._object = (void *)0xE400000000000000;
  validate(_:named:)(v17, v18);
  id v3 = v19;
  if (v19)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v7, v9);
    int v10 = 1;
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  char v86 = 3;
  lazy protocol witness table accessor for type NodeData and conformance NodeData();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v74 = v7;
  uint64_t v75 = v9;
  uint64_t v20 = v89;
  uint64_t v22 = v90;
  uint64_t v21 = v91;
  uint64_t v23 = v92;
  uint64_t v24 = v93;
  uint64_t v25 = v94;
  uint64_t v26 = v95;
  uint64_t v27 = v96;
  uint64_t v28 = v97;
  unsigned int v29 = v98;
  uint64_t v30 = (uint64_t)&v15[OBJC_IVAR___SGNode_data];
  uint64_t v82 = v88;
  *(void *)uint64_t v30 = v88;
  *(void *)(v30 + 8) = v20;
  *(void *)(v30 + 16) = v22;
  *(void *)(v30 + 24) = v21;
  *(void *)(v30 + 32) = v23;
  *(void *)(v30 + 40) = v24;
  *(void *)(v30 + 48) = v25;
  *(void *)(v30 + 56) = v26;
  *(void *)(v30 + 64) = v27;
  *(void *)(v30 + 72) = v28;
  *(unsigned char *)(v30 + 80) = v29;
  uint64_t v31 = *v16;
  uint64_t v32 = v16[1];
  if (!(v29 >> 6))
  {
    uint64_t v79 = v25;
    id v80 = v21;
    uint64_t v77 = v23;
    uint64_t v78 = v24;
    uint64_t v76 = v26;
    uint64_t v41 = v27;
    unsigned int v42 = v29;
    uint64_t v68 = v31;
    uint64_t v43 = swift_bridgeObjectRetain();
    unsigned int v69 = v42;
    uint64_t v70 = v28;
    uint64_t v73 = v41;
    uint64_t v65 = v41;
    uint64_t v44 = v43;
    uint64_t v72 = v20;
    outlined copy of NodeData(v82, v20, v22, v80, v77, v78, v79, v76, v65, v28, v42);
    uint64_t v45 = swift_bridgeObjectRetain();
    long long v46 = v22;
    uint64_t v40 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV9InputSpecVG_AF7SGInputCs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA7k24CGAA8NodeDataO_SStFAgA17fgh2V9iJ6VXEfU_SSTf1cn_nTf4ng_n(v45, v68, v44);
    unsigned int v71 = v46;
    goto LABEL_14;
  }
  if (v29 >> 6 == 1)
  {
    unsigned int v71 = v22;
    uint64_t v72 = v20;
    objc_super v33 = v82;
    uint64_t v34 = &v82[OBJC_IVAR___SGGraph_inputs];
    uint64_t v68 = v31;
    v67[1] = v32;
    uint64_t v79 = v25;
    id v80 = v21;
    uint64_t v77 = v23;
    uint64_t v78 = v24;
    uint64_t v76 = v26;
    uint64_t v73 = v27;
    uint64_t v35 = v28;
    unsigned int v36 = v29;
    swift_beginAccess();
    v67[2] = *(void *)v34;
    uint64_t v37 = swift_bridgeObjectRetain();
    unsigned int v69 = v36;
    uint64_t v70 = v35;
    uint64_t v66 = v35;
    uint64_t v38 = v37;
    outlined copy of NodeData(v33, v72, v71, v80, v77, v78, v79, v76, v73, v66, v36);
    unint64_t v39 = swift_bridgeObjectRetain();
    uint64_t v40 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7SGInputCG_AHs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA7F28CGAA8NodeDataO_SStFA2GXEfU0_SSTf1cn_nTf4ng_n(v39, v68, v38);
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodeData(v82, v72, v71, v80, v77, v78, v79, v76, v73, v70, v69);
    goto LABEL_16;
  }
  uint64_t v40 = MEMORY[0x263F8EE78];
LABEL_16:
  *(void *)&v15[OBJC_IVAR___SGNode_inputs] = v40;
  outlined init with take of NodeData(v30, (uint64_t)v99);
  uint64_t v47 = *v16;
  uint64_t v48 = v16[1];
  outlined retain of NodeData((uint64_t)v99, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of NodeData);
  swift_bridgeObjectRetain();
  uint64_t v49 = recreateOutputs(from:nodeName:)((uint64_t)v99, v47, v48);
  swift_bridgeObjectRelease();
  outlined retain of NodeData((uint64_t)v99, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of NodeData);
  *(void *)&v15[OBJC_IVAR___SGNode_outputs] = v49;

  v87.receiver = v15;
  v87.super_class = ObjectType;
  uint64_t v8 = (char *)objc_msgSendSuper2(&v87, sel_init);
  unint64_t v50 = *(void *)&v8[OBJC_IVAR___SGNode_inputs];
  if (v50 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v57 = v8;
    unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v51 = (uint64_t)result;
    if (!result) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v51 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    unint64_t result = v8;
    if (!v51) {
      goto LABEL_25;
    }
  }
  if (v51 < 1)
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v52 = 0;
  unint64_t v53 = v50 & 0xC000000000000001;
  unint64_t v54 = v50;
  do
  {
    if (v53) {
      id v55 = (id)MEMORY[0x2611848A0](v52, v50);
    }
    else {
      id v55 = *(id *)(v50 + 8 * v52 + 32);
    }
    uint64_t v56 = v55;
    ++v52;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();

    unint64_t v50 = v54;
  }
  while (v51 != v52);
LABEL_25:
  swift_bridgeObjectRelease_n();
  unint64_t v58 = *(void *)&v8[OBJC_IVAR___SGNode_outputs];
  if (!(v58 >> 62))
  {
    uint64_t v59 = *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = (char *)swift_bridgeObjectRetain_n();
    if (v59) {
      goto LABEL_27;
    }
LABEL_34:
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v74, v75);

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v83);
    return v8;
  }
  swift_bridgeObjectRetain_n();
  unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v59 = (uint64_t)result;
  if (!result) {
    goto LABEL_34;
  }
LABEL_27:
  if (v59 >= 1)
  {
    uint64_t v60 = 0;
    unint64_t v61 = v58 & 0xC000000000000001;
    unint64_t v62 = v58;
    do
    {
      if (v61) {
        id v63 = (id)MEMORY[0x2611848A0](v60, v58);
      }
      else {
        id v63 = *(id *)(v58 + 8 * v60 + 32);
      }
      unint64_t v64 = v63;
      ++v60;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();

      unint64_t v58 = v62;
    }
    while (v59 != v60);
    goto LABEL_34;
  }
LABEL_36:
  __break(1u);
  return result;
}

void SGNode.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SGNode.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGNode.CodingKeys and conformance SGNode.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    type metadata accessor for SGError();
    id v12 = v2;
    SGError.__allocating_init(_:)(v2);
    swift_willThrow();
  }
  else
  {
    char v9 = *(unsigned char *)(v3 + OBJC_IVAR___SGNode_data + 80);
    long long v10 = *(_OWORD *)(v3 + OBJC_IVAR___SGNode_data + 16);
    long long v14 = *(_OWORD *)(v3 + OBJC_IVAR___SGNode_data);
    long long v15 = v10;
    long long v11 = *(_OWORD *)(v3 + OBJC_IVAR___SGNode_data + 48);
    long long v16 = *(_OWORD *)(v3 + OBJC_IVAR___SGNode_data + 32);
    long long v17 = v11;
    long long v18 = *(_OWORD *)(v3 + OBJC_IVAR___SGNode_data + 64);
    char v19 = v9;
    v13[15] = 3;
    lazy protocol witness table accessor for type NodeData and conformance NodeData();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

id SGNode.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void SGNode.init()()
{
}

id SGNode.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

char *protocol witness for Decodable.init(from:) in conformance SGNode@<X0>(void *a1@<X0>, char **a2@<X8>)
{
  id v6 = objc_allocWithZone(v2);
  unint64_t result = SGNode.init(from:)(a1);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance SGNode(void *a1)
{
}

char *static SGNode.create(graph:name:)(void *a1, uint64_t a2, char *a3)
{
  return specialized static SGNode.create(graph:name:)(a1, a2, a3);
}

char *static SGNode.create(_:type:name:)(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  return specialized static SGNode.create(_:type:name:)(a1, a2, a3, a4);
}

{
  return specialized static SGNode.create(_:type:name:)(a1, a2, a3, a4);
}

char *static SGNode.create(_:name:)(char a1, uint64_t a2, char *a3)
{
  id v5 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a1 & 1);
  id v6 = specialized static SGNode.create(_:type:name:)(v5, 1, a2, a3);

  return v6;
}

id @objc static SGNode.create(_:type:name:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void *, uint64_t, uint64_t, uint64_t))
{
  if (a5)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  id v13 = a3;
  long long v14 = (void *)a7(a3, a4, v10, v12);

  swift_bridgeObjectRelease();
  return v14;
}

char *static SGNode.create(value:type:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  return specialized static SGNode.create(value:type:name:)(a1, a2, a3, a4, a5);
}

char *static SGNode.createColor3(color:name:)(void *a1, uint64_t a2, void *a3)
{
  return static SGNode.createColor3(color:name:)(a1, a2, a3, 3);
}

char *static SGNode.createColor4(color:name:)(void *a1, uint64_t a2, void *a3)
{
  return static SGNode.createColor3(color:name:)(a1, a2, a3, 4);
}

char *static SGNode.createColor3(color:name:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a3)
  {
    swift_bridgeObjectRetain();
    unint64_t v4 = specialized static SGNode.create(color:name:numComponents:)(a1, a2, a3, a4);
    swift_bridgeObjectRelease();
  }
  else
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_OWORD *)uint64_t v9 = xmmword_25C4197E0;
    *(unsigned char *)(v9 + 16) = 1;
    swift_willThrow();
  }
  return v4;
}

char *@objc static SGNode.createColor3(color:name:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  if (a4)
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
    id v12 = a3;
    id v13 = specialized static SGNode.create(color:name:numComponents:)(a3, v9, v11, a6);
    swift_bridgeObjectRelease();
  }
  else
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    long long v16 = (void *)swift_allocError();
    *(_OWORD *)uint64_t v17 = xmmword_25C4197E0;
    *(unsigned char *)(v17 + 16) = 1;
    swift_willThrow();
    if (a5)
    {
      long long v14 = (void *)_convertErrorToNSError(_:)();

      id v15 = v14;
      id v13 = 0;
      *a5 = v14;
    }
    else
    {

      id v13 = 0;
    }
  }
  return v13;
}

uint64_t SGNode.input.getter()
{
  return SGNode.input.getter();
}

{
  swift_getKeyPath();
  return swift_bridgeObjectRetain();
}

uint64_t SGNode.output.getter()
{
  return SGNode.input.getter();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV9InputSpecVG_AF7SGInputCs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C776LL4from8nodeNameSayAA7k24CGAA8NodeDataO_SStFAgA17fgh2V9iJ6VXEfU_SSTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v8 = (objc_class *)type metadata accessor for SGInput();
    uint64_t v9 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v11 = *(v9 - 2);
      uint64_t v10 = *(v9 - 1);
      uint64_t v12 = *v9;
      v9 += 4;
      id v13 = (char *)objc_allocWithZone(v8);
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakInit();
      long long v14 = &v13[OBJC_IVAR___SGInput_name];
      *(void *)long long v14 = v11;
      *((void *)v14 + 1) = v10;
      *(void *)&v13[OBJC_IVAR___SGInput_type] = v12;
      id v15 = &v13[OBJC_IVAR___SGInput_attachment];
      *(void *)id v15 = a2;
      *((void *)v15 + 1) = a3;
      v16.receiver = v13;
      v16.super_class = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      objc_msgSendSuper2(&v16, sel_init);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v4;
    }
    while (v4);
    return v17;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7SGInputCG_AHs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C776LL4from8nodeNameSayAA7F28CGAA8NodeDataO_SStFA2GXEfU0_SSTf1cn_nTf4ng_n(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = MEMORY[0x263F8EE78];
    if (!v4) {
      break;
    }
    uint64_t v22 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v6 = 0;
    unint64_t v17 = v3 & 0xC000000000000001;
    unint64_t v18 = v3;
    while (v4 != v6)
    {
      if (v17) {
        uint64_t v7 = (char *)MEMORY[0x2611848A0](v6, v3);
      }
      else {
        uint64_t v7 = (char *)*(id *)(v3 + 8 * v6 + 32);
      }
      uint64_t v8 = v7;
      ++v6;
      uint64_t v9 = *(void *)&v7[OBJC_IVAR___SGInput_name];
      uint64_t v10 = *(void *)&v7[OBJC_IVAR___SGInput_name + 8];
      uint64_t v11 = &v7[OBJC_IVAR___SGInput_type];
      swift_beginAccess();
      uint64_t v12 = *(void *)v11;
      id v13 = (objc_class *)type metadata accessor for SGInput();
      long long v14 = (char *)objc_allocWithZone(v13);
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakInit();
      id v15 = &v14[OBJC_IVAR___SGInput_name];
      *(void *)id v15 = v9;
      *((void *)v15 + 1) = v10;
      *(void *)&v14[OBJC_IVAR___SGInput_type] = v12;
      objc_super v16 = &v14[OBJC_IVAR___SGInput_attachment];
      *(void *)objc_super v16 = a2;
      *((void *)v16 + 1) = a3;
      v21.receiver = v14;
      v21.super_class = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      objc_msgSendSuper2(&v21, sel_init);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      unint64_t v3 = v18;
      if (v4 == v6) {
        return v22;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph8SGOutputCG_AHs5NeverOTg504_s11d79Graph15recreateOutputs33_C327379532F5DB2AB731A2524F70C776LL4from8nodeNameSayAA8F28CGAA8NodeDataO_SStFA2GXEfU0_SSTf1cn_nTf4ng_n(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = MEMORY[0x263F8EE78];
    if (!v4) {
      break;
    }
    uint64_t v24 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v6 = 0;
    unint64_t v18 = v3 & 0xC000000000000001;
    uint64_t v19 = v4;
    unint64_t v20 = v3;
    while (v4 != v6)
    {
      if (v18) {
        uint64_t v7 = (char *)MEMORY[0x2611848A0](v6, v3);
      }
      else {
        uint64_t v7 = (char *)*(id *)(v3 + 8 * v6 + 32);
      }
      uint64_t v8 = v7;
      ++v6;
      uint64_t v9 = *(void *)&v7[OBJC_IVAR___SGOutput_name];
      uint64_t v10 = *(void *)&v7[OBJC_IVAR___SGOutput_name + 8];
      uint64_t v11 = &v7[OBJC_IVAR___SGOutput_type];
      swift_beginAccess();
      uint64_t v12 = *(void *)v11;
      id v13 = (objc_class *)type metadata accessor for SGOutput();
      long long v14 = (char *)objc_allocWithZone(v13);
      id v15 = &v14[OBJC_IVAR___SGOutput_attachment];
      *(void *)id v15 = 0;
      *((void *)v15 + 1) = 0;
      objc_super v16 = &v14[OBJC_IVAR___SGOutput_edges];
      *(void *)objc_super v16 = 0;
      *((void *)v16 + 1) = MEMORY[0x263F8EE78];
      swift_unknownObjectWeakInit();
      unint64_t v17 = &v14[OBJC_IVAR___SGOutput_name];
      *(void *)unint64_t v17 = v9;
      *((void *)v17 + 1) = v10;
      *(void *)&v14[OBJC_IVAR___SGOutput_type] = v12;
      swift_beginAccess();
      *(void *)id v15 = a2;
      *((void *)v15 + 1) = a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v23.receiver = v14;
      v23.super_class = v13;
      objc_msgSendSuper2(&v23, sel_init);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v4 = v19;
      unint64_t v3 = v20;
      if (v19 == v6) {
        return v24;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

char *specialized static SGNode.create(nodeDefName:name:)(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  if (!a2)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v11 = (void *)swift_allocError();
    long long v16 = xmmword_25C41E390;
LABEL_8:
    *(_OWORD *)uint64_t v15 = v16;
    *(unsigned char *)(v15 + 16) = 1;
LABEL_9:
    swift_willThrow();
    goto LABEL_10;
  }
  if (!a4)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v11 = (void *)swift_allocError();
    long long v16 = xmmword_25C4197E0;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = a1;
  v8._object = a2;
  v9._uint64_t countAndFlagsBits = 0x4E66654465646F6ELL;
  v9._object = (void *)0xEB00000000656D61;
  validate(_:named:)(v8, v9);
  uint64_t v11 = v10;
  if (v10
    || (v12._uint64_t countAndFlagsBits = a3,
        v12._object = a4,
        v13._uint64_t countAndFlagsBits = 1701667182,
        v13._object = (void *)0xE400000000000000,
        validate(_:named:)(v12, v13),
        (uint64_t v11 = v14) != 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_10:
    unint64_t v17 = (char *)type metadata accessor for SGError();
    id v18 = v11;
    SGError.__allocating_init(_:)(v11);
    swift_willThrow();

    return v17;
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v21 = *(void *)(static BuiltInDefinitionStore.shared + 40);
  unint64_t v20 = *(void **)(static BuiltInDefinitionStore.shared + 48);
  uint64_t v22 = *(void *)(static BuiltInDefinitionStore.shared + 56);
  swift_bridgeObjectRetain();
  specialized OrderedDictionary.subscript.getter(a1, (uint64_t)a2, v21, v20, v22, v70);
  swift_bridgeObjectRelease();
  outlined init with take of BuiltInDefinition?((uint64_t)v70, (uint64_t)&v71);
  uint64_t v23 = v72;
  if (!v72)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v11 = (void *)swift_allocError();
    *(void *)uint64_t v45 = a1;
    *(void *)(v45 + 8) = a2;
    *(unsigned char *)(v45 + 16) = 0;
    goto LABEL_9;
  }
  uint64_t v60 = v71;
  uint64_t v24 = v73;
  uint64_t v25 = v74;
  uint64_t v64 = v76;
  uint64_t v65 = v75;
  swift_bridgeObjectRelease();
  uint64_t v26 = (objc_class *)type metadata accessor for SGNode();
  uint64_t v27 = (char *)objc_allocWithZone(v26);
  swift_unknownObjectWeakInit();
  uint64_t v28 = (uint64_t *)&v27[OBJC_IVAR___SGNode_name];
  *uint64_t v28 = a3;
  v28[1] = (uint64_t)a4;
  swift_bridgeObjectRetain();
  unsigned int v29 = v27;
  uint64_t v30 = swift_bridgeObjectRetain();
  uint64_t v31 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV9InputSpecVG_AF7SGInputCs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA7k24CGAA8NodeDataO_SStFAgA17fgh2V9iJ6VXEfU_SSTf1cn_nTf4ng_n(v30, a3, (uint64_t)a4);
  uint64_t v63 = v24;
  swift_bridgeObjectRelease();
  uint64_t v32 = &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>;
  uint64_t v59 = v29;
  *(void *)&v29[OBJC_IVAR___SGNode_inputs] = v31;
  uint64_t v33 = *(void *)(v25 + 16);
  uint64_t v61 = v25;
  uint64_t v62 = v23;
  if (v33)
  {
    unint64_t v58 = v26;
    uint64_t v67 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v66 = (uint64_t)a4;
    uint64_t v34 = (uint64_t *)(v25 + 48);
    uint64_t v35 = (objc_class *)type metadata accessor for SGOutput();
    do
    {
      uint64_t v37 = *(v34 - 2);
      uint64_t v36 = *(v34 - 1);
      uint64_t v38 = *v34;
      v34 += 3;
      unint64_t v39 = (char *)objc_allocWithZone(v35);
      uint64_t v40 = (uint64_t *)&v39[OBJC_IVAR___SGOutput_attachment];
      *uint64_t v40 = 0;
      v40[1] = 0;
      uint64_t v41 = &v39[OBJC_IVAR___SGOutput_edges];
      *(void *)uint64_t v41 = 0;
      *((void *)v41 + 1) = MEMORY[0x263F8EE78];
      swift_unknownObjectWeakInit();
      unsigned int v42 = &v39[OBJC_IVAR___SGOutput_name];
      *(void *)unsigned int v42 = v37;
      *((void *)v42 + 1) = v36;
      *(void *)&v39[OBJC_IVAR___SGOutput_type] = v38;
      swift_beginAccess();
      *uint64_t v40 = a3;
      v40[1] = v66;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v69.receiver = v39;
      v69.super_class = v35;
      objc_msgSendSuper2(&v69, sel_init);
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v33;
    }
    while (v33);
    uint64_t v43 = (uint64_t)&selRef_create_type_;
    uint64_t v44 = v67;
    uint64_t v25 = v61;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v23 = v62;
    uint64_t v26 = v58;
    uint64_t v32 = &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>;
  }
  else
  {
    uint64_t v43 = 0x1F6E6D000;
    swift_bridgeObjectRelease();
    uint64_t v44 = MEMORY[0x263F8EE78];
  }
  *(void *)&v59[OBJC_IVAR___SGNode_outputs] = v44;
  long long v46 = &v59[OBJC_IVAR___SGNode_data];
  *(void *)long long v46 = v60;
  *((void *)v46 + 1) = v23;
  *((void *)v46 + 2) = v63;
  *((void *)v46 + 3) = v25;
  *((void *)v46 + 4) = v65;
  *((void *)v46 + 5) = v64;
  *((_OWORD *)v46 + 3) = 0u;
  *((_OWORD *)v46 + 4) = 0u;
  v46[80] = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MaterialXAvailability(v65, v64);

  v68.receiver = v59;
  v68.super_class = v26;
  unint64_t v17 = (char *)objc_msgSendSuper2(&v68, *(SEL *)(v43 + 48));
  unint64_t v47 = *(void *)&v17[v32[309]];
  if (v47 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v52 = v17;
    uint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v48 = (uint64_t)result;
    if (!result) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v48 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    uint64_t result = v17;
    if (!v48) {
      goto LABEL_30;
    }
  }
  if (v48 < 1)
  {
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v49 = 0;
  do
  {
    if ((v47 & 0xC000000000000001) != 0) {
      id v50 = (id)MEMORY[0x2611848A0](v49, v47);
    }
    else {
      id v50 = *(id *)(v47 + 8 * v49 + 32);
    }
    uint64_t v51 = v50;
    ++v49;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
  }
  while (v48 != v49);
LABEL_30:
  swift_bridgeObjectRelease_n();
  unint64_t v53 = *(void *)&v17[OBJC_IVAR___SGNode_outputs];
  if (v53 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v54 = (uint64_t)result;
  }
  else
  {
    uint64_t v54 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = (char *)swift_bridgeObjectRetain_n();
  }
  if (!v54)
  {
LABEL_39:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v65, v64);
    swift_bridgeObjectRelease();
    return v17;
  }
  if (v54 >= 1)
  {
    uint64_t v55 = 0;
    do
    {
      if ((v53 & 0xC000000000000001) != 0) {
        id v56 = (id)MEMORY[0x2611848A0](v55, v53);
      }
      else {
        id v56 = *(id *)(v53 + 8 * v55 + 32);
      }
      uint64_t v57 = v56;
      ++v55;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();
    }
    while (v54 != v55);
    goto LABEL_39;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of NodeData(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t specialized SGNode.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGNode.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type SGNode.CodingKeys and conformance SGNode.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGNode.CodingKeys and conformance SGNode.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NodeData and conformance NodeData()
{
  unint64_t result = lazy protocol witness table cache variable for type NodeData and conformance NodeData;
  if (!lazy protocol witness table cache variable for type NodeData and conformance NodeData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeData and conformance NodeData);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NodeData and conformance NodeData;
  if (!lazy protocol witness table cache variable for type NodeData and conformance NodeData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeData and conformance NodeData);
  }
  return result;
}

char *specialized static SGNode.create(graph:name:)(void *a1, uint64_t a2, char *a3)
{
  if (!a1)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v10 = (void *)swift_allocError();
    long long v12 = xmmword_25C41A170;
LABEL_7:
    *(_OWORD *)uint64_t v11 = v12;
    *(unsigned char *)(v11 + 16) = 1;
    swift_willThrow();
    goto LABEL_8;
  }
  unint64_t v3 = a3;
  if (!a3)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v10 = (void *)swift_allocError();
    long long v12 = xmmword_25C4197E0;
    goto LABEL_7;
  }
  id v6 = a1;
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = a2;
  v7._object = v3;
  v8._uint64_t countAndFlagsBits = 1701667182;
  v8._object = (void *)0xE400000000000000;
  validate(_:named:)(v7, v8);
  uint64_t v10 = v9;
  if (v9)
  {

    swift_bridgeObjectRelease();
LABEL_8:
    type metadata accessor for SGError();
    id v13 = v10;
    SGError.__allocating_init(_:)(v10);
    swift_willThrow();

    return v3;
  }
  uint64_t v15 = (objc_class *)type metadata accessor for SGNode();
  long long v16 = (char *)objc_allocWithZone(v15);
  swift_unknownObjectWeakInit();
  unint64_t v17 = (uint64_t *)&v16[OBJC_IVAR___SGNode_name];
  uint64_t *v17 = a2;
  v17[1] = (uint64_t)v3;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v18 = v16;
  unint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7SGInputCG_AHs5NeverOTg504_s11d78Graph14recreateInputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA7F28CGAA8NodeDataO_SStFA2GXEfU0_SSTf1cn_nTf4ng_n(v19, a2, (uint64_t)v3);
  swift_bridgeObjectRelease();
  *(void *)&v18[OBJC_IVAR___SGNode_inputs] = v20;
  swift_beginAccess();
  id v21 = v6;
  swift_bridgeObjectRetain();
  unint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v23 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph8SGOutputCG_AHs5NeverOTg504_s11d79Graph15recreateOutputs33_C327379532F5DB2AB731A2524F70C7764from8nodeNameSayAA8F28CGAA8NodeDataO_SStFA2GXEfU0_SSTf1cn_nTf4ng_n(v22, a2, (uint64_t)v3);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n();
  *(void *)&v18[OBJC_IVAR___SGNode_outputs] = v23;
  uint64_t v24 = &v18[OBJC_IVAR___SGNode_data];
  *(void *)uint64_t v24 = a1;
  *(_OWORD *)(v24 + 8) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_OWORD *)(v24 + 40) = 0u;
  *(_OWORD *)(v24 + 56) = 0u;
  *((void *)v24 + 9) = 0;
  v24[80] = 64;
  id v36 = v21;

  v37.receiver = v18;
  v37.super_class = v15;
  unint64_t v3 = (char *)objc_msgSendSuper2(&v37, sel_init);
  unint64_t v25 = *(void *)&v3[OBJC_IVAR___SGNode_inputs];
  if (v25 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v30 = v3;
    unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v26 = (uint64_t)result;
    if (!result) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    unint64_t result = v3;
    if (!v26) {
      goto LABEL_19;
    }
  }
  if (v26 < 1)
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v27 = 0;
  do
  {
    if ((v25 & 0xC000000000000001) != 0) {
      id v28 = (id)MEMORY[0x2611848A0](v27, v25);
    }
    else {
      id v28 = *(id *)(v25 + 8 * v27 + 32);
    }
    unsigned int v29 = v28;
    ++v27;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
  }
  while (v26 != v27);
LABEL_19:
  swift_bridgeObjectRelease_n();
  unint64_t v31 = *(void *)&v3[OBJC_IVAR___SGNode_outputs];
  if (!(v31 >> 62))
  {
    uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = (char *)swift_bridgeObjectRetain_n();
    if (v32) {
      goto LABEL_21;
    }
LABEL_28:

    swift_bridgeObjectRelease_n();
    return v3;
  }
  swift_bridgeObjectRetain_n();
  unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v32 = (uint64_t)result;
  if (!result) {
    goto LABEL_28;
  }
LABEL_21:
  if (v32 >= 1)
  {
    uint64_t v33 = 0;
    do
    {
      if ((v31 & 0xC000000000000001) != 0) {
        id v34 = (id)MEMORY[0x2611848A0](v33, v31);
      }
      else {
        id v34 = *(id *)(v31 + 8 * v33 + 32);
      }
      uint64_t v35 = v34;
      ++v33;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();
    }
    while (v32 != v33);
    goto LABEL_28;
  }
LABEL_30:
  __break(1u);
  return result;
}

char *specialized static SGNode.create(_:type:name:)(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  if (!a1)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v11 = (void *)swift_allocError();
    long long v13 = xmmword_25C41E3A0;
LABEL_7:
    *(_OWORD *)uint64_t v12 = v13;
    *(unsigned char *)(v12 + 16) = 1;
    swift_willThrow();
    goto LABEL_8;
  }
  uint64_t v4 = a4;
  if (!a4)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v11 = (void *)swift_allocError();
    long long v13 = xmmword_25C4197E0;
    goto LABEL_7;
  }
  id v7 = a1;
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = a3;
  v8._object = v4;
  v9._uint64_t countAndFlagsBits = 1701667182;
  v9._object = (void *)0xE400000000000000;
  validate(_:named:)(v8, v9);
  uint64_t v11 = v10;
  if (v10)
  {

    swift_bridgeObjectRelease();
LABEL_8:
    type metadata accessor for SGError();
    id v14 = v11;
    SGError.__allocating_init(_:)(v11);
    swift_willThrow();

    return v4;
  }
  id v16 = v7;
  specialized SGDataTypeStorage.init(type:scalar:)(v16, a2, (uint64_t)v35);
  char v17 = v36;
  id v43 = v16;

  v37[0] = a2;
  v37[1] = 0;
  long long v38 = v35[0];
  long long v39 = v35[1];
  long long v40 = v35[2];
  long long v41 = v35[3];
  char v42 = v17 | 0x80;
  id v18 = (objc_class *)type metadata accessor for SGNode();
  unint64_t v19 = (char *)objc_allocWithZone(v18);
  swift_unknownObjectWeakInit();
  uint64_t v20 = (uint64_t *)&v19[OBJC_IVAR___SGNode_name];
  *uint64_t v20 = a3;
  v20[1] = (uint64_t)v4;
  *(void *)&v19[OBJC_IVAR___SGNode_inputs] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  id v21 = v19;
  uint64_t v22 = recreateOutputs(from:nodeName:)((uint64_t)v37, a3, (uint64_t)v4);
  swift_bridgeObjectRelease();
  *(void *)&v21[OBJC_IVAR___SGNode_outputs] = v22;
  outlined init with take of NodeData((uint64_t)v37, (uint64_t)&v21[OBJC_IVAR___SGNode_data]);
  outlined retain of SGDataTypeStorage((uint64_t)v35, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);

  v34.receiver = v21;
  v34.super_class = v18;
  uint64_t v4 = (char *)objc_msgSendSuper2(&v34, sel_init);
  unint64_t v23 = *(void *)&v4[OBJC_IVAR___SGNode_inputs];
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain_n();
    id v28 = v4;
    unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v24 = (uint64_t)result;
    if (!result) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    unint64_t result = v4;
    if (!v24) {
      goto LABEL_19;
    }
  }
  if (v24 < 1)
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v25 = 0;
  do
  {
    if ((v23 & 0xC000000000000001) != 0) {
      id v26 = (id)MEMORY[0x2611848A0](v25, v23);
    }
    else {
      id v26 = *(id *)(v23 + 8 * v25 + 32);
    }
    uint64_t v27 = v26;
    ++v25;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
  }
  while (v24 != v25);
LABEL_19:
  swift_bridgeObjectRelease_n();
  unint64_t v29 = *(void *)&v4[OBJC_IVAR___SGNode_outputs];
  if (!(v29 >> 62))
  {
    uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = (char *)swift_bridgeObjectRetain_n();
    if (v30) {
      goto LABEL_21;
    }
LABEL_28:

    swift_bridgeObjectRelease();
    outlined retain of SGDataTypeStorage((uint64_t)v35, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);

    swift_bridgeObjectRelease();
    return v4;
  }
  swift_bridgeObjectRetain_n();
  unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v30 = (uint64_t)result;
  if (!result) {
    goto LABEL_28;
  }
LABEL_21:
  if (v30 >= 1)
  {
    uint64_t v31 = 0;
    do
    {
      if ((v29 & 0xC000000000000001) != 0) {
        id v32 = (id)MEMORY[0x2611848A0](v31, v29);
      }
      else {
        id v32 = *(id *)(v29 + 8 * v31 + 32);
      }
      uint64_t v33 = v32;
      ++v31;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();
    }
    while (v30 != v31);
    goto LABEL_28;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  char *v4;
  id v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  void *v11;
  uint64_t v12;
  long long v13;
  id v14;
  char *result;
  id v16;
  objc_class *v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  objc_super v33;
  _OWORD v34[4];
  char v35;
  void v36[2];
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  char v41;
  id v42;

  if (!a1)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v11 = (void *)swift_allocError();
    long long v13 = xmmword_25C41E3B0;
LABEL_7:
    *(_OWORD *)uint64_t v12 = v13;
    *(unsigned char *)(v12 + 16) = 1;
    swift_willThrow();
    goto LABEL_8;
  }
  uint64_t v4 = a4;
  if (!a4)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v11 = (void *)swift_allocError();
    long long v13 = xmmword_25C4197E0;
    goto LABEL_7;
  }
  id v7 = a1;
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = a3;
  v8._object = v4;
  v9._uint64_t countAndFlagsBits = 1701667182;
  v9._object = (void *)0xE400000000000000;
  validate(_:named:)(v8, v9);
  uint64_t v11 = v10;
  if (v10)
  {

    swift_bridgeObjectRelease();
LABEL_8:
    type metadata accessor for SGError();
    id v14 = v11;
    SGError.__allocating_init(_:)(v11);
    swift_willThrow();

    return v4;
  }
  id v16 = v7;
  specialized SGDataTypeStorage.init(type:value:)(a2, v16, (uint64_t)v34);
  v36[0] = a2;
  v36[1] = 0;
  objc_super v37 = v34[0];
  long long v38 = v34[1];
  long long v39 = v34[2];
  long long v40 = v34[3];
  long long v41 = v35 | 0x80;
  char v17 = (objc_class *)type metadata accessor for SGNode();
  id v18 = (char *)objc_allocWithZone(v17);
  swift_unknownObjectWeakInit();
  unint64_t v19 = (uint64_t *)&v18[OBJC_IVAR___SGNode_name];
  *unint64_t v19 = a3;
  v19[1] = (uint64_t)v4;
  *(void *)&v18[OBJC_IVAR___SGNode_inputs] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  uint64_t v20 = v18;
  id v21 = recreateOutputs(from:nodeName:)((uint64_t)v36, a3, (uint64_t)v4);
  swift_bridgeObjectRelease();
  *(void *)&v20[OBJC_IVAR___SGNode_outputs] = v21;
  outlined init with take of NodeData((uint64_t)v36, (uint64_t)&v20[OBJC_IVAR___SGNode_data]);
  outlined retain of SGDataTypeStorage((uint64_t)v34, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);

  v33.receiver = v20;
  v33.super_class = v17;
  uint64_t v4 = (char *)objc_msgSendSuper2(&v33, sel_init);
  uint64_t v22 = *(void *)&v4[OBJC_IVAR___SGNode_inputs];
  char v42 = v16;
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v27 = v4;
    unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
    unint64_t v23 = (uint64_t)result;
    if (!result) {
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    unint64_t result = v4;
    if (!v23) {
      goto LABEL_19;
    }
  }
  if (v23 < 1)
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v24 = 0;
  do
  {
    if ((v22 & 0xC000000000000001) != 0) {
      uint64_t v25 = (id)MEMORY[0x2611848A0](v24, v22);
    }
    else {
      uint64_t v25 = *(id *)(v22 + 8 * v24 + 32);
    }
    id v26 = v25;
    ++v24;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
  }
  while (v23 != v24);
LABEL_19:
  swift_bridgeObjectRelease_n();
  id v28 = *(void *)&v4[OBJC_IVAR___SGNode_outputs];
  if (!(v28 >> 62))
  {
    unint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = (char *)swift_bridgeObjectRetain_n();
    if (v29) {
      goto LABEL_21;
    }
LABEL_28:

    swift_bridgeObjectRelease();
    outlined retain of SGDataTypeStorage((uint64_t)v34, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);

    swift_bridgeObjectRelease();
    return v4;
  }
  swift_bridgeObjectRetain_n();
  unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
  unint64_t v29 = (uint64_t)result;
  if (!result) {
    goto LABEL_28;
  }
LABEL_21:
  if (v29 >= 1)
  {
    uint64_t v30 = 0;
    do
    {
      if ((v28 & 0xC000000000000001) != 0) {
        uint64_t v31 = (id)MEMORY[0x2611848A0](v30, v28);
      }
      else {
        uint64_t v31 = *(id *)(v28 + 8 * v30 + 32);
      }
      id v32 = v31;
      ++v30;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();
    }
    while (v29 != v30);
    goto LABEL_28;
  }
LABEL_30:
  __break(1u);
  return result;
}

char *specialized static SGNode.create(value:type:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  if (!a2)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    long long v13 = (void *)swift_allocError();
    long long v15 = xmmword_25C41E3B0;
LABEL_7:
    *(_OWORD *)uint64_t v14 = v15;
    char v16 = 1;
LABEL_8:
    *(unsigned char *)(v14 + 16) = v16;
    swift_willThrow();
    goto LABEL_9;
  }
  id v5 = a5;
  if (!a5)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    long long v13 = (void *)swift_allocError();
    long long v15 = xmmword_25C4197E0;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = a4;
  v10._object = v5;
  v11._uint64_t countAndFlagsBits = 1701667182;
  v11._object = (void *)0xE400000000000000;
  validate(_:named:)(v10, v11);
  if (v12)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v13 = v12;
LABEL_9:
    type metadata accessor for SGError();
    id v17 = v13;
    SGError.__allocating_init(_:)(v13);
    swift_willThrow();

    return v5;
  }
  if ((unint64_t)(a3 - 11) >= 3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v29 = SGDataType.stringValue.getter();
    id v5 = v30;
    lazy protocol witness table accessor for type APIError and conformance APIError();
    long long v13 = (void *)swift_allocError();
    *(void *)uint64_t v14 = v29;
    *(void *)(v14 + 8) = v5;
    char v16 = 4;
    goto LABEL_8;
  }
  v38[0] = a3;
  v38[1] = 0;
  _OWORD v38[2] = a1;
  v38[3] = a2;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  char v42 = -122;
  unint64_t v19 = (objc_class *)type metadata accessor for SGNode();
  uint64_t v20 = (char *)objc_allocWithZone(v19);
  swift_unknownObjectWeakInit();
  id v21 = (uint64_t *)&v20[OBJC_IVAR___SGNode_name];
  *id v21 = a4;
  v21[1] = (uint64_t)v5;
  *(void *)&v20[OBJC_IVAR___SGNode_inputs] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  uint64_t v22 = v20;
  uint64_t v23 = recreateOutputs(from:nodeName:)((uint64_t)v38, a4, (uint64_t)v5);
  swift_bridgeObjectRelease();
  *(void *)&v22[OBJC_IVAR___SGNode_outputs] = v23;
  outlined init with take of NodeData((uint64_t)v38, (uint64_t)&v22[OBJC_IVAR___SGNode_data]);
  swift_bridgeObjectRetain();

  v37.receiver = v22;
  v37.super_class = v19;
  id v5 = (char *)objc_msgSendSuper2(&v37, sel_init);
  unint64_t v24 = *(void *)&v5[OBJC_IVAR___SGNode_inputs];
  uint64_t v43 = a2;
  if (v24 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v31 = v5;
    unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v25 = (uint64_t)result;
    if (!result) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    unint64_t result = v5;
    if (!v25) {
      goto LABEL_22;
    }
  }
  if (v25 < 1)
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v26 = 0;
  do
  {
    if ((v24 & 0xC000000000000001) != 0) {
      id v27 = (id)MEMORY[0x2611848A0](v26, v24);
    }
    else {
      id v27 = *(id *)(v24 + 8 * v26 + 32);
    }
    id v28 = v27;
    ++v26;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
  }
  while (v25 != v26);
LABEL_22:
  swift_bridgeObjectRelease_n();
  unint64_t v32 = *(void *)&v5[OBJC_IVAR___SGNode_outputs];
  if (!(v32 >> 62))
  {
    uint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = (char *)swift_bridgeObjectRetain_n();
    if (v33) {
      goto LABEL_24;
    }
LABEL_31:

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return v5;
  }
  swift_bridgeObjectRetain_n();
  unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v33 = (uint64_t)result;
  if (!result) {
    goto LABEL_31;
  }
LABEL_24:
  if (v33 >= 1)
  {
    uint64_t v34 = 0;
    do
    {
      if ((v32 & 0xC000000000000001) != 0) {
        id v35 = (id)MEMORY[0x2611848A0](v34, v32);
      }
      else {
        id v35 = *(id *)(v32 + 8 * v34 + 32);
      }
      char v36 = v35;
      ++v34;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();
    }
    while (v33 != v34);
    goto LABEL_31;
  }
LABEL_33:
  __break(1u);
  return result;
}

char *specialized static SGNode.create(color:name:numComponents:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (!a1)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    uint64_t v12 = (char *)swift_allocError();
    *(_OWORD *)uint64_t v13 = xmmword_25C41E3E0;
    *(unsigned char *)(v13 + 16) = 1;
    swift_willThrow();
    goto LABEL_5;
  }
  id v8 = a1;
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = a2;
  v9._object = a3;
  v10._uint64_t countAndFlagsBits = 1701667182;
  v10._object = (void *)0xE400000000000000;
  validate(_:named:)(v9, v10);
  if (v11)
  {

    swift_bridgeObjectRelease();
    uint64_t v12 = v11;
LABEL_5:
    type metadata accessor for SGError();
    uint64_t v14 = v12;
    SGError.__allocating_init(_:)(v12);
    swift_willThrow();

    return v12;
  }
  id v67 = v8;
  if (a4 == 3)
  {
    long long v53 = xmmword_25C41E3D0;
    uint64_t v54 = a1;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    uint64_t v58 = 0;
    char v59 = -106;
    long long v15 = (objc_class *)type metadata accessor for SGNode();
    char v16 = (char *)objc_allocWithZone(v15);
    swift_unknownObjectWeakInit();
    id v17 = (uint64_t *)&v16[OBJC_IVAR___SGNode_name];
    uint64_t *v17 = a2;
    v17[1] = (uint64_t)a3;
    *(void *)&v16[OBJC_IVAR___SGNode_inputs] = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    id v18 = v16;
    uint64_t v19 = recreateOutputs(from:nodeName:)((uint64_t)&v53, a2, (uint64_t)a3);
    swift_bridgeObjectRelease();
    *(void *)&v18[OBJC_IVAR___SGNode_outputs] = v19;
    outlined init with take of NodeData((uint64_t)&v53, (uint64_t)&v18[OBJC_IVAR___SGNode_data]);
    id v20 = v8;

    v51.receiver = v18;
    v51.super_class = v15;
    uint64_t v12 = (char *)objc_msgSendSuper2(&v51, sel_init);
    unint64_t v21 = *(void *)&v12[OBJC_IVAR___SGNode_inputs];
    if (v21 >> 62)
    {
      swift_bridgeObjectRetain_n();
      long long v38 = v12;
      unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
      uint64_t v22 = (uint64_t)result;
      if (result) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      unint64_t result = v12;
      if (v22)
      {
LABEL_9:
        if (v22 >= 1)
        {
          uint64_t v24 = 0;
          do
          {
            if ((v21 & 0xC000000000000001) != 0) {
              id v25 = (id)MEMORY[0x2611848A0](v24, v21);
            }
            else {
              id v25 = *(id *)(v21 + 8 * v24 + 32);
            }
            uint64_t v26 = v25;
            ++v24;
            swift_beginAccess();
            swift_unknownObjectWeakAssign();
          }
          while (v22 != v24);
          goto LABEL_24;
        }
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
    }
LABEL_24:
    swift_bridgeObjectRelease_n();
    unint64_t v39 = *(void *)&v12[OBJC_IVAR___SGNode_outputs];
    if (v39 >> 62)
    {
      swift_bridgeObjectRetain_n();
      unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
      uint64_t v40 = (uint64_t)result;
      long long v41 = v67;
      if (!result) {
        goto LABEL_42;
      }
LABEL_26:
      if (v40 >= 1)
      {
        uint64_t v42 = 0;
        do
        {
          if ((v39 & 0xC000000000000001) != 0) {
            id v43 = (id)MEMORY[0x2611848A0](v42, v39);
          }
          else {
            id v43 = *(id *)(v39 + 8 * v42 + 32);
          }
          uint64_t v44 = v43;
          ++v42;
          swift_beginAccess();
          swift_unknownObjectWeakAssign();
        }
        while (v40 != v42);
LABEL_41:
        long long v41 = v67;
        goto LABEL_42;
      }
      goto LABEL_50;
    }
    uint64_t v40 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = (char *)swift_bridgeObjectRetain_n();
    long long v41 = v67;
    if (v40) {
      goto LABEL_26;
    }
LABEL_42:

    swift_bridgeObjectRelease_n();
    return v12;
  }
  long long v60 = xmmword_25C41E3C0;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  uint64_t v61 = a1;
  uint64_t v65 = 0;
  char v66 = -105;
  id v27 = (objc_class *)type metadata accessor for SGNode();
  id v28 = (char *)objc_allocWithZone(v27);
  swift_unknownObjectWeakInit();
  unint64_t v29 = (uint64_t *)&v28[OBJC_IVAR___SGNode_name];
  *unint64_t v29 = a2;
  v29[1] = (uint64_t)a3;
  *(void *)&v28[OBJC_IVAR___SGNode_inputs] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  uint64_t v30 = v28;
  uint64_t v31 = recreateOutputs(from:nodeName:)((uint64_t)&v60, a2, (uint64_t)a3);
  swift_bridgeObjectRelease();
  *(void *)&v30[OBJC_IVAR___SGNode_outputs] = v31;
  outlined init with take of NodeData((uint64_t)&v60, (uint64_t)&v30[OBJC_IVAR___SGNode_data]);
  id v32 = v8;

  v52.receiver = v30;
  v52.super_class = v27;
  uint64_t v12 = (char *)objc_msgSendSuper2(&v52, sel_init);
  unint64_t v33 = *(void *)&v12[OBJC_IVAR___SGNode_inputs];
  if (v33 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v45 = v12;
    unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v34 = (uint64_t)result;
    if (!result) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    unint64_t result = v12;
    if (!v34) {
      goto LABEL_33;
    }
  }
  if (v34 < 1) {
    goto LABEL_49;
  }
  uint64_t v35 = 0;
  do
  {
    if ((v33 & 0xC000000000000001) != 0) {
      id v36 = (id)MEMORY[0x2611848A0](v35, v33);
    }
    else {
      id v36 = *(id *)(v33 + 8 * v35 + 32);
    }
    objc_super v37 = v36;
    ++v35;
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
  }
  while (v34 != v35);
LABEL_33:
  swift_bridgeObjectRelease_n();
  unint64_t v46 = *(void *)&v12[OBJC_IVAR___SGNode_outputs];
  if (v46 >> 62)
  {
    swift_bridgeObjectRetain_n();
    unint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v47 = (uint64_t)result;
    long long v41 = v67;
    if (!result) {
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v47 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = (char *)swift_bridgeObjectRetain_n();
    long long v41 = v67;
    if (!v47) {
      goto LABEL_42;
    }
  }
  if (v47 >= 1)
  {
    uint64_t v48 = 0;
    do
    {
      if ((v46 & 0xC000000000000001) != 0) {
        id v49 = (id)MEMORY[0x2611848A0](v48, v46);
      }
      else {
        id v49 = *(id *)(v46 + 8 * v48 + 32);
      }
      id v50 = v49;
      ++v48;
      swift_beginAccess();
      swift_unknownObjectWeakAssign();
    }
    while (v47 != v48);
    goto LABEL_41;
  }
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_25C3D27D4()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for SGNode()
{
  return self;
}

uint64_t method lookup function for SGNode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SGNode);
}

uint64_t dispatch thunk of SGNode.__allocating_init(name:data:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(v3 + 120);
  char v5 = *(unsigned char *)(a3 + 80);
  long long v6 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v6;
  long long v7 = *(_OWORD *)(a3 + 48);
  void v9[2] = *(_OWORD *)(a3 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a3 + 64);
  char v10 = v5;
  return v4(a1, a2, v9);
}

uint64_t dispatch thunk of SGNode.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

unsigned char *storeEnumTagSinglePayload for SGNode.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C3D29B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SGNode.CodingKeys()
{
  return &type metadata for SGNode.CodingKeys;
}

uint64_t outlined init with take of BuiltInDefinition?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BuiltInDefinition?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _HashTable.update<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return _HashTable.update<A>(_:)(a1, a2, a3);
}

{
  return a1(a3 + 16, a3 + 32);
}

uint64_t static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(uint64_t a1, int64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int64_t v14 = dispatch thunk of Collection.count.getter();
  int64_t v15 = specialized static _HashTable.scale(forCapacity:)(v14);
  uint64_t v16 = 0;
  if (a3) {
    int64_t v17 = 0;
  }
  else {
    int64_t v17 = a2;
  }
  if (v17 <= v15) {
    int64_t v17 = v15;
  }
  if (v17 <= a4) {
    uint64_t v18 = a4;
  }
  else {
    uint64_t v18 = v17;
  }
  if (v18 >= 5)
  {
    uint64_t v16 = specialized _HashTable.init(scale:reservedScale:)(v18, a4);
    _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(a1, (void *)(v16 + 16), v16 + 32, a5, a6, a7);
  }
  return v16;
}

uint64_t static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)(char *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v67 = a8;
  LODWORD(v68) = a4;
  uint64_t v69 = a3;
  uint64_t v61 = a1;
  uint64_t v62 = a7;
  uint64_t v11 = *(void *)(*(void *)(a7 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  int64_t v14 = (char *)&v50 - v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  long long v55 = *(void (***)(char *, uint64_t))(v15 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  long long v63 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  long long v53 = (char *)&v50 - v19;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v18);
  long long v64 = (char *)&v50 - v21;
  uint64_t v22 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v22 - 8);
  objc_super v52 = (char *)&v50 - v23;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v24);
  char v59 = (char *)&v50 - v25;
  uint64_t v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v66 = swift_getAssociatedTypeWitness();
  uint64_t v51 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  uint64_t v65 = (char *)&v50 - v26;
  int64_t v27 = dispatch thunk of Collection.count.getter();
  int64_t v28 = specialized static _HashTable.scale(forCapacity:)(v27);
  int64_t v29 = v69;
  if (v68) {
    int64_t v29 = 0;
  }
  if (v29 <= v28) {
    int64_t v29 = v28;
  }
  if (v29 <= a5) {
    uint64_t v30 = a5;
  }
  else {
    uint64_t v30 = v29;
  }
  if (v30 <= 4)
  {
    if (dispatch thunk of Collection.count.getter() > 1)
    {
      uint64_t v71 = static Array._allocateUninitialized(_:)();
      Swift::Int v33 = dispatch thunk of Collection.count.getter();
      uint64_t v69 = type metadata accessor for Array();
      Array.reserveCapacity(_:)(v33);
      uint64_t v62 = v11;
      dispatch thunk of Collection.indices.getter();
      dispatch thunk of Sequence.makeIterator()();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v35 = v52;
      TupleTypeMetadata2 = AssociatedConformanceWitness;
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v36 = v20;
      objc_super v37 = (char *)(v20 + 48);
      long long v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
      uint64_t v39 = AssociatedTypeWitness;
      uint64_t v58 = v38;
      char v59 = v37;
      unsigned int v40 = v38(v35, 1, AssociatedTypeWitness);
      uint64_t v41 = v15;
      uint64_t v42 = v64;
      id v43 = v53;
      if (v40 != 1)
      {
        uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
        uint64_t v56 = v36 + 32;
        long long v57 = v44;
        objc_super v68 = (void (**)(char *))(v55 + 2);
        uint64_t v54 = (void (**)(char *, uint64_t))(v36 + 8);
        ++v55;
        while (1)
        {
          v57(v42, v35, v39);
          uint64_t v45 = a2;
          uint64_t v46 = a6;
          uint64_t v47 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
          uint64_t v48 = *v68;
          (*v68)(v43);
          v47(v70, 0);
          v70[0] = v71;
          swift_getWitnessTable();
          if (Sequence<>.contains(_:)()) {
            break;
          }
          ((void (*)(char *, char *, uint64_t))v48)(v63, v43, v41);
          uint64_t v42 = v64;
          Array.append(_:)();
          (*v55)(v43, v41);
          (*v54)(v42, v39);
          dispatch thunk of IteratorProtocol.next()();
          a6 = v46;
          a2 = v45;
          if (v58(v35, 1, v39) == 1) {
            goto LABEL_16;
          }
        }
        (*v55)(v43, v41);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v65, v66);
        swift_bridgeObjectRelease();
        v57(v61, v42, v39);
        return 0;
      }
LABEL_16:
      (*(void (**)(char *, uint64_t))(v51 + 8))(v65, v66);
      swift_bridgeObjectRelease();
    }
    dispatch thunk of Collection.endIndex.getter();
    return 0;
  }
  uint64_t v31 = specialized _HashTable.init(scale:reservedScale:)(v30, a5);
  id v32 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)(v32, a2, (void *)(v31 + 16), v31 + 32, a6, v62, v67);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v61, v32, AssociatedTypeWitness);
  return v31;
}

uint64_t _HashTable.read<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return _HashTable.update<A>(_:)(a1, a2, a3);
}

uint64_t _HashTable._storage.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *id v1 = a1;
  return result;
}

uint64_t (*_HashTable._storage.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.Storage.deinit()
{
  return v0;
}

uint64_t _HashTable.Storage.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t _HashTable.copy()(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (v1 & 0x3F) << v1;
  uint64_t v3 = v2 + 64;
  if (__OFADD__(v2, 64))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v2 + 63;
    if (v3 < 1) {
      uint64_t v5 = v3 + 62;
    }
    uint64_t v6 = v5 >> 6;
    type metadata accessor for _HashTable.Storage();
    size_t v7 = 8 * v6;
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = a1[3];
    *(void *)(v8 + 16) = v1;
    *(void *)(v8 + 24) = v9;
    if (v3 > -63)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)(v8 + 32);
      if (a1 + 4 >= (void *)&v11[v7] || v11 >= (char *)&a1[v7 / 8 + 4])
      {
        memcpy(v11, a1 + 4, v7);
        return v10;
      }
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

__n128 _HashTable.header.getter@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  swift_beginAccess();
  __n128 result = a1[1];
  *a2 = result;
  return result;
}

uint64_t (*_HashTable.header.modify())()
{
  return XMLParserDelegate.StringNode.children.modify;
}

__n128 _HashTable.header.setter(__n128 *a1, __n128 *a2)
{
  swift_beginAccess();
  __n128 result = *a1;
  a2[1] = *a1;
  return result;
}

uint64_t _HashTable.capacity.getter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  unint64_t v3 = *(void *)(a1 + 16) & 0x3FLL;
  if (v3 < 5) {
    return 15;
  }
  double v4 = (double)(1 << v3) * 0.75;
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  return (uint64_t)v4;
}

uint64_t _HashTable.minimumCapacity.getter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = 0;
  unint64_t v3 = *(void *)(a1 + 16) & 0x3FLL;
  if (v3 >= 5 && v3 != (*(void *)(a1 + 24) & 0x3FLL))
  {
    double v5 = (double)(1 << v3) * 0.25;
    if ((~*(void *)&v5 & 0x7FF0000000000000) != 0)
    {
      if (v5 > -9.22337204e18)
      {
        if (v5 < 9.22337204e18) {
          return (uint64_t)v5;
        }
LABEL_12:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t _HashTable.scale.getter(uint64_t a1)
{
  return *(void *)(a1 + 16) & 0x3FLL;
}

uint64_t _HashTable.reservedScale.getter(uint64_t a1)
{
  return *(void *)(a1 + 24) & 0x3FLL;
}

uint64_t _HashTable.bias.getter(uint64_t a1)
{
  return *(uint64_t *)(a1 + 24) >> 6;
}

uint64_t specialized _HashTable.init(scale:reservedScale:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (result << result) + 63;
  if (__OFADD__(result << result, 63))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = (result << result) + 126;
  if (v2 >= 0) {
    uint64_t v5 = (result << result) + 63;
  }
  uint64_t v6 = v5 >> 6;
  type metadata accessor for _HashTable.Storage();
  size_t v7 = 8 * v6;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4 | (result << 6);
  *(void *)(result + 24) = a2;
  if (v2 < -63) {
    goto LABEL_9;
  }
  uint64_t v8 = result;
  if ((unint64_t)(v2 + 63) >= 0x7F) {
    bzero((void *)(result + 32), v7);
  }
  return v8;
}

uint64_t type metadata accessor for _HashTable.Storage()
{
  uint64_t result = type metadata singleton initialization cache for _HashTable.Storage;
  if (!type metadata singleton initialization cache for _HashTable.Storage) {
    return swift_getSingletonMetadata();
  }
  return result;
}

__n128 sub_25C3D3870@<Q0>(__n128 **a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v3 = *a1;
  swift_beginAccess();
  __n128 result = v3[1];
  *a2 = result;
  return result;
}

uint64_t sub_25C3D38B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _HashTable()
{
  return &type metadata for _HashTable;
}

uint64_t type metadata completion function for _HashTable.Storage()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for _HashTable.Storage()
{
  return type metadata accessor for _HashTable.Storage();
}

uint64_t MetalShaderProgram.createLiteralValue(type:value:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 + 48);
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = result;
    *(void *)(v3 + 48) = v4 + 1;
    type metadata accessor for MetalLiteralValueNode();
    uint64_t v7 = swift_allocObject();
    swift_retain();
    outlined retain of SGDataTypeStorage(a2, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
    MetalLiteralValueNode.init(id:resultType:value:)(v4, v6, a2);
    uint64_t v8 = specialized MetalShaderProgram.add<A>(_:)(v7);
    swift_retain();
    swift_release();
    return v8;
  }
  return result;
}

uint64_t MetalShaderProgram.createCallFunction(resultType:functionName:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 + 48);
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = result;
    *(void *)(v4 + 48) = v5 + 1;
    type metadata accessor for MetalFunctionCallNode();
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = MEMORY[0x263F8EE78];
    *(unsigned char *)(v9 + 72) = 0;
    *(void *)(v9 + 40) = 0;
    *(void *)(v9 + 24) = v10;
    *(void *)(v9 + 32) = v8;
    *(void *)(v9 + 48) = 0;
    *(void *)(v9 + 56) = a2;
    *(void *)(v9 + 64) = a3;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    v11._uint64_t countAndFlagsBits = 0x6974636E75666E5CLL;
    v11._object = (void *)0xEA00000000006E6FLL;
    String.append(_:)(v11);
    swift_release();
    swift_beginAccess();
    *(void *)(v9 + 40) = a2;
    *(void *)(v9 + 48) = a3;
    swift_bridgeObjectRelease();
    *(void *)(v9 + 16) = v5;
    uint64_t v12 = specialized MetalShaderProgram.add<A>(_:)(v9);
    swift_retain();
    swift_release();
    return v12;
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = MEMORY[0x263F8EE78];
  unint64_t v17 = MEMORY[0x263F8EE78];
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v7 = (uint64_t (*)(long long *))result;
    unint64_t v5 = 0;
    uint64_t v8 = a3 + 32;
    unint64_t v9 = MEMORY[0x263F8EE78];
    uint64_t v13 = *(void *)(a3 + 16);
    int64_t v14 = (uint64_t (*)(long long *))result;
    while (v5 < *(void *)(a3 + 16))
    {
      outlined init with copy of MetalFunctionNode(v8, (uint64_t)v16);
      char v10 = v7(v16);
      if (v3)
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
        swift_release();
        swift_bridgeObjectRelease();
        return v5;
      }
      if (v10)
      {
        outlined init with take of MetalFunctionNode(v16, (uint64_t)v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
        }
        unint64_t v9 = v17;
        unint64_t v12 = *(void *)(v17 + 16);
        unint64_t v11 = *(void *)(v17 + 24);
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          unint64_t v9 = v17;
        }
        *(void *)(v9 + 16) = v12 + 1;
        uint64_t result = outlined init with take of MetalFunctionNode(v15, v9 + 40 * v12 + 32);
        uint64_t v6 = v13;
        uint64_t v7 = v14;
      }
      else
      {
        uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
      }
      ++v5;
      v8 += 40;
      if (v6 == v5)
      {
        unint64_t v5 = v17;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

uint64_t MetalShaderProgram.createRESurfaceShaderFunctionNode(named:paramsInput:uniformsInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *(void *)(v9 + 48);
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v11 = a7;
  uint64_t v14 = a6;
  uint64_t v12 = a5;
  uint64_t v13 = a4;
  uint64_t v8 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a1;
  uint64_t v21 = *(void *)(v9 + 48);
  *(void *)(v9 + 48) = v15 + 1;
  type metadata accessor for RESurfaceShaderFunctionNode();
  char v10 = (void *)swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of (name: String, type: MetalDataType)?(v14, v11);
  uint64_t v9 = a8;
  if (one-time initialization token for void != -1) {
LABEL_5:
  }
    swift_once();
  v10[10] = static MetalDataType.void;
  v10[12] = MEMORY[0x263F8EE78];
  v10[14] = 0;
  v10[13] = 0;
  void v10[2] = v20;
  v10[3] = v8;
  v10[4] = v19;
  v10[5] = v13;
  v10[6] = v12;
  v10[7] = v14;
  v10[8] = v11;
  v10[9] = v9;
  swift_beginAccess();
  v10[13] = v20;
  v10[14] = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  v10[11] = v21;
  uint64_t v17 = specialized MetalShaderProgram.add<A>(_:)((uint64_t)v10);
  swift_retain();
  swift_release();
  return v17;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17MetalFunctionNode_pG_AF0gH2IDVs5NeverOTg504_s11d7Graph05f34A7ProgramC13terminalNodesSayAA0C12gH76_pGyFAA0gH2IDVAaE_pcfu0_33_1b49366b6b5eb08d4ad03fe09aa17e46AaE_pAHTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = (void *)(a1 + 32);
    do
    {
      uint64_t v5 = v4[3];
      uint64_t v6 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v5);
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
      }
      unint64_t v9 = *(void *)(v11 + 16);
      unint64_t v8 = *(void *)(v11 + 24);
      if (v9 >= v8 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      }
      *(void *)(v11 + 16) = v9 + 1;
      *(void *)(v11 + 8 * v9 + 32) = v7;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t MetalShaderProgram.createGetArgument(resultType:argumentName:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3 + 48);
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = result;
    *(void *)(v3 + 48) = v4 + 1;
    type metadata accessor for MetalFunctionParameterNode();
    unint64_t v8 = (void *)swift_allocObject();
    uint64_t v9 = MEMORY[0x263F8EE78];
    v8[5] = 0;
    v8[3] = v9;
    v8[4] = v7;
    v8[6] = 0;
    v8[7] = a2;
    v8[8] = a3;
    swift_beginAccess();
    v8[5] = a2;
    v8[6] = a3;
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRelease();
    _OWORD v8[2] = v4;
    uint64_t v10 = specialized MetalShaderProgram.add<A>(_:)((uint64_t)v8);
    swift_retain();
    swift_release();
    return v10;
  }
  return result;
}

uint64_t MetalShaderProgram.createPassthrough(valueType:)(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 48);
  if (__OFADD__(v2, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    *(void *)(v1 + 48) = v2 + 1;
    type metadata accessor for MetalPassthroughNode();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 40) = 0;
    *(void *)(v4 + 48) = MEMORY[0x263F8EE78];
    *(unsigned char *)(v4 + 56) = 0;
    *(void *)(v4 + 16) = v2;
    *(void *)(v4 + 24) = v3;
    swift_retain();
    uint64_t v5 = specialized MetalShaderProgram.add<A>(_:)(v4);
    swift_retain();
    swift_release();
    return v5;
  }
  return result;
}

void *MetalShaderProgram.__allocating_init()()
{
  uint64_t v0 = (void *)swift_allocObject();
  uint64_t v1 = MEMORY[0x263F8EE78];
  v0[2] = MEMORY[0x263F8EE78];
  v0[3] = specialized Dictionary.init(dictionaryLiteral:)(v1);
  v0[4] = v1;
  v0[5] = v1;
  v0[6] = 1;
  return v0;
}

void *MetalShaderProgram.terminalNodes()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v0 + 120);
  uint64_t v3 = v2();
  uint64_t v17 = MEMORY[0x263F8EE78];
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = (void *)(v3 + 32);
    do
    {
      uint64_t v6 = v5[3];
      uint64_t v7 = v5[4];
      __swift_project_boxed_opaque_existential_1(v5, v6);
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 48))(v6, v7);
      specialized Array.append<A>(contentsOf:)(v8);
      v5 += 5;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    uint64_t v9 = v17;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
  }
  uint64_t v10 = specialized Set.init<A>(_:)(v9);
  uint64_t v11 = swift_bridgeObjectRelease();
  uint64_t v12 = ((uint64_t (*)(uint64_t))v2)(v11);
  uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17MetalFunctionNode_pG_AF0gH2IDVs5NeverOTg504_s11d7Graph05f34A7ProgramC13terminalNodesSayAA0C12gH76_pGyFAA0gH2IDVAaE_pcfu0_33_1b49366b6b5eb08d4ad03fe09aa17e46AaE_pAHTf3nnnpk_nTf1cn_n(v12);
  swift_bridgeObjectRelease();
  uint64_t v14 = specialized Set.init<A>(_:)(v13);
  swift_bridgeObjectRelease();
  if (*(void *)(v10 + 16) <= *(void *)(v14 + 16) >> 3) {
    specialized Set._subtract<A>(_:)(v10);
  }
  else {
    uint64_t v14 = specialized _NativeSet.subtracting<A>(_:)(v10, v14);
  }
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v15 = specialized Sequence.compactMap<A>(_:)(v14, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return v15;
}

uint64_t MetalShaderProgram.topologicalSort(from:)(void *a1)
{
  uint64_t v6 = MEMORY[0x263F8EE88];
  uint64_t v5 = MEMORY[0x263F8EE88];
  uint64_t v3 = MEMORY[0x263F8EE78];
  uint64_t v4 = MEMORY[0x263F8EE78];
  MetalShaderProgram._dfsHelper(node:visited:onStack:preOrder:postOrder:)(a1, &v6, &v5, &v4, &v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1) {
    return swift_bridgeObjectRelease();
  }
  else {
    return v3;
  }
}

uint64_t MetalShaderProgram.createFunctionDefinitionNode(argumentTypes:resultType:functionName:specifier:)(uint64_t result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 + 48);
  if (__OFADD__(v8, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = result;
    *(void *)(v7 + 48) = v8 + 1;
    type metadata accessor for MetalFunctionDefinitionNode();
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v15 = specialized MetalFunctionDefinitionNode.init(id:argumentTypes:resultType:functionName:specifier:)(v8, v14, a2, a3, a4, a5, a6);
    swift_release();
    uint64_t v16 = specialized MetalShaderProgram.add<A>(_:)((uint64_t)v15);
    swift_retain();
    swift_release();
    return v16;
  }
  return result;
}

uint64_t defaultCreateMetalInvocation(in:for:functionDefinitionName:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)a1 + 112))();
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 48))(v8, v9);
  swift_retain();
  uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph14FunctionNodeIDVG_AF05MetalfG0_psAE_pTg504_s11d19Graph09RESurfaceA12fg11C19generateI53Source2inyAA0gA8CompilerC_tKFAA0gdE0_pAA0dE2IDVKXEfU_AF0idR0CTf1cn_nTf4ng_n(v10, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v3) {
    return swift_release();
  }
  uint64_t v19 = (void *)MEMORY[0x263F8EE78];
  swift_retain();
  swift_retain();
  specialized Sequence.compactMap<A>(_:)(v11, v7, a1, &v19);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v13 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v16._uint64_t countAndFlagsBits = 40;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = v13;
  v17._object = v15;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 15145;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  swift_release();
  return a3;
}

uint64_t closure #1 in implicit closure #1 in closure #2 in defaultCreateMetalInvocation(in:for:functionDefinitionName:)(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  outlined init with copy of MetalFunctionNode((uint64_t)a1, (uint64_t)v56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasMetalInvocation);
  swift_dynamicCast();
  uint64_t v9 = *((void *)&v54 + 1);
  uint64_t v10 = v55;
  __swift_project_boxed_opaque_existential_1(&v53, *((uint64_t *)&v54 + 1));
  uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 8))(a2, v9, v10);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v53);
  if (!v4)
  {
    long long v57 = a4;
    outlined init with copy of MetalFunctionNode((uint64_t)a1, (uint64_t)v56);
    type metadata accessor for MetalLiteralValueNode();
    if (swift_dynamicCast())
    {
      swift_release();
      outlined init with copy of MetalFunctionNode((uint64_t)a1, (uint64_t)v56);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v56);
    }
    else
    {
      outlined init with copy of MetalFunctionNode((uint64_t)a1, (uint64_t)v56);
      outlined init with take of MetalFunctionNode(v56, (uint64_t)&v53);
      type metadata accessor for MetalFunctionParameterNode();
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        v52._uint64_t countAndFlagsBits = (*(uint64_t (**)(void *))(*(void *)a3 + 304))(a1);
        Swift::String v17 = v16;
        specialized Array.append<A>(contentsOf:)(v15);
        uint64_t v18 = a1[3];
        uint64_t v19 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v18);
        uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19);
        if (one-time initialization token for void != -1) {
          swift_once();
        }
        char v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 128))(static MetalDataType.void);
        swift_release();
        if (v21)
        {
          *(void *)&long long v53 = countAndFlagsBits;
          *((void *)&v53 + 1) = v13;
          v22._uint64_t countAndFlagsBits = 59;
          v22._object = (void *)0xE100000000000000;
          String.append(_:)(v22);
          long long v23 = v53;
          uint64_t v24 = v57;
          uint64_t v25 = *v57;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          void *v24 = v25;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
            void *v24 = v25;
          }
          uint64_t countAndFlagsBits = v52._countAndFlagsBits;
          unint64_t v28 = v25[2];
          unint64_t v27 = v25[3];
          if (v28 >= v27 >> 1)
          {
            uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v25);
            *long long v57 = v25;
          }
          _OWORD v25[2] = v28 + 1;
          *(_OWORD *)&v25[2 * v28 + 4] = v23;
        }
        else
        {
          uint64_t v29 = a1[3];
          uint64_t v30 = a1[4];
          __swift_project_boxed_opaque_existential_1(a1, v29);
          uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 16))(v29, v30);
          uint64_t v33 = *(void *)(v31 + 24);
          uint64_t v32 = *(void *)(v31 + 32);
          swift_bridgeObjectRetain();
          swift_release();
          *(void *)&long long v53 = v33;
          *((void *)&v53 + 1) = v32;
          v34._uint64_t countAndFlagsBits = 32;
          v34._object = (void *)0xE100000000000000;
          String.append(_:)(v34);
          v35._uint64_t countAndFlagsBits = v52._countAndFlagsBits;
          v35._object = v17;
          String.append(_:)(v35);
          v36._uint64_t countAndFlagsBits = 2112800;
          v36._object = (void *)0xE300000000000000;
          String.append(_:)(v36);
          v37._uint64_t countAndFlagsBits = countAndFlagsBits;
          v37._object = v13;
          String.append(_:)(v37);
          swift_bridgeObjectRelease();
          v38._uint64_t countAndFlagsBits = 59;
          v38._object = (void *)0xE100000000000000;
          String.append(_:)(v38);
          unsigned int v40 = (void *)*((void *)&v53 + 1);
          uint64_t v39 = v53;
          outlined init with copy of MetalFunctionNode((uint64_t)a1, (uint64_t)&v52._object);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalConstExprFunctionNode);
          if (swift_dynamicCast())
          {
            uint64_t v41 = *((void *)&v54 + 1);
            uint64_t v42 = v55;
            __swift_project_boxed_opaque_existential_1(&v53, *((uint64_t *)&v54 + 1));
            char v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 16))(v41, v42);
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v53);
            if (v43)
            {
              *(void *)&long long v53 = 0x70786574736E6F63;
              *((void *)&v53 + 1) = 0xEA00000000002072;
              v44._uint64_t countAndFlagsBits = v39;
              v44._object = v40;
              String.append(_:)(v44);
              swift_bridgeObjectRelease();
              unsigned int v40 = (void *)*((void *)&v53 + 1);
              uint64_t v39 = v53;
            }
          }
          else
          {
            uint64_t v55 = 0;
            long long v53 = 0u;
            long long v54 = 0u;
            outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v53, &demangling cache variable for type metadata for MetalConstExprFunctionNode?);
          }
          uint64_t v45 = v57;
          uint64_t v46 = *v57;
          char v47 = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v45 = v46;
          if ((v47 & 1) == 0)
          {
            uint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
            *uint64_t v45 = v46;
          }
          unint64_t v49 = v46[2];
          unint64_t v48 = v46[3];
          if (v49 >= v48 >> 1)
          {
            uint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v48 > 1), v49 + 1, 1, v46);
            *uint64_t v45 = v46;
          }
          void v46[2] = v49 + 1;
          uint64_t v50 = &v46[2 * v49];
          v50[4] = v39;
          v50[5] = v40;
          return v52._countAndFlagsBits;
        }
      }
    }
  }
  return countAndFlagsBits;
}

uint64_t (*MetalFunctionNodeBase.id.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionNodeBase.metalFunctionTemplate.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalFunctionNodeBase.inputs.setter(uint64_t a1)
{
  return MetalFunctionNodeBase.inputs.setter(a1, MEMORY[0x263F8EEA0]);
}

uint64_t (*MetalFunctionNodeBase.inputs.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionNodeBase.debugLabel.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalFunctionNodeBase.debugLabel.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalFunctionNodeBase.debugLabel.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionNodeBase.resultType.getter()
{
  return swift_retain();
}

uint64_t MetalFunctionNodeBase.resultType.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 64) = a1;
  return swift_release();
}

uint64_t (*MetalFunctionNodeBase.resultType.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionNodeBase.functionDefinitionName.getter()
{
  (*(void (**)(void))(*(void *)v0 + 120))();
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 25705;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0x6E6F6974636E7566;
}

void *MetalFunctionNodeBase.__allocating_init(id:resultType:template:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (void *)swift_allocObject();
  uint64_t v9 = MEMORY[0x263F8EE78];
  result[6] = 0;
  result[7] = 0;
  result[8] = a2;
  result[4] = a4;
  result[5] = v9;
  result[2] = a1;
  result[3] = a3;
  return result;
}

void *MetalFunctionNodeBase.init(id:resultType:template:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = 0;
  v4[5] = MEMORY[0x263F8EE78];
  v4[6] = 0;
  v4[8] = a2;
  _OWORD v4[3] = a3;
  v4[4] = a4;
  v4[2] = a1;
  return v4;
}

Swift::Void __swiftcall MetalFunctionNodeBase.setInputs(_:)(Swift::OpaquePointer a1)
{
  int64_t v2 = *((void *)a1._rawValue + 2);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v5 = (char *)a1._rawValue + 32;
    uint64_t v3 = v14;
    do
    {
      outlined init with copy of MetalFunctionNode((uint64_t)v5, (uint64_t)v11);
      uint64_t v6 = v12;
      uint64_t v7 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v3 = v14;
      }
      unint64_t v10 = *(void *)(v3 + 16);
      unint64_t v9 = *(void *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        uint64_t v3 = v14;
      }
      *(void *)(v3 + 16) = v10 + 1;
      *(void *)(v3 + 8 * v10 + 32) = v8;
      v5 += 40;
      --v2;
    }
    while (v2);
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 152))(v3);
}

uint64_t MetalFunctionNodeBase.generateMetalSource(in:)(void **a1)
{
  void (*v73)(uint64_t *__return_ptr, void);
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v71 = ((uint64_t (*)(void))(*a1)[14])();
  uint64_t v6 = (*(uint64_t (**)(void))(*v1 + 144))();
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v70 = v1;
    uint64_t v8 = 0;
    uint64_t v73 = *(void (**)(uint64_t *__return_ptr, void))(*a1[2] + 272);
    unint64_t v9 = (void *)MEMORY[0x263F8EE78];
    uint64_t v72 = *(void *)(v6 + 16);
    v73(&v75, *(void *)(v6 + 32));
    while (1)
    {
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      uint64_t v11 = v77;
      uint64_t v12 = v78;
      __swift_project_boxed_opaque_existential_1(&v75, v77);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
      if (one-time initialization token for void != -1) {
        swift_once();
      }
      uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)v13 + 128);
      uint64_t v15 = swift_retain();
      char v16 = v14(v15);
      swift_release();
      swift_release();
      if ((v16 & 1) == 0)
      {
        uint64_t v17 = v77;
        uint64_t v18 = v78;
        __swift_project_boxed_opaque_existential_1(&v75, v77);
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
        uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 240))(v19);
        uint64_t v22 = v21;
        swift_release();
        v23._uint64_t countAndFlagsBits = 9248;
        v23._object = (void *)0xE200000000000000;
        String.append(_:)(v23);
        uint64_t v79 = v8;
        v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        }
        unint64_t v26 = v9[2];
        unint64_t v25 = v9[3];
        if (v26 >= v25 >> 1) {
          unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v9);
        }
        void v9[2] = v26 + 1;
        unint64_t v10 = &v9[2 * v26];
        v10[4] = v20;
        v10[5] = v22;
        uint64_t v7 = v72;
      }
      ++v8;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v75);
      if (v7 == v8) {
        break;
      }
      v73(&v75, *(void *)(v6 + 8 * v8 + 32));
    }
    swift_bridgeObjectRelease();
    uint64_t v4 = v70;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v9 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v75 = (uint64_t)v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v74 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v28 = v27;
  uint64_t v29 = swift_bridgeObjectRelease();
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(*v4 + 168))(v29);
  if (v31)
  {
    uint64_t v32 = v4;
    uint64_t v75 = 2109231;
    uint64_t v76 = 0xE300000000000000;
    String.append(_:)(*(Swift::String *)&v30);
    swift_bridgeObjectRelease();
    uint64_t v33 = v75;
    unint64_t v34 = v76;
    Swift::String v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v37 = v35[2];
    unint64_t v36 = v35[3];
    if (v37 >= v36 >> 1) {
      Swift::String v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v35);
    }
    v35[2] = v37 + 1;
    Swift::String v38 = &v35[2 * v37];
    void v38[4] = v33;
    v38[5] = v34;
    uint64_t v4 = v32;
  }
  else
  {
    Swift::String v35 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v75 = 0;
  uint64_t v76 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  uint64_t v39 = swift_bridgeObjectRelease();
  uint64_t v75 = 0x20656E696C6E69;
  uint64_t v76 = 0xE700000000000000;
  uint64_t v40 = (*(uint64_t (**)(uint64_t))(*v4 + 192))(v39);
  uint64_t v41 = *(void *)(v40 + 24);
  uint64_t v42 = *(void **)(v40 + 32);
  swift_bridgeObjectRetain();
  swift_release();
  v43._uint64_t countAndFlagsBits = v41;
  v43._object = v42;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._uint64_t countAndFlagsBits = 32;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  v45._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*v4 + 216))();
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v46._uint64_t countAndFlagsBits = 40;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  v47._uint64_t countAndFlagsBits = v74;
  v47._object = v28;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = 0x202020200A7B2029;
  v48._object = (void *)0xE800000000000000;
  String.append(_:)(v48);
  uint64_t v49 = v4[3];
  uint64_t v50 = (void *)v4[4];
  swift_bridgeObjectRetain();
  v51._uint64_t countAndFlagsBits = v49;
  v51._object = v50;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  v52._uint64_t countAndFlagsBits = 32010;
  v52._object = (void *)0xE200000000000000;
  String.append(_:)(v52);
  uint64_t v53 = v75;
  unint64_t v54 = v76;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
  }
  unint64_t v56 = v35[2];
  unint64_t v55 = v35[3];
  if (v56 >= v55 >> 1) {
    Swift::String v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v55 > 1), v56 + 1, 1, v35);
  }
  v35[2] = v56 + 1;
  long long v57 = &v35[2 * v56];
  v57[4] = v53;
  v57[5] = v54;
  uint64_t v75 = (uint64_t)v35;
  uint64_t v58 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v60 = v59;
  swift_bridgeObjectRelease();
  uint64_t v61 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v71 + 352))(&v75);
  long long v63 = v62;
  long long v64 = *v62;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *long long v63 = v64;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
    *long long v63 = v64;
  }
  unint64_t v67 = v64[2];
  unint64_t v66 = v64[3];
  if (v67 >= v66 >> 1)
  {
    long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v66 > 1), v67 + 1, 1, v64);
    *long long v63 = v64;
  }
  v64[2] = v67 + 1;
  objc_super v68 = &v64[2 * v67];
  v68[4] = v58;
  v68[5] = v60;
  v61(&v75, 0);
  return swift_release();
}

uint64_t MetalFunctionNodeBase.createMetalInvocation(in:)(uint64_t a1)
{
  uint64_t v3 = v2;
  v10[3] = type metadata accessor for MetalFunctionNodeBase();
  v10[4] = &protocol witness table for MetalFunctionNodeBase;
  v10[0] = v1;
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 216);
  uint64_t v6 = swift_retain();
  uint64_t v7 = v5(v6);
  uint64_t v8 = defaultCreateMetalInvocation(in:for:functionDefinitionName:)(a1, v10, v7);
  if (!v3) {
    uint64_t v1 = v8;
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
  return v1;
}

uint64_t MetalFunctionNodeBase.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t MetalFunctionNodeBase.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MetalFunctionNode.resultType.getter in conformance MetalFunctionNodeBase()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t protocol witness for MetalFunctionNode.id.getter in conformance MetalFunctionNodeBase()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for MetalFunctionNode.id.setter in conformance MetalFunctionNodeBase()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t (*protocol witness for MetalFunctionNode.id.modify in conformance MetalFunctionNodeBase(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 136))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for MetalFunctionNode.inputs.getter in conformance MetalFunctionNodeBase()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t protocol witness for MetalFunctionNode.inputs.setter in conformance MetalFunctionNodeBase()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t (*protocol witness for MetalFunctionNode.inputs.modify in conformance MetalFunctionNodeBase(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 160))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for MetalSourceGenerator.generateMetalSource(in:) in conformance MetalFunctionNodeBase()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240))();
}

uint64_t protocol witness for HasMetalInvocation.createMetalInvocation(in:) in conformance MetalFunctionNodeBase()
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v0 + 248))();
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t protocol witness for HasDebugLabel.debugLabel.getter in conformance MetalFunctionNodeBase()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t protocol witness for HasDebugLabel.debugLabel.setter in conformance MetalFunctionNodeBase()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t (*protocol witness for HasDebugLabel.debugLabel.modify in conformance MetalFunctionNodeBase(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 184))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t MetalLiteralValueNode.id.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t MetalLiteralValueNode.id.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MetalLiteralValueNode.id.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t (*MetalLiteralValueNode.inputs.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalLiteralValueNode.resultType.getter()
{
  return swift_retain();
}

uint64_t MetalLiteralValueNode.resultType.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t (*MetalLiteralValueNode.resultType.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t (*MetalLiteralValueNode.debugLabel.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t key path setter for MetalLiteralValueNode.value : MetalLiteralValueNode(uint64_t a1, uint64_t a2)
{
  outlined init with take of SGDataTypeStorage(a1, (uint64_t)v5);
  uint64_t v3 = *(uint64_t (**)(unsigned char *))(**(void **)a2 + 232);
  outlined retain of SGDataTypeStorage((uint64_t)v5, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
  return v3(v5);
}

id MetalLiteralValueNode.value.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 64);
  uint64_t v4 = *(void **)(v1 + 72);
  uint64_t v5 = *(void *)(v1 + 80);
  uint64_t v6 = *(void *)(v1 + 88);
  uint64_t v7 = *(void *)(v1 + 96);
  uint64_t v8 = *(void *)(v1 + 104);
  uint64_t v9 = *(void *)(v1 + 112);
  uint64_t v10 = *(void *)(v1 + 120);
  char v11 = *(unsigned char *)(v1 + 128);
  id result = outlined copy of SGDataTypeStorage(v3, v4, v5, v6, v7, v8, v9, v10, v11);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  return result;
}

void MetalLiteralValueNode.value.setter(uint64_t a1)
{
  uint64_t v2 = v1 + 64;
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 64);
  uint64_t v4 = *(void **)(v1 + 72);
  uint64_t v5 = *(void *)(v1 + 80);
  uint64_t v6 = *(void *)(v1 + 88);
  uint64_t v7 = *(void *)(v1 + 96);
  uint64_t v8 = *(void *)(v1 + 104);
  uint64_t v10 = *(void *)(v1 + 112);
  uint64_t v9 = *(void *)(v1 + 120);
  char v11 = *(unsigned char *)(v1 + 128);
  outlined init with take of SGDataTypeStorage(a1, v2);
  outlined consume of SGDataTypeStorage(v3, v4, v5, v6, v7, v8, v10, v9, v11);
}

uint64_t (*MetalLiteralValueNode.value.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalLiteralValueNode.isConstExpr.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 129);
}

uint64_t MetalLiteralValueNode.isConstExpr.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 129) = a1;
  return result;
}

uint64_t (*MetalLiteralValueNode.isConstExpr.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalLiteralValueNode.__allocating_init(id:resultType:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  MetalLiteralValueNode.init(id:resultType:value:)(a1, a2, a3);
  return v6;
}

uint64_t type metadata accessor for MetalLiteralValueNode()
{
  return self;
}

uint64_t MetalLiteralValueNode.init(id:resultType:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(unsigned char *)(v3 + 129) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 40) = 0;
  uint64_t v8 = (uint64_t *)(v3 + 40);
  *(void *)(v3 + 24) = v7;
  *(void *)(v3 + 32) = a2;
  outlined init with take of SGDataTypeStorage(a3, v3 + 64);
  outlined init with take of SGDataTypeStorage(a3, (uint64_t)&v14);
  outlined retain of SGDataTypeStorage(a3, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
  outlined retain of SGDataTypeStorage(a3, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
  swift_retain();
  uint64_t v14 = String.init<A>(describing:)();
  uint64_t v15 = v9;
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = 0x61726574696C6E5CLL;
  v10._object = (void *)0xE90000000000006CLL;
  String.append(_:)(v10);
  outlined retain of SGDataTypeStorage(a3, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v11 = v14;
  uint64_t v12 = v15;
  swift_beginAccess();
  *uint64_t v8 = v11;
  *(void *)(v4 + 48) = v12;
  swift_bridgeObjectRelease();
  *(void *)(v4 + 16) = a1;
  return v4;
}

Swift::Void __swiftcall MetalLiteralValueNode.setInputs(_:)(Swift::OpaquePointer a1)
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)logger);
  oslog = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v6 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x7475706E49746573, 0xED0000293A5F2873, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_arrayDestroy();
    MEMORY[0x261185880](v4, -1, -1);
    MEMORY[0x261185880](v3, -1, -1);
  }
  else
  {
  }
}

uint64_t MetalLiteralValueNode.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of SGDataTypeStorage(*(void **)(v0 + 64), *(id *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(unsigned char *)(v0 + 128));
  return v0;
}

uint64_t MetalLiteralValueNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of SGDataTypeStorage(*(void **)(v0 + 64), *(id *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(unsigned char *)(v0 + 128));
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MetalFunctionNode.resultType.getter in conformance MetalLiteralValueNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t protocol witness for MetalFunctionNode.id.getter in conformance MetalLiteralValueNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for MetalFunctionNode.id.setter in conformance MetalLiteralValueNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t (*protocol witness for MetalFunctionNode.id.modify in conformance MetalLiteralValueNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 144))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for MetalFunctionNode.inputs.getter in conformance MetalLiteralValueNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t protocol witness for MetalFunctionNode.inputs.setter in conformance MetalLiteralValueNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t (*protocol witness for MetalFunctionNode.inputs.modify in conformance MetalLiteralValueNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 168))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for HasDebugLabel.debugLabel.getter in conformance MetalLiteralValueNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t protocol witness for HasDebugLabel.debugLabel.setter in conformance MetalLiteralValueNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))();
}

uint64_t (*protocol witness for HasDebugLabel.debugLabel.modify in conformance MetalLiteralValueNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 216))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for MetalConstExprFunctionNode.isConstExpr.getter in conformance MetalLiteralValueNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248))() & 1;
}

uint64_t protocol witness for MetalConstExprFunctionNode.isConstExpr.setter in conformance MetalLiteralValueNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256))();
}

uint64_t (*protocol witness for MetalConstExprFunctionNode.isConstExpr.modify in conformance MetalLiteralValueNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 264))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t (*MetalFunctionCallNode.id.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t (*MetalFunctionCallNode.inputs.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionCallNode.resultType.setter(uint64_t a1)
{
  return MetalFunctionCallNode.resultType.setter(a1, MEMORY[0x263F8EED8]);
}

uint64_t (*MetalFunctionCallNode.resultType.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t (*MetalFunctionCallNode.debugLabel.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionCallNode.functionName.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalFunctionCallNode.isConstExpr.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t MetalFunctionCallNode.isConstExpr.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 72) = a1;
  return result;
}

uint64_t (*MetalFunctionCallNode.isConstExpr.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionCallNode.__allocating_init(id:resultType:functionName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(unsigned char *)(v8 + 72) = 0;
  *(void *)(v8 + 40) = 0;
  *(void *)(v8 + 24) = v9;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 56) = a3;
  *(void *)(v8 + 64) = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = 0x6974636E75666E5CLL;
  v10._object = (void *)0xEA00000000006E6FLL;
  String.append(_:)(v10);
  swift_release();
  swift_beginAccess();
  *(void *)(v8 + 40) = a3;
  *(void *)(v8 + 48) = a4;
  swift_bridgeObjectRelease();
  *(void *)(v8 + 16) = a1;
  return v8;
}

uint64_t MetalFunctionCallNode.init(id:resultType:functionName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(v4 + 72) = 0;
  uint64_t v6 = MEMORY[0x263F8EE78];
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 24) = v6;
  *(void *)(v4 + 32) = a2;
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = a3;
  *(void *)(v4 + 64) = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = 0x6974636E75666E5CLL;
  v7._object = (void *)0xEA00000000006E6FLL;
  String.append(_:)(v7);
  swift_release();
  swift_beginAccess();
  *(void *)(v4 + 40) = a3;
  *(void *)(v4 + 48) = a4;
  swift_bridgeObjectRelease();
  *(void *)(v4 + 16) = a1;
  return v4;
}

Swift::Void __swiftcall MetalFunctionCallNode.setInputs(_:)(Swift::OpaquePointer a1)
{
  int64_t v2 = *((void *)a1._rawValue + 2);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v5 = (char *)a1._rawValue + 32;
    uint64_t v3 = v14;
    do
    {
      outlined init with copy of MetalFunctionNode((uint64_t)v5, (uint64_t)v11);
      uint64_t v6 = v12;
      uint64_t v7 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v3 = v14;
      }
      unint64_t v10 = *(void *)(v3 + 16);
      unint64_t v9 = *(void *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        uint64_t v3 = v14;
      }
      *(void *)(v3 + 16) = v10 + 1;
      *(void *)(v3 + 8 * v10 + 32) = v8;
      v5 += 40;
      --v2;
    }
    while (v2);
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 160))(v3);
}

uint64_t MetalFunctionCallNode.createMetalInvocation(in:)(uint64_t a1)
{
  uint64_t v3 = v2;
  v8[3] = type metadata accessor for MetalFunctionCallNode();
  v8[4] = &protocol witness table for MetalFunctionCallNode;
  v8[0] = v1;
  uint64_t v5 = *(void *)(v1 + 56);
  swift_retain();
  uint64_t v6 = defaultCreateMetalInvocation(in:for:functionDefinitionName:)(a1, v8, v5);
  if (!v3) {
    uint64_t v1 = v6;
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
  return v1;
}

uint64_t MetalFunctionCallNode.__deallocating_deinit()
{
  return MetalFunctionCallNode.__deallocating_deinit();
}

{
  uint64_t vars8;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MetalFunctionNode.resultType.getter in conformance MetalFunctionCallNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t protocol witness for MetalFunctionNode.id.getter in conformance MetalFunctionCallNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for MetalFunctionNode.id.setter in conformance MetalFunctionCallNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t (*protocol witness for MetalFunctionNode.id.modify in conformance MetalFunctionCallNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 144))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for MetalFunctionNode.inputs.getter in conformance MetalFunctionCallNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t protocol witness for MetalFunctionNode.inputs.setter in conformance MetalFunctionCallNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t (*protocol witness for MetalFunctionNode.inputs.modify in conformance MetalFunctionCallNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 168))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for HasDebugLabel.debugLabel.getter in conformance MetalFunctionCallNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t protocol witness for HasDebugLabel.debugLabel.setter in conformance MetalFunctionCallNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))();
}

uint64_t (*protocol witness for HasDebugLabel.debugLabel.modify in conformance MetalFunctionCallNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 216))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for HasMetalInvocation.createMetalInvocation(in:) in conformance MetalFunctionCallNode()
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v0 + 264))();
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t protocol witness for MetalConstExprFunctionNode.isConstExpr.getter in conformance MetalFunctionCallNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224))() & 1;
}

uint64_t protocol witness for MetalConstExprFunctionNode.isConstExpr.setter in conformance MetalFunctionCallNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232))();
}

uint64_t (*protocol witness for MetalConstExprFunctionNode.isConstExpr.modify in conformance MetalFunctionCallNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 240))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t (*MetalFunctionParameterNode.id.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t (*MetalFunctionParameterNode.inputs.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionParameterNode.resultType.getter()
{
  return swift_retain();
}

uint64_t (*MetalFunctionParameterNode.debugLabel.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionParameterNode.name.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalFunctionParameterNode.name.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalFunctionParameterNode.name.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

void *MetalFunctionParameterNode.__allocating_init(id:resultType:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v9 = MEMORY[0x263F8EE78];
  void v8[5] = 0;
  v8[3] = v9;
  v8[4] = a2;
  v8[6] = 0;
  v8[7] = a3;
  v8[8] = a4;
  swift_beginAccess();
  void v8[5] = a3;
  v8[6] = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _OWORD v8[2] = a1;
  return v8;
}

void *MetalFunctionParameterNode.init(id:resultType:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = MEMORY[0x263F8EE78];
  v4[5] = 0;
  _OWORD v4[3] = v8;
  v4[4] = a2;
  v4[6] = 0;
  v4[7] = a3;
  v4[8] = a4;
  swift_beginAccess();
  v4[5] = a3;
  v4[6] = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4[2] = a1;
  return v4;
}

uint64_t MetalFunctionParameterNode.createMetalInvocation(in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t MetalFunctionCallNode.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalFunctionParameterNode.__deallocating_deinit()
{
  return MetalFunctionCallNode.__deallocating_deinit();
}

uint64_t protocol witness for MetalFunctionNode.resultType.getter in conformance MetalFunctionParameterNode()
{
  return swift_retain();
}

uint64_t protocol witness for MetalFunctionNode.id.getter in conformance MetalFunctionParameterNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for MetalFunctionNode.id.setter in conformance MetalFunctionParameterNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t (*protocol witness for MetalFunctionNode.id.modify in conformance MetalFunctionParameterNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 136))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for MetalFunctionNode.inputs.getter in conformance MetalFunctionParameterNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t protocol witness for MetalFunctionNode.inputs.setter in conformance MetalFunctionParameterNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t (*protocol witness for MetalFunctionNode.inputs.modify in conformance MetalFunctionParameterNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 160))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for HasDebugLabel.debugLabel.getter in conformance MetalFunctionParameterNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t protocol witness for HasDebugLabel.debugLabel.setter in conformance MetalFunctionParameterNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t (*protocol witness for HasDebugLabel.debugLabel.modify in conformance MetalFunctionParameterNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 184))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for HasMetalInvocation.createMetalInvocation(in:) in conformance MetalFunctionParameterNode()
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v0 + 224))();
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t (*MetalFunctionDefinitionNode.id.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t (*MetalFunctionDefinitionNode.inputs.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionDefinitionNode.resultType.setter(uint64_t a1)
{
  return MetalFunctionCallNode.resultType.setter(a1, MEMORY[0x263F8EED8]);
}

uint64_t (*MetalFunctionDefinitionNode.resultType.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalLiteralValueNode.debugLabel.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalLiteralValueNode.debugLabel.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalFunctionDefinitionNode.debugLabel.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionDefinitionNode.specifier.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalFunctionDefinitionNode.specifier.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalFunctionDefinitionNode.specifier.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionDefinitionNode.argumentTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MetalFunctionDefinitionNode.argumentTypes.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 88) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalFunctionDefinitionNode.argumentTypes.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

void *MetalFunctionDefinitionNode.__allocating_init(id:argumentTypes:resultType:functionName:specifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unint64_t a7)
{
  swift_allocObject();
  uint64_t v14 = specialized MetalFunctionDefinitionNode.init(id:argumentTypes:resultType:functionName:specifier:)(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  return v14;
}

void *MetalFunctionDefinitionNode.init(id:argumentTypes:resultType:functionName:specifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7 = specialized MetalFunctionDefinitionNode.init(id:argumentTypes:resultType:functionName:specifier:)(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  return v7;
}

Swift::Void __swiftcall MetalFunctionDefinitionNode.setInputs(_:)(Swift::OpaquePointer a1)
{
  int64_t v2 = *((void *)a1._rawValue + 2);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v5 = (char *)a1._rawValue + 32;
    uint64_t v3 = v14;
    do
    {
      outlined init with copy of MetalFunctionNode((uint64_t)v5, (uint64_t)v11);
      uint64_t v6 = v12;
      uint64_t v7 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v3 = v14;
      }
      unint64_t v10 = *(void *)(v3 + 16);
      unint64_t v9 = *(void *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        uint64_t v3 = v14;
      }
      *(void *)(v3 + 16) = v10 + 1;
      *(void *)(v3 + 8 * v10 + 32) = v8;
      v5 += 40;
      --v2;
    }
    while (v2);
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 168))(v3);
}

uint64_t MetalFunctionDefinitionNode.functionDeclarationString()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 256))();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = (void *)MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(v1 + 48);
    do
    {
      uint64_t v7 = *(v4 - 2);
      uint64_t v6 = (void *)*(v4 - 1);
      uint64_t v8 = *v4;
      uint64_t v9 = one-time initialization token for void;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v9 != -1) {
        swift_once();
      }
      unint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 128);
      uint64_t v11 = swift_retain();
      char v12 = v10(v11);
      uint64_t v13 = swift_release();
      if ((v12 & 1) == 0)
      {
        uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 240))(v13);
        uint64_t v39 = v14;
        v15._uint64_t countAndFlagsBits = 32;
        v15._object = (void *)0xE100000000000000;
        String.append(_:)(v15);
        v16._uint64_t countAndFlagsBits = v7;
        v16._object = v6;
        String.append(_:)(v16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        }
        unint64_t v18 = v3[2];
        unint64_t v17 = v3[3];
        if (v18 >= v17 >> 1) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v3);
        }
        v3[2] = v18 + 1;
        uint64_t v5 = &v3[2 * v18];
        v5[4] = v37;
        v5[5] = v39;
      }
      swift_release();
      swift_bridgeObjectRelease();
      v4 += 3;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v19 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v21 = v20;
  uint64_t v22 = swift_bridgeObjectRelease();
  uint64_t v38 = (*(uint64_t (**)(uint64_t))(*v36 + 232))(v22);
  v23._uint64_t countAndFlagsBits = 32;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  uint64_t v24 = (*(uint64_t (**)(void))(*v36 + 184))();
  uint64_t v25 = *(void *)(v24 + 24);
  unint64_t v26 = *(void **)(v24 + 32);
  swift_bridgeObjectRetain();
  swift_release();
  v27._uint64_t countAndFlagsBits = v25;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 32;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  uint64_t v30 = v36[7];
  uint64_t v29 = (void *)v36[8];
  swift_bridgeObjectRetain();
  v31._uint64_t countAndFlagsBits = v30;
  v31._object = v29;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = 40;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  v33._uint64_t countAndFlagsBits = v19;
  v33._object = v21;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._uint64_t countAndFlagsBits = 41;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  return v38;
}

Swift::String __swiftcall MetalFunctionDefinitionNode.forwardDeclaration()()
{
  uint64_t v5 = MetalFunctionDefinitionNode.functionDeclarationString()();
  uint64_t v6 = v0;
  swift_bridgeObjectRetain();
  v1._uint64_t countAndFlagsBits = 59;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  uint64_t v2 = v5;
  uint64_t v3 = v6;
  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t MetalFunctionDefinitionNode.generateMetalSource(in:)(uint64_t a1)
{
  v2[2] = a1;
  return (*(uint64_t (**)(void *(*)(uint64_t), void *, uint64_t))(*(void *)a1 + 152))(partial apply for closure #1 in MetalFunctionDefinitionNode.generateMetalSource(in:), v2, MEMORY[0x263F8EE60] + 8);
}

void *closure #1 in MetalFunctionDefinitionNode.generateMetalSource(in:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = a2;
  uint64_t v9 = a2[2];
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)a3 + 160))();
  if (!*(void *)(v10 + 16))
  {
    __break(1u);
LABEL_40:
    unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(v10 + 32);
  swift_bridgeObjectRelease();
  Swift::String result = (*(void *(**)(void *__return_ptr, uint64_t))(*(void *)v9 + 272))(v78, v11);
  if (v3) {
    return result;
  }
  outlined init with copy of MetalFunctionNode((uint64_t)v78, (uint64_t)&v73);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasMetalInvocation);
  if (swift_dynamicCast())
  {
    outlined init with take of MetalFunctionNode((long long *)&v71[8], (uint64_t)&v74);
    uint64_t v13 = v76;
    uint64_t v14 = v77;
    __swift_project_boxed_opaque_existential_1(&v74, v76);
    uint64_t v5 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 8))(v7, v13, v14);
    uint64_t v7 = v15;
    uint64_t v4 = v16;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v74);
  }
  else
  {
    uint64_t v72 = 0;
    memset(&v71[8], 0, 32);
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v71[8], &demangling cache variable for type metadata for HasMetalInvocation?);
    uint64_t v5 = 0;
    uint64_t v7 = (void *)0xE000000000000000;
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v18 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_40;
  }
LABEL_7:
  unint64_t v20 = v18[2];
  unint64_t v19 = v18[3];
  uint64_t v81 = a1;
  if (v20 >= v19 >> 1) {
    unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v18);
  }
  void v18[2] = v20 + 1;
  uint64_t v21 = &v18[2 * v20];
  *(void *)uint64_t v71 = v5;
  v21[4] = v5;
  v21[5] = v7;
  uint64_t v22 = swift_bridgeObjectRelease();
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 208))(v22);
  if (v24)
  {
    uint64_t v74 = 2109231;
    unint64_t v75 = 0xE300000000000000;
    String.append(_:)(*(Swift::String *)&v23);
    swift_bridgeObjectRelease();
    uint64_t v26 = v74;
    unint64_t v25 = v75;
    Swift::String v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v29 = v27[2];
    unint64_t v28 = v27[3];
    if (v29 >= v28 >> 1) {
      Swift::String v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v27);
    }
    void v27[2] = v29 + 1;
    uint64_t v30 = &v27[2 * v29];
    v30[4] = v26;
    void v30[5] = v25;
  }
  else
  {
    Swift::String v27 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v74 = MetalFunctionDefinitionNode.functionDeclarationString()();
  unint64_t v75 = v31;
  swift_bridgeObjectRetain();
  v32._uint64_t countAndFlagsBits = 31520;
  v32._object = (void *)0xE200000000000000;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  uint64_t v33 = v74;
  unint64_t v34 = v75;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
  }
  unint64_t v36 = v27[2];
  unint64_t v35 = v27[3];
  if (v36 >= v35 >> 1) {
    Swift::String v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, v27);
  }
  void v27[2] = v36 + 1;
  uint64_t v37 = &v27[2 * v36];
  v37[4] = v33;
  void v37[5] = v34;
  uint64_t v73 = v27;
  uint64_t v38 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v38);
  uint64_t v39 = v79;
  uint64_t v40 = v80;
  __swift_project_boxed_opaque_existential_1(v78, v79);
  uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 16))(v39, v40);
  if (one-time initialization token for void != -1) {
    swift_once();
  }
  uint64_t v42 = *(uint64_t (**)(uint64_t))(*(void *)v41 + 128);
  uint64_t v43 = swift_retain();
  char v44 = v42(v43);
  swift_release();
  swift_release();
  if (v44)
  {
    swift_bridgeObjectRelease();
    Swift::String v45 = v73;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45);
    }
    uint64_t v46 = v81;
    unint64_t v48 = v45[2];
    unint64_t v47 = v45[3];
    unint64_t v49 = v48 + 1;
    if (v48 >= v47 >> 1) {
      Swift::String v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v47 > 1), v48 + 1, 1, v45);
    }
    v45[2] = v49;
    uint64_t v50 = &v45[2 * v48];
    v50[4] = *(void *)v71;
    Swift::String v51 = v50 + 4;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v74 = 0x206E7275746572;
    unint64_t v75 = 0xE700000000000000;
    v52._uint64_t countAndFlagsBits = *(void *)v71;
    v52._object = v7;
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    v53._uint64_t countAndFlagsBits = 59;
    v53._object = (void *)0xE100000000000000;
    String.append(_:)(v53);
    uint64_t v54 = v74;
    uint64_t v7 = (void *)v75;
    Swift::String v45 = v73;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45);
    }
    uint64_t v46 = v81;
    unint64_t v56 = v45[2];
    unint64_t v55 = v45[3];
    unint64_t v49 = v56 + 1;
    if (v56 >= v55 >> 1) {
      Swift::String v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v55 > 1), v56 + 1, 1, v45);
    }
    v45[2] = v49;
    long long v57 = &v45[2 * v56];
    v57[4] = v54;
    Swift::String v51 = v57 + 4;
  }
  v51[1] = v7;
  unint64_t v58 = v45[3];
  if (v49 >= v58 >> 1) {
    Swift::String v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v58 > 1), v49 + 1, 1, v45);
  }
  v45[2] = v49 + 1;
  uint64_t v59 = &v45[2 * v49];
  v59[4] = 125;
  v59[5] = 0xE100000000000000;
  uint64_t v74 = (uint64_t)v45;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v60 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v62 = v61;
  swift_bridgeObjectRelease();
  long long v63 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v46 + 352))(&v74);
  uint64_t v65 = v64;
  unint64_t v66 = *v64;
  char v67 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v65 = v66;
  if ((v67 & 1) == 0)
  {
    unint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v66[2] + 1, 1, v66);
    *uint64_t v65 = v66;
  }
  unint64_t v69 = v66[2];
  unint64_t v68 = v66[3];
  if (v69 >= v68 >> 1)
  {
    unint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v68 > 1), v69 + 1, 1, v66);
    *uint64_t v65 = v66;
  }
  v66[2] = v69 + 1;
  uint64_t v70 = &v66[2 * v69];
  uint64_t v70[4] = v60;
  v70[5] = v62;
  v63(&v74, 0);
  return (void *)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v78);
}

uint64_t MetalFunctionDefinitionNode.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalFunctionDefinitionNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MetalFunctionNode.resultType.getter in conformance MetalFunctionDefinitionNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t protocol witness for MetalFunctionNode.id.getter in conformance MetalFunctionDefinitionNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t protocol witness for MetalFunctionNode.id.setter in conformance MetalFunctionDefinitionNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t (*protocol witness for MetalFunctionNode.id.modify in conformance MetalFunctionDefinitionNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 152))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for MetalFunctionNode.inputs.getter in conformance MetalFunctionDefinitionNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t protocol witness for MetalFunctionNode.inputs.setter in conformance MetalFunctionDefinitionNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t (*protocol witness for MetalFunctionNode.inputs.modify in conformance MetalFunctionDefinitionNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 176))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for HasDebugLabel.debugLabel.getter in conformance MetalFunctionDefinitionNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))();
}

uint64_t protocol witness for HasDebugLabel.debugLabel.setter in conformance MetalFunctionDefinitionNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216))();
}

uint64_t (*protocol witness for HasDebugLabel.debugLabel.modify in conformance MetalFunctionDefinitionNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 224))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for MetalSourceGenerator.generateMetalSource(in:) in conformance MetalFunctionDefinitionNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 312))();
}

uint64_t (*MetalStructGetterOffsetNode.id.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t (*MetalStructGetterOffsetNode.inputs.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalStructGetterOffsetNode.inputType.setter(uint64_t a1)
{
  return MetalFunctionCallNode.resultType.setter(a1, MEMORY[0x263F8EED8]);
}

uint64_t (*MetalStructGetterOffsetNode.inputType.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalStructGetterOffsetNode.resultType.setter(uint64_t a1)
{
  return MetalFunctionNodeBase.inputs.setter(a1, MEMORY[0x263F8EED8]);
}

uint64_t (*MetalStructGetterOffsetNode.resultType.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalStructGetterOffsetNode.offset.getter()
{
  return *(unsigned int *)(v0 + 48);
}

uint64_t MetalStructGetterOffsetNode.debugLabel.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalStructGetterOffsetNode.debugLabel.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalStructGetterOffsetNode.debugLabel.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalStructGetterOffsetNode.__allocating_init(id:inputType:resultType:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = swift_allocObject();
  MetalStructGetterOffsetNode.init(id:inputType:resultType:offset:)(a1, a2, a3, a4);
  return v8;
}

uint64_t MetalStructGetterOffsetNode.init(id:inputType:resultType:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = MEMORY[0x263F8EE78];
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 32) = a2;
  *(void *)(v4 + 40) = a3;
  *(void *)(v4 + 24) = v6;
  *(_DWORD *)(v4 + 48) = a4;
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = 0x657366666F204020;
  v7._object = (void *)0xEA00000000002074;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v4 + 56) = v10;
  *(void *)(v4 + 64) = v11;
  swift_bridgeObjectRelease();
  *(void *)(v4 + 16) = a1;
  return v4;
}

Swift::Void __swiftcall MetalStructGetterOffsetNode.setInputs(_:)(Swift::OpaquePointer a1)
{
  int64_t v2 = *((void *)a1._rawValue + 2);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v5 = (char *)a1._rawValue + 32;
    uint64_t v3 = v14;
    do
    {
      outlined init with copy of MetalFunctionNode((uint64_t)v5, (uint64_t)v11);
      uint64_t v6 = v12;
      uint64_t v7 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v3 = v14;
      }
      unint64_t v10 = *(void *)(v3 + 16);
      unint64_t v9 = *(void *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        uint64_t v3 = v14;
      }
      *(void *)(v3 + 16) = v10 + 1;
      *(void *)(v3 + 8 * v10 + 32) = v8;
      v5 += 40;
      --v2;
    }
    while (v2);
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 160))(v3);
}

uint64_t MetalStructGetterOffsetNode.createMetalInvocation(in:)(uint64_t a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 152))();
  swift_retain();
  uint64_t v7 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph14FunctionNodeIDVG_AF05MetalfG0_psAE_pTg504_s11d19Graph09RESurfaceA12fg11C19generateI53Source2inyAA0gA8CompilerC_tKFAA0gdE0_pAA0dE2IDVKXEfU_AF0idR0CTf1cn_nTf4ng_n((uint64_t)v6, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v2) {
    return (uint64_t)v7;
  }
  if (!v7[2])
  {
    __break(1u);
    goto LABEL_17;
  }
  outlined init with copy of MetalFunctionNode((uint64_t)(v7 + 4), (uint64_t)v51);
  uint64_t v8 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)v4 + 176))(v8);
  type metadata accessor for MetalDataType.Pointer();
  uint64_t v9 = swift_dynamicCastClass();
  swift_release();
  if (v9)
  {
    outlined init with copy of MetalFunctionNode((uint64_t)v51, (uint64_t)&v49);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasMetalInvocation);
    swift_dynamicCast();
    uint64_t v10 = v47;
    uint64_t v11 = v48;
    __swift_project_boxed_opaque_existential_1(v46, v47);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 8))(a1, v10, v11);
    uint64_t v6 = v14;
    uint64_t v52 = v12;
    uint64_t v15 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v46);
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)v4 + 200);
    uint64_t v7 = (void *)((uint64_t (*)(uint64_t))v3)(v15);
    if (one-time initialization token for color3 == -1)
    {
LABEL_7:
      Swift::String v16 = *(uint64_t (**)(uint64_t))(*v7 + 128);
      uint64_t v17 = swift_retain();
      char v18 = v16(v17);
      swift_release();
      uint64_t v19 = swift_release();
      if (v18)
      {
        uint64_t v49 = 0;
        unint64_t v50 = 0xE000000000000000;
        _StringGuts.grow(_:)(32);
        uint64_t v20 = v3();
        uint64_t v21 = *(void *)(v20 + 24);
        unint64_t v22 = *(void *)(v20 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v49 = v21;
        unint64_t v50 = v22;
        uint64_t v23 = "(*(constant float3*)(";
      }
      else
      {
        uint64_t v24 = ((uint64_t (*)(uint64_t))v3)(v19);
        if (one-time initialization token for color4 != -1) {
          swift_once();
        }
        unint64_t v25 = *(uint64_t (**)(uint64_t))(*(void *)v24 + 128);
        uint64_t v26 = swift_retain();
        char v27 = v25(v26);
        swift_release();
        swift_release();
        if ((v27 & 1) == 0)
        {
          uint64_t v49 = 0;
          unint64_t v50 = 0xE000000000000000;
          _StringGuts.grow(_:)(24);
          uint64_t v37 = swift_bridgeObjectRelease();
          uint64_t v49 = 0x6174736E6F63282ALL;
          unint64_t v50 = 0xEB0000000020746ELL;
          uint64_t v38 = ((uint64_t (*)(uint64_t))v3)(v37);
          uint64_t v39 = *(void *)(v38 + 24);
          uint64_t v40 = *(void **)(v38 + 32);
          swift_bridgeObjectRetain();
          swift_release();
          v41._uint64_t countAndFlagsBits = v39;
          v41._object = v40;
          String.append(_:)(v41);
          swift_bridgeObjectRelease();
          v42._uint64_t countAndFlagsBits = 2631978;
          v42._object = (void *)0xE300000000000000;
          String.append(_:)(v42);
          v43._uint64_t countAndFlagsBits = v52;
          v43._object = v6;
          String.append(_:)(v43);
          swift_bridgeObjectRelease();
          v44._uint64_t countAndFlagsBits = 2108192;
          v44._object = (void *)0xE300000000000000;
          String.append(_:)(v44);
          LODWORD(v46[0]) = v4[12];
          v45._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v45);
          swift_bridgeObjectRelease();
          uint64_t v35 = 41;
          unint64_t v36 = 0xE100000000000000;
          goto LABEL_15;
        }
        uint64_t v49 = 0;
        unint64_t v50 = 0xE000000000000000;
        _StringGuts.grow(_:)(32);
        uint64_t v28 = v3();
        uint64_t v29 = *(void *)(v28 + 24);
        unint64_t v30 = *(void *)(v28 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v49 = v29;
        unint64_t v50 = v30;
        uint64_t v23 = "(*(constant float4*)(";
      }
      v31._object = (void *)((unint64_t)(v23 - 32) | 0x8000000000000000);
      v31._uint64_t countAndFlagsBits = 0xD000000000000015;
      String.append(_:)(v31);
      v32._uint64_t countAndFlagsBits = v52;
      v32._object = v6;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._uint64_t countAndFlagsBits = 2108192;
      v33._object = (void *)0xE300000000000000;
      String.append(_:)(v33);
      LODWORD(v46[0]) = v4[12];
      v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      uint64_t v35 = 10537;
      unint64_t v36 = 0xE200000000000000;
LABEL_15:
      String.append(_:)(*(Swift::String *)&v35);
      uint64_t v7 = (void *)v49;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v51);
      return (uint64_t)v7;
    }
LABEL_17:
    swift_once();
    goto LABEL_7;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t MetalStructGetterOffsetNode.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalStructGetterOffsetNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MetalFunctionNode.resultType.getter in conformance MetalStructGetterOffsetNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t protocol witness for MetalFunctionNode.id.getter in conformance MetalStructGetterOffsetNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for MetalFunctionNode.id.setter in conformance MetalStructGetterOffsetNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t (*protocol witness for MetalFunctionNode.id.modify in conformance MetalStructGetterOffsetNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 144))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for MetalFunctionNode.inputs.getter in conformance MetalStructGetterOffsetNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t protocol witness for MetalFunctionNode.inputs.setter in conformance MetalStructGetterOffsetNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t (*protocol witness for MetalFunctionNode.inputs.modify in conformance MetalStructGetterOffsetNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 168))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for HasDebugLabel.debugLabel.getter in conformance MetalStructGetterOffsetNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224))();
}

uint64_t protocol witness for HasDebugLabel.debugLabel.setter in conformance MetalStructGetterOffsetNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232))();
}

uint64_t (*protocol witness for HasDebugLabel.debugLabel.modify in conformance MetalStructGetterOffsetNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 240))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for HasMetalInvocation.createMetalInvocation(in:) in conformance MetalStructGetterOffsetNode()
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v0 + 264))();
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t (*MetalStructGetterNode.id.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalLiteralValueNode.inputs.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalStructGetterNode.inputs.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalFunctionCallNode.resultType.getter()
{
  return swift_retain();
}

uint64_t MetalStructGetterNode.inputType.setter(uint64_t a1)
{
  return MetalFunctionCallNode.resultType.setter(a1, MEMORY[0x263F8EED8]);
}

uint64_t (*MetalStructGetterNode.inputType.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalStructGetterOffsetNode.resultType.getter()
{
  return swift_retain();
}

uint64_t MetalStructGetterNode.resultType.setter(uint64_t a1)
{
  return MetalFunctionNodeBase.inputs.setter(a1, MEMORY[0x263F8EED8]);
}

uint64_t (*MetalStructGetterNode.resultType.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalStructGetterNode.fieldName.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalStructGetterNode.debugLabel.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalStructGetterNode.debugLabel.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalStructGetterNode.debugLabel.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalStructGetterNode.__allocating_init(id:inputType:resultType:fieldName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = swift_allocObject();
  MetalStructGetterNode.init(id:inputType:resultType:fieldName:)(a1, a2, a3, a4, a5);
  return v10;
}

void *MetalStructGetterNode.init(id:inputType:resultType:fieldName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = MEMORY[0x263F8EE78];
  v5[9] = 0;
  v5[8] = 0;
  _OWORD v5[3] = v9;
  v5[4] = a2;
  v5[5] = a3;
  v5[6] = a4;
  v5[7] = a5;
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v14 = *(void *)(a2 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = 46;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = a4;
  v11._object = a5;
  String.append(_:)(v11);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v5[8] = v13;
  v5[9] = v14;
  swift_bridgeObjectRelease();
  v5[2] = a1;
  return v5;
}

Swift::Void __swiftcall MetalStructGetterNode.setInputs(_:)(Swift::OpaquePointer a1)
{
  int64_t v2 = *((void *)a1._rawValue + 2);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v5 = (char *)a1._rawValue + 32;
    uint64_t v3 = v14;
    do
    {
      outlined init with copy of MetalFunctionNode((uint64_t)v5, (uint64_t)v11);
      uint64_t v6 = v12;
      uint64_t v7 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v3 = v14;
      }
      unint64_t v10 = *(void *)(v3 + 16);
      unint64_t v9 = *(void *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        uint64_t v3 = v14;
      }
      *(void *)(v3 + 16) = v10 + 1;
      *(void *)(v3 + 8 * v10 + 32) = v8;
      v5 += 40;
      --v2;
    }
    while (v2);
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 160))(v3);
}

void *MetalStructGetterNode.createMetalInvocation(in:)(uint64_t a1)
{
  uint64_t v5 = v1;
  uint64_t v7 = (*(uint64_t (**)(void))(*v1 + 152))();
  swift_retain();
  uint64_t v8 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph14FunctionNodeIDVG_AF05MetalfG0_psAE_pTg504_s11d19Graph09RESurfaceA12fg11C19generateI53Source2inyAA0gA8CompilerC_tKFAA0gdE0_pAA0dE2IDVKXEfU_AF0idR0CTf1cn_nTf4ng_n(v7, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v2) {
    return v8;
  }
  if (v8[2])
  {
    outlined init with copy of MetalFunctionNode((uint64_t)(v8 + 4), (uint64_t)v48);
    uint64_t v9 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*v5 + 176))(v9);
    type metadata accessor for MetalDataType.Reference();
    if (swift_dynamicCastClass())
    {
      swift_release();
      unint64_t v10 = 0xE100000000000000;
      uint64_t v11 = 46;
    }
    else
    {
      type metadata accessor for MetalDataType.Pointer();
      uint64_t v12 = swift_dynamicCastClass();
      swift_release();
      if (v12) {
        uint64_t v11 = 15917;
      }
      else {
        uint64_t v11 = 46;
      }
      if (v12) {
        unint64_t v10 = 0xE200000000000000;
      }
      else {
        unint64_t v10 = 0xE100000000000000;
      }
    }
    outlined init with copy of MetalFunctionNode((uint64_t)v48, (uint64_t)&v46);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasMetalInvocation);
    swift_dynamicCast();
    uint64_t v13 = v44;
    uint64_t v14 = v45;
    __swift_project_boxed_opaque_existential_1(v43, v44);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 8))(a1, v13, v14);
    uint64_t v3 = v17;
    uint64_t v41 = v15;
    uint64_t v42 = v11;
    uint64_t v49 = (void *)v10;
    uint64_t v18 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v43);
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*v5 + 200);
    uint64_t v8 = (void *)v4(v18);
    if (one-time initialization token for color3 == -1) {
      goto LABEL_14;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_14:
  uint64_t v19 = *(uint64_t (**)(uint64_t))(*v8 + 128);
  uint64_t v20 = swift_retain();
  char v21 = v19(v20);
  swift_release();
  uint64_t v22 = swift_release();
  if (v21) {
    goto LABEL_18;
  }
  uint64_t v23 = v4(v22);
  if (one-time initialization token for color4 != -1) {
    swift_once();
  }
  uint64_t v24 = *(uint64_t (**)(uint64_t))(*(void *)v23 + 128);
  uint64_t v25 = swift_retain();
  char v26 = v24(v25);
  swift_release();
  uint64_t v22 = swift_release();
  if (v26)
  {
LABEL_18:
    uint64_t v27 = v4(v22);
    uint64_t v29 = *(void **)(v27 + 24);
    uint64_t v28 = *(void **)(v27 + 32);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v46 = v29;
    uint64_t v47 = v28;
    v30._uint64_t countAndFlagsBits = 40;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = v41;
    v31._object = v3;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = v42;
    v32._object = v49;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    uint64_t v33 = v5[6];
    Swift::String v34 = (void *)v5[7];
    swift_bridgeObjectRetain();
    v35._uint64_t countAndFlagsBits = v33;
    v35._object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 41;
    v36._object = (void *)0xE100000000000000;
    String.append(_:)(v36);
  }
  else
  {
    v37._uint64_t countAndFlagsBits = v42;
    uint64_t v46 = (void *)v41;
    uint64_t v47 = v3;
    v37._object = v49;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    uint64_t v38 = v5[6];
    uint64_t v39 = (void *)v5[7];
    swift_bridgeObjectRetain();
    v40._uint64_t countAndFlagsBits = v38;
    v40._object = v39;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = v46;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
  return v8;
}

uint64_t MetalStructGetterNode.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalStructGetterNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MetalFunctionNode.resultType.getter in conformance MetalStructGetterNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t protocol witness for MetalFunctionNode.id.getter in conformance MetalStructGetterNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for MetalFunctionNode.id.setter in conformance MetalStructGetterNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t (*protocol witness for MetalFunctionNode.id.modify in conformance MetalStructGetterNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 144))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for MetalFunctionNode.inputs.getter in conformance MetalStructGetterNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t protocol witness for MetalFunctionNode.inputs.setter in conformance MetalStructGetterNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t (*protocol witness for MetalFunctionNode.inputs.modify in conformance MetalStructGetterNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 168))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for HasDebugLabel.debugLabel.getter in conformance MetalStructGetterNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224))();
}

uint64_t protocol witness for HasDebugLabel.debugLabel.setter in conformance MetalStructGetterNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232))();
}

uint64_t (*protocol witness for HasDebugLabel.debugLabel.modify in conformance MetalStructGetterNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 240))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for HasMetalInvocation.createMetalInvocation(in:) in conformance MetalStructGetterNode()
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v0 + 264))();
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t MetalPassthroughNode.id.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t MetalPassthroughNode.id.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MetalPassthroughNode.id.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalPassthroughNode.resultType.getter()
{
  return swift_retain();
}

uint64_t MetalPassthroughNode.debugLabel.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalPassthroughNode.debugLabel.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalPassthroughNode.debugLabel.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalPassthroughNode.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MetalPassthroughNode.inputs.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MetalPassthroughNode.inputs.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalPassthroughNode.isConstExpr.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t MetalPassthroughNode.isConstExpr.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 56) = a1;
  return result;
}

uint64_t (*MetalPassthroughNode.isConstExpr.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

uint64_t MetalPassthroughNode.__allocating_init(id:resultType:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  uint64_t v5 = MEMORY[0x263F8EE78];
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = v5;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t MetalPassthroughNode.init(id:resultType:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MEMORY[0x263F8EE78];
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = v3;
  *(unsigned char *)(v2 + 56) = 0;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t MetalPassthroughNode.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalPassthroughNode.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MetalFunctionNode.resultType.getter in conformance MetalPassthroughNode()
{
  return swift_retain();
}

uint64_t protocol witness for MetalFunctionNode.id.getter in conformance MetalPassthroughNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for MetalFunctionNode.id.setter in conformance MetalPassthroughNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t (*protocol witness for MetalFunctionNode.id.modify in conformance MetalPassthroughNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 136))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for MetalFunctionNode.inputs.getter in conformance MetalPassthroughNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t protocol witness for MetalFunctionNode.inputs.setter in conformance MetalPassthroughNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t (*protocol witness for MetalFunctionNode.inputs.modify in conformance MetalPassthroughNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 184))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for HasDebugLabel.debugLabel.getter in conformance MetalPassthroughNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t protocol witness for HasDebugLabel.debugLabel.setter in conformance MetalPassthroughNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t (*protocol witness for HasDebugLabel.debugLabel.modify in conformance MetalPassthroughNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 160))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for MetalConstExprFunctionNode.isConstExpr.getter in conformance MetalPassthroughNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))() & 1;
}

uint64_t protocol witness for MetalConstExprFunctionNode.isConstExpr.setter in conformance MetalPassthroughNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t (*protocol witness for MetalConstExprFunctionNode.isConstExpr.modify in conformance MetalPassthroughNode(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 208))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t MetalShaderProgram.createGetField(inputType:resultType:fieldName:)(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 + 48);
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = result;
    *(void *)(v5 + 48) = v6 + 1;
    type metadata accessor for MetalStructGetterNode();
    uint64_t v11 = swift_allocObject();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    MetalStructGetterNode.init(id:inputType:resultType:fieldName:)(v6, v10, a2, a3, a4);
    uint64_t v12 = specialized MetalShaderProgram.add<A>(_:)(v11);
    swift_retain();
    swift_release();
    return v12;
  }
  return result;
}

uint64_t MetalShaderProgram.createStructGetterNode(inputType:resultType:offset:)(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 + 48);
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = result;
    *(void *)(v4 + 48) = v5 + 1;
    type metadata accessor for MetalStructGetterOffsetNode();
    uint64_t v9 = swift_allocObject();
    swift_retain();
    swift_retain();
    MetalStructGetterOffsetNode.init(id:inputType:resultType:offset:)(v5, v8, a2, a3);
    uint64_t v10 = specialized MetalShaderProgram.add<A>(_:)(v9);
    swift_retain();
    swift_release();
    return v10;
  }
  return result;
}

uint64_t key path setter for MetalShaderProgram.nodes : MetalShaderProgram(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 16) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t MetalShaderProgram.nodes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for MetalShaderProgram.nodeMap : MetalShaderProgram(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 24) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t MetalLiteralValueNode.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MetalShaderProgram.customFragmentShaderConstants.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MetalShaderProgram.customFragmentShaderConstants.setter(uint64_t a1)
{
  return MetalFunctionCallNode.resultType.setter(a1, MEMORY[0x263F8EEA0]);
}

uint64_t MetalFunctionCallNode.resultType.setter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = a1;
  return a2(v5);
}

uint64_t (*MetalShaderProgram.customFragmentShaderConstants.modify())()
{
  return XMLParserDelegate.StringNode.children.modify;
}

uint64_t MetalFunctionNodeBase.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MetalShaderProgram.customMetalContent.setter(uint64_t a1)
{
  return MetalFunctionNodeBase.inputs.setter(a1, MEMORY[0x263F8EEA0]);
}

uint64_t MetalFunctionNodeBase.inputs.setter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 40);
  *(void *)(v2 + 40) = a1;
  return a2(v5);
}

uint64_t (*MetalShaderProgram.customMetalContent.modify())()
{
  return XMLParserDelegate.Element.children.modify;
}

void *MetalShaderProgram.importPaths.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 120))();
  uint64_t v2 = MEMORY[0x263F8EE78];
  Swift::String v31 = (void *)MEMORY[0x263F8EE78];
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = v1 + 32;
    do
    {
      outlined init with copy of MetalFunctionNode(v4, (uint64_t)v28);
      outlined init with copy of MetalFunctionNode((uint64_t)v28, (uint64_t)&v24);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
      if (v25)
      {
        outlined init with take of MetalFunctionNode(&v24, (uint64_t)v27);
        outlined init with take of MetalFunctionNode(v27, (uint64_t)&v24);
        uint64_t v5 = v31;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
          Swift::String v31 = v5;
        }
        unint64_t v7 = v5[2];
        unint64_t v6 = v5[3];
        if (v7 >= v6 >> 1) {
          Swift::String v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
        }
        uint64_t v8 = v25;
        uint64_t v9 = v26;
        uint64_t v10 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v24, v25);
        MEMORY[0x270FA5388](v10);
        uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v13 + 16))(v12);
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, (uint64_t)v12, (uint64_t *)&v31, v8, v9);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v24);
      }
      else
      {
        outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v24, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
      }
      v4 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    uint64_t v14 = (uint64_t)v31;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = MEMORY[0x263F8EE78];
  }
  *(void *)&v27[0] = v2;
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    uint64_t v16 = v14 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of MetalFunctionNode(v16, (uint64_t)v28);
      uint64_t v17 = v29;
      uint64_t v18 = v30;
      __swift_project_boxed_opaque_existential_1(v28, v29);
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
      specialized Array.append<A>(contentsOf:)(v19);
      v16 += 40;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease_n();
    uint64_t v20 = *(void *)&v27[0];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = MEMORY[0x263F8EE78];
  }
  uint64_t v21 = specialized Set.init<A>(_:)(v20);
  swift_bridgeObjectRelease();
  uint64_t v22 = specialized _copyCollectionToContiguousArray<A>(_:)(v21);
  swift_bridgeObjectRelease();
  return v22;
}

void *MetalShaderProgram.init()()
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  v0[2] = MEMORY[0x263F8EE78];
  v0[3] = specialized Dictionary.init(dictionaryLiteral:)(v1);
  v0[4] = v1;
  v0[5] = v1;
  v0[6] = 1;
  return v0;
}

uint64_t MetalShaderProgram.generateMetalSource(in:)(uint64_t a1)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v1 + 120))();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v20 = v4;
    uint64_t v6 = v4 + 32;
    unint64_t v7 = (void *)MEMORY[0x263F8EE78];
    do
    {
      outlined init with copy of MetalFunctionNode(v6, (uint64_t)v19);
      outlined init with copy of MetalFunctionNode((uint64_t)v19, (uint64_t)v18);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MetalSourceGenerator);
      if ((swift_dynamicCast() & 1) == 0)
      {
        uint64_t v17 = 0;
        long long v15 = 0u;
        long long v16 = 0u;
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
      if (*((void *)&v16 + 1))
      {
        outlined init with take of MetalFunctionNode(&v15, (uint64_t)v18);
        outlined init with take of MetalFunctionNode(v18, (uint64_t)&v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
        }
        unint64_t v9 = v7[2];
        unint64_t v8 = v7[3];
        if (v9 >= v8 >> 1) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v7);
        }
        void v7[2] = v9 + 1;
        outlined init with take of MetalFunctionNode(&v15, (uint64_t)&v7[5 * v9 + 4]);
      }
      else
      {
        outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v15, &demangling cache variable for type metadata for MetalSourceGenerator?);
      }
      v6 += 40;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    uint64_t v10 = v7[2];
    if (v10) {
      goto LABEL_14;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  unint64_t v7 = (void *)MEMORY[0x263F8EE78];
  uint64_t v10 = *(void *)(MEMORY[0x263F8EE78] + 16);
  if (!v10) {
    return swift_bridgeObjectRelease();
  }
LABEL_14:
  uint64_t v11 = v7 + 4;
  swift_bridgeObjectRetain();
  do
  {
    uint64_t v12 = v11[3];
    uint64_t v13 = v11[4];
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 8))(a1, v12, v13);
    if (v2) {
      break;
    }
    v11 += 5;
    --v10;
  }
  while (v10);
  return swift_bridgeObjectRelease_n();
}

uint64_t MetalShaderProgram.node(withIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v2 + 144))();
  if (*(void *)(v5 + 16) && (uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0))
  {
    outlined init with copy of MetalFunctionNode(*(void *)(v5 + 56) + 40 * v6, (uint64_t)&v10);
    swift_bridgeObjectRelease();
    if (*((void *)&v11 + 1)) {
      return outlined init with take of MetalFunctionNode(&v10, a2);
    }
  }
  else
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    swift_bridgeObjectRelease();
  }
  outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v10, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
  lazy protocol witness table accessor for type MetalFunctionGraphError and conformance MetalFunctionGraphError();
  swift_allocError();
  *(void *)uint64_t v9 = 1;
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  *(unsigned char *)(v9 + 32) = 4;
  *(void *)(v9 + 40) = 0;
  *(void *)(v9 + 48) = 0;
  *(void *)(v9 + 56) = MEMORY[0x263F8EE78];
  return swift_willThrow();
}

uint64_t MetalShaderProgram.filtered(by:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  char v7 = *(uint64_t (**)(void))(*(void *)v2 + 120);
  uint64_t v8 = v7();
  uint64_t result = specialized _ArrayProtocol.filter(_:)(a1, a2, v8);
  if (v3) {
    return result;
  }
  uint64_t v10 = result;
  swift_beginAccess();
  *(void *)(v4 + 16) = v10;
  swift_bridgeObjectRelease();
  long long v11 = (void *)(v4 + 24);
  swift_beginAccess();
  if (*(void *)(*(void *)(v4 + 24) + 16))
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v35[0] = *v11;
    *long long v11 = 0x8000000000000000;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<FunctionNodeID, MetalFunctionNode>);
    _NativeDictionary.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
    *long long v11 = *(void *)&v35[0];
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = swift_endAccess();
  uint64_t v34 = ((uint64_t (*)(uint64_t))v7)(v13);
  uint64_t v14 = *(void *)(v34 + 16);
  if (!v14) {
    return swift_bridgeObjectRelease();
  }
  for (uint64_t i = (void *)(v34 + 32); ; i += 5)
  {
    uint64_t v17 = i[3];
    uint64_t v18 = i[4];
    __swift_project_boxed_opaque_existential_1(i, v17);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18);
    outlined init with copy of MetalFunctionNode((uint64_t)i, (uint64_t)v36);
    swift_beginAccess();
    outlined init with take of MetalFunctionNode(v36, (uint64_t)v35);
    char v20 = swift_isUniquelyReferenced_nonNull_native();
    Swift::String v37 = (void *)*v11;
    uint64_t v21 = v37;
    *long long v11 = 0x8000000000000000;
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
    uint64_t v24 = v21[2];
    BOOL v25 = (v22 & 1) == 0;
    uint64_t v26 = v24 + v25;
    if (__OFADD__(v24, v25)) {
      break;
    }
    char v27 = v22;
    if (v21[3] >= v26)
    {
      if (v20)
      {
        uint64_t v30 = v37;
        if (v22) {
          goto LABEL_6;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v30 = v37;
        if (v27) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v20);
      uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
      if ((v27 & 1) != (v29 & 1)) {
        goto LABEL_23;
      }
      unint64_t v23 = v28;
      uint64_t v30 = v37;
      if (v27)
      {
LABEL_6:
        uint64_t v16 = v30[7] + 40 * v23;
        __swift_destroy_boxed_opaque_existential_1Tm(v16);
        outlined init with take of MetalFunctionNode(v35, v16);
        goto LABEL_7;
      }
    }
    v30[(v23 >> 6) + 8] |= 1 << v23;
    *(void *)(v30[6] + 8 * v23) = v19;
    outlined init with take of MetalFunctionNode(v35, v30[7] + 40 * v23);
    uint64_t v31 = v30[2];
    BOOL v32 = __OFADD__(v31, 1);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_22;
    }
    v30[2] = v33;
LABEL_7:
    *long long v11 = v30;
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (!--v14) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t MetalShaderProgram.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalShaderProgram.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MetalSourceGenerator.generateMetalSource(in:) in conformance MetalShaderProgram()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 264))();
}

uint64_t MetalShaderProgram.allNodesUpstream(of:)(void *a1)
{
  uint64_t v6 = MEMORY[0x263F8EE88];
  uint64_t v5 = MEMORY[0x263F8EE88];
  uint64_t v3 = MEMORY[0x263F8EE78];
  uint64_t v4 = MEMORY[0x263F8EE78];
  MetalShaderProgram._dfsHelper(node:visited:onStack:preOrder:postOrder:)(a1, &v6, &v5, &v4, &v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1) {
    return swift_bridgeObjectRelease();
  }
  else {
    return v4;
  }
}

uint64_t MetalShaderProgram._dfsHelper(node:visited:onStack:preOrder:postOrder:)(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v7 = v6;
  uint64_t v8 = v5;
  unint64_t v69 = a5;
  uint64_t v12 = a1;
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  Swift::UInt v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v14, v13);
  uint64_t v73 = a3;
  specialized Set._Variant.insert(_:)(v70, v15);
  uint64_t v16 = v12[3];
  uint64_t v17 = v12[4];
  __swift_project_boxed_opaque_existential_1(v12, v16);
  Swift::UInt v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
  specialized Set._Variant.insert(_:)(v70, v18);
  outlined init with copy of MetalFunctionNode((uint64_t)v12, (uint64_t)v70);
  uint64_t v19 = (void *)*a4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v68 = a4;
  *a4 = (uint64_t)v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    *unint64_t v68 = (uint64_t)v19;
  }
  unint64_t v22 = v19[2];
  unint64_t v21 = v19[3];
  if (v22 >= v21 >> 1) {
    *unint64_t v68 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v19);
  }
  uint64_t v23 = v71;
  uint64_t v24 = v72;
  uint64_t v25 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v70, v71);
  MEMORY[0x270FA5388](v25);
  char v27 = (char *)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v28 + 16))(v27);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, (uint64_t)v27, v68, v23, v24);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v70);
  uint64_t v29 = v12[3];
  uint64_t v30 = v12[4];
  __swift_project_boxed_opaque_existential_1(v12, v29);
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 48))(v29, v30);
  uint64_t v32 = *(void *)(v31 + 16);
  if (!v32)
  {
    swift_bridgeObjectRelease();
LABEL_25:
    outlined init with copy of MetalFunctionNode((uint64_t)v12, (uint64_t)v70);
    uint64_t v48 = v69;
    uint64_t v49 = (void *)*v69;
    char v50 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v48 = (uint64_t)v49;
    if ((v50 & 1) == 0)
    {
      uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
      *unint64_t v69 = (uint64_t)v49;
    }
    unint64_t v52 = v49[2];
    unint64_t v51 = v49[3];
    if (v52 >= v51 >> 1)
    {
      long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v51 > 1), v52 + 1, 1, v49);
      *unint64_t v69 = (uint64_t)v64;
    }
    uint64_t v53 = v71;
    uint64_t v54 = v72;
    uint64_t v55 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v70, v71);
    MEMORY[0x270FA5388](v55);
    long long v57 = (char *)&v65 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v58 + 16))(v57);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, (uint64_t)v57, v69, v53, v54);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v70);
    uint64_t v59 = v12[3];
    uint64_t v60 = v12[4];
    __swift_project_boxed_opaque_existential_1(v12, v59);
    Swift::UInt v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 24))(v59, v60);
    return specialized Set._Variant.remove(_:)(v61);
  }
  unint64_t v66 = v12;
  uint64_t v67 = v31;
  uint64_t v33 = 0;
  uint64_t v34 = v31 + 32;
  while (1)
  {
    Swift::UInt v35 = *(void *)(v34 + 8 * v33);
    uint64_t v36 = *a2;
    if (*(void *)(*a2 + 16))
    {
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v35);
      Swift::Int v37 = Hasher._finalize()();
      uint64_t v38 = -1 << *(unsigned char *)(v36 + 32);
      unint64_t v39 = v37 & ~v38;
      if ((*(void *)(v36 + 56 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39)) {
        break;
      }
    }
LABEL_21:
    (*(void (**)(Swift::UInt *__return_ptr, Swift::UInt))(*(void *)v8 + 272))(v70, v35);
    if (v7) {
      return swift_bridgeObjectRelease();
    }
    MetalShaderProgram._dfsHelper(node:visited:onStack:preOrder:postOrder:)(v70, a2, v73, v68, v69);
    uint64_t v7 = 0;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v70);
LABEL_7:
    if (++v33 == v32)
    {
      swift_bridgeObjectRelease();
      uint64_t v12 = v66;
      goto LABEL_25;
    }
  }
  uint64_t v40 = *(void *)(v36 + 48);
  if (*(void *)(v40 + 8 * v39) != v35)
  {
    uint64_t v41 = ~v38;
    do
    {
      unint64_t v39 = (v39 + 1) & v41;
      if (((*(void *)(v36 + 56 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0) {
        goto LABEL_21;
      }
    }
    while (*(void *)(v40 + 8 * v39) != v35);
  }
  uint64_t v42 = *v73;
  if (!*(void *)(*v73 + 16)) {
    goto LABEL_7;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v35);
  Swift::Int v43 = Hasher._finalize()();
  uint64_t v44 = -1 << *(unsigned char *)(v42 + 32);
  unint64_t v45 = v43 & ~v44;
  if (((*(void *)(v42 + 56 + ((v45 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v45) & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v46 = *(void *)(v42 + 48);
  if (*(void *)(v46 + 8 * v45) != v35)
  {
    uint64_t v47 = ~v44;
    do
    {
      unint64_t v45 = (v45 + 1) & v47;
      if (((*(void *)(v42 + 56 + ((v45 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v45) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v46 + 8 * v45) != v35);
  }
  lazy protocol witness table accessor for type MetalFunctionGraphError and conformance MetalFunctionGraphError();
  swift_allocError();
  *(_OWORD *)uint64_t v63 = 0u;
  *(_OWORD *)(v63 + 16) = 0u;
  *(unsigned char *)(v63 + 32) = 4;
  *(void *)(v63 + 40) = 0;
  *(void *)(v63 + 48) = 0;
  *(void *)(v63 + 56) = MEMORY[0x263F8EE78];
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t MetalShaderProgram.parameterNodes(connectedTo:)(void *a1)
{
  uint64_t result = MetalShaderProgram.allNodesUpstream(of:)(a1);
  if (v2) {
    return v1;
  }
  uint64_t v4 = result;
  uint64_t v1 = MEMORY[0x263F8EE78];
  uint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t v5 = *(void *)(result + 16);
  if (!v5)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v18 = v1;
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      uint64_t v13 = v11 + 32;
      swift_retain();
      do
      {
        outlined init with copy of MetalFunctionNode(v13, (uint64_t)v17);
        outlined init with copy of MetalFunctionNode((uint64_t)v17, (uint64_t)v16);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
        type metadata accessor for MetalFunctionParameterNode();
        if ((swift_dynamicCast() & 1) == 0) {
          uint64_t v15 = 0;
        }
        uint64_t v14 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
        if (v15)
        {
          MEMORY[0x261184120](v14);
          if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v13 += 40;
        --v12;
      }
      while (v12);
      swift_release();
      uint64_t v1 = v18;
    }
    swift_release();
    return v1;
  }
  unint64_t v6 = 0;
  uint64_t v7 = result + 32;
  while (v6 < *(void *)(v4 + 16))
  {
    outlined init with copy of MetalFunctionNode(v7, (uint64_t)v17);
    outlined init with copy of MetalFunctionNode((uint64_t)v17, (uint64_t)v16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetalFunctionNode);
    type metadata accessor for MetalFunctionParameterNode();
    if (swift_dynamicCast())
    {
      swift_release();
      outlined init with take of MetalFunctionNode(v17, (uint64_t)v16);
      uint64_t v8 = v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1);
        uint64_t v8 = v18;
      }
      unint64_t v10 = *(void *)(v8 + 16);
      unint64_t v9 = *(void *)(v8 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        uint64_t v8 = v18;
      }
      *(void *)(v8 + 16) = v10 + 1;
      uint64_t result = outlined init with take of MetalFunctionNode(v16, v8 + 40 * v10 + 32);
    }
    else
    {
      uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
    }
    ++v6;
    v7 += 40;
    if (v5 == v6)
    {
      uint64_t v11 = v18;
      uint64_t v1 = MEMORY[0x263F8EE78];
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(Swift::UInt a1)
{
  uint64_t v3 = *v1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(v3 + 48);
  if (*(void *)(v7 + 8 * v6) != a1)
  {
    uint64_t v8 = ~v5;
    do
    {
      unint64_t v6 = (v6 + 1) & v8;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v7 + 8 * v6) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v1;
  uint64_t v13 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v10 = v13;
  }
  uint64_t v11 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  specialized _NativeSet._delete(at:)(v6);
  *uint64_t v1 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  specialized _NativeSet._delete(at:)(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::UInt v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        unint64_t v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (void *)(v12 + 8 * v2);
          uint64_t v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::UInt v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_0, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of MetalFunctionNode(&v12, v10 + 40 * a1 + 32);
}

uint64_t type metadata accessor for MetalFunctionCallNode()
{
  return self;
}

uint64_t type metadata accessor for MetalFunctionParameterNode()
{
  return self;
}

uint64_t type metadata accessor for MetalPassthroughNode()
{
  return self;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = (void *)a1;
  uint64_t v34 = (void *)MEMORY[0x263F8EE78];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v28 = a1 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v6;
  int64_t v29 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v11 = 0;
  char v27 = result;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    (*(void (**)(long long *__return_ptr, void))(*(void *)a2 + 272))(&v30, *(void *)(v5[6] + 8 * i));
    if (v3)
    {

      uint64_t v32 = 0;
      long long v30 = 0u;
      long long v31 = 0u;
      uint64_t result = (void *)outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v30, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
      uint64_t v3 = 0;
      if (v9) {
        goto LABEL_4;
      }
    }
    else
    {
      outlined init with take of MetalFunctionNode(&v30, (uint64_t)v33);
      outlined init with take of MetalFunctionNode(v33, (uint64_t)&v30);
      uint64_t v17 = v34;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
        uint64_t v34 = v17;
      }
      unint64_t v19 = v17[2];
      unint64_t v18 = v17[3];
      if (v19 >= v18 >> 1) {
        uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v17);
      }
      uint64_t v20 = *((void *)&v31 + 1);
      uint64_t v21 = v32;
      uint64_t v22 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, *((uint64_t *)&v31 + 1));
      MEMORY[0x270FA5388](v22);
      uint64_t v24 = (char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v25 + 16))(v24);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, (uint64_t)v24, (uint64_t *)&v34, v20, v21);
      uint64_t result = (void *)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v30);
      uint64_t v5 = v27;
      if (v9) {
        goto LABEL_4;
      }
    }
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v29) {
      goto LABEL_31;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v11);
    if (!v15) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v15 - 1) & v15;
  }
  int64_t v16 = v11 + 1;
  if (v11 + 1 >= v29) {
    goto LABEL_31;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 2;
  if (v11 + 2 >= v29) {
    goto LABEL_31;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 3;
  if (v11 + 3 >= v29) {
    goto LABEL_31;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 4;
  if (v11 + 4 >= v29)
  {
LABEL_31:
    swift_release();
    return v34;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
LABEL_16:
    int64_t v11 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_31;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_17;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = a2;
    uint64_t v7 = (void *)(a1 + 32);
    uint64_t v26 = *(uint64_t (**)(void *))(*(void *)a2 + 296);
    swift_bridgeObjectRetain();
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
    uint64_t v24 = v6;
    while (1)
    {
      uint64_t v9 = v26(v7);
      uint64_t v11 = v10;
      outlined init with copy of MetalFunctionNode((uint64_t)v7, (uint64_t)v25);
      if (!v11)
      {
        uint64_t v12 = closure #1 in implicit closure #1 in closure #2 in defaultCreateMetalInvocation(in:for:functionDefinitionName:)(v25, a3, v6, a4);
        if (v4)
        {
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v8;
        }
        uint64_t v9 = v12;
        uint64_t v11 = v13;
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
      uint64_t v14 = v7[3];
      uint64_t v15 = v7[4];
      __swift_project_boxed_opaque_existential_1(v7, v14);
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
      if (one-time initialization token for void != -1) {
        swift_once();
      }
      char v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 128))(static MetalDataType.void);
      swift_release();
      if (v17)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        }
        unint64_t v19 = v8[2];
        unint64_t v18 = v8[3];
        if (v19 >= v18 >> 1) {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v8);
        }
        _OWORD v8[2] = v19 + 1;
        uint64_t v20 = &v8[2 * v19];
        v20[4] = v9;
        v20[5] = v11;
      }
      v7 += 5;
      --v5;
      uint64_t v6 = v24;
      if (!v5)
      {
        swift_bridgeObjectRelease();
        return v8;
      }
    }
  }
  return (void *)MEMORY[0x263F8EE78];
}

uint64_t type metadata accessor for MetalFunctionDefinitionNode()
{
  return self;
}

void *specialized MetalFunctionDefinitionNode.init(id:argumentTypes:resultType:functionName:specifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unint64_t a7)
{
  uint64_t v13 = MEMORY[0x263F8EE78];
  v7[11] = a2;
  v7[5] = 0;
  _OWORD v7[3] = v13;
  v7[4] = a3;
  v7[6] = 0;
  v7[7] = a4;
  v7[8] = a5;
  swift_retain();
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = a4;
  v14._object = a5;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v7[5] = 0xD000000000000015;
  v7[6] = 0x800000025C4279C0;
  swift_bridgeObjectRelease();
  if (a7) {
    uint64_t v15 = a6;
  }
  else {
    uint64_t v15 = 0;
  }
  if (a7) {
    unint64_t v16 = a7;
  }
  else {
    unint64_t v16 = 0xE000000000000000;
  }
  v7[9] = v15;
  v7[10] = v16;
  void v7[2] = a1;
  return v7;
}

uint64_t type metadata accessor for MetalFunctionNodeBase()
{
  return self;
}

void *partial apply for closure #1 in MetalFunctionDefinitionNode.generateMetalSource(in:)(uint64_t a1)
{
  return closure #1 in MetalFunctionDefinitionNode.generateMetalSource(in:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t type metadata accessor for MetalStructGetterNode()
{
  return self;
}

uint64_t type metadata accessor for MetalStructGetterOffsetNode()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type MetalFunctionGraphError and conformance MetalFunctionGraphError()
{
  unint64_t result = lazy protocol witness table cache variable for type MetalFunctionGraphError and conformance MetalFunctionGraphError;
  if (!lazy protocol witness table cache variable for type MetalFunctionGraphError and conformance MetalFunctionGraphError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MetalFunctionGraphError and conformance MetalFunctionGraphError);
  }
  return result;
}

uint64_t sub_25C3DE0CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DE118(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 128))(*a1);
}

uint64_t sub_25C3DE160@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DE1AC(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 152);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_25C3DE200@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_25C3DE24C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 176);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_25C3DE2B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DE300(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 200);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_25C3DE354@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DE3A0(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 136))(*a1);
}

uint64_t sub_25C3DE3E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DE434(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 160);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_25C3DE488@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DE4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 184);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_25C3DE528@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_25C3DE574(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 208);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_25C3DE5DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(**(void **)a1 + 224))(v4);
  return outlined init with take of SGDataTypeStorage((uint64_t)v4, a2);
}

uint64_t sub_25C3DE640@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 248))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_25C3DE690(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 256))(*a1);
}

uint64_t sub_25C3DE6E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DE72C(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 136))(*a1);
}

uint64_t sub_25C3DE774@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DE7C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 160);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_25C3DE814@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DE860(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 184);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_25C3DE8B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_25C3DE900(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 208);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_25C3DE968@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_25C3DE9B8(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 232))(*a1);
}

uint64_t sub_25C3DEA00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DEA4C(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 128))(*a1);
}

uint64_t sub_25C3DEA94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DEAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 152);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_25C3DEB34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_25C3DEB80(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 176);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_25C3DEBE8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_25C3DEC34(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 200);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_25C3DEC9C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DECE8(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 144))(*a1);
}

uint64_t sub_25C3DED30@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DED7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 168);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_25C3DEDD0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 184))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DEE1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 192);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_25C3DEE70@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 208))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_25C3DEEBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 216);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_25C3DEF24@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 232))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_25C3DEF70(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 240);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_25C3DEFD8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 256))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DF02C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 264);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_25C3DF088@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DF0D4(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 136))(*a1);
}

uint64_t sub_25C3DF11C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DF168(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 160);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_25C3DF1BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DF208(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 184);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_25C3DF25C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DF2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 208);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_25C3DF2FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_25C3DF348(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 232);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_25C3DF3B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DF3FC(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 136))(*a1);
}

uint64_t sub_25C3DF444@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DF490(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 160);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_25C3DF4E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DF530(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 184);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_25C3DF584@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DF5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 208);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_25C3DF624@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_25C3DF670(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 232);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_25C3DF6D8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DF724(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 128))(*a1);
}

uint64_t sub_25C3DF76C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_25C3DF7B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 152);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_25C3DF820@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DF86C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 176);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_25C3DF8C0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_25C3DF910(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 200))(*a1);
}

uint64_t sub_25C3DF958@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DF9A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DF9F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DFA44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 176);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_25C3DFA98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192))();
  *a2 = result;
  return result;
}

uint64_t sub_25C3DFAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 200);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t method lookup function for MetalFunctionNodeBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalFunctionNodeBase);
}

uint64_t dispatch thunk of MetalFunctionNodeBase.id.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.id.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.id.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.inputs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.inputs.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.inputs.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.debugLabel.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.debugLabel.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.debugLabel.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.resultType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.resultType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.resultType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.functionDefinitionName.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.__allocating_init(id:resultType:template:)()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.setInputs(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.generateMetalSource(in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of MetalFunctionNodeBase.createMetalInvocation(in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t method lookup function for MetalLiteralValueNode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalLiteralValueNode);
}

uint64_t dispatch thunk of MetalLiteralValueNode.id.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.id.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.id.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.inputs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.inputs.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.inputs.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.resultType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.resultType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.resultType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.debugLabel.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.debugLabel.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.debugLabel.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.value.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.value.setter(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 64);
  uint64_t v3 = *(uint64_t (**)(_OWORD *))(*(void *)v1 + 232);
  long long v4 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  void v7[2] = *(_OWORD *)(a1 + 32);
  _OWORD v7[3] = v5;
  char v8 = v2;
  return v3(v7);
}

uint64_t dispatch thunk of MetalLiteralValueNode.value.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.isConstExpr.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.isConstExpr.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.isConstExpr.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of MetalLiteralValueNode.__allocating_init(id:resultType:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = *(unsigned char *)(a3 + 64);
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(v3 + 272);
  long long v6 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v6;
  long long v7 = *(_OWORD *)(a3 + 48);
  void v9[2] = *(_OWORD *)(a3 + 32);
  v9[3] = v7;
  char v10 = v4;
  return v5(a1, a2, v9);
}

uint64_t dispatch thunk of MetalLiteralValueNode.setInputs(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t method lookup function for MetalFunctionCallNode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalFunctionCallNode);
}

uint64_t dispatch thunk of MetalFunctionCallNode.id.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.id.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.id.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.inputs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.inputs.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.inputs.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.resultType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.resultType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.resultType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.debugLabel.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.debugLabel.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.debugLabel.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.isConstExpr.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.isConstExpr.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.isConstExpr.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.__allocating_init(id:resultType:functionName:)()
{
  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.setInputs(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of MetalFunctionCallNode.createMetalInvocation(in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t method lookup function for MetalFunctionParameterNode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalFunctionParameterNode);
}

uint64_t dispatch thunk of MetalFunctionParameterNode.id.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of MetalFunctionParameterNode.id.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of MetalFunctionParameterNode.id.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of MetalFunctionParameterNode.inputs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MetalFunctionParameterNode.inputs.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MetalFunctionParameterNode.inputs.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of MetalFunctionParameterNode.debugLabel.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MetalFunctionParameterNode.debugLabel.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of MetalFunctionParameterNode.debugLabel.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of MetalFunctionParameterNode.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MetalFunctionParameterNode.name.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of MetalFunctionParameterNode.name.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of MetalFunctionParameterNode.__allocating_init(id:resultType:name:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of MetalFunctionParameterNode.createMetalInvocation(in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t method lookup function for MetalFunctionDefinitionNode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalFunctionDefinitionNode);
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.id.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.id.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.id.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.inputs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.inputs.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.inputs.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.resultType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.resultType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.resultType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.debugLabel.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.debugLabel.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.debugLabel.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.specifier.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.specifier.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.specifier.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.argumentTypes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.argumentTypes.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.argumentTypes.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.__allocating_init(id:argumentTypes:resultType:functionName:specifier:)()
{
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.setInputs(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.forwardDeclaration()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of MetalFunctionDefinitionNode.generateMetalSource(in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t method lookup function for MetalStructGetterOffsetNode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalStructGetterOffsetNode);
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.id.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.id.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.id.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.inputs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.inputs.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.inputs.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.inputType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.inputType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.inputType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.resultType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.resultType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.resultType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.debugLabel.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.debugLabel.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.debugLabel.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.__allocating_init(id:inputType:resultType:offset:)()
{
  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.setInputs(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of MetalStructGetterOffsetNode.createMetalInvocation(in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t method lookup function for MetalStructGetterNode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalStructGetterNode);
}

uint64_t dispatch thunk of MetalStructGetterNode.id.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of MetalStructGetterNode.id.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of MetalStructGetterNode.id.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MetalStructGetterNode.inputs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MetalStructGetterNode.inputs.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of MetalStructGetterNode.inputs.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MetalStructGetterNode.inputType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of MetalStructGetterNode.inputType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of MetalStructGetterNode.inputType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MetalStructGetterNode.resultType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of MetalStructGetterNode.resultType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of MetalStructGetterNode.resultType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of MetalStructGetterNode.debugLabel.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of MetalStructGetterNode.debugLabel.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of MetalStructGetterNode.debugLabel.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of MetalStructGetterNode.__allocating_init(id:inputType:resultType:fieldName:)()
{
  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of MetalStructGetterNode.setInputs(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of MetalStructGetterNode.createMetalInvocation(in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t method lookup function for MetalPassthroughNode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalPassthroughNode);
}

uint64_t dispatch thunk of MetalPassthroughNode.id.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of MetalPassthroughNode.id.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of MetalPassthroughNode.id.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of MetalPassthroughNode.debugLabel.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MetalPassthroughNode.debugLabel.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MetalPassthroughNode.debugLabel.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of MetalPassthroughNode.inputs.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MetalPassthroughNode.inputs.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of MetalPassthroughNode.inputs.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of MetalPassthroughNode.isConstExpr.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MetalPassthroughNode.isConstExpr.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of MetalPassthroughNode.isConstExpr.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of MetalPassthroughNode.__allocating_init(id:resultType:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t type metadata accessor for MetalShaderProgram()
{
  return self;
}

uint64_t method lookup function for MetalShaderProgram(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetalShaderProgram);
}

uint64_t dispatch thunk of MetalShaderProgram.nodes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of MetalShaderProgram.nodeMap.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MetalShaderProgram.customFragmentShaderConstants.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MetalShaderProgram.customFragmentShaderConstants.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of MetalShaderProgram.customFragmentShaderConstants.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of MetalShaderProgram.customMetalContent.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MetalShaderProgram.customMetalContent.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of MetalShaderProgram.customMetalContent.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of MetalShaderProgram.importPaths.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of MetalShaderProgram.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of MetalShaderProgram.generateMetalSource(in:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of MetalShaderProgram.node(withIdentifier:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of MetalShaderProgram.filtered(by:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t static OrderedDictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((static OrderedSet.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  return MEMORY[0x270F9EC98](a3, a6, a8, a10);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> OrderedDictionary<A, B>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return static OrderedDictionary<>.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2], a3[2], a3[3], a3[4], *(void *)(a4 - 8)) & 1;
}

uint64_t _HashTable.Header.scale.getter()
{
  return *v0 & 0x3FLL;
}

uint64_t _HashTable.Header.reservedScale.getter()
{
  return *(void *)(v0 + 8) & 0x3FLL;
}

uint64_t _HashTable.Header.seed.getter()
{
  return *(void *)v0;
}

uint64_t _HashTable.Header.bias.getter()
{
  return *(uint64_t *)(v0 + 8) >> 6;
}

uint64_t _HashTable.Header.bias.setter(uint64_t result)
{
  uint64_t v2 = 1 << *v1;
  BOOL v3 = __OFSUB__(v2, 1);
  uint64_t v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = (v4 & (result >> 63)) + result;
    if (v5 < v4) {
      uint64_t v4 = 0;
    }
    v1[1] = v1[1] & 0x3FLL | ((v5 - v4) << 6);
  }
  return result;
}

uint64_t _HashTable.Header.reservedScale.setter(uint64_t result)
{
  *(void *)(v1 + 8) = *(void *)(v1 + 8) & 0xFFFFFFFFFFFFFFC0 | result & 0x3F;
  return result;
}

uint64_t _HashTable.Header.init(scale:reservedScale:seed:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = result | (a3 << 6);
  a4[1] = a2;
  return result;
}

uint64_t _HashTable.Header.capacity.getter()
{
  unint64_t v1 = *v0 & 0x3FLL;
  if (v1 < 5) {
    return 15;
  }
  double v3 = (double)(1 << v1) * 0.75;
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v3 < 9.22337204e18) {
    return (uint64_t)v3;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t _HashTable.Header._scaleAndSeed.getter()
{
  return *(void *)v0;
}

uint64_t _HashTable.Header._scaleAndSeed.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*_HashTable.Header._scaleAndSeed.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.Header._reservedScaleAndBias.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t _HashTable.Header._reservedScaleAndBias.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*_HashTable.Header._reservedScaleAndBias.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

void *(*_HashTable.Header.reservedScale.modify(uint64_t *a1))(void *result)
{
  *a1 = *(void *)(v1 + 8) & 0x3FLL;
  a1[1] = v1;
  return _HashTable.Header.reservedScale.modify;
}

void *_HashTable.Header.reservedScale.modify(void *result)
{
  *(void *)(result[1] + 8) = *(void *)(result[1] + 8) & 0xFFFFFFFFFFFFFFC0 | *result & 0x3FLL;
  return result;
}

uint64_t (*_HashTable.Header.bias.modify(uint64_t *a1))(uint64_t *a1)
{
  *a1 = *(uint64_t *)(v1 + 8) >> 6;
  a1[1] = v1;
  return _HashTable.Header.bias.modify;
}

uint64_t _HashTable.Header.bias.modify(uint64_t *a1)
{
  return _HashTable.Header.bias.setter(*a1);
}

uint64_t sub_25C3E15D8@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = *(void *)(result + 8) & 0x3FLL;
  return result;
}

void *sub_25C3E15E8(void *result, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFC0 | *result & 0x3FLL;
  return result;
}

uint64_t sub_25C3E15FC@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = *(uint64_t *)(result + 8) >> 6;
  return result;
}

uint64_t sub_25C3E160C(uint64_t *a1)
{
  return _HashTable.Header.bias.setter(*a1);
}

uint64_t getEnumTagSinglePayload for _HashTable.Header(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _HashTable.Header(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _HashTable.Header()
{
  return &type metadata for _HashTable.Header;
}

uint64_t RandomAccessCollection._offset(of:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v3 = (char *)&v6 - v2;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v4 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v4;
}

uint64_t RandomAccessCollection.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v4);
  char v8 = &v15[-v7];
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  uint64_t v9 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
  v9(v6, AssociatedTypeWitness);
  char v10 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v12 = v11;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(a1, v12, v13);
  v10(v15, 0);
  return ((uint64_t (*)(unsigned char *, uint64_t))v9)(v8, AssociatedTypeWitness);
}

uint64_t RandomAccessCollection._index(at:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v5 - v2;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x7463656A626FLL;
    }
    else {
      uint64_t v3 = 0x646C726F77;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE600000000000000;
    }
    else {
      unint64_t v4 = 0xE500000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x7463656A626FLL;
      }
      else {
        uint64_t v6 = 0x646C726F77;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE600000000000000;
      }
      else {
        unint64_t v7 = 0xE500000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE500000000000000;
    uint64_t v3 = 0x6C65646F6DLL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE500000000000000;
  if (v3 != 0x6C65646F6DLL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6E6F697469736F70;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6E6F697469736F70;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x6C616D726F6ELL;
      break;
    case 2:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x746E65676E6174;
      break;
    case 3:
      uint64_t v5 = 0x6E65676E61746962;
      unint64_t v3 = 0xE900000000000074;
      break;
    case 4:
      uint64_t v5 = 0x64726F6F63786574;
      break;
    case 5:
      uint64_t v5 = 0x6F6C6F636D6F6567;
      unint64_t v3 = 0xE900000000000072;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x6C616D726F6ELL) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x746E65676E6174) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v6 = 0xE900000000000074;
      if (v5 != 0x6E65676E61746962) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      uint64_t v2 = 0x64726F6F63786574;
      goto LABEL_15;
    case 5:
      unint64_t v6 = 0xE900000000000072;
      if (v5 != 0x6F6C6F636D6F6567) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph11GeomPropDefV_G_AH19NodeDefinitionStoreV0gH0Vs5NeverOTg504_s11e7Graph19jkl10VACycfcAC8gh7VAA0fG3I6Vcfu0_Tf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v41 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v41;
  uint64_t result = specialized Dictionary.Values.startIndex.getter(v3);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = v3 + 64;
  char v9 = *(unsigned char *)(v3 + 32);
  uint64_t v29 = v3 + 80;
  int64_t v30 = v1;
  uint64_t v32 = v3 + 64;
  uint64_t v33 = v3;
  int v31 = v5;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << v9)
  {
    unint64_t v12 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_27;
    }
    uint64_t v13 = *(void *)(v3 + 56) + (v6 << 6);
    uint64_t v14 = *(void *)(v13 + 8);
    uint64_t v36 = *(void *)v13;
    uint64_t v15 = *(void **)(v13 + 16);
    uint64_t v16 = *(void *)(v13 + 24);
    uint64_t v17 = *(void *)(v13 + 32);
    char v18 = *(unsigned char *)(v13 + 40);
    char v39 = *(unsigned char *)(v13 + 41);
    uint64_t v19 = v15[3];
    uint64_t v34 = v7;
    uint64_t v35 = v15[4];
    uint64_t v20 = v15[5];
    swift_bridgeObjectRetain();
    char v40 = v18;
    if (v18)
    {
      uint64_t v37 = v17;
      uint64_t v38 = v16;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v37 = 0;
      uint64_t v38 = v16;
    }
    unint64_t v22 = *(void *)(v41 + 16);
    unint64_t v21 = *(void *)(v41 + 24);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v22 >= v21 >> 1) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
    }
    *(void *)(v41 + 16) = v22 + 1;
    uint64_t v23 = v41 + (v22 << 6);
    *(void *)(v23 + 32) = v36;
    *(void *)(v23 + 40) = v14;
    *(void *)(v23 + 48) = v19;
    *(void *)(v23 + 56) = v35;
    *(void *)(v23 + 64) = v20;
    *(void *)(v23 + 72) = v38;
    *(void *)(v23 + 80) = v37;
    *(unsigned char *)(v23 + 88) = v40;
    *(unsigned char *)(v23 + 89) = v39;
    uint64_t v3 = v33;
    char v9 = *(unsigned char *)(v33 + 32);
    unint64_t v10 = 1 << v9;
    if (v6 >= 1 << v9) {
      goto LABEL_28;
    }
    uint64_t v8 = v32;
    uint64_t v24 = *(void *)(v32 + 8 * v12);
    if ((v24 & (1 << v6)) == 0) {
      goto LABEL_29;
    }
    int v5 = v31;
    if (*(_DWORD *)(v33 + 36) != v31) {
      goto LABEL_30;
    }
    unint64_t v25 = v24 & (-2 << (v6 & 0x3F));
    if (v25)
    {
      unint64_t v10 = __clz(__rbit64(v25)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v11 = v30;
    }
    else
    {
      unint64_t v26 = v12 + 1;
      unint64_t v27 = (v10 + 63) >> 6;
      int64_t v11 = v30;
      if (v12 + 1 < v27)
      {
        unint64_t v28 = *(void *)(v32 + 8 * v26);
        if (v28)
        {
LABEL_23:
          unint64_t v10 = __clz(__rbit64(v28)) + (v26 << 6);
        }
        else
        {
          while (v27 - 2 != v12)
          {
            unint64_t v28 = *(void *)(v29 + 8 * v12++);
            if (v28)
            {
              unint64_t v26 = v12 + 1;
              goto LABEL_23;
            }
          }
        }
      }
    }
    uint64_t v7 = v34 + 1;
    uint64_t v6 = v10;
    if (v34 + 1 == v11) {
      return v2;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t NodeDefinitionStore.MaterialXDataType.init(_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a3;
  a4[1] = result;
  a4[2] = a2;
  return result;
}

uint64_t NodeDefinitionStore.MaterialXDataType.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = result;
  a3[2] = a2;
  return result;
}

uint64_t static NodeDefinitionStore.MaterialXDataType.Kind.== infix(_:_:)(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (!v2)
  {
    if (!v3)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    return 0;
  }
  if (!v3) {
    return 0;
  }
  return specialized static Array<A>.== infix(_:_:)(v2, v3);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t NodeDefinitionStore.MaterialXDataType.Kind.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys>);
  uint64_t v20 = *(void *)(v3 - 8);
  uint64_t v21 = v3;
  MEMORY[0x270FA5388](v3);
  int v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys>);
  uint64_t v18 = *(void *)(v6 - 8);
  uint64_t v19 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys>);
  uint64_t v9 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  int64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v12)
  {
    char v25 = 1;
    lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys();
    uint64_t v13 = v22;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v23 = v12;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    uint64_t v14 = v21;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v14);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v13);
  }
  else
  {
    char v24 = 0;
    lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys();
    uint64_t v16 = v22;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v16);
  }
}

unint64_t lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys);
  }
  return result;
}

uint64_t NodeDefinitionStore.MaterialXDataType.Kind.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v28 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v26 = v3;
  uint64_t v27 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys>);
  uint64_t v29 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[3];
  int64_t v30 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys();
  uint64_t v15 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15) {
    goto LABEL_7;
  }
  uint64_t v16 = v29;
  uint64_t v31 = v11;
  uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v17 + 16) != 1)
  {
    uint64_t v18 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v20 = &type metadata for NodeDefinitionStore.MaterialXDataType.Kind;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x263F8DCB0], v18);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v10);
LABEL_7:
    uint64_t v21 = (uint64_t)v30;
    return __swift_destroy_boxed_opaque_existential_1Tm(v21);
  }
  if (*(unsigned char *)(v17 + 32))
  {
    char v34 = 1;
    lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    uint64_t v23 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v23);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v10);
    uint64_t v24 = v32;
  }
  else
  {
    char v33 = 0;
    lazy protocol witness table accessor for type NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys and conformance NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v7);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v10);
    uint64_t v24 = 0;
  }
  uint64_t v21 = (uint64_t)v30;
  *unint64_t v28 = v24;
  return __swift_destroy_boxed_opaque_existential_1Tm(v21);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NodeDefinitionStore.MaterialXDataType.Kind@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return NodeDefinitionStore.MaterialXDataType.Kind.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NodeDefinitionStore.MaterialXDataType.Kind(void *a1)
{
  return NodeDefinitionStore.MaterialXDataType.Kind.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodeDefinitionStore.MaterialXDataType.Kind(void **a1, void **a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (!v2)
  {
    if (!v3)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    return 0;
  }
  if (!v3) {
    return 0;
  }
  return specialized static Array<A>.== infix(_:_:)(v2, v3);
}

uint64_t NodeDefinitionStore.MaterialXDataType.kind.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.MaterialXDataType.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.MaterialXDataType.description.getter()
{
  uint64_t v1 = v0[1];
  unint64_t v2 = (void *)v0[2];
  if (*v0) {
    uint64_t v3 = 0x7465733A786C746DLL;
  }
  else {
    uint64_t v3 = 0x6D616E3A786C746DLL;
  }
  uint64_t v7 = v3;
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v1;
  v4._object = v2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return v7;
}

id outlined copy of NodeDefinitionStore.TypeStorage?(id result, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    return outlined copy of SGDataTypeStorage(result, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t static NodeDefinitionStore.Output.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static NodeDefinitionStore.Input.== infix(_:_:)(a1, a2) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodeDefinitionStore.Output(uint64_t a1, uint64_t a2)
{
  return specialized static NodeDefinitionStore.Input.== infix(_:_:)(a1, a2) & 1;
}

uint64_t NodeDefinitionStore.Input.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Output.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(void *)(a1 + 16) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id NodeDefinitionStore.Output.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 48);
  uint64_t v3 = *(void **)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v6 = *(void *)(v1 + 80);
  uint64_t v7 = *(void *)(v1 + 88);
  uint64_t v8 = *(void *)(v1 + 96);
  uint64_t v9 = *(void *)(v1 + 104);
  unsigned __int8 v10 = *(unsigned char *)(v1 + 112);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 64) = v10;
  return outlined copy of NodeDefinitionStore.TypeStorage?(v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t NodeDefinitionStore.Input.defaultGeomProp.getter()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Input.isUniform.getter()
{
  return *(unsigned __int8 *)(v0 + 136);
}

uint64_t static NodeDefinitionStore.Input.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static NodeDefinitionStore.Input.== infix(_:_:)(a1, a2) & 1;
}

__n128 NodeDefinitionStore.Output.init(name:type:defaultValue:defaultGeomProp:isUniform:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v8 = *(void *)(a3 + 16);
  char v9 = *(unsigned char *)(a4 + 64);
  *(void *)a8 = a1;
  *(void *)(a8 + 8) = a2;
  *(_OWORD *)(a8 + 16) = *(_OWORD *)a3;
  *(void *)(a8 + 32) = v8;
  long long v10 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a8 + 48) = *(_OWORD *)a4;
  *(_OWORD *)(a8 + 64) = v10;
  __n128 result = *(__n128 *)(a4 + 32);
  long long v12 = *(_OWORD *)(a4 + 48);
  *(__n128 *)(a8 + 80) = result;
  *(_OWORD *)(a8 + 96) = v12;
  *(unsigned char *)(a8 + 112) = v9;
  *(void *)(a8 + 120) = a5;
  *(void *)(a8 + 128) = a6;
  *(unsigned char *)(a8 + 136) = a7;
  return result;
}

uint64_t NodeDefinitionStore.Node.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Node.nodeName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Node.inherit.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Node.nodeGroup.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Node.version.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Node.isDefaultVersion.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t NodeDefinitionStore.Node.targets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.Node.uiName.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Node.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.Node.outputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.Node.availability.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Node.availabilityMessage.getter()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.Node.init(nodeDef:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v23 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 128);
  swift_bridgeObjectRetain();
  uint64_t v24 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of NodeDef(a1);
  uint64_t v22 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7NodeDefV6IOSpecVG_AF0F15DefinitionStoreV5InputVs5NeverOTg504_s11d7Graph19fij10V0C0V7nodeg16AeA0cG0V_tcfcAC5k4VAH6H6VXEfU_AHTf1cn_nTf4ng_nTm(v5, (uint64_t *)a1, (uint64_t)v28, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), "could not generate type storage for input %s with default value %s for node %s in NodeDefinitionStore. Skipping this node.");
  outlined release of NodeDef(a1);
  swift_bridgeObjectRelease();
  outlined retain of NodeDef(a1);
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7NodeDefV6IOSpecVG_AF0F15DefinitionStoreV5InputVs5NeverOTg504_s11d7Graph19fij10V0C0V7nodeg16AeA0cG0V_tcfcAC5k4VAH6H6VXEfU_AHTf1cn_nTf4ng_nTm(v6, (uint64_t *)a1, (uint64_t)v27, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), "could not generate type storage for output %s with default value %s for node %s in NodeDefinitionStore. Skipping this node.");
  outlined release of NodeDef(a1);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a1 + 120);
  if (v7 == 1)
  {
    uint64_t v7 = 0;
    unint64_t v19 = 0xE900000000000064;
    uint64_t v20 = 0;
    uint64_t v8 = 0x6574726F70707573;
  }
  else if (v7 == 2)
  {
    uint64_t v7 = 0;
    unint64_t v19 = 0xEB00000000646574;
    uint64_t v20 = 0;
    uint64_t v8 = 0x726F707075736E75;
  }
  else
  {
    uint64_t v20 = *(void *)(a1 + 112);
    swift_bridgeObjectRetain();
    unint64_t v19 = 0xEA00000000006465;
    uint64_t v8 = 0x7461636572706564;
  }
  uint64_t v18 = v8;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  char v13 = *(unsigned char *)(a1 + 80);
  uint64_t v14 = *(void *)(a1 + 88);
  uint64_t v17 = *(void *)(a1 + 96);
  uint64_t v15 = *(void *)(a1 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = outlined release of NodeDef(a1);
  *(void *)a2 = v25;
  *(void *)(a2 + 8) = v26;
  *(void *)(a2 + 16) = v23;
  *(void *)(a2 + 24) = v24;
  *(void *)(a2 + 32) = v9;
  *(void *)(a2 + 40) = v10;
  *(void *)(a2 + 48) = v11;
  *(void *)(a2 + 56) = v12;
  *(void *)(a2 + 64) = v11;
  *(void *)(a2 + 72) = v12;
  *(unsigned char *)(a2 + 80) = v13;
  *(void *)(a2 + 88) = v14;
  *(void *)(a2 + 96) = v17;
  *(void *)(a2 + 104) = v15;
  *(void *)(a2 + 112) = v22;
  *(void *)(a2 + 120) = v21;
  *(void *)(a2 + 128) = v18;
  *(void *)(a2 + 136) = v19;
  *(void *)(a2 + 144) = v20;
  *(void *)(a2 + 152) = v7;
  return result;
}

uint64_t closure #1 in NodeDefinitionStore.Node.init(nodeDef:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const char *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v35 = *(void *)(a1 + 40);
  uint64_t v36 = *(void *)(a1 + 48);
  char v34 = *(unsigned char *)(a1 + 56);
  uint64_t v33 = *(void *)a1;
  if (!v8)
  {
    unint64_t v14 = *(void *)(a1 + 8);
    formata = 0;
    uint64_t v32 = 0;
    uint64_t v28 = 0;
LABEL_10:
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
LABEL_14:
    char v21 = -1;
    goto LABEL_15;
  }
  uint64_t v9 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  if (!MaterialXDataType.asMetalDataType.getter())
  {
    unint64_t v14 = v5;
    swift_bridgeObjectRelease();
    formata = 0;
    uint64_t v32 = 0;
    uint64_t v28 = 0;
    uint64_t v8 = 0;
    goto LABEL_10;
  }
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  NodeDefinitionStore.TypeStorage.init(materialXValue:type:)(v9, v8, v7, (uint64_t)v39);
  if (v38)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)logger);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of NodeDef((uint64_t)a2);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of NodeDef((uint64_t)a2);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      log = v11;
      uint64_t v13 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      v39[0] = v27;
      *(_DWORD *)uint64_t v13 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      unint64_t v14 = v5;
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 22) = 2080;
      uint64_t v15 = *a2;
      unint64_t v16 = a2[1];
      swift_bridgeObjectRetain();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of NodeDef((uint64_t)a2);
      outlined release of NodeDef((uint64_t)a2);
      _os_log_impl(&dword_25C27E000, log, v12, a3, (uint8_t *)v13, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x261185880](v27, -1, -1);
      MEMORY[0x261185880](v13, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      unint64_t v14 = v5;
      swift_bridgeObjectRelease_n();
      outlined release of NodeDef((uint64_t)a2);
      outlined release of NodeDef((uint64_t)a2);
    }
    formata = 0;
    uint64_t v32 = 0;
    uint64_t v28 = 0;
    uint64_t v8 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    goto LABEL_14;
  }
  unint64_t v14 = v5;
  swift_bridgeObjectRelease();
  formata = (char *)v39[1];
  uint64_t v32 = v39[0];
  uint64_t v8 = v39[3];
  uint64_t v28 = v39[2];
  uint64_t v17 = v39[4];
  uint64_t v18 = v39[5];
  uint64_t v19 = v39[6];
  uint64_t v20 = v39[7];
  char v21 = v40;
LABEL_15:
  uint64_t v22 = *(void *)(v37 + 24);
  uint64_t v23 = *(void *)(v37 + 32);
  uint64_t v24 = swift_bridgeObjectRetain();
  *(void *)a4 = v33;
  *(void *)(a4 + 8) = v14;
  *(void *)(a4 + 16) = v22;
  *(void *)(a4 + 24) = v23;
  *(void *)(a4 + 32) = v24;
  *(void *)(a4 + 48) = v32;
  *(void *)(a4 + 56) = formata;
  *(void *)(a4 + 64) = v28;
  *(void *)(a4 + 72) = v8;
  *(void *)(a4 + 80) = v17;
  *(void *)(a4 + 88) = v18;
  *(void *)(a4 + 96) = v19;
  *(void *)(a4 + 104) = v20;
  *(unsigned char *)(a4 + 112) = v21;
  *(void *)(a4 + 120) = v35;
  *(void *)(a4 + 128) = v36;
  *(unsigned char *)(a4 + 136) = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

ShaderGraph::NodeDefinitionStore::BuiltinGeomProp_optional __swiftcall NodeDefinitionStore.BuiltinGeomProp.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NodeDefinitionStore.BuiltinGeomProp.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 6;
  if (v5 < 6) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t NodeDefinitionStore.BuiltinGeomProp.rawValue.getter()
{
  uint64_t result = 0x6E6F697469736F70;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6C616D726F6ELL;
      break;
    case 2:
      uint64_t result = 0x746E65676E6174;
      break;
    case 3:
      uint64_t result = 0x6E65676E61746962;
      break;
    case 4:
      uint64_t result = 0x64726F6F63786574;
      break;
    case 5:
      uint64_t result = 0x6F6C6F636D6F6567;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodeDefinitionStore.BuiltinGeomProp(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

ShaderGraph::NodeDefinitionStore::BuiltinGeomProp_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NodeDefinitionStore.BuiltinGeomProp(Swift::String *a1)
{
  return NodeDefinitionStore.BuiltinGeomProp.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NodeDefinitionStore.BuiltinGeomProp(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  uint64_t v3 = 0x6E6F697469736F70;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x6C616D726F6ELL;
      goto LABEL_3;
    case 2:
      *a1 = 0x746E65676E6174;
      a1[1] = 0xE700000000000000;
      break;
    case 3:
      *a1 = 0x6E65676E61746962;
      a1[1] = 0xE900000000000074;
      break;
    case 4:
      *a1 = 0x64726F6F63786574;
      a1[1] = 0xE800000000000000;
      break;
    case 5:
      *a1 = 0x6F6C6F636D6F6567;
      a1[1] = 0xE900000000000072;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NodeDefinitionStore.BuiltinGeomProp()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NodeDefinitionStore.BuiltinGeomProp()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NodeDefinitionStore.BuiltinGeomProp()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

ShaderGraph::NodeDefinitionStore::Space_optional __swiftcall NodeDefinitionStore.Space.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NodeDefinitionStore.Space.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 3;
  if (v5 < 3) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t NodeDefinitionStore.Space.rawValue.getter()
{
  uint64_t v1 = 0x7463656A626FLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x646C726F77;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6C65646F6DLL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodeDefinitionStore.Space(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

ShaderGraph::NodeDefinitionStore::Space_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NodeDefinitionStore.Space(Swift::String *a1)
{
  return NodeDefinitionStore.Space.init(rawValue:)(*a1);
}

uint64_t NodeDefinitionStore.GeomProp.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NodeDefinitionStore.GeomProp.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(void *)(a1 + 16) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.GeomProp.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  char v4 = *(unsigned char *)(v1 + 56);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return outlined copy of GeomPropDef.GeomProp(v2, v3, v4);
}

void NodeDefinitionStore.GeomProp.space.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 57);
}

uint64_t NodeDefinitionStore.GeomProp.init(geomPropDef:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = (void *)a1[2];
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  uint64_t v7 = v4[5];
  swift_bridgeObjectRetain();
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  outlined init with take of GeomPropDef.GeomProp((uint64_t)(a1 + 3), (uint64_t)v15);
  outlined init with take of GeomPropDef.GeomProp((uint64_t)v15, (uint64_t)v16);
  char v10 = v17;
  if (v17)
  {
    uint64_t v11 = v16[0];
    uint64_t v12 = v16[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of GeomPropDef.GeomProp((uint64_t)v15);
    outlined release of GeomPropDef((uint64_t)a1);
  }
  else
  {
    uint64_t v11 = LOBYTE(v16[0]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined release of GeomPropDef((uint64_t)a1);
    uint64_t v12 = 0;
  }
  outlined init with take of MetalFunctionNode?((uint64_t)a1 + 41, (uint64_t)&v14, (uint64_t *)&demangling cache variable for type metadata for GeomPropDef.Space?);
  uint64_t result = outlined init with take of MetalFunctionNode?((uint64_t)&v14, a2 + 57, (uint64_t *)&demangling cache variable for type metadata for GeomPropDef.Space?);
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v11;
  *(void *)(a2 + 48) = v12;
  *(unsigned char *)(a2 + 56) = v10;
  return result;
}

uint64_t NodeDefinitionStore.nodes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.geomProps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.nodesLookupId.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.geomPropsLookupId.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeDefinitionStore.nodesLookupName.getter()
{
  return swift_bridgeObjectRetain();
}

void __swiftcall NodeDefinitionStore.init()(ShaderGraph::NodeDefinitionStore *__return_ptr retstr)
{
  if (one-time initialization token for shared != -1) {
    goto LABEL_91;
  }
  while (1)
  {
    uint64_t v1 = swift_bridgeObjectRetain();
    uint64_t v2 = specialized Sequence.filter(_:)(v1);
    int64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      uint64_t v242 = (void *)MEMORY[0x263F8EE78];
      int64_t v199 = v3;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
      uint64_t v4 = 0;
      uint64_t v5 = v242;
      uint64_t v198 = v2 + 32;
      do
      {
        uint64_t v220 = v4;
        uint64_t v6 = (long long *)(v198 + 144 * v4);
        long long v243 = *v6;
        long long v7 = v6[1];
        long long v8 = v6[2];
        long long v9 = v6[4];
        long long v246 = v6[3];
        long long v247 = v9;
        long long v244 = v7;
        long long v245 = v8;
        long long v10 = v6[5];
        long long v11 = v6[6];
        long long v12 = v6[8];
        long long v250 = v6[7];
        long long v251 = v12;
        long long v248 = v10;
        long long v249 = v11;
        uint64_t v13 = v12;
        v253[0] = v12;
        uint64_t v216 = *((void *)&v244 + 1);
        uint64_t v219 = v244;
        uint64_t v212 = *((void *)&v243 + 1);
        uint64_t v214 = v243;
        int64_t v14 = *(void *)(v12 + 16);
        if (v14)
        {
          outlined retain of NodeDef((uint64_t)&v243);
          outlined retain of NodeDef((uint64_t)&v243);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined retain of [Input]((uint64_t)v253);
          uint64_t v241 = MEMORY[0x263F8EE78];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
          uint64_t v15 = v241;
          unint64_t v16 = (uint64_t *)(v13 + 48);
          for (int64_t i = v14 - 1; ; --i)
          {
            uint64_t v18 = *(v16 - 1);
            uint64_t v20 = *v16;
            uint64_t v19 = v16[1];
            uint64_t v21 = v16[4];
            char v22 = *((unsigned char *)v16 + 40);
            *(void *)&long long v222 = *(v16 - 2);
            *((void *)&v222 + 1) = v18;
            *(void *)&long long v223 = v20;
            *((void *)&v223 + 1) = v19;
            long long v224 = *((_OWORD *)v16 + 1);
            *(void *)&long long v225 = v21;
            BYTE8(v225) = v22;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            closure #1 in NodeDefinitionStore.Node.init(nodeDef:)((uint64_t)&v222, (uint64_t *)&v243, "could not generate type storage for input %s with default value %s for node %s in NodeDefinitionStore. Skipping this node.", (uint64_t)&v232);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v241 = v15;
            unint64_t v24 = *(void *)(v15 + 16);
            unint64_t v23 = *(void *)(v15 + 24);
            if (v24 >= v23 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
              uint64_t v15 = v241;
            }
            *(void *)(v15 + 16) = v24 + 1;
            uint64_t v25 = (_OWORD *)(v15 + 144 * v24);
            _OWORD v25[2] = v232;
            long long v26 = v233;
            long long v27 = v234;
            long long v28 = v236;
            void v25[5] = v235;
            v25[6] = v28;
            _OWORD v25[3] = v26;
            v25[4] = v27;
            long long v29 = v237;
            long long v30 = v238;
            long long v31 = *(_OWORD *)v239;
            *(_OWORD *)((char *)v25 + 153) = *(_OWORD *)&v239[9];
            v25[8] = v30;
            v25[9] = v31;
            v25[7] = v29;
            if (!i) {
              break;
            }
            v16 += 8;
          }
          outlined release of NodeDef((uint64_t)&v243);
          outlined release of [Input]((uint64_t)v253);
        }
        else
        {
          outlined retain of NodeDef((uint64_t)&v243);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v15 = MEMORY[0x263F8EE78];
        }
        uint64_t v32 = *((void *)&v251 + 1);
        uint64_t v252 = *((void *)&v251 + 1);
        int64_t v33 = *(void *)(*((void *)&v251 + 1) + 16);
        if (v33)
        {
          outlined retain of NodeDef((uint64_t)&v243);
          outlined retain of [Input]((uint64_t)&v252);
          uint64_t v241 = MEMORY[0x263F8EE78];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33, 0);
          uint64_t v34 = v241;
          uint64_t v35 = (uint64_t *)(v32 + 48);
          for (int64_t j = v33 - 1; ; --j)
          {
            uint64_t v37 = *(v35 - 1);
            uint64_t v39 = *v35;
            uint64_t v38 = v35[1];
            uint64_t v40 = v35[4];
            char v41 = *((unsigned char *)v35 + 40);
            *(void *)&long long v222 = *(v35 - 2);
            *((void *)&v222 + 1) = v37;
            *(void *)&long long v223 = v39;
            *((void *)&v223 + 1) = v38;
            long long v224 = *((_OWORD *)v35 + 1);
            *(void *)&long long v225 = v40;
            BYTE8(v225) = v41;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            closure #1 in NodeDefinitionStore.Node.init(nodeDef:)((uint64_t)&v222, (uint64_t *)&v243, "could not generate type storage for output %s with default value %s for node %s in NodeDefinitionStore. Skipping this node.", (uint64_t)&v232);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v241 = v34;
            unint64_t v43 = *(void *)(v34 + 16);
            unint64_t v42 = *(void *)(v34 + 24);
            if (v43 >= v42 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
              uint64_t v34 = v241;
            }
            *(void *)(v34 + 16) = v43 + 1;
            uint64_t v44 = (_OWORD *)(v34 + 144 * v43);
            v44[2] = v232;
            long long v45 = v233;
            long long v46 = v234;
            long long v47 = v236;
            v44[5] = v235;
            v44[6] = v47;
            unint64_t v44[3] = v45;
            v44[4] = v46;
            long long v48 = v237;
            long long v49 = v238;
            long long v50 = *(_OWORD *)v239;
            *(_OWORD *)((char *)v44 + 153) = *(_OWORD *)&v239[9];
            v44[8] = v49;
            v44[9] = v50;
            v44[7] = v48;
            if (!j) {
              break;
            }
            v35 += 8;
          }
          outlined release of NodeDef((uint64_t)&v243);
          outlined release of [Input]((uint64_t)&v252);
        }
        else
        {
          uint64_t v34 = MEMORY[0x263F8EE78];
        }
        uint64_t v51 = *((void *)&v250 + 1);
        if (*((void *)&v250 + 1) == 1)
        {
          uint64_t v51 = 0;
          unint64_t v208 = 0xE900000000000064;
          uint64_t v210 = 0;
          uint64_t v52 = 0x6574726F70707573;
        }
        else if (*((void *)&v250 + 1) == 2)
        {
          uint64_t v51 = 0;
          unint64_t v208 = 0xEB00000000646574;
          uint64_t v210 = 0;
          uint64_t v52 = 0x726F707075736E75;
        }
        else
        {
          uint64_t v210 = v250;
          swift_bridgeObjectRetain();
          unint64_t v208 = 0xEA00000000006465;
          uint64_t v52 = 0x7461636572706564;
        }
        uint64_t v206 = v52;
        uint64_t v53 = *((void *)&v248 + 1);
        long long v54 = v246;
        uint64_t v55 = *((void *)&v245 + 1);
        uint64_t v201 = v245;
        long long v203 = v249;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined release of NodeDef((uint64_t)&v243);
        uint64_t v242 = v5;
        unint64_t v57 = v5[2];
        unint64_t v56 = v5[3];
        uint64_t v58 = v5;
        if (v57 >= v56 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
          uint64_t v58 = v242;
        }
        uint64_t v4 = v220 + 1;
        char v59 = v248;
        v58[2] = v57 + 1;
        uint64_t v60 = &v58[20 * v57];
        v60[4] = v214;
        v60[5] = v212;
        v60[6] = v219;
        v60[7] = v216;
        char v60[8] = v201;
        v60[9] = v55;
        *((_OWORD *)v60 + 5) = v54;
        *((_OWORD *)v60 + 6) = v54;
        *((unsigned char *)v60 + 112) = v59;
        int v61 = *(_DWORD *)((char *)&v232 + 3);
        *(_DWORD *)((char *)v60 + 113) = v232;
        *((_DWORD *)v60 + 29) = v61;
        v60[15] = v53;
        *((_OWORD *)v60 + 8) = v203;
        v60[18] = v15;
        v60[19] = v34;
        v60[20] = v206;
        v60[21] = v208;
        v60[22] = v210;
        v60[23] = v51;
        uint64_t v5 = v58;
      }
      while (v220 + 1 != v199);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRetain();
    uint64_t v62 = swift_bridgeObjectRetain();
    uint64_t v63 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph11GeomPropDefV_G_AH19NodeDefinitionStoreV0gH0Vs5NeverOTg504_s11e7Graph19jkl10VACycfcAC8gh7VAA0fG3I6Vcfu0_Tf1cn_n(v62);
    swift_bridgeObjectRelease();
    uint64_t v64 = v5[2];
    uint64_t v221 = v5;
    uint64_t v202 = v63;
    if (v64)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      long long v65 = *((_OWORD *)v5 + 9);
      long long v238 = *((_OWORD *)v5 + 8);
      *(_OWORD *)uint64_t v239 = v65;
      long long v66 = *((_OWORD *)v5 + 11);
      *(_OWORD *)&v239[16] = *((_OWORD *)v5 + 10);
      long long v240 = v66;
      long long v67 = *((_OWORD *)v5 + 5);
      long long v234 = *((_OWORD *)v5 + 4);
      long long v235 = v67;
      long long v68 = *((_OWORD *)v5 + 7);
      long long v236 = *((_OWORD *)v5 + 6);
      long long v237 = v68;
      long long v69 = *((_OWORD *)v5 + 3);
      long long v232 = *((_OWORD *)v5 + 2);
      long long v233 = v69;
      uint64_t v70 = v64 - 1;
      uint64_t v71 = (void *)MEMORY[0x263F8EE80];
      for (uint64_t k = 24; ; k += 20)
      {
        long long v73 = v232;
        outlined retain of NodeDefinitionStore.Node((uint64_t)&v232);
        outlined retain of NodeDefinitionStore.Node((uint64_t)&v232);
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v242 = v71;
        unint64_t v76 = specialized __RawDictionaryStorage.find<A>(_:)(v73, *((uint64_t *)&v73 + 1));
        uint64_t v77 = v71;
        uint64_t v78 = v71[2];
        BOOL v79 = (v75 & 1) == 0;
        uint64_t v80 = v78 + v79;
        if (__OFADD__(v78, v79))
        {
          __break(1u);
LABEL_86:
          __break(1u);
          goto LABEL_87;
        }
        char v81 = v75;
        if (v77[3] >= v80)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            if (v75) {
              goto LABEL_39;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            if (v81) {
              goto LABEL_39;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v80, isUniquelyReferenced_nonNull_native);
          unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)(v73, *((uint64_t *)&v73 + 1));
          if ((v81 & 1) != (v83 & 1))
          {
LABEL_92:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return;
          }
          unint64_t v76 = v82;
          if (v81)
          {
LABEL_39:
            uint64_t v71 = v242;
            long long v84 = (long long *)(v242[7] + 160 * v76);
            long long v85 = v84[1];
            long long v222 = *v84;
            long long v223 = v85;
            long long v86 = v84[5];
            long long v88 = v84[2];
            long long v87 = v84[3];
            long long v226 = v84[4];
            long long v227 = v86;
            long long v224 = v88;
            long long v225 = v87;
            long long v89 = v84[9];
            long long v91 = v84[6];
            long long v90 = v84[7];
            long long v230 = v84[8];
            long long v231 = v89;
            long long v228 = v91;
            long long v229 = v90;
            outlined release of NodeDefinitionStore.Node((uint64_t)&v222);
            long long v92 = v233;
            *long long v84 = v232;
            v84[1] = v92;
            long long v93 = v237;
            long long v95 = v234;
            long long v94 = v235;
            v84[4] = v236;
            v84[5] = v93;
            v84[2] = v95;
            v84[3] = v94;
            long long v96 = v240;
            long long v98 = v238;
            long long v97 = *(_OWORD *)v239;
            char v84[8] = *(_OWORD *)&v239[16];
            _OWORD v84[9] = v96;
            v84[6] = v98;
            v84[7] = v97;
            goto LABEL_43;
          }
        }
        uint64_t v71 = v242;
        v242[(v76 >> 6) + 8] |= 1 << v76;
        *(_OWORD *)(v71[6] + 16 * v76) = v73;
        long long v99 = (_OWORD *)(v71[7] + 160 * v76);
        long long v101 = *(_OWORD *)&v239[16];
        long long v100 = v240;
        long long v102 = *(_OWORD *)v239;
        v99[6] = v238;
        v99[7] = v102;
        char v99[8] = v101;
        v99[9] = v100;
        long long v104 = v236;
        long long v103 = v237;
        long long v105 = v235;
        v99[2] = v234;
        unint64_t v99[3] = v105;
        v99[4] = v104;
        v99[5] = v103;
        long long v106 = v233;
        *long long v99 = v232;
        v99[1] = v106;
        uint64_t v107 = v71[2];
        BOOL v108 = __OFADD__(v107, 1);
        uint64_t v109 = v107 + 1;
        if (v108) {
          goto LABEL_88;
        }
        v71[2] = v109;
        swift_bridgeObjectRetain();
LABEL_43:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of NodeDefinitionStore.Node((uint64_t)&v232);
        if (!v70)
        {
          swift_bridgeObjectRelease();
          goto LABEL_47;
        }
        long long v110 = *(_OWORD *)&v5[k + 2];
        long long v232 = *(_OWORD *)&v5[k];
        long long v233 = v110;
        long long v111 = *(_OWORD *)&v5[k + 4];
        long long v112 = *(_OWORD *)&v5[k + 6];
        long long v113 = *(_OWORD *)&v5[k + 10];
        long long v236 = *(_OWORD *)&v5[k + 8];
        long long v237 = v113;
        long long v234 = v111;
        long long v235 = v112;
        long long v114 = *(_OWORD *)&v5[k + 12];
        long long v115 = *(_OWORD *)&v5[k + 14];
        long long v116 = *(_OWORD *)&v5[k + 18];
        *(_OWORD *)&v239[16] = *(_OWORD *)&v5[k + 16];
        long long v240 = v116;
        long long v238 = v114;
        *(_OWORD *)uint64_t v239 = v115;
        --v70;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v71 = (void *)MEMORY[0x263F8EE80];
LABEL_47:
    uint64_t v200 = v71;
    uint64_t v117 = v63[2];
    long long v118 = (void *)MEMORY[0x263F8EE80];
    if (v117)
    {
      swift_bridgeObjectRetain();
      long long v119 = (char *)v63 + 89;
      long long v120 = (void *)MEMORY[0x263F8EE80];
      while (1)
      {
        uint64_t v209 = v117;
        uint64_t v124 = *(void *)(v119 - 57);
        uint64_t v125 = *(void *)(v119 - 49);
        uint64_t v126 = *(void *)(v119 - 41);
        uint64_t v211 = *(void *)(v119 - 33);
        uint64_t v127 = *(void *)(v119 - 25);
        uint64_t v128 = *(void *)(v119 - 17);
        uint64_t v129 = *(void *)(v119 - 9);
        char v130 = *(v119 - 1);
        char v213 = *v119;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of GeomPropDef.GeomProp(v128, v129, v130);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v217 = v129;
        char v215 = v130;
        outlined copy of GeomPropDef.GeomProp(v128, v129, v130);
        swift_bridgeObjectRetain();
        char v131 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v232 = v120;
        unint64_t v133 = specialized __RawDictionaryStorage.find<A>(_:)(v124, v125);
        uint64_t v134 = v120[2];
        BOOL v135 = (v132 & 1) == 0;
        uint64_t v136 = v134 + v135;
        if (__OFADD__(v134, v135)) {
          goto LABEL_86;
        }
        char v137 = v132;
        if (v120[3] >= v136)
        {
          if (v131)
          {
            long long v120 = (void *)v232;
            if ((v132 & 1) == 0) {
              goto LABEL_58;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            long long v120 = (void *)v232;
            if ((v137 & 1) == 0) {
              goto LABEL_58;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v136, v131);
          unint64_t v138 = specialized __RawDictionaryStorage.find<A>(_:)(v124, v125);
          if ((v137 & 1) != (v139 & 1)) {
            goto LABEL_92;
          }
          unint64_t v133 = v138;
          long long v120 = (void *)v232;
          if ((v137 & 1) == 0)
          {
LABEL_58:
            v120[(v133 >> 6) + 8] |= 1 << v133;
            uint64_t v140 = (uint64_t *)(v120[6] + 16 * v133);
            *uint64_t v140 = v124;
            v140[1] = v125;
            unint64_t v141 = v120[7] + (v133 << 6);
            *(void *)unint64_t v141 = v124;
            *(void *)(v141 + 8) = v125;
            *(void *)(v141 + 16) = v126;
            *(void *)(v141 + 24) = v211;
            uint64_t v122 = v217;
            *(void *)(v141 + 32) = v127;
            *(void *)(v141 + 40) = v128;
            *(void *)(v141 + 48) = v217;
            char v123 = v215;
            *(unsigned char *)(v141 + 56) = v215;
            *(unsigned char *)(v141 + 57) = v213;
            uint64_t v142 = v120[2];
            BOOL v108 = __OFADD__(v142, 1);
            uint64_t v143 = v142 + 1;
            if (v108) {
              goto LABEL_89;
            }
            v120[2] = v143;
            swift_bridgeObjectRetain();
            goto LABEL_50;
          }
        }
        unint64_t v121 = v120[7] + (v133 << 6);
        uint64_t v205 = *(void *)(v121 + 48);
        uint64_t v207 = *(void *)(v121 + 40);
        char v204 = *(unsigned char *)(v121 + 56);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of GeomPropDef.GeomProp(v207, v205, v204);
        *(void *)unint64_t v121 = v124;
        *(void *)(v121 + 8) = v125;
        *(void *)(v121 + 16) = v126;
        *(void *)(v121 + 24) = v211;
        uint64_t v122 = v217;
        *(void *)(v121 + 32) = v127;
        *(void *)(v121 + 40) = v128;
        *(void *)(v121 + 48) = v217;
        char v123 = v215;
        *(unsigned char *)(v121 + 56) = v215;
        *(unsigned char *)(v121 + 57) = v213;
LABEL_50:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        outlined consume of GeomPropDef.GeomProp(v128, v122, v123);
        v119 += 64;
        uint64_t v117 = v209 - 1;
        if (v209 == 1)
        {
          uint64_t v63 = v202;
          swift_bridgeObjectRelease();
          uint64_t v144 = v221;
          long long v118 = (void *)MEMORY[0x263F8EE80];
          goto LABEL_64;
        }
      }
    }
    uint64_t v144 = v5;
    long long v120 = (void *)MEMORY[0x263F8EE80];
LABEL_64:
    uint64_t v218 = v120;
    swift_bridgeObjectRelease();
    *(void *)&long long v222 = v118;
    uint64_t v145 = v144[2];
    if (!v145) {
      break;
    }
    long long v146 = *((_OWORD *)v144 + 9);
    long long v238 = *((_OWORD *)v144 + 8);
    *(_OWORD *)uint64_t v239 = v146;
    long long v147 = *((_OWORD *)v144 + 11);
    *(_OWORD *)&v239[16] = *((_OWORD *)v144 + 10);
    long long v240 = v147;
    long long v148 = *((_OWORD *)v144 + 5);
    long long v234 = *((_OWORD *)v144 + 4);
    long long v235 = v148;
    long long v149 = *((_OWORD *)v144 + 7);
    long long v236 = *((_OWORD *)v144 + 6);
    long long v237 = v149;
    long long v150 = *((_OWORD *)v144 + 3);
    long long v232 = *((_OWORD *)v144 + 2);
    long long v233 = v150;
    uint64_t v151 = *((void *)&v150 + 1);
    uint64_t v152 = v150;
    outlined retain of NodeDefinitionStore.Node((uint64_t)&v232);
    swift_bridgeObjectRetain();
    unint64_t v154 = specialized __RawDictionaryStorage.find<A>(_:)(v152, v151);
    uint64_t v155 = v118[2];
    BOOL v156 = (v153 & 1) == 0;
    uint64_t v157 = v155 + v156;
    if (!__OFADD__(v155, v156))
    {
      char v158 = v153;
      uint64_t v159 = 24;
      do
      {
        if (v118[3] < v157)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v157, 1);
          long long v118 = (void *)v222;
          unint64_t v160 = specialized __RawDictionaryStorage.find<A>(_:)(v152, v151);
          if ((v158 & 1) != (v161 & 1)) {
            goto LABEL_92;
          }
          unint64_t v154 = v160;
        }
        if (v158)
        {
          swift_bridgeObjectRelease();
          uint64_t v162 = v118[7];
          uint64_t v163 = *(void **)(v162 + 8 * v154);
          char v164 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v162 + 8 * v154) = v163;
          if ((v164 & 1) == 0)
          {
            uint64_t v163 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v163[2] + 1, 1, v163);
            *(void *)(v162 + 8 * v154) = v163;
          }
          unint64_t v166 = v163[2];
          unint64_t v165 = v163[3];
          if (v166 >= v165 >> 1)
          {
            uint64_t v163 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v165 > 1), v166 + 1, 1, v163);
            *(void *)(v162 + 8 * v154) = v163;
          }
          v163[2] = v166 + 1;
          int64_t v167 = &v163[20 * v166];
          long long v168 = v233;
          v167[2] = v232;
          v167[3] = v168;
          long long v169 = v234;
          long long v170 = v235;
          long long v171 = v237;
          v167[6] = v236;
          v167[7] = v171;
          v167[4] = v169;
          v167[5] = v170;
          long long v172 = v238;
          long long v173 = *(_OWORD *)v239;
          long long v174 = v240;
          v167[10] = *(_OWORD *)&v239[16];
          v167[11] = v174;
          v167[8] = v172;
          v167[9] = v173;
          if (!--v145) {
            goto LABEL_82;
          }
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDefinitionStore.Node>);
          unint64_t v175 = (_OWORD *)swift_allocObject();
          long long v176 = v238;
          long long v177 = *(_OWORD *)&v239[16];
          long long v178 = v240;
          v175[9] = *(_OWORD *)v239;
          v175[10] = v177;
          v175[11] = v178;
          long long v179 = v234;
          long long v180 = v236;
          long long v181 = v237;
          v175[5] = v235;
          v175[6] = v180;
          v175[7] = v181;
          v175[8] = v176;
          long long v182 = v232;
          long long v183 = v233;
          v175[1] = xmmword_25C418EE0;
          v175[2] = v182;
          v175[3] = v183;
          v175[4] = v179;
          v118[(v154 >> 6) + 8] |= 1 << v154;
          uint64_t v184 = (uint64_t *)(v118[6] + 16 * v154);
          *uint64_t v184 = v152;
          v184[1] = v151;
          *(void *)(v118[7] + 8 * v154) = v175;
          uint64_t v185 = v118[2];
          BOOL v108 = __OFADD__(v185, 1);
          uint64_t v186 = v185 + 1;
          if (v108) {
            goto LABEL_90;
          }
          _OWORD v118[2] = v186;
          if (!--v145)
          {
LABEL_82:
            uint64_t v144 = v221;
            swift_bridgeObjectRelease();
            uint64_t v63 = v202;
            goto LABEL_84;
          }
        }
        long long v187 = *(_OWORD *)&v221[v159 + 2];
        long long v232 = *(_OWORD *)&v221[v159];
        long long v233 = v187;
        long long v188 = *(_OWORD *)&v221[v159 + 4];
        long long v189 = *(_OWORD *)&v221[v159 + 6];
        long long v190 = *(_OWORD *)&v221[v159 + 10];
        long long v236 = *(_OWORD *)&v221[v159 + 8];
        long long v237 = v190;
        long long v234 = v188;
        long long v235 = v189;
        long long v191 = *(_OWORD *)&v221[v159 + 12];
        long long v192 = *(_OWORD *)&v221[v159 + 14];
        long long v193 = *(_OWORD *)&v221[v159 + 18];
        *(_OWORD *)&v239[16] = *(_OWORD *)&v221[v159 + 16];
        long long v240 = v193;
        long long v238 = v191;
        *(_OWORD *)uint64_t v239 = v192;
        uint64_t v151 = *((void *)&v233 + 1);
        uint64_t v152 = v233;
        outlined retain of NodeDefinitionStore.Node((uint64_t)&v232);
        swift_bridgeObjectRetain();
        unint64_t v154 = specialized __RawDictionaryStorage.find<A>(_:)(v152, v151);
        char v158 = v194;
        uint64_t v195 = v118[2];
        BOOL v196 = (v194 & 1) == 0;
        v159 += 20;
        uint64_t v157 = v195 + v196;
      }
      while (!__OFADD__(v195, v196));
    }
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    swift_once();
  }
  swift_bridgeObjectRelease();
LABEL_84:
  retstr->nodes._uint64_t rawValue = v144;
  retstr->geomProps._uint64_t rawValue = v63;
  retstr->nodesLookupId._uint64_t rawValue = v200;
  retstr->geomPropsLookupId._uint64_t rawValue = v218;
  retstr->nodesLookupName._uint64_t rawValue = v118;
}

uint64_t Array.toDictionary<A>(with:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v31 = a1;
  uint64_t v32 = a2;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  long long v30 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a4 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v19 = Dictionary.init()();
  uint64_t v37 = v19;
  uint64_t v20 = swift_bridgeObjectRetain();
  if (MEMORY[0x261184220](v20, a4))
  {
    uint64_t v21 = 0;
    uint64_t v35 = (void (**)(char *, uint64_t *, uint64_t))(v16 + 16);
    long long v29 = (void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
    uint64_t v27 = v17;
    long long v28 = (void (**)(char *, uint64_t))(v16 + 8);
    while (1)
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        unint64_t v23 = *(void (**)(char *, uint64_t *, uint64_t))(v16 + 16);
        v23(v18, (uint64_t *)(a3+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v21), a4);
        uint64_t v24 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v27 != 8)
        {
          __break(1u);
          return result;
        }
        uint64_t v36 = result;
        unint64_t v23 = *v35;
        (*v35)(v18, &v36, a4);
        swift_unknownObjectRelease();
        uint64_t v24 = v21 + 1;
        if (__OFADD__(v21, 1))
        {
LABEL_10:
          __break(1u);
LABEL_11:
          swift_bridgeObjectRelease();
          return v37;
        }
      }
      v31(v18);
      v23(v13, (uint64_t *)v18, a4);
      (*v29)(v13, 0, 1, a4);
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      (*v28)(v18, a4);
      ++v21;
      if (v24 == MEMORY[0x261184220](a3, a4)) {
        goto LABEL_11;
      }
    }
  }
  swift_bridgeObjectRelease();
  return v19;
}

void __swiftcall NodeDefinitionStore.getNodeDefinition(id:)(ShaderGraph::NodeDefinitionStore::Node_optional *__return_ptr retstr, Swift::String id)
{
  uint64_t v4 = *(void *)(v2 + 16);
  if (*(void *)(v4 + 16))
  {
    object = id._object;
    uint64_t countAndFlagsBits = id._countAndFlagsBits;
    swift_bridgeObjectRetain();
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if (v8)
    {
      long long v9 = (_OWORD *)(*(void *)(v4 + 56) + 160 * v7);
      long long v10 = v9[1];
      v17[0] = *v9;
      v17[1] = v10;
      long long v11 = v9[5];
      long long v13 = v9[2];
      long long v12 = v9[3];
      v17[4] = v9[4];
      void v17[5] = v11;
      long long v17[2] = v13;
      _OWORD v17[3] = v12;
      long long v14 = v9[6];
      long long v15 = v9[7];
      long long v16 = v9[9];
      v17[8] = v9[8];
      v17[9] = v16;
      v17[6] = v14;
      void v17[7] = v15;
      memmove(retstr, v9, 0xA0uLL);
      destructiveProjectEnumData for NodePersonality.ShaderType(retstr);
      outlined retain of NodeDefinitionStore.Node((uint64_t)v17);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
  }
  _s11ShaderGraph19NodeDefinitionStoreV0C0VSgWOi0_(v17);
  outlined init with take of MetalFunctionNode?((uint64_t)v17, (uint64_t)retstr, &demangling cache variable for type metadata for NodeDefinitionStore.Node?);
}

Swift::OpaquePointer_optional __swiftcall NodeDefinitionStore.getNodeDefinition(name:)(Swift::String name)
{
  uint64_t v2 = *(void *)(v1 + 32);
  if (*(void *)(v2 + 16))
  {
    object = name._object;
    uint64_t countAndFlagsBits = name._countAndFlagsBits;
    swift_bridgeObjectRetain();
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if (v6)
    {
      uint64_t v7 = *(void *)(*(void *)(v2 + 56) + 8 * v5);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v7 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  name._uint64_t countAndFlagsBits = v7;
  return *(Swift::OpaquePointer_optional *)&name._countAndFlagsBits;
}

double NodeDefinitionStore.getGeomProp(id:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(v3 + 24);
  if (!*(void *)(v5 + 16)) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    double result = 0.0;
    *(_OWORD *)(a3 + 42) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  unint64_t v10 = *(void *)(v5 + 56) + (v8 << 6);
  uint64_t v11 = *(void *)(v10 + 8);
  uint64_t v12 = *(void *)(v10 + 32);
  uint64_t v13 = *(void *)(v10 + 40);
  uint64_t v14 = *(void *)(v10 + 48);
  char v15 = *(unsigned char *)(v10 + 56);
  char v16 = *(unsigned char *)(v10 + 57);
  *(void *)a3 = *(void *)v10;
  *(void *)(a3 + 8) = v11;
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v10 + 16);
  *(void *)(a3 + 32) = v12;
  *(void *)(a3 + 40) = v13;
  *(void *)(a3 + 48) = v14;
  *(unsigned char *)(a3 + 56) = v15;
  *(unsigned char *)(a3 + 57) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of GeomPropDef.GeomProp(v13, v14, v15);
  swift_bridgeObjectRelease();
  return result;
}

uint64_t specialized Dictionary.Values.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  char v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized static NodeDefinitionStore.TypeStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v11 = *(void **)a2;
  uint64_t v12 = *(void **)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v14 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 32);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v18 = *(void *)(a2 + 48);
  uint64_t v17 = *(void *)(a2 + 56);
  int v19 = *(unsigned __int8 *)(a2 + 64);
  v215[0] = *(void *)a1;
  v215[1] = v3;
  v215[2] = v4;
  v215[3] = v5;
  v215[4] = v7;
  v215[5] = v6;
  v215[6] = v9;
  v215[7] = v8;
  char v216 = v10;
  uint64_t v217 = v11;
  uint64_t v218 = v12;
  uint64_t v219 = v13;
  uint64_t v220 = v14;
  uint64_t v221 = v16;
  uint64_t v222 = v15;
  uint64_t v223 = v18;
  uint64_t v224 = v17;
  char v225 = v19;
  switch(v10)
  {
    case 1:
      if (v19 != 1) {
        goto LABEL_89;
      }
      int v23 = v2;
      unsigned __int8 v24 = v11;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      char v22 = v23 == v24;
      return v22 & 1;
    case 2:
      if (v19 == 2) {
        goto LABEL_9;
      }
      goto LABEL_89;
    case 3:
      if (v19 != 3) {
        goto LABEL_89;
      }
LABEL_9:
      int v25 = (int)v11;
      int v26 = (int)v2;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      char v22 = v26 == v25;
      return v22 & 1;
    case 4:
      if (v19 != 4) {
        goto LABEL_89;
      }
      int v27 = (unsigned __int16)v2;
      unsigned __int16 v28 = (unsigned __int16)v11;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      char v22 = v27 == v28;
      return v22 & 1;
    case 5:
      if (v19 != 5) {
        goto LABEL_89;
      }
      float v29 = *(float *)&v2;
      float v30 = *(float *)&v11;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      if (v29 != v30) {
        goto LABEL_90;
      }
      goto LABEL_95;
    case 6:
      if (v19 != 6)
      {
        long long v88 = v11;
        long long v89 = v12;
        int v90 = v13;
        int v91 = v14;
        int v92 = v15;
        swift_bridgeObjectRetain();
        LODWORD(v15) = v92;
        LODWORD(v14) = v91;
        LODWORD(v13) = v90;
        uint64_t v12 = v89;
        uint64_t v11 = v88;
        goto LABEL_89;
      }
      uint64_t v145 = v3;
      unint64_t v141 = v2;
      if (v2 == v11 && v3 == v12)
      {
        char v22 = 1;
      }
      else
      {
        long long v174 = v11;
        int v166 = v13;
        long long v94 = v12;
        int v158 = v14;
        int v154 = v15;
        char v95 = _stringCompareWithSmolCheck(_:_:expecting:)();
        LODWORD(v15) = v154;
        LODWORD(v14) = v158;
        LODWORD(v13) = v166;
        uint64_t v12 = v94;
        uint64_t v11 = v174;
        char v22 = v95;
      }
      outlined copy of SGDataTypeStorage(v11, v12, v13, v14, v16, v15, v18, v17, 6);
      outlined copy of SGDataTypeStorage(v141, v145, v4, v5, v7, v6, v9, v8, 6);
      goto LABEL_94;
    case 7:
      if (v19 != 7) {
        goto LABEL_89;
      }
      unint64_t v31 = (unint64_t)v11;
      uint64_t v32 = v2;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      if (*(float *)&v32 != *(float *)&v31) {
        goto LABEL_90;
      }
      float v33 = *((float *)&v32 + 1);
      unint64_t v34 = HIDWORD(v31);
      goto LABEL_43;
    case 8:
      if (v19 != 8) {
        goto LABEL_89;
      }
      *(void *)&long long v66 = v2;
      *((void *)&v66 + 1) = v3;
      *(_OWORD *)long long v171 = v66;
      *(void *)&long long v66 = v11;
      *((void *)&v66 + 1) = v12;
      *(_OWORD *)uint64_t v163 = v66;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      uint64_t v67 = 0;
      while (1)
      {
        long long v175 = *(_OWORD *)v171;
        float v96 = *(float *)((unint64_t)&v175 & 0xFFFFFFFFFFFFFFF3 | (4 * (v67 & 3)));
        long long v176 = *(_OWORD *)v163;
        float v97 = *(float *)((unint64_t)&v176 & 0xFFFFFFFFFFFFFFF3 | (4 * (v67 & 3)));
        BOOL v68 = v96 == v97;
        if (v67 == 2) {
          goto LABEL_155;
        }
        while (1)
        {
          ++v67;
          if (v68) {
            break;
          }
          if (v67 == 2) {
            goto LABEL_90;
          }
          BOOL v68 = 0;
        }
      }
    case 9:
      if (v19 != 9) {
        goto LABEL_89;
      }
      *(void *)&long long v35 = v2;
      *((void *)&v35 + 1) = v3;
      *(_OWORD *)int64_t v167 = v35;
      *(void *)&long long v35 = v11;
      *((void *)&v35 + 1) = v12;
      *(_OWORD *)uint64_t v159 = v35;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      uint64_t v36 = 0;
      while (1)
      {
        long long v177 = *(_OWORD *)v167;
        float v96 = *(float *)((unint64_t)&v177 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3)));
        long long v178 = *(_OWORD *)v159;
        float v97 = *(float *)((unint64_t)&v178 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3)));
        BOOL v37 = v96 == v97;
        if (v36 == 3) {
          goto LABEL_155;
        }
        while (1)
        {
          ++v36;
          if (v37) {
            break;
          }
          if (v36 == 3) {
            goto LABEL_90;
          }
          BOOL v37 = 0;
        }
      }
    case 10:
      if (v19 != 10) {
        goto LABEL_89;
      }
      unsigned int v69 = v11;
      int v70 = (int)v2;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      if ((unsigned __int16)v70 != (unsigned __int16)v69 || HIWORD(v70) != HIWORD(v69)) {
        goto LABEL_90;
      }
      goto LABEL_95;
    case 11:
      if (v19 != 11) {
        goto LABEL_89;
      }
      uint64_t v38 = v2;
      uint64_t v39 = v11;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      uint64_t v40 = 0;
      while (1)
      {
        long long v180 = v38;
        int v98 = *(unsigned __int16 *)((unint64_t)&v180 & 0xFFFFFFFFFFFFFFF9 | (2 * (v40 & 3)));
        long long v179 = v39;
        int v99 = *(unsigned __int16 *)((unint64_t)&v179 & 0xFFFFFFFFFFFFFFF9 | (2 * (v40 & 3)));
        BOOL v41 = v98 == v99;
        if (v40 == 2) {
          goto LABEL_198;
        }
        while (1)
        {
          ++v40;
          if (v41) {
            break;
          }
          if (v40 == 2) {
            goto LABEL_90;
          }
          BOOL v41 = 0;
        }
      }
    case 12:
      if (v19 != 12) {
        goto LABEL_89;
      }
      unint64_t v42 = v2;
      unint64_t v43 = v11;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      uint64_t v44 = 0;
      while (1)
      {
        long long v182 = v42;
        int v98 = *(unsigned __int16 *)((unint64_t)&v182 & 0xFFFFFFFFFFFFFFF9 | (2 * (v44 & 3)));
        long long v181 = v43;
        int v99 = *(unsigned __int16 *)((unint64_t)&v181 & 0xFFFFFFFFFFFFFFF9 | (2 * (v44 & 3)));
        BOOL v45 = v98 == v99;
        if (v44 == 3) {
          goto LABEL_198;
        }
        while (1)
        {
          ++v44;
          if (v45) {
            break;
          }
          if (v44 == 3) {
            goto LABEL_90;
          }
          BOOL v45 = 0;
        }
      }
    case 13:
      if (v19 != 13) {
        goto LABEL_89;
      }
      uint64_t v71 = v11;
      uint64_t v72 = v2;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      if (v72 == v71) {
        goto LABEL_95;
      }
      goto LABEL_90;
    case 14:
      if (v19 != 14) {
        goto LABEL_89;
      }
      *(void *)&long long v46 = v2;
      *((void *)&v46 + 1) = v3;
      *(_OWORD *)long long v168 = v46;
      *(void *)&long long v46 = v11;
      *((void *)&v46 + 1) = v12;
      *(_OWORD *)unint64_t v160 = v46;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      uint64_t v47 = 0;
      while (1)
      {
        long long v183 = *(_OWORD *)v168;
        int v98 = *(_DWORD *)((unint64_t)&v183 & 0xFFFFFFFFFFFFFFF3 | (4 * (v47 & 3)));
        long long v184 = *(_OWORD *)v160;
        int v99 = *(_DWORD *)((unint64_t)&v184 & 0xFFFFFFFFFFFFFFF3 | (4 * (v47 & 3)));
        BOOL v48 = v98 == v99;
        if (v47 == 2) {
          goto LABEL_198;
        }
        while (1)
        {
          ++v47;
          if (v48) {
            break;
          }
          if (v47 == 2) {
            goto LABEL_90;
          }
          BOOL v48 = 0;
        }
      }
    case 15:
      if (v19 != 15) {
        goto LABEL_89;
      }
      *(void *)&long long v49 = v2;
      *((void *)&v49 + 1) = v3;
      *(_OWORD *)long long v169 = v49;
      *(void *)&long long v49 = v11;
      *((void *)&v49 + 1) = v12;
      *(_OWORD *)char v161 = v49;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      uint64_t v50 = 0;
      while (1)
      {
        long long v185 = *(_OWORD *)v169;
        int v98 = *(_DWORD *)((unint64_t)&v185 & 0xFFFFFFFFFFFFFFF3 | (4 * (v50 & 3)));
        long long v186 = *(_OWORD *)v161;
        int v99 = *(_DWORD *)((unint64_t)&v186 & 0xFFFFFFFFFFFFFFF3 | (4 * (v50 & 3)));
        BOOL v51 = v98 == v99;
        if (v50 == 3) {
          goto LABEL_198;
        }
        while (1)
        {
          ++v50;
          if (v51) {
            break;
          }
          if (v50 == 3) {
            goto LABEL_90;
          }
          BOOL v51 = 0;
        }
      }
    case 16:
      if (v19 != 16) {
        goto LABEL_89;
      }
      uint64_t v52 = v3;
      unint64_t v53 = (unint64_t)v12;
      long long v54 = v11;
      uint64_t v55 = v2;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      if (*(float *)&v55 != *(float *)&v54
        || *((float *)&v55 + 1) != *((float *)&v54 + 1)
        || *(float *)&v52 != *(float *)&v53)
      {
        goto LABEL_90;
      }
      float v33 = *((float *)&v52 + 1);
      unint64_t v34 = HIDWORD(v53);
LABEL_43:
      if (v33 != *(float *)&v34) {
        goto LABEL_90;
      }
      goto LABEL_95;
    case 17:
      if (v19 != 17) {
        goto LABEL_89;
      }
      *(void *)&long long v56 = v2;
      *((void *)&v56 + 1) = v3;
      *(_OWORD *)uint64_t v155 = v56;
      *(void *)&long long v56 = v4;
      *((void *)&v56 + 1) = v5;
      *(_OWORD *)long long v170 = v56;
      *(void *)&long long v56 = v7;
      *((void *)&v56 + 1) = v6;
      *(_OWORD *)long long v148 = v56;
      *(void *)&long long v56 = v11;
      *((void *)&v56 + 1) = v12;
      *(_OWORD *)uint64_t v151 = v56;
      *(void *)&long long v56 = v13;
      *((void *)&v56 + 1) = v14;
      *(_OWORD *)uint64_t v162 = v56;
      *(void *)&long long v56 = v16;
      *((void *)&v56 + 1) = v15;
      *(_OWORD *)uint64_t v144 = v56;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      uint64_t v57 = 0;
      while (1)
      {
        long long v191 = *(_OWORD *)v155;
        float v100 = *(float *)((unint64_t)&v191 & 0xFFFFFFFFFFFFFFF3 | (4 * (v57 & 3)));
        long long v192 = *(_OWORD *)v151;
        float v101 = *(float *)((unint64_t)&v192 & 0xFFFFFFFFFFFFFFF3 | (4 * (v57 & 3)));
        BOOL v58 = v100 == v101;
        if (v57 == 2) {
          break;
        }
        while (1)
        {
          ++v57;
          if (v58) {
            break;
          }
          BOOL v58 = 0;
          char v22 = 0;
          if (v57 == 2) {
            return v22 & 1;
          }
        }
      }
      if (v100 != v101) {
        goto LABEL_90;
      }
      uint64_t v102 = 0;
      while (1)
      {
        long long v189 = *(_OWORD *)v170;
        float v104 = *(float *)((unint64_t)&v189 & 0xFFFFFFFFFFFFFFF3 | (4 * (v102 & 3)));
        long long v190 = *(_OWORD *)v162;
        float v105 = *(float *)((unint64_t)&v190 & 0xFFFFFFFFFFFFFFF3 | (4 * (v102 & 3)));
        BOOL v103 = v104 == v105;
        if (v102 == 2) {
          break;
        }
        while (1)
        {
          ++v102;
          if (v103) {
            break;
          }
          BOOL v103 = 0;
          char v22 = 0;
          if (v102 == 2) {
            return v22 & 1;
          }
        }
      }
      if (v104 != v105) {
        goto LABEL_90;
      }
      uint64_t v106 = 0;
      while (1)
      {
        long long v187 = *(_OWORD *)v148;
        float v96 = *(float *)((unint64_t)&v187 & 0xFFFFFFFFFFFFFFF3 | (4 * (v106 & 3)));
        long long v188 = *(_OWORD *)v144;
        float v97 = *(float *)((unint64_t)&v188 & 0xFFFFFFFFFFFFFFF3 | (4 * (v106 & 3)));
        BOOL v107 = v96 == v97;
        if (v106 == 2) {
          goto LABEL_155;
        }
        while (1)
        {
          ++v106;
          if (v107) {
            break;
          }
          if (v106 == 2) {
            goto LABEL_90;
          }
          BOOL v107 = 0;
        }
      }
    case 18:
      if (v19 != 18) {
        goto LABEL_89;
      }
      *(void *)&long long v73 = v2;
      *((void *)&v73 + 1) = v3;
      *(_OWORD *)long long v149 = v73;
      *(void *)&long long v73 = v4;
      *((void *)&v73 + 1) = v5;
      *(_OWORD *)long long v172 = v73;
      *(void *)&long long v73 = v7;
      *((void *)&v73 + 1) = v6;
      *(_OWORD *)BOOL v156 = v73;
      *(void *)&long long v73 = v9;
      *((void *)&v73 + 1) = v8;
      *(_OWORD *)uint64_t v142 = v73;
      *(void *)&long long v73 = v11;
      *((void *)&v73 + 1) = v12;
      *(_OWORD *)long long v146 = v73;
      *(void *)&long long v73 = v13;
      *((void *)&v73 + 1) = v14;
      *(_OWORD *)char v164 = v73;
      *(void *)&long long v73 = v16;
      *((void *)&v73 + 1) = v15;
      *(_OWORD *)uint64_t v152 = v73;
      *(void *)&long long v73 = v18;
      *((void *)&v73 + 1) = v17;
      long long v140 = v73;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      uint64_t v74 = 0;
      while (1)
      {
        long long v199 = *(_OWORD *)v149;
        float v108 = *(float *)((unint64_t)&v199 & 0xFFFFFFFFFFFFFFF3 | (4 * (v74 & 3)));
        long long v200 = *(_OWORD *)v146;
        float v109 = *(float *)((unint64_t)&v200 & 0xFFFFFFFFFFFFFFF3 | (4 * (v74 & 3)));
        BOOL v75 = v108 == v109;
        if (v74 == 3) {
          break;
        }
        while (1)
        {
          ++v74;
          if (v75) {
            break;
          }
          BOOL v75 = 0;
          char v22 = 0;
          if (v74 == 3) {
            return v22 & 1;
          }
        }
      }
      if (v108 != v109) {
        goto LABEL_90;
      }
      uint64_t v110 = 0;
      while (1)
      {
        long long v197 = *(_OWORD *)v172;
        float v112 = *(float *)((unint64_t)&v197 & 0xFFFFFFFFFFFFFFF3 | (4 * (v110 & 3)));
        long long v198 = *(_OWORD *)v164;
        float v113 = *(float *)((unint64_t)&v198 & 0xFFFFFFFFFFFFFFF3 | (4 * (v110 & 3)));
        BOOL v111 = v112 == v113;
        if (v110 == 3) {
          break;
        }
        while (1)
        {
          ++v110;
          if (v111) {
            break;
          }
          BOOL v111 = 0;
          char v22 = 0;
          if (v110 == 3) {
            return v22 & 1;
          }
        }
      }
      if (v112 != v113) {
        goto LABEL_90;
      }
      uint64_t v114 = 0;
      while (1)
      {
        long long v195 = *(_OWORD *)v156;
        float v116 = *(float *)((unint64_t)&v195 & 0xFFFFFFFFFFFFFFF3 | (4 * (v114 & 3)));
        long long v196 = *(_OWORD *)v152;
        float v117 = *(float *)((unint64_t)&v196 & 0xFFFFFFFFFFFFFFF3 | (4 * (v114 & 3)));
        BOOL v115 = v116 == v117;
        if (v114 == 3) {
          break;
        }
        while (1)
        {
          ++v114;
          if (v115) {
            break;
          }
          BOOL v115 = 0;
          char v22 = 0;
          if (v114 == 3) {
            return v22 & 1;
          }
        }
      }
      if (v116 != v117) {
        goto LABEL_90;
      }
      uint64_t v118 = 0;
      while (1)
      {
        long long v193 = *(_OWORD *)v142;
        float v96 = *(float *)((unint64_t)&v193 & 0xFFFFFFFFFFFFFFF3 | (4 * (v118 & 3)));
        long long v194 = v140;
        float v97 = *(float *)((unint64_t)&v194 & 0xFFFFFFFFFFFFFFF3 | (4 * (v118 & 3)));
        BOOL v119 = v96 == v97;
        if (v118 == 3) {
          break;
        }
        while (1)
        {
          ++v118;
          if (v119) {
            break;
          }
          if (v118 == 3) {
            goto LABEL_90;
          }
          BOOL v119 = 0;
        }
      }
LABEL_155:
      if (v96 != v97) {
        goto LABEL_90;
      }
      goto LABEL_95;
    case 19:
      if (v19 != 19) {
        goto LABEL_89;
      }
      unint64_t v76 = (unint64_t)v11;
      unint64_t v77 = (unint64_t)v2;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      if ((unsigned __int16)v77 != (unsigned __int16)v76
        || WORD1(v77) != WORD1(v76)
        || WORD2(v77) != WORD2(v76)
        || HIWORD(v77) != HIWORD(v76))
      {
        goto LABEL_90;
      }
      goto LABEL_95;
    case 20:
      if (v19 != 20) {
        goto LABEL_89;
      }
      char v59 = v2;
      uint64_t v60 = v3;
      int v61 = v11;
      uint64_t v62 = v12;
      uint64_t v63 = v13;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      uint64_t v64 = 0;
      while (1)
      {
        uint64_t v206 = v59;
        int v120 = *(unsigned __int16 *)((unint64_t)&v206 & 0xFFFFFFFFFFFFFFF9 | (2 * (v64 & 3)));
        uint64_t v205 = v61;
        int v121 = *(unsigned __int16 *)((unint64_t)&v205 & 0xFFFFFFFFFFFFFFF9 | (2 * (v64 & 3)));
        BOOL v65 = v120 == v121;
        if (v64 == 2) {
          break;
        }
        while (1)
        {
          ++v64;
          if (v65) {
            break;
          }
          BOOL v65 = 0;
          char v22 = 0;
          if (v64 == 2) {
            return v22 & 1;
          }
        }
      }
      if (v120 != v121) {
        goto LABEL_90;
      }
      uint64_t v122 = 0;
      while (1)
      {
        char v204 = v60;
        int v124 = *(unsigned __int16 *)((unint64_t)&v204 & 0xFFFFFFFFFFFFFFF9 | (2 * (v122 & 3)));
        long long v203 = v62;
        int v125 = *(unsigned __int16 *)((unint64_t)&v203 & 0xFFFFFFFFFFFFFFF9 | (2 * (v122 & 3)));
        BOOL v123 = v124 == v125;
        if (v122 == 2) {
          break;
        }
        while (1)
        {
          ++v122;
          if (v123) {
            break;
          }
          BOOL v123 = 0;
          char v22 = 0;
          if (v122 == 2) {
            return v22 & 1;
          }
        }
      }
      if (v124 != v125) {
        goto LABEL_90;
      }
      uint64_t v126 = 0;
      while (1)
      {
        uint64_t v202 = v4;
        int v98 = *(unsigned __int16 *)((unint64_t)&v202 & 0xFFFFFFFFFFFFFFF9 | (2 * (v126 & 3)));
        uint64_t v201 = v63;
        int v99 = *(unsigned __int16 *)((unint64_t)&v201 & 0xFFFFFFFFFFFFFFF9 | (2 * (v126 & 3)));
        BOOL v127 = v98 == v99;
        if (v126 == 2) {
          goto LABEL_198;
        }
        while (1)
        {
          ++v126;
          if (v127) {
            break;
          }
          if (v126 == 2) {
            goto LABEL_90;
          }
          BOOL v127 = 0;
        }
      }
    case 21:
      if (v19 != 21) {
        goto LABEL_89;
      }
      uint64_t v78 = v2;
      BOOL v79 = v3;
      uint64_t v80 = v11;
      char v81 = v12;
      uint64_t v82 = v13;
      uint64_t v83 = v14;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      uint64_t v84 = 0;
      break;
    case 22:
      int v153 = v15;
      int v157 = v14;
      int v165 = v13;
      long long v150 = v12;
      long long v173 = v11;
      if (v19 != 22) {
        goto LABEL_87;
      }
      uint64_t v143 = v2;
      long long v147 = v3;
      type metadata accessor for CGColorRef(0);
      outlined copy of SGDataTypeStorage(v173, v150, v165, v157, v16, v153, v18, v17, 22);
      char v86 = 22;
      goto LABEL_86;
    case 23:
      int v153 = v15;
      int v157 = v14;
      int v165 = v13;
      long long v150 = v12;
      long long v173 = v11;
      if (v19 != 23)
      {
LABEL_87:
        id v87 = v2;
        uint64_t v11 = v173;
        uint64_t v12 = v150;
        LODWORD(v13) = v165;
        LODWORD(v14) = v157;
        LODWORD(v15) = v153;
LABEL_89:
        outlined copy of SGDataTypeStorage(v11, v12, v13, v14, v16, v15, v18, v17, v19);
        outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
        goto LABEL_90;
      }
      uint64_t v143 = v2;
      long long v147 = v3;
      type metadata accessor for CGColorRef(0);
      outlined copy of SGDataTypeStorage(v173, v150, v165, v157, v16, v153, v18, v17, 23);
      char v86 = 23;
LABEL_86:
      outlined copy of SGDataTypeStorage(v143, v147, v4, v5, v7, v6, v9, v8, v86);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
      char v22 = static _CFObject.== infix(_:_:)();
LABEL_94:
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      return v22 & 1;
    default:
      if (v19) {
        goto LABEL_89;
      }
      BOOL v20 = (v2 & 1) == 0;
      char v21 = (char)v11;
      outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)v215, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of SGDataTypeStorage);
      char v22 = v20 ^ v21;
      return v22 & 1;
  }
  while (1)
  {
    uint64_t v214 = v78;
    int v128 = *(unsigned __int16 *)((unint64_t)&v214 & 0xFFFFFFFFFFFFFFF9 | (2 * (v84 & 3)));
    char v213 = v80;
    int v129 = *(unsigned __int16 *)((unint64_t)&v213 & 0xFFFFFFFFFFFFFFF9 | (2 * (v84 & 3)));
    BOOL v85 = v128 == v129;
    if (v84 == 3) {
      break;
    }
    while (1)
    {
      ++v84;
      if (v85) {
        break;
      }
      BOOL v85 = 0;
      char v22 = 0;
      if (v84 == 3) {
        return v22 & 1;
      }
    }
  }
  if (v128 != v129) {
    goto LABEL_90;
  }
  uint64_t v130 = 0;
  while (1)
  {
    uint64_t v212 = v79;
    int v132 = *(unsigned __int16 *)((unint64_t)&v212 & 0xFFFFFFFFFFFFFFF9 | (2 * (v130 & 3)));
    uint64_t v211 = v81;
    int v133 = *(unsigned __int16 *)((unint64_t)&v211 & 0xFFFFFFFFFFFFFFF9 | (2 * (v130 & 3)));
    BOOL v131 = v132 == v133;
    if (v130 == 3) {
      break;
    }
    while (1)
    {
      ++v130;
      if (v131) {
        break;
      }
      BOOL v131 = 0;
      char v22 = 0;
      if (v130 == 3) {
        return v22 & 1;
      }
    }
  }
  if (v132 != v133) {
    goto LABEL_90;
  }
  uint64_t v134 = 0;
  while (1)
  {
    uint64_t v210 = v4;
    int v136 = *(unsigned __int16 *)((unint64_t)&v210 & 0xFFFFFFFFFFFFFFF9 | (2 * (v134 & 3)));
    uint64_t v209 = v82;
    int v137 = *(unsigned __int16 *)((unint64_t)&v209 & 0xFFFFFFFFFFFFFFF9 | (2 * (v134 & 3)));
    BOOL v135 = v136 == v137;
    if (v134 == 3) {
      break;
    }
    while (1)
    {
      ++v134;
      if (v135) {
        break;
      }
      BOOL v135 = 0;
      char v22 = 0;
      if (v134 == 3) {
        return v22 & 1;
      }
    }
  }
  if (v136 != v137) {
    goto LABEL_90;
  }
  uint64_t v138 = 0;
  while (1)
  {
    uint64_t v208 = v5;
    int v98 = *(unsigned __int16 *)((unint64_t)&v208 & 0xFFFFFFFFFFFFFFF9 | (2 * (v138 & 3)));
    uint64_t v207 = v83;
    int v99 = *(unsigned __int16 *)((unint64_t)&v207 & 0xFFFFFFFFFFFFFFF9 | (2 * (v138 & 3)));
    BOOL v139 = v98 == v99;
    if (v138 == 3) {
      break;
    }
    while (1)
    {
      ++v138;
      if (v139) {
        break;
      }
      if (v138 == 3) {
        goto LABEL_90;
      }
      BOOL v139 = 0;
    }
  }
LABEL_198:
  if (v98 == v99) {
LABEL_95:
  }
    char v22 = 1;
  else {
LABEL_90:
  }
    char v22 = 0;
  return v22 & 1;
}

uint64_t specialized static NodeDefinitionStore.Input.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v44 = *(void **)(a1 + 48);
  BOOL v45 = *(void **)(a1 + 56);
  uint64_t v46 = *(void *)(a1 + 64);
  uint64_t v47 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 88);
  *(void *)unint64_t v43 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  int v42 = *(unsigned __int8 *)(a1 + 112);
  uint64_t v31 = *(void *)(a1 + 120);
  int v29 = *(unsigned __int8 *)(a1 + 136);
  uint64_t v9 = *(void **)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v33 = *(void *)(a1 + 128);
  unint64_t v34 = *(void **)(a2 + 48);
  long long v35 = *(void **)(a2 + 56);
  uint64_t v36 = *(void *)(a2 + 64);
  uint64_t v37 = *(void *)(a2 + 72);
  uint64_t v38 = *(void *)(a2 + 80);
  uint64_t v39 = *(void *)(a2 + 88);
  uint64_t v40 = *(void *)(a2 + 96);
  uint64_t v41 = *(void *)(a2 + 104);
  int v11 = *(unsigned __int8 *)(a2 + 112);
  uint64_t v30 = *(void *)(a2 + 120);
  uint64_t v32 = *(void *)(a2 + 128);
  int v28 = *(unsigned __int8 *)(a2 + 136);
  if (*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8))
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v12 & 1) == 0) {
      return result;
    }
  }
  if (v4 != v8 || v3 != v10)
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v14 & 1) == 0) {
      return result;
    }
  }
  if (v2)
  {
    if (!v9 || (specialized static Array<A>.== infix(_:_:)(v2, v9) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (v9) {
      return 0;
    }
    swift_bridgeObjectRelease_n();
  }
  char v15 = v42;
  if (v42 == 255)
  {
    unsigned __int8 v20 = v11;
    BOOL v21 = v11 == 255;
    uint64_t v18 = v6;
    uint64_t v17 = v7;
    uint64_t v16 = v5;
    uint64_t v23 = *(void *)v43;
    char v22 = v44;
    uint64_t v25 = v46;
    uint64_t v24 = v47;
    int v26 = v45;
    if (v21) {
      goto LABEL_19;
    }
LABEL_26:
    uint64_t v50 = v22;
    id v51 = v26;
    uint64_t v52 = v25;
    uint64_t v53 = v24;
    uint64_t v54 = v23;
    uint64_t v55 = v16;
    uint64_t v56 = v17;
    uint64_t v57 = v18;
    char v58 = v15;
    char v59 = v34;
    uint64_t v60 = v35;
    uint64_t v61 = v36;
    uint64_t v62 = v37;
    uint64_t v63 = v38;
    uint64_t v64 = v39;
    uint64_t v65 = v40;
    uint64_t v66 = v41;
    unsigned __int8 v67 = v20;
    outlined copy of NodeDefinitionStore.TypeStorage?(v34, v35, v36, v37, v38, v39, v40, v41, v20);
    outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)((uint64_t)&v50, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))outlined consume of NodeDefinitionStore.TypeStorage?);
    return 0;
  }
  uint64_t v50 = v44;
  id v51 = v45;
  uint64_t v52 = v46;
  uint64_t v53 = v47;
  uint64_t v54 = *(void *)v43;
  uint64_t v55 = v5;
  uint64_t v16 = v5;
  uint64_t v17 = v7;
  uint64_t v56 = v7;
  uint64_t v57 = v6;
  uint64_t v18 = v6;
  char v58 = v42;
  if (v11 == 255)
  {
    outlined copy of SGDataTypeStorage(v44, v45, v46, v47, v43[0], v5, v7, v6, v42);
    outlined copy of SGDataTypeStorage(v44, v45, v46, v47, v43[0], v5, v7, v6, v42);
    outlined consume of SGDataTypeStorage(v44, v45, v46, v47, v43[0], v5, v7, v6, v42);
    unsigned __int8 v20 = -1;
    char v15 = v42;
    char v22 = v44;
    int v26 = v45;
    uint64_t v25 = v46;
    uint64_t v24 = v47;
    uint64_t v23 = *(void *)v43;
    goto LABEL_26;
  }
  v48[0] = v34;
  v48[1] = v35;
  v48[2] = v36;
  v48[3] = v37;
  v48[4] = v38;
  v48[5] = v39;
  v48[6] = v40;
  v48[7] = v41;
  char v49 = v11;
  outlined copy of NodeDefinitionStore.TypeStorage?(v44, v45, v46, v47, v43[0], v5, v7, v6, v42);
  outlined copy of SGDataTypeStorage(v44, v45, v46, v47, v43[0], v5, v7, v6, v42);
  char v19 = specialized static NodeDefinitionStore.TypeStorage.== infix(_:_:)((uint64_t)&v50, (uint64_t)v48);
  outlined consume of SGDataTypeStorage(v50, v51, v52, v53, v54, v55, v56, v57, v58);
  outlined consume of NodeDefinitionStore.TypeStorage?(v44, v45, v46, v47, v43[0], v5, v7, v6, v42);
  if ((v19 & 1) == 0) {
    return 0;
  }
LABEL_19:
  if (!v33)
  {
    if (!v32) {
      return v29 ^ v28 ^ 1u;
    }
    return 0;
  }
  if (!v32) {
    return 0;
  }
  if (v31 == v30 && v33 == v32) {
    return v29 ^ v28 ^ 1u;
  }
  char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if (v27) {
    return v29 ^ v28 ^ 1u;
  }
  return result;
}

BOOL specialized static NodeDefinitionStore.Node.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v43 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v41 = *(void *)(a1 + 64);
  uint64_t v45 = *(void *)(a1 + 72);
  int v39 = *(unsigned __int8 *)(a1 + 80);
  uint64_t v37 = *(void **)(a1 + 88);
  uint64_t v33 = *(void *)(a1 + 96);
  uint64_t v35 = *(void *)(a1 + 104);
  uint64_t v31 = *(void *)(a1 + 112);
  uint64_t v29 = *(void *)(a1 + 120);
  uint64_t v27 = *(void *)(a1 + 128);
  uint64_t v25 = *(void *)(a1 + 136);
  uint64_t v21 = *(void *)(a1 + 144);
  uint64_t v23 = *(void *)(a1 + 152);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v42 = *(void *)(a2 + 48);
  uint64_t v40 = *(void *)(a2 + 64);
  uint64_t v44 = *(void *)(a2 + 72);
  int v38 = *(unsigned __int8 *)(a2 + 80);
  uint64_t v36 = *(void **)(a2 + 88);
  uint64_t v32 = *(void *)(a2 + 96);
  uint64_t v34 = *(void *)(a2 + 104);
  uint64_t v30 = *(void *)(a2 + 112);
  uint64_t v28 = *(void *)(a2 + 120);
  uint64_t v26 = *(void *)(a2 + 128);
  uint64_t v24 = *(void *)(a2 + 136);
  uint64_t v20 = *(void *)(a2 + 144);
  uint64_t v22 = *(void *)(a2 + 152);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
  {
    if (v2 == v7 && v3 == v8 || (char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v14 & 1) != 0))
    {
      if (v5)
      {
        if (!v9) {
          return 0;
        }
        if (v4 != v10 || v5 != v9)
        {
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL result = 0;
          if ((v15 & 1) == 0) {
            return result;
          }
        }
      }
      else if (v9)
      {
        return 0;
      }
      if (v6)
      {
        if (!v11) {
          return 0;
        }
        if (v43 != v42 || v6 != v11)
        {
          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL result = 0;
          if ((v16 & 1) == 0) {
            return result;
          }
        }
      }
      else if (v11)
      {
        return 0;
      }
      if (v45)
      {
        if (!v44) {
          return 0;
        }
        if (v41 != v40 || v45 != v44)
        {
          char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL result = 0;
          if ((v17 & 1) == 0) {
            return result;
          }
        }
      }
      else if (v44)
      {
        return 0;
      }
      if (v39 == 2)
      {
        if (v38 != 2) {
          return 0;
        }
      }
      else
      {
        BOOL result = 0;
        if (v38 == 2 || ((((v39 & 1) == 0) ^ v38) & 1) == 0) {
          return result;
        }
      }
      if (specialized static Array<A>.== infix(_:_:)(v37, v36))
      {
        if (v35)
        {
          if (!v34) {
            return 0;
          }
          if (v33 != v32 || v35 != v34)
          {
            char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL result = 0;
            if ((v18 & 1) == 0) {
              return result;
            }
          }
        }
        else if (v34)
        {
          return 0;
        }
        if ((specialized static Array<A>.== infix(_:_:)(v31, v30) & 1) == 0
          || (specialized static Array<A>.== infix(_:_:)(v29, v28) & 1) == 0)
        {
          return 0;
        }
        if (v27 != v26 || v25 != v24)
        {
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL result = 0;
          if ((v19 & 1) == 0) {
            return result;
          }
        }
        if (v23) {
          return v22 && (v21 == v20 && v23 == v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
        }
        if (!v22) {
          return 1;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t specialized static NodeDefinitionStore.GeomPropValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 16);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0)
    {
      char v9 = specialized == infix<A>(_:_:)(*(void *)a1, *(void *)a2);
      char v4 = 0;
      char v7 = 0;
      goto LABEL_14;
    }
LABEL_11:
    outlined copy of GeomPropDef.GeomProp(v5, v6, v7);
    char v9 = 0;
    goto LABEL_14;
  }
  if ((*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  if (v2 == v5 && v3 == v6) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  char v4 = 1;
  outlined copy of GeomPropDef.GeomProp(v5, v6, 1);
  outlined copy of GeomPropDef.GeomProp(v2, v3, 1);
  char v7 = 1;
LABEL_14:
  outlined consume of GeomPropDef.GeomProp(v2, v3, v4);
  outlined consume of GeomPropDef.GeomProp(v5, v6, v7);
  return v9 & 1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7NodeDefV6IOSpecVG_AF0F15DefinitionStoreV5InputVs5NeverOTg504_s11d7Graph19fij10V0C0V7nodeg16AeA0cG0V_tcfcAC5k4VAH6H6VXEfU_AHTf1cn_nTf4ng_nTm(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(BOOL, uint64_t, uint64_t), const char *a5)
{
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (v7)
  {
    uint64_t v37 = MEMORY[0x263F8EE78];
    a4(0, v7, 0);
    uint64_t v8 = v37;
    uint64_t v11 = (uint64_t *)(a1 + 48);
    while (1)
    {
      uint64_t v12 = *(v11 - 1);
      uint64_t v14 = *v11;
      uint64_t v13 = v11[1];
      uint64_t v15 = v11[4];
      char v16 = *((unsigned char *)v11 + 40);
      v31[0] = *(v11 - 2);
      v31[1] = v12;
      v31[2] = v14;
      _OWORD v31[3] = v13;
      long long v32 = *((_OWORD *)v11 + 1);
      uint64_t v33 = v15;
      char v34 = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      closure #1 in NodeDefinitionStore.Node.init(nodeDef:)((uint64_t)v31, a2, a5, (uint64_t)v35);
      if (v6) {
        break;
      }
      uint64_t v6 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      long long v25 = v35[2];
      long long v26 = v35[3];
      *(_OWORD *)&v30[9] = *(_OWORD *)((char *)v36 + 9);
      long long v29 = v35[6];
      *(_OWORD *)uint64_t v30 = v36[0];
      long long v27 = v35[4];
      long long v28 = v35[5];
      long long v23 = v35[0];
      long long v24 = v35[1];
      unint64_t v18 = *(void *)(v8 + 16);
      unint64_t v17 = *(void *)(v8 + 24);
      uint64_t v37 = v8;
      if (v18 >= v17 >> 1)
      {
        a4(v17 > 1, v18 + 1, 1);
        uint64_t v8 = v37;
      }
      v11 += 8;
      *(void *)(v8 + 16) = v18 + 1;
      char v19 = (_OWORD *)(v8 + 144 * v18);
      void v19[2] = v23;
      v19[5] = v26;
      v19[6] = v27;
      void v19[3] = v24;
      v19[4] = v25;
      *(_OWORD *)((char *)v19 + 153) = *(_OWORD *)&v30[9];
      unsigned char v19[8] = v29;
      v19[9] = *(_OWORD *)v30;
      uint64_t v19[7] = v28;
      if (!--v7) {
        return v8;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t outlined init with take of GeomPropDef.GeomProp(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined retain of GeomPropDef.GeomProp(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of NodeDefinitionStore.Node(uint64_t a1)
{
  return a1;
}

double _s11ShaderGraph19NodeDefinitionStoreV0C0VSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

unint64_t lazy protocol witness table accessor for type NodeDefinitionStore.BuiltinGeomProp and conformance NodeDefinitionStore.BuiltinGeomProp()
{
  unint64_t result = lazy protocol witness table cache variable for type NodeDefinitionStore.BuiltinGeomProp and conformance NodeDefinitionStore.BuiltinGeomProp;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.BuiltinGeomProp and conformance NodeDefinitionStore.BuiltinGeomProp)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.BuiltinGeomProp and conformance NodeDefinitionStore.BuiltinGeomProp);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NodeDefinitionStore.Space and conformance NodeDefinitionStore.Space()
{
  unint64_t result = lazy protocol witness table cache variable for type NodeDefinitionStore.Space and conformance NodeDefinitionStore.Space;
  if (!lazy protocol witness table cache variable for type NodeDefinitionStore.Space and conformance NodeDefinitionStore.Space)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodeDefinitionStore.Space and conformance NodeDefinitionStore.Space);
  }
  return result;
}

uint64_t destroy for NodeDefinitionStore()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for NodeDefinitionStore(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NodeDefinitionStore(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NodeDefinitionStore(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeDefinitionStore(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeDefinitionStore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore()
{
  return &type metadata for NodeDefinitionStore;
}

void *assignWithCopy for NodeDefinitionStore.MaterialXDataType(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for NodeDefinitionStore.MaterialXDataType(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeDefinitionStore.MaterialXDataType(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeDefinitionStore.MaterialXDataType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.MaterialXDataType()
{
  return &type metadata for NodeDefinitionStore.MaterialXDataType;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.MaterialXDataType.Kind()
{
  return &type metadata for NodeDefinitionStore.MaterialXDataType.Kind;
}

uint64_t outlined destroy of NodeDefinitionStore.TypeStorage(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy137_16(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.Output()
{
  return &type metadata for NodeDefinitionStore.Output;
}

uint64_t destroy for NodeDefinitionStore.Output(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(a1 + 112) != 255) {
    outlined consume of SGDataTypeStorage(*(void **)(a1 + 48), *(id *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(unsigned char *)(a1 + 112));
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NodeDefinitionStore.Output(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  int v6 = *(unsigned __int8 *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    long long v14 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v14;
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    long long v15 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v15;
  }
  else
  {
    long long v7 = *(void **)(a2 + 48);
    uint64_t v8 = *(void **)(a2 + 56);
    uint64_t v9 = *(void *)(a2 + 72);
    uint64_t v18 = *(void *)(a2 + 64);
    uint64_t v10 = *(void *)(a2 + 80);
    uint64_t v11 = *(void *)(a2 + 88);
    uint64_t v12 = *(void *)(a2 + 96);
    uint64_t v13 = *(void *)(a2 + 104);
    outlined copy of SGDataTypeStorage(v7, v8, v18, v9, v10, v11, v12, v13, v6);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v18;
    *(void *)(a1 + 72) = v9;
    *(void *)(a1 + 80) = v10;
    *(void *)(a1 + 88) = v11;
    *(void *)(a1 + 96) = v12;
    *(void *)(a1 + 104) = v13;
    *(unsigned char *)(a1 + 112) = v6;
  }
  uint64_t v16 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v16;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NodeDefinitionStore.Output(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  uint64_t v5 = (_OWORD *)(a2 + 48);
  int v6 = *(unsigned __int8 *)(a2 + 112);
  if (*(unsigned __int8 *)(a1 + 112) == 255)
  {
    if (v6 == 255)
    {
      *uint64_t v4 = *v5;
      long long v33 = *(_OWORD *)(a2 + 64);
      long long v34 = *(_OWORD *)(a2 + 80);
      long long v35 = *(_OWORD *)(a2 + 96);
      *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
      *(_OWORD *)(a1 + 80) = v34;
      *(_OWORD *)(a1 + 96) = v35;
      *(_OWORD *)(a1 + 64) = v33;
    }
    else
    {
      long long v23 = *(void **)(a2 + 48);
      int v38 = *(void **)(a2 + 56);
      uint64_t v24 = *(void *)(a2 + 64);
      uint64_t v25 = *(void *)(a2 + 72);
      uint64_t v26 = *(void *)(a2 + 80);
      uint64_t v27 = *(void *)(a2 + 88);
      uint64_t v28 = *(void *)(a2 + 96);
      uint64_t v29 = *(void *)(a2 + 104);
      outlined copy of SGDataTypeStorage(v23, v38, v24, v25, v26, v27, v28, v29, v6);
      *(void *)(a1 + 48) = v23;
      *(void *)(a1 + 56) = v38;
      *(void *)(a1 + 64) = v24;
      *(void *)(a1 + 72) = v25;
      *(void *)(a1 + 80) = v26;
      *(void *)(a1 + 88) = v27;
      *(void *)(a1 + 96) = v28;
      *(void *)(a1 + 104) = v29;
      *(unsigned char *)(a1 + 112) = v6;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of NodeDefinitionStore.TypeStorage(a1 + 48);
    *uint64_t v4 = *v5;
    long long v31 = *(_OWORD *)(a2 + 80);
    long long v30 = *(_OWORD *)(a2 + 96);
    long long v32 = *(_OWORD *)(a2 + 64);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    *(_OWORD *)(a1 + 80) = v31;
    *(_OWORD *)(a1 + 96) = v30;
    *(_OWORD *)(a1 + 64) = v32;
  }
  else
  {
    long long v7 = *(void **)(a2 + 48);
    uint64_t v37 = *(void **)(a2 + 56);
    uint64_t v8 = *(void *)(a2 + 64);
    uint64_t v9 = *(void *)(a2 + 72);
    uint64_t v10 = *(void *)(a2 + 80);
    uint64_t v11 = *(void *)(a2 + 88);
    uint64_t v12 = *(void *)(a2 + 96);
    uint64_t v13 = *(void *)(a2 + 104);
    outlined copy of SGDataTypeStorage(v7, v37, v8, v9, v10, v11, v12, v13, v6);
    long long v14 = *(void **)(a1 + 48);
    long long v15 = *(void **)(a1 + 56);
    uint64_t v16 = *(void *)(a1 + 64);
    uint64_t v17 = *(void *)(a1 + 72);
    uint64_t v18 = *(void *)(a1 + 80);
    uint64_t v19 = *(void *)(a1 + 88);
    uint64_t v20 = *(void *)(a1 + 96);
    uint64_t v21 = *(void *)(a1 + 104);
    char v22 = *(unsigned char *)(a1 + 112);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v37;
    *(void *)(a1 + 64) = v8;
    *(void *)(a1 + 72) = v9;
    *(void *)(a1 + 80) = v10;
    *(void *)(a1 + 88) = v11;
    *(void *)(a1 + 96) = v12;
    *(void *)(a1 + 104) = v13;
    *(unsigned char *)(a1 + 112) = v6;
    outlined consume of SGDataTypeStorage(v14, v15, v16, v17, v18, v19, v20, v21, v22);
  }
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  return a1;
}

uint64_t assignWithTake for NodeDefinitionStore.Output(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  int v6 = *(unsigned __int8 *)(a1 + 112);
  if (v6 == 255) {
    goto LABEL_5;
  }
  int v7 = *(unsigned __int8 *)(a2 + 112);
  if (v7 == 255)
  {
    outlined destroy of NodeDefinitionStore.TypeStorage(a1 + 48);
LABEL_5:
    long long v18 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v18;
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    long long v19 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v19;
    goto LABEL_6;
  }
  uint64_t v8 = *(void **)(a1 + 48);
  uint64_t v9 = *(void **)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 96);
  uint64_t v15 = *(void *)(a1 + 104);
  long long v16 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v16;
  long long v17 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v17;
  *(unsigned char *)(a1 + 112) = v7;
  outlined consume of SGDataTypeStorage(v8, v9, v10, v11, v12, v13, v14, v15, v6);
LABEL_6:
  uint64_t v20 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v20;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeDefinitionStore.Output(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 137)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeDefinitionStore.Output(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 136) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 137) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 137) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.Input()
{
  return &type metadata for NodeDefinitionStore.Input;
}

uint64_t destroy for NodeDefinitionStore.Node()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NodeDefinitionStore.Node(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  uint64_t v9 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v9;
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v10;
  uint64_t v11 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v11;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NodeDefinitionStore.Node(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for NodeDefinitionStore.Node(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeDefinitionStore.Node(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 160)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeDefinitionStore.Node(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.Node()
{
  return &type metadata for NodeDefinitionStore.Node;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.GeomPropValue()
{
  return &type metadata for NodeDefinitionStore.GeomPropValue;
}

unsigned char *storeEnumTagSinglePayload for NodeDefinitionStore.BuiltinGeomProp(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C3E8308);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.BuiltinGeomProp()
{
  return &type metadata for NodeDefinitionStore.BuiltinGeomProp;
}

unsigned char *storeEnumTagSinglePayload for NodeDefinitionStore.Space(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C3E840CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.Space()
{
  return &type metadata for NodeDefinitionStore.Space;
}

uint64_t destroy for NodeDefinitionStore.GeomProp(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  char v4 = *(unsigned char *)(a1 + 56);
  return outlined consume of GeomPropDef.GeomProp(v2, v3, v4);
}

uint64_t initializeWithCopy for NodeDefinitionStore.GeomProp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  char v8 = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of GeomPropDef.GeomProp(v6, v7, v8);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = v8;
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

uint64_t assignWithCopy for NodeDefinitionStore.GeomProp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  char v6 = *(unsigned char *)(a2 + 56);
  outlined copy of GeomPropDef.GeomProp(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  char v9 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = v6;
  outlined consume of GeomPropDef.GeomProp(v7, v8, v9);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NodeDefinitionStore.GeomProp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  char v5 = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  char v8 = *(unsigned char *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = v5;
  outlined consume of GeomPropDef.GeomProp(v6, v7, v8);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeDefinitionStore.GeomProp(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 58)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeDefinitionStore.GeomProp(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 58) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 58) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.GeomProp()
{
  return &type metadata for NodeDefinitionStore.GeomProp;
}

ValueMetadata *type metadata accessor for NodeDefinitionStore.TypeStorage()
{
  return &type metadata for NodeDefinitionStore.TypeStorage;
}

unsigned char *storeEnumTagSinglePayload for NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25C3E8808);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for NodeDefinitionStore.MaterialXDataType.Kind.CodingKeys()
{
  return &unk_27099F350;
}

void *type metadata accessor for NodeDefinitionStore.MaterialXDataType.Kind.NamedCodingKeys()
{
  return &unk_27099F370;
}

unsigned char *storeEnumTagSinglePayload for NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25C3E88ECLL);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for NodeDefinitionStore.MaterialXDataType.Kind.SetCodingKeys()
{
  return &unk_27099F400;
}

uint64_t outlined release of (NodeDefinitionStore.TypeStorage, NodeDefinitionStore.TypeStorage)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))
{
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v15 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 128);
  uint64_t v10 = *(void *)(a1 + 136);
  char v11 = *(unsigned char *)(a1 + 144);
  char v13 = *(unsigned char *)(a1 + 64);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), v13);
  LOBYTE(v14) = v11;
  a2(v15, v4, v5, v6, v7, v8, v9, v10, v14);
  return a1;
}

void outlined consume of NodeDefinitionStore.TypeStorage?(void *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    outlined consume of SGDataTypeStorage(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t Graph.insertMaterialXDefaultValue(_:ofType:toFeedInput:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t result = specialized SGDataTypeStorage.init(materialXValue:type:)(a1, a2, a3, (uint64_t)v15);
  if (!v5)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25C418EE0;
    *(void *)(inited + 32) = 7632239;
    *(void *)(inited + 40) = 0xE300000000000000;
    *(void *)(inited + 48) = a3;
    unint64_t v13 = swift_allocObject();
    outlined init with take of SGDataTypeStorage((uint64_t)v15, v13 + 16);
    *(void *)(v13 + 88) = a3;
    unint64_t v14 = *(void *)(v6 + 40);
    swift_retain_n();
    outlined retain of SGDataTypeStorage((uint64_t)v15, (void (*)(void, void, void, void, void, void, void, void, char))outlined copy of SGDataTypeStorage);
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v14, MEMORY[0x263F8EE78], inited, v13, v6 + 64, v6, v16);
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    ShaderGraphNode.out.getter((uint64_t)v17);
    Graph.connect(_:to:)((uint64_t)v17, a4);
    swift_release();
    long long v22 = v18;
    outlined release of String((uint64_t)&v22);
    outlined init with take of NodePersonality(v16, &v21);
    outlined release of NodePersonality(&v21);
    unint64_t v20 = v16[1];
    outlined release of [Input]((uint64_t)&v20);
    unint64_t v19 = v16[2];
    outlined release of [Input]((uint64_t)&v19);
    return outlined retain of SGDataTypeStorage((uint64_t)v15, (void (*)(void, void, void, void, void, void, void, void, char))outlined consume of SGDataTypeStorage);
  }
  return result;
}

uint64_t Graph.insertMaterialXDefaultGeomProp(_:ofType:toFeedInput:fromNodeDefStore:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized Graph.insertMaterialXDefaultGeomProp(_:ofType:toFeedInput:fromNodeDefStore:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_25C3E8F04()
{
  outlined consume of SGDataTypeStorage(*(void **)(v0 + 16), *(id *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));
  swift_release();
  return MEMORY[0x270FA0238](v0, 96, 15);
}

uint64_t specialized Graph.insertMaterialXDefaultGeomProp(_:ofType:toFeedInput:fromNodeDefStore:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*(void *)(a6 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    uint64_t v19 = *(void *)(a4 + 24);
    v31[0] = *(void *)(a4 + 16);
    v31[1] = v19;
    v31[2] = a1;
    _OWORD v31[3] = a2;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi12_((uint64_t)v31);
    outlined init with take of UserGraphError.ErrorType((uint64_t)v31, (uint64_t)v32);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    long long v33 = 0uLL;
    swift_allocError();
    *unint64_t v20 = v32[0];
    long long v21 = v32[4];
    long long v23 = v32[1];
    long long v22 = v32[2];
    v20[3] = v32[3];
    v20[4] = v21;
    v20[1] = v23;
    void v20[2] = v22;
    long long v24 = v32[8];
    long long v26 = v32[5];
    long long v25 = v32[6];
    v20[7] = v32[7];
    v20[8] = v24;
    v20[5] = v26;
    v20[6] = v25;
    long long v27 = v33;
    long long v29 = v32[9];
    long long v28 = v32[10];
    v20[11] = v32[11];
    v20[12] = v27;
    v20[9] = v29;
    v20[10] = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  uint64_t v15 = (long long *)(*(void *)(a6 + 56) + (v13 << 6));
  long long v17 = v15[1];
  long long v16 = v15[2];
  long long v18 = *v15;
  *(_OWORD *)&v43[9] = *(long long *)((char *)v15 + 41);
  v42[1] = v17;
  *(_OWORD *)uint64_t v43 = v16;
  v42[0] = v18;
  outlined retain of GeomPropDef((uint64_t)v42);
  swift_bridgeObjectRelease();
  specialized Graph.insertGeomPropGetter(_:outputType:nodeDefStore:)((uint64_t)v42, a3, a5, &v34);
  if (!v6)
  {
    ShaderGraphNode.out.getter((uint64_t)v36);
    Graph.connect(_:to:)((uint64_t)v36, a4);
    swift_release();
    long long v41 = v37;
    outlined release of String((uint64_t)&v41);
    outlined init with take of NodePersonality(&v34, &v40);
    outlined release of NodePersonality(&v40);
    uint64_t v39 = *((void *)&v34 + 1);
    outlined release of [Input]((uint64_t)&v39);
    uint64_t v38 = v35;
    outlined release of [Input]((uint64_t)&v38);
  }
  return outlined release of GeomPropDef((uint64_t)v42);
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi12_(uint64_t result)
{
  *(void *)(result + 168) = *(void *)(result + 168) & 1 | 0x3400000000000000;
  return result;
}

uint64_t OrderedSet.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = specialized OrderedSet.union(_:)(a1, a2, a3);
  swift_release();
  swift_release();
  return v3;
}

{
  uint64_t v3;

  uint64_t v3 = specialized OrderedSet.union(_:)(a1, a2, a3);
  swift_release();
  swift_release();
  return v3;
}

uint64_t OrderedSet.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OrderedSet.formUnion(_:)(a1, a2, a3, (void (*)(void))specialized OrderedSet.formUnion(_:));
}

{
  void v5[2];

  v5[0] = a1;
  v5[1] = a2;
  swift_getWitnessTable();
  OrderedSet.append<A>(contentsOf:)((uint64_t)v5, a3, a3);
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OrderedSet.formUnion<A>(_:)(a1, a2, a3, a4, (void (*)(void))specialized OrderedSet.formUnion<A>(_:));
}

uint64_t OrderedSet.union<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = specialized OrderedSet.union<A>(_:)(a1, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  return v7;
}

uint64_t OrderedSet.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = specialized OrderedSet.intersection(_:)(a1, a2, a3, a4, a5);
  swift_release();
  swift_release();
  return v5;
}

{
  uint64_t v5;

  uint64_t v5 = specialized OrderedSet.intersection(_:)(a1, a2, a3, a4, a5);
  swift_release();
  swift_release();
  return v5;
}

uint64_t OrderedSet.formIntersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = specialized OrderedSet.intersection(_:)(a1, a2, *v3, v3[1], *(void *)(a3 + 16));
  uint64_t v6 = v5;
  swift_release();
  uint64_t result = swift_release();
  uint64_t *v3 = v4;
  v3[1] = v6;
  return result;
}

uint64_t OrderedSet.intersection<A>(_:)()
{
  uint64_t v0 = specialized OrderedSet.intersection<A>(_:)();
  swift_release();
  swift_release();
  return v0;
}

uint64_t OrderedSet.formIntersection<A>(_:)()
{
  uint64_t v1 = specialized OrderedSet.intersection<A>(_:)();
  uint64_t v3 = v2;
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v0 = v1;
  v0[1] = v3;
  return result;
}

uint64_t OrderedSet.symmetricDifference(_:)()
{
  uint64_t v0 = specialized OrderedSet.symmetricDifference(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

{
  uint64_t v0;

  uint64_t v0 = specialized OrderedSet.symmetricDifference(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t OrderedSet.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OrderedSet.formUnion(_:)(a1, a2, a3, (void (*)(void))specialized OrderedSet.formSymmetricDifference(_:));
}

uint64_t OrderedSet.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.symmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = specialized OrderedSet.symmetricDifference<A>(_:)();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  return v7;
}

uint64_t OrderedSet.formSymmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OrderedSet.formUnion<A>(_:)(a1, a2, a3, a4, (void (*)(void))specialized OrderedSet.formSymmetricDifference<A>(_:));
}

uint64_t OrderedSet.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  a5();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);
  return v7(a1, a3);
}

uint64_t OrderedSet.subtracting(_:)()
{
  return OrderedSet._subtracting<A>(_:)();
}

{
  type metadata accessor for OrderedSet();
  swift_getWitnessTable();
  return OrderedSet._subtracting<A>(_:)();
}

uint64_t OrderedSet.subtract(_:)()
{
  swift_getWitnessTable();
  uint64_t result = OrderedSet._subtracting<A>(_:)();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

{
  uint64_t *v0;
  uint64_t result;
  uint64_t v2;

  swift_getWitnessTable();
  uint64_t result = OrderedSet._subtracting<A>(_:)();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t OrderedSet.subtract<A>(_:)()
{
  uint64_t result = OrderedSet._subtracting<A>(_:)();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

Swift::Int closure #1 in OrderedSet.intersection<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, Swift::Int *a8@<X8>)
{
  uint64_t v60 = a4;
  uint64_t v61 = a7;
  uint64_t v58 = a2;
  uint64_t v59 = a3;
  uint64_t v52 = a8;
  uint64_t v53 = a1;
  uint64_t v56 = *(void **)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  char v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v51 - v14;
  uint64_t v16 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v13);
  long long v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v51 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  long long v21 = (char *)&v51 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v58, a6);
  long long v22 = v56;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v57 = v21;
  uint64_t v58 = AssociatedTypeWitness;
  dispatch thunk of IteratorProtocol.next()();
  long long v24 = (unsigned int (*)(char *, uint64_t, uint64_t))v22[6];
  if (v24(v15, 1, a5) == 1)
  {
LABEL_2:
    (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v58);
    long long v25 = *(uint64_t **)v53;
    uint64_t v26 = *(void *)(v53 + 8);
    uint64_t v27 = *(void *)(v53 + 16);
    Swift::Int v28 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
    uint64_t v29 = v59;
    swift_retain();
    uint64_t v30 = v60;
    swift_retain();
    Swift::Int result = OrderedSet._extractSubset(using:extraCapacity:)(v25, v26, v27, v28, v29, v30, a5);
    long long v32 = v52;
    *uint64_t v52 = result;
    v32[1] = v33;
    return result;
  }
  uint64_t v35 = (void *)v22[4];
  long long v34 = (char *)(v22 + 4);
  uint64_t v55 = AssociatedConformanceWitness;
  uint64_t v56 = v35;
  uint64_t v54 = (void (**)(char *, uint64_t))(v34 - 24);
  uint64_t v36 = v11;
  while (1)
  {
    long long v37 = v15;
    uint64_t v38 = v34;
    uint64_t v39 = ((uint64_t (*)(char *, char *, uint64_t))v56)(v36, v15, a5);
    MEMORY[0x270FA5388](v39);
    uint64_t v41 = v60;
    uint64_t v40 = v61;
    *(&v51 - 6) = a5;
    *(&v51 - 5) = v40;
    *(&v51 - 4) = v59;
    *(&v51 - 3) = v41;
    uint64_t v43 = v42;
    *(&v51 - 2) = (uint64_t)v42;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (index: Int?, bucket: _HashTable.Bucket));
    uint64_t v44 = v64;
    Swift::Int result = ContiguousArray.withUnsafeBufferPointer<A>(_:)();
    if (v63) {
      goto LABEL_4;
    }
    uint64_t v45 = (v62 >> 3) & 0x1FFFFFFFFFFFFFF8;
    uint64_t v46 = 1 << v62;
    uint64_t v47 = *(void *)(*(void *)v53 + v45);
    *(void *)(*(void *)v53 + v45) = v47 | (1 << v62);
    if ((v47 & v46) != 0) {
      goto LABEL_4;
    }
    uint64_t v48 = *(void *)(v53 + 16);
    BOOL v49 = __OFADD__(v48, 1);
    uint64_t v50 = v48 + 1;
    if (v49) {
      break;
    }
    *(void *)(v53 + 16) = v50;
LABEL_4:
    uint64_t v64 = v44;
    uint64_t v36 = v43;
    (*v54)(v43, a5);
    uint64_t v15 = v37;
    dispatch thunk of IteratorProtocol.next()();
    long long v34 = v38;
    if (v24(v37, 1, a5) == 1) {
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in OrderedSet.symmetricDifference(_:)()
{
  uint64_t v0 = ContiguousArray.count.getter();
  type metadata accessor for OrderedSet();
  specialized static _UnsafeBitset._withTemporaryBitset(capacity:run:)(v0, (uint64_t (*)(void **))closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)partial apply);
  if (!v2) {
    __break(1u);
  }
  uint64_t result = outlined consume of OrderedSet<Input>?(0, 0);
  __break(1u);
  return result;
}

unint64_t closure #1 in closure #1 in OrderedSet.symmetricDifference(_:)@<X0>(uint64_t **a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, unint64_t *a8@<X8>)
{
  BOOL v75 = a8;
  uint64_t v87 = a7;
  uint64_t v80 = a1;
  uint64_t v76 = *(void *)(a6 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  uint64_t v78 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v74 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  char v81 = (char *)&v74 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  long long v22 = (char *)&v74 - v21;
  MEMORY[0x270FA5388](v20);
  long long v24 = (char *)&v74 - v23;
  uint64_t v26 = v25;
  Swift::Int v27 = ContiguousArray.count.getter();
  BOOL v79 = a2;
  _UnsafeBitset.insertAll(upTo:)(v27);
  uint64_t v28 = a4;
  uint64_t v29 = *(void *)(a5 + 16);
  uint64_t v83 = v28;
  uint64_t v84 = a3;
  if (!v29) {
    goto LABEL_10;
  }
  uint64_t v82 = v26;
  uint64_t v30 = a5;
  long long v31 = (void (**)(char *, char *, uint64_t))(v76 + 32);
  long long v32 = (void (**)(char *, uint64_t))(v76 + 8);
  swift_retain();
  swift_retain();
  uint64_t v33 = 0;
  while (1)
  {
    ContiguousArray.subscript.getter();
    (*v31)(v22, v24, a6);
    unint64_t v34 = OrderedSet._find(_:)();
    if (v35) {
      goto LABEL_3;
    }
    uint64_t v36 = (v34 >> 3) & 0x1FFFFFFFFFFFFFF8;
    uint64_t v37 = *(uint64_t *)((char *)*v79 + v36);
    *(uint64_t *)((char *)*v79 + v36) = v37 & ~(1 << v34);
    if ((v37 & (1 << v34)) == 0) {
      goto LABEL_3;
    }
    uint64_t v38 = v79[2];
    BOOL v39 = __OFSUB__(v38, 1);
    uint64_t v40 = (uint64_t *)((char *)v38 - 1);
    if (v39) {
      break;
    }
    v79[2] = v40;
LABEL_3:
    ++v33;
    (*v32)(v22, a6);
    if (v29 == v33) {
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_9:
  a5 = v30;
  swift_release();
  swift_release();
  uint64_t v26 = v82;
  a3 = v84;
LABEL_10:
  Swift::Int v41 = ContiguousArray.count.getter();
  _UnsafeBitset.insertAll(upTo:)(v41);
  uint64_t v42 = v26;
  uint64_t v43 = *(void *)(v26 + 16);
  uint64_t v44 = v76;
  if (v43)
  {
    uint64_t v45 = (void (**)(char *, char *, uint64_t))(v76 + 32);
    uint64_t v46 = (void (**)(char *, uint64_t))(v76 + 8);
    swift_retain();
    uint64_t v47 = v42;
    swift_retain();
    uint64_t v48 = 0;
    BOOL v49 = v81;
    do
    {
      ContiguousArray.subscript.getter();
      (*v45)(v17, v49, a6);
      unint64_t result = OrderedSet._find(_:)();
      if ((v51 & 1) == 0)
      {
        uint64_t v52 = (result >> 3) & 0x1FFFFFFFFFFFFFF8;
        uint64_t v53 = *(uint64_t *)((char *)*v80 + v52);
        *(uint64_t *)((char *)*v80 + v52) = v53 & ~(1 << result);
        if ((v53 & (1 << result)) != 0)
        {
          uint64_t v54 = v80[2];
          BOOL v39 = __OFSUB__(v54, 1);
          uint64_t v55 = (uint64_t *)((char *)v54 - 1);
          if (v39) {
            goto LABEL_35;
          }
          v80[2] = v55;
        }
      }
      ++v48;
      (*v46)(v17, a6);
    }
    while (v43 != v48);
    uint64_t v42 = v47;
    swift_release();
    a3 = v84;
    swift_release();
    uint64_t v44 = v76;
  }
  uint64_t v77 = a5;
  uint64_t v56 = v80;
  uint64_t v58 = *v79;
  uint64_t v57 = (uint64_t)v79[1];
  uint64_t v59 = (uint64_t)v79[2];
  uint64_t v60 = a3;
  Swift::Int v61 = (Swift::Int)v80[2];
  swift_retain();
  swift_retain();
  unint64_t result = OrderedSet._extractSubset(using:extraCapacity:)(v58, v57, v59, v61, v60, v42, a6);
  unint64_t v85 = result;
  unint64_t v86 = v62;
  char v63 = *v56;
  uint64_t v64 = (uint64_t)v56[1];
  if (v64 < 1) {
    uint64_t v65 = 0;
  }
  else {
    uint64_t v65 = *v63;
  }
  uint64_t v66 = 0;
  unsigned __int8 v67 = (uint64_t (**)(uint64_t, uint64_t))(v44 + 8);
  uint64_t v68 = (uint64_t)v78;
  while (2)
  {
    if (v65)
    {
      v65 &= v65 - 1;
LABEL_23:
      ContiguousArray.subscript.getter();
      uint64_t v69 = type metadata accessor for OrderedSet();
      OrderedSet._appendNew(_:)(v68, v69);
      unint64_t result = (*v67)(v68, a6);
      continue;
    }
    break;
  }
  uint64_t v70 = v66 + 1;
  if (__OFADD__(v66, 1)) {
    goto LABEL_36;
  }
  if (v70 >= v64)
  {
LABEL_33:
    unint64_t v72 = v86;
    long long v73 = v75;
    *BOOL v75 = v85;
    v73[1] = v72;
    return result;
  }
  uint64_t v71 = v63[v70];
  if (v71)
  {
    ++v66;
LABEL_32:
    uint64_t v65 = (v71 - 1) & v71;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v66 = v70 + 1;
    if (__OFADD__(v70, 1)) {
      break;
    }
    if (v66 >= v64) {
      goto LABEL_33;
    }
    uint64_t v71 = v63[v66];
    ++v70;
    if (v71) {
      goto LABEL_32;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t OrderedSet.formSymmetricDifference(_:)()
{
  specialized OrderedSet.formSymmetricDifference(_:)();
  swift_release();
  return swift_release();
}

unint64_t closure #1 in OrderedSet.symmetricDifference<A>(_:)@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, Swift::Int *a9@<X8>)
{
  uint64_t v58 = a9;
  uint64_t AssociatedConformanceWitness = a8;
  char v63 = a4;
  uint64_t v64 = a2;
  uint64_t v65 = a3;
  uint64_t v60 = a1;
  uint64_t v67 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v66 = (char *)&v57 - v15;
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)&v57 - v18;
  uint64_t v20 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v17);
  long long v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v59 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v25 = (char *)&v57 - v24;
  uint64_t v72 = a7;
  uint64_t v70 = OrderedSet.init()();
  uint64_t v71 = v26;
  Swift::Int v27 = ContiguousArray.count.getter();
  _UnsafeBitset.insertAll(upTo:)(v27);
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v22, v63, a6);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v63 = v25;
  uint64_t v28 = AssociatedTypeWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
  if (v29(v19, 1, a5) != 1)
  {
    Swift::Int v61 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
    BOOL v49 = (void (**)(char *, uint64_t))(v67 + 8);
    v61(v14, v19, a5);
    while (1)
    {
      unint64_t result = OrderedSet._find(_:)();
      if (v50)
      {
        type metadata accessor for OrderedSet();
        OrderedSet._append(_:)((uint64_t)v14);
      }
      else
      {
        uint64_t v51 = (result >> 3) & 0x1FFFFFFFFFFFFFF8;
        uint64_t v52 = *(uint64_t *)((char *)*v60 + v51);
        *(uint64_t *)((char *)*v60 + v51) = v52 & ~(1 << result);
        if ((v52 & (1 << result)) != 0)
        {
          uint64_t v53 = v60[2];
          BOOL v54 = __OFSUB__(v53, 1);
          uint64_t v55 = (uint64_t *)((char *)v53 - 1);
          if (v54) {
            goto LABEL_18;
          }
          v60[2] = v55;
        }
      }
      (*v49)(v14, a5);
      dispatch thunk of IteratorProtocol.next()();
      if (v29(v19, 1, a5) == 1) {
        break;
      }
      v61(v14, v19, a5);
    }
  }
  (*(void (**)(char *, uint64_t))(v59 + 8))(v63, v28);
  uint64_t v30 = *v60;
  uint64_t v31 = (uint64_t)v60[1];
  uint64_t v32 = (uint64_t)v60[2];
  uint64_t v33 = v71;
  swift_retain();
  swift_retain();
  uint64_t v34 = v64;
  swift_retain();
  uint64_t v35 = v65;
  swift_retain();
  Swift::Int v36 = ContiguousArray.count.getter();
  swift_release();
  swift_release();
  Swift::Int v37 = OrderedSet._extractSubset(using:extraCapacity:)(v30, v31, v32, v36, v34, v35, a5);
  Swift::Int v68 = v37;
  Swift::Int v69 = v38;
  uint64_t v65 = *(void *)(v33 + 16);
  if (v65)
  {
    uint64_t v39 = v33 + ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80));
    unint64_t result = swift_retain();
    unint64_t v41 = 0;
    uint64_t v42 = (uint64_t)v66;
    while (v41 < *(void *)(v33 + 16))
    {
      uint64_t v43 = v33;
      uint64_t v44 = v67;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v67 + 16))(v42, v39 + *(void *)(v67 + 72) * v41++, a5);
      uint64_t v45 = type metadata accessor for OrderedSet();
      OrderedSet._appendNew(_:)(v42, v45);
      uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t))(v44 + 8);
      uint64_t v33 = v43;
      unint64_t result = v46(v42, a5);
      if (v65 == v41)
      {
        swift_release();
        Swift::Int v47 = v68;
        Swift::Int v48 = v69;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
    Swift::Int v47 = v37;
    Swift::Int v48 = v38;
LABEL_16:
    swift_release();
    unint64_t result = swift_release();
    uint64_t v56 = v58;
    Swift::Int *v58 = v47;
    v56[1] = v48;
  }
  return result;
}

uint64_t OrderedSet._subtracting<A>(_:)()
{
  if (ContiguousArray.count.getter() < 1)
  {
    uint64_t v2 = OrderedSet.init()();
    goto LABEL_5;
  }
  uint64_t v0 = ContiguousArray.count.getter();
  uint64_t v4 = (uint64_t)&v4;
  uint64_t v1 = MEMORY[0x270FA5388](v0);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  MEMORY[0x270FA5388](v1);
  type metadata accessor for OrderedSet();
  specialized static _UnsafeBitset._withTemporaryBitset(capacity:run:)(v0, (uint64_t (*)(void **))partial apply for closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:));
  if (v6)
  {
    uint64_t v2 = v5;
LABEL_5:
    swift_release();
    swift_release();
    return v2;
  }
  __break(1u);
  uint64_t result = outlined consume of OrderedSet<Input>?(v5, v6);
  __break(1u);
  return result;
}

unint64_t closure #1 in OrderedSet._subtracting<A>(_:)@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, uint64_t *a9@<X8>)
{
  BOOL v49 = a9;
  uint64_t v53 = a8;
  uint64_t v54 = a4;
  uint64_t v57 = a7;
  uint64_t v55 = a2;
  uint64_t v50 = *(void *)(a5 - 8);
  uint64_t v51 = a1;
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v48 - v16;
  uint64_t v18 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v23 = (char *)&v48 - v22;
  uint64_t v56 = a3;
  Swift::Int v24 = ContiguousArray.count.getter();
  _UnsafeBitset.insertAll(upTo:)(v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v54, a6);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v53 = v23;
  uint64_t v54 = AssociatedTypeWitness;
  uint64_t v52 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v26 = v50;
  Swift::Int v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
  if (v27(v17, 1, a5) != 1)
  {
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    uint64_t v40 = (void (**)(char *, uint64_t))(v26 + 8);
    v39(v13, v17, a5);
    while (1)
    {
      unint64_t result = OrderedSet._find(_:)();
      if ((v41 & 1) == 0)
      {
        uint64_t v42 = (result >> 3) & 0x1FFFFFFFFFFFFFF8;
        uint64_t v43 = *(uint64_t *)((char *)*v51 + v42);
        *(uint64_t *)((char *)*v51 + v42) = v43 & ~(1 << result);
        if ((v43 & (1 << result)) != 0)
        {
          uint64_t v44 = v51[2];
          BOOL v45 = __OFSUB__(v44, 1);
          uint64_t v46 = (uint64_t *)((char *)v44 - 1);
          if (v45)
          {
            __break(1u);
            return result;
          }
          v51[2] = v46;
          if (!v46)
          {
            uint64_t v35 = OrderedSet.init()();
            uint64_t v37 = v47;
            (*v40)(v13, a5);
            unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v53, v54);
            goto LABEL_3;
          }
        }
      }
      (*v40)(v13, a5);
      dispatch thunk of IteratorProtocol.next()();
      if (v27(v17, 1, a5) == 1) {
        break;
      }
      v39(v13, v17, a5);
    }
  }
  (*(void (**)(char *, uint64_t))(v48 + 8))(v53, v54);
  uint64_t v28 = *v51;
  uint64_t v29 = (uint64_t)v51[1];
  uint64_t v30 = (uint64_t)v51[2];
  Swift::Int v31 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  uint64_t v32 = v55;
  swift_retain();
  uint64_t v33 = v56;
  swift_retain();
  unint64_t result = OrderedSet._extractSubset(using:extraCapacity:)(v28, v29, v30, v31, v32, v33, a5);
  uint64_t v35 = result;
  uint64_t v37 = v36;
LABEL_3:
  Swift::Int v38 = v49;
  *BOOL v49 = v35;
  v38[1] = v37;
  return result;
}

uint64_t specialized OrderedSet.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v19[2] = a1;
  void v19[3] = a2;
  uint64_t v8 = *(void *)(a5 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  char v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v19 - v12;
  uint64_t result = OrderedSet.init()();
  uint64_t v20 = result;
  uint64_t v21 = v15;
  uint64_t v16 = *(void *)(a4 + 16);
  if (v16)
  {
    v19[1] = a3;
    swift_retain();
    swift_retain();
    for (uint64_t i = 0; i != v16; ++i)
    {
      ContiguousArray.subscript.getter();
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, a5);
      if (OrderedSet.contains(_:)())
      {
        uint64_t v18 = type metadata accessor for OrderedSet();
        OrderedSet._appendNew(_:)((uint64_t)v11, v18);
      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a5);
    }
    swift_release();
    swift_release();
    return v20;
  }
  return result;
}

uint64_t specialized OrderedSet.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a1;
  v5[1] = a2;
  swift_getWitnessTable();
  return OrderedSet.append<A>(contentsOf:)((uint64_t)v5, a3, a3);
}

uint64_t specialized OrderedSet.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for OrderedSet();
  v8[0] = a1;
  v8[1] = a2;
  swift_getWitnessTable();
  OrderedSet.append<A>(contentsOf:)((uint64_t)v8, v5, v5);
  return a3;
}

uint64_t specialized OrderedSet.symmetricDifference(_:)()
{
  uint64_t v0 = ContiguousArray.count.getter();
  uint64_t v2 = 0;
  type metadata accessor for OrderedSet();
  specialized static _UnsafeBitset._withTemporaryBitset(capacity:run:)(v0, (uint64_t (*)(void **))closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)partial apply);
  __break(1u);
  uint64_t result = outlined consume of OrderedSet<Input>?(0, v2);
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet.formSymmetricDifference(_:)()
{
  uint64_t v1 = specialized OrderedSet.symmetricDifference(_:)();
  uint64_t v3 = v2;
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v0 = v1;
  v0[1] = v3;
  return result;
}

uint64_t specialized OrderedSet.union<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for OrderedSet();
  OrderedSet.append<A>(contentsOf:)(a1, v7, a5);
  return a2;
}

uint64_t specialized OrderedSet.intersection<A>(_:)()
{
  uint64_t v0 = ContiguousArray.count.getter();
  uint64_t v2 = 0;
  type metadata accessor for OrderedSet();
  specialized static _UnsafeBitset._withTemporaryBitset(capacity:run:)(v0, (uint64_t (*)(void **))closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)partial apply);
  __break(1u);
  uint64_t result = outlined consume of OrderedSet<Input>?(0, v2);
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet.symmetricDifference<A>(_:)()
{
  uint64_t v0 = ContiguousArray.count.getter();
  uint64_t v2 = 0;
  type metadata accessor for OrderedSet();
  specialized static _UnsafeBitset._withTemporaryBitset(capacity:run:)(v0, (uint64_t (*)(void **))closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)partial apply);
  __break(1u);
  uint64_t result = outlined consume of OrderedSet<Input>?(0, v2);
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet.formSymmetricDifference<A>(_:)()
{
  uint64_t v1 = specialized OrderedSet.symmetricDifference<A>(_:)();
  uint64_t v3 = v2;
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v0 = v1;
  v0[1] = v3;
  return result;
}

uint64_t partial apply for closure #1 in OrderedSet._subtracting<A>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in OrderedSet._subtracting<A>(_:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))closure #1 in OrderedSet._subtracting<A>(_:));
}

uint64_t partial apply for closure #1 in OrderedSet.symmetricDifference<A>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in OrderedSet._subtracting<A>(_:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))closure #1 in OrderedSet.symmetricDifference<A>(_:));
}

uint64_t partial apply for closure #1 in OrderedSet._subtracting<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void))
{
  return a2(a1, v2[6], v2[7], v2[8], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t partial apply for closure #1 in OrderedSet.symmetricDifference(_:)()
{
  return closure #1 in OrderedSet.symmetricDifference(_:)();
}

unint64_t partial apply for closure #1 in closure #1 in OrderedSet.symmetricDifference(_:)@<X0>(uint64_t **a1@<X0>, unint64_t *a2@<X8>)
{
  return closure #1 in closure #1 in OrderedSet.symmetricDifference(_:)(a1, *(uint64_t ***)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

Swift::Int partial apply for closure #1 in OrderedSet.intersection<A>(_:)@<X0>(uint64_t a1@<X0>, Swift::Int *a2@<X8>)
{
  return closure #1 in OrderedSet.intersection<A>(_:)(a1, v2[6], v2[7], v2[8], v2[2], v2[3], v2[4], a2);
}

uint64_t closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)(a1);
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

id MetalStitchingBackend.specializeGetter(for:field:offset:library:)(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id result = specialized MetalStitchingBackend.specializeGetter(for:field:offset:library:)(a1, *(void *)a2, *(void **)(a2 + 8), *(void *)(a2 + 16), *(id *)(a2 + 40), a3, a4);
  if (v4) {
    return (id)v6;
  }
  return result;
}